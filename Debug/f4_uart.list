
f4_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f230  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800f3d0  0800f3d0  0001f3d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f864  0800f864  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f864  0800f864  0001f864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f86c  0800f86c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f86c  0800f86c  0001f86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f874  0800f874  0001f874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800f87c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fa0  200001dc  0800fa58  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000117c  0800fa58  0002117c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da5c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed4  00000000  00000000  0003dc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  00040b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001720  00000000  00000000  00042308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b29f  00000000  00000000  00043a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f7f  00000000  00000000  0005ecc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2d44  00000000  00000000  00074c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011798a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e1c  00000000  00000000  001179dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f3b8 	.word	0x0800f3b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800f3b8 	.word	0x0800f3b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <_ZN7RPLidar3endEv>:
extern uint8_t uart_rx_buffer[RX_BUFFER_SIZE];
extern float dist[30];
static bool uart1_is_open = false;

// Закрытие UART1
void RPLidar::end() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    if (isOpen()) {
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f811 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <_ZN7RPLidar3endEv+0x20>
        HAL_UART_DeInit(&huart2); // Деинициализация UART1
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <_ZN7RPLidar3endEv+0x28>)
 8000f72:	f009 fc88 	bl	800a886 <HAL_UART_DeInit>
        uart1_is_open = false;    // Отмечаем UART как закрытый
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <_ZN7RPLidar3endEv+0x2c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
    }
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200003f8 	.word	0x200003f8
 8000f88:	200001f8 	.word	0x200001f8

08000f8c <_ZN7RPLidar6isOpenEv>:

// Проверка состояния UART1 (открыт или закрыт)
bool RPLidar::isOpen() {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
    return uart1_is_open; // Возвращаем текущее состояние UART1
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <_ZN7RPLidar6isOpenEv+0x18>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	200001f8 	.word	0x200001f8

08000fa8 <_ZN7RPLidarC1Ev>:

RPLidar::RPLidar() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

	clearArray(distances);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	330c      	adds	r3, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f9a9 	bl	800130e <_ZN7RPLidar10clearArrayEPf>
	clearArray(minDist);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 f9a2 	bl	800130e <_ZN7RPLidar10clearArrayEPf>
    _currentMeasurement.distance = 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
    _currentMeasurement.angle = 0;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
    _currentMeasurement.quality = 0;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	721a      	strb	r2, [r3, #8]
    _currentMeasurement.startBit = 0;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	725a      	strb	r2, [r3, #9]
}
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_ZN7RPLidarD1Ev>:


RPLidar::~RPLidar()
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
{
    end();
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffaf 	bl	8000f5c <_ZN7RPLidar3endEv>
}
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <_ZN7RPLidar5beginEv>:


// Инициализация UART1 для работы с RPLIDAR
bool RPLidar::begin() {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    // Если UART уже открыт, завершаем его работу
    if (isOpen()) {
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ffbb 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
   // huart2.Init.Mode = UART_MODE_TX_RX;
   // huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   // huart2.Init.OverSampling = UART_OVERSAMPLING_16;

    // Инициализация UART1
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001016:	480a      	ldr	r0, [pc, #40]	; (8001040 <_ZN7RPLidar5beginEv+0x38>)
 8001018:	f009 fbe8 	bl	800a7ec <HAL_UART_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf14      	ite	ne
 8001022:	2301      	movne	r3, #1
 8001024:	2300      	moveq	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <_ZN7RPLidar5beginEv+0x28>
        return false; // Если инициализация не удалась
 800102c:	2300      	movs	r3, #0
 800102e:	e003      	b.n	8001038 <_ZN7RPLidar5beginEv+0x30>
    }

    // Отмечаем UART как открытый
    uart1_is_open = true;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <_ZN7RPLidar5beginEv+0x3c>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
    return true;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200003f8 	.word	0x200003f8
 8001044:	200001f8 	.word	0x200001f8

08001048 <_ZN7RPLidar12_sendCommandEhPKvj>:

uint32_t RPLidar::_sendCommand(uint8_t cmd, const void *payload, size_t payloadsize) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	460b      	mov	r3, r1
 8001056:	72fb      	strb	r3, [r7, #11]
    rplidar_cmd_packet_t pkt_header;
    uint8_t checksum = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	75fb      	strb	r3, [r7, #23]
    HAL_StatusTypeDef status;

    // Проверяем наличие полезной нагрузки
    if (payloadsize && payload) {
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <_ZN7RPLidar12_sendCommandEhPKvj+0x28>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <_ZN7RPLidar12_sendCommandEhPKvj+0x28>
        cmd |= RPLIDAR_CMDFLAG_HAS_PAYLOAD;
 8001068:	7afb      	ldrb	r3, [r7, #11]
 800106a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800106e:	72fb      	strb	r3, [r7, #11]
    }

    // Формируем заголовок команды
    pkt_header.syncByte = RPLIDAR_CMD_SYNC_BYTE;
 8001070:	23a5      	movs	r3, #165	; 0xa5
 8001072:	763b      	strb	r3, [r7, #24]
    pkt_header.cmd_flag = cmd;
 8001074:	7afb      	ldrb	r3, [r7, #11]
 8001076:	767b      	strb	r3, [r7, #25]

    // Отправляем заголовок (2 байта)
    status = HAL_UART_Transmit(&huart2, (uint8_t *)&pkt_header, sizeof(pkt_header), HAL_MAX_DELAY);
 8001078:	f107 0118 	add.w	r1, r7, #24
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	2203      	movs	r2, #3
 8001082:	4833      	ldr	r0, [pc, #204]	; (8001150 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 8001084:	f009 fc2e 	bl	800a8e4 <HAL_UART_Transmit>
 8001088:	4603      	mov	r3, r0
 800108a:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) {
 800108c:	7efb      	ldrb	r3, [r7, #27]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <_ZN7RPLidar12_sendCommandEhPKvj+0x4e>
        return RESULT_OPERATION_FAIL; // Если произошла ошибка при передаче, возвращаем ошибку
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001094:	e057      	b.n	8001146 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
    }

    // Если есть полезная нагрузка
    if (cmd & RPLIDAR_CMDFLAG_HAS_PAYLOAD) {
 8001096:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800109a:	2b00      	cmp	r3, #0
 800109c:	da52      	bge.n	8001144 <_ZN7RPLidar12_sendCommandEhPKvj+0xfc>
        // Инициализируем контрольную сумму
        checksum ^= RPLIDAR_CMD_SYNC_BYTE;
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	f083 035a 	eor.w	r3, r3, #90	; 0x5a
 80010a4:	43db      	mvns	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	75fb      	strb	r3, [r7, #23]
        checksum ^= cmd;
 80010aa:	7dfa      	ldrb	r2, [r7, #23]
 80010ac:	7afb      	ldrb	r3, [r7, #11]
 80010ae:	4053      	eors	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	75fb      	strb	r3, [r7, #23]
        checksum ^= (payloadsize & 0xFF);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	4053      	eors	r3, r2
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	75fb      	strb	r3, [r7, #23]

        // Вычисляем контрольную сумму для полезной нагрузки
        for (size_t pos = 0; pos < payloadsize; ++pos) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d20b      	bcs.n	80010e4 <_ZN7RPLidar12_sendCommandEhPKvj+0x9c>
            checksum ^= ((uint8_t *)payload)[pos];
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	4413      	add	r3, r2
 80010d2:	781a      	ldrb	r2, [r3, #0]
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	4053      	eors	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	75fb      	strb	r3, [r7, #23]
        for (size_t pos = 0; pos < payloadsize; ++pos) {
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	3301      	adds	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	e7ef      	b.n	80010c4 <_ZN7RPLidar12_sendCommandEhPKvj+0x7c>
        }

        // Отправляем размер полезной нагрузки (1 байт)
        uint8_t sizebyte = (uint8_t)payloadsize;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	75bb      	strb	r3, [r7, #22]
        status = HAL_UART_Transmit(&huart2, &sizebyte, 1, HAL_MAX_DELAY);
 80010ea:	f107 0116 	add.w	r1, r7, #22
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	2201      	movs	r2, #1
 80010f4:	4816      	ldr	r0, [pc, #88]	; (8001150 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 80010f6:	f009 fbf5 	bl	800a8e4 <HAL_UART_Transmit>
 80010fa:	4603      	mov	r3, r0
 80010fc:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 80010fe:	7efb      	ldrb	r3, [r7, #27]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <_ZN7RPLidar12_sendCommandEhPKvj+0xc0>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001106:	e01e      	b.n	8001146 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }

        // Отправляем полезную нагрузку
        status = HAL_UART_Transmit(&huart2, (uint8_t *)payload, payloadsize, HAL_MAX_DELAY);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b29a      	uxth	r2, r3
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	480f      	ldr	r0, [pc, #60]	; (8001150 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 8001114:	f009 fbe6 	bl	800a8e4 <HAL_UART_Transmit>
 8001118:	4603      	mov	r3, r0
 800111a:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 800111c:	7efb      	ldrb	r3, [r7, #27]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <_ZN7RPLidar12_sendCommandEhPKvj+0xde>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001124:	e00f      	b.n	8001146 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }

        // Отправляем контрольную сумму (1 байт)
        status = HAL_UART_Transmit(&huart2, &checksum, 1, HAL_MAX_DELAY);
 8001126:	f107 0117 	add.w	r1, r7, #23
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	2201      	movs	r2, #1
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 8001132:	f009 fbd7 	bl	800a8e4 <HAL_UART_Transmit>
 8001136:	4603      	mov	r3, r0
 8001138:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 800113a:	7efb      	ldrb	r3, [r7, #27]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <_ZN7RPLidar12_sendCommandEhPKvj+0xfc>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001142:	e000      	b.n	8001146 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }
    }

    return RESULT_OK; // Если все данные успешно отправлены
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200003f8 	.word	0x200003f8
 8001154:	80008001 	.word	0x80008001

08001158 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>:

    return RESULT_OK; // Если все данные успешно отправлены
}


uint32_t RPLidar::_waitResponseHeader(rplidar_ans_header_t *header, uint32_t timeout) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
    uint32_t startTick = HAL_GetTick(); // Запоминаем начальное время
 8001164:	f004 fc2a 	bl	80059bc <HAL_GetTick>
 8001168:	61b8      	str	r0, [r7, #24]
    uint8_t recvPos = 0; // Текущая позиция приёмного буфера
 800116a:	2300      	movs	r3, #0
 800116c:	77fb      	strb	r3, [r7, #31]
    uint8_t *headerbuf = (uint8_t *)header; // Преобразуем указатель на заголовок к массиву байтов
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	617b      	str	r3, [r7, #20]
    uint8_t currentByte;

    while ((HAL_GetTick() - startTick) < timeout) { // Пока не истёк таймаут
 8001172:	f004 fc23 	bl	80059bc <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	bf8c      	ite	hi
 8001182:	2301      	movhi	r3, #1
 8001184:	2300      	movls	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d039      	beq.n	8001200 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa8>
        // Считываем один байт через UART
        HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, &currentByte, 1, timeout - (HAL_GetTick() - startTick));
 800118c:	f004 fc16 	bl	80059bc <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	1a9a      	subs	r2, r3, r2
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	f107 0112 	add.w	r1, r7, #18
 800119e:	2201      	movs	r2, #1
 80011a0:	481a      	ldr	r0, [pc, #104]	; (800120c <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb4>)
 80011a2:	f009 fc31 	bl	800aa08 <HAL_UART_Receive>
 80011a6:	4603      	mov	r3, r0
 80011a8:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK) { // Если байт успешно прочитан
 80011aa:	7cfb      	ldrb	r3, [r7, #19]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d11f      	bne.n	80011f0 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x98>
            switch (recvPos) {
 80011b0:	7ffb      	ldrb	r3, [r7, #31]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x64>
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d004      	beq.n	80011c4 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x6c>
 80011ba:	e00c      	b.n	80011d6 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7e>
                case 0:
                    // Проверяем первый синхронизирующий байт
                    if (currentByte != RPLIDAR_ANS_SYNC_BYTE1) {
 80011bc:	7cbb      	ldrb	r3, [r7, #18]
 80011be:	2ba5      	cmp	r3, #165	; 0xa5
 80011c0:	d006      	beq.n	80011d0 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x78>
                        continue; // Если не совпадает, игнорируем байт и продолжаем
 80011c2:	e01c      	b.n	80011fe <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa6>
                    }
                    break;
                case 1:
                    // Проверяем второй синхронизирующий байт
                    if (currentByte != RPLIDAR_ANS_SYNC_BYTE2) {
 80011c4:	7cbb      	ldrb	r3, [r7, #18]
 80011c6:	2b5a      	cmp	r3, #90	; 0x5a
 80011c8:	d004      	beq.n	80011d4 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7c>
                        recvPos = 0; // Если не совпадает, сбрасываем позицию
 80011ca:	2300      	movs	r3, #0
 80011cc:	77fb      	strb	r3, [r7, #31]
                        continue;
 80011ce:	e016      	b.n	80011fe <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa6>
                    break;
 80011d0:	bf00      	nop
 80011d2:	e000      	b.n	80011d6 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7e>
                    }
                    break;
 80011d4:	bf00      	nop
            }
            // Записываем байт в буфер заголовка
            headerbuf[recvPos++] = currentByte;
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	77fa      	strb	r2, [r7, #31]
 80011dc:	461a      	mov	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	4413      	add	r3, r2
 80011e2:	7cba      	ldrb	r2, [r7, #18]
 80011e4:	701a      	strb	r2, [r3, #0]

            // Если заголовок полностью считан
            if (recvPos == sizeof(rplidar_ans_header_t)) return RESULT_OK; // Возвращаем успешный результат
 80011e6:	7ffb      	ldrb	r3, [r7, #31]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	d1c2      	bne.n	8001172 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x1a>
 80011ec:	2300      	movs	r3, #0
 80011ee:	e008      	b.n	8001202 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
        }
        else if (status == HAL_TIMEOUT) return RESULT_OPERATION_TIMEOUT; // Если истёк таймаут
 80011f0:	7cfb      	ldrb	r3, [r7, #19]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d101      	bne.n	80011fa <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa2>
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb8>)
 80011f8:	e003      	b.n	8001202 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
        else return RESULT_OPERATION_FAIL; // Если произошла ошибка
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xbc>)
 80011fc:	e001      	b.n	8001202 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
    while ((HAL_GetTick() - startTick) < timeout) { // Пока не истёк таймаут
 80011fe:	e7b8      	b.n	8001172 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x1a>
    }

    return RESULT_OPERATION_TIMEOUT; // Если цикл завершился без успешного завершения
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb8>)
}
 8001202:	4618      	mov	r0, r3
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200003f8 	.word	0x200003f8
 8001210:	80008002 	.word	0x80008002
 8001214:	80008001 	.word	0x80008001

08001218 <_ZN7RPLidar4stopEv>:
    // Если время ожидания истекло
    return RESULT_OPERATION_TIMEOUT;
}

uint32_t RPLidar::stop()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    if (!isOpen()) return RESULT_OPERATION_FAIL;
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff feb3 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 8001226:	4603      	mov	r3, r0
 8001228:	f083 0301 	eor.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <_ZN7RPLidar4stopEv+0x1e>
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <_ZN7RPLidar4stopEv+0x38>)
 8001234:	e007      	b.n	8001246 <_ZN7RPLidar4stopEv+0x2e>
    uint32_t ans = _sendCommand(RPLIDAR_CMD_STOP,NULL,0);
 8001236:	2300      	movs	r3, #0
 8001238:	2200      	movs	r2, #0
 800123a:	2125      	movs	r1, #37	; 0x25
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff03 	bl	8001048 <_ZN7RPLidar12_sendCommandEhPKvj>
 8001242:	60f8      	str	r0, [r7, #12]
    return ans;
 8001244:	68fb      	ldr	r3, [r7, #12]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	80008001 	.word	0x80008001

08001254 <_ZN7RPLidar9startScanEbm>:

uint32_t RPLidar::startScan(bool force, uint32_t timeout) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	460b      	mov	r3, r1
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	72fb      	strb	r3, [r7, #11]
    uint32_t ans;

    // Проверяем, открыт ли UART
    if (!isOpen()) return RESULT_OPERATION_FAIL;
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f7ff fe92 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 8001268:	4603      	mov	r3, r0
 800126a:	f083 0301 	eor.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <_ZN7RPLidar9startScanEbm+0x24>
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <_ZN7RPLidar9startScanEbm+0x9c>)
 8001276:	e036      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>

    // Останавливаем предыдущую операцию
    stop();
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff ffcd 	bl	8001218 <_ZN7RPLidar4stopEv>

    // Отправляем команду на сканирование

        uint8_t command = force ? RPLIDAR_CMD_FORCE_SCAN : RPLIDAR_CMD_SCAN;
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <_ZN7RPLidar9startScanEbm+0x34>
 8001284:	2321      	movs	r3, #33	; 0x21
 8001286:	e000      	b.n	800128a <_ZN7RPLidar9startScanEbm+0x36>
 8001288:	2320      	movs	r3, #32
 800128a:	77fb      	strb	r3, [r7, #31]
        ans = _sendCommand(command, NULL, 0);
 800128c:	7ff9      	ldrb	r1, [r7, #31]
 800128e:	2300      	movs	r3, #0
 8001290:	2200      	movs	r2, #0
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff fed8 	bl	8001048 <_ZN7RPLidar12_sendCommandEhPKvj>
 8001298:	61b8      	str	r0, [r7, #24]
        if (IS_FAIL(ans)) return ans;
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b00      	cmp	r3, #0
 800129e:	da01      	bge.n	80012a4 <_ZN7RPLidar9startScanEbm+0x50>
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	e020      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>

        // Ожидание заголовка подтверждения
        rplidar_ans_header_t response_header;
        if (IS_FAIL(ans = _waitResponseHeader(&response_header, timeout))) return ans;
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	4619      	mov	r1, r3
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f7ff ff53 	bl	8001158 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>
 80012b2:	61b8      	str	r0, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	0fdb      	lsrs	r3, r3, #31
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <_ZN7RPLidar9startScanEbm+0x6e>
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	e011      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>

        // Проверяем тип заголовка
        if (response_header.type != RPLIDAR_ANS_TYPE_MEASUREMENT) return RESULT_INVALID_DATA;
 80012c2:	7dbb      	ldrb	r3, [r7, #22]
 80012c4:	2b81      	cmp	r3, #129	; 0x81
 80012c6:	d002      	beq.n	80012ce <_ZN7RPLidar9startScanEbm+0x7a>
 80012c8:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80012cc:	e00b      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>

        // Проверяем размер заголовка
        if (response_header.size < sizeof(rplidar_response_measurement_node_t)) return RESULT_INVALID_DATA;
 80012ce:	8a7b      	ldrh	r3, [r7, #18]
 80012d0:	8aba      	ldrh	r2, [r7, #20]
 80012d2:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80012d6:	0412      	lsls	r2, r2, #16
 80012d8:	4313      	orrs	r3, r2
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d802      	bhi.n	80012e4 <_ZN7RPLidar9startScanEbm+0x90>
 80012de:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80012e2:	e000      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>


    return RESULT_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	80008001 	.word	0x80008001

080012f4 <_ZN7RPLidar7getDistEv>:

void RPLidar::startUart_IT(){
	HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 1);
}

float* RPLidar::getDist() {  // Аргумент по умолчанию здесь не указывается
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    return minDist;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_ZN7RPLidar10clearArrayEPf>:

void RPLidar::setDist(uint32_t i, float value){
	minDist[i] = value;
}

void RPLidar::clearArray( float array[361]){
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < sizeof(array) / sizeof(array[0]); ++i) {
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10a      	bne.n	8001338 <_ZN7RPLidar10clearArrayEPf+0x2a>
    	array[i] = 0.0f;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	4413      	add	r3, r2
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(array) / sizeof(array[0]); ++i) {
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3301      	adds	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e7f1      	b.n	800131c <_ZN7RPLidar10clearArrayEPf+0xe>
    }
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_ZN7RPLidar12clearMinDistEv>:

void RPLidar::clearMinDist(){
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < sizeof(minDist) / sizeof(minDist[0]); ++i) {
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001356:	d80c      	bhi.n	8001372 <_ZN7RPLidar12clearMinDistEv+0x2e>
    	minDist[i] = 0.0f;
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(minDist) / sizeof(minDist[0]); ++i) {
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3301      	adds	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	e7ee      	b.n	8001350 <_ZN7RPLidar12clearMinDistEv+0xc>
    }
}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <_ZN7RPLidar9constrainElll>:


float RPLidar::getDist(int i) {  // Аргумент по умолчанию здесь не указывается
    return minDist[i];
}
float RPLidar::constrain(int32_t value,int32_t num1,int32_t num2){
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	603b      	str	r3, [r7, #0]
	if (value>num2) value = num2;
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	dd01      	ble.n	8001398 <_ZN7RPLidar9constrainElll+0x1a>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	60bb      	str	r3, [r7, #8]
	if (value<num1) value = num1;
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	da01      	bge.n	80013a4 <_ZN7RPLidar9constrainElll+0x26>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	60bb      	str	r3, [r7, #8]
	return value;
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	ee07 3a90 	vmov	s15, r3
 80013aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80013ae:	eeb0 0a67 	vmov.f32	s0, s15
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <_ZN7RPLidar11reWriteDistEv>:


void RPLidar::reWriteDist() {
 80013bc:	b480      	push	{r7}
 80013be:	b08b      	sub	sp, #44	; 0x2c
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
    for (int angle = 0; angle < 360; angle += 9) { // Шаг изменения угла 9 градусов
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80013ce:	da69      	bge.n	80014a4 <_ZN7RPLidar11reWriteDistEv+0xe8>
        float sumDistance = 0.0f; // Сумма расстояний
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
        int validCount = 0;       // Счётчик валидных значений
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]

        // Определяем диапазон для поиска минимального расстояния
        int startAngle = angle - 4;
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	3b04      	subs	r3, #4
 80013de:	613b      	str	r3, [r7, #16]
        int endAngle = angle + 4;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	3304      	adds	r3, #4
 80013e4:	60fb      	str	r3, [r7, #12]

        // Проверяем значения в диапазоне
        for (int currentAngle = startAngle; currentAngle <= endAngle; ++currentAngle) {
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dc36      	bgt.n	8001460 <_ZN7RPLidar11reWriteDistEv+0xa4>
            // Обрабатываем циклический характер углов
            int wrappedAngle = currentAngle;
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	617b      	str	r3, [r7, #20]
            if (wrappedAngle < 0) {
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	da04      	bge.n	8001406 <_ZN7RPLidar11reWriteDistEv+0x4a>
                wrappedAngle += 360; // Если угол отрицательный, добавляем 360
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e007      	b.n	8001416 <_ZN7RPLidar11reWriteDistEv+0x5a>
            } else if (wrappedAngle >= 360) {
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800140c:	db03      	blt.n	8001416 <_ZN7RPLidar11reWriteDistEv+0x5a>
                wrappedAngle -= 360; // Если угол больше или равен 360, вычитаем 360
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001414:	617b      	str	r3, [r7, #20]
            }

            // Проверяем, чтобы угол не выходил за пределы массива
            if (wrappedAngle >= 0 && wrappedAngle < 360) {
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db1d      	blt.n	8001458 <_ZN7RPLidar11reWriteDistEv+0x9c>
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001422:	da19      	bge.n	8001458 <_ZN7RPLidar11reWriteDistEv+0x9c>
                float distance = distances[wrappedAngle];
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3302      	adds	r3, #2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3304      	adds	r3, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	60bb      	str	r3, [r7, #8]

                // Учитываем только валидные расстояния (> 0)
                if (distance > 0) {
 8001434:	edd7 7a02 	vldr	s15, [r7, #8]
 8001438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001440:	dd0a      	ble.n	8001458 <_ZN7RPLidar11reWriteDistEv+0x9c>
                    sumDistance += distance; // Добавляем расстояние к сумме
 8001442:	ed97 7a08 	vldr	s14, [r7, #32]
 8001446:	edd7 7a02 	vldr	s15, [r7, #8]
 800144a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144e:	edc7 7a08 	vstr	s15, [r7, #32]
                    ++validCount;            // Увеличиваем количество валидных значений
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3301      	adds	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
        for (int currentAngle = startAngle; currentAngle <= endAngle; ++currentAngle) {
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	3301      	adds	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	e7c4      	b.n	80013ea <_ZN7RPLidar11reWriteDistEv+0x2e>
                }
            }
        }

        // Если хотя бы 4 расстояния валидны, записываем среднее значение
        if (validCount >= 3) {
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b02      	cmp	r3, #2
 8001464:	dd11      	ble.n	800148a <_ZN7RPLidar11reWriteDistEv+0xce>
            minDist[angle] = sumDistance / validCount; // Среднее значение
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	ee07 3a90 	vmov	s15, r3
 800146c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001470:	edd7 6a08 	vldr	s13, [r7, #32]
 8001474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	edc3 7a00 	vstr	s15, [r3]
 8001488:	e008      	b.n	800149c <_ZN7RPLidar11reWriteDistEv+0xe0>
        } else {
            minDist[angle] = 0.0f; // Если недостаточно валидных значений, записываем 0
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
    for (int angle = 0; angle < 360; angle += 9) { // Шаг изменения угла 9 градусов
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	3309      	adds	r3, #9
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
 80014a2:	e791      	b.n	80013c8 <_ZN7RPLidar11reWriteDistEv+0xc>
        }
    }
}
 80014a4:	bf00      	nop
 80014a6:	372c      	adds	r7, #44	; 0x2c
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <_ZN7RPLidar9onReceiveEh>:
    return RESULT_OPERATION_TIMEOUT;
}



void RPLidar::onReceive(uint8_t byte) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
    static uint8_t recvPos = 0; // Позиция для записи данных
    static rplidar_response_measurement_node_t node; // Текущая структура данных
    uint8_t *nodebuf = (uint8_t *)&node;
 80014bc:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <_ZN7RPLidar9onReceiveEh+0x1b8>)
 80014be:	61bb      	str	r3, [r7, #24]

    switch (recvPos) {
 80014c0:	4b6a      	ldr	r3, [pc, #424]	; (800166c <_ZN7RPLidar9onReceiveEh+0x1bc>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <_ZN7RPLidar9onReceiveEh+0x1e>
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d01b      	beq.n	8001504 <_ZN7RPLidar9onReceiveEh+0x54>
 80014cc:	e02f      	b.n	800152e <_ZN7RPLidar9onReceiveEh+0x7e>
        case 0: // Ожидаем бит синхронизации и его инверсии
            {
                uint8_t tmp = (byte >> 1);
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	085b      	lsrs	r3, r3, #1
 80014d2:	75fb      	strb	r3, [r7, #23]
                if ((tmp ^ byte) & 0x1) {
 80014d4:	7dfa      	ldrb	r2, [r7, #23]
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	4053      	eors	r3, r2
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00b      	beq.n	80014fc <_ZN7RPLidar9onReceiveEh+0x4c>
                    nodebuf[recvPos++] = byte; // Сохраняем первый байт
 80014e4:	4b61      	ldr	r3, [pc, #388]	; (800166c <_ZN7RPLidar9onReceiveEh+0x1bc>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	b2d1      	uxtb	r1, r2
 80014ec:	4a5f      	ldr	r2, [pc, #380]	; (800166c <_ZN7RPLidar9onReceiveEh+0x1bc>)
 80014ee:	7011      	strb	r1, [r2, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4413      	add	r3, r2
 80014f6:	78fa      	ldrb	r2, [r7, #3]
 80014f8:	701a      	strb	r2, [r3, #0]
                } else {
                    recvPos = 0; // Сброс, если проверка не прошла
                    return;
                }
            }
            break;
 80014fa:	e024      	b.n	8001546 <_ZN7RPLidar9onReceiveEh+0x96>
                    recvPos = 0; // Сброс, если проверка не прошла
 80014fc:	4b5b      	ldr	r3, [pc, #364]	; (800166c <_ZN7RPLidar9onReceiveEh+0x1bc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
                    return;
 8001502:	e0ad      	b.n	8001660 <_ZN7RPLidar9onReceiveEh+0x1b0>

        case 1: // Ожидаем, что самый старший бит равен 1
            {
                if (byte & RPLIDAR_RESP_MEASUREMENT_CHECKBIT) {
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00b      	beq.n	8001526 <_ZN7RPLidar9onReceiveEh+0x76>
                    nodebuf[recvPos++] = byte; // Сохраняем второй байт
 800150e:	4b57      	ldr	r3, [pc, #348]	; (800166c <_ZN7RPLidar9onReceiveEh+0x1bc>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	b2d1      	uxtb	r1, r2
 8001516:	4a55      	ldr	r2, [pc, #340]	; (800166c <_ZN7RPLidar9onReceiveEh+0x1bc>)
 8001518:	7011      	strb	r1, [r2, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	4413      	add	r3, r2
 8001520:	78fa      	ldrb	r2, [r7, #3]
 8001522:	701a      	strb	r2, [r3, #0]
                } else {
                    recvPos = 0; // Сброс, если проверка не прошла
                    return;
                }
            }
            break;
 8001524:	e00f      	b.n	8001546 <_ZN7RPLidar9onReceiveEh+0x96>
                    recvPos = 0; // Сброс, если проверка не прошла
 8001526:	4b51      	ldr	r3, [pc, #324]	; (800166c <_ZN7RPLidar9onReceiveEh+0x1bc>)
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]
                    return;
 800152c:	e098      	b.n	8001660 <_ZN7RPLidar9onReceiveEh+0x1b0>

        default: // Сохраняем последующие байты
            nodebuf[recvPos++] = byte;
 800152e:	4b4f      	ldr	r3, [pc, #316]	; (800166c <_ZN7RPLidar9onReceiveEh+0x1bc>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	b2d1      	uxtb	r1, r2
 8001536:	4a4d      	ldr	r2, [pc, #308]	; (800166c <_ZN7RPLidar9onReceiveEh+0x1bc>)
 8001538:	7011      	strb	r1, [r2, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	4413      	add	r3, r2
 8001540:	78fa      	ldrb	r2, [r7, #3]
 8001542:	701a      	strb	r2, [r3, #0]
            break;
 8001544:	bf00      	nop
    }

    // Если все байты структуры считаны
    if (recvPos == sizeof(rplidar_response_measurement_node_t)) {
 8001546:	4b49      	ldr	r3, [pc, #292]	; (800166c <_ZN7RPLidar9onReceiveEh+0x1bc>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b05      	cmp	r3, #5
 800154c:	f040 8088 	bne.w	8001660 <_ZN7RPLidar9onReceiveEh+0x1b0>
        // Вычисляем значения измерений
        float newDistance = node.distance_q2 / 4.0f; // Расстояние
 8001550:	4b45      	ldr	r3, [pc, #276]	; (8001668 <_ZN7RPLidar9onReceiveEh+0x1b8>)
 8001552:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001556:	b29b      	uxth	r3, r3
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001560:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001564:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001568:	edc7 7a04 	vstr	s15, [r7, #16]
        float newAngle = constrain((node.angle_q6_checkbit >> RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT) / 64.0f, 0, 360); // Угол
 800156c:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <_ZN7RPLidar9onReceiveEh+0x1b8>)
 800156e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001572:	b29b      	uxth	r3, r3
 8001574:	085b      	lsrs	r3, r3, #1
 8001576:	b29b      	uxth	r3, r3
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001580:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001670 <_ZN7RPLidar9onReceiveEh+0x1c0>
 8001584:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800158c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001590:	2200      	movs	r2, #0
 8001592:	ee17 1a90 	vmov	r1, s15
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff fef1 	bl	800137e <_ZN7RPLidar9constrainElll>
 800159c:	ed87 0a03 	vstr	s0, [r7, #12]
        uint8_t quality = (node.sync_quality >> RPLIDAR_RESP_MEASUREMENT_QUALITY_SHIFT); // Качество
 80015a0:	4b31      	ldr	r3, [pc, #196]	; (8001668 <_ZN7RPLidar9onReceiveEh+0x1b8>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	72fb      	strb	r3, [r7, #11]

        // Проверяем валидность данных
		if (newAngle>=0&&newAngle<=360){
 80015a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b4:	db39      	blt.n	800162a <_ZN7RPLidar9onReceiveEh+0x17a>
 80015b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ba:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001674 <_ZN7RPLidar9onReceiveEh+0x1c4>
 80015be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c6:	d830      	bhi.n	800162a <_ZN7RPLidar9onReceiveEh+0x17a>
			if (newDistance>MIN_RANGE_LID&&newDistance<MAX_RANGE_LID&&quality>=20)
 80015c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80015cc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001678 <_ZN7RPLidar9onReceiveEh+0x1c8>
 80015d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d8:	dd19      	ble.n	800160e <_ZN7RPLidar9onReceiveEh+0x15e>
 80015da:	edd7 7a04 	vldr	s15, [r7, #16]
 80015de:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800167c <_ZN7RPLidar9onReceiveEh+0x1cc>
 80015e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	d510      	bpl.n	800160e <_ZN7RPLidar9onReceiveEh+0x15e>
 80015ec:	7afb      	ldrb	r3, [r7, #11]
 80015ee:	2b13      	cmp	r3, #19
 80015f0:	d90d      	bls.n	800160e <_ZN7RPLidar9onReceiveEh+0x15e>
				distances[(int)newAngle] = newDistance; // Сохраняем  расстояние
 80015f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fa:	ee17 3a90 	vmov	r3, s15
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	3302      	adds	r3, #2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	3304      	adds	r3, #4
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e00d      	b.n	800162a <_ZN7RPLidar9onReceiveEh+0x17a>
			else distances[(int)newAngle] = 0.0f;
 800160e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001616:	ee17 3a90 	vmov	r3, s15
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	3302      	adds	r3, #2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3304      	adds	r3, #4
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
		}

        // Обновляем массив минимальных расстояний
        reWriteDist();
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff fec6 	bl	80013bc <_ZN7RPLidar11reWriteDistEv>

        // Обновляем внешний массив `dist` для использования в main.cpp
        for (int i = 0; i < sizeof(dist) / sizeof(dist[0]); ++i) {
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2b1d      	cmp	r3, #29
 8001638:	d80f      	bhi.n	800165a <_ZN7RPLidar9onReceiveEh+0x1aa>
            dist[i] = distances[i];
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	3302      	adds	r3, #2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	3304      	adds	r3, #4
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	490d      	ldr	r1, [pc, #52]	; (8001680 <_ZN7RPLidar9onReceiveEh+0x1d0>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < sizeof(dist) / sizeof(dist[0]); ++i) {
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3301      	adds	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	e7ec      	b.n	8001634 <_ZN7RPLidar9onReceiveEh+0x184>
        }

        recvPos = 0; // Сброс позиции для нового пакета
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <_ZN7RPLidar9onReceiveEh+0x1bc>)
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
    }
}
 8001660:	3720      	adds	r7, #32
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200001fc 	.word	0x200001fc
 800166c:	200001f9 	.word	0x200001f9
 8001670:	42800000 	.word	0x42800000
 8001674:	43b40000 	.word	0x43b40000
 8001678:	43160000 	.word	0x43160000
 800167c:	43c80000 	.word	0x43c80000
 8001680:	2000020c 	.word	0x2000020c

08001684 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	bfb8      	it	lt
 8001692:	425b      	neglt	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80016aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ae:	eef0 7ae7 	vabs.f32	s15, s15
 80016b2:	eeb0 0a67 	vmov.f32	s0, s15
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_ZN9ColorSensC1Ev>:
extern I2C_HandleTypeDef hi2c1;

class ColorSens {

public:
	ColorSens(){}
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <_ZN9ColorSens4initEv>:

	void init(){
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af04      	add	r7, sp, #16
 80016de:	6078      	str	r0, [r7, #4]
		uint8_t K = PON;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73bb      	strb	r3, [r7, #14]
		HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, TCS3472_ADDR, (ENABLE_ADDR|COMAND_BIT), 1, &K, 1,1000);
 80016e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e8:	9302      	str	r3, [sp, #8]
 80016ea:	2301      	movs	r3, #1
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	f107 030e 	add.w	r3, r7, #14
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	2280      	movs	r2, #128	; 0x80
 80016f8:	2152      	movs	r1, #82	; 0x52
 80016fa:	481b      	ldr	r0, [pc, #108]	; (8001768 <_ZN9ColorSens4initEv+0x90>)
 80016fc:	f005 fa80 	bl	8006c00 <HAL_I2C_Mem_Write>
 8001700:	4603      	mov	r3, r0
 8001702:	73fb      	strb	r3, [r7, #15]
	  	HAL_Delay(100);
 8001704:	2064      	movs	r0, #100	; 0x64
 8001706:	f004 f965 	bl	80059d4 <HAL_Delay>
	    K = (PON|AEN);
 800170a:	2303      	movs	r3, #3
 800170c:	73bb      	strb	r3, [r7, #14]
	    status = HAL_I2C_Mem_Write(&hi2c1, TCS3472_ADDR, (ENABLE_ADDR|COMAND_BIT), 1, &K, 1,1000);
 800170e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	2301      	movs	r3, #1
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	f107 030e 	add.w	r3, r7, #14
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2301      	movs	r3, #1
 8001720:	2280      	movs	r2, #128	; 0x80
 8001722:	2152      	movs	r1, #82	; 0x52
 8001724:	4810      	ldr	r0, [pc, #64]	; (8001768 <_ZN9ColorSens4initEv+0x90>)
 8001726:	f005 fa6b 	bl	8006c00 <HAL_I2C_Mem_Write>
 800172a:	4603      	mov	r3, r0
 800172c:	73fb      	strb	r3, [r7, #15]
	    HAL_Delay(100);
 800172e:	2064      	movs	r0, #100	; 0x64
 8001730:	f004 f950 	bl	80059d4 <HAL_Delay>
	    K = A_TIM_VALUE154;
 8001734:	2300      	movs	r3, #0
 8001736:	73bb      	strb	r3, [r7, #14]
	    status = HAL_I2C_Mem_Write(&hi2c1, TCS3472_ADDR, (A_TIM_ADDR|COMAND_BIT), 1, &K, 1,1000);
 8001738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173c:	9302      	str	r3, [sp, #8]
 800173e:	2301      	movs	r3, #1
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	f107 030e 	add.w	r3, r7, #14
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2301      	movs	r3, #1
 800174a:	2281      	movs	r2, #129	; 0x81
 800174c:	2152      	movs	r1, #82	; 0x52
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <_ZN9ColorSens4initEv+0x90>)
 8001750:	f005 fa56 	bl	8006c00 <HAL_I2C_Mem_Write>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]
	    HAL_Delay(100);
 8001758:	2064      	movs	r0, #100	; 0x64
 800175a:	f004 f93b 	bl	80059d4 <HAL_Delay>
	}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000284 	.word	0x20000284

0800176c <_ZN9ColorSens11getColorRedEv>:

	uint16_t getColorRed(){
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af02      	add	r7, sp, #8
 8001772:	6078      	str	r0, [r7, #4]
	      HAL_I2C_Mem_Read_IT(&hi2c1, TCS3472_ADDR, RED_COLOR_ADDR|COMAND_BIT_INC , 1, RxBufferRed, 2);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	9201      	str	r2, [sp, #4]
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2301      	movs	r3, #1
 800177e:	22b6      	movs	r2, #182	; 0xb6
 8001780:	2152      	movs	r1, #82	; 0x52
 8001782:	4808      	ldr	r0, [pc, #32]	; (80017a4 <_ZN9ColorSens11getColorRedEv+0x38>)
 8001784:	f005 fb36 	bl	8006df4 <HAL_I2C_Mem_Read_IT>
	      return (((uint16_t)(RxBufferRed[1]<<8))|(uint16_t)RxBufferRed[0]);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	785b      	ldrb	r3, [r3, #1]
 800178c:	b29b      	uxth	r3, r3
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b29b      	uxth	r3, r3
	}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000284 	.word	0x20000284

080017a8 <_ZN9ColorSens12getColorBlueEv>:
	uint16_t getColorGreen(){
	      HAL_I2C_Mem_Read_IT(&hi2c1, TCS3472_ADDR, GREEN_COLOR_ADDR|COMAND_BIT_INC , 1, RxBufferGreen, 2);
	      return (((uint16_t)(RxBufferGreen[1]<<8))|(uint16_t)RxBufferGreen[0]);
	}
	uint16_t getColorBlue(){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	6078      	str	r0, [r7, #4]
	      HAL_I2C_Mem_Read_IT(&hi2c1, TCS3472_ADDR, BLUE_COLOR_ADDR|COMAND_BIT_INC , 1, RxBufferBlue, 2);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3304      	adds	r3, #4
 80017b4:	2202      	movs	r2, #2
 80017b6:	9201      	str	r2, [sp, #4]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2301      	movs	r3, #1
 80017bc:	22ba      	movs	r2, #186	; 0xba
 80017be:	2152      	movs	r1, #82	; 0x52
 80017c0:	4808      	ldr	r0, [pc, #32]	; (80017e4 <_ZN9ColorSens12getColorBlueEv+0x3c>)
 80017c2:	f005 fb17 	bl	8006df4 <HAL_I2C_Mem_Read_IT>
	      return (((uint16_t)(RxBufferBlue[1]<<8))|(uint16_t)RxBufferBlue[0]);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	795b      	ldrb	r3, [r3, #5]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	791b      	ldrb	r3, [r3, #4]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b29b      	uxth	r3, r3
	}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000284 	.word	0x20000284

080017e8 <_ZN9ColorSens13getColorWhiteEv>:
	uint16_t getColorWhite(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	6078      	str	r0, [r7, #4]
	      HAL_I2C_Mem_Read_IT(&hi2c1, TCS3472_ADDR, WHITE_COLOR_ADDR|COMAND_BIT_INC , 1, RxBufferWhite, 2);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3306      	adds	r3, #6
 80017f4:	2202      	movs	r2, #2
 80017f6:	9201      	str	r2, [sp, #4]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2301      	movs	r3, #1
 80017fc:	22b4      	movs	r2, #180	; 0xb4
 80017fe:	2152      	movs	r1, #82	; 0x52
 8001800:	4808      	ldr	r0, [pc, #32]	; (8001824 <_ZN9ColorSens13getColorWhiteEv+0x3c>)
 8001802:	f005 faf7 	bl	8006df4 <HAL_I2C_Mem_Read_IT>
	      return (((uint16_t)(RxBufferWhite[1]<<8))|(uint16_t)RxBufferWhite[0]);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	79db      	ldrb	r3, [r3, #7]
 800180a:	b29b      	uxth	r3, r3
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	b29a      	uxth	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	799b      	ldrb	r3, [r3, #6]
 8001814:	b29b      	uxth	r3, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	b29b      	uxth	r3, r3
	}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000284 	.word	0x20000284

08001828 <_ZN12LineDetectorC1Ev>:

#include "TCS3472.h"

class LineDetector {
public:
	LineDetector()	{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	220a      	movs	r2, #10
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	711a      	strb	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	330e      	adds	r3, #14
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff3d 	bl	80016c0 <_ZN9ColorSensC1Ev>
 8001846:	f004 f8b9 	bl	80059bc <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
	};
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_ZN12LineDetector4initEv>:
	void init(){
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
		sens.init();
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	330e      	adds	r3, #14
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff36 	bl	80016d8 <_ZN9ColorSens4initEv>
	}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZN12LineDetector7handlerEv>:
	void handler() {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
		if (HAL_GetTick() - lastMs > delayMs) {
 800187c:	f004 f89e 	bl	80059bc <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	1ad2      	subs	r2, r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	bf8c      	ite	hi
 8001890:	2301      	movhi	r3, #1
 8001892:	2300      	movls	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d02b      	beq.n	80018f2 <_ZN12LineDetector7handlerEv+0x7e>
			blue = sens.getColorBlue();
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	330e      	adds	r3, #14
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff82 	bl	80017a8 <_ZN9ColorSens12getColorBlueEv>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	819a      	strh	r2, [r3, #12]
			white = sens.getColorWhite();
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	330e      	adds	r3, #14
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff99 	bl	80017e8 <_ZN9ColorSens13getColorWhiteEv>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	80da      	strh	r2, [r3, #6]
			red = sens.getColorRed();
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	330e      	adds	r3, #14
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff52 	bl	800176c <_ZN9ColorSens11getColorRedEv>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	811a      	strh	r2, [r3, #8]
				if (blue < blueTh) {
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	899b      	ldrh	r3, [r3, #12]
 80018d4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80018d8:	d203      	bcs.n	80018e2 <_ZN12LineDetector7handlerEv+0x6e>
					lineIsCrosed = true;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	711a      	strb	r2, [r3, #4]
 80018e0:	e002      	b.n	80018e8 <_ZN12LineDetector7handlerEv+0x74>
				}
				else {
					lineIsCrosed = false;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	711a      	strb	r2, [r3, #4]
				}
				lastMs = HAL_GetTick();
 80018e8:	f004 f868 	bl	80059bc <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	619a      	str	r2, [r3, #24]
			}
		}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_ZN12LineDetector9isCrossedEv>:

	bool isCrossed() {
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
		return lineIsCrosed;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	791b      	ldrb	r3, [r3, #4]
	}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001938:	d205      	bcs.n	8001946 <_ZSt16__deque_buf_sizej+0x1c>
 800193a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	fbb2 f3f3 	udiv	r3, r2, r3
 8001944:	e000      	b.n	8001948 <_ZSt16__deque_buf_sizej+0x1e>
 8001946:	2301      	movs	r3, #1
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_ZN7EncoderC1EP17TIM_HandleTypeDef>:
#include  <cmath>

class Encoder
{
public:
	Encoder(TIM_HandleTypeDef* _encTim)
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
		:encTim(_encTim)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	609a      	str	r2, [r3, #8]
	{
		//HAL_TIM_Encoder_Start(_encTim, TIM_CHANNEL_1);
	};
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <_ZN7Encoder7handlerEv>:

	void handler() {
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
		encoderValue = (int16_t)__HAL_TIM_GET_COUNTER(encTim);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	b21a      	sxth	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(encTim, 0);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_ZN7Encoder15getEncoderValueEv>:

	int16_t getEncoderValue(){
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
		return encoderValue;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f9b3 3000 	ldrsh.w	r3, [r3]
	}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f001 fec4 	bl	800374e <_ZNSaIfED1Ev>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_ZN7BFilterC1ESt6vectorIfSaIfEE>:
        // Инициализация коэффициентов фильтра нулями
        //coefs = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
        initializeStates();
    }
    // Конструктор с заданными коэффициентами
    BFilter(const std::vector<float> _coefs)
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
    	:coefs(_coefs)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6839      	ldr	r1, [r7, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f001 fef5 	bl	80037ce <_ZNSt6vectorIfSaIfEEC1ERKS1_>
        } else {
            // Если коэффициенты заданы неверно, инициализируем нулями
            coefs = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
        }
        */
        initializeStates();
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f86f 	bl	8001ac8 <_ZN7BFilter16initializeStatesEv>
    }
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_ZN7BFilter4calcEf>:
    // Метод для вычисления отфильтрованного значения
    float calc(float inData) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	ed2d 8b02 	vpush	{d8}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	ed87 0a00 	vstr	s0, [r7]
        // Вычисление выходного значения по разностному уравнению
        float y = coefs[2] * inData + coefs[3] * x1 + coefs[4] * x2 - coefs[0] * y1 - coefs[1] * y2;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2102      	movs	r1, #2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f001 ff1d 	bl	8003848 <_ZNSt6vectorIfSaIfEEixEj>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	ed93 7a00 	vldr	s14, [r3]
 8001a14:	edd7 7a00 	vldr	s15, [r7]
 8001a18:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2103      	movs	r1, #3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 ff11 	bl	8003848 <_ZNSt6vectorIfSaIfEEixEj>
 8001a26:	4603      	mov	r3, r0
 8001a28:	ed93 7a00 	vldr	s14, [r3]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a36:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f001 ff02 	bl	8003848 <_ZNSt6vectorIfSaIfEEixEj>
 8001a44:	4603      	mov	r3, r0
 8001a46:	ed93 7a00 	vldr	s14, [r3]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a54:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 fef3 	bl	8003848 <_ZNSt6vectorIfSaIfEEixEj>
 8001a62:	4603      	mov	r3, r0
 8001a64:	ed93 7a00 	vldr	s14, [r3]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a72:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 fee4 	bl	8003848 <_ZNSt6vectorIfSaIfEEixEj>
 8001a80:	4603      	mov	r3, r0
 8001a82:	ed93 7a00 	vldr	s14, [r3]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a90:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001a94:	edc7 7a03 	vstr	s15, [r7, #12]

        // Обновление состояний фильтра
        x2 = x1;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	611a      	str	r2, [r3, #16]
        x1 = inData;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	60da      	str	r2, [r3, #12]
        y2 = y1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
        y1 = y;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	615a      	str	r2, [r3, #20]

        return y;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	ee07 3a90 	vmov	s15, r3
    }
 8001aba:	eeb0 0a67 	vmov.f32	s0, s15
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	ecbd 8b02 	vpop	{d8}
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_ZN7BFilter16initializeStatesEv>:
    // Метод для инициализации состояний фильтра
    void initializeStates() {
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
        x1 = 0.0f;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
        x2 = 0.0f;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
        y1 = 0.0f;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	615a      	str	r2, [r3, #20]
        y2 = 0.0f;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
    }
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	ed87 0b00 	vstr	d0, [r7]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f7fe fd13 	bl	8000534 <__aeabi_i2d>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	ed97 1b00 	vldr	d1, [r7]
 8001b16:	ec43 2b10 	vmov	d0, r2, r3
 8001b1a:	f009 ffc9 	bl	800bab0 <pow>
 8001b1e:	eeb0 7a40 	vmov.f32	s14, s0
 8001b22:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001b26:	eeb0 0a47 	vmov.f32	s0, s14
 8001b2a:	eef0 0a67 	vmov.f32	s1, s15
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	0000      	movs	r0, r0
	...

08001b38 <_ZN7BFilter15CalcSecondOrderEff>:
		float a1 = (omegaC - 2 / T) / a0;
		float b0 = omegaC / a0;
		std::vector<float> buf = {a1, 0, b0, b0, 0};
		return buf;
	};
	static std::vector<float> CalcSecondOrder(float freq, float sampleRate) {
 8001b38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b3c:	b094      	sub	sp, #80	; 0x50
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b46:	edc7 0a01 	vstr	s1, [r7, #4]
		float T = 1 / sampleRate;
 8001b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b56:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		float omegaC = 2 * M_PI * freq;
 8001b5a:	68b8      	ldr	r0, [r7, #8]
 8001b5c:	f7fe fcfc 	bl	8000558 <__aeabi_f2d>
 8001b60:	a3ad      	add	r3, pc, #692	; (adr r3, 8001e18 <_ZN7BFilter15CalcSecondOrderEff+0x2e0>)
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	f7fe fd4f 	bl	8000608 <__aeabi_dmul>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7ff f821 	bl	8000bb8 <__aeabi_d2f>
 8001b76:	4603      	mov	r3, r0
 8001b78:	64bb      	str	r3, [r7, #72]	; 0x48
		float a0 = pow(omegaC, 2) + 2 * pow(2, 0.5) * omegaC / T + 4 / pow(T, 2);
 8001b7a:	2002      	movs	r0, #2
 8001b7c:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001b80:	f001 fe93 	bl	80038aa <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b84:	ec59 8b10 	vmov	r8, r9, d0
 8001b88:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 8001e08 <_ZN7BFilter15CalcSecondOrderEff+0x2d0>
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f7ff ffb5 	bl	8001afc <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b92:	ec51 0b10 	vmov	r0, r1, d0
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	f7fe fb7f 	bl	800029c <__adddf3>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4614      	mov	r4, r2
 8001ba4:	461d      	mov	r5, r3
 8001ba6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ba8:	f7fe fcd6 	bl	8000558 <__aeabi_f2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	f7fe fd28 	bl	8000608 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	461d      	mov	r5, r3
 8001bc0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001bc2:	f7fe fcc9 	bl	8000558 <__aeabi_f2d>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4620      	mov	r0, r4
 8001bcc:	4629      	mov	r1, r5
 8001bce:	f7fe fe45 	bl	800085c <__aeabi_ddiv>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4640      	mov	r0, r8
 8001bd8:	4649      	mov	r1, r9
 8001bda:	f7fe fb5f 	bl	800029c <__adddf3>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4614      	mov	r4, r2
 8001be4:	461d      	mov	r5, r3
 8001be6:	2002      	movs	r0, #2
 8001be8:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001bec:	f001 fe5d 	bl	80038aa <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001bf0:	ec53 2b10 	vmov	r2, r3, d0
 8001bf4:	f04f 0000 	mov.w	r0, #0
 8001bf8:	4985      	ldr	r1, [pc, #532]	; (8001e10 <_ZN7BFilter15CalcSecondOrderEff+0x2d8>)
 8001bfa:	f7fe fe2f 	bl	800085c <__aeabi_ddiv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4620      	mov	r0, r4
 8001c04:	4629      	mov	r1, r5
 8001c06:	f7fe fb49 	bl	800029c <__adddf3>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f7fe ffd1 	bl	8000bb8 <__aeabi_d2f>
 8001c16:	4603      	mov	r3, r0
 8001c18:	647b      	str	r3, [r7, #68]	; 0x44
		float a1 = (2 * pow(omegaC, 2) - 8 / pow(T, 2)) / a0;
 8001c1a:	2002      	movs	r0, #2
 8001c1c:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001c20:	f001 fe43 	bl	80038aa <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c24:	ec51 0b10 	vmov	r0, r1, d0
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	f7fe fb36 	bl	800029c <__adddf3>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4614      	mov	r4, r2
 8001c36:	461d      	mov	r5, r3
 8001c38:	2002      	movs	r0, #2
 8001c3a:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001c3e:	f001 fe34 	bl	80038aa <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c42:	ec53 2b10 	vmov	r2, r3, d0
 8001c46:	f04f 0000 	mov.w	r0, #0
 8001c4a:	4972      	ldr	r1, [pc, #456]	; (8001e14 <_ZN7BFilter15CalcSecondOrderEff+0x2dc>)
 8001c4c:	f7fe fe06 	bl	800085c <__aeabi_ddiv>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4620      	mov	r0, r4
 8001c56:	4629      	mov	r1, r5
 8001c58:	f7fe fb1e 	bl	8000298 <__aeabi_dsub>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4614      	mov	r4, r2
 8001c62:	461d      	mov	r5, r3
 8001c64:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c66:	f7fe fc77 	bl	8000558 <__aeabi_f2d>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4620      	mov	r0, r4
 8001c70:	4629      	mov	r1, r5
 8001c72:	f7fe fdf3 	bl	800085c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe ff9b 	bl	8000bb8 <__aeabi_d2f>
 8001c82:	4603      	mov	r3, r0
 8001c84:	643b      	str	r3, [r7, #64]	; 0x40
		float a2 = (pow(omegaC, 2) - 2 * pow(2, 0.5) * omegaC / T + 4 / pow(T, 2)) / a0;
 8001c86:	2002      	movs	r0, #2
 8001c88:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001c8c:	f001 fe0d 	bl	80038aa <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c90:	ec59 8b10 	vmov	r8, r9, d0
 8001c94:	ed9f 0b5c 	vldr	d0, [pc, #368]	; 8001e08 <_ZN7BFilter15CalcSecondOrderEff+0x2d0>
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f7ff ff2f 	bl	8001afc <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c9e:	ec51 0b10 	vmov	r0, r1, d0
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	f7fe faf9 	bl	800029c <__adddf3>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4614      	mov	r4, r2
 8001cb0:	461d      	mov	r5, r3
 8001cb2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001cb4:	f7fe fc50 	bl	8000558 <__aeabi_f2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f7fe fca2 	bl	8000608 <__aeabi_dmul>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4614      	mov	r4, r2
 8001cca:	461d      	mov	r5, r3
 8001ccc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001cce:	f7fe fc43 	bl	8000558 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	4629      	mov	r1, r5
 8001cda:	f7fe fdbf 	bl	800085c <__aeabi_ddiv>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4640      	mov	r0, r8
 8001ce4:	4649      	mov	r1, r9
 8001ce6:	f7fe fad7 	bl	8000298 <__aeabi_dsub>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4614      	mov	r4, r2
 8001cf0:	461d      	mov	r5, r3
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001cf8:	f001 fdd7 	bl	80038aa <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001cfc:	ec53 2b10 	vmov	r2, r3, d0
 8001d00:	f04f 0000 	mov.w	r0, #0
 8001d04:	4942      	ldr	r1, [pc, #264]	; (8001e10 <_ZN7BFilter15CalcSecondOrderEff+0x2d8>)
 8001d06:	f7fe fda9 	bl	800085c <__aeabi_ddiv>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4620      	mov	r0, r4
 8001d10:	4629      	mov	r1, r5
 8001d12:	f7fe fac3 	bl	800029c <__adddf3>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4614      	mov	r4, r2
 8001d1c:	461d      	mov	r5, r3
 8001d1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001d20:	f7fe fc1a 	bl	8000558 <__aeabi_f2d>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4620      	mov	r0, r4
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	f7fe fd96 	bl	800085c <__aeabi_ddiv>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7fe ff3e 	bl	8000bb8 <__aeabi_d2f>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
		float b0 = pow(omegaC, 2) / a0;
 8001d40:	2002      	movs	r0, #2
 8001d42:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001d46:	f001 fdb0 	bl	80038aa <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d4a:	ec55 4b10 	vmov	r4, r5, d0
 8001d4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001d50:	f7fe fc02 	bl	8000558 <__aeabi_f2d>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe fd7e 	bl	800085c <__aeabi_ddiv>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe ff26 	bl	8000bb8 <__aeabi_d2f>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	63bb      	str	r3, [r7, #56]	; 0x38
		float b1 = 2 * pow(omegaC, 2) / a0;
 8001d70:	2002      	movs	r0, #2
 8001d72:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001d76:	f001 fd98 	bl	80038aa <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d7a:	ec51 0b10 	vmov	r0, r1, d0
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	f7fe fa8b 	bl	800029c <__adddf3>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4614      	mov	r4, r2
 8001d8c:	461d      	mov	r5, r3
 8001d8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001d90:	f7fe fbe2 	bl	8000558 <__aeabi_f2d>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4620      	mov	r0, r4
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	f7fe fd5e 	bl	800085c <__aeabi_ddiv>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f7fe ff06 	bl	8000bb8 <__aeabi_d2f>
 8001dac:	4603      	mov	r3, r0
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
		float b2 = b0;
 8001db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db2:	633b      	str	r3, [r7, #48]	; 0x30
		//float buf[5] = {a1, a2, b0, b1, b2};
		std::vector<float> buf = {a1, a2, b0, b1, b2};
 8001db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db6:	61bb      	str	r3, [r7, #24]
 8001db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dbe:	623b      	str	r3, [r7, #32]
 8001dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	2305      	movs	r3, #5
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 fcad 	bl	8003736 <_ZNSaIfEC1Ev>
 8001ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de0:	f107 0210 	add.w	r2, r7, #16
 8001de4:	ca06      	ldmia	r2, {r1, r2}
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f001 fd3e 	bl	8003868 <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8001dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df0:	4618      	mov	r0, r3
 8001df2:	f001 fcac 	bl	800374e <_ZNSaIfED1Ev>

		return buf;
 8001df6:	bf00      	nop
	};
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	3750      	adds	r7, #80	; 0x50
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e02:	bf00      	nop
 8001e04:	f3af 8000 	nop.w
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	3fe00000 	.word	0x3fe00000
 8001e10:	40100000 	.word	0x40100000
 8001e14:	40200000 	.word	0x40200000
 8001e18:	54442d18 	.word	0x54442d18
 8001e1c:	401921fb 	.word	0x401921fb

08001e20 <_ZN3PIDC1Efff>:


class PID {
public:
    PID(float kp, float ki, float kd)
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e2c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e30:	ed87 1a00 	vstr	s2, [r7]
        : kp(kp), ki(ki), kd(kd), prevError(0), integral(0) {
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
    }
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <_ZN3PID9calculateEff>:

    // Метод для расчета управляющего воздействия
    float calculate(float target, float current) {
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e70:	edc7 0a01 	vstr	s1, [r7, #4]
    	float error = target - current;
 8001e74:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e78:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e80:	edc7 7a05 	vstr	s15, [r7, #20]
        integral += error; // Накопление интегральной ошибки
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	edc3 7a04 	vstr	s15, [r3, #16]
        float derivative = error - prevError; // Разница ошибок
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea6:	edc7 7a04 	vstr	s15, [r7, #16]
        prevError = error;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	60da      	str	r2, [r3, #12]

        return kp * error + ki * integral + kd * derivative;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	ed93 7a00 	vldr	s14, [r3]
 8001eb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ece:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ed8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8001ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	0000      	movs	r0, r0
 8001ef4:	0000      	movs	r0, r0
	...

08001ef8 <_ZN3PID18updateCoefficientsEd>:
    	prevError = 0;
    	integral = 0;
    }

    // Метод для обновления коэффициентов по формулам
    void updateCoefficients(double targetSpeed) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b092      	sub	sp, #72	; 0x48
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	ed87 0b00 	vstr	d0, [r7]
        // Коэффициенты для низких скоростей (до 50 об/мин)
        double kp_low = 20;
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <_ZN3PID18updateCoefficientsEd+0x1d0>)
 8001f0a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
        double ki_low = 0.05;
 8001f0e:	a368      	add	r3, pc, #416	; (adr r3, 80020b0 <_ZN3PID18updateCoefficientsEd+0x1b8>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        double kd_low = 7;
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b6b      	ldr	r3, [pc, #428]	; (80020cc <_ZN3PID18updateCoefficientsEd+0x1d4>)
 8001f1e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

        // Коэффициенты для высоких скоростей (свыше 150 об/мин)
        double kp_high = 16;
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	4b6a      	ldr	r3, [pc, #424]	; (80020d0 <_ZN3PID18updateCoefficientsEd+0x1d8>)
 8001f28:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        double ki_high = 0.1;
 8001f2c:	a362      	add	r3, pc, #392	; (adr r3, 80020b8 <_ZN3PID18updateCoefficientsEd+0x1c0>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	e9c7 2308 	strd	r2, r3, [r7, #32]
        double kd_high = 6;
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b66      	ldr	r3, [pc, #408]	; (80020d4 <_ZN3PID18updateCoefficientsEd+0x1dc>)
 8001f3c:	e9c7 2306 	strd	r2, r3, [r7, #24]

        // Линейная интерполяция коэффициентов
        if (targetSpeed <= 50) {
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b64      	ldr	r3, [pc, #400]	; (80020d8 <_ZN3PID18updateCoefficientsEd+0x1e0>)
 8001f46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f4a:	f7fe fdd9 	bl	8000b00 <__aeabi_dcmple>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d015      	beq.n	8001f80 <_ZN3PID18updateCoefficientsEd+0x88>
            // Если скорость <= 50, используем коэффициенты для низких скоростей
            kp = kp_low;
 8001f54:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001f58:	f7fe fe2e 	bl	8000bb8 <__aeabi_d2f>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	601a      	str	r2, [r3, #0]
            ki = ki_low;
 8001f62:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f66:	f7fe fe27 	bl	8000bb8 <__aeabi_d2f>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]
            kd = kd_low;
 8001f70:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001f74:	f7fe fe20 	bl	8000bb8 <__aeabi_d2f>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	609a      	str	r2, [r3, #8]
            double t = (targetSpeed - 50) / (150 - 50); // Нормализация скорости в диапазоне [0, 1]
            kp = kp_low + t * (kp_high - kp_low);
            ki = ki_low + t * (ki_high - ki_low);
            kd = kd_low + t * (kd_high - kd_low);
        }
    }
 8001f7e:	e090      	b.n	80020a2 <_ZN3PID18updateCoefficientsEd+0x1aa>
        } else if (targetSpeed >= 150) {
 8001f80:	a34f      	add	r3, pc, #316	; (adr r3, 80020c0 <_ZN3PID18updateCoefficientsEd+0x1c8>)
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f8a:	f7fe fdc3 	bl	8000b14 <__aeabi_dcmpge>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d015      	beq.n	8001fc0 <_ZN3PID18updateCoefficientsEd+0xc8>
            kp = kp_high;
 8001f94:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f98:	f7fe fe0e 	bl	8000bb8 <__aeabi_d2f>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	601a      	str	r2, [r3, #0]
            ki = ki_high;
 8001fa2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fa6:	f7fe fe07 	bl	8000bb8 <__aeabi_d2f>
 8001faa:	4602      	mov	r2, r0
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	605a      	str	r2, [r3, #4]
            kd = kd_high;
 8001fb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fb4:	f7fe fe00 	bl	8000bb8 <__aeabi_d2f>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	609a      	str	r2, [r3, #8]
    }
 8001fbe:	e070      	b.n	80020a2 <_ZN3PID18updateCoefficientsEd+0x1aa>
            double t = (targetSpeed - 50) / (150 - 50); // Нормализация скорости в диапазоне [0, 1]
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	4b44      	ldr	r3, [pc, #272]	; (80020d8 <_ZN3PID18updateCoefficientsEd+0x1e0>)
 8001fc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fca:	f7fe f965 	bl	8000298 <__aeabi_dsub>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	4b40      	ldr	r3, [pc, #256]	; (80020dc <_ZN3PID18updateCoefficientsEd+0x1e4>)
 8001fdc:	f7fe fc3e 	bl	800085c <__aeabi_ddiv>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	e9c7 2304 	strd	r2, r3, [r7, #16]
            kp = kp_low + t * (kp_high - kp_low);
 8001fe8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ff0:	f7fe f952 	bl	8000298 <__aeabi_dsub>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002000:	f7fe fb02 	bl	8000608 <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002010:	f7fe f944 	bl	800029c <__adddf3>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fdcc 	bl	8000bb8 <__aeabi_d2f>
 8002020:	4602      	mov	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	601a      	str	r2, [r3, #0]
            ki = ki_low + t * (ki_high - ki_low);
 8002026:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800202a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800202e:	f7fe f933 	bl	8000298 <__aeabi_dsub>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800203e:	f7fe fae3 	bl	8000608 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800204e:	f7fe f925 	bl	800029c <__adddf3>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	f7fe fdad 	bl	8000bb8 <__aeabi_d2f>
 800205e:	4602      	mov	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	605a      	str	r2, [r3, #4]
            kd = kd_low + t * (kd_high - kd_low);
 8002064:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002068:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800206c:	f7fe f914 	bl	8000298 <__aeabi_dsub>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800207c:	f7fe fac4 	bl	8000608 <__aeabi_dmul>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800208c:	f7fe f906 	bl	800029c <__adddf3>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f7fe fd8e 	bl	8000bb8 <__aeabi_d2f>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	609a      	str	r2, [r3, #8]
    }
 80020a2:	bf00      	nop
 80020a4:	3748      	adds	r7, #72	; 0x48
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	f3af 8000 	nop.w
 80020b0:	9999999a 	.word	0x9999999a
 80020b4:	3fa99999 	.word	0x3fa99999
 80020b8:	9999999a 	.word	0x9999999a
 80020bc:	3fb99999 	.word	0x3fb99999
 80020c0:	00000000 	.word	0x00000000
 80020c4:	4062c000 	.word	0x4062c000
 80020c8:	40340000 	.word	0x40340000
 80020cc:	401c0000 	.word	0x401c0000
 80020d0:	40300000 	.word	0x40300000
 80020d4:	40180000 	.word	0x40180000
 80020d8:	40490000 	.word	0x40490000
 80020dc:	40590000 	.word	0x40590000

080020e0 <_Z9constrainlll>:
#include  <cmath>

#ifndef INC_MOTOR_H_
#define INC_MOTOR_H_

	int32_t constrain(int32_t value,int32_t num1,int32_t num2){
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
		if (value>num2) value = num2;
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	dd01      	ble.n	80020f8 <_Z9constrainlll+0x18>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	60fb      	str	r3, [r7, #12]
		if (value<num1) value = num1;
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	da01      	bge.n	8002104 <_Z9constrainlll+0x24>
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	60fb      	str	r3, [r7, #12]
		return value;
 8002104:	68fb      	ldr	r3, [r7, #12]
	}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <_Z10constrainffff>:

	float constrainf(float value,float num1,float num2){
 8002112:	b480      	push	{r7}
 8002114:	b085      	sub	sp, #20
 8002116:	af00      	add	r7, sp, #0
 8002118:	ed87 0a03 	vstr	s0, [r7, #12]
 800211c:	edc7 0a02 	vstr	s1, [r7, #8]
 8002120:	ed87 1a01 	vstr	s2, [r7, #4]
		if (value>num2) value = num2;
 8002124:	ed97 7a03 	vldr	s14, [r7, #12]
 8002128:	edd7 7a01 	vldr	s15, [r7, #4]
 800212c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002134:	dd01      	ble.n	800213a <_Z10constrainffff+0x28>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]
		if (value<num1) value = num1;
 800213a:	ed97 7a03 	vldr	s14, [r7, #12]
 800213e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214a:	d501      	bpl.n	8002150 <_Z10constrainffff+0x3e>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60fb      	str	r3, [r7, #12]
		return value;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	ee07 3a90 	vmov	s15, r3
	}
 8002156:	eeb0 0a67 	vmov.f32	s0, s15
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_ZN7BFilterD1Ev>:
class BFilter {
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4618      	mov	r0, r3
 8002170:	f001 faf9 	bl	8003766 <_ZNSt6vectorIfSaIfEED1Ev>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>:

class Motor{

public:

	Motor(TIM_HandleTypeDef* _encTim,TIM_HandleTypeDef* _ctrlTim, uint8_t _ctrlTimCh):
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	70fb      	strb	r3, [r7, #3]
		ctrlTim(_ctrlTim),ctrlTimCh(_ctrlTimCh),enc(_encTim),pid(20,0.05,7)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fbde 	bl	8001954 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	330c      	adds	r3, #12
 800219c:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 80021a0:	eddf 0a1e 	vldr	s1, [pc, #120]	; 800221c <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h+0x9c>
 80021a4:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fe39 	bl	8001e20 <_ZN3PIDC1Efff>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f103 0420 	add.w	r4, r3, #32
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	eddf 0a19 	vldr	s1, [pc, #100]	; 8002220 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h+0xa0>
 80021bc:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fcb9 	bl	8001b38 <_ZN7BFilter15CalcSecondOrderEff>
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7ff fbff 	bl	80019d0 <_ZN7BFilterC1ESt6vectorIfSaIfEE>
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4618      	mov	r0, r3
 80021d8:	f001 fac5 	bl	8003766 <_ZNSt6vectorIfSaIfEED1Ev>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
	{
		__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_1, ZERO);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2200      	movs	r2, #0
 80021f0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_2, ZERO);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2200      	movs	r2, #0
 80021fa:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, ZERO);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2200      	movs	r2, #0
 8002204:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, ZERO);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2200      	movs	r2, #0
 800220e:	641a      	str	r2, [r3, #64]	; 0x40

	};
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	; 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd90      	pop	{r4, r7, pc}
 800221a:	bf00      	nop
 800221c:	3d4ccccd 	.word	0x3d4ccccd
 8002220:	447a0000 	.word	0x447a0000

08002224 <_ZN5Motor14setTargetSpeedEf>:
	}

	int16_t getEncoderValue(){
		return enc.getEncoderValue();
	}
	void setTargetSpeed(float speed){
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	ed87 0a00 	vstr	s0, [r7]
		targetSpeed = speed;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	651a      	str	r2, [r3, #80]	; 0x50
		targetSpeed = constrainf(targetSpeed,-MAX_MOT_SPEED,MAX_MOT_SPEED);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800223c:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8002260 <_ZN5Motor14setTargetSpeedEf+0x3c>
 8002240:	eddf 0a08 	vldr	s1, [pc, #32]	; 8002264 <_ZN5Motor14setTargetSpeedEf+0x40>
 8002244:	eeb0 0a67 	vmov.f32	s0, s15
 8002248:	f7ff ff63 	bl	8002112 <_Z10constrainffff>
 800224c:	eef0 7a40 	vmov.f32	s15, s0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	42c80000 	.word	0x42c80000
 8002264:	c2c80000 	.word	0xc2c80000

08002268 <_ZN5Motor7handlerEv>:
	void handler(){
 8002268:	b590      	push	{r4, r7, lr}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
		calcCurSpeedMotor();
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f83d 	bl	80022f0 <_ZN5Motor17calcCurSpeedMotorEv>
		pid.updateCoefficients(targetSpeed);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f103 040c 	add.w	r4, r3, #12
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f969 	bl	8000558 <__aeabi_f2d>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	ec43 2b10 	vmov	d0, r2, r3
 800228e:	4620      	mov	r0, r4
 8002290:	f7ff fe32 	bl	8001ef8 <_ZN3PID18updateCoefficientsEd>
		helpPWM = pid.calculate(targetSpeed, currentSpeed);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f103 020c 	add.w	r2, r3, #12
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80022a6:	eef0 0a47 	vmov.f32	s1, s14
 80022aa:	eeb0 0a67 	vmov.f32	s0, s15
 80022ae:	4610      	mov	r0, r2
 80022b0:	f7ff fdd8 	bl	8001e64 <_ZN3PID9calculateEff>
 80022b4:	eef0 7a40 	vmov.f32	s15, s0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		setMotorPWM(constrain((int32_t)helpPWM,-MAX_MOT_PWM,MAX_MOT_PWM));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80022c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80022cc:	4906      	ldr	r1, [pc, #24]	; (80022e8 <_ZN5Motor7handlerEv+0x80>)
 80022ce:	ee17 0a90 	vmov	r0, s15
 80022d2:	f7ff ff05 	bl	80020e0 <_Z9constrainlll>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f84e 	bl	800237c <_ZN5Motor11setMotorPWMEl>
	}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}
 80022e8:	ffffd8f0 	.word	0xffffd8f0
 80022ec:	00000000 	.word	0x00000000

080022f0 <_ZN5Motor17calcCurSpeedMotorEv>:

private:

	void calcCurSpeedMotor(){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
				enc.handler();
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fb39 	bl	8001972 <_ZN7Encoder7handlerEv>
				currentSpeed = (((float)enc.getEncoderValue())*60.0)/(ENC_MAX*FAST_CYCLE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fb4b 	bl	800199e <_ZN7Encoder15getEncoderValueEv>
 8002308:	4603      	mov	r3, r0
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002312:	ee17 0a90 	vmov	r0, s15
 8002316:	f7fe f91f 	bl	8000558 <__aeabi_f2d>
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <_ZN5Motor17calcCurSpeedMotorEv+0x88>)
 8002320:	f7fe f972 	bl	8000608 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	a310      	add	r3, pc, #64	; (adr r3, 8002370 <_ZN5Motor17calcCurSpeedMotorEv+0x80>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	f7fe fa93 	bl	800085c <__aeabi_ddiv>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	f7fe fc3b 	bl	8000bb8 <__aeabi_d2f>
 8002342:	4602      	mov	r2, r0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	64da      	str	r2, [r3, #76]	; 0x4c
				currentSpeed = filt.calc(currentSpeed);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f103 0220 	add.w	r2, r3, #32
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002354:	eeb0 0a67 	vmov.f32	s0, s15
 8002358:	4610      	mov	r0, r2
 800235a:	f7ff fb4b 	bl	80019f4 <_ZN7BFilter4calcEf>
 800235e:	eef0 7a40 	vmov.f32	s15, s0
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	cccccccd 	.word	0xcccccccd
 8002374:	3ffccccc 	.word	0x3ffccccc
 8002378:	404e0000 	.word	0x404e0000

0800237c <_ZN5Motor11setMotorPWMEl>:
	void setMotorPWM(int32_t PWM){
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]


		if (ctrlTimCh == CHANNEL1||ctrlTimCh == CHANNEL2){
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	2b01      	cmp	r3, #1
 800238c:	d003      	beq.n	8002396 <_ZN5Motor11setMotorPWMEl+0x1a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2b02      	cmp	r3, #2
 8002394:	d11e      	bne.n	80023d4 <_ZN5Motor11setMotorPWMEl+0x58>
			if (PWM>0){
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	dd0a      	ble.n	80023b2 <_ZN5Motor11setMotorPWMEl+0x36>
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_1, ZERO);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2200      	movs	r2, #0
 80023a4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_2, PWM);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	639a      	str	r2, [r3, #56]	; 0x38
 80023b0:	e010      	b.n	80023d4 <_ZN5Motor11setMotorPWMEl+0x58>
			}

			else if (PWM<0){
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	da0d      	bge.n	80023d4 <_ZN5Motor11setMotorPWMEl+0x58>
				PWM = abs(PWM);
 80023b8:	6838      	ldr	r0, [r7, #0]
 80023ba:	f7ff f963 	bl	8001684 <_ZSt3absl>
 80023be:	6038      	str	r0, [r7, #0]
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_2, ZERO);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2200      	movs	r2, #0
 80023c8:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_1, PWM);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}

		if (ctrlTimCh == CHANNEL3||ctrlTimCh == CHANNEL4){
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d003      	beq.n	80023e4 <_ZN5Motor11setMotorPWMEl+0x68>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d11e      	bne.n	8002422 <_ZN5Motor11setMotorPWMEl+0xa6>
			if (PWM>0){
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	dd0a      	ble.n	8002400 <_ZN5Motor11setMotorPWMEl+0x84>
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, ZERO);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2200      	movs	r2, #0
 80023f2:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, PWM);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
				PWM = abs(PWM);
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, ZERO);
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, PWM);
			}
		}
	}
 80023fe:	e010      	b.n	8002422 <_ZN5Motor11setMotorPWMEl+0xa6>
			else if (PWM<0){
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	da0d      	bge.n	8002422 <_ZN5Motor11setMotorPWMEl+0xa6>
				PWM = abs(PWM);
 8002406:	6838      	ldr	r0, [r7, #0]
 8002408:	f7ff f93c 	bl	8001684 <_ZSt3absl>
 800240c:	6038      	str	r0, [r7, #0]
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, ZERO);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2200      	movs	r2, #0
 8002416:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, PWM);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <_ZN5MotorD1Ev>:
class Motor{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3320      	adds	r3, #32
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fe94 	bl	8002164 <_ZN7BFilterD1Ev>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <_ZN6TelegaC1Ev>:

class Telega{

public:

	Telega():
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
		leftMotor(ENC_LEFT_TIM,MOT_L_PWM_TIM,CHANNEL3),
		rightMotor(ENC_RIGHT_TIM,MOT_R_PWM_TIM,CHANNEL1)
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	2303      	movs	r3, #3
 8002454:	4a08      	ldr	r2, [pc, #32]	; (8002478 <_ZN6TelegaC1Ev+0x30>)
 8002456:	4909      	ldr	r1, [pc, #36]	; (800247c <_ZN6TelegaC1Ev+0x34>)
 8002458:	f7ff fe92 	bl	8002180 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8002462:	2301      	movs	r3, #1
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <_ZN6TelegaC1Ev+0x30>)
 8002466:	4906      	ldr	r1, [pc, #24]	; (8002480 <_ZN6TelegaC1Ev+0x38>)
 8002468:	f7ff fe8a 	bl	8002180 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>
	{};
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000368 	.word	0x20000368
 800247c:	20000320 	.word	0x20000320
 8002480:	200003b0 	.word	0x200003b0

08002484 <_ZN6Telega7handlerEv>:

	void handler(){
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
			leftMotor.handler();
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff feea 	bl	8002268 <_ZN5Motor7handlerEv>
			rightMotor.handler();
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3354      	adds	r3, #84	; 0x54
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fee5 	bl	8002268 <_ZN5Motor7handlerEv>
	}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_ZN6Telega13setRobotSpeedEff>:
	void setRobotSpeed(float linSpeed, float angSpeed){
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	ed87 0a02 	vstr	s0, [r7, #8]
 80024b2:	edc7 0a01 	vstr	s1, [r7, #4]
		setMotorSpeed(linSpeed-angSpeed,linSpeed+angSpeed);
 80024b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80024ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80024be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80024c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ce:	eef0 0a67 	vmov.f32	s1, s15
 80024d2:	eeb0 0a66 	vmov.f32	s0, s13
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f804 	bl	80024e4 <_ZN6Telega13setMotorSpeedEff>
	}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_ZN6Telega13setMotorSpeedEff>:
	}


private:

	void setMotorSpeed(float lSpd, float rSpd){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80024f0:	edc7 0a01 	vstr	s1, [r7, #4]
			leftMotor.setTargetSpeed(-lSpd);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80024fa:	eef1 7a67 	vneg.f32	s15, s15
 80024fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fe8e 	bl	8002224 <_ZN5Motor14setTargetSpeedEf>
			rightMotor.setTargetSpeed(rSpd);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3354      	adds	r3, #84	; 0x54
 800250c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fe87 	bl	8002224 <_ZN5Motor14setTargetSpeedEf>
	}
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <_ZN10TanControl13getErrorAngleEPf>:
	        spd.ang = K_ANG * ang + spd.lin * sin(ang) / dist;
	    }
	    return spd;
	}

	int32_t getErrorAngle(float *distances){
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
		int32_t errorAngle = 1000;
 800252a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252e:	617b      	str	r3, [r7, #20]
		float minDistance = (float)MAX_DIST;
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <_ZN10TanControl13getErrorAngleEPf+0x78>)
 8002532:	613b      	str	r3, [r7, #16]
		for (int32_t i = 0; i < 360; i += 9) {
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800253e:	da23      	bge.n	8002588 <_ZN10TanControl13getErrorAngleEPf+0x68>

			  if(distances[i]<minDistance&&distances[i]!=0){
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	4413      	add	r3, r2
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	dd12      	ble.n	8002580 <_ZN10TanControl13getErrorAngleEPf+0x60>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	4413      	add	r3, r2
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	eef5 7a40 	vcmp.f32	s15, #0.0
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256e:	d007      	beq.n	8002580 <_ZN10TanControl13getErrorAngleEPf+0x60>
				  minDistance = distances[i];
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	4413      	add	r3, r2
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	613b      	str	r3, [r7, #16]
				  errorAngle = i;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	617b      	str	r3, [r7, #20]
		for (int32_t i = 0; i < 360; i += 9) {
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3309      	adds	r3, #9
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	e7d7      	b.n	8002538 <_ZN10TanControl13getErrorAngleEPf+0x18>
			  }
		  }
		  return (int32_t)errorAngle;
 8002588:	697b      	ldr	r3, [r7, #20]
	}
 800258a:	4618      	mov	r0, r3
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	466a6000 	.word	0x466a6000

0800259c <_ZN10TanControl8getEnemyEPf>:

	bool getEnemy(float *distances){
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
		flagEnemy = false;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
		for (int32_t i = 0; i < 360; i +=9) {
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80025b6:	da20      	bge.n	80025fa <_ZN10TanControl8getEnemyEPf+0x5e>
			if(distances[i]>MIN_RANGE_LID&&distances[i]<MAX_RANGE_LID) {
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800260c <_ZN10TanControl8getEnemyEPf+0x70>
 80025c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d0:	dd0f      	ble.n	80025f2 <_ZN10TanControl8getEnemyEPf+0x56>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002610 <_ZN10TanControl8getEnemyEPf+0x74>
 80025e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ea:	d502      	bpl.n	80025f2 <_ZN10TanControl8getEnemyEPf+0x56>
				flagEnemy = true;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
		for (int32_t i = 0; i < 360; i +=9) {
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	3309      	adds	r3, #9
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e7da      	b.n	80025b0 <_ZN10TanControl8getEnemyEPf+0x14>
			}
		}

		return flagEnemy;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	781b      	ldrb	r3, [r3, #0]
	}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	43160000 	.word	0x43160000
 8002610:	43c80000 	.word	0x43c80000

08002614 <_ZN10TanControl8limitAngEl>:
	int32_t limitAng(int32_t ang){
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
		int32_t inAng = ang;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	60fb      	str	r3, [r7, #12]
		while (inAng >= HALF_CIRCLE) {
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2bb3      	cmp	r3, #179	; 0xb3
 8002626:	dd04      	ble.n	8002632 <_ZN10TanControl8limitAngEl+0x1e>
			inAng -= 2 * HALF_CIRCLE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800262e:	60fb      	str	r3, [r7, #12]
		while (inAng >= HALF_CIRCLE) {
 8002630:	e7f7      	b.n	8002622 <_ZN10TanControl8limitAngEl+0xe>
		}
		while (inAng <= -HALF_CIRCLE) {
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 8002638:	da04      	bge.n	8002644 <_ZN10TanControl8limitAngEl+0x30>
			inAng += 2 * HALF_CIRCLE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002640:	60fb      	str	r3, [r7, #12]
		while (inAng <= -HALF_CIRCLE) {
 8002642:	e7f6      	b.n	8002632 <_ZN10TanControl8limitAngEl+0x1e>
		}
		return inAng;
 8002644:	68fb      	ldr	r3, [r7, #12]
	}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4618      	mov	r0, r3
 800265e:	f001 f966 	bl	800392e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_ZN6TelegaD1Ev>:
class Telega{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3354      	adds	r3, #84	; 0x54
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fed6 	bl	800242a <_ZN5MotorD1Ev>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fed2 	bl	800242a <_ZN5MotorD1Ev>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_ZN10TanControlC1Ev>:
class TanControl{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <_ZN12ActionsQueueC1Ev>:

class ActionsQueue
{
public:
	
	ActionsQueue(){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f001 f925 	bl	8003906 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3328      	adds	r3, #40	; 0x28
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe fc71 	bl	8000fa8 <_ZN7RPLidarC1Ev>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff febb 	bl	8002448 <_ZN6TelegaC1Ev>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ffd9 	bl	8002690 <_ZN10TanControlC1Ev>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f8c3 2c3c 	str.w	r2, [r3, #3132]	; 0xc3c
	};
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <_ZN12ActionsQueue4initEv>:
	void init(){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
		lid.begin();
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3328      	adds	r3, #40	; 0x28
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fc7f 	bl	8001008 <_ZN7RPLidar5beginEv>
		lid.startScan();
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3328      	adds	r3, #40	; 0x28
 800270e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fd9d 	bl	8001254 <_ZN7RPLidar9startScanEbm>
	//	lid.startUart_IT();
	}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_ZN12ActionsQueue4pushE7ACTIONS>:

	void push(ACTIONS action) {
 8002722:	b590      	push	{r4, r7, lr}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	70fb      	strb	r3, [r7, #3]
		rQueue.push(RobotInstruction(action));
 800272e:	687c      	ldr	r4, [r7, #4]
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	f107 0308 	add.w	r3, r7, #8
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fa15 	bl	8002b68 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>
 800273e:	f107 0308 	add.w	r3, r7, #8
 8002742:	4619      	mov	r1, r3
 8002744:	4620      	mov	r0, r4
 8002746:	f001 f917 	bl	8003978 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>
	};
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	bd90      	pop	{r4, r7, pc}

08002752 <_ZN12ActionsQueue4pushE7ACTIONSf>:
	void push(ACTIONS action, float value) {
 8002752:	b590      	push	{r4, r7, lr}
 8002754:	b087      	sub	sp, #28
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	460b      	mov	r3, r1
 800275c:	ed87 0a01 	vstr	s0, [r7, #4]
 8002760:	72fb      	strb	r3, [r7, #11]
		rQueue.push(RobotInstruction(action, value));
 8002762:	68fc      	ldr	r4, [r7, #12]
 8002764:	7afa      	ldrb	r2, [r7, #11]
 8002766:	f107 0310 	add.w	r3, r7, #16
 800276a:	ed97 0a01 	vldr	s0, [r7, #4]
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fa13 	bl	8002b9c <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONSf>
 8002776:	f107 0310 	add.w	r3, r7, #16
 800277a:	4619      	mov	r1, r3
 800277c:	4620      	mov	r0, r4
 800277e:	f001 f8fb 	bl	8003978 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>
	};
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd90      	pop	{r4, r7, pc}

0800278a <_ZN12ActionsQueue5clearEv>:

	int getSize() {
		return rQueue.size();
	}

	void clear() {
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
		while (!rQueue.empty()) {
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4618      	mov	r0, r3
 8002796:	f001 f90e 	bl	80039b6 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5emptyEv>
 800279a:	4603      	mov	r3, r0
 800279c:	f083 0301 	eor.w	r3, r3, #1
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <_ZN12ActionsQueue5clearEv+0x26>
			rQueue.pop();
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f001 f911 	bl	80039d0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
		while (!rQueue.empty()) {
 80027ae:	e7f0      	b.n	8002792 <_ZN12ActionsQueue5clearEv+0x8>
		}
		delayInit = false;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38
	}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_ZN12ActionsQueue7isClearEv>:
	bool isClear() {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
		if (rQueue.size() == 0) {
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f001 f8e6 	bl	800399c <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	bf0c      	ite	eq
 80027d6:	2301      	moveq	r3, #1
 80027d8:	2300      	movne	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <_ZN12ActionsQueue7isClearEv+0x24>
			return true;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e00f      	b.n	8002804 <_ZN12ActionsQueue7isClearEv+0x44>
		}
		else if (rQueue.front().robotAction == ACTIONS::IDLE) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f001 f8fe 	bl	80039e8 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 80027ec:	4603      	mov	r3, r0
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <_ZN12ActionsQueue7isClearEv+0x42>
			return true;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <_ZN12ActionsQueue7isClearEv+0x44>
		}
		else {
			return false;
 8002802:	2300      	movs	r3, #0
		};
	}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_ZN12ActionsQueue7handlerEv>:

	void handler(){
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
		telega.handler();
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fe32 	bl	8002484 <_ZN6Telega7handlerEv>
	}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <_ZN12ActionsQueue9onReceiveEh>:

	void onReceive(uint8_t byte){
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	70fb      	strb	r3, [r7, #3]
		lid.onReceive(byte);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3328      	adds	r3, #40	; 0x28
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fe37 	bl	80014b0 <_ZN7RPLidar9onReceiveEh>
	}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <_ZN12ActionsQueue10checkEnemyEv>:

	int32_t checkEnemy(){
 800284a:	b590      	push	{r4, r7, lr}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
		ang  = tan.getErrorAngle(lid.getDist());
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f603 4424 	addw	r4, r3, #3108	; 0xc24
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3328      	adds	r3, #40	; 0x28
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe fd49 	bl	80012f4 <_ZN7RPLidar7getDistEv>
 8002862:	4603      	mov	r3, r0
 8002864:	4619      	mov	r1, r3
 8002866:	4620      	mov	r0, r4
 8002868:	f7ff fe5a 	bl	8002520 <_ZN10TanControl13getErrorAngleEPf>
 800286c:	4602      	mov	r2, r0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8c3 2c3c 	str.w	r2, [r3, #3132]	; 0xc3c
		int32_t angLimit = 1000;
 8002874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002878:	60fb      	str	r3, [r7, #12]
		if (ang<361)angLimit = tan.limitAng(ang);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8d3 3c3c 	ldr.w	r3, [r3, #3132]	; 0xc3c
 8002880:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002884:	dc0a      	bgt.n	800289c <_ZN12ActionsQueue10checkEnemyEv+0x52>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f603 4224 	addw	r2, r3, #3108	; 0xc24
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8d3 3c3c 	ldr.w	r3, [r3, #3132]	; 0xc3c
 8002892:	4619      	mov	r1, r3
 8002894:	4610      	mov	r0, r2
 8002896:	f7ff febd 	bl	8002614 <_ZN10TanControl8limitAngEl>
 800289a:	60f8      	str	r0, [r7, #12]
		return angLimit;
 800289c:	68fb      	ldr	r3, [r7, #12]
	}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}

080028a6 <_ZN12ActionsQueue8getEnemyEv>:

	bool getEnemy(){
 80028a6:	b590      	push	{r4, r7, lr}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
		return tan.getEnemy(lid.getDist());
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f603 4424 	addw	r4, r3, #3108	; 0xc24
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3328      	adds	r3, #40	; 0x28
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe fd1b 	bl	80012f4 <_ZN7RPLidar7getDistEv>
 80028be:	4603      	mov	r3, r0
 80028c0:	4619      	mov	r1, r3
 80028c2:	4620      	mov	r0, r4
 80028c4:	f7ff fe6a 	bl	800259c <_ZN10TanControl8getEnemyEPf>
 80028c8:	4603      	mov	r3, r0
	}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd90      	pop	{r4, r7, pc}
	...

080028d4 <_ZN12ActionsQueue9fastCycleEv>:
	void fastCycle() {
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	ed2d 8b02 	vpush	{d8}
 80028da:	b089      	sub	sp, #36	; 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

		static uint32_t TimeDelay = 0
				;
		int32_t angLimit = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]
//					lid.startScan(false, 500);
//				}
//		  }


		if (rQueue.empty()) {
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f001 f865 	bl	80039b6 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5emptyEv>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00d      	beq.n	800290e <_ZN12ActionsQueue9fastCycleEv+0x3a>
			rQueue.push(RobotInstruction(IDLE));
 80028f2:	687c      	ldr	r4, [r7, #4]
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f934 	bl	8002b68 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	4619      	mov	r1, r3
 8002906:	4620      	mov	r0, r4
 8002908:	f001 f836 	bl	8003978 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>
				break;
			default:
				break;
			}
		}
	};
 800290c:	e117      	b.n	8002b3e <_ZN12ActionsQueue9fastCycleEv+0x26a>
		else if ((rQueue.size() > 1) && (rQueue.front().robotAction == IDLE)) {
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4618      	mov	r0, r3
 8002912:	f001 f843 	bl	800399c <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>
 8002916:	4603      	mov	r3, r0
 8002918:	2b01      	cmp	r3, #1
 800291a:	d909      	bls.n	8002930 <_ZN12ActionsQueue9fastCycleEv+0x5c>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4618      	mov	r0, r3
 8002920:	f001 f862 	bl	80039e8 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 8002924:	4603      	mov	r3, r0
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <_ZN12ActionsQueue9fastCycleEv+0x5c>
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <_ZN12ActionsQueue9fastCycleEv+0x5e>
 8002930:	2300      	movs	r3, #0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <_ZN12ActionsQueue9fastCycleEv+0x6c>
			rQueue.pop();
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4618      	mov	r0, r3
 800293a:	f001 f849 	bl	80039d0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
	};
 800293e:	e0fe      	b.n	8002b3e <_ZN12ActionsQueue9fastCycleEv+0x26a>
			RobotInstruction _curInstr = rQueue.front();
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4618      	mov	r0, r3
 8002944:	f001 f850 	bl	80039e8 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 8002948:	4602      	mov	r2, r0
 800294a:	f107 030c 	add.w	r3, r7, #12
 800294e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002952:	e883 0003 	stmia.w	r3, {r0, r1}
			switch (_curInstr.robotAction)
 8002956:	7b3b      	ldrb	r3, [r7, #12]
 8002958:	2b09      	cmp	r3, #9
 800295a:	f200 80ed 	bhi.w	8002b38 <_ZN12ActionsQueue9fastCycleEv+0x264>
 800295e:	a201      	add	r2, pc, #4	; (adr r2, 8002964 <_ZN12ActionsQueue9fastCycleEv+0x90>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	08002b39 	.word	0x08002b39
 8002968:	0800298d 	.word	0x0800298d
 800296c:	080029ab 	.word	0x080029ab
 8002970:	080029c9 	.word	0x080029c9
 8002974:	080029e7 	.word	0x080029e7
 8002978:	08002a23 	.word	0x08002a23
 800297c:	08002a55 	.word	0x08002a55
 8002980:	08002adb 	.word	0x08002adb
 8002984:	08002a05 	.word	0x08002a05
 8002988:	08002a41 	.word	0x08002a41
				telega.setRobotSpeed(0,0);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 8002992:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8002b4c <_ZN12ActionsQueue9fastCycleEv+0x278>
 8002996:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8002b4c <_ZN12ActionsQueue9fastCycleEv+0x278>
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fd83 	bl	80024a6 <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 f814 	bl	80039d0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 80029a8:	e0c9      	b.n	8002b3e <_ZN12ActionsQueue9fastCycleEv+0x26a>
				telega.setRobotSpeed(0,TURN_SPEED);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 80029b0:	eddf 0a67 	vldr	s1, [pc, #412]	; 8002b50 <_ZN12ActionsQueue9fastCycleEv+0x27c>
 80029b4:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8002b4c <_ZN12ActionsQueue9fastCycleEv+0x278>
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fd74 	bl	80024a6 <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 f805 	bl	80039d0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 80029c6:	e0ba      	b.n	8002b3e <_ZN12ActionsQueue9fastCycleEv+0x26a>
				telega.setRobotSpeed(0,-TURN_SPEED);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 80029ce:	eddf 0a61 	vldr	s1, [pc, #388]	; 8002b54 <_ZN12ActionsQueue9fastCycleEv+0x280>
 80029d2:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8002b4c <_ZN12ActionsQueue9fastCycleEv+0x278>
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fd65 	bl	80024a6 <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fff6 	bl	80039d0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 80029e4:	e0ab      	b.n	8002b3e <_ZN12ActionsQueue9fastCycleEv+0x26a>
				telega.setRobotSpeed(MAX_MOT_SPEED*0.6,0);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 80029ec:	eddf 0a57 	vldr	s1, [pc, #348]	; 8002b4c <_ZN12ActionsQueue9fastCycleEv+0x278>
 80029f0:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8002b58 <_ZN12ActionsQueue9fastCycleEv+0x284>
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fd56 	bl	80024a6 <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 ffe7 	bl	80039d0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002a02:	e09c      	b.n	8002b3e <_ZN12ActionsQueue9fastCycleEv+0x26a>
				telega.setRobotSpeed(MAX_MOT_SPEED*0.8,0);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 8002a0a:	eddf 0a50 	vldr	s1, [pc, #320]	; 8002b4c <_ZN12ActionsQueue9fastCycleEv+0x278>
 8002a0e:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8002b5c <_ZN12ActionsQueue9fastCycleEv+0x288>
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fd47 	bl	80024a6 <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 ffd8 	bl	80039d0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002a20:	e08d      	b.n	8002b3e <_ZN12ActionsQueue9fastCycleEv+0x26a>
				telega.setRobotSpeed(-MAX_MOT_SPEED*0.6, 0);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 8002a28:	eddf 0a48 	vldr	s1, [pc, #288]	; 8002b4c <_ZN12ActionsQueue9fastCycleEv+0x278>
 8002a2c:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8002b60 <_ZN12ActionsQueue9fastCycleEv+0x28c>
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fd38 	bl	80024a6 <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 ffc9 	bl	80039d0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002a3e:	e07e      	b.n	8002b3e <_ZN12ActionsQueue9fastCycleEv+0x26a>
				lid.clearMinDist();
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3328      	adds	r3, #40	; 0x28
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fc7d 	bl	8001344 <_ZN7RPLidar12clearMinDistEv>
				rQueue.pop();
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 ffbf 	bl	80039d0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002a52:	e074      	b.n	8002b3e <_ZN12ActionsQueue9fastCycleEv+0x26a>
			        angLimit = checkEnemy(); // Ограничение угла [-180, 180]
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff fef8 	bl	800284a <_ZN12ActionsQueue10checkEnemyEv>
 8002a5a:	61f8      	str	r0, [r7, #28]
			        if(angLimit<360){
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002a62:	da35      	bge.n	8002ad0 <_ZN12ActionsQueue9fastCycleEv+0x1fc>
						spd.lin = 0.0f;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
						spd.ang = TURN_SPEED*angLimit/fabs((float)angLimit); // Только угловое движение
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2232      	movs	r2, #50	; 0x32
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	ee07 3a90 	vmov	s15, r3
 8002a7c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a8e:	f7fe fe07 	bl	80016a0 <_ZSt4fabsf>
 8002a92:	eeb0 7a40 	vmov.f32	s14, s0
 8002a96:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8002aa0:	edc3 7a00 	vstr	s15, [r3]
						telega.setRobotSpeed(spd.lin, -spd.ang); // Угловая скорость инвертирована
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f603 327c 	addw	r2, r3, #2940	; 0xb7c
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8002ab0:	ed93 7a00 	vldr	s14, [r3]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	eef1 7a67 	vneg.f32	s15, s15
 8002ac2:	eef0 0a67 	vmov.f32	s1, s15
 8002ac6:	eeb0 0a47 	vmov.f32	s0, s14
 8002aca:	4610      	mov	r0, r2
 8002acc:	f7ff fceb 	bl	80024a6 <_ZN6Telega13setRobotSpeedEff>
			    rQueue.pop();
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 ff7c 	bl	80039d0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002ad8:	e031      	b.n	8002b3e <_ZN12ActionsQueue9fastCycleEv+0x26a>
				if (!delayInit) {
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3c38 	ldrb.w	r3, [r3, #3128]	; 0xc38
 8002ae0:	f083 0301 	eor.w	r3, r3, #1
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d009      	beq.n	8002afe <_ZN12ActionsQueue9fastCycleEv+0x22a>
					delayInit = true;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38
					delayBegin = HAL_GetTick();
 8002af2:	f002 ff63 	bl	80059bc <HAL_GetTick>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <_ZN12ActionsQueue9fastCycleEv+0x290>)
 8002afa:	6013      	str	r3, [r2, #0]
				break;
 8002afc:	e01e      	b.n	8002b3c <_ZN12ActionsQueue9fastCycleEv+0x268>
				else if (HAL_GetTick() - delayBegin >= (uint16_t)_curInstr.parametr) {
 8002afe:	f002 ff5d 	bl	80059bc <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <_ZN12ActionsQueue9fastCycleEv+0x290>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b12:	ee17 2a90 	vmov	r2, s15
 8002b16:	b292      	uxth	r2, r2
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	bf2c      	ite	cs
 8002b1c:	2301      	movcs	r3, #1
 8002b1e:	2300      	movcc	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <_ZN12ActionsQueue9fastCycleEv+0x268>
					rQueue.pop();
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 ff51 	bl	80039d0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
					delayInit = false;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38
				break;
 8002b36:	e001      	b.n	8002b3c <_ZN12ActionsQueue9fastCycleEv+0x268>
				break;
 8002b38:	bf00      	nop
 8002b3a:	e000      	b.n	8002b3e <_ZN12ActionsQueue9fastCycleEv+0x26a>
				break;
 8002b3c:	bf00      	nop
	};
 8002b3e:	bf00      	nop
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	ecbd 8b02 	vpop	{d8}
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	00000000 	.word	0x00000000
 8002b50:	42480000 	.word	0x42480000
 8002b54:	c2480000 	.word	0xc2480000
 8002b58:	42700000 	.word	0x42700000
 8002b5c:	42a00000 	.word	0x42a00000
 8002b60:	c2700000 	.word	0xc2700000
 8002b64:	20000204 	.word	0x20000204

08002b68 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>:
		bool paramAvalible = false;
		bool pointAvalible = false;
		float parametr = 0;

		RobotInstruction() {};
		RobotInstruction(ACTIONS _action)
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
			: robotAction(_action) {};
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	705a      	strb	r2, [r3, #1]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	709a      	strb	r2, [r3, #2]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONSf>:

		RobotInstruction(ACTIONS _action, float _param)
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	ed87 0a01 	vstr	s0, [r7, #4]
 8002baa:	72fb      	strb	r3, [r7, #11]
			: robotAction(_action), paramAvalible(true), parametr(_param), pointAvalible(false) {};
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	7afa      	ldrb	r2, [r7, #11]
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	705a      	strb	r2, [r3, #1]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	709a      	strb	r2, [r3, #2]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <_ZN12ActionsQueueD1Ev>:
class ActionsQueue
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fd43 	bl	800266c <_ZN6TelegaD1Ev>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3328      	adds	r3, #40	; 0x28
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe fa00 	bl	8000ff0 <_ZN7RPLidarD1Ev>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fd2d 	bl	8002652 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEED1Ev>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <_ZN9AutoPilotC1Ev>:
#include <LineDetector.h>
#include <ActionsQueue.h>

class AutoPilot {
public:
	AutoPilot()
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
	{
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fd4d 	bl	80026ac <_ZN12ActionsQueueC1Ev>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe fe05 	bl	8001828 <_ZN12LineDetectorC1Ev>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2c60 	strb.w	r2, [r3, #3168]	; 0xc60
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2c61 	strb.w	r2, [r3, #3169]	; 0xc61
	};
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_ZN9AutoPilot7handlerEv>:
		ENEMY_LOST,
		AVOID_LINE,
	};


	void handler() {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
		aQueue.handler();
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fdde 	bl	800280c <_ZN12ActionsQueue7handlerEv>
	}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <_ZN9AutoPilot9onReceiveEh>:

	void onReceive(uint8_t byte){
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
		aQueue.onReceive(byte);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fddc 	bl	8002828 <_ZN12ActionsQueue9onReceiveEh>
	}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_ZN9AutoPilot9fastCycleEv>:
	void reset() {
		aQueue.clear();
		curState = AutoPilot::SEARCH;
	}

	void fastCycle(){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

		line.handler();
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe fdf4 	bl	8001874 <_ZN12LineDetector7handlerEv>
				if (line.isCrossed()) {
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fe31 	bl	80018fa <_ZN12LineDetector9isCrossedEv>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <_ZN9AutoPilot9fastCycleEv+0x2e>
					curState = AVOID_LINE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2205      	movs	r2, #5
 8002ca2:	f883 2c61 	strb.w	r2, [r3, #3169]	; 0xc61
				}

				ang = aQueue.checkEnemy();
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fdce 	bl	800284a <_ZN12ActionsQueue10checkEnemyEv>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
				switch (curState)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3c61 	ldrb.w	r3, [r3, #3169]	; 0xc61
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	f200 8109 	bhi.w	8002ed6 <_ZN9AutoPilot9fastCycleEv+0x25e>
 8002cc4:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <_ZN9AutoPilot9fastCycleEv+0x54>)
 8002cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cca:	bf00      	nop
 8002ccc:	08002ce1 	.word	0x08002ce1
 8002cd0:	08002d53 	.word	0x08002d53
 8002cd4:	08002e1f 	.word	0x08002e1f
 8002cd8:	08002ed7 	.word	0x08002ed7
 8002cdc:	08002e5d 	.word	0x08002e5d
				{

				case AutoPilot::SEARCH:
					if (lastState != SEARCH) {
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3c60 	ldrb.w	r3, [r3, #3168]	; 0xc60
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d007      	beq.n	8002cfa <_ZN9AutoPilot9fastCycleEv+0x82>
						lastState = SEARCH;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2c60 	strb.w	r2, [r3, #3168]	; 0xc60
						aQueue.clear();
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fd48 	bl	800278a <_ZN12ActionsQueue5clearEv>
					}

					if (aQueue.isClear()) {
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fd5f 	bl	80027c0 <_ZN12ActionsQueue7isClearEv>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d017      	beq.n	8002d38 <_ZN9AutoPilot9fastCycleEv+0xc0>
						aQueue.push(GO_FORWARD);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2104      	movs	r1, #4
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fd08 	bl	8002722 <_ZN12ActionsQueue4pushE7ACTIONS>
						aQueue.push(DELAY,500);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8002ee8 <_ZN9AutoPilot9fastCycleEv+0x270>
 8002d18:	2107      	movs	r1, #7
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fd19 	bl	8002752 <_ZN12ActionsQueue4pushE7ACTIONSf>
						aQueue.push(STOP);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2101      	movs	r1, #1
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fcfc 	bl	8002722 <_ZN12ActionsQueue4pushE7ACTIONS>
						aQueue.push(DELAY,2000);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8002eec <_ZN9AutoPilot9fastCycleEv+0x274>
 8002d30:	2107      	movs	r1, #7
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fd0d 	bl	8002752 <_ZN12ActionsQueue4pushE7ACTIONSf>
					}

					if (aQueue.getEnemy()) {
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fdb3 	bl	80028a6 <_ZN12ActionsQueue8getEnemyEv>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80c0 	beq.w	8002ec8 <_ZN9AutoPilot9fastCycleEv+0x250>
						curState = ATACK;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2c61 	strb.w	r2, [r3, #3169]	; 0xc61
					}
					break;
 8002d50:	e0ba      	b.n	8002ec8 <_ZN9AutoPilot9fastCycleEv+0x250>

				case AutoPilot::ATACK:
					if (lastState != ATACK) {
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3c60 	ldrb.w	r3, [r3, #3168]	; 0xc60
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d007      	beq.n	8002d6c <_ZN9AutoPilot9fastCycleEv+0xf4>
						lastState = ATACK;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2c60 	strb.w	r2, [r3, #3168]	; 0xc60
						aQueue.clear();
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fd0f 	bl	800278a <_ZN12ActionsQueue5clearEv>
					}
					if(abs(ang)>20&&abs(ang)<361){
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	; 0xc5c
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fc86 	bl	8001684 <_ZSt3absl>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b14      	cmp	r3, #20
 8002d7c:	dd0b      	ble.n	8002d96 <_ZN9AutoPilot9fastCycleEv+0x11e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	; 0xc5c
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe fc7d 	bl	8001684 <_ZSt3absl>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002d90:	dc01      	bgt.n	8002d96 <_ZN9AutoPilot9fastCycleEv+0x11e>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <_ZN9AutoPilot9fastCycleEv+0x120>
 8002d96:	2300      	movs	r3, #0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d01f      	beq.n	8002ddc <_ZN9AutoPilot9fastCycleEv+0x164>
						if (aQueue.isClear()){
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fd0e 	bl	80027c0 <_ZN12ActionsQueue7isClearEv>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d02a      	beq.n	8002e00 <_ZN9AutoPilot9fastCycleEv+0x188>
							aQueue.push(ACTIONS::SET_SPEED_TURN);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2106      	movs	r1, #6
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fcb7 	bl	8002722 <_ZN12ActionsQueue4pushE7ACTIONS>
							aQueue.push(ACTIONS::DELAY,300);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8002ef0 <_ZN9AutoPilot9fastCycleEv+0x278>
 8002dba:	2107      	movs	r1, #7
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fcc8 	bl	8002752 <_ZN12ActionsQueue4pushE7ACTIONSf>
							aQueue.push(ACTIONS::STOP);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fcab 	bl	8002722 <_ZN12ActionsQueue4pushE7ACTIONS>
							aQueue.push(ACTIONS::DELAY,200);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8002ef4 <_ZN9AutoPilot9fastCycleEv+0x27c>
 8002dd2:	2107      	movs	r1, #7
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fcbc 	bl	8002752 <_ZN12ActionsQueue4pushE7ACTIONSf>
 8002dda:	e011      	b.n	8002e00 <_ZN9AutoPilot9fastCycleEv+0x188>
						}
					}
					else if (abs(ang)<20){
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	; 0xc5c
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe fc4e 	bl	8001684 <_ZSt3absl>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b13      	cmp	r3, #19
 8002dec:	bfd4      	ite	le
 8002dee:	2301      	movle	r3, #1
 8002df0:	2300      	movgt	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <_ZN9AutoPilot9fastCycleEv+0x188>
						curState = FIN_ATACK;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	f883 2c61 	strb.w	r2, [r3, #3169]	; 0xc61
					}
					if (!aQueue.getEnemy()) {
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fd4f 	bl	80028a6 <_ZN12ActionsQueue8getEnemyEv>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f083 0301 	eor.w	r3, r3, #1
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d05b      	beq.n	8002ecc <_ZN9AutoPilot9fastCycleEv+0x254>
						curState = SEARCH;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2c61 	strb.w	r2, [r3, #3169]	; 0xc61
					}

					break;
 8002e1c:	e056      	b.n	8002ecc <_ZN9AutoPilot9fastCycleEv+0x254>
				case AutoPilot::FIN_ATACK:
					if (lastState != FIN_ATACK) {
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3c60 	ldrb.w	r3, [r3, #3168]	; 0xc60
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d053      	beq.n	8002ed0 <_ZN9AutoPilot9fastCycleEv+0x258>
						lastState = FIN_ATACK;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	f883 2c60 	strb.w	r2, [r3, #3168]	; 0xc60
						aQueue.clear();
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fca9 	bl	800278a <_ZN12ActionsQueue5clearEv>

						aQueue.push(ACTIONS::STOP);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fc70 	bl	8002722 <_ZN12ActionsQueue4pushE7ACTIONS>
						aQueue.push(ACTIONS::DELAY,1000);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8002ef8 <_ZN9AutoPilot9fastCycleEv+0x280>
 8002e48:	2107      	movs	r1, #7
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fc81 	bl	8002752 <_ZN12ActionsQueue4pushE7ACTIONSf>
						aQueue.push(GO_FORWARD_MAX);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2108      	movs	r1, #8
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fc64 	bl	8002722 <_ZN12ActionsQueue4pushE7ACTIONS>
					}

					break;
 8002e5a:	e039      	b.n	8002ed0 <_ZN9AutoPilot9fastCycleEv+0x258>
				case AutoPilot::AVOID_LINE:
					if (lastState != AVOID_LINE) {
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3c60 	ldrb.w	r3, [r3, #3168]	; 0xc60
 8002e62:	2b05      	cmp	r3, #5
 8002e64:	d024      	beq.n	8002eb0 <_ZN9AutoPilot9fastCycleEv+0x238>
						lastState = AVOID_LINE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2205      	movs	r2, #5
 8002e6a:	f883 2c60 	strb.w	r2, [r3, #3168]	; 0xc60
						aQueue.clear();
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fc8a 	bl	800278a <_ZN12ActionsQueue5clearEv>

						aQueue.push(ACTIONS::GO_BACKWARD);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2105      	movs	r1, #5
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fc51 	bl	8002722 <_ZN12ActionsQueue4pushE7ACTIONS>
						aQueue.push(DELAY, 2000);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8002eec <_ZN9AutoPilot9fastCycleEv+0x274>
 8002e86:	2107      	movs	r1, #7
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fc62 	bl	8002752 <_ZN12ActionsQueue4pushE7ACTIONSf>
						aQueue.push(ACTIONS::TURN_LEFT);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2102      	movs	r1, #2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fc45 	bl	8002722 <_ZN12ActionsQueue4pushE7ACTIONS>
						aQueue.push(DELAY, 1000);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8002ef8 <_ZN9AutoPilot9fastCycleEv+0x280>
 8002e9e:	2107      	movs	r1, #7
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fc56 	bl	8002752 <_ZN12ActionsQueue4pushE7ACTIONSf>
						aQueue.push(ACTIONS::STOP);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fc39 	bl	8002722 <_ZN12ActionsQueue4pushE7ACTIONS>
					}


						if (aQueue.isClear()) {
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fc84 	bl	80027c0 <_ZN12ActionsQueue7isClearEv>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00a      	beq.n	8002ed4 <_ZN9AutoPilot9fastCycleEv+0x25c>
							curState = SEARCH;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2c61 	strb.w	r2, [r3, #3169]	; 0xc61
						}
					break;
 8002ec6:	e005      	b.n	8002ed4 <_ZN9AutoPilot9fastCycleEv+0x25c>
					break;
 8002ec8:	bf00      	nop
 8002eca:	e004      	b.n	8002ed6 <_ZN9AutoPilot9fastCycleEv+0x25e>
					break;
 8002ecc:	bf00      	nop
 8002ece:	e002      	b.n	8002ed6 <_ZN9AutoPilot9fastCycleEv+0x25e>
					break;
 8002ed0:	bf00      	nop
 8002ed2:	e000      	b.n	8002ed6 <_ZN9AutoPilot9fastCycleEv+0x25e>
					break;
 8002ed4:	bf00      	nop
				}

		aQueue.fastCycle();
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fcfb 	bl	80028d4 <_ZN12ActionsQueue9fastCycleEv>
	}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	43fa0000 	.word	0x43fa0000
 8002eec:	44fa0000 	.word	0x44fa0000
 8002ef0:	43960000 	.word	0x43960000
 8002ef4:	43480000 	.word	0x43480000
 8002ef8:	447a0000 	.word	0x447a0000

08002efc <_ZN9AutoPilot4initEv>:

	void init(){
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
		aQueue.init();
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fbf6 	bl	80026f8 <_ZN12ActionsQueue4initEv>
		HAL_Delay(100);
 8002f0c:	2064      	movs	r0, #100	; 0x64
 8002f0e:	f002 fd61 	bl	80059d4 <HAL_Delay>
		line.init();
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe fc9e 	bl	800185a <_ZN12LineDetector4initEv>
	}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

AutoPilot pilot;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) // Проверяем, что прерывание от TIM3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d102      	bne.n	8002f40 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        // Действия при срабатывании прерывания
    	 pilot.handler();
 8002f3a:	4804      	ldr	r0, [pc, #16]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002f3c:	f7ff fe80 	bl	8002c40 <_ZN9AutoPilot7handlerEv>

    }
}
 8002f40:	bf00      	nop
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	200004fc 	.word	0x200004fc

08002f50 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <HAL_UART_ErrorCallback+0x38>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d10f      	bne.n	8002f80 <HAL_UART_ErrorCallback+0x30>
        __HAL_UART_CLEAR_OREFLAG(huart); // Очистка переполнения
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
        HAL_UART_Receive_IT(huart, uart_rx_buffer, 1); // Перезапуск приёма
 8002f76:	2201      	movs	r2, #1
 8002f78:	4904      	ldr	r1, [pc, #16]	; (8002f8c <HAL_UART_ErrorCallback+0x3c>)
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f007 fde6 	bl	800ab4c <HAL_UART_Receive_IT>
    }
}
 8002f80:	bf00      	nop
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200003f8 	.word	0x200003f8
 8002f8c:	20000208 	.word	0x20000208

08002f90 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

		if (huart == &huart2) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <HAL_UART_RxCpltCallback+0x34>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d10c      	bne.n	8002fba <HAL_UART_RxCpltCallback+0x2a>
			// Обработать полученный байт
			uint8_t received_byte = uart_rx_buffer[0];
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_UART_RxCpltCallback+0x38>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	73fb      	strb	r3, [r7, #15]

			// Вызываем обработку полученного байта из waitPoint
	        pilot.onReceive(received_byte);
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4808      	ldr	r0, [pc, #32]	; (8002fcc <HAL_UART_RxCpltCallback+0x3c>)
 8002fac:	f7ff fe54 	bl	8002c58 <_ZN9AutoPilot9onReceiveEh>

			// Перезапускаем прерывание для приёма следующего байта
			HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 1);
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4905      	ldr	r1, [pc, #20]	; (8002fc8 <HAL_UART_RxCpltCallback+0x38>)
 8002fb4:	4803      	ldr	r0, [pc, #12]	; (8002fc4 <HAL_UART_RxCpltCallback+0x34>)
 8002fb6:	f007 fdc9 	bl	800ab4c <HAL_UART_Receive_IT>
		}
}
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	200003f8 	.word	0x200003f8
 8002fc8:	20000208 	.word	0x20000208
 8002fcc:	200004fc 	.word	0x200004fc

08002fd0 <_Z4initv>:

void init(){
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
	  //питание для левого энкодера
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002fda:	4818      	ldr	r0, [pc, #96]	; (800303c <_Z4initv+0x6c>)
 8002fdc:	f003 fcb2 	bl	8006944 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fe6:	4815      	ldr	r0, [pc, #84]	; (800303c <_Z4initv+0x6c>)
 8002fe8:	f003 fcac 	bl	8006944 <HAL_GPIO_WritePin>

	  //питание для правого энкодера
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002fec:	2200      	movs	r2, #0
 8002fee:	2110      	movs	r1, #16
 8002ff0:	4813      	ldr	r0, [pc, #76]	; (8003040 <_Z4initv+0x70>)
 8002ff2:	f003 fca7 	bl	8006944 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	2120      	movs	r1, #32
 8002ffa:	4811      	ldr	r0, [pc, #68]	; (8003040 <_Z4initv+0x70>)
 8002ffc:	f003 fca2 	bl	8006944 <HAL_GPIO_WritePin>

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003000:	2100      	movs	r1, #0
 8003002:	4810      	ldr	r0, [pc, #64]	; (8003044 <_Z4initv+0x74>)
 8003004:	f006 fc06 	bl	8009814 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003008:	2104      	movs	r1, #4
 800300a:	480e      	ldr	r0, [pc, #56]	; (8003044 <_Z4initv+0x74>)
 800300c:	f006 fc02 	bl	8009814 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003010:	2108      	movs	r1, #8
 8003012:	480c      	ldr	r0, [pc, #48]	; (8003044 <_Z4initv+0x74>)
 8003014:	f006 fbfe 	bl	8009814 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003018:	210c      	movs	r1, #12
 800301a:	480a      	ldr	r0, [pc, #40]	; (8003044 <_Z4initv+0x74>)
 800301c:	f006 fbfa 	bl	8009814 <HAL_TIM_PWM_Start>

	  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8003020:	2100      	movs	r1, #0
 8003022:	4809      	ldr	r0, [pc, #36]	; (8003048 <_Z4initv+0x78>)
 8003024:	f006 fd4c 	bl	8009ac0 <HAL_TIM_Encoder_Start>

	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8003028:	2100      	movs	r1, #0
 800302a:	4808      	ldr	r0, [pc, #32]	; (800304c <_Z4initv+0x7c>)
 800302c:	f006 fd48 	bl	8009ac0 <HAL_TIM_Encoder_Start>

	  HAL_TIM_Base_Start_IT(&htim1);
 8003030:	4807      	ldr	r0, [pc, #28]	; (8003050 <_Z4initv+0x80>)
 8003032:	f006 fb3d 	bl	80096b0 <HAL_TIM_Base_Start_IT>

}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40020000 	.word	0x40020000
 8003040:	40020400 	.word	0x40020400
 8003044:	20000368 	.word	0x20000368
 8003048:	20000320 	.word	0x20000320
 800304c:	200003b0 	.word	0x200003b0
 8003050:	200002d8 	.word	0x200002d8

08003054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003058:	f002 fc4a 	bl	80058f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800305c:	f000 f82a 	bl	80030b4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003060:	f000 fad8 	bl	8003614 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003064:	f000 faae 	bl	80035c4 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8003068:	f000 fa7e 	bl	8003568 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 800306c:	f000 f894 	bl	8003198 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8003070:	f000 f926 	bl	80032c0 <_ZL12MX_TIM2_Initv>
  MX_TIM4_Init();
 8003074:	f000 fa1a 	bl	80034ac <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 8003078:	f000 f980 	bl	800337c <_ZL12MX_TIM3_Initv>
  MX_TIM1_Init();
 800307c:	f000 f8c0 	bl	8003200 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8003080:	2064      	movs	r0, #100	; 0x64
 8003082:	f002 fca7 	bl	80059d4 <HAL_Delay>
  init();
 8003086:	f7ff ffa3 	bl	8002fd0 <_Z4initv>
  HAL_Delay(100);
 800308a:	2064      	movs	r0, #100	; 0x64
 800308c:	f002 fca2 	bl	80059d4 <HAL_Delay>
  pilot.init();
 8003090:	4805      	ldr	r0, [pc, #20]	; (80030a8 <main+0x54>)
 8003092:	f7ff ff33 	bl	8002efc <_ZN9AutoPilot4initEv>

  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 1);
 8003096:	2201      	movs	r2, #1
 8003098:	4904      	ldr	r1, [pc, #16]	; (80030ac <main+0x58>)
 800309a:	4805      	ldr	r0, [pc, #20]	; (80030b0 <main+0x5c>)
 800309c:	f007 fd56 	bl	800ab4c <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	pilot.fastCycle();
 80030a0:	4801      	ldr	r0, [pc, #4]	; (80030a8 <main+0x54>)
 80030a2:	f7ff fde9 	bl	8002c78 <_ZN9AutoPilot9fastCycleEv>
 80030a6:	e7fb      	b.n	80030a0 <main+0x4c>
 80030a8:	200004fc 	.word	0x200004fc
 80030ac:	20000208 	.word	0x20000208
 80030b0:	200003f8 	.word	0x200003f8

080030b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b094      	sub	sp, #80	; 0x50
 80030b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030ba:	f107 0320 	add.w	r3, r7, #32
 80030be:	2230      	movs	r2, #48	; 0x30
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f009 fc78 	bl	800c9b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030c8:	f107 030c 	add.w	r3, r7, #12
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030d8:	2300      	movs	r3, #0
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <_Z18SystemClock_Configv+0xdc>)
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <_Z18SystemClock_Configv+0xdc>)
 80030e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e6:	6413      	str	r3, [r2, #64]	; 0x40
 80030e8:	4b29      	ldr	r3, [pc, #164]	; (8003190 <_Z18SystemClock_Configv+0xdc>)
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030f4:	2300      	movs	r3, #0
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	4b26      	ldr	r3, [pc, #152]	; (8003194 <_Z18SystemClock_Configv+0xe0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a25      	ldr	r2, [pc, #148]	; (8003194 <_Z18SystemClock_Configv+0xe0>)
 80030fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b23      	ldr	r3, [pc, #140]	; (8003194 <_Z18SystemClock_Configv+0xe0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003110:	2301      	movs	r3, #1
 8003112:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800311a:	2302      	movs	r3, #2
 800311c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800311e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003122:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003124:	230c      	movs	r3, #12
 8003126:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003128:	2360      	movs	r3, #96	; 0x60
 800312a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800312c:	2302      	movs	r3, #2
 800312e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003130:	2304      	movs	r3, #4
 8003132:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003134:	f107 0320 	add.w	r3, r7, #32
 8003138:	4618      	mov	r0, r3
 800313a:	f005 fe11 	bl	8008d60 <HAL_RCC_OscConfig>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800314e:	f000 faed 	bl	800372c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003152:	230f      	movs	r3, #15
 8003154:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003156:	2302      	movs	r3, #2
 8003158:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800315e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003162:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003168:	f107 030c 	add.w	r3, r7, #12
 800316c:	2103      	movs	r1, #3
 800316e:	4618      	mov	r0, r3
 8003170:	f006 f86e 	bl	8009250 <HAL_RCC_ClockConfig>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	bf14      	ite	ne
 800317a:	2301      	movne	r3, #1
 800317c:	2300      	moveq	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8003184:	f000 fad2 	bl	800372c <Error_Handler>
  }
}
 8003188:	bf00      	nop
 800318a:	3750      	adds	r7, #80	; 0x50
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	40007000 	.word	0x40007000

08003198 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800319c:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <_ZL12MX_I2C1_Initv+0x5c>)
 800319e:	4a16      	ldr	r2, [pc, #88]	; (80031f8 <_ZL12MX_I2C1_Initv+0x60>)
 80031a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80031a2:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80031a4:	4a15      	ldr	r2, [pc, #84]	; (80031fc <_ZL12MX_I2C1_Initv+0x64>)
 80031a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031ae:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80031b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031bc:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80031c2:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031d4:	4807      	ldr	r0, [pc, #28]	; (80031f4 <_ZL12MX_I2C1_Initv+0x5c>)
 80031d6:	f003 fbcf 	bl	8006978 <HAL_I2C_Init>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf14      	ite	ne
 80031e0:	2301      	movne	r3, #1
 80031e2:	2300      	moveq	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80031ea:	f000 fa9f 	bl	800372c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000284 	.word	0x20000284
 80031f8:	40005400 	.word	0x40005400
 80031fc:	000186a0 	.word	0x000186a0

08003200 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003206:	f107 0308 	add.w	r3, r7, #8
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003214:	463b      	mov	r3, r7
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800321c:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <_ZL12MX_TIM1_Initv+0xb8>)
 800321e:	4a27      	ldr	r2, [pc, #156]	; (80032bc <_ZL12MX_TIM1_Initv+0xbc>)
 8003220:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8003222:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <_ZL12MX_TIM1_Initv+0xb8>)
 8003224:	2263      	movs	r2, #99	; 0x63
 8003226:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003228:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <_ZL12MX_TIM1_Initv+0xb8>)
 800322a:	2200      	movs	r2, #0
 800322c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800322e:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <_ZL12MX_TIM1_Initv+0xb8>)
 8003230:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003234:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003236:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <_ZL12MX_TIM1_Initv+0xb8>)
 8003238:	2200      	movs	r2, #0
 800323a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800323c:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <_ZL12MX_TIM1_Initv+0xb8>)
 800323e:	2200      	movs	r2, #0
 8003240:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003242:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <_ZL12MX_TIM1_Initv+0xb8>)
 8003244:	2200      	movs	r2, #0
 8003246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003248:	481b      	ldr	r0, [pc, #108]	; (80032b8 <_ZL12MX_TIM1_Initv+0xb8>)
 800324a:	f006 f9e1 	bl	8009610 <HAL_TIM_Base_Init>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 800325e:	f000 fa65 	bl	800372c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003266:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003268:	f107 0308 	add.w	r3, r7, #8
 800326c:	4619      	mov	r1, r3
 800326e:	4812      	ldr	r0, [pc, #72]	; (80032b8 <_ZL12MX_TIM1_Initv+0xb8>)
 8003270:	f006 fe7e 	bl	8009f70 <HAL_TIM_ConfigClockSource>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8003284:	f000 fa52 	bl	800372c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003288:	2300      	movs	r3, #0
 800328a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003290:	463b      	mov	r3, r7
 8003292:	4619      	mov	r1, r3
 8003294:	4808      	ldr	r0, [pc, #32]	; (80032b8 <_ZL12MX_TIM1_Initv+0xb8>)
 8003296:	f007 fa27 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	bf14      	ite	ne
 80032a0:	2301      	movne	r3, #1
 80032a2:	2300      	moveq	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 80032aa:	f000 fa3f 	bl	800372c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80032ae:	bf00      	nop
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200002d8 	.word	0x200002d8
 80032bc:	40010000 	.word	0x40010000

080032c0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08c      	sub	sp, #48	; 0x30
 80032c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032c6:	f107 030c 	add.w	r3, r7, #12
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f009 fb72 	bl	800c9b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032dc:	4b26      	ldr	r3, [pc, #152]	; (8003378 <_ZL12MX_TIM2_Initv+0xb8>)
 80032de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80032e4:	4b24      	ldr	r3, [pc, #144]	; (8003378 <_ZL12MX_TIM2_Initv+0xb8>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ea:	4b23      	ldr	r3, [pc, #140]	; (8003378 <_ZL12MX_TIM2_Initv+0xb8>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80032f0:	4b21      	ldr	r3, [pc, #132]	; (8003378 <_ZL12MX_TIM2_Initv+0xb8>)
 80032f2:	f04f 32ff 	mov.w	r2, #4294967295
 80032f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032f8:	4b1f      	ldr	r3, [pc, #124]	; (8003378 <_ZL12MX_TIM2_Initv+0xb8>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032fe:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <_ZL12MX_TIM2_Initv+0xb8>)
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003304:	2301      	movs	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800330c:	2301      	movs	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003310:	2300      	movs	r3, #0
 8003312:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003318:	2300      	movs	r3, #0
 800331a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800331c:	2301      	movs	r3, #1
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003320:	2300      	movs	r3, #0
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003328:	f107 030c 	add.w	r3, r7, #12
 800332c:	4619      	mov	r1, r3
 800332e:	4812      	ldr	r0, [pc, #72]	; (8003378 <_ZL12MX_TIM2_Initv+0xb8>)
 8003330:	f006 fb20 	bl	8009974 <HAL_TIM_Encoder_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	bf14      	ite	ne
 800333a:	2301      	movne	r3, #1
 800333c:	2300      	moveq	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8003344:	f000 f9f2 	bl	800372c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003348:	2300      	movs	r3, #0
 800334a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800334c:	2300      	movs	r3, #0
 800334e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	4619      	mov	r1, r3
 8003354:	4808      	ldr	r0, [pc, #32]	; (8003378 <_ZL12MX_TIM2_Initv+0xb8>)
 8003356:	f007 f9c7 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 800336a:	f000 f9df 	bl	800372c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800336e:	bf00      	nop
 8003370:	3730      	adds	r7, #48	; 0x30
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000320 	.word	0x20000320

0800337c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003382:	f107 0320 	add.w	r3, r7, #32
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	609a      	str	r2, [r3, #8]
 8003396:	60da      	str	r2, [r3, #12]
 8003398:	611a      	str	r2, [r3, #16]
 800339a:	615a      	str	r2, [r3, #20]
 800339c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800339e:	4b41      	ldr	r3, [pc, #260]	; (80034a4 <_ZL12MX_TIM3_Initv+0x128>)
 80033a0:	4a41      	ldr	r2, [pc, #260]	; (80034a8 <_ZL12MX_TIM3_Initv+0x12c>)
 80033a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033a4:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <_ZL12MX_TIM3_Initv+0x128>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033aa:	4b3e      	ldr	r3, [pc, #248]	; (80034a4 <_ZL12MX_TIM3_Initv+0x128>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80033b0:	4b3c      	ldr	r3, [pc, #240]	; (80034a4 <_ZL12MX_TIM3_Initv+0x128>)
 80033b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80033b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b8:	4b3a      	ldr	r3, [pc, #232]	; (80034a4 <_ZL12MX_TIM3_Initv+0x128>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033be:	4b39      	ldr	r3, [pc, #228]	; (80034a4 <_ZL12MX_TIM3_Initv+0x128>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033c4:	4837      	ldr	r0, [pc, #220]	; (80034a4 <_ZL12MX_TIM3_Initv+0x128>)
 80033c6:	f006 f9d5 	bl	8009774 <HAL_TIM_PWM_Init>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf14      	ite	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	2300      	moveq	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80033da:	f000 f9a7 	bl	800372c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033e6:	f107 0320 	add.w	r3, r7, #32
 80033ea:	4619      	mov	r1, r3
 80033ec:	482d      	ldr	r0, [pc, #180]	; (80034a4 <_ZL12MX_TIM3_Initv+0x128>)
 80033ee:	f007 f97b 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8003402:	f000 f993 	bl	800372c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003406:	2360      	movs	r3, #96	; 0x60
 8003408:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	2200      	movs	r2, #0
 800341a:	4619      	mov	r1, r3
 800341c:	4821      	ldr	r0, [pc, #132]	; (80034a4 <_ZL12MX_TIM3_Initv+0x128>)
 800341e:	f006 fce5 	bl	8009dec <HAL_TIM_PWM_ConfigChannel>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8003432:	f000 f97b 	bl	800372c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	2204      	movs	r2, #4
 800343a:	4619      	mov	r1, r3
 800343c:	4819      	ldr	r0, [pc, #100]	; (80034a4 <_ZL12MX_TIM3_Initv+0x128>)
 800343e:	f006 fcd5 	bl	8009dec <HAL_TIM_PWM_ConfigChannel>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf14      	ite	ne
 8003448:	2301      	movne	r3, #1
 800344a:	2300      	moveq	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8003452:	f000 f96b 	bl	800372c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	2208      	movs	r2, #8
 800345a:	4619      	mov	r1, r3
 800345c:	4811      	ldr	r0, [pc, #68]	; (80034a4 <_ZL12MX_TIM3_Initv+0x128>)
 800345e:	f006 fcc5 	bl	8009dec <HAL_TIM_PWM_ConfigChannel>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 8003472:	f000 f95b 	bl	800372c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003476:	1d3b      	adds	r3, r7, #4
 8003478:	220c      	movs	r2, #12
 800347a:	4619      	mov	r1, r3
 800347c:	4809      	ldr	r0, [pc, #36]	; (80034a4 <_ZL12MX_TIM3_Initv+0x128>)
 800347e:	f006 fcb5 	bl	8009dec <HAL_TIM_PWM_ConfigChannel>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf14      	ite	ne
 8003488:	2301      	movne	r3, #1
 800348a:	2300      	moveq	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 8003492:	f000 f94b 	bl	800372c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003496:	4803      	ldr	r0, [pc, #12]	; (80034a4 <_ZL12MX_TIM3_Initv+0x128>)
 8003498:	f001 ff60 	bl	800535c <HAL_TIM_MspPostInit>

}
 800349c:	bf00      	nop
 800349e:	3728      	adds	r7, #40	; 0x28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000368 	.word	0x20000368
 80034a8:	40000400 	.word	0x40000400

080034ac <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08c      	sub	sp, #48	; 0x30
 80034b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80034b2:	f107 030c 	add.w	r3, r7, #12
 80034b6:	2224      	movs	r2, #36	; 0x24
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f009 fa7c 	bl	800c9b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c0:	1d3b      	adds	r3, r7, #4
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80034c8:	4b25      	ldr	r3, [pc, #148]	; (8003560 <_ZL12MX_TIM4_Initv+0xb4>)
 80034ca:	4a26      	ldr	r2, [pc, #152]	; (8003564 <_ZL12MX_TIM4_Initv+0xb8>)
 80034cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <_ZL12MX_TIM4_Initv+0xb4>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d4:	4b22      	ldr	r3, [pc, #136]	; (8003560 <_ZL12MX_TIM4_Initv+0xb4>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80034da:	4b21      	ldr	r3, [pc, #132]	; (8003560 <_ZL12MX_TIM4_Initv+0xb4>)
 80034dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034e2:	4b1f      	ldr	r3, [pc, #124]	; (8003560 <_ZL12MX_TIM4_Initv+0xb4>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034e8:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <_ZL12MX_TIM4_Initv+0xb4>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80034ee:	2301      	movs	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034f6:	2301      	movs	r3, #1
 80034f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003506:	2301      	movs	r3, #1
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800350a:	2300      	movs	r3, #0
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003512:	f107 030c 	add.w	r3, r7, #12
 8003516:	4619      	mov	r1, r3
 8003518:	4811      	ldr	r0, [pc, #68]	; (8003560 <_ZL12MX_TIM4_Initv+0xb4>)
 800351a:	f006 fa2b 	bl	8009974 <HAL_TIM_Encoder_Init>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 800352e:	f000 f8fd 	bl	800372c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800353a:	1d3b      	adds	r3, r7, #4
 800353c:	4619      	mov	r1, r3
 800353e:	4808      	ldr	r0, [pc, #32]	; (8003560 <_ZL12MX_TIM4_Initv+0xb4>)
 8003540:	f007 f8d2 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8003554:	f000 f8ea 	bl	800372c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003558:	bf00      	nop
 800355a:	3730      	adds	r7, #48	; 0x30
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	200003b0 	.word	0x200003b0
 8003564:	40000800 	.word	0x40000800

08003568 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800356e:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8003570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003572:	4b12      	ldr	r3, [pc, #72]	; (80035bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8003574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800357c:	2200      	movs	r2, #0
 800357e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003580:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8003582:	2200      	movs	r2, #0
 8003584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8003588:	2200      	movs	r2, #0
 800358a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800358e:	220c      	movs	r2, #12
 8003590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003592:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8003594:	2200      	movs	r2, #0
 8003596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800359a:	2200      	movs	r2, #0
 800359c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800359e:	4807      	ldr	r0, [pc, #28]	; (80035bc <_ZL19MX_USART2_UART_Initv+0x54>)
 80035a0:	f007 f924 	bl	800a7ec <HAL_UART_Init>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf14      	ite	ne
 80035aa:	2301      	movne	r3, #1
 80035ac:	2300      	moveq	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80035b4:	f000 f8ba 	bl	800372c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	200003f8 	.word	0x200003f8
 80035c0:	40004400 	.word	0x40004400

080035c4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <_ZL11MX_DMA_Initv+0x4c>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a0f      	ldr	r2, [pc, #60]	; (8003610 <_ZL11MX_DMA_Initv+0x4c>)
 80035d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <_ZL11MX_DMA_Initv+0x4c>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80035e6:	2200      	movs	r2, #0
 80035e8:	2100      	movs	r1, #0
 80035ea:	2010      	movs	r0, #16
 80035ec:	f002 fb15 	bl	8005c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80035f0:	2010      	movs	r0, #16
 80035f2:	f002 fb2e 	bl	8005c52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80035f6:	2200      	movs	r2, #0
 80035f8:	2100      	movs	r1, #0
 80035fa:	2011      	movs	r0, #17
 80035fc:	f002 fb0d 	bl	8005c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003600:	2011      	movs	r0, #17
 8003602:	f002 fb26 	bl	8005c52 <HAL_NVIC_EnableIRQ>

}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800

08003614 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361a:	f107 0314 	add.w	r3, r7, #20
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	60da      	str	r2, [r3, #12]
 8003628:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	4b3b      	ldr	r3, [pc, #236]	; (800371c <_ZL12MX_GPIO_Initv+0x108>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a3a      	ldr	r2, [pc, #232]	; (800371c <_ZL12MX_GPIO_Initv+0x108>)
 8003634:	f043 0304 	orr.w	r3, r3, #4
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b38      	ldr	r3, [pc, #224]	; (800371c <_ZL12MX_GPIO_Initv+0x108>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <_ZL12MX_GPIO_Initv+0x108>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a33      	ldr	r2, [pc, #204]	; (800371c <_ZL12MX_GPIO_Initv+0x108>)
 8003650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b31      	ldr	r3, [pc, #196]	; (800371c <_ZL12MX_GPIO_Initv+0x108>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	4b2d      	ldr	r3, [pc, #180]	; (800371c <_ZL12MX_GPIO_Initv+0x108>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	4a2c      	ldr	r2, [pc, #176]	; (800371c <_ZL12MX_GPIO_Initv+0x108>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6313      	str	r3, [r2, #48]	; 0x30
 8003672:	4b2a      	ldr	r3, [pc, #168]	; (800371c <_ZL12MX_GPIO_Initv+0x108>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	4b26      	ldr	r3, [pc, #152]	; (800371c <_ZL12MX_GPIO_Initv+0x108>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	4a25      	ldr	r2, [pc, #148]	; (800371c <_ZL12MX_GPIO_Initv+0x108>)
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	6313      	str	r3, [r2, #48]	; 0x30
 800368e:	4b23      	ldr	r3, [pc, #140]	; (800371c <_ZL12MX_GPIO_Initv+0x108>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800369a:	2200      	movs	r2, #0
 800369c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036a0:	481f      	ldr	r0, [pc, #124]	; (8003720 <_ZL12MX_GPIO_Initv+0x10c>)
 80036a2:	f003 f94f 	bl	8006944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80036a6:	2200      	movs	r2, #0
 80036a8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80036ac:	481d      	ldr	r0, [pc, #116]	; (8003724 <_ZL12MX_GPIO_Initv+0x110>)
 80036ae:	f003 f949 	bl	8006944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2130      	movs	r1, #48	; 0x30
 80036b6:	481c      	ldr	r0, [pc, #112]	; (8003728 <_ZL12MX_GPIO_Initv+0x114>)
 80036b8:	f003 f944 	bl	8006944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80036bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c2:	2301      	movs	r3, #1
 80036c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	2300      	movs	r3, #0
 80036cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ce:	f107 0314 	add.w	r3, r7, #20
 80036d2:	4619      	mov	r1, r3
 80036d4:	4812      	ldr	r0, [pc, #72]	; (8003720 <_ZL12MX_GPIO_Initv+0x10c>)
 80036d6:	f002 fecd 	bl	8006474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e0:	2301      	movs	r3, #1
 80036e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e8:	2300      	movs	r3, #0
 80036ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	4619      	mov	r1, r3
 80036f2:	480c      	ldr	r0, [pc, #48]	; (8003724 <_ZL12MX_GPIO_Initv+0x110>)
 80036f4:	f002 febe 	bl	8006474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80036f8:	2330      	movs	r3, #48	; 0x30
 80036fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036fc:	2301      	movs	r3, #1
 80036fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003704:	2300      	movs	r3, #0
 8003706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	4619      	mov	r1, r3
 800370e:	4806      	ldr	r0, [pc, #24]	; (8003728 <_ZL12MX_GPIO_Initv+0x114>)
 8003710:	f002 feb0 	bl	8006474 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003714:	bf00      	nop
 8003716:	3728      	adds	r7, #40	; 0x28
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40023800 	.word	0x40023800
 8003720:	40020800 	.word	0x40020800
 8003724:	40020000 	.word	0x40020000
 8003728:	40020400 	.word	0x40020400

0800372c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003730:	b672      	cpsid	i
}
 8003732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003734:	e7fe      	b.n	8003734 <Error_Handler+0x8>

08003736 <_ZNSaIfEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f95f 	bl	8003a02 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f95e 	bl	8003a18 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8003766:	b5b0      	push	{r4, r5, r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681c      	ldr	r4, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f995 	bl	8003aa8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800377e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003780:	461a      	mov	r2, r3
 8003782:	4629      	mov	r1, r5
 8003784:	4620      	mov	r0, r4
 8003786:	f000 f99a 	bl	8003abe <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4618      	mov	r0, r3
 800378e:	f000 f805 	bl	800379c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bdb0      	pop	{r4, r5, r7, pc}

0800379c <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80037b4:	461a      	mov	r2, r3
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f99d 	bl	8003af6 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe f8fa 	bl	80019b8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 80037ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80037d8:	687c      	ldr	r4, [r7, #4]
 80037da:	6838      	ldr	r0, [r7, #0]
 80037dc:	f000 f99e 	bl	8003b1c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80037e0:	4605      	mov	r5, r0
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f9b7 	bl	8003b58 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80037ea:	4602      	mov	r2, r0
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	4611      	mov	r1, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f9a2 	bl	8003b3c <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	461a      	mov	r2, r3
 80037fe:	4629      	mov	r1, r5
 8003800:	4620      	mov	r0, r4
 8003802:	f000 f93d 	bl	8003a80 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 8003806:	f107 030c 	add.w	r3, r7, #12
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff ff9f 	bl	800374e <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8003810:	6838      	ldr	r0, [r7, #0]
 8003812:	f000 f9ac 	bl	8003b6e <_ZNKSt6vectorIfSaIfEE5beginEv>
 8003816:	4605      	mov	r5, r0
 8003818:	6838      	ldr	r0, [r7, #0]
 800381a:	f000 f9b8 	bl	8003b8e <_ZNKSt6vectorIfSaIfEE3endEv>
 800381e:	4606      	mov	r6, r0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 f93e 	bl	8003aa8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800382c:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800382e:	4622      	mov	r2, r4
 8003830:	4631      	mov	r1, r6
 8003832:	4628      	mov	r0, r5
 8003834:	f000 f9bc 	bl	8003bb0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 8003838:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	605a      	str	r2, [r3, #4]
      }
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003848 <_ZNSt6vectorIfSaIfEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
      }
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>:
      vector(initializer_list<value_type> __l,
 8003868:	b5b0      	push	{r4, r5, r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	1d38      	adds	r0, r7, #4
 8003872:	e880 0006 	stmia.w	r0, {r1, r2}
 8003876:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6839      	ldr	r1, [r7, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f9a8 	bl	8003bd2 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8003882:	1d3b      	adds	r3, r7, #4
 8003884:	4618      	mov	r0, r3
 8003886:	f000 f9b3 	bl	8003bf0 <_ZNKSt16initializer_listIfE5beginEv>
 800388a:	4604      	mov	r4, r0
 800388c:	1d3b      	adds	r3, r7, #4
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f9ba 	bl	8003c08 <_ZNKSt16initializer_listIfE3endEv>
 8003894:	4602      	mov	r2, r0
 8003896:	462b      	mov	r3, r5
 8003898:	4621      	mov	r1, r4
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f9c6 	bl	8003c2c <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>
      }
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bdb0      	pop	{r4, r5, r7, pc}

080038aa <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80038aa:	b5b0      	push	{r4, r5, r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	ed87 0a01 	vstr	s0, [r7, #4]
 80038b4:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fc fe4e 	bl	8000558 <__aeabi_f2d>
 80038bc:	4604      	mov	r4, r0
 80038be:	460d      	mov	r5, r1
 80038c0:	6838      	ldr	r0, [r7, #0]
 80038c2:	f7fc fe37 	bl	8000534 <__aeabi_i2d>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	ec43 2b11 	vmov	d1, r2, r3
 80038ce:	ec45 4b10 	vmov	d0, r4, r5
 80038d2:	f008 f8ed 	bl	800bab0 <pow>
 80038d6:	eeb0 7a40 	vmov.f32	s14, s0
 80038da:	eef0 7a60 	vmov.f32	s15, s1
    }
 80038de:	eeb0 0a47 	vmov.f32	s0, s14
 80038e2:	eef0 0a67 	vmov.f32	s1, s15
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bdb0      	pop	{r4, r5, r7, pc}

080038ec <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f9dd 	bl	8003cb6 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
	: c() { }
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	2328      	movs	r3, #40	; 0x28
 8003914:	461a      	mov	r2, r3
 8003916:	2100      	movs	r1, #0
 8003918:	f009 f84e 	bl	800c9b8 <memset>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff ffe4 	bl	80038ec <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800392e:	b580      	push	{r7, lr}
 8003930:	b08a      	sub	sp, #40	; 0x28
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8003936:	f107 0308 	add.w	r3, r7, #8
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f9ed 	bl	8003d1c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>
 8003942:	f107 0318 	add.w	r3, r7, #24
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f9f6 	bl	8003d3a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE3endEv>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fa01 	bl	8003d58 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8003956:	4603      	mov	r3, r0
 8003958:	f107 0218 	add.w	r2, r7, #24
 800395c:	f107 0108 	add.w	r1, r7, #8
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fa20 	bl	8003da6 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f9b5 	bl	8003cd8 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4618      	mov	r0, r3
 8003972:	3728      	adds	r7, #40	; 0x28
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>:
      push(const value_type& __x)
      { c.push_back(__x); }

#if __cplusplus >= 201103L
      void
      push(value_type&& __x)
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8003982:	687c      	ldr	r4, [r7, #4]
 8003984:	6838      	ldr	r0, [r7, #0]
 8003986:	f000 fa1b 	bl	8003dc0 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>
 800398a:	4603      	mov	r3, r0
 800398c:	4619      	mov	r1, r3
 800398e:	4620      	mov	r0, r4
 8003990:	f000 fa21 	bl	8003dd6 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9push_backEOS1_>
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bd90      	pop	{r4, r7, pc}

0800399c <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>:
      size() const
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fa26 	bl	8003df8 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>
 80039ac:	4603      	mov	r3, r0
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5emptyEv>:
      empty() const
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fa2b 	bl	8003e1c <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5emptyEv>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fa30 	bl	8003e40 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv>
      }
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>:
      front()
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	return c.front();
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fa48 	bl	8003e88 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5frontEv>
 80039f8:	4603      	mov	r3, r0
      }
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4618      	mov	r0, r3
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8003a30:	b590      	push	{r4, r7, lr}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8003a3a:	f107 030c 	add.w	r3, r7, #12
 8003a3e:	6839      	ldr	r1, [r7, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 f84a 	bl	8003ada <_ZNSaIfEC1ERKS_>
 8003a46:	f107 030c 	add.w	r3, r7, #12
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fa30 	bl	8003eb0 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8003a50:	4602      	mov	r2, r0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4293      	cmp	r3, r2
 8003a56:	bf8c      	ite	hi
 8003a58:	2301      	movhi	r3, #1
 8003a5a:	2300      	movls	r3, #0
 8003a5c:	b2dc      	uxtb	r4, r3
 8003a5e:	f107 030c 	add.w	r3, r7, #12
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fe73 	bl	800374e <_ZNSaIfED1Ev>
 8003a68:	2c00      	cmp	r4, #0
 8003a6a:	d002      	beq.n	8003a72 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8003a6c:	4803      	ldr	r0, [pc, #12]	; (8003a7c <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x4c>)
 8003a6e:	f008 f811 	bl	800ba94 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8003a72:	687b      	ldr	r3, [r7, #4]
      }
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd90      	pop	{r4, r7, pc}
 8003a7c:	0800f3d0 	.word	0x0800f3d0

08003a80 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fa27 	bl	8003ee4 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 fa35 	bl	8003f08 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fa36 	bl	8003f3e <_ZSt8_DestroyIPfEvT_S1_>
    }
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003ae4:	6839      	ldr	r1, [r7, #0]
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fa36 	bl	8003f58 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
	if (__p)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fa2e 	bl	8003f70 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	109b      	asrs	r3, r3, #2
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6839      	ldr	r1, [r7, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fa1f 	bl	8003f8e <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	f107 030c 	add.w	r3, r7, #12
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fa12 	bl	8003fa8 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	1d1a      	adds	r2, r3, #4
 8003b9a:	f107 030c 	add.w	r3, r7, #12
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fa01 	bl	8003fa8 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fa00 	bl	8003fc8 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6839      	ldr	r1, [r7, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 f97f 	bl	8003ee4 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff ffed 	bl	8003bf0 <_ZNKSt16initializer_listIfE5beginEv>
 8003c16:	4604      	mov	r4, r0
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f9e7 	bl	8003fec <_ZNKSt16initializer_listIfE4sizeEv>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4423      	add	r3, r4
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd90      	pop	{r4, r7, pc}

08003c2c <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	68b8      	ldr	r0, [r7, #8]
 8003c3e:	f000 f9e1 	bl	8004004 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8003c42:	4603      	mov	r3, r0
 8003c44:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8003c46:	68fc      	ldr	r4, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff ff2c 	bl	8003aa8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003c50:	4603      	mov	r3, r0
 8003c52:	4619      	mov	r1, r3
 8003c54:	6978      	ldr	r0, [r7, #20]
 8003c56:	f7ff feeb 	bl	8003a30 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f000 f9e4 	bl	800402c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003c64:	4602      	mov	r2, r0
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	441a      	add	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff ff12 	bl	8003aa8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003c84:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8003c86:	4622      	mov	r2, r4
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	68b8      	ldr	r0, [r7, #8]
 8003c8c:	f000 f9e2 	bl	8004054 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
 8003c90:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	605a      	str	r2, [r3, #4]
	}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd90      	pop	{r4, r7, pc}

08003c9e <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f9f5 	bl	8004096 <_ZNSaIN12ActionsQueue16RobotInstructionEED1Ev>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>:
      _Deque_base()
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 f9d8 	bl	8004076 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f9f0 	bl	80040ae <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_initialize_mapEj>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d010      	beq.n	8003d0a <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fa3d 	bl	8004174 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6819      	ldr	r1, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	461a      	mov	r2, r3
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fa4f 	bl	80041a8 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ffc6 	bl	8003c9e <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implD1Ev>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	3308      	adds	r3, #8
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f81e 	bl	8003d6e <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	3318      	adds	r3, #24
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f80f 	bl	8003d6e <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4618      	mov	r0, r3
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	605a      	str	r2, [r3, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	60da      	str	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8003da6:	b480      	push	{r7}
 8003da8:	b08d      	sub	sp, #52	; 0x34
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8003db4:	bf00      	nop
 8003db6:	3734      	adds	r7, #52	; 0x34
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8003de0:	6838      	ldr	r0, [r7, #0]
 8003de2:	f7ff ffed 	bl	8003dc0 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>
 8003de6:	4603      	mov	r3, r0
 8003de8:	4619      	mov	r1, r3
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f9f8 	bl	80041e0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f103 0218 	add.w	r2, r3, #24
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3308      	adds	r3, #8
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	f000 fa12 	bl	8004236 <_ZStmiRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f103 0218 	add.w	r2, r3, #24
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f000 fa24 	bl	800427e <_ZSteqRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>
 8003e36:	4603      	mov	r3, r0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	3b08      	subs	r3, #8
	if (this->_M_impl._M_start._M_cur
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d011      	beq.n	8003e7a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff ff7d 	bl	8003d58 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4619      	mov	r1, r3
 8003e66:	4610      	mov	r0, r2
 8003e68:	f000 fa1d 	bl	80042a6 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f103 0208 	add.w	r2, r3, #8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	609a      	str	r2, [r3, #8]
      }
 8003e78:	e002      	b.n	8003e80 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fa20 	bl	80042c0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_pop_front_auxEv>
      }
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
	return *begin();
 8003e90:	f107 0308 	add.w	r3, r7, #8
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff ff40 	bl	8003d1c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>
 8003e9c:	f107 0308 	add.w	r3, r7, #8
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fa35 	bl	8004310 <_ZNKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EdeEv>
 8003ea6:	4603      	mov	r3, r0
      }
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8003eb8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8003ebc:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fa32 	bl	8004328 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003ec8:	f107 0208 	add.w	r2, r7, #8
 8003ecc:	f107 030c 	add.w	r3, r7, #12
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fa34 	bl	8004340 <_ZSt3minIjERKT_S2_S2_>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	681b      	ldr	r3, [r3, #0]
      }
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8003eee:	6839      	ldr	r1, [r7, #0]
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff fdf2 	bl	8003ada <_ZNSaIfEC1ERKS_>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fa35 	bl	8004368 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8003f12:	6839      	ldr	r1, [r7, #0]
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f889 	bl	800402c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	441a      	add	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	609a      	str	r2, [r3, #8]
      }
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8003f48:	6839      	ldr	r1, [r7, #0]
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fa20 	bl	8004390 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	68b9      	ldr	r1, [r7, #8]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fa10 	bl	80043a6 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8003f98:	6839      	ldr	r1, [r7, #0]
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fd9d 	bl	8003ada <_ZNSaIfEC1ERKS_>
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f9f2 	bl	80043c6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8003fe2:	4603      	mov	r3, r0
    }
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8004004:	b5b0      	push	{r4, r5, r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800400e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8004010:	1d3b      	adds	r3, r7, #4
 8004012:	4618      	mov	r0, r3
 8004014:	f000 f9e7 	bl	80043e6 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8004018:	462a      	mov	r2, r5
 800401a:	6839      	ldr	r1, [r7, #0]
 800401c:	4620      	mov	r0, r4
 800401e:	f000 f9ed 	bl	80043fc <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8004022:	4603      	mov	r3, r0
    }
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bdb0      	pop	{r4, r5, r7, pc}

0800402c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d006      	beq.n	800404a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6839      	ldr	r1, [r7, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f000 f9eb 	bl	800441c <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8004046:	4603      	mov	r3, r0
 8004048:	e000      	b.n	800404c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 800404a:	2300      	movs	r3, #0
      }
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f9e7 	bl	800443a <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>
 800406c:	4603      	mov	r3, r0
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f9ed 	bl	800445e <_ZNSaIN12ActionsQueue16RobotInstructionEEC1Ev>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f9f5 	bl	8004476 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <_ZNSaIN12ActionsQueue16RobotInstructionEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fa02 	bl	80044a8 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEED1Ev>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80040ae:	b590      	push	{r4, r7, lr}
 80040b0:	b089      	sub	sp, #36	; 0x24
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80040b8:	2008      	movs	r0, #8
 80040ba:	f7fd fc36 	bl	800192a <_ZSt16__deque_buf_sizej>
 80040be:	4602      	mov	r2, r0
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80040c6:	3301      	adds	r3, #1
 80040c8:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80040ca:	2308      	movs	r3, #8
 80040cc:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3302      	adds	r3, #2
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	f107 0210 	add.w	r2, r7, #16
 80040d8:	f107 030c 	add.w	r3, r7, #12
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f9ed 	bl	80044be <_ZSt3maxIjERKT_S2_S2_>
 80040e4:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4619      	mov	r1, r3
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f9f7 	bl	80044e6 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>
 80040f8:	4602      	mov	r2, r0
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6859      	ldr	r1, [r3, #4]
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	1acb      	subs	r3, r1, r3
 800410a:	085b      	lsrs	r3, r3, #1
 800410c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800410e:	4413      	add	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4413      	add	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	69b9      	ldr	r1, [r7, #24]
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f9fd 	bl	8004520 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3308      	adds	r3, #8
 800412a:	69b9      	ldr	r1, [r7, #24]
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fa11 	bl	8004554 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f103 0218 	add.w	r2, r3, #24
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	3b04      	subs	r3, #4
 800413c:	4619      	mov	r1, r3
 800413e:	4610      	mov	r0, r2
 8004140:	f000 fa08 	bl	8004554 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004150:	2008      	movs	r0, #8
 8004152:	f7fd fbea 	bl	800192a <_ZSt16__deque_buf_sizej>
 8004156:	4602      	mov	r2, r0
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	fbb3 f1f2 	udiv	r1, r3, r2
 800415e:	fb01 f202 	mul.w	r2, r1, r2
 8004162:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	619a      	str	r2, [r3, #24]
    }
 800416c:	bf00      	nop
 800416e:	3724      	adds	r7, #36	; 0x24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd90      	pop	{r4, r7, pc}

08004174 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d209      	bcs.n	80041a0 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4619      	mov	r1, r3
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f9f7 	bl	8004586 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	3304      	adds	r3, #4
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	e7f1      	b.n	8004184 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 80041a0:	bf00      	nop
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	68f9      	ldr	r1, [r7, #12]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f9f6 	bl	80045ac <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80041c0:	f107 0314 	add.w	r3, r7, #20
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fa0c 	bl	80045e6 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80041ce:	f107 0314 	add.w	r3, r7, #20
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f9fb 	bl	80045ce <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>
      }
 80041d8:	bf00      	nop
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 80041e0:	b5b0      	push	{r4, r5, r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	3b08      	subs	r3, #8
	if (this->_M_impl._M_finish._M_cur
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d012      	beq.n	800421e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 80041f8:	687c      	ldr	r4, [r7, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699d      	ldr	r5, [r3, #24]
 80041fe:	6838      	ldr	r0, [r7, #0]
 8004200:	f000 fa00 	bl	8004604 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004204:	4603      	mov	r3, r0
 8004206:	461a      	mov	r2, r3
 8004208:	4629      	mov	r1, r5
 800420a:	4620      	mov	r0, r4
 800420c:	f000 fa05 	bl	800461a <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f103 0208 	add.w	r2, r3, #8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800421c:	e007      	b.n	800422e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 800421e:	6838      	ldr	r0, [r7, #0]
 8004220:	f000 f9f0 	bl	8004604 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004224:	4603      	mov	r3, r0
 8004226:	4619      	mov	r1, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fa09 	bl	8004640 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>
      }
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bdb0      	pop	{r4, r5, r7, pc}

08004236 <_ZStmiRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8004240:	f000 fa42 	bl	80046c8 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>
 8004244:	4603      	mov	r3, r0
 8004246:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	109b      	asrs	r3, r3, #2
 8004254:	3b01      	subs	r3, #1
 8004256:	fb01 f303 	mul.w	r3, r1, r3
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6811      	ldr	r1, [r2, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6852      	ldr	r2, [r2, #4]
 8004262:	1a8a      	subs	r2, r1, r2
 8004264:	10d2      	asrs	r2, r2, #3
 8004266:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	6891      	ldr	r1, [r2, #8]
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	1a8a      	subs	r2, r1, r2
 8004272:	10d2      	asrs	r2, r2, #3
 8004274:	4413      	add	r3, r2
      }
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <_ZSteqRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80042b0:	6839      	ldr	r1, [r7, #0]
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fa10 	bl	80046d8 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE7destroyIS2_EEvPT_>
	}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fd44 	bl	8003d58 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 80042d0:	4602      	mov	r2, r0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f7ff ffe4 	bl	80042a6 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f000 f94d 	bl	8004586 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f103 0208 	add.w	r2, r3, #8
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	3304      	adds	r3, #4
 80042f8:	4619      	mov	r1, r3
 80042fa:	4610      	mov	r0, r2
 80042fc:	f000 f92a 	bl	8004554 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	609a      	str	r2, [r3, #8]
    }
 8004308:	bf00      	nop
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <_ZNKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f9dc 	bl	80046ee <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8004336:	4603      	mov	r3, r0
      }
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d201      	bcs.n	800435a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	e000      	b.n	800435c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800435a:	687b      	ldr	r3, [r7, #4]
    }
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	609a      	str	r2, [r3, #8]
	{ }
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4619      	mov	r1, r3
 80043b8:	68b8      	ldr	r0, [r7, #8]
 80043ba:	f007 fb55 	bl	800ba68 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f995 	bl	8004706 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 80043dc:	4603      	mov	r3, r0
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80043ee:	bf00      	nop
 80043f0:	4618      	mov	r0, r3
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	109b      	asrs	r3, r3, #2
    }
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004426:	2200      	movs	r2, #0
 8004428:	6839      	ldr	r1, [r7, #0]
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f983 	bl	8004736 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8004430:	4603      	mov	r3, r0
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800443a:	b580      	push	{r7, lr}
 800443c:	b086      	sub	sp, #24
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004446:	2301      	movs	r3, #1
 8004448:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f98f 	bl	8004772 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>
 8004454:	4603      	mov	r3, r0
    }
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <_ZNSaIN12ActionsQueue16RobotInstructionEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f993 	bl	8004792 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEEC1Ev>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3308      	adds	r3, #8
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f98a 	bl	80047a8 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3318      	adds	r3, #24
 8004498:	4618      	mov	r0, r3
 800449a:	f000 f985 	bl	80047a8 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>
	{ }
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d201      	bcs.n	80044d8 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	e000      	b.n	80044da <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80044d8:	687b      	ldr	r3, [r7, #4]
    }
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80044e6:	b590      	push	{r4, r7, lr}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80044f0:	f107 030c 	add.w	r3, r7, #12
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f858 	bl	80045ac <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80044fc:	f107 030c 	add.w	r3, r7, #12
 8004500:	6839      	ldr	r1, [r7, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f000 f967 	bl	80047d6 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE8allocateERS3_j>
 8004508:	4604      	mov	r4, r0
 800450a:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800450c:	f107 030c 	add.w	r3, r7, #12
 8004510:	4618      	mov	r0, r3
 8004512:	f000 f85c 	bl	80045ce <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8004516:	4623      	mov	r3, r4
      }
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	bd90      	pop	{r4, r7, pc}

08004520 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	429a      	cmp	r2, r3
 8004536:	d209      	bcs.n	800454c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f95b 	bl	80047f4 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>
 800453e:	4602      	mov	r2, r0
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	3304      	adds	r3, #4
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	e7f1      	b.n	8004530 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 800454c:	bf00      	nop
 800454e:	3718      	adds	r7, #24
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8004554:	b590      	push	{r4, r7, lr}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685c      	ldr	r4, [r3, #4]
 8004570:	f000 f8aa 	bl	80046c8 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>
 8004574:	4603      	mov	r3, r0
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	18e2      	adds	r2, r4, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	609a      	str	r2, [r3, #8]
      }
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bd90      	pop	{r4, r7, pc}

08004586 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8004586:	b590      	push	{r4, r7, lr}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8004590:	687c      	ldr	r4, [r7, #4]
 8004592:	2008      	movs	r0, #8
 8004594:	f7fd f9c9 	bl	800192a <_ZSt16__deque_buf_sizej>
 8004598:	4603      	mov	r3, r0
 800459a:	461a      	mov	r2, r3
 800459c:	6839      	ldr	r1, [r7, #0]
 800459e:	4620      	mov	r0, r4
 80045a0:	f000 f93a 	bl	8004818 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE10deallocateERS2_PS1_j>
      }
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd90      	pop	{r4, r7, pc}

080045ac <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80045b6:	6838      	ldr	r0, [r7, #0]
 80045b8:	f000 f93d 	bl	8004836 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 80045bc:	4603      	mov	r3, r0
 80045be:	4619      	mov	r1, r3
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f943 	bl	800484c <_ZNSaIPN12ActionsQueue16RobotInstructionEEC1IS0_EERKSaIT_E>
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f945 	bl	8004866 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEED1Ev>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f940 	bl	800487c <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE10deallocateEPS3_j>
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff ffec 	bl	8004604 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f932 	bl	800489c <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8004640:	b5b0      	push	{r4, r5, r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff fbd4 	bl	8003df8 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>
 8004650:	4604      	mov	r4, r0
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f93b 	bl	80048ce <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE8max_sizeEv>
 8004658:	4603      	mov	r3, r0
 800465a:	429c      	cmp	r4, r3
 800465c:	bf0c      	ite	eq
 800465e:	2301      	moveq	r3, #1
 8004660:	2300      	movne	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8004668:	4816      	ldr	r0, [pc, #88]	; (80046c4 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x84>)
 800466a:	f007 fa13 	bl	800ba94 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 800466e:	2101      	movs	r1, #1
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f93d 	bl	80048f0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	1d1c      	adds	r4, r3, #4
 800467e:	4610      	mov	r0, r2
 8004680:	f000 f8b8 	bl	80047f4 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>
 8004684:	4603      	mov	r3, r0
 8004686:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8004688:	687c      	ldr	r4, [r7, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699d      	ldr	r5, [r3, #24]
 800468e:	6838      	ldr	r0, [r7, #0]
 8004690:	f7ff ffb8 	bl	8004604 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004694:	4603      	mov	r3, r0
 8004696:	461a      	mov	r2, r3
 8004698:	4629      	mov	r1, r5
 800469a:	4620      	mov	r0, r4
 800469c:	f7ff ffbd 	bl	800461a <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f103 0218 	add.w	r2, r3, #24
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f7ff ff50 	bl	8004554 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	619a      	str	r2, [r3, #24]
      }
 80046bc:	bf00      	nop
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bdb0      	pop	{r4, r5, r7, pc}
 80046c4:	0800f404 	.word	0x0800f404

080046c8 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80046cc:	2008      	movs	r0, #8
 80046ce:	f7fd f92c 	bl	800192a <_ZSt16__deque_buf_sizej>
 80046d2:	4603      	mov	r3, r0
 80046d4:	4618      	mov	r0, r3
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE7destroyIS2_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f915 	bl	8004926 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 80046fc:	4603      	mov	r3, r0
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8004706:	b590      	push	{r4, r7, lr}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f913 	bl	800493e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8004718:	4604      	mov	r4, r0
 800471a:	68b8      	ldr	r0, [r7, #8]
 800471c:	f000 f90f 	bl	800493e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8004720:	4603      	mov	r3, r0
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	4619      	mov	r1, r3
 8004726:	4620      	mov	r0, r4
 8004728:	f000 f914 	bl	8004954 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 800472c:	4603      	mov	r3, r0
    }
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	bd90      	pop	{r4, r7, pc}

08004736 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f8ef 	bl	8004926 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8004748:	4602      	mov	r2, r0
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4293      	cmp	r3, r2
 800474e:	bf8c      	ite	hi
 8004750:	2301      	movhi	r3, #1
 8004752:	2300      	movls	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800475a:	f007 f998 	bl	800ba8e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4618      	mov	r0, r3
 8004764:	f007 f982 	bl	800ba6c <_Znwj>
 8004768:	4603      	mov	r3, r0
      }
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f909 	bl	800499a <_ZSt4copyIPKfPfET0_T_S4_S3_>
 8004788:	4603      	mov	r3, r0
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4618      	mov	r0, r3
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	605a      	str	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	609a      	str	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	60da      	str	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80047e0:	2200      	movs	r2, #0
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f8f0 	bl	80049ca <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv>
 80047ea:	4603      	mov	r3, r0
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80047fc:	687c      	ldr	r4, [r7, #4]
 80047fe:	2008      	movs	r0, #8
 8004800:	f7fd f893 	bl	800192a <_ZSt16__deque_buf_sizej>
 8004804:	4603      	mov	r3, r0
 8004806:	4619      	mov	r1, r3
 8004808:	4620      	mov	r0, r4
 800480a:	f000 f8fc 	bl	8004a06 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8allocateERS2_j>
 800480e:	4603      	mov	r3, r0
      }
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	bd90      	pop	{r4, r7, pc}

08004818 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	68b9      	ldr	r1, [r7, #8]
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f8fb 	bl	8004a24 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE10deallocateEPS2_j>
 800482e:	bf00      	nop
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4618      	mov	r0, r3
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <_ZNSaIPN12ActionsQueue16RobotInstructionEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f8f4 	bl	8004a44 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEEC1Ev>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4619      	mov	r1, r3
 800488e:	68b8      	ldr	r0, [r7, #8]
 8004890:	f007 f8ea 	bl	800ba68 <_ZdlPvj>
      }
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800489c:	b590      	push	{r4, r7, lr}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff feab 	bl	8004604 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 80048ae:	4604      	mov	r4, r0
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4619      	mov	r1, r3
 80048b4:	2008      	movs	r0, #8
 80048b6:	f7fd f82c 	bl	8001912 <_ZnwjPv>
 80048ba:	4603      	mov	r3, r0
 80048bc:	4622      	mov	r2, r4
 80048be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd90      	pop	{r4, r7, pc}

080048ce <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff ffac 	bl	8004836 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 80048de:	4603      	mov	r3, r0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 f8ba 	bl	8004a5a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE11_S_max_sizeERKS2_>
 80048e6:	4603      	mov	r3, r0
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	6809      	ldr	r1, [r1, #0]
 800490a:	1a41      	subs	r1, r0, r1
 800490c:	1089      	asrs	r1, r1, #2
 800490e:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004910:	429a      	cmp	r2, r3
 8004912:	d904      	bls.n	800491e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8004914:	2200      	movs	r2, #0
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f8b8 	bl	8004a8e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb>
      }
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800492e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004954:	b5b0      	push	{r4, r5, r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f92e 	bl	8004bc2 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004966:	4604      	mov	r4, r0
 8004968:	68b8      	ldr	r0, [r7, #8]
 800496a:	f000 f92a 	bl	8004bc2 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800496e:	4605      	mov	r5, r0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 f933 	bl	8004bde <_ZSt12__niter_baseIPfET_S1_>
 8004978:	4603      	mov	r3, r0
 800497a:	461a      	mov	r2, r3
 800497c:	4629      	mov	r1, r5
 800497e:	4620      	mov	r0, r4
 8004980:	f000 f938 	bl	8004bf4 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 8004984:	4602      	mov	r2, r0
 8004986:	1d3b      	adds	r3, r7, #4
 8004988:	4611      	mov	r1, r2
 800498a:	4618      	mov	r0, r3
 800498c:	f000 f942 	bl	8004c14 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8004990:	4603      	mov	r3, r0
    }
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bdb0      	pop	{r4, r5, r7, pc}

0800499a <_ZSt4copyIPKfPfET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800499a:	b590      	push	{r4, r7, lr}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f940 	bl	8004c2c <_ZSt12__miter_baseIPKfET_S2_>
 80049ac:	4604      	mov	r4, r0
 80049ae:	68b8      	ldr	r0, [r7, #8]
 80049b0:	f000 f93c 	bl	8004c2c <_ZSt12__miter_baseIPKfET_S2_>
 80049b4:	4603      	mov	r3, r0
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	4619      	mov	r1, r3
 80049ba:	4620      	mov	r0, r4
 80049bc:	f000 f941 	bl	8004c42 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 80049c0:	4603      	mov	r3, r0
    }
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd90      	pop	{r4, r7, pc}

080049ca <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f956 	bl	8004c88 <_ZNK9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 80049dc:	4602      	mov	r2, r0
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4293      	cmp	r3, r2
 80049e2:	bf8c      	ite	hi
 80049e4:	2301      	movhi	r3, #1
 80049e6:	2300      	movls	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80049ee:	f007 f84e 	bl	800ba8e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f007 f838 	bl	800ba6c <_Znwj>
 80049fc:	4603      	mov	r3, r0
      }
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b082      	sub	sp, #8
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004a10:	2200      	movs	r2, #0
 8004a12:	6839      	ldr	r1, [r7, #0]
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f943 	bl	8004ca0 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4619      	mov	r1, r3
 8004a36:	68b8      	ldr	r0, [r7, #8]
 8004a38:	f007 f816 	bl	800ba68 <_ZdlPvj>
      }
 8004a3c:	bf00      	nop
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8004a62:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004a66:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f937 	bl	8004cdc <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8max_sizeERKS2_>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004a72:	f107 0208 	add.w	r2, r7, #8
 8004a76:	f107 030c 	add.w	r3, r7, #12
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff fc5f 	bl	8004340 <_ZSt3minIjERKT_S2_S2_>
 8004a82:	4603      	mov	r3, r0
 8004a84:	681b      	ldr	r3, [r3, #0]
      }
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8004a8e:	b590      	push	{r4, r7, lr}
 8004a90:	b08b      	sub	sp, #44	; 0x2c
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	109b      	asrs	r3, r3, #2
 8004aa8:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8004aaa:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	6a3a      	ldr	r2, [r7, #32]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d92d      	bls.n	8004b1c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	1acb      	subs	r3, r1, r3
 8004acc:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004ace:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	e000      	b.n	8004ade <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x50>
 8004adc:	2300      	movs	r3, #0
 8004ade:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004ae0:	4413      	add	r3, r2
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d209      	bcs.n	8004b02 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8004af6:	3304      	adds	r3, #4
 8004af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afa:	4619      	mov	r1, r3
 8004afc:	f000 f8fa 	bl	8004cf4 <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
 8004b00:	e048      	b.n	8004b94 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004b0a:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b12:	4413      	add	r3, r2
 8004b14:	461a      	mov	r2, r3
 8004b16:	f000 f905 	bl	8004d24 <_ZSt13copy_backwardIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
 8004b1a:	e03b      	b.n	8004b94 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3304      	adds	r3, #4
 8004b24:	f107 0208 	add.w	r2, r7, #8
 8004b28:	4611      	mov	r1, r2
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fcc7 	bl	80044be <_ZSt3maxIjERKT_S2_S2_>
 8004b30:	4603      	mov	r3, r0
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8004b36:	3302      	adds	r3, #2
 8004b38:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fcd1 	bl	80044e6 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>
 8004b44:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0xce>
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	e000      	b.n	8004b5e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4413      	add	r3, r2
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8004b6e:	3304      	adds	r3, #4
 8004b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b72:	4619      	mov	r1, r3
 8004b74:	f000 f8be 	bl	8004cf4 <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6819      	ldr	r1, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	461a      	mov	r2, r3
 8004b84:	f7ff fb10 	bl	80041a8 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3308      	adds	r3, #8
 8004b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff fcda 	bl	8004554 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f103 0018 	add.w	r0, r3, #24
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004bac:	3b01      	subs	r3, #1
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	4413      	add	r3, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f7ff fccd 	bl	8004554 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
    }
 8004bba:	bf00      	nop
 8004bbc:	372c      	adds	r7, #44	; 0x2c
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd90      	pop	{r4, r7, pc}

08004bc2 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8004bca:	1d3b      	adds	r3, r7, #4
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 f8c1 	bl	8004d54 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f8b0 	bl	8004d6a <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
    { return __res; }
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <_ZSt12__miter_baseIPKfET_S2_>:
    __miter_base(_Iterator __it)
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004c42:	b5b0      	push	{r4, r5, r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 f89b 	bl	8004d8a <_ZSt12__niter_baseIPKfET_S2_>
 8004c54:	4604      	mov	r4, r0
 8004c56:	68b8      	ldr	r0, [r7, #8]
 8004c58:	f000 f897 	bl	8004d8a <_ZSt12__niter_baseIPKfET_S2_>
 8004c5c:	4605      	mov	r5, r0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff ffbc 	bl	8004bde <_ZSt12__niter_baseIPfET_S1_>
 8004c66:	4603      	mov	r3, r0
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f7ff ffc1 	bl	8004bf4 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 8004c72:	4602      	mov	r2, r0
 8004c74:	1d3b      	adds	r3, r7, #4
 8004c76:	4611      	mov	r1, r2
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff ffcb 	bl	8004c14 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8004c7e:	4603      	mov	r3, r0
    }
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bdb0      	pop	{r4, r5, r7, pc}

08004c88 <_ZNK9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004c90:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f877 	bl	8004da0 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	bf8c      	ite	hi
 8004cba:	2301      	movhi	r3, #1
 8004cbc:	2300      	movls	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004cc4:	f006 fee3 	bl	800ba8e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f006 fecd 	bl	800ba6c <_Znwj>
 8004cd2:	4603      	mov	r3, r0
      }
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f867 	bl	8004db8 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8max_sizeEv>
 8004cea:	4603      	mov	r3, r0
      }
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f865 	bl	8004dd0 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004d06:	4604      	mov	r4, r0
 8004d08:	68b8      	ldr	r0, [r7, #8]
 8004d0a:	f000 f861 	bl	8004dd0 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4619      	mov	r1, r3
 8004d14:	4620      	mov	r0, r4
 8004d16:	f000 f866 	bl	8004de6 <_ZSt13__copy_move_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004d1a:	4603      	mov	r3, r0
    }
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd90      	pop	{r4, r7, pc}

08004d24 <_ZSt13copy_backwardIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8004d24:	b590      	push	{r4, r7, lr}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f84d 	bl	8004dd0 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004d36:	4604      	mov	r4, r0
 8004d38:	68b8      	ldr	r0, [r7, #8]
 8004d3a:	f000 f849 	bl	8004dd0 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4619      	mov	r1, r3
 8004d44:	4620      	mov	r0, r4
 8004d46:	f000 f871 	bl	8004e2c <_ZSt22__copy_move_backward_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004d4a:	4603      	mov	r3, r0
    }
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd90      	pop	{r4, r7, pc}

08004d54 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f879 	bl	8004e72 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004d80:	4603      	mov	r3, r0
    }
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004da8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff ffed 	bl	8004da0 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>:
    __miter_base(_Iterator __it)
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <_ZSt13__copy_move_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004de6:	b5b0      	push	{r4, r5, r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f85a 	bl	8004eac <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004df8:	4604      	mov	r4, r0
 8004dfa:	68b8      	ldr	r0, [r7, #8]
 8004dfc:	f000 f856 	bl	8004eac <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004e00:	4605      	mov	r5, r0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 f851 	bl	8004eac <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4629      	mov	r1, r5
 8004e10:	4620      	mov	r0, r4
 8004e12:	f000 f856 	bl	8004ec2 <_ZSt14__copy_move_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004e16:	4602      	mov	r2, r0
 8004e18:	1d3b      	adds	r3, r7, #4
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 f860 	bl	8004ee2 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>
 8004e22:	4603      	mov	r3, r0
    }
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bdb0      	pop	{r4, r5, r7, pc}

08004e2c <_ZSt22__copy_move_backward_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8004e2c:	b5b0      	push	{r4, r5, r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f837 	bl	8004eac <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004e3e:	4604      	mov	r4, r0
 8004e40:	68b8      	ldr	r0, [r7, #8]
 8004e42:	f000 f833 	bl	8004eac <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004e46:	4605      	mov	r5, r0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 f82e 	bl	8004eac <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004e50:	4603      	mov	r3, r0
 8004e52:	461a      	mov	r2, r3
 8004e54:	4629      	mov	r1, r5
 8004e56:	4620      	mov	r0, r4
 8004e58:	f000 f84f 	bl	8004efa <_ZSt23__copy_move_backward_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	1d3b      	adds	r3, r7, #4
 8004e60:	4611      	mov	r1, r2
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 f83d 	bl	8004ee2 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>
 8004e68:	4603      	mov	r3, r0
    }
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bdb0      	pop	{r4, r5, r7, pc}

08004e72 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b086      	sub	sp, #24
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	109b      	asrs	r3, r3, #2
 8004e86:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d006      	beq.n	8004e9c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	461a      	mov	r2, r3
 8004e94:	68f9      	ldr	r1, [r7, #12]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f007 fd74 	bl	800c984 <memmove>
	  return __result + _Num;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	4413      	add	r3, r2
	}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>:
    __niter_base(_Iterator __it)
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <_ZSt14__copy_move_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f821 	bl	8004f1a <_ZSt14__copy_move_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
    { return __res; }
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <_ZSt23__copy_move_backward_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f815 	bl	8004f3a <_ZSt23__copy_move_backward_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <_ZSt14__copy_move_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f815 	bl	8004f5a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>
 8004f30:	4603      	mov	r3, r0
    }
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <_ZSt23__copy_move_backward_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b084      	sub	sp, #16
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 f822 	bl	8004f94 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>
 8004f50:	4603      	mov	r3, r0
    }
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b086      	sub	sp, #24
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	109b      	asrs	r3, r3, #2
 8004f6e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d006      	beq.n	8004f84 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68f9      	ldr	r1, [r7, #12]
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f007 fd00 	bl	800c984 <memmove>
	  return __result + _Num;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	4413      	add	r3, r2
	}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	109b      	asrs	r3, r3, #2
 8004fa8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	425b      	negs	r3, r3
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	18d0      	adds	r0, r2, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	68f9      	ldr	r1, [r7, #12]
 8004fc2:	f007 fcdf 	bl	800c984 <memmove>
	  return __result - _Num;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	425b      	negs	r3, r3
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	4413      	add	r3, r2
	}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3718      	adds	r7, #24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <_ZN9AutoPilotD1Ev>:
class AutoPilot {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fd fdf5 	bl	8002bd2 <_ZN12ActionsQueueD1Ev>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d107      	bne.n	8005014 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800500a:	4293      	cmp	r3, r2
 800500c:	d102      	bne.n	8005014 <_Z41__static_initialization_and_destruction_0ii+0x20>
AutoPilot pilot;
 800500e:	4809      	ldr	r0, [pc, #36]	; (8005034 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005010:	f7fd fdf7 	bl	8002c02 <_ZN9AutoPilotC1Ev>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d107      	bne.n	800502a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005020:	4293      	cmp	r3, r2
 8005022:	d102      	bne.n	800502a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8005024:	4803      	ldr	r0, [pc, #12]	; (8005034 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005026:	f7ff ffd7 	bl	8004fd8 <_ZN9AutoPilotD1Ev>
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	200004fc 	.word	0x200004fc

08005038 <_GLOBAL__sub_I__Z9constrainlll>:
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
 800503c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005040:	2001      	movs	r0, #1
 8005042:	f7ff ffd7 	bl	8004ff4 <_Z41__static_initialization_and_destruction_0ii>
 8005046:	bd80      	pop	{r7, pc}

08005048 <_GLOBAL__sub_D__Z9constrainlll>:
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
 800504c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005050:	2000      	movs	r0, #0
 8005052:	f7ff ffcf 	bl	8004ff4 <_Z41__static_initialization_and_destruction_0ii>
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_MspInit>:
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	2300      	movs	r3, #0
 8005060:	607b      	str	r3, [r7, #4]
 8005062:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <HAL_MspInit+0x4c>)
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	4a0f      	ldr	r2, [pc, #60]	; (80050a4 <HAL_MspInit+0x4c>)
 8005068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800506c:	6453      	str	r3, [r2, #68]	; 0x44
 800506e:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <HAL_MspInit+0x4c>)
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005076:	607b      	str	r3, [r7, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2300      	movs	r3, #0
 800507c:	603b      	str	r3, [r7, #0]
 800507e:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <HAL_MspInit+0x4c>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	4a08      	ldr	r2, [pc, #32]	; (80050a4 <HAL_MspInit+0x4c>)
 8005084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005088:	6413      	str	r3, [r2, #64]	; 0x40
 800508a:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <HAL_MspInit+0x4c>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40023800 	.word	0x40023800

080050a8 <HAL_I2C_MspInit>:
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08a      	sub	sp, #40	; 0x28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	f107 0314 	add.w	r3, r7, #20
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	60da      	str	r2, [r3, #12]
 80050be:	611a      	str	r2, [r3, #16]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a21      	ldr	r2, [pc, #132]	; (800514c <HAL_I2C_MspInit+0xa4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d13c      	bne.n	8005144 <HAL_I2C_MspInit+0x9c>
 80050ca:	2300      	movs	r3, #0
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	4b20      	ldr	r3, [pc, #128]	; (8005150 <HAL_I2C_MspInit+0xa8>)
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	4a1f      	ldr	r2, [pc, #124]	; (8005150 <HAL_I2C_MspInit+0xa8>)
 80050d4:	f043 0302 	orr.w	r3, r3, #2
 80050d8:	6313      	str	r3, [r2, #48]	; 0x30
 80050da:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <HAL_I2C_MspInit+0xa8>)
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	613b      	str	r3, [r7, #16]
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	2312      	movs	r3, #18
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	2300      	movs	r3, #0
 80050f2:	61fb      	str	r3, [r7, #28]
 80050f4:	2303      	movs	r3, #3
 80050f6:	623b      	str	r3, [r7, #32]
 80050f8:	2304      	movs	r3, #4
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
 80050fc:	f107 0314 	add.w	r3, r7, #20
 8005100:	4619      	mov	r1, r3
 8005102:	4814      	ldr	r0, [pc, #80]	; (8005154 <HAL_I2C_MspInit+0xac>)
 8005104:	f001 f9b6 	bl	8006474 <HAL_GPIO_Init>
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	4b10      	ldr	r3, [pc, #64]	; (8005150 <HAL_I2C_MspInit+0xa8>)
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	4a0f      	ldr	r2, [pc, #60]	; (8005150 <HAL_I2C_MspInit+0xa8>)
 8005112:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005116:	6413      	str	r3, [r2, #64]	; 0x40
 8005118:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <HAL_I2C_MspInit+0xa8>)
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	2100      	movs	r1, #0
 8005128:	201f      	movs	r0, #31
 800512a:	f000 fd76 	bl	8005c1a <HAL_NVIC_SetPriority>
 800512e:	201f      	movs	r0, #31
 8005130:	f000 fd8f 	bl	8005c52 <HAL_NVIC_EnableIRQ>
 8005134:	2200      	movs	r2, #0
 8005136:	2100      	movs	r1, #0
 8005138:	2020      	movs	r0, #32
 800513a:	f000 fd6e 	bl	8005c1a <HAL_NVIC_SetPriority>
 800513e:	2020      	movs	r0, #32
 8005140:	f000 fd87 	bl	8005c52 <HAL_NVIC_EnableIRQ>
 8005144:	bf00      	nop
 8005146:	3728      	adds	r7, #40	; 0x28
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40005400 	.word	0x40005400
 8005150:	40023800 	.word	0x40023800
 8005154:	40020400 	.word	0x40020400

08005158 <HAL_TIM_Base_MspInit>:
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <HAL_TIM_Base_MspInit+0x78>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d12d      	bne.n	80051c6 <HAL_TIM_Base_MspInit+0x6e>
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	4b19      	ldr	r3, [pc, #100]	; (80051d4 <HAL_TIM_Base_MspInit+0x7c>)
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <HAL_TIM_Base_MspInit+0x7c>)
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	6453      	str	r3, [r2, #68]	; 0x44
 800517a:	4b16      	ldr	r3, [pc, #88]	; (80051d4 <HAL_TIM_Base_MspInit+0x7c>)
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	2100      	movs	r1, #0
 800518a:	2018      	movs	r0, #24
 800518c:	f000 fd45 	bl	8005c1a <HAL_NVIC_SetPriority>
 8005190:	2018      	movs	r0, #24
 8005192:	f000 fd5e 	bl	8005c52 <HAL_NVIC_EnableIRQ>
 8005196:	2200      	movs	r2, #0
 8005198:	2100      	movs	r1, #0
 800519a:	2019      	movs	r0, #25
 800519c:	f000 fd3d 	bl	8005c1a <HAL_NVIC_SetPriority>
 80051a0:	2019      	movs	r0, #25
 80051a2:	f000 fd56 	bl	8005c52 <HAL_NVIC_EnableIRQ>
 80051a6:	2200      	movs	r2, #0
 80051a8:	2100      	movs	r1, #0
 80051aa:	201a      	movs	r0, #26
 80051ac:	f000 fd35 	bl	8005c1a <HAL_NVIC_SetPriority>
 80051b0:	201a      	movs	r0, #26
 80051b2:	f000 fd4e 	bl	8005c52 <HAL_NVIC_EnableIRQ>
 80051b6:	2200      	movs	r2, #0
 80051b8:	2100      	movs	r1, #0
 80051ba:	201b      	movs	r0, #27
 80051bc:	f000 fd2d 	bl	8005c1a <HAL_NVIC_SetPriority>
 80051c0:	201b      	movs	r0, #27
 80051c2:	f000 fd46 	bl	8005c52 <HAL_NVIC_EnableIRQ>
 80051c6:	bf00      	nop
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40023800 	.word	0x40023800

080051d8 <HAL_TIM_Encoder_MspInit>:
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08c      	sub	sp, #48	; 0x30
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	f107 031c 	add.w	r3, r7, #28
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	60da      	str	r2, [r3, #12]
 80051ee:	611a      	str	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f8:	d14b      	bne.n	8005292 <HAL_TIM_Encoder_MspInit+0xba>
 80051fa:	2300      	movs	r3, #0
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	4b3f      	ldr	r3, [pc, #252]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	4a3e      	ldr	r2, [pc, #248]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 8005204:	f043 0301 	orr.w	r3, r3, #1
 8005208:	6413      	str	r3, [r2, #64]	; 0x40
 800520a:	4b3c      	ldr	r3, [pc, #240]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	4b38      	ldr	r3, [pc, #224]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	4a37      	ldr	r2, [pc, #220]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	6313      	str	r3, [r2, #48]	; 0x30
 8005226:	4b35      	ldr	r3, [pc, #212]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2300      	movs	r3, #0
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	4b31      	ldr	r3, [pc, #196]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	4a30      	ldr	r2, [pc, #192]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 800523c:	f043 0302 	orr.w	r3, r3, #2
 8005240:	6313      	str	r3, [r2, #48]	; 0x30
 8005242:	4b2e      	ldr	r3, [pc, #184]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005252:	61fb      	str	r3, [r7, #28]
 8005254:	2302      	movs	r3, #2
 8005256:	623b      	str	r3, [r7, #32]
 8005258:	2300      	movs	r3, #0
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
 800525c:	2300      	movs	r3, #0
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005260:	2301      	movs	r3, #1
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005264:	f107 031c 	add.w	r3, r7, #28
 8005268:	4619      	mov	r1, r3
 800526a:	4825      	ldr	r0, [pc, #148]	; (8005300 <HAL_TIM_Encoder_MspInit+0x128>)
 800526c:	f001 f902 	bl	8006474 <HAL_GPIO_Init>
 8005270:	2308      	movs	r3, #8
 8005272:	61fb      	str	r3, [r7, #28]
 8005274:	2302      	movs	r3, #2
 8005276:	623b      	str	r3, [r7, #32]
 8005278:	2300      	movs	r3, #0
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
 800527c:	2300      	movs	r3, #0
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005280:	2301      	movs	r3, #1
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005284:	f107 031c 	add.w	r3, r7, #28
 8005288:	4619      	mov	r1, r3
 800528a:	481e      	ldr	r0, [pc, #120]	; (8005304 <HAL_TIM_Encoder_MspInit+0x12c>)
 800528c:	f001 f8f2 	bl	8006474 <HAL_GPIO_Init>
 8005290:	e030      	b.n	80052f4 <HAL_TIM_Encoder_MspInit+0x11c>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <HAL_TIM_Encoder_MspInit+0x130>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d12b      	bne.n	80052f4 <HAL_TIM_Encoder_MspInit+0x11c>
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	4b16      	ldr	r3, [pc, #88]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	4a15      	ldr	r2, [pc, #84]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 80052a6:	f043 0304 	orr.w	r3, r3, #4
 80052aa:	6413      	str	r3, [r2, #64]	; 0x40
 80052ac:	4b13      	ldr	r3, [pc, #76]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2300      	movs	r3, #0
 80052ba:	60bb      	str	r3, [r7, #8]
 80052bc:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	4a0e      	ldr	r2, [pc, #56]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 80052c2:	f043 0302 	orr.w	r3, r3, #2
 80052c6:	6313      	str	r3, [r2, #48]	; 0x30
 80052c8:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <HAL_TIM_Encoder_MspInit+0x124>)
 80052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	60bb      	str	r3, [r7, #8]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	23c0      	movs	r3, #192	; 0xc0
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	2302      	movs	r3, #2
 80052da:	623b      	str	r3, [r7, #32]
 80052dc:	2300      	movs	r3, #0
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
 80052e0:	2300      	movs	r3, #0
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e4:	2302      	movs	r3, #2
 80052e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052e8:	f107 031c 	add.w	r3, r7, #28
 80052ec:	4619      	mov	r1, r3
 80052ee:	4805      	ldr	r0, [pc, #20]	; (8005304 <HAL_TIM_Encoder_MspInit+0x12c>)
 80052f0:	f001 f8c0 	bl	8006474 <HAL_GPIO_Init>
 80052f4:	bf00      	nop
 80052f6:	3730      	adds	r7, #48	; 0x30
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40023800 	.word	0x40023800
 8005300:	40020000 	.word	0x40020000
 8005304:	40020400 	.word	0x40020400
 8005308:	40000800 	.word	0x40000800

0800530c <HAL_TIM_PWM_MspInit>:
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a0e      	ldr	r2, [pc, #56]	; (8005354 <HAL_TIM_PWM_MspInit+0x48>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d115      	bne.n	800534a <HAL_TIM_PWM_MspInit+0x3e>
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <HAL_TIM_PWM_MspInit+0x4c>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	4a0c      	ldr	r2, [pc, #48]	; (8005358 <HAL_TIM_PWM_MspInit+0x4c>)
 8005328:	f043 0302 	orr.w	r3, r3, #2
 800532c:	6413      	str	r3, [r2, #64]	; 0x40
 800532e:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <HAL_TIM_PWM_MspInit+0x4c>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	2100      	movs	r1, #0
 800533e:	201d      	movs	r0, #29
 8005340:	f000 fc6b 	bl	8005c1a <HAL_NVIC_SetPriority>
 8005344:	201d      	movs	r0, #29
 8005346:	f000 fc84 	bl	8005c52 <HAL_NVIC_EnableIRQ>
 800534a:	bf00      	nop
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40000400 	.word	0x40000400
 8005358:	40023800 	.word	0x40023800

0800535c <HAL_TIM_MspPostInit>:
 800535c:	b580      	push	{r7, lr}
 800535e:	b08a      	sub	sp, #40	; 0x28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	f107 0314 	add.w	r3, r7, #20
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	609a      	str	r2, [r3, #8]
 8005370:	60da      	str	r2, [r3, #12]
 8005372:	611a      	str	r2, [r3, #16]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a21      	ldr	r2, [pc, #132]	; (8005400 <HAL_TIM_MspPostInit+0xa4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d13b      	bne.n	80053f6 <HAL_TIM_MspPostInit+0x9a>
 800537e:	2300      	movs	r3, #0
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	4b20      	ldr	r3, [pc, #128]	; (8005404 <HAL_TIM_MspPostInit+0xa8>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	4a1f      	ldr	r2, [pc, #124]	; (8005404 <HAL_TIM_MspPostInit+0xa8>)
 8005388:	f043 0301 	orr.w	r3, r3, #1
 800538c:	6313      	str	r3, [r2, #48]	; 0x30
 800538e:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <HAL_TIM_MspPostInit+0xa8>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	4b19      	ldr	r3, [pc, #100]	; (8005404 <HAL_TIM_MspPostInit+0xa8>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	4a18      	ldr	r2, [pc, #96]	; (8005404 <HAL_TIM_MspPostInit+0xa8>)
 80053a4:	f043 0302 	orr.w	r3, r3, #2
 80053a8:	6313      	str	r3, [r2, #48]	; 0x30
 80053aa:	4b16      	ldr	r3, [pc, #88]	; (8005404 <HAL_TIM_MspPostInit+0xa8>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	23c0      	movs	r3, #192	; 0xc0
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	2302      	movs	r3, #2
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	2300      	movs	r3, #0
 80053c4:	623b      	str	r3, [r7, #32]
 80053c6:	2302      	movs	r3, #2
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ca:	f107 0314 	add.w	r3, r7, #20
 80053ce:	4619      	mov	r1, r3
 80053d0:	480d      	ldr	r0, [pc, #52]	; (8005408 <HAL_TIM_MspPostInit+0xac>)
 80053d2:	f001 f84f 	bl	8006474 <HAL_GPIO_Init>
 80053d6:	2303      	movs	r3, #3
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	2302      	movs	r3, #2
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
 80053e2:	2300      	movs	r3, #0
 80053e4:	623b      	str	r3, [r7, #32]
 80053e6:	2302      	movs	r3, #2
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ea:	f107 0314 	add.w	r3, r7, #20
 80053ee:	4619      	mov	r1, r3
 80053f0:	4806      	ldr	r0, [pc, #24]	; (800540c <HAL_TIM_MspPostInit+0xb0>)
 80053f2:	f001 f83f 	bl	8006474 <HAL_GPIO_Init>
 80053f6:	bf00      	nop
 80053f8:	3728      	adds	r7, #40	; 0x28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40000400 	.word	0x40000400
 8005404:	40023800 	.word	0x40023800
 8005408:	40020000 	.word	0x40020000
 800540c:	40020400 	.word	0x40020400

08005410 <HAL_UART_MspInit>:
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	; 0x28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	f107 0314 	add.w	r3, r7, #20
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	609a      	str	r2, [r3, #8]
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	611a      	str	r2, [r3, #16]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a4c      	ldr	r2, [pc, #304]	; (8005560 <HAL_UART_MspInit+0x150>)
 800542e:	4293      	cmp	r3, r2
 8005430:	f040 8092 	bne.w	8005558 <HAL_UART_MspInit+0x148>
 8005434:	2300      	movs	r3, #0
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	4b4a      	ldr	r3, [pc, #296]	; (8005564 <HAL_UART_MspInit+0x154>)
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	4a49      	ldr	r2, [pc, #292]	; (8005564 <HAL_UART_MspInit+0x154>)
 800543e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005442:	6413      	str	r3, [r2, #64]	; 0x40
 8005444:	4b47      	ldr	r3, [pc, #284]	; (8005564 <HAL_UART_MspInit+0x154>)
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	4b43      	ldr	r3, [pc, #268]	; (8005564 <HAL_UART_MspInit+0x154>)
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	4a42      	ldr	r2, [pc, #264]	; (8005564 <HAL_UART_MspInit+0x154>)
 800545a:	f043 0301 	orr.w	r3, r3, #1
 800545e:	6313      	str	r3, [r2, #48]	; 0x30
 8005460:	4b40      	ldr	r3, [pc, #256]	; (8005564 <HAL_UART_MspInit+0x154>)
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	230c      	movs	r3, #12
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	2302      	movs	r3, #2
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	2300      	movs	r3, #0
 8005476:	61fb      	str	r3, [r7, #28]
 8005478:	2303      	movs	r3, #3
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	2307      	movs	r3, #7
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
 8005480:	f107 0314 	add.w	r3, r7, #20
 8005484:	4619      	mov	r1, r3
 8005486:	4838      	ldr	r0, [pc, #224]	; (8005568 <HAL_UART_MspInit+0x158>)
 8005488:	f000 fff4 	bl	8006474 <HAL_GPIO_Init>
 800548c:	4b37      	ldr	r3, [pc, #220]	; (800556c <HAL_UART_MspInit+0x15c>)
 800548e:	4a38      	ldr	r2, [pc, #224]	; (8005570 <HAL_UART_MspInit+0x160>)
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	4b36      	ldr	r3, [pc, #216]	; (800556c <HAL_UART_MspInit+0x15c>)
 8005494:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005498:	605a      	str	r2, [r3, #4]
 800549a:	4b34      	ldr	r3, [pc, #208]	; (800556c <HAL_UART_MspInit+0x15c>)
 800549c:	2200      	movs	r2, #0
 800549e:	609a      	str	r2, [r3, #8]
 80054a0:	4b32      	ldr	r3, [pc, #200]	; (800556c <HAL_UART_MspInit+0x15c>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	60da      	str	r2, [r3, #12]
 80054a6:	4b31      	ldr	r3, [pc, #196]	; (800556c <HAL_UART_MspInit+0x15c>)
 80054a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054ac:	611a      	str	r2, [r3, #16]
 80054ae:	4b2f      	ldr	r3, [pc, #188]	; (800556c <HAL_UART_MspInit+0x15c>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	615a      	str	r2, [r3, #20]
 80054b4:	4b2d      	ldr	r3, [pc, #180]	; (800556c <HAL_UART_MspInit+0x15c>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	619a      	str	r2, [r3, #24]
 80054ba:	4b2c      	ldr	r3, [pc, #176]	; (800556c <HAL_UART_MspInit+0x15c>)
 80054bc:	2200      	movs	r2, #0
 80054be:	61da      	str	r2, [r3, #28]
 80054c0:	4b2a      	ldr	r3, [pc, #168]	; (800556c <HAL_UART_MspInit+0x15c>)
 80054c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054c6:	621a      	str	r2, [r3, #32]
 80054c8:	4b28      	ldr	r3, [pc, #160]	; (800556c <HAL_UART_MspInit+0x15c>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	625a      	str	r2, [r3, #36]	; 0x24
 80054ce:	4827      	ldr	r0, [pc, #156]	; (800556c <HAL_UART_MspInit+0x15c>)
 80054d0:	f000 fbe8 	bl	8005ca4 <HAL_DMA_Init>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_UART_MspInit+0xce>
 80054da:	f7fe f927 	bl	800372c <Error_Handler>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a22      	ldr	r2, [pc, #136]	; (800556c <HAL_UART_MspInit+0x15c>)
 80054e2:	639a      	str	r2, [r3, #56]	; 0x38
 80054e4:	4a21      	ldr	r2, [pc, #132]	; (800556c <HAL_UART_MspInit+0x15c>)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6393      	str	r3, [r2, #56]	; 0x38
 80054ea:	4b22      	ldr	r3, [pc, #136]	; (8005574 <HAL_UART_MspInit+0x164>)
 80054ec:	4a22      	ldr	r2, [pc, #136]	; (8005578 <HAL_UART_MspInit+0x168>)
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	4b20      	ldr	r3, [pc, #128]	; (8005574 <HAL_UART_MspInit+0x164>)
 80054f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054f6:	605a      	str	r2, [r3, #4]
 80054f8:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <HAL_UART_MspInit+0x164>)
 80054fa:	2240      	movs	r2, #64	; 0x40
 80054fc:	609a      	str	r2, [r3, #8]
 80054fe:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <HAL_UART_MspInit+0x164>)
 8005500:	2200      	movs	r2, #0
 8005502:	60da      	str	r2, [r3, #12]
 8005504:	4b1b      	ldr	r3, [pc, #108]	; (8005574 <HAL_UART_MspInit+0x164>)
 8005506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800550a:	611a      	str	r2, [r3, #16]
 800550c:	4b19      	ldr	r3, [pc, #100]	; (8005574 <HAL_UART_MspInit+0x164>)
 800550e:	2200      	movs	r2, #0
 8005510:	615a      	str	r2, [r3, #20]
 8005512:	4b18      	ldr	r3, [pc, #96]	; (8005574 <HAL_UART_MspInit+0x164>)
 8005514:	2200      	movs	r2, #0
 8005516:	619a      	str	r2, [r3, #24]
 8005518:	4b16      	ldr	r3, [pc, #88]	; (8005574 <HAL_UART_MspInit+0x164>)
 800551a:	2200      	movs	r2, #0
 800551c:	61da      	str	r2, [r3, #28]
 800551e:	4b15      	ldr	r3, [pc, #84]	; (8005574 <HAL_UART_MspInit+0x164>)
 8005520:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005524:	621a      	str	r2, [r3, #32]
 8005526:	4b13      	ldr	r3, [pc, #76]	; (8005574 <HAL_UART_MspInit+0x164>)
 8005528:	2200      	movs	r2, #0
 800552a:	625a      	str	r2, [r3, #36]	; 0x24
 800552c:	4811      	ldr	r0, [pc, #68]	; (8005574 <HAL_UART_MspInit+0x164>)
 800552e:	f000 fbb9 	bl	8005ca4 <HAL_DMA_Init>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_UART_MspInit+0x12c>
 8005538:	f7fe f8f8 	bl	800372c <Error_Handler>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a0d      	ldr	r2, [pc, #52]	; (8005574 <HAL_UART_MspInit+0x164>)
 8005540:	635a      	str	r2, [r3, #52]	; 0x34
 8005542:	4a0c      	ldr	r2, [pc, #48]	; (8005574 <HAL_UART_MspInit+0x164>)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6393      	str	r3, [r2, #56]	; 0x38
 8005548:	2200      	movs	r2, #0
 800554a:	2100      	movs	r1, #0
 800554c:	2026      	movs	r0, #38	; 0x26
 800554e:	f000 fb64 	bl	8005c1a <HAL_NVIC_SetPriority>
 8005552:	2026      	movs	r0, #38	; 0x26
 8005554:	f000 fb7d 	bl	8005c52 <HAL_NVIC_EnableIRQ>
 8005558:	bf00      	nop
 800555a:	3728      	adds	r7, #40	; 0x28
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40004400 	.word	0x40004400
 8005564:	40023800 	.word	0x40023800
 8005568:	40020000 	.word	0x40020000
 800556c:	2000043c 	.word	0x2000043c
 8005570:	40026088 	.word	0x40026088
 8005574:	2000049c 	.word	0x2000049c
 8005578:	400260a0 	.word	0x400260a0

0800557c <HAL_UART_MspDeInit>:
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a0e      	ldr	r2, [pc, #56]	; (80055c4 <HAL_UART_MspDeInit+0x48>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d116      	bne.n	80055bc <HAL_UART_MspDeInit+0x40>
 800558e:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <HAL_UART_MspDeInit+0x4c>)
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	4a0d      	ldr	r2, [pc, #52]	; (80055c8 <HAL_UART_MspDeInit+0x4c>)
 8005594:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005598:	6413      	str	r3, [r2, #64]	; 0x40
 800559a:	210c      	movs	r1, #12
 800559c:	480b      	ldr	r0, [pc, #44]	; (80055cc <HAL_UART_MspDeInit+0x50>)
 800559e:	f001 f8ed 	bl	800677c <HAL_GPIO_DeInit>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fc2a 	bl	8005e00 <HAL_DMA_DeInit>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 fc25 	bl	8005e00 <HAL_DMA_DeInit>
 80055b6:	2026      	movs	r0, #38	; 0x26
 80055b8:	f000 fb59 	bl	8005c6e <HAL_NVIC_DisableIRQ>
 80055bc:	bf00      	nop
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40004400 	.word	0x40004400
 80055c8:	40023800 	.word	0x40023800
 80055cc:	40020000 	.word	0x40020000

080055d0 <NMI_Handler>:
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	e7fe      	b.n	80055d4 <NMI_Handler+0x4>

080055d6 <HardFault_Handler>:
 80055d6:	b480      	push	{r7}
 80055d8:	af00      	add	r7, sp, #0
 80055da:	e7fe      	b.n	80055da <HardFault_Handler+0x4>

080055dc <MemManage_Handler>:
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
 80055e0:	e7fe      	b.n	80055e0 <MemManage_Handler+0x4>

080055e2 <BusFault_Handler>:
 80055e2:	b480      	push	{r7}
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	e7fe      	b.n	80055e6 <BusFault_Handler+0x4>

080055e8 <UsageFault_Handler>:
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	e7fe      	b.n	80055ec <UsageFault_Handler+0x4>

080055ee <SVC_Handler>:
 80055ee:	b480      	push	{r7}
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	bf00      	nop
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <DebugMon_Handler>:
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
 8005600:	bf00      	nop
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <PendSV_Handler>:
 800560a:	b480      	push	{r7}
 800560c:	af00      	add	r7, sp, #0
 800560e:	bf00      	nop
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <SysTick_Handler>:
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
 800561c:	f000 f9ba 	bl	8005994 <HAL_IncTick>
 8005620:	bf00      	nop
 8005622:	bd80      	pop	{r7, pc}

08005624 <DMA1_Stream5_IRQHandler>:
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
 8005628:	4802      	ldr	r0, [pc, #8]	; (8005634 <DMA1_Stream5_IRQHandler+0x10>)
 800562a:	f000 fcd9 	bl	8005fe0 <HAL_DMA_IRQHandler>
 800562e:	bf00      	nop
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	2000043c 	.word	0x2000043c

08005638 <DMA1_Stream6_IRQHandler>:
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
 800563c:	4802      	ldr	r0, [pc, #8]	; (8005648 <DMA1_Stream6_IRQHandler+0x10>)
 800563e:	f000 fccf 	bl	8005fe0 <HAL_DMA_IRQHandler>
 8005642:	bf00      	nop
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	2000049c 	.word	0x2000049c

0800564c <TIM1_BRK_TIM9_IRQHandler>:
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
 8005650:	4802      	ldr	r0, [pc, #8]	; (800565c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8005652:	f004 fac3 	bl	8009bdc <HAL_TIM_IRQHandler>
 8005656:	bf00      	nop
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	200002d8 	.word	0x200002d8

08005660 <TIM1_UP_TIM10_IRQHandler>:
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
 8005664:	4802      	ldr	r0, [pc, #8]	; (8005670 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005666:	f004 fab9 	bl	8009bdc <HAL_TIM_IRQHandler>
 800566a:	bf00      	nop
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	200002d8 	.word	0x200002d8

08005674 <TIM1_TRG_COM_TIM11_IRQHandler>:
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
 8005678:	4802      	ldr	r0, [pc, #8]	; (8005684 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800567a:	f004 faaf 	bl	8009bdc <HAL_TIM_IRQHandler>
 800567e:	bf00      	nop
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	200002d8 	.word	0x200002d8

08005688 <TIM1_CC_IRQHandler>:
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
 800568c:	4802      	ldr	r0, [pc, #8]	; (8005698 <TIM1_CC_IRQHandler+0x10>)
 800568e:	f004 faa5 	bl	8009bdc <HAL_TIM_IRQHandler>
 8005692:	bf00      	nop
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	200002d8 	.word	0x200002d8

0800569c <TIM3_IRQHandler>:
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
 80056a0:	4802      	ldr	r0, [pc, #8]	; (80056ac <TIM3_IRQHandler+0x10>)
 80056a2:	f004 fa9b 	bl	8009bdc <HAL_TIM_IRQHandler>
 80056a6:	bf00      	nop
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000368 	.word	0x20000368

080056b0 <I2C1_EV_IRQHandler>:
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	4802      	ldr	r0, [pc, #8]	; (80056c0 <I2C1_EV_IRQHandler+0x10>)
 80056b6:	f001 fc5b 	bl	8006f70 <HAL_I2C_EV_IRQHandler>
 80056ba:	bf00      	nop
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000284 	.word	0x20000284

080056c4 <I2C1_ER_IRQHandler>:
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	4802      	ldr	r0, [pc, #8]	; (80056d4 <I2C1_ER_IRQHandler+0x10>)
 80056ca:	f001 fdc2 	bl	8007252 <HAL_I2C_ER_IRQHandler>
 80056ce:	bf00      	nop
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000284 	.word	0x20000284

080056d8 <USART2_IRQHandler>:
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
 80056dc:	4802      	ldr	r0, [pc, #8]	; (80056e8 <USART2_IRQHandler+0x10>)
 80056de:	f005 fa65 	bl	800abac <HAL_UART_IRQHandler>
 80056e2:	bf00      	nop
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	200003f8 	.word	0x200003f8

080056ec <_getpid>:
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	2301      	movs	r3, #1
 80056f2:	4618      	mov	r0, r3
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <_kill>:
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
 8005706:	f007 f8f5 	bl	800c8f4 <__errno>
 800570a:	4603      	mov	r3, r0
 800570c:	2216      	movs	r2, #22
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	f04f 33ff 	mov.w	r3, #4294967295
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <_exit>:
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	f04f 31ff 	mov.w	r1, #4294967295
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ffe7 	bl	80056fc <_kill>
 800572e:	e7fe      	b.n	800572e <_exit+0x12>

08005730 <_read>:
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e00a      	b.n	8005758 <_read+0x28>
 8005742:	f3af 8000 	nop.w
 8005746:	4601      	mov	r1, r0
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	60ba      	str	r2, [r7, #8]
 800574e:	b2ca      	uxtb	r2, r1
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	3301      	adds	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	429a      	cmp	r2, r3
 800575e:	dbf0      	blt.n	8005742 <_read+0x12>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <_write>:
 800576a:	b580      	push	{r7, lr}
 800576c:	b086      	sub	sp, #24
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e009      	b.n	8005790 <_write+0x26>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	60ba      	str	r2, [r7, #8]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	4618      	mov	r0, r3
 8005786:	f3af 8000 	nop.w
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	3301      	adds	r3, #1
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	dbf1      	blt.n	800577c <_write+0x12>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <_close>:
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	f04f 33ff 	mov.w	r3, #4294967295
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <_fstat>:
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057ca:	605a      	str	r2, [r3, #4]
 80057cc:	2300      	movs	r3, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <_isatty>:
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	2301      	movs	r3, #1
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <_lseek>:
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	2300      	movs	r3, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <_sbrk>:
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	4a14      	ldr	r2, [pc, #80]	; (8005868 <_sbrk+0x5c>)
 8005816:	4b15      	ldr	r3, [pc, #84]	; (800586c <_sbrk+0x60>)
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	613b      	str	r3, [r7, #16]
 8005820:	4b13      	ldr	r3, [pc, #76]	; (8005870 <_sbrk+0x64>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d102      	bne.n	800582e <_sbrk+0x22>
 8005828:	4b11      	ldr	r3, [pc, #68]	; (8005870 <_sbrk+0x64>)
 800582a:	4a12      	ldr	r2, [pc, #72]	; (8005874 <_sbrk+0x68>)
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	4b10      	ldr	r3, [pc, #64]	; (8005870 <_sbrk+0x64>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4413      	add	r3, r2
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	429a      	cmp	r2, r3
 800583a:	d207      	bcs.n	800584c <_sbrk+0x40>
 800583c:	f007 f85a 	bl	800c8f4 <__errno>
 8005840:	4603      	mov	r3, r0
 8005842:	220c      	movs	r2, #12
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	f04f 33ff 	mov.w	r3, #4294967295
 800584a:	e009      	b.n	8005860 <_sbrk+0x54>
 800584c:	4b08      	ldr	r3, [pc, #32]	; (8005870 <_sbrk+0x64>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	4b07      	ldr	r3, [pc, #28]	; (8005870 <_sbrk+0x64>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4413      	add	r3, r2
 800585a:	4a05      	ldr	r2, [pc, #20]	; (8005870 <_sbrk+0x64>)
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20020000 	.word	0x20020000
 800586c:	00000400 	.word	0x00000400
 8005870:	20001160 	.word	0x20001160
 8005874:	20001180 	.word	0x20001180

08005878 <SystemInit>:
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <SystemInit+0x20>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	4a05      	ldr	r2, [pc, #20]	; (8005898 <SystemInit+0x20>)
 8005884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	e000ed00 	.word	0xe000ed00

0800589c <Reset_Handler>:
 800589c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058d4 <LoopFillZerobss+0x12>
 80058a0:	480d      	ldr	r0, [pc, #52]	; (80058d8 <LoopFillZerobss+0x16>)
 80058a2:	490e      	ldr	r1, [pc, #56]	; (80058dc <LoopFillZerobss+0x1a>)
 80058a4:	4a0e      	ldr	r2, [pc, #56]	; (80058e0 <LoopFillZerobss+0x1e>)
 80058a6:	2300      	movs	r3, #0
 80058a8:	e002      	b.n	80058b0 <LoopCopyDataInit>

080058aa <CopyDataInit>:
 80058aa:	58d4      	ldr	r4, [r2, r3]
 80058ac:	50c4      	str	r4, [r0, r3]
 80058ae:	3304      	adds	r3, #4

080058b0 <LoopCopyDataInit>:
 80058b0:	18c4      	adds	r4, r0, r3
 80058b2:	428c      	cmp	r4, r1
 80058b4:	d3f9      	bcc.n	80058aa <CopyDataInit>
 80058b6:	4a0b      	ldr	r2, [pc, #44]	; (80058e4 <LoopFillZerobss+0x22>)
 80058b8:	4c0b      	ldr	r4, [pc, #44]	; (80058e8 <LoopFillZerobss+0x26>)
 80058ba:	2300      	movs	r3, #0
 80058bc:	e001      	b.n	80058c2 <LoopFillZerobss>

080058be <FillZerobss>:
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	3204      	adds	r2, #4

080058c2 <LoopFillZerobss>:
 80058c2:	42a2      	cmp	r2, r4
 80058c4:	d3fb      	bcc.n	80058be <FillZerobss>
 80058c6:	f7ff ffd7 	bl	8005878 <SystemInit>
 80058ca:	f007 f819 	bl	800c900 <__libc_init_array>
 80058ce:	f7fd fbc1 	bl	8003054 <main>
 80058d2:	4770      	bx	lr
 80058d4:	20020000 	.word	0x20020000
 80058d8:	20000000 	.word	0x20000000
 80058dc:	200001dc 	.word	0x200001dc
 80058e0:	0800f87c 	.word	0x0800f87c
 80058e4:	200001dc 	.word	0x200001dc
 80058e8:	2000117c 	.word	0x2000117c

080058ec <ADC_IRQHandler>:
 80058ec:	e7fe      	b.n	80058ec <ADC_IRQHandler>
	...

080058f0 <HAL_Init>:
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	4b0e      	ldr	r3, [pc, #56]	; (8005930 <HAL_Init+0x40>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a0d      	ldr	r2, [pc, #52]	; (8005930 <HAL_Init+0x40>)
 80058fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <HAL_Init+0x40>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <HAL_Init+0x40>)
 8005906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	4b08      	ldr	r3, [pc, #32]	; (8005930 <HAL_Init+0x40>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a07      	ldr	r2, [pc, #28]	; (8005930 <HAL_Init+0x40>)
 8005912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	2003      	movs	r0, #3
 800591a:	f000 f973 	bl	8005c04 <HAL_NVIC_SetPriorityGrouping>
 800591e:	200f      	movs	r0, #15
 8005920:	f000 f808 	bl	8005934 <HAL_InitTick>
 8005924:	f7ff fb98 	bl	8005058 <HAL_MspInit>
 8005928:	2300      	movs	r3, #0
 800592a:	4618      	mov	r0, r3
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40023c00 	.word	0x40023c00

08005934 <HAL_InitTick>:
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	4b12      	ldr	r3, [pc, #72]	; (8005988 <HAL_InitTick+0x54>)
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	4b12      	ldr	r3, [pc, #72]	; (800598c <HAL_InitTick+0x58>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	4619      	mov	r1, r3
 8005946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800594a:	fbb3 f3f1 	udiv	r3, r3, r1
 800594e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005952:	4618      	mov	r0, r3
 8005954:	f000 f999 	bl	8005c8a <HAL_SYSTICK_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_InitTick+0x2e>
 800595e:	2301      	movs	r3, #1
 8005960:	e00e      	b.n	8005980 <HAL_InitTick+0x4c>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b0f      	cmp	r3, #15
 8005966:	d80a      	bhi.n	800597e <HAL_InitTick+0x4a>
 8005968:	2200      	movs	r2, #0
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	f04f 30ff 	mov.w	r0, #4294967295
 8005970:	f000 f953 	bl	8005c1a <HAL_NVIC_SetPriority>
 8005974:	4a06      	ldr	r2, [pc, #24]	; (8005990 <HAL_InitTick+0x5c>)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	2300      	movs	r3, #0
 800597c:	e000      	b.n	8005980 <HAL_InitTick+0x4c>
 800597e:	2301      	movs	r3, #1
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20000000 	.word	0x20000000
 800598c:	20000008 	.word	0x20000008
 8005990:	20000004 	.word	0x20000004

08005994 <HAL_IncTick>:
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
 8005998:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <HAL_IncTick+0x20>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <HAL_IncTick+0x24>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4413      	add	r3, r2
 80059a4:	4a04      	ldr	r2, [pc, #16]	; (80059b8 <HAL_IncTick+0x24>)
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	bf00      	nop
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	20000008 	.word	0x20000008
 80059b8:	20001164 	.word	0x20001164

080059bc <HAL_GetTick>:
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
 80059c0:	4b03      	ldr	r3, [pc, #12]	; (80059d0 <HAL_GetTick+0x14>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	20001164 	.word	0x20001164

080059d4 <HAL_Delay>:
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	f7ff ffee 	bl	80059bc <HAL_GetTick>
 80059e0:	60b8      	str	r0, [r7, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d005      	beq.n	80059fa <HAL_Delay+0x26>
 80059ee:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <HAL_Delay+0x44>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	bf00      	nop
 80059fc:	f7ff ffde 	bl	80059bc <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d8f7      	bhi.n	80059fc <HAL_Delay+0x28>
 8005a0c:	bf00      	nop
 8005a0e:	bf00      	nop
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000008 	.word	0x20000008

08005a1c <__NVIC_SetPriorityGrouping>:
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <__NVIC_SetPriorityGrouping+0x44>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a38:	4013      	ands	r3, r2
 8005a3a:	60bb      	str	r3, [r7, #8]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	021a      	lsls	r2, r3, #8
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	4a04      	ldr	r2, [pc, #16]	; (8005a60 <__NVIC_SetPriorityGrouping+0x44>)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	60d3      	str	r3, [r2, #12]
 8005a54:	bf00      	nop
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	e000ed00 	.word	0xe000ed00

08005a64 <__NVIC_GetPriorityGrouping>:
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <__NVIC_GetPriorityGrouping+0x18>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	0a1b      	lsrs	r3, r3, #8
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	4618      	mov	r0, r3
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	e000ed00 	.word	0xe000ed00

08005a80 <__NVIC_EnableIRQ>:
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	4603      	mov	r3, r0
 8005a88:	71fb      	strb	r3, [r7, #7]
 8005a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	db0b      	blt.n	8005aaa <__NVIC_EnableIRQ+0x2a>
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	f003 021f 	and.w	r2, r3, #31
 8005a98:	4907      	ldr	r1, [pc, #28]	; (8005ab8 <__NVIC_EnableIRQ+0x38>)
 8005a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	2001      	movs	r0, #1
 8005aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8005aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	e000e100 	.word	0xe000e100

08005abc <__NVIC_DisableIRQ>:
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	71fb      	strb	r3, [r7, #7]
 8005ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	db12      	blt.n	8005af4 <__NVIC_DisableIRQ+0x38>
 8005ace:	79fb      	ldrb	r3, [r7, #7]
 8005ad0:	f003 021f 	and.w	r2, r3, #31
 8005ad4:	490a      	ldr	r1, [pc, #40]	; (8005b00 <__NVIC_DisableIRQ+0x44>)
 8005ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	2001      	movs	r0, #1
 8005ade:	fa00 f202 	lsl.w	r2, r0, r2
 8005ae2:	3320      	adds	r3, #32
 8005ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	bf00      	nop
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	e000e100 	.word	0xe000e100

08005b04 <__NVIC_SetPriority>:
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	6039      	str	r1, [r7, #0]
 8005b0e:	71fb      	strb	r3, [r7, #7]
 8005b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	db0a      	blt.n	8005b2e <__NVIC_SetPriority+0x2a>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	490c      	ldr	r1, [pc, #48]	; (8005b50 <__NVIC_SetPriority+0x4c>)
 8005b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b22:	0112      	lsls	r2, r2, #4
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	440b      	add	r3, r1
 8005b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8005b2c:	e00a      	b.n	8005b44 <__NVIC_SetPriority+0x40>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	4908      	ldr	r1, [pc, #32]	; (8005b54 <__NVIC_SetPriority+0x50>)
 8005b34:	79fb      	ldrb	r3, [r7, #7]
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	3b04      	subs	r3, #4
 8005b3c:	0112      	lsls	r2, r2, #4
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	440b      	add	r3, r1
 8005b42:	761a      	strb	r2, [r3, #24]
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	e000e100 	.word	0xe000e100
 8005b54:	e000ed00 	.word	0xe000ed00

08005b58 <NVIC_EncodePriority>:
 8005b58:	b480      	push	{r7}
 8005b5a:	b089      	sub	sp, #36	; 0x24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f1c3 0307 	rsb	r3, r3, #7
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	bf28      	it	cs
 8005b76:	2304      	movcs	r3, #4
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	2b06      	cmp	r3, #6
 8005b80:	d902      	bls.n	8005b88 <NVIC_EncodePriority+0x30>
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	3b03      	subs	r3, #3
 8005b86:	e000      	b.n	8005b8a <NVIC_EncodePriority+0x32>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	fa02 f303 	lsl.w	r3, r2, r3
 8005b96:	43da      	mvns	r2, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	401a      	ands	r2, r3
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	409a      	lsls	r2, r3
 8005ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8005baa:	43d9      	mvns	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	400b      	ands	r3, r1
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3724      	adds	r7, #36	; 0x24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <SysTick_Config>:
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bd0:	d301      	bcc.n	8005bd6 <SysTick_Config+0x16>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e00f      	b.n	8005bf6 <SysTick_Config+0x36>
 8005bd6:	4a0a      	ldr	r2, [pc, #40]	; (8005c00 <SysTick_Config+0x40>)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	6053      	str	r3, [r2, #4]
 8005bde:	210f      	movs	r1, #15
 8005be0:	f04f 30ff 	mov.w	r0, #4294967295
 8005be4:	f7ff ff8e 	bl	8005b04 <__NVIC_SetPriority>
 8005be8:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <SysTick_Config+0x40>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	609a      	str	r2, [r3, #8]
 8005bee:	4b04      	ldr	r3, [pc, #16]	; (8005c00 <SysTick_Config+0x40>)
 8005bf0:	2207      	movs	r2, #7
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	e000e010 	.word	0xe000e010

08005c04 <HAL_NVIC_SetPriorityGrouping>:
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff ff05 	bl	8005a1c <__NVIC_SetPriorityGrouping>
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_NVIC_SetPriority>:
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b086      	sub	sp, #24
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	4603      	mov	r3, r0
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
 8005c26:	73fb      	strb	r3, [r7, #15]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	f7ff ff1a 	bl	8005a64 <__NVIC_GetPriorityGrouping>
 8005c30:	6178      	str	r0, [r7, #20]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	68b9      	ldr	r1, [r7, #8]
 8005c36:	6978      	ldr	r0, [r7, #20]
 8005c38:	f7ff ff8e 	bl	8005b58 <NVIC_EncodePriority>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c42:	4611      	mov	r1, r2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff ff5d 	bl	8005b04 <__NVIC_SetPriority>
 8005c4a:	bf00      	nop
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <HAL_NVIC_EnableIRQ>:
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b082      	sub	sp, #8
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	4603      	mov	r3, r0
 8005c5a:	71fb      	strb	r3, [r7, #7]
 8005c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff ff0d 	bl	8005a80 <__NVIC_EnableIRQ>
 8005c66:	bf00      	nop
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_NVIC_DisableIRQ>:
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	4603      	mov	r3, r0
 8005c76:	71fb      	strb	r3, [r7, #7]
 8005c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff ff1d 	bl	8005abc <__NVIC_DisableIRQ>
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_SYSTICK_Config>:
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b082      	sub	sp, #8
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff ff94 	bl	8005bc0 <SysTick_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <HAL_DMA_Init>:
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	f7ff fe84 	bl	80059bc <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_DMA_Init+0x1c>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e099      	b.n	8005df4 <HAL_DMA_Init+0x150>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	e00f      	b.n	8005d02 <HAL_DMA_Init+0x5e>
 8005ce2:	f7ff fe6b 	bl	80059bc <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b05      	cmp	r3, #5
 8005cee:	d908      	bls.n	8005d02 <HAL_DMA_Init+0x5e>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	655a      	str	r2, [r3, #84]	; 0x54
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2203      	movs	r2, #3
 8005cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e078      	b.n	8005df4 <HAL_DMA_Init+0x150>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e8      	bne.n	8005ce2 <HAL_DMA_Init+0x3e>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4b38      	ldr	r3, [pc, #224]	; (8005dfc <HAL_DMA_Init+0x158>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d107      	bne.n	8005d6c <HAL_DMA_Init+0xc8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	4313      	orrs	r3, r2
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f023 0307 	bic.w	r3, r3, #7
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d117      	bne.n	8005dc6 <HAL_DMA_Init+0x122>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00e      	beq.n	8005dc6 <HAL_DMA_Init+0x122>
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fae7 	bl	800637c <DMA_CheckFifoParam>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <HAL_DMA_Init+0x122>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2240      	movs	r2, #64	; 0x40
 8005db8:	655a      	str	r2, [r3, #84]	; 0x54
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e016      	b.n	8005df4 <HAL_DMA_Init+0x150>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	615a      	str	r2, [r3, #20]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fa9e 	bl	8006310 <DMA_CalcBaseAndBitshift>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ddc:	223f      	movs	r2, #63	; 0x3f
 8005dde:	409a      	lsls	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	609a      	str	r2, [r3, #8]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	655a      	str	r2, [r3, #84]	; 0x54
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005df2:	2300      	movs	r3, #0
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	f010803f 	.word	0xf010803f

08005e00 <HAL_DMA_DeInit>:
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_DMA_DeInit+0x12>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e050      	b.n	8005eb4 <HAL_DMA_DeInit+0xb4>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d101      	bne.n	8005e22 <HAL_DMA_DeInit+0x22>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e048      	b.n	8005eb4 <HAL_DMA_DeInit+0xb4>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0201 	bic.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	605a      	str	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2200      	movs	r2, #0
 8005e48:	609a      	str	r2, [r3, #8]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	60da      	str	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2200      	movs	r2, #0
 8005e58:	611a      	str	r2, [r3, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2221      	movs	r2, #33	; 0x21
 8005e60:	615a      	str	r2, [r3, #20]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fa54 	bl	8006310 <DMA_CalcBaseAndBitshift>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	645a      	str	r2, [r3, #68]	; 0x44
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	649a      	str	r2, [r3, #72]	; 0x48
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	64da      	str	r2, [r3, #76]	; 0x4c
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	651a      	str	r2, [r3, #80]	; 0x50
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e94:	223f      	movs	r2, #63	; 0x3f
 8005e96:	409a      	lsls	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	609a      	str	r2, [r3, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	655a      	str	r2, [r3, #84]	; 0x54
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_DMA_Abort>:
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	f7ff fd77 	bl	80059bc <HAL_GetTick>
 8005ece:	60b8      	str	r0, [r7, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d008      	beq.n	8005eee <HAL_DMA_Abort+0x32>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2280      	movs	r2, #128	; 0x80
 8005ee0:	655a      	str	r2, [r3, #84]	; 0x54
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005eea:	2301      	movs	r3, #1
 8005eec:	e052      	b.n	8005f94 <HAL_DMA_Abort+0xd8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0216 	bic.w	r2, r2, #22
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	695a      	ldr	r2, [r3, #20]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f0c:	615a      	str	r2, [r3, #20]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d103      	bne.n	8005f1e <HAL_DMA_Abort+0x62>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d007      	beq.n	8005f2e <HAL_DMA_Abort+0x72>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0208 	bic.w	r2, r2, #8
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0201 	bic.w	r2, r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	e013      	b.n	8005f68 <HAL_DMA_Abort+0xac>
 8005f40:	f7ff fd3c 	bl	80059bc <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b05      	cmp	r3, #5
 8005f4c:	d90c      	bls.n	8005f68 <HAL_DMA_Abort+0xac>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	655a      	str	r2, [r3, #84]	; 0x54
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2203      	movs	r2, #3
 8005f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005f64:	2303      	movs	r3, #3
 8005f66:	e015      	b.n	8005f94 <HAL_DMA_Abort+0xd8>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e4      	bne.n	8005f40 <HAL_DMA_Abort+0x84>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f7a:	223f      	movs	r2, #63	; 0x3f
 8005f7c:	409a      	lsls	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	609a      	str	r2, [r3, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005f92:	2300      	movs	r3, #0
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_DMA_Abort_IT>:
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d004      	beq.n	8005fba <HAL_DMA_Abort_IT+0x1e>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2280      	movs	r2, #128	; 0x80
 8005fb4:	655a      	str	r2, [r3, #84]	; 0x54
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e00c      	b.n	8005fd4 <HAL_DMA_Abort_IT+0x38>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2205      	movs	r2, #5
 8005fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0201 	bic.w	r2, r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_DMA_IRQHandler>:
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60bb      	str	r3, [r7, #8]
 8005fec:	4b8e      	ldr	r3, [pc, #568]	; (8006228 <HAL_DMA_IRQHandler+0x248>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a8e      	ldr	r2, [pc, #568]	; (800622c <HAL_DMA_IRQHandler+0x24c>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	0a9b      	lsrs	r3, r3, #10
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600a:	2208      	movs	r2, #8
 800600c:	409a      	lsls	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4013      	ands	r3, r2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01a      	beq.n	800604c <HAL_DMA_IRQHandler+0x6c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d013      	beq.n	800604c <HAL_DMA_IRQHandler+0x6c>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0204 	bic.w	r2, r2, #4
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006038:	2208      	movs	r2, #8
 800603a:	409a      	lsls	r2, r3
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	609a      	str	r2, [r3, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006044:	f043 0201 	orr.w	r2, r3, #1
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	655a      	str	r2, [r3, #84]	; 0x54
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006050:	2201      	movs	r2, #1
 8006052:	409a      	lsls	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4013      	ands	r3, r2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d012      	beq.n	8006082 <HAL_DMA_IRQHandler+0xa2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00b      	beq.n	8006082 <HAL_DMA_IRQHandler+0xa2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606e:	2201      	movs	r2, #1
 8006070:	409a      	lsls	r2, r3
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	609a      	str	r2, [r3, #8]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607a:	f043 0202 	orr.w	r2, r3, #2
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	655a      	str	r2, [r3, #84]	; 0x54
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006086:	2204      	movs	r2, #4
 8006088:	409a      	lsls	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4013      	ands	r3, r2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d012      	beq.n	80060b8 <HAL_DMA_IRQHandler+0xd8>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00b      	beq.n	80060b8 <HAL_DMA_IRQHandler+0xd8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a4:	2204      	movs	r2, #4
 80060a6:	409a      	lsls	r2, r3
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	609a      	str	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b0:	f043 0204 	orr.w	r2, r3, #4
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	655a      	str	r2, [r3, #84]	; 0x54
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060bc:	2210      	movs	r2, #16
 80060be:	409a      	lsls	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4013      	ands	r3, r2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d043      	beq.n	8006150 <HAL_DMA_IRQHandler+0x170>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d03c      	beq.n	8006150 <HAL_DMA_IRQHandler+0x170>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060da:	2210      	movs	r2, #16
 80060dc:	409a      	lsls	r2, r3
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	609a      	str	r2, [r3, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d018      	beq.n	8006122 <HAL_DMA_IRQHandler+0x142>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d108      	bne.n	8006110 <HAL_DMA_IRQHandler+0x130>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	2b00      	cmp	r3, #0
 8006104:	d024      	beq.n	8006150 <HAL_DMA_IRQHandler+0x170>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	4798      	blx	r3
 800610e:	e01f      	b.n	8006150 <HAL_DMA_IRQHandler+0x170>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01b      	beq.n	8006150 <HAL_DMA_IRQHandler+0x170>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	4798      	blx	r3
 8006120:	e016      	b.n	8006150 <HAL_DMA_IRQHandler+0x170>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612c:	2b00      	cmp	r3, #0
 800612e:	d107      	bne.n	8006140 <HAL_DMA_IRQHandler+0x160>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0208 	bic.w	r2, r2, #8
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <HAL_DMA_IRQHandler+0x170>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	4798      	blx	r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006154:	2220      	movs	r2, #32
 8006156:	409a      	lsls	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4013      	ands	r3, r2
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 808f 	beq.w	8006280 <HAL_DMA_IRQHandler+0x2a0>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 8087 	beq.w	8006280 <HAL_DMA_IRQHandler+0x2a0>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006176:	2220      	movs	r2, #32
 8006178:	409a      	lsls	r2, r3
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	609a      	str	r2, [r3, #8]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b05      	cmp	r3, #5
 8006188:	d136      	bne.n	80061f8 <HAL_DMA_IRQHandler+0x218>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0216 	bic.w	r2, r2, #22
 8006198:	601a      	str	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695a      	ldr	r2, [r3, #20]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061a8:	615a      	str	r2, [r3, #20]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d103      	bne.n	80061ba <HAL_DMA_IRQHandler+0x1da>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <HAL_DMA_IRQHandler+0x1ea>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0208 	bic.w	r2, r2, #8
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ce:	223f      	movs	r2, #63	; 0x3f
 80061d0:	409a      	lsls	r2, r3
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	609a      	str	r2, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d07e      	beq.n	80062ec <HAL_DMA_IRQHandler+0x30c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	4798      	blx	r3
 80061f6:	e079      	b.n	80062ec <HAL_DMA_IRQHandler+0x30c>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01d      	beq.n	8006242 <HAL_DMA_IRQHandler+0x262>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10d      	bne.n	8006230 <HAL_DMA_IRQHandler+0x250>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006218:	2b00      	cmp	r3, #0
 800621a:	d031      	beq.n	8006280 <HAL_DMA_IRQHandler+0x2a0>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	4798      	blx	r3
 8006224:	e02c      	b.n	8006280 <HAL_DMA_IRQHandler+0x2a0>
 8006226:	bf00      	nop
 8006228:	20000000 	.word	0x20000000
 800622c:	1b4e81b5 	.word	0x1b4e81b5
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	2b00      	cmp	r3, #0
 8006236:	d023      	beq.n	8006280 <HAL_DMA_IRQHandler+0x2a0>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	4798      	blx	r3
 8006240:	e01e      	b.n	8006280 <HAL_DMA_IRQHandler+0x2a0>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10f      	bne.n	8006270 <HAL_DMA_IRQHandler+0x290>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0210 	bic.w	r2, r2, #16
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <HAL_DMA_IRQHandler+0x2a0>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	4798      	blx	r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006284:	2b00      	cmp	r3, #0
 8006286:	d032      	beq.n	80062ee <HAL_DMA_IRQHandler+0x30e>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d022      	beq.n	80062da <HAL_DMA_IRQHandler+0x2fa>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2205      	movs	r2, #5
 8006298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	3301      	adds	r3, #1
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d307      	bcc.n	80062c8 <HAL_DMA_IRQHandler+0x2e8>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f2      	bne.n	80062ac <HAL_DMA_IRQHandler+0x2cc>
 80062c6:	e000      	b.n	80062ca <HAL_DMA_IRQHandler+0x2ea>
 80062c8:	bf00      	nop
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d005      	beq.n	80062ee <HAL_DMA_IRQHandler+0x30e>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	4798      	blx	r3
 80062ea:	e000      	b.n	80062ee <HAL_DMA_IRQHandler+0x30e>
 80062ec:	bf00      	nop
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_DMA_GetState>:
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006302:	b2db      	uxtb	r3, r3
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <DMA_CalcBaseAndBitshift>:
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	3b10      	subs	r3, #16
 8006320:	4a14      	ldr	r2, [pc, #80]	; (8006374 <DMA_CalcBaseAndBitshift+0x64>)
 8006322:	fba2 2303 	umull	r2, r3, r2, r3
 8006326:	091b      	lsrs	r3, r3, #4
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	4a13      	ldr	r2, [pc, #76]	; (8006378 <DMA_CalcBaseAndBitshift+0x68>)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	65da      	str	r2, [r3, #92]	; 0x5c
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b03      	cmp	r3, #3
 800633c:	d909      	bls.n	8006352 <DMA_CalcBaseAndBitshift+0x42>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006346:	f023 0303 	bic.w	r3, r3, #3
 800634a:	1d1a      	adds	r2, r3, #4
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	659a      	str	r2, [r3, #88]	; 0x58
 8006350:	e007      	b.n	8006362 <DMA_CalcBaseAndBitshift+0x52>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800635a:	f023 0303 	bic.w	r3, r3, #3
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6593      	str	r3, [r2, #88]	; 0x58
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	aaaaaaab 	.word	0xaaaaaaab
 8006378:	0800f44c 	.word	0x0800f44c

0800637c <DMA_CheckFifoParam>:
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	2300      	movs	r3, #0
 8006386:	73fb      	strb	r3, [r7, #15]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	60bb      	str	r3, [r7, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d11f      	bne.n	80063d6 <DMA_CheckFifoParam+0x5a>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b03      	cmp	r3, #3
 800639a:	d856      	bhi.n	800644a <DMA_CheckFifoParam+0xce>
 800639c:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <DMA_CheckFifoParam+0x28>)
 800639e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a2:	bf00      	nop
 80063a4:	080063b5 	.word	0x080063b5
 80063a8:	080063c7 	.word	0x080063c7
 80063ac:	080063b5 	.word	0x080063b5
 80063b0:	0800644b 	.word	0x0800644b
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d046      	beq.n	800644e <DMA_CheckFifoParam+0xd2>
 80063c0:	2301      	movs	r3, #1
 80063c2:	73fb      	strb	r3, [r7, #15]
 80063c4:	e043      	b.n	800644e <DMA_CheckFifoParam+0xd2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063ce:	d140      	bne.n	8006452 <DMA_CheckFifoParam+0xd6>
 80063d0:	2301      	movs	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]
 80063d4:	e03d      	b.n	8006452 <DMA_CheckFifoParam+0xd6>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063de:	d121      	bne.n	8006424 <DMA_CheckFifoParam+0xa8>
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d837      	bhi.n	8006456 <DMA_CheckFifoParam+0xda>
 80063e6:	a201      	add	r2, pc, #4	; (adr r2, 80063ec <DMA_CheckFifoParam+0x70>)
 80063e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ec:	080063fd 	.word	0x080063fd
 80063f0:	08006403 	.word	0x08006403
 80063f4:	080063fd 	.word	0x080063fd
 80063f8:	08006415 	.word	0x08006415
 80063fc:	2301      	movs	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]
 8006400:	e030      	b.n	8006464 <DMA_CheckFifoParam+0xe8>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d025      	beq.n	800645a <DMA_CheckFifoParam+0xde>
 800640e:	2301      	movs	r3, #1
 8006410:	73fb      	strb	r3, [r7, #15]
 8006412:	e022      	b.n	800645a <DMA_CheckFifoParam+0xde>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800641c:	d11f      	bne.n	800645e <DMA_CheckFifoParam+0xe2>
 800641e:	2301      	movs	r3, #1
 8006420:	73fb      	strb	r3, [r7, #15]
 8006422:	e01c      	b.n	800645e <DMA_CheckFifoParam+0xe2>
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b02      	cmp	r3, #2
 8006428:	d903      	bls.n	8006432 <DMA_CheckFifoParam+0xb6>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b03      	cmp	r3, #3
 800642e:	d003      	beq.n	8006438 <DMA_CheckFifoParam+0xbc>
 8006430:	e018      	b.n	8006464 <DMA_CheckFifoParam+0xe8>
 8006432:	2301      	movs	r3, #1
 8006434:	73fb      	strb	r3, [r7, #15]
 8006436:	e015      	b.n	8006464 <DMA_CheckFifoParam+0xe8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00e      	beq.n	8006462 <DMA_CheckFifoParam+0xe6>
 8006444:	2301      	movs	r3, #1
 8006446:	73fb      	strb	r3, [r7, #15]
 8006448:	e00b      	b.n	8006462 <DMA_CheckFifoParam+0xe6>
 800644a:	bf00      	nop
 800644c:	e00a      	b.n	8006464 <DMA_CheckFifoParam+0xe8>
 800644e:	bf00      	nop
 8006450:	e008      	b.n	8006464 <DMA_CheckFifoParam+0xe8>
 8006452:	bf00      	nop
 8006454:	e006      	b.n	8006464 <DMA_CheckFifoParam+0xe8>
 8006456:	bf00      	nop
 8006458:	e004      	b.n	8006464 <DMA_CheckFifoParam+0xe8>
 800645a:	bf00      	nop
 800645c:	e002      	b.n	8006464 <DMA_CheckFifoParam+0xe8>
 800645e:	bf00      	nop
 8006460:	e000      	b.n	8006464 <DMA_CheckFifoParam+0xe8>
 8006462:	bf00      	nop
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop

08006474 <HAL_GPIO_Init>:
 8006474:	b480      	push	{r7}
 8006476:	b089      	sub	sp, #36	; 0x24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	2300      	movs	r3, #0
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	2300      	movs	r3, #0
 8006488:	61bb      	str	r3, [r7, #24]
 800648a:	2300      	movs	r3, #0
 800648c:	61fb      	str	r3, [r7, #28]
 800648e:	e159      	b.n	8006744 <HAL_GPIO_Init+0x2d0>
 8006490:	2201      	movs	r2, #1
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	fa02 f303 	lsl.w	r3, r2, r3
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	4013      	ands	r3, r2
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	f040 8148 	bne.w	800673e <HAL_GPIO_Init+0x2ca>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d005      	beq.n	80064c6 <HAL_GPIO_Init+0x52>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d130      	bne.n	8006528 <HAL_GPIO_Init+0xb4>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	61bb      	str	r3, [r7, #24]
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	2203      	movs	r2, #3
 80064d2:	fa02 f303 	lsl.w	r3, r2, r3
 80064d6:	43db      	mvns	r3, r3
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	4013      	ands	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	609a      	str	r2, [r3, #8]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	2201      	movs	r2, #1
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	43db      	mvns	r3, r3
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	4013      	ands	r3, r2
 800650a:	61bb      	str	r3, [r7, #24]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	091b      	lsrs	r3, r3, #4
 8006512:	f003 0201 	and.w	r2, r3, #1
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	fa02 f303 	lsl.w	r3, r2, r3
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	4313      	orrs	r3, r2
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	605a      	str	r2, [r3, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f003 0303 	and.w	r3, r3, #3
 8006530:	2b03      	cmp	r3, #3
 8006532:	d017      	beq.n	8006564 <HAL_GPIO_Init+0xf0>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	61bb      	str	r3, [r7, #24]
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	2203      	movs	r2, #3
 8006540:	fa02 f303 	lsl.w	r3, r2, r3
 8006544:	43db      	mvns	r3, r3
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	4013      	ands	r3, r2
 800654a:	61bb      	str	r3, [r7, #24]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	fa02 f303 	lsl.w	r3, r2, r3
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	4313      	orrs	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	60da      	str	r2, [r3, #12]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d123      	bne.n	80065b8 <HAL_GPIO_Init+0x144>
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	08da      	lsrs	r2, r3, #3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3208      	adds	r2, #8
 8006578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657c:	61bb      	str	r3, [r7, #24]
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	220f      	movs	r2, #15
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	43db      	mvns	r3, r3
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	4013      	ands	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	f003 0307 	and.w	r3, r3, #7
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	fa02 f303 	lsl.w	r3, r2, r3
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	08da      	lsrs	r2, r3, #3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3208      	adds	r2, #8
 80065b2:	69b9      	ldr	r1, [r7, #24]
 80065b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	61bb      	str	r3, [r7, #24]
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	2203      	movs	r2, #3
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	43db      	mvns	r3, r3
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	4013      	ands	r3, r2
 80065ce:	61bb      	str	r3, [r7, #24]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f003 0203 	and.w	r2, r3, #3
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 80a2 	beq.w	800673e <HAL_GPIO_Init+0x2ca>
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	4b57      	ldr	r3, [pc, #348]	; (800675c <HAL_GPIO_Init+0x2e8>)
 8006600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006602:	4a56      	ldr	r2, [pc, #344]	; (800675c <HAL_GPIO_Init+0x2e8>)
 8006604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006608:	6453      	str	r3, [r2, #68]	; 0x44
 800660a:	4b54      	ldr	r3, [pc, #336]	; (800675c <HAL_GPIO_Init+0x2e8>)
 800660c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4a52      	ldr	r2, [pc, #328]	; (8006760 <HAL_GPIO_Init+0x2ec>)
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	089b      	lsrs	r3, r3, #2
 800661c:	3302      	adds	r3, #2
 800661e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	220f      	movs	r2, #15
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	43db      	mvns	r3, r3
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	4013      	ands	r3, r2
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a49      	ldr	r2, [pc, #292]	; (8006764 <HAL_GPIO_Init+0x2f0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d019      	beq.n	8006676 <HAL_GPIO_Init+0x202>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a48      	ldr	r2, [pc, #288]	; (8006768 <HAL_GPIO_Init+0x2f4>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <HAL_GPIO_Init+0x1fe>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a47      	ldr	r2, [pc, #284]	; (800676c <HAL_GPIO_Init+0x2f8>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00d      	beq.n	800666e <HAL_GPIO_Init+0x1fa>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a46      	ldr	r2, [pc, #280]	; (8006770 <HAL_GPIO_Init+0x2fc>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d007      	beq.n	800666a <HAL_GPIO_Init+0x1f6>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a45      	ldr	r2, [pc, #276]	; (8006774 <HAL_GPIO_Init+0x300>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d101      	bne.n	8006666 <HAL_GPIO_Init+0x1f2>
 8006662:	2304      	movs	r3, #4
 8006664:	e008      	b.n	8006678 <HAL_GPIO_Init+0x204>
 8006666:	2307      	movs	r3, #7
 8006668:	e006      	b.n	8006678 <HAL_GPIO_Init+0x204>
 800666a:	2303      	movs	r3, #3
 800666c:	e004      	b.n	8006678 <HAL_GPIO_Init+0x204>
 800666e:	2302      	movs	r3, #2
 8006670:	e002      	b.n	8006678 <HAL_GPIO_Init+0x204>
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <HAL_GPIO_Init+0x204>
 8006676:	2300      	movs	r3, #0
 8006678:	69fa      	ldr	r2, [r7, #28]
 800667a:	f002 0203 	and.w	r2, r2, #3
 800667e:	0092      	lsls	r2, r2, #2
 8006680:	4093      	lsls	r3, r2
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	4313      	orrs	r3, r2
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	4935      	ldr	r1, [pc, #212]	; (8006760 <HAL_GPIO_Init+0x2ec>)
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	089b      	lsrs	r3, r3, #2
 800668e:	3302      	adds	r3, #2
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006696:	4b38      	ldr	r3, [pc, #224]	; (8006778 <HAL_GPIO_Init+0x304>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	61bb      	str	r3, [r7, #24]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	43db      	mvns	r3, r3
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	4013      	ands	r3, r2
 80066a4:	61bb      	str	r3, [r7, #24]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_GPIO_Init+0x246>
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	61bb      	str	r3, [r7, #24]
 80066ba:	4a2f      	ldr	r2, [pc, #188]	; (8006778 <HAL_GPIO_Init+0x304>)
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	6093      	str	r3, [r2, #8]
 80066c0:	4b2d      	ldr	r3, [pc, #180]	; (8006778 <HAL_GPIO_Init+0x304>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	43db      	mvns	r3, r3
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	4013      	ands	r3, r2
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <HAL_GPIO_Init+0x270>
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	61bb      	str	r3, [r7, #24]
 80066e4:	4a24      	ldr	r2, [pc, #144]	; (8006778 <HAL_GPIO_Init+0x304>)
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	60d3      	str	r3, [r2, #12]
 80066ea:	4b23      	ldr	r3, [pc, #140]	; (8006778 <HAL_GPIO_Init+0x304>)
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	61bb      	str	r3, [r7, #24]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	43db      	mvns	r3, r3
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	4013      	ands	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_GPIO_Init+0x29a>
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	4a1a      	ldr	r2, [pc, #104]	; (8006778 <HAL_GPIO_Init+0x304>)
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	6053      	str	r3, [r2, #4]
 8006714:	4b18      	ldr	r3, [pc, #96]	; (8006778 <HAL_GPIO_Init+0x304>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	43db      	mvns	r3, r3
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	4013      	ands	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <HAL_GPIO_Init+0x2c4>
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	4313      	orrs	r3, r2
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	4a0f      	ldr	r2, [pc, #60]	; (8006778 <HAL_GPIO_Init+0x304>)
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	3301      	adds	r3, #1
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	2b0f      	cmp	r3, #15
 8006748:	f67f aea2 	bls.w	8006490 <HAL_GPIO_Init+0x1c>
 800674c:	bf00      	nop
 800674e:	bf00      	nop
 8006750:	3724      	adds	r7, #36	; 0x24
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40023800 	.word	0x40023800
 8006760:	40013800 	.word	0x40013800
 8006764:	40020000 	.word	0x40020000
 8006768:	40020400 	.word	0x40020400
 800676c:	40020800 	.word	0x40020800
 8006770:	40020c00 	.word	0x40020c00
 8006774:	40021000 	.word	0x40021000
 8006778:	40013c00 	.word	0x40013c00

0800677c <HAL_GPIO_DeInit>:
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
 8006786:	2300      	movs	r3, #0
 8006788:	613b      	str	r3, [r7, #16]
 800678a:	2300      	movs	r3, #0
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	2300      	movs	r3, #0
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	2300      	movs	r3, #0
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	e0bb      	b.n	8006910 <HAL_GPIO_DeInit+0x194>
 8006798:	2201      	movs	r2, #1
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	fa02 f303 	lsl.w	r3, r2, r3
 80067a0:	613b      	str	r3, [r7, #16]
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4013      	ands	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	f040 80ab 	bne.w	800690a <HAL_GPIO_DeInit+0x18e>
 80067b4:	4a5c      	ldr	r2, [pc, #368]	; (8006928 <HAL_GPIO_DeInit+0x1ac>)
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	089b      	lsrs	r3, r3, #2
 80067ba:	3302      	adds	r3, #2
 80067bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	220f      	movs	r2, #15
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	4013      	ands	r3, r2
 80067d4:	60bb      	str	r3, [r7, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a54      	ldr	r2, [pc, #336]	; (800692c <HAL_GPIO_DeInit+0x1b0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d019      	beq.n	8006812 <HAL_GPIO_DeInit+0x96>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a53      	ldr	r2, [pc, #332]	; (8006930 <HAL_GPIO_DeInit+0x1b4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d013      	beq.n	800680e <HAL_GPIO_DeInit+0x92>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a52      	ldr	r2, [pc, #328]	; (8006934 <HAL_GPIO_DeInit+0x1b8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00d      	beq.n	800680a <HAL_GPIO_DeInit+0x8e>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a51      	ldr	r2, [pc, #324]	; (8006938 <HAL_GPIO_DeInit+0x1bc>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d007      	beq.n	8006806 <HAL_GPIO_DeInit+0x8a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a50      	ldr	r2, [pc, #320]	; (800693c <HAL_GPIO_DeInit+0x1c0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d101      	bne.n	8006802 <HAL_GPIO_DeInit+0x86>
 80067fe:	2304      	movs	r3, #4
 8006800:	e008      	b.n	8006814 <HAL_GPIO_DeInit+0x98>
 8006802:	2307      	movs	r3, #7
 8006804:	e006      	b.n	8006814 <HAL_GPIO_DeInit+0x98>
 8006806:	2303      	movs	r3, #3
 8006808:	e004      	b.n	8006814 <HAL_GPIO_DeInit+0x98>
 800680a:	2302      	movs	r3, #2
 800680c:	e002      	b.n	8006814 <HAL_GPIO_DeInit+0x98>
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <HAL_GPIO_DeInit+0x98>
 8006812:	2300      	movs	r3, #0
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	f002 0203 	and.w	r2, r2, #3
 800681a:	0092      	lsls	r2, r2, #2
 800681c:	4093      	lsls	r3, r2
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	429a      	cmp	r2, r3
 8006822:	d132      	bne.n	800688a <HAL_GPIO_DeInit+0x10e>
 8006824:	4b46      	ldr	r3, [pc, #280]	; (8006940 <HAL_GPIO_DeInit+0x1c4>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	43db      	mvns	r3, r3
 800682c:	4944      	ldr	r1, [pc, #272]	; (8006940 <HAL_GPIO_DeInit+0x1c4>)
 800682e:	4013      	ands	r3, r2
 8006830:	600b      	str	r3, [r1, #0]
 8006832:	4b43      	ldr	r3, [pc, #268]	; (8006940 <HAL_GPIO_DeInit+0x1c4>)
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	43db      	mvns	r3, r3
 800683a:	4941      	ldr	r1, [pc, #260]	; (8006940 <HAL_GPIO_DeInit+0x1c4>)
 800683c:	4013      	ands	r3, r2
 800683e:	604b      	str	r3, [r1, #4]
 8006840:	4b3f      	ldr	r3, [pc, #252]	; (8006940 <HAL_GPIO_DeInit+0x1c4>)
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	43db      	mvns	r3, r3
 8006848:	493d      	ldr	r1, [pc, #244]	; (8006940 <HAL_GPIO_DeInit+0x1c4>)
 800684a:	4013      	ands	r3, r2
 800684c:	60cb      	str	r3, [r1, #12]
 800684e:	4b3c      	ldr	r3, [pc, #240]	; (8006940 <HAL_GPIO_DeInit+0x1c4>)
 8006850:	689a      	ldr	r2, [r3, #8]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	43db      	mvns	r3, r3
 8006856:	493a      	ldr	r1, [pc, #232]	; (8006940 <HAL_GPIO_DeInit+0x1c4>)
 8006858:	4013      	ands	r3, r2
 800685a:	608b      	str	r3, [r1, #8]
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	220f      	movs	r2, #15
 8006866:	fa02 f303 	lsl.w	r3, r2, r3
 800686a:	60bb      	str	r3, [r7, #8]
 800686c:	4a2e      	ldr	r2, [pc, #184]	; (8006928 <HAL_GPIO_DeInit+0x1ac>)
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	089b      	lsrs	r3, r3, #2
 8006872:	3302      	adds	r3, #2
 8006874:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	43da      	mvns	r2, r3
 800687c:	482a      	ldr	r0, [pc, #168]	; (8006928 <HAL_GPIO_DeInit+0x1ac>)
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	089b      	lsrs	r3, r3, #2
 8006882:	400a      	ands	r2, r1
 8006884:	3302      	adds	r3, #2
 8006886:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	2103      	movs	r1, #3
 8006894:	fa01 f303 	lsl.w	r3, r1, r3
 8006898:	43db      	mvns	r3, r3
 800689a:	401a      	ands	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	08da      	lsrs	r2, r3, #3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3208      	adds	r2, #8
 80068a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	220f      	movs	r2, #15
 80068b6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ba:	43db      	mvns	r3, r3
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	08d2      	lsrs	r2, r2, #3
 80068c0:	4019      	ands	r1, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3208      	adds	r2, #8
 80068c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	2103      	movs	r1, #3
 80068d4:	fa01 f303 	lsl.w	r3, r1, r3
 80068d8:	43db      	mvns	r3, r3
 80068da:	401a      	ands	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	60da      	str	r2, [r3, #12]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	2101      	movs	r1, #1
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ec:	43db      	mvns	r3, r3
 80068ee:	401a      	ands	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	605a      	str	r2, [r3, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	2103      	movs	r1, #3
 80068fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006902:	43db      	mvns	r3, r3
 8006904:	401a      	ands	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	609a      	str	r2, [r3, #8]
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	3301      	adds	r3, #1
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2b0f      	cmp	r3, #15
 8006914:	f67f af40 	bls.w	8006798 <HAL_GPIO_DeInit+0x1c>
 8006918:	bf00      	nop
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40013800 	.word	0x40013800
 800692c:	40020000 	.word	0x40020000
 8006930:	40020400 	.word	0x40020400
 8006934:	40020800 	.word	0x40020800
 8006938:	40020c00 	.word	0x40020c00
 800693c:	40021000 	.word	0x40021000
 8006940:	40013c00 	.word	0x40013c00

08006944 <HAL_GPIO_WritePin>:
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	807b      	strh	r3, [r7, #2]
 8006950:	4613      	mov	r3, r2
 8006952:	707b      	strb	r3, [r7, #1]
 8006954:	787b      	ldrb	r3, [r7, #1]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_GPIO_WritePin+0x1e>
 800695a:	887a      	ldrh	r2, [r7, #2]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	619a      	str	r2, [r3, #24]
 8006960:	e003      	b.n	800696a <HAL_GPIO_WritePin+0x26>
 8006962:	887b      	ldrh	r3, [r7, #2]
 8006964:	041a      	lsls	r2, r3, #16
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	619a      	str	r2, [r3, #24]
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
	...

08006978 <HAL_I2C_Init>:
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_I2C_Init+0x12>
 8006986:	2301      	movs	r3, #1
 8006988:	e12b      	b.n	8006be2 <HAL_I2C_Init+0x26a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <HAL_I2C_Init+0x2c>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fe fb82 	bl	80050a8 <HAL_I2C_MspInit>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2224      	movs	r2, #36	; 0x24
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0201 	bic.w	r2, r2, #1
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	f002 fdf0 	bl	80095c0 <HAL_RCC_GetPCLK1Freq>
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	4a81      	ldr	r2, [pc, #516]	; (8006bec <HAL_I2C_Init+0x274>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d807      	bhi.n	80069fc <HAL_I2C_Init+0x84>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4a80      	ldr	r2, [pc, #512]	; (8006bf0 <HAL_I2C_Init+0x278>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	bf94      	ite	ls
 80069f4:	2301      	movls	r3, #1
 80069f6:	2300      	movhi	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	e006      	b.n	8006a0a <HAL_I2C_Init+0x92>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a7d      	ldr	r2, [pc, #500]	; (8006bf4 <HAL_I2C_Init+0x27c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	bf94      	ite	ls
 8006a04:	2301      	movls	r3, #1
 8006a06:	2300      	movhi	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <HAL_I2C_Init+0x9a>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e0e7      	b.n	8006be2 <HAL_I2C_Init+0x26a>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4a78      	ldr	r2, [pc, #480]	; (8006bf8 <HAL_I2C_Init+0x280>)
 8006a16:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1a:	0c9b      	lsrs	r3, r3, #18
 8006a1c:	60bb      	str	r3, [r7, #8]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	4a6a      	ldr	r2, [pc, #424]	; (8006bec <HAL_I2C_Init+0x274>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d802      	bhi.n	8006a4c <HAL_I2C_Init+0xd4>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	e009      	b.n	8006a60 <HAL_I2C_Init+0xe8>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006a52:	fb02 f303 	mul.w	r3, r2, r3
 8006a56:	4a69      	ldr	r2, [pc, #420]	; (8006bfc <HAL_I2C_Init+0x284>)
 8006a58:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5c:	099b      	lsrs	r3, r3, #6
 8006a5e:	3301      	adds	r3, #1
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	430b      	orrs	r3, r1
 8006a66:	6213      	str	r3, [r2, #32]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	495c      	ldr	r1, [pc, #368]	; (8006bec <HAL_I2C_Init+0x274>)
 8006a7c:	428b      	cmp	r3, r1
 8006a7e:	d819      	bhi.n	8006ab4 <HAL_I2C_Init+0x13c>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	1e59      	subs	r1, r3, #1
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a8e:	1c59      	adds	r1, r3, #1
 8006a90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a94:	400b      	ands	r3, r1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <HAL_I2C_Init+0x138>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1e59      	subs	r1, r3, #1
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aae:	e051      	b.n	8006b54 <HAL_I2C_Init+0x1dc>
 8006ab0:	2304      	movs	r3, #4
 8006ab2:	e04f      	b.n	8006b54 <HAL_I2C_Init+0x1dc>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d111      	bne.n	8006ae0 <HAL_I2C_Init+0x168>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	1e58      	subs	r0, r3, #1
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6859      	ldr	r1, [r3, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	440b      	add	r3, r1
 8006aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ace:	3301      	adds	r3, #1
 8006ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	bf0c      	ite	eq
 8006ad8:	2301      	moveq	r3, #1
 8006ada:	2300      	movne	r3, #0
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	e012      	b.n	8006b06 <HAL_I2C_Init+0x18e>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	1e58      	subs	r0, r3, #1
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6859      	ldr	r1, [r3, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	0099      	lsls	r1, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006af6:	3301      	adds	r3, #1
 8006af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	bf0c      	ite	eq
 8006b00:	2301      	moveq	r3, #1
 8006b02:	2300      	movne	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <HAL_I2C_Init+0x196>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e022      	b.n	8006b54 <HAL_I2C_Init+0x1dc>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10e      	bne.n	8006b34 <HAL_I2C_Init+0x1bc>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1e58      	subs	r0, r3, #1
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6859      	ldr	r1, [r3, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	440b      	add	r3, r1
 8006b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b28:	3301      	adds	r3, #1
 8006b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b32:	e00f      	b.n	8006b54 <HAL_I2C_Init+0x1dc>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	1e58      	subs	r0, r3, #1
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6859      	ldr	r1, [r3, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	440b      	add	r3, r1
 8006b42:	0099      	lsls	r1, r3, #2
 8006b44:	440b      	add	r3, r1
 8006b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	6809      	ldr	r1, [r1, #0]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	61cb      	str	r3, [r1, #28]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69da      	ldr	r2, [r3, #28]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6911      	ldr	r1, [r2, #16]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	68d2      	ldr	r2, [r2, #12]
 8006b8e:	4311      	orrs	r1, r2
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6812      	ldr	r2, [r2, #0]
 8006b94:	430b      	orrs	r3, r1
 8006b96:	6093      	str	r3, [r2, #8]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	695a      	ldr	r2, [r3, #20]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	60da      	str	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006be0:	2300      	movs	r3, #0
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	000186a0 	.word	0x000186a0
 8006bf0:	001e847f 	.word	0x001e847f
 8006bf4:	003d08ff 	.word	0x003d08ff
 8006bf8:	431bde83 	.word	0x431bde83
 8006bfc:	10624dd3 	.word	0x10624dd3

08006c00 <HAL_I2C_Mem_Write>:
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	4608      	mov	r0, r1
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	4603      	mov	r3, r0
 8006c10:	817b      	strh	r3, [r7, #10]
 8006c12:	460b      	mov	r3, r1
 8006c14:	813b      	strh	r3, [r7, #8]
 8006c16:	4613      	mov	r3, r2
 8006c18:	80fb      	strh	r3, [r7, #6]
 8006c1a:	f7fe fecf 	bl	80059bc <HAL_GetTick>
 8006c1e:	6178      	str	r0, [r7, #20]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b20      	cmp	r3, #32
 8006c2a:	f040 80d9 	bne.w	8006de0 <HAL_I2C_Mem_Write+0x1e0>
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	2319      	movs	r3, #25
 8006c34:	2201      	movs	r2, #1
 8006c36:	496d      	ldr	r1, [pc, #436]	; (8006dec <HAL_I2C_Mem_Write+0x1ec>)
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f001 febd 	bl	80089b8 <I2C_WaitOnFlagUntilTimeout>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <HAL_I2C_Mem_Write+0x48>
 8006c44:	2302      	movs	r3, #2
 8006c46:	e0cc      	b.n	8006de2 <HAL_I2C_Mem_Write+0x1e2>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d101      	bne.n	8006c56 <HAL_I2C_Mem_Write+0x56>
 8006c52:	2302      	movs	r3, #2
 8006c54:	e0c5      	b.n	8006de2 <HAL_I2C_Mem_Write+0x1e2>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d007      	beq.n	8006c7c <HAL_I2C_Mem_Write+0x7c>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0201 	orr.w	r2, r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2221      	movs	r2, #33	; 0x21
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2240      	movs	r2, #64	; 0x40
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	641a      	str	r2, [r3, #64]	; 0x40
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a3a      	ldr	r2, [r7, #32]
 8006ca6:	625a      	str	r2, [r3, #36]	; 0x24
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006cac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	851a      	strh	r2, [r3, #40]	; 0x28
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4a4d      	ldr	r2, [pc, #308]	; (8006df0 <HAL_I2C_Mem_Write+0x1f0>)
 8006cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8006cbe:	88f8      	ldrh	r0, [r7, #6]
 8006cc0:	893a      	ldrh	r2, [r7, #8]
 8006cc2:	8979      	ldrh	r1, [r7, #10]
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	9301      	str	r3, [sp, #4]
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	4603      	mov	r3, r0
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f001 fd34 	bl	800873c <I2C_RequestMemoryWrite>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d052      	beq.n	8006d80 <HAL_I2C_Mem_Write+0x180>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e081      	b.n	8006de2 <HAL_I2C_Mem_Write+0x1e2>
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f001 ff3e 	bl	8008b64 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00d      	beq.n	8006d0a <HAL_I2C_Mem_Write+0x10a>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d107      	bne.n	8006d06 <HAL_I2C_Mem_Write+0x106>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	2301      	movs	r3, #1
 8006d08:	e06b      	b.n	8006de2 <HAL_I2C_Mem_Write+0x1e2>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	781a      	ldrb	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	611a      	str	r2, [r3, #16]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	3b01      	subs	r3, #1
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b04      	cmp	r3, #4
 8006d46:	d11b      	bne.n	8006d80 <HAL_I2C_Mem_Write+0x180>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d017      	beq.n	8006d80 <HAL_I2C_Mem_Write+0x180>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	781a      	ldrb	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	611a      	str	r2, [r3, #16]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	625a      	str	r2, [r3, #36]	; 0x24
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	851a      	strh	r2, [r3, #40]	; 0x28
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1aa      	bne.n	8006cde <HAL_I2C_Mem_Write+0xde>
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f001 ff2a 	bl	8008be6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00d      	beq.n	8006db4 <HAL_I2C_Mem_Write+0x1b4>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d107      	bne.n	8006db0 <HAL_I2C_Mem_Write+0x1b0>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	2301      	movs	r3, #1
 8006db2:	e016      	b.n	8006de2 <HAL_I2C_Mem_Write+0x1e2>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e000      	b.n	8006de2 <HAL_I2C_Mem_Write+0x1e2>
 8006de0:	2302      	movs	r3, #2
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	00100002 	.word	0x00100002
 8006df0:	ffff0000 	.word	0xffff0000

08006df4 <HAL_I2C_Mem_Read_IT>:
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	4611      	mov	r1, r2
 8006e00:	461a      	mov	r2, r3
 8006e02:	4603      	mov	r3, r0
 8006e04:	817b      	strh	r3, [r7, #10]
 8006e06:	460b      	mov	r3, r1
 8006e08:	813b      	strh	r3, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80fb      	strh	r3, [r7, #6]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	f040 809a 	bne.w	8006f54 <HAL_I2C_Mem_Read_IT+0x160>
 8006e20:	4b50      	ldr	r3, [pc, #320]	; (8006f64 <HAL_I2C_Mem_Read_IT+0x170>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	08db      	lsrs	r3, r3, #3
 8006e26:	4a50      	ldr	r2, [pc, #320]	; (8006f68 <HAL_I2C_Mem_Read_IT+0x174>)
 8006e28:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2c:	0a1a      	lsrs	r2, r3, #8
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009a      	lsls	r2, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d116      	bne.n	8006e74 <HAL_I2C_Mem_Read_IT+0x80>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e60:	f043 0220 	orr.w	r2, r3, #32
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	641a      	str	r2, [r3, #64]	; 0x40
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e70:	2301      	movs	r3, #1
 8006e72:	e070      	b.n	8006f56 <HAL_I2C_Mem_Read_IT+0x162>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d0db      	beq.n	8006e3a <HAL_I2C_Mem_Read_IT+0x46>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_I2C_Mem_Read_IT+0x9c>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e062      	b.n	8006f56 <HAL_I2C_Mem_Read_IT+0x162>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d007      	beq.n	8006eb6 <HAL_I2C_Mem_Read_IT+0xc2>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f042 0201 	orr.w	r2, r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2222      	movs	r2, #34	; 0x22
 8006eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2240      	movs	r2, #64	; 0x40
 8006ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	641a      	str	r2, [r3, #64]	; 0x40
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a3a      	ldr	r2, [r7, #32]
 8006ee0:	625a      	str	r2, [r3, #36]	; 0x24
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	851a      	strh	r2, [r3, #40]	; 0x28
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4a1d      	ldr	r2, [pc, #116]	; (8006f6c <HAL_I2C_Mem_Read_IT+0x178>)
 8006ef6:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ef8:	897a      	ldrh	r2, [r7, #10]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	645a      	str	r2, [r3, #68]	; 0x44
 8006efe:	893a      	ldrh	r2, [r7, #8]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	649a      	str	r2, [r3, #72]	; 0x48
 8006f04:	88fa      	ldrh	r2, [r7, #6]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	64da      	str	r2, [r3, #76]	; 0x4c
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	651a      	str	r2, [r3, #80]	; 0x50
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d007      	beq.n	8006f50 <HAL_I2C_Mem_Read_IT+0x15c>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006f4e:	605a      	str	r2, [r3, #4]
 8006f50:	2300      	movs	r3, #0
 8006f52:	e000      	b.n	8006f56 <HAL_I2C_Mem_Read_IT+0x162>
 8006f54:	2302      	movs	r3, #2
 8006f56:	4618      	mov	r0, r3
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20000000 	.word	0x20000000
 8006f68:	14f8b589 	.word	0x14f8b589
 8006f6c:	ffff0000 	.word	0xffff0000

08006f70 <HAL_I2C_EV_IRQHandler>:
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	613b      	str	r3, [r7, #16]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f90:	73fb      	strb	r3, [r7, #15]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f98:	73bb      	strb	r3, [r7, #14]
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	2b10      	cmp	r3, #16
 8006f9e:	d003      	beq.n	8006fa8 <HAL_I2C_EV_IRQHandler+0x38>
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	2b40      	cmp	r3, #64	; 0x40
 8006fa4:	f040 80c1 	bne.w	800712a <HAL_I2C_EV_IRQHandler+0x1ba>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	61bb      	str	r3, [r7, #24]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	61fb      	str	r3, [r7, #28]
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10d      	bne.n	8006fde <HAL_I2C_EV_IRQHandler+0x6e>
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006fc8:	d003      	beq.n	8006fd2 <HAL_I2C_EV_IRQHandler+0x62>
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006fd0:	d101      	bne.n	8006fd6 <HAL_I2C_EV_IRQHandler+0x66>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <HAL_I2C_EV_IRQHandler+0x68>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	f000 8132 	beq.w	8007242 <HAL_I2C_EV_IRQHandler+0x2d2>
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00c      	beq.n	8007002 <HAL_I2C_EV_IRQHandler+0x92>
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	0a5b      	lsrs	r3, r3, #9
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d006      	beq.n	8007002 <HAL_I2C_EV_IRQHandler+0x92>
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 fe98 	bl	8008d2a <I2C_ConvertOtherXferOptions>
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fd83 	bl	8007b06 <I2C_Master_SB>
 8007000:	e092      	b.n	8007128 <HAL_I2C_EV_IRQHandler+0x1b8>
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	08db      	lsrs	r3, r3, #3
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d009      	beq.n	8007022 <HAL_I2C_EV_IRQHandler+0xb2>
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	0a5b      	lsrs	r3, r3, #9
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_I2C_EV_IRQHandler+0xb2>
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fdf9 	bl	8007c12 <I2C_Master_ADD10>
 8007020:	e082      	b.n	8007128 <HAL_I2C_EV_IRQHandler+0x1b8>
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	085b      	lsrs	r3, r3, #1
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d009      	beq.n	8007042 <HAL_I2C_EV_IRQHandler+0xd2>
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	0a5b      	lsrs	r3, r3, #9
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_I2C_EV_IRQHandler+0xd2>
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fe13 	bl	8007c66 <I2C_Master_ADDR>
 8007040:	e072      	b.n	8007128 <HAL_I2C_EV_IRQHandler+0x1b8>
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	089b      	lsrs	r3, r3, #2
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	d03b      	beq.n	80070c6 <HAL_I2C_EV_IRQHandler+0x156>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800705c:	f000 80f3 	beq.w	8007246 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	09db      	lsrs	r3, r3, #7
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00f      	beq.n	800708c <HAL_I2C_EV_IRQHandler+0x11c>
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	0a9b      	lsrs	r3, r3, #10
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d009      	beq.n	800708c <HAL_I2C_EV_IRQHandler+0x11c>
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	089b      	lsrs	r3, r3, #2
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d103      	bne.n	800708c <HAL_I2C_EV_IRQHandler+0x11c>
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f9f3 	bl	8007470 <I2C_MasterTransmit_TXE>
 800708a:	e04d      	b.n	8007128 <HAL_I2C_EV_IRQHandler+0x1b8>
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	089b      	lsrs	r3, r3, #2
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 80d6 	beq.w	8007246 <HAL_I2C_EV_IRQHandler+0x2d6>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	0a5b      	lsrs	r3, r3, #9
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 80cf 	beq.w	8007246 <HAL_I2C_EV_IRQHandler+0x2d6>
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b21      	cmp	r3, #33	; 0x21
 80070ac:	d103      	bne.n	80070b6 <HAL_I2C_EV_IRQHandler+0x146>
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fa7a 	bl	80075a8 <I2C_MasterTransmit_BTF>
 80070b4:	e0c7      	b.n	8007246 <HAL_I2C_EV_IRQHandler+0x2d6>
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	2b40      	cmp	r3, #64	; 0x40
 80070ba:	f040 80c4 	bne.w	8007246 <HAL_I2C_EV_IRQHandler+0x2d6>
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fae8 	bl	8007694 <I2C_MemoryTransmit_TXE_BTF>
 80070c4:	e0bf      	b.n	8007246 <HAL_I2C_EV_IRQHandler+0x2d6>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070d4:	f000 80b7 	beq.w	8007246 <HAL_I2C_EV_IRQHandler+0x2d6>
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	099b      	lsrs	r3, r3, #6
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00f      	beq.n	8007104 <HAL_I2C_EV_IRQHandler+0x194>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	0a9b      	lsrs	r3, r3, #10
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d009      	beq.n	8007104 <HAL_I2C_EV_IRQHandler+0x194>
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	089b      	lsrs	r3, r3, #2
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d103      	bne.n	8007104 <HAL_I2C_EV_IRQHandler+0x194>
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fb5d 	bl	80077bc <I2C_MasterReceive_RXNE>
 8007102:	e011      	b.n	8007128 <HAL_I2C_EV_IRQHandler+0x1b8>
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	089b      	lsrs	r3, r3, #2
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 809a 	beq.w	8007246 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	0a5b      	lsrs	r3, r3, #9
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 8093 	beq.w	8007246 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fc06 	bl	8007932 <I2C_MasterReceive_BTF>
 8007126:	e08e      	b.n	8007246 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007128:	e08d      	b.n	8007246 <HAL_I2C_EV_IRQHandler+0x2d6>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d004      	beq.n	800713c <HAL_I2C_EV_IRQHandler+0x1cc>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	61fb      	str	r3, [r7, #28]
 800713a:	e007      	b.n	800714c <HAL_I2C_EV_IRQHandler+0x1dc>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	61bb      	str	r3, [r7, #24]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	61fb      	str	r3, [r7, #28]
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	085b      	lsrs	r3, r3, #1
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d012      	beq.n	800717e <HAL_I2C_EV_IRQHandler+0x20e>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	0a5b      	lsrs	r3, r3, #9
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00c      	beq.n	800717e <HAL_I2C_EV_IRQHandler+0x20e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_I2C_EV_IRQHandler+0x204>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	61bb      	str	r3, [r7, #24]
 8007174:	69b9      	ldr	r1, [r7, #24]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 ffc4 	bl	8008104 <I2C_Slave_ADDR>
 800717c:	e066      	b.n	800724c <HAL_I2C_EV_IRQHandler+0x2dc>
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	091b      	lsrs	r3, r3, #4
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d009      	beq.n	800719e <HAL_I2C_EV_IRQHandler+0x22e>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	0a5b      	lsrs	r3, r3, #9
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_I2C_EV_IRQHandler+0x22e>
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fffe 	bl	8008198 <I2C_Slave_STOPF>
 800719c:	e056      	b.n	800724c <HAL_I2C_EV_IRQHandler+0x2dc>
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	2b21      	cmp	r3, #33	; 0x21
 80071a2:	d002      	beq.n	80071aa <HAL_I2C_EV_IRQHandler+0x23a>
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	2b29      	cmp	r3, #41	; 0x29
 80071a8:	d125      	bne.n	80071f6 <HAL_I2C_EV_IRQHandler+0x286>
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	09db      	lsrs	r3, r3, #7
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00f      	beq.n	80071d6 <HAL_I2C_EV_IRQHandler+0x266>
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	0a9b      	lsrs	r3, r3, #10
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <HAL_I2C_EV_IRQHandler+0x266>
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	089b      	lsrs	r3, r3, #2
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d103      	bne.n	80071d6 <HAL_I2C_EV_IRQHandler+0x266>
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 feda 	bl	8007f88 <I2C_SlaveTransmit_TXE>
 80071d4:	e039      	b.n	800724a <HAL_I2C_EV_IRQHandler+0x2da>
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	089b      	lsrs	r3, r3, #2
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d033      	beq.n	800724a <HAL_I2C_EV_IRQHandler+0x2da>
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	0a5b      	lsrs	r3, r3, #9
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d02d      	beq.n	800724a <HAL_I2C_EV_IRQHandler+0x2da>
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 ff07 	bl	8008002 <I2C_SlaveTransmit_BTF>
 80071f4:	e029      	b.n	800724a <HAL_I2C_EV_IRQHandler+0x2da>
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	099b      	lsrs	r3, r3, #6
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00f      	beq.n	8007222 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	0a9b      	lsrs	r3, r3, #10
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d009      	beq.n	8007222 <HAL_I2C_EV_IRQHandler+0x2b2>
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	089b      	lsrs	r3, r3, #2
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <HAL_I2C_EV_IRQHandler+0x2b2>
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 ff12 	bl	8008044 <I2C_SlaveReceive_RXNE>
 8007220:	e014      	b.n	800724c <HAL_I2C_EV_IRQHandler+0x2dc>
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	089b      	lsrs	r3, r3, #2
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00e      	beq.n	800724c <HAL_I2C_EV_IRQHandler+0x2dc>
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	0a5b      	lsrs	r3, r3, #9
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d008      	beq.n	800724c <HAL_I2C_EV_IRQHandler+0x2dc>
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 ff40 	bl	80080c0 <I2C_SlaveReceive_BTF>
 8007240:	e004      	b.n	800724c <HAL_I2C_EV_IRQHandler+0x2dc>
 8007242:	bf00      	nop
 8007244:	e002      	b.n	800724c <HAL_I2C_EV_IRQHandler+0x2dc>
 8007246:	bf00      	nop
 8007248:	e000      	b.n	800724c <HAL_I2C_EV_IRQHandler+0x2dc>
 800724a:	bf00      	nop
 800724c:	3720      	adds	r7, #32
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_I2C_ER_IRQHandler>:
 8007252:	b580      	push	{r7, lr}
 8007254:	b08a      	sub	sp, #40	; 0x28
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	623b      	str	r3, [r7, #32]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	61fb      	str	r3, [r7, #28]
 800726a:	2300      	movs	r3, #0
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007274:	76fb      	strb	r3, [r7, #27]
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	0a1b      	lsrs	r3, r3, #8
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00e      	beq.n	80072a0 <HAL_I2C_ER_IRQHandler+0x4e>
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	0a1b      	lsrs	r3, r3, #8
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b00      	cmp	r3, #0
 800728c:	d008      	beq.n	80072a0 <HAL_I2C_ER_IRQHandler+0x4e>
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	f043 0301 	orr.w	r3, r3, #1
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800729e:	615a      	str	r2, [r3, #20]
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	0a5b      	lsrs	r3, r3, #9
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00e      	beq.n	80072ca <HAL_I2C_ER_IRQHandler+0x78>
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	0a1b      	lsrs	r3, r3, #8
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d008      	beq.n	80072ca <HAL_I2C_ER_IRQHandler+0x78>
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	f043 0302 	orr.w	r3, r3, #2
 80072be:	627b      	str	r3, [r7, #36]	; 0x24
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80072c8:	615a      	str	r2, [r3, #20]
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	0a9b      	lsrs	r3, r3, #10
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d03f      	beq.n	8007356 <HAL_I2C_ER_IRQHandler+0x104>
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	0a1b      	lsrs	r3, r3, #8
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d039      	beq.n	8007356 <HAL_I2C_ER_IRQHandler+0x104>
 80072e2:	7efb      	ldrb	r3, [r7, #27]
 80072e4:	76bb      	strb	r3, [r7, #26]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	617b      	str	r3, [r7, #20]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f4:	74fb      	strb	r3, [r7, #19]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	7ebb      	ldrb	r3, [r7, #26]
 80072fe:	2b20      	cmp	r3, #32
 8007300:	d112      	bne.n	8007328 <HAL_I2C_ER_IRQHandler+0xd6>
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10f      	bne.n	8007328 <HAL_I2C_ER_IRQHandler+0xd6>
 8007308:	7cfb      	ldrb	r3, [r7, #19]
 800730a:	2b21      	cmp	r3, #33	; 0x21
 800730c:	d008      	beq.n	8007320 <HAL_I2C_ER_IRQHandler+0xce>
 800730e:	7cfb      	ldrb	r3, [r7, #19]
 8007310:	2b29      	cmp	r3, #41	; 0x29
 8007312:	d005      	beq.n	8007320 <HAL_I2C_ER_IRQHandler+0xce>
 8007314:	7cfb      	ldrb	r3, [r7, #19]
 8007316:	2b28      	cmp	r3, #40	; 0x28
 8007318:	d106      	bne.n	8007328 <HAL_I2C_ER_IRQHandler+0xd6>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b21      	cmp	r3, #33	; 0x21
 800731e:	d103      	bne.n	8007328 <HAL_I2C_ER_IRQHandler+0xd6>
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 f869 	bl	80083f8 <I2C_Slave_AF>
 8007326:	e016      	b.n	8007356 <HAL_I2C_ER_IRQHandler+0x104>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007330:	615a      	str	r2, [r3, #20]
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	f043 0304 	orr.w	r3, r3, #4
 8007338:	627b      	str	r3, [r7, #36]	; 0x24
 800733a:	7efb      	ldrb	r3, [r7, #27]
 800733c:	2b10      	cmp	r3, #16
 800733e:	d002      	beq.n	8007346 <HAL_I2C_ER_IRQHandler+0xf4>
 8007340:	7efb      	ldrb	r3, [r7, #27]
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d107      	bne.n	8007356 <HAL_I2C_ER_IRQHandler+0x104>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	0adb      	lsrs	r3, r3, #11
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00e      	beq.n	8007380 <HAL_I2C_ER_IRQHandler+0x12e>
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	0a1b      	lsrs	r3, r3, #8
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d008      	beq.n	8007380 <HAL_I2C_ER_IRQHandler+0x12e>
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	f043 0308 	orr.w	r3, r3, #8
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800737e:	615a      	str	r2, [r3, #20]
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	2b00      	cmp	r3, #0
 8007384:	d008      	beq.n	8007398 <HAL_I2C_ER_IRQHandler+0x146>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	641a      	str	r2, [r3, #64]	; 0x40
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 f8a0 	bl	80084d8 <I2C_ITError>
 8007398:	bf00      	nop
 800739a:	3728      	adds	r7, #40	; 0x28
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_I2C_MasterTxCpltCallback>:
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_I2C_MasterRxCpltCallback>:
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_I2C_SlaveTxCpltCallback>:
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_I2C_SlaveRxCpltCallback>:
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_I2C_AddrCallback>:
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
 80073fc:	4613      	mov	r3, r2
 80073fe:	803b      	strh	r3, [r7, #0]
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_I2C_ListenCpltCallback>:
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_I2C_MemTxCpltCallback>:
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_I2C_MemRxCpltCallback>:
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_I2C_ErrorCallback>:
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_I2C_AbortCpltCallback>:
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <I2C_MasterTransmit_TXE>:
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800747e:	73fb      	strb	r3, [r7, #15]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007486:	73bb      	strb	r3, [r7, #14]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	60bb      	str	r3, [r7, #8]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007492:	2b00      	cmp	r3, #0
 8007494:	d150      	bne.n	8007538 <I2C_MasterTransmit_TXE+0xc8>
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	2b21      	cmp	r3, #33	; 0x21
 800749a:	d14d      	bne.n	8007538 <I2C_MasterTransmit_TXE+0xc8>
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b08      	cmp	r3, #8
 80074a0:	d01d      	beq.n	80074de <I2C_MasterTransmit_TXE+0x6e>
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	d01a      	beq.n	80074de <I2C_MasterTransmit_TXE+0x6e>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074ae:	d016      	beq.n	80074de <I2C_MasterTransmit_TXE+0x6e>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074be:	605a      	str	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2211      	movs	r2, #17
 80074c4:	631a      	str	r2, [r3, #48]	; 0x30
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2220      	movs	r2, #32
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff ff62 	bl	80073a0 <HAL_I2C_MasterTxCpltCallback>
 80074dc:	e060      	b.n	80075a0 <I2C_MasterTransmit_TXE+0x130>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074ec:	605a      	str	r2, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	631a      	str	r2, [r3, #48]	; 0x30
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2220      	movs	r2, #32
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b40      	cmp	r3, #64	; 0x40
 8007516:	d107      	bne.n	8007528 <I2C_MasterTransmit_TXE+0xb8>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff ff7d 	bl	8007420 <HAL_I2C_MemTxCpltCallback>
 8007526:	e03b      	b.n	80075a0 <I2C_MasterTransmit_TXE+0x130>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7ff ff35 	bl	80073a0 <HAL_I2C_MasterTxCpltCallback>
 8007536:	e033      	b.n	80075a0 <I2C_MasterTransmit_TXE+0x130>
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b21      	cmp	r3, #33	; 0x21
 800753c:	d005      	beq.n	800754a <I2C_MasterTransmit_TXE+0xda>
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b40      	cmp	r3, #64	; 0x40
 8007542:	d12d      	bne.n	80075a0 <I2C_MasterTransmit_TXE+0x130>
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	2b22      	cmp	r3, #34	; 0x22
 8007548:	d12a      	bne.n	80075a0 <I2C_MasterTransmit_TXE+0x130>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754e:	b29b      	uxth	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d108      	bne.n	8007566 <I2C_MasterTransmit_TXE+0xf6>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007562:	605a      	str	r2, [r3, #4]
 8007564:	e01c      	b.n	80075a0 <I2C_MasterTransmit_TXE+0x130>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b40      	cmp	r3, #64	; 0x40
 8007570:	d103      	bne.n	800757a <I2C_MasterTransmit_TXE+0x10a>
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f88e 	bl	8007694 <I2C_MemoryTransmit_TXE_BTF>
 8007578:	e012      	b.n	80075a0 <I2C_MasterTransmit_TXE+0x130>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	781a      	ldrb	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	611a      	str	r2, [r3, #16]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	625a      	str	r2, [r3, #36]	; 0x24
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007594:	b29b      	uxth	r3, r3
 8007596:	3b01      	subs	r3, #1
 8007598:	b29a      	uxth	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800759e:	e7ff      	b.n	80075a0 <I2C_MasterTransmit_TXE+0x130>
 80075a0:	bf00      	nop
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <I2C_MasterTransmit_BTF>:
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b21      	cmp	r3, #33	; 0x21
 80075c0:	d164      	bne.n	800768c <I2C_MasterTransmit_BTF+0xe4>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d012      	beq.n	80075f2 <I2C_MasterTransmit_BTF+0x4a>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d0:	781a      	ldrb	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	611a      	str	r2, [r3, #16]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	625a      	str	r2, [r3, #36]	; 0x24
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075f0:	e04c      	b.n	800768c <I2C_MasterTransmit_BTF+0xe4>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d01d      	beq.n	8007634 <I2C_MasterTransmit_BTF+0x8c>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	d01a      	beq.n	8007634 <I2C_MasterTransmit_BTF+0x8c>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007604:	d016      	beq.n	8007634 <I2C_MasterTransmit_BTF+0x8c>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007614:	605a      	str	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2211      	movs	r2, #17
 800761a:	631a      	str	r2, [r3, #48]	; 0x30
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7ff feb7 	bl	80073a0 <HAL_I2C_MasterTxCpltCallback>
 8007632:	e02b      	b.n	800768c <I2C_MasterTransmit_BTF+0xe4>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007642:	605a      	str	r2, [r3, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	631a      	str	r2, [r3, #48]	; 0x30
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b40      	cmp	r3, #64	; 0x40
 800766c:	d107      	bne.n	800767e <I2C_MasterTransmit_BTF+0xd6>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff fed2 	bl	8007420 <HAL_I2C_MemTxCpltCallback>
 800767c:	e006      	b.n	800768c <I2C_MasterTransmit_BTF+0xe4>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff fe8a 	bl	80073a0 <HAL_I2C_MasterTxCpltCallback>
 800768c:	bf00      	nop
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <I2C_MemoryTransmit_TXE_BTF>:
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a2:	73fb      	strb	r3, [r7, #15]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d11d      	bne.n	80076e8 <I2C_MemoryTransmit_TXE_BTF+0x54>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d10b      	bne.n	80076cc <I2C_MemoryTransmit_TXE_BTF+0x38>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	611a      	str	r2, [r3, #16]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c4:	1c9a      	adds	r2, r3, #2
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	651a      	str	r2, [r3, #80]	; 0x50
 80076ca:	e073      	b.n	80077b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	121b      	asrs	r3, r3, #8
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	611a      	str	r2, [r3, #16]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	651a      	str	r2, [r3, #80]	; 0x50
 80076e6:	e065      	b.n	80077b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d10b      	bne.n	8007708 <I2C_MemoryTransmit_TXE_BTF+0x74>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	611a      	str	r2, [r3, #16]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	651a      	str	r2, [r3, #80]	; 0x50
 8007706:	e055      	b.n	80077b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800770c:	2b02      	cmp	r3, #2
 800770e:	d151      	bne.n	80077b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	2b22      	cmp	r3, #34	; 0x22
 8007714:	d10d      	bne.n	8007732 <I2C_MemoryTransmit_TXE_BTF+0x9e>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	651a      	str	r2, [r3, #80]	; 0x50
 8007730:	e040      	b.n	80077b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007736:	b29b      	uxth	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d015      	beq.n	8007768 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	2b21      	cmp	r3, #33	; 0x21
 8007740:	d112      	bne.n	8007768 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	781a      	ldrb	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	611a      	str	r2, [r3, #16]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	625a      	str	r2, [r3, #36]	; 0x24
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007766:	e025      	b.n	80077b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776c:	b29b      	uxth	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d120      	bne.n	80077b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007772:	7bfb      	ldrb	r3, [r7, #15]
 8007774:	2b21      	cmp	r3, #33	; 0x21
 8007776:	d11d      	bne.n	80077b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007786:	605a      	str	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	631a      	str	r2, [r3, #48]	; 0x30
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7ff fe36 	bl	8007420 <HAL_I2C_MemTxCpltCallback>
 80077b4:	bf00      	nop
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <I2C_MasterReceive_RXNE>:
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b22      	cmp	r3, #34	; 0x22
 80077ce:	f040 80ac 	bne.w	800792a <I2C_MasterReceive_RXNE+0x16e>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d921      	bls.n	8007824 <I2C_MasterReceive_RXNE+0x68>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691a      	ldr	r2, [r3, #16]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	625a      	str	r2, [r3, #36]	; 0x24
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	3b01      	subs	r3, #1
 8007800:	b29a      	uxth	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780a:	b29b      	uxth	r3, r3
 800780c:	2b03      	cmp	r3, #3
 800780e:	f040 808c 	bne.w	800792a <I2C_MasterReceive_RXNE+0x16e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007820:	605a      	str	r2, [r3, #4]
 8007822:	e082      	b.n	800792a <I2C_MasterReceive_RXNE+0x16e>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007828:	2b02      	cmp	r3, #2
 800782a:	d075      	beq.n	8007918 <I2C_MasterReceive_RXNE+0x15c>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d002      	beq.n	8007838 <I2C_MasterReceive_RXNE+0x7c>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d16f      	bne.n	8007918 <I2C_MasterReceive_RXNE+0x15c>
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f001 fa15 	bl	8008c68 <I2C_WaitOnSTOPRequestThroughIT>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d142      	bne.n	80078ca <I2C_MasterReceive_RXNE+0x10e>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007862:	605a      	str	r2, [r3, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	691a      	ldr	r2, [r3, #16]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	b2d2      	uxtb	r2, r2
 8007870:	701a      	strb	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	625a      	str	r2, [r3, #36]	; 0x24
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	855a      	strh	r2, [r3, #42]	; 0x2a
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2220      	movs	r2, #32
 800788e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b40      	cmp	r3, #64	; 0x40
 800789c:	d10a      	bne.n	80078b4 <I2C_MasterReceive_RXNE+0xf8>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	631a      	str	r2, [r3, #48]	; 0x30
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7ff fdc1 	bl	8007434 <HAL_I2C_MemRxCpltCallback>
 80078b2:	e03a      	b.n	800792a <I2C_MasterReceive_RXNE+0x16e>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2212      	movs	r2, #18
 80078c0:	631a      	str	r2, [r3, #48]	; 0x30
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff fd76 	bl	80073b4 <HAL_I2C_MasterRxCpltCallback>
 80078c8:	e02f      	b.n	800792a <I2C_MasterReceive_RXNE+0x16e>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078d8:	605a      	str	r2, [r3, #4]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	691a      	ldr	r2, [r3, #16]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e4:	b2d2      	uxtb	r2, r2
 80078e6:	701a      	strb	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	625a      	str	r2, [r3, #36]	; 0x24
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	3b01      	subs	r3, #1
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7ff fd99 	bl	8007448 <HAL_I2C_ErrorCallback>
 8007916:	e008      	b.n	800792a <I2C_MasterReceive_RXNE+0x16e>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007926:	605a      	str	r2, [r3, #4]
 8007928:	e7ff      	b.n	800792a <I2C_MasterReceive_RXNE+0x16e>
 800792a:	bf00      	nop
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <I2C_MasterReceive_BTF>:
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007944:	b29b      	uxth	r3, r3
 8007946:	2b04      	cmp	r3, #4
 8007948:	d11b      	bne.n	8007982 <I2C_MasterReceive_BTF+0x50>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007958:	605a      	str	r2, [r3, #4]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	691a      	ldr	r2, [r3, #16]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	b2d2      	uxtb	r2, r2
 8007966:	701a      	strb	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	625a      	str	r2, [r3, #36]	; 0x24
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007976:	b29b      	uxth	r3, r3
 8007978:	3b01      	subs	r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007980:	e0bd      	b.n	8007afe <I2C_MasterReceive_BTF+0x1cc>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007986:	b29b      	uxth	r3, r3
 8007988:	2b03      	cmp	r3, #3
 800798a:	d129      	bne.n	80079e0 <I2C_MasterReceive_BTF+0xae>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800799a:	605a      	str	r2, [r3, #4]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d00a      	beq.n	80079b8 <I2C_MasterReceive_BTF+0x86>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d007      	beq.n	80079b8 <I2C_MasterReceive_BTF+0x86>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	691a      	ldr	r2, [r3, #16]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	625a      	str	r2, [r3, #36]	; 0x24
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079de:	e08e      	b.n	8007afe <I2C_MasterReceive_BTF+0x1cc>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d176      	bne.n	8007ad8 <I2C_MasterReceive_BTF+0x1a6>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d002      	beq.n	80079f6 <I2C_MasterReceive_BTF+0xc4>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b10      	cmp	r3, #16
 80079f4:	d108      	bne.n	8007a08 <I2C_MasterReceive_BTF+0xd6>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	e019      	b.n	8007a3c <I2C_MasterReceive_BTF+0x10a>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d002      	beq.n	8007a14 <I2C_MasterReceive_BTF+0xe2>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d108      	bne.n	8007a26 <I2C_MasterReceive_BTF+0xf4>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e00a      	b.n	8007a3c <I2C_MasterReceive_BTF+0x10a>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b10      	cmp	r3, #16
 8007a2a:	d007      	beq.n	8007a3c <I2C_MasterReceive_BTF+0x10a>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	691a      	ldr	r2, [r3, #16]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a46:	b2d2      	uxtb	r2, r2
 8007a48:	701a      	strb	r2, [r3, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	625a      	str	r2, [r3, #36]	; 0x24
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	691a      	ldr	r2, [r3, #16]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	b2d2      	uxtb	r2, r2
 8007a6e:	701a      	strb	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	625a      	str	r2, [r3, #36]	; 0x24
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	3b01      	subs	r3, #1
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007a96:	605a      	str	r2, [r3, #4]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b40      	cmp	r3, #64	; 0x40
 8007aaa:	d10a      	bne.n	8007ac2 <I2C_MasterReceive_BTF+0x190>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	631a      	str	r2, [r3, #48]	; 0x30
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff fcba 	bl	8007434 <HAL_I2C_MemRxCpltCallback>
 8007ac0:	e01d      	b.n	8007afe <I2C_MasterReceive_BTF+0x1cc>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2212      	movs	r2, #18
 8007ace:	631a      	str	r2, [r3, #48]	; 0x30
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff fc6f 	bl	80073b4 <HAL_I2C_MasterRxCpltCallback>
 8007ad6:	e012      	b.n	8007afe <I2C_MasterReceive_BTF+0x1cc>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	691a      	ldr	r2, [r3, #16]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	701a      	strb	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	625a      	str	r2, [r3, #36]	; 0x24
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007afe:	bf00      	nop
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <I2C_Master_SB>:
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b40      	cmp	r3, #64	; 0x40
 8007b18:	d117      	bne.n	8007b4a <I2C_Master_SB+0x44>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <I2C_Master_SB+0x30>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	461a      	mov	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b32:	611a      	str	r2, [r3, #16]
 8007b34:	e067      	b.n	8007c06 <I2C_Master_SB+0x100>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	f043 0301 	orr.w	r3, r3, #1
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	611a      	str	r2, [r3, #16]
 8007b48:	e05d      	b.n	8007c06 <I2C_Master_SB+0x100>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b52:	d133      	bne.n	8007bbc <I2C_Master_SB+0xb6>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b21      	cmp	r3, #33	; 0x21
 8007b5e:	d109      	bne.n	8007b74 <I2C_Master_SB+0x6e>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	461a      	mov	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b70:	611a      	str	r2, [r3, #16]
 8007b72:	e008      	b.n	8007b86 <I2C_Master_SB+0x80>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	f043 0301 	orr.w	r3, r3, #1
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	611a      	str	r2, [r3, #16]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d004      	beq.n	8007b98 <I2C_Master_SB+0x92>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d108      	bne.n	8007baa <I2C_Master_SB+0xa4>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d032      	beq.n	8007c06 <I2C_Master_SB+0x100>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d02d      	beq.n	8007c06 <I2C_Master_SB+0x100>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bb8:	605a      	str	r2, [r3, #4]
 8007bba:	e024      	b.n	8007c06 <I2C_Master_SB+0x100>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10e      	bne.n	8007be2 <I2C_Master_SB+0xdc>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	11db      	asrs	r3, r3, #7
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	f003 0306 	and.w	r3, r3, #6
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	f063 030f 	orn	r3, r3, #15
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	611a      	str	r2, [r3, #16]
 8007be0:	e011      	b.n	8007c06 <I2C_Master_SB+0x100>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d10d      	bne.n	8007c06 <I2C_Master_SB+0x100>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	11db      	asrs	r3, r3, #7
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	f003 0306 	and.w	r3, r3, #6
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	f063 030e 	orn	r3, r3, #14
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	611a      	str	r2, [r3, #16]
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <I2C_Master_ADD10>:
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	611a      	str	r2, [r3, #16]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d004      	beq.n	8007c38 <I2C_Master_ADD10+0x26>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d108      	bne.n	8007c4a <I2C_Master_ADD10+0x38>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00c      	beq.n	8007c5a <I2C_Master_ADD10+0x48>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d007      	beq.n	8007c5a <I2C_Master_ADD10+0x48>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c58:	605a      	str	r2, [r3, #4]
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <I2C_Master_ADDR>:
 8007c66:	b480      	push	{r7}
 8007c68:	b091      	sub	sp, #68	; 0x44
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b22      	cmp	r3, #34	; 0x22
 8007c8e:	f040 8169 	bne.w	8007f64 <I2C_Master_ADDR+0x2fe>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10f      	bne.n	8007cba <I2C_Master_ADDR+0x54>
 8007c9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007c9e:	2b40      	cmp	r3, #64	; 0x40
 8007ca0:	d10b      	bne.n	8007cba <I2C_Master_ADDR+0x54>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	633b      	str	r3, [r7, #48]	; 0x30
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb8:	e160      	b.n	8007f7c <I2C_Master_ADDR+0x316>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d11d      	bne.n	8007cfe <I2C_Master_ADDR+0x98>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007cca:	d118      	bne.n	8007cfe <I2C_Master_ADDR+0x98>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	651a      	str	r2, [r3, #80]	; 0x50
 8007cfc:	e13e      	b.n	8007f7c <I2C_Master_ADDR+0x316>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d113      	bne.n	8007d30 <I2C_Master_ADDR+0xca>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	e115      	b.n	8007f5c <I2C_Master_ADDR+0x2f6>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	f040 808a 	bne.w	8007e50 <I2C_Master_ADDR+0x1ea>
 8007d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d42:	d137      	bne.n	8007db4 <I2C_Master_ADDR+0x14e>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d62:	d113      	bne.n	8007d8c <I2C_Master_ADDR+0x126>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	2300      	movs	r3, #0
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	e0e7      	b.n	8007f5c <I2C_Master_ADDR+0x2f6>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	623b      	str	r3, [r7, #32]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	623b      	str	r3, [r7, #32]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	623b      	str	r3, [r7, #32]
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	e0d3      	b.n	8007f5c <I2C_Master_ADDR+0x2f6>
 8007db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db6:	2b08      	cmp	r3, #8
 8007db8:	d02e      	beq.n	8007e18 <I2C_Master_ADDR+0x1b2>
 8007dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbc:	2b20      	cmp	r3, #32
 8007dbe:	d02b      	beq.n	8007e18 <I2C_Master_ADDR+0x1b2>
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc2:	2b12      	cmp	r3, #18
 8007dc4:	d102      	bne.n	8007dcc <I2C_Master_ADDR+0x166>
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d125      	bne.n	8007e18 <I2C_Master_ADDR+0x1b2>
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d00e      	beq.n	8007df0 <I2C_Master_ADDR+0x18a>
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d00b      	beq.n	8007df0 <I2C_Master_ADDR+0x18a>
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	2b10      	cmp	r3, #16
 8007ddc:	d008      	beq.n	8007df0 <I2C_Master_ADDR+0x18a>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	e007      	b.n	8007e00 <I2C_Master_ADDR+0x19a>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	2300      	movs	r3, #0
 8007e02:	61fb      	str	r3, [r7, #28]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	61fb      	str	r3, [r7, #28]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	61fb      	str	r3, [r7, #28]
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	e0a1      	b.n	8007f5c <I2C_Master_ADDR+0x2f6>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	61bb      	str	r3, [r7, #24]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	61bb      	str	r3, [r7, #24]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	61bb      	str	r3, [r7, #24]
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	e085      	b.n	8007f5c <I2C_Master_ADDR+0x2f6>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d14d      	bne.n	8007ef6 <I2C_Master_ADDR+0x290>
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d016      	beq.n	8007e8e <I2C_Master_ADDR+0x228>
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d013      	beq.n	8007e8e <I2C_Master_ADDR+0x228>
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	2b10      	cmp	r3, #16
 8007e6a:	d010      	beq.n	8007e8e <I2C_Master_ADDR+0x228>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	e007      	b.n	8007e9e <I2C_Master_ADDR+0x238>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eac:	d117      	bne.n	8007ede <I2C_Master_ADDR+0x278>
 8007eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007eb4:	d00b      	beq.n	8007ece <I2C_Master_ADDR+0x268>
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d008      	beq.n	8007ece <I2C_Master_ADDR+0x268>
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebe:	2b08      	cmp	r3, #8
 8007ec0:	d005      	beq.n	8007ece <I2C_Master_ADDR+0x268>
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	2b10      	cmp	r3, #16
 8007ec6:	d002      	beq.n	8007ece <I2C_Master_ADDR+0x268>
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	2b20      	cmp	r3, #32
 8007ecc:	d107      	bne.n	8007ede <I2C_Master_ADDR+0x278>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007edc:	605a      	str	r2, [r3, #4]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	617b      	str	r3, [r7, #20]
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	e032      	b.n	8007f5c <I2C_Master_ADDR+0x2f6>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f14:	d117      	bne.n	8007f46 <I2C_Master_ADDR+0x2e0>
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f1c:	d00b      	beq.n	8007f36 <I2C_Master_ADDR+0x2d0>
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d008      	beq.n	8007f36 <I2C_Master_ADDR+0x2d0>
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	2b08      	cmp	r3, #8
 8007f28:	d005      	beq.n	8007f36 <I2C_Master_ADDR+0x2d0>
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2c:	2b10      	cmp	r3, #16
 8007f2e:	d002      	beq.n	8007f36 <I2C_Master_ADDR+0x2d0>
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	2b20      	cmp	r3, #32
 8007f34:	d107      	bne.n	8007f46 <I2C_Master_ADDR+0x2e0>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f44:	605a      	str	r2, [r3, #4]
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	613b      	str	r3, [r7, #16]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	613b      	str	r3, [r7, #16]
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	651a      	str	r2, [r3, #80]	; 0x50
 8007f62:	e00b      	b.n	8007f7c <I2C_Master_ADDR+0x316>
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	e7ff      	b.n	8007f7c <I2C_Master_ADDR+0x316>
 8007f7c:	bf00      	nop
 8007f7e:	3744      	adds	r7, #68	; 0x44
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <I2C_SlaveTransmit_TXE>:
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f96:	73fb      	strb	r3, [r7, #15]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d02b      	beq.n	8007ffa <I2C_SlaveTransmit_TXE+0x72>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	781a      	ldrb	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	611a      	str	r2, [r3, #16]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	625a      	str	r2, [r3, #36]	; 0x24
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d114      	bne.n	8007ffa <I2C_SlaveTransmit_TXE+0x72>
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	2b29      	cmp	r3, #41	; 0x29
 8007fd4:	d111      	bne.n	8007ffa <I2C_SlaveTransmit_TXE+0x72>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fe4:	605a      	str	r2, [r3, #4]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2221      	movs	r2, #33	; 0x21
 8007fea:	631a      	str	r2, [r3, #48]	; 0x30
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2228      	movs	r2, #40	; 0x28
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7ff f9e7 	bl	80073c8 <HAL_I2C_SlaveTxCpltCallback>
 8007ffa:	bf00      	nop
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <I2C_SlaveTransmit_BTF>:
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d011      	beq.n	8008038 <I2C_SlaveTransmit_BTF+0x36>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	781a      	ldrb	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	611a      	str	r2, [r3, #16]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	625a      	str	r2, [r3, #36]	; 0x24
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800802e:	b29b      	uxth	r3, r3
 8008030:	3b01      	subs	r3, #1
 8008032:	b29a      	uxth	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <I2C_SlaveReceive_RXNE>:
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008052:	73fb      	strb	r3, [r7, #15]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008058:	b29b      	uxth	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d02c      	beq.n	80080b8 <I2C_SlaveReceive_RXNE+0x74>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	691a      	ldr	r2, [r3, #16]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	b2d2      	uxtb	r2, r2
 800806a:	701a      	strb	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	625a      	str	r2, [r3, #36]	; 0x24
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800807a:	b29b      	uxth	r3, r3
 800807c:	3b01      	subs	r3, #1
 800807e:	b29a      	uxth	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008088:	b29b      	uxth	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d114      	bne.n	80080b8 <I2C_SlaveReceive_RXNE+0x74>
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	2b2a      	cmp	r3, #42	; 0x2a
 8008092:	d111      	bne.n	80080b8 <I2C_SlaveReceive_RXNE+0x74>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080a2:	605a      	str	r2, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2222      	movs	r2, #34	; 0x22
 80080a8:	631a      	str	r2, [r3, #48]	; 0x30
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2228      	movs	r2, #40	; 0x28
 80080ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff f992 	bl	80073dc <HAL_I2C_SlaveRxCpltCallback>
 80080b8:	bf00      	nop
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <I2C_SlaveReceive_BTF>:
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d012      	beq.n	80080f8 <I2C_SlaveReceive_BTF+0x38>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	691a      	ldr	r2, [r3, #16]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	b2d2      	uxtb	r2, r2
 80080de:	701a      	strb	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	1c5a      	adds	r2, r3, #1
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	625a      	str	r2, [r3, #36]	; 0x24
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	3b01      	subs	r3, #1
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <I2C_Slave_ADDR>:
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008118:	b2db      	uxtb	r3, r3
 800811a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800811e:	2b28      	cmp	r3, #40	; 0x28
 8008120:	d127      	bne.n	8008172 <I2C_Slave_ADDR+0x6e>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008130:	605a      	str	r2, [r3, #4]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	089b      	lsrs	r3, r3, #2
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <I2C_Slave_ADDR+0x3e>
 800813e:	2301      	movs	r3, #1
 8008140:	73fb      	strb	r3, [r7, #15]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	09db      	lsrs	r3, r3, #7
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d103      	bne.n	8008156 <I2C_Slave_ADDR+0x52>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	81bb      	strh	r3, [r7, #12]
 8008154:	e002      	b.n	800815c <I2C_Slave_ADDR+0x58>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	699b      	ldr	r3, [r3, #24]
 800815a:	81bb      	strh	r3, [r7, #12]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008164:	89ba      	ldrh	r2, [r7, #12]
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7ff f940 	bl	80073f0 <HAL_I2C_AddrCallback>
 8008170:	e00e      	b.n	8008190 <I2C_Slave_ADDR+0x8c>
 8008172:	2300      	movs	r3, #0
 8008174:	60bb      	str	r3, [r7, #8]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	60bb      	str	r3, [r7, #8]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	60bb      	str	r3, [r7, #8]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008190:	bf00      	nop
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <I2C_Slave_STOPF>:
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a6:	73fb      	strb	r3, [r7, #15]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80081b6:	605a      	str	r2, [r3, #4]
 80081b8:	2300      	movs	r3, #0
 80081ba:	60bb      	str	r3, [r7, #8]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	60bb      	str	r3, [r7, #8]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0201 	orr.w	r2, r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f4:	d172      	bne.n	80082dc <I2C_Slave_STOPF+0x144>
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	2b22      	cmp	r3, #34	; 0x22
 80081fa:	d002      	beq.n	8008202 <I2C_Slave_STOPF+0x6a>
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008200:	d135      	bne.n	800826e <I2C_Slave_STOPF+0xd6>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	b29a      	uxth	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008214:	b29b      	uxth	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d005      	beq.n	8008226 <I2C_Slave_STOPF+0x8e>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	f043 0204 	orr.w	r2, r3, #4
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	641a      	str	r2, [r3, #64]	; 0x40
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008234:	605a      	str	r2, [r3, #4]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe f85a 	bl	80062f4 <HAL_DMA_GetState>
 8008240:	4603      	mov	r3, r0
 8008242:	2b01      	cmp	r3, #1
 8008244:	d049      	beq.n	80082da <I2C_Slave_STOPF+0x142>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824a:	4a69      	ldr	r2, [pc, #420]	; (80083f0 <I2C_Slave_STOPF+0x258>)
 800824c:	651a      	str	r2, [r3, #80]	; 0x50
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008252:	4618      	mov	r0, r3
 8008254:	f7fd fea2 	bl	8005f9c <HAL_DMA_Abort_IT>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d03d      	beq.n	80082da <I2C_Slave_STOPF+0x142>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008268:	4610      	mov	r0, r2
 800826a:	4798      	blx	r3
 800826c:	e035      	b.n	80082da <I2C_Slave_STOPF+0x142>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	b29a      	uxth	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008280:	b29b      	uxth	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d005      	beq.n	8008292 <I2C_Slave_STOPF+0xfa>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	f043 0204 	orr.w	r2, r3, #4
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	641a      	str	r2, [r3, #64]	; 0x40
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082a0:	605a      	str	r2, [r3, #4]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fe f824 	bl	80062f4 <HAL_DMA_GetState>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d014      	beq.n	80082dc <I2C_Slave_STOPF+0x144>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b6:	4a4e      	ldr	r2, [pc, #312]	; (80083f0 <I2C_Slave_STOPF+0x258>)
 80082b8:	651a      	str	r2, [r3, #80]	; 0x50
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fd fe6c 	bl	8005f9c <HAL_DMA_Abort_IT>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d008      	beq.n	80082dc <I2C_Slave_STOPF+0x144>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80082d4:	4610      	mov	r0, r2
 80082d6:	4798      	blx	r3
 80082d8:	e000      	b.n	80082dc <I2C_Slave_STOPF+0x144>
 80082da:	bf00      	nop
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d03e      	beq.n	8008364 <I2C_Slave_STOPF+0x1cc>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	d112      	bne.n	800831a <I2C_Slave_STOPF+0x182>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	691a      	ldr	r2, [r3, #16]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	b2d2      	uxtb	r2, r2
 8008300:	701a      	strb	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	625a      	str	r2, [r3, #36]	; 0x24
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008310:	b29b      	uxth	r3, r3
 8008312:	3b01      	subs	r3, #1
 8008314:	b29a      	uxth	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	855a      	strh	r2, [r3, #42]	; 0x2a
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008324:	2b40      	cmp	r3, #64	; 0x40
 8008326:	d112      	bne.n	800834e <I2C_Slave_STOPF+0x1b6>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	b2d2      	uxtb	r2, r2
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	625a      	str	r2, [r3, #36]	; 0x24
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008344:	b29b      	uxth	r3, r3
 8008346:	3b01      	subs	r3, #1
 8008348:	b29a      	uxth	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008352:	b29b      	uxth	r3, r3
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <I2C_Slave_STOPF+0x1cc>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835c:	f043 0204 	orr.w	r2, r3, #4
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	641a      	str	r2, [r3, #64]	; 0x40
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <I2C_Slave_STOPF+0x1dc>
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f8b3 	bl	80084d8 <I2C_ITError>
 8008372:	e039      	b.n	80083e8 <I2C_Slave_STOPF+0x250>
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	2b2a      	cmp	r3, #42	; 0x2a
 8008378:	d109      	bne.n	800838e <I2C_Slave_STOPF+0x1f6>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	631a      	str	r2, [r3, #48]	; 0x30
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2228      	movs	r2, #40	; 0x28
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff f827 	bl	80073dc <HAL_I2C_SlaveRxCpltCallback>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b28      	cmp	r3, #40	; 0x28
 8008398:	d111      	bne.n	80083be <I2C_Slave_STOPF+0x226>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a15      	ldr	r2, [pc, #84]	; (80083f4 <I2C_Slave_STOPF+0x25c>)
 800839e:	62da      	str	r2, [r3, #44]	; 0x2c
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	631a      	str	r2, [r3, #48]	; 0x30
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2220      	movs	r2, #32
 80083aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7ff f828 	bl	800740c <HAL_I2C_ListenCpltCallback>
 80083bc:	e014      	b.n	80083e8 <I2C_Slave_STOPF+0x250>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c2:	2b22      	cmp	r3, #34	; 0x22
 80083c4:	d002      	beq.n	80083cc <I2C_Slave_STOPF+0x234>
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	2b22      	cmp	r3, #34	; 0x22
 80083ca:	d10d      	bne.n	80083e8 <I2C_Slave_STOPF+0x250>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	631a      	str	r2, [r3, #48]	; 0x30
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2220      	movs	r2, #32
 80083d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7fe fffa 	bl	80073dc <HAL_I2C_SlaveRxCpltCallback>
 80083e8:	bf00      	nop
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	08008869 	.word	0x08008869
 80083f4:	ffff0000 	.word	0xffff0000

080083f8 <I2C_Slave_AF>:
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008406:	73fb      	strb	r3, [r7, #15]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	60bb      	str	r3, [r7, #8]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2b08      	cmp	r3, #8
 8008412:	d002      	beq.n	800841a <I2C_Slave_AF+0x22>
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b20      	cmp	r3, #32
 8008418:	d129      	bne.n	800846e <I2C_Slave_AF+0x76>
 800841a:	7bfb      	ldrb	r3, [r7, #15]
 800841c:	2b28      	cmp	r3, #40	; 0x28
 800841e:	d126      	bne.n	800846e <I2C_Slave_AF+0x76>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a2c      	ldr	r2, [pc, #176]	; (80084d4 <I2C_Slave_AF+0xdc>)
 8008424:	62da      	str	r2, [r3, #44]	; 0x2c
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008434:	605a      	str	r2, [r3, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800843e:	615a      	str	r2, [r3, #20]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	631a      	str	r2, [r3, #48]	; 0x30
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7fe ffd0 	bl	800740c <HAL_I2C_ListenCpltCallback>
 800846c:	e02e      	b.n	80084cc <I2C_Slave_AF+0xd4>
 800846e:	7bfb      	ldrb	r3, [r7, #15]
 8008470:	2b21      	cmp	r3, #33	; 0x21
 8008472:	d126      	bne.n	80084c2 <I2C_Slave_AF+0xca>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a17      	ldr	r2, [pc, #92]	; (80084d4 <I2C_Slave_AF+0xdc>)
 8008478:	62da      	str	r2, [r3, #44]	; 0x2c
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2221      	movs	r2, #33	; 0x21
 800847e:	631a      	str	r2, [r3, #48]	; 0x30
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2220      	movs	r2, #32
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800849e:	605a      	str	r2, [r3, #4]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084a8:	615a      	str	r2, [r3, #20]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7fe ff84 	bl	80073c8 <HAL_I2C_SlaveTxCpltCallback>
 80084c0:	e004      	b.n	80084cc <I2C_Slave_AF+0xd4>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084ca:	615a      	str	r2, [r3, #20]
 80084cc:	bf00      	nop
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	ffff0000 	.word	0xffff0000

080084d8 <I2C_ITError>:
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084e6:	73fb      	strb	r3, [r7, #15]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084ee:	73bb      	strb	r3, [r7, #14]
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
 80084f2:	2b10      	cmp	r3, #16
 80084f4:	d002      	beq.n	80084fc <I2C_ITError+0x24>
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	2b40      	cmp	r3, #64	; 0x40
 80084fa:	d10a      	bne.n	8008512 <I2C_ITError+0x3a>
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	2b22      	cmp	r3, #34	; 0x22
 8008500:	d107      	bne.n	8008512 <I2C_ITError+0x3a>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008518:	2b28      	cmp	r3, #40	; 0x28
 800851a:	d107      	bne.n	800852c <I2C_ITError+0x54>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	631a      	str	r2, [r3, #48]	; 0x30
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2228      	movs	r2, #40	; 0x28
 8008526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800852a:	e015      	b.n	8008558 <I2C_ITError+0x80>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800853a:	d00a      	beq.n	8008552 <I2C_ITError+0x7a>
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	2b60      	cmp	r3, #96	; 0x60
 8008540:	d007      	beq.n	8008552 <I2C_ITError+0x7a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2220      	movs	r2, #32
 8008546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	631a      	str	r2, [r3, #48]	; 0x30
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008566:	d162      	bne.n	800862e <I2C_ITError+0x156>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008576:	605a      	str	r2, [r3, #4]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b01      	cmp	r3, #1
 8008584:	d020      	beq.n	80085c8 <I2C_ITError+0xf0>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858a:	4a6a      	ldr	r2, [pc, #424]	; (8008734 <I2C_ITError+0x25c>)
 800858c:	651a      	str	r2, [r3, #80]	; 0x50
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008592:	4618      	mov	r0, r3
 8008594:	f7fd fd02 	bl	8005f9c <HAL_DMA_Abort_IT>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 8089 	beq.w	80086b2 <I2C_ITError+0x1da>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f022 0201 	bic.w	r2, r2, #1
 80085ae:	601a      	str	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2220      	movs	r2, #32
 80085b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80085c2:	4610      	mov	r0, r2
 80085c4:	4798      	blx	r3
 80085c6:	e074      	b.n	80086b2 <I2C_ITError+0x1da>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085cc:	4a59      	ldr	r2, [pc, #356]	; (8008734 <I2C_ITError+0x25c>)
 80085ce:	651a      	str	r2, [r3, #80]	; 0x50
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fd fce1 	bl	8005f9c <HAL_DMA_Abort_IT>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d068      	beq.n	80086b2 <I2C_ITError+0x1da>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ea:	2b40      	cmp	r3, #64	; 0x40
 80085ec:	d10b      	bne.n	8008606 <I2C_ITError+0x12e>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	691a      	ldr	r2, [r3, #16]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	b2d2      	uxtb	r2, r2
 80085fa:	701a      	strb	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	625a      	str	r2, [r3, #36]	; 0x24
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0201 	bic.w	r2, r2, #1
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2220      	movs	r2, #32
 800861a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
 800862c:	e041      	b.n	80086b2 <I2C_ITError+0x1da>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b60      	cmp	r3, #96	; 0x60
 8008638:	d125      	bne.n	8008686 <I2C_ITError+0x1ae>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2220      	movs	r2, #32
 800863e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	641a      	str	r2, [r3, #64]	; 0x40
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008652:	2b40      	cmp	r3, #64	; 0x40
 8008654:	d10b      	bne.n	800866e <I2C_ITError+0x196>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	691a      	ldr	r2, [r3, #16]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	701a      	strb	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	625a      	str	r2, [r3, #36]	; 0x24
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0201 	bic.w	r2, r2, #1
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7fe feec 	bl	800745c <HAL_I2C_AbortCpltCallback>
 8008684:	e015      	b.n	80086b2 <I2C_ITError+0x1da>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008690:	2b40      	cmp	r3, #64	; 0x40
 8008692:	d10b      	bne.n	80086ac <I2C_ITError+0x1d4>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	691a      	ldr	r2, [r3, #16]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869e:	b2d2      	uxtb	r2, r2
 80086a0:	701a      	strb	r2, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	1c5a      	adds	r2, r3, #1
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	625a      	str	r2, [r3, #36]	; 0x24
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7fe fecb 	bl	8007448 <HAL_I2C_ErrorCallback>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	60bb      	str	r3, [r7, #8]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10e      	bne.n	80086e0 <I2C_ITError+0x208>
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d109      	bne.n	80086e0 <I2C_ITError+0x208>
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f003 0304 	and.w	r3, r3, #4
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d104      	bne.n	80086e0 <I2C_ITError+0x208>
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	f003 0308 	and.w	r3, r3, #8
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d007      	beq.n	80086f0 <I2C_ITError+0x218>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80086ee:	605a      	str	r2, [r3, #4]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f6:	73fb      	strb	r3, [r7, #15]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b04      	cmp	r3, #4
 8008702:	d113      	bne.n	800872c <I2C_ITError+0x254>
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	2b28      	cmp	r3, #40	; 0x28
 8008708:	d110      	bne.n	800872c <I2C_ITError+0x254>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a0a      	ldr	r2, [pc, #40]	; (8008738 <I2C_ITError+0x260>)
 800870e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	631a      	str	r2, [r3, #48]	; 0x30
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2220      	movs	r2, #32
 800871a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7fe fe70 	bl	800740c <HAL_I2C_ListenCpltCallback>
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	08008869 	.word	0x08008869
 8008738:	ffff0000 	.word	0xffff0000

0800873c <I2C_RequestMemoryWrite>:
 800873c:	b580      	push	{r7, lr}
 800873e:	b088      	sub	sp, #32
 8008740:	af02      	add	r7, sp, #8
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	4608      	mov	r0, r1
 8008746:	4611      	mov	r1, r2
 8008748:	461a      	mov	r2, r3
 800874a:	4603      	mov	r3, r0
 800874c:	817b      	strh	r3, [r7, #10]
 800874e:	460b      	mov	r3, r1
 8008750:	813b      	strh	r3, [r7, #8]
 8008752:	4613      	mov	r3, r2
 8008754:	80fb      	strh	r3, [r7, #6]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	2200      	movs	r2, #0
 800876e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f000 f920 	bl	80089b8 <I2C_WaitOnFlagUntilTimeout>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00d      	beq.n	800879a <I2C_RequestMemoryWrite+0x5e>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800878c:	d103      	bne.n	8008796 <I2C_RequestMemoryWrite+0x5a>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008794:	641a      	str	r2, [r3, #64]	; 0x40
 8008796:	2303      	movs	r3, #3
 8008798:	e05f      	b.n	800885a <I2C_RequestMemoryWrite+0x11e>
 800879a:	897b      	ldrh	r3, [r7, #10]
 800879c:	b2db      	uxtb	r3, r3
 800879e:	461a      	mov	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80087a8:	611a      	str	r2, [r3, #16]
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	6a3a      	ldr	r2, [r7, #32]
 80087ae:	492d      	ldr	r1, [pc, #180]	; (8008864 <I2C_RequestMemoryWrite+0x128>)
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 f958 	bl	8008a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <I2C_RequestMemoryWrite+0x84>
 80087bc:	2301      	movs	r3, #1
 80087be:	e04c      	b.n	800885a <I2C_RequestMemoryWrite+0x11e>
 80087c0:	2300      	movs	r3, #0
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	617b      	str	r3, [r7, #20]
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d8:	6a39      	ldr	r1, [r7, #32]
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 f9c2 	bl	8008b64 <I2C_WaitOnTXEFlagUntilTimeout>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00d      	beq.n	8008802 <I2C_RequestMemoryWrite+0xc6>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	d107      	bne.n	80087fe <I2C_RequestMemoryWrite+0xc2>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	2301      	movs	r3, #1
 8008800:	e02b      	b.n	800885a <I2C_RequestMemoryWrite+0x11e>
 8008802:	88fb      	ldrh	r3, [r7, #6]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d105      	bne.n	8008814 <I2C_RequestMemoryWrite+0xd8>
 8008808:	893b      	ldrh	r3, [r7, #8]
 800880a:	b2da      	uxtb	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	611a      	str	r2, [r3, #16]
 8008812:	e021      	b.n	8008858 <I2C_RequestMemoryWrite+0x11c>
 8008814:	893b      	ldrh	r3, [r7, #8]
 8008816:	0a1b      	lsrs	r3, r3, #8
 8008818:	b29b      	uxth	r3, r3
 800881a:	b2da      	uxtb	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	611a      	str	r2, [r3, #16]
 8008822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008824:	6a39      	ldr	r1, [r7, #32]
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 f99c 	bl	8008b64 <I2C_WaitOnTXEFlagUntilTimeout>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00d      	beq.n	800884e <I2C_RequestMemoryWrite+0x112>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008836:	2b04      	cmp	r3, #4
 8008838:	d107      	bne.n	800884a <I2C_RequestMemoryWrite+0x10e>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	2301      	movs	r3, #1
 800884c:	e005      	b.n	800885a <I2C_RequestMemoryWrite+0x11e>
 800884e:	893b      	ldrh	r3, [r7, #8]
 8008850:	b2da      	uxtb	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	611a      	str	r2, [r3, #16]
 8008858:	2300      	movs	r3, #0
 800885a:	4618      	mov	r0, r3
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	00010002 	.word	0x00010002

08008868 <I2C_DMAAbort>:
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	2300      	movs	r3, #0
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008878:	617b      	str	r3, [r7, #20]
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008880:	74fb      	strb	r3, [r7, #19]
 8008882:	4b4b      	ldr	r3, [pc, #300]	; (80089b0 <I2C_DMAAbort+0x148>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	08db      	lsrs	r3, r3, #3
 8008888:	4a4a      	ldr	r2, [pc, #296]	; (80089b4 <I2C_DMAAbort+0x14c>)
 800888a:	fba2 2303 	umull	r2, r3, r2, r3
 800888e:	0a1a      	lsrs	r2, r3, #8
 8008890:	4613      	mov	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	00da      	lsls	r2, r3, #3
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d106      	bne.n	80088b0 <I2C_DMAAbort+0x48>
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a6:	f043 0220 	orr.w	r2, r3, #32
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	641a      	str	r2, [r3, #64]	; 0x40
 80088ae:	e00a      	b.n	80088c6 <I2C_DMAAbort+0x5e>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	60fb      	str	r3, [r7, #12]
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088c4:	d0ea      	beq.n	800889c <I2C_DMAAbort+0x34>
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d003      	beq.n	80088d6 <I2C_DMAAbort+0x6e>
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d2:	2200      	movs	r2, #0
 80088d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <I2C_DMAAbort+0x7e>
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e2:	2200      	movs	r2, #0
 80088e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088f4:	601a      	str	r2, [r3, #0]
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2200      	movs	r2, #0
 80088fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <I2C_DMAAbort+0xa4>
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008908:	2200      	movs	r2, #0
 800890a:	651a      	str	r2, [r3, #80]	; 0x50
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <I2C_DMAAbort+0xb4>
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008918:	2200      	movs	r2, #0
 800891a:	651a      	str	r2, [r3, #80]	; 0x50
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 0201 	bic.w	r2, r2, #1
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b60      	cmp	r3, #96	; 0x60
 8008936:	d10e      	bne.n	8008956 <I2C_DMAAbort+0xee>
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2220      	movs	r2, #32
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2200      	movs	r2, #0
 800894c:	641a      	str	r2, [r3, #64]	; 0x40
 800894e:	6978      	ldr	r0, [r7, #20]
 8008950:	f7fe fd84 	bl	800745c <HAL_I2C_AbortCpltCallback>
 8008954:	e027      	b.n	80089a6 <I2C_DMAAbort+0x13e>
 8008956:	7cfb      	ldrb	r3, [r7, #19]
 8008958:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800895c:	2b28      	cmp	r3, #40	; 0x28
 800895e:	d117      	bne.n	8008990 <I2C_DMAAbort+0x128>
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0201 	orr.w	r2, r2, #1
 800896e:	601a      	str	r2, [r3, #0]
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2200      	movs	r2, #0
 8008984:	631a      	str	r2, [r3, #48]	; 0x30
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2228      	movs	r2, #40	; 0x28
 800898a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800898e:	e007      	b.n	80089a0 <I2C_DMAAbort+0x138>
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2220      	movs	r2, #32
 8008994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089a0:	6978      	ldr	r0, [r7, #20]
 80089a2:	f7fe fd51 	bl	8007448 <HAL_I2C_ErrorCallback>
 80089a6:	bf00      	nop
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20000000 	.word	0x20000000
 80089b4:	14f8b589 	.word	0x14f8b589

080089b8 <I2C_WaitOnFlagUntilTimeout>:
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	4613      	mov	r3, r2
 80089c6:	71fb      	strb	r3, [r7, #7]
 80089c8:	e025      	b.n	8008a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d0:	d021      	beq.n	8008a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80089d2:	f7fc fff3 	bl	80059bc <HAL_GetTick>
 80089d6:	4602      	mov	r2, r0
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d302      	bcc.n	80089e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d116      	bne.n	8008a16 <I2C_WaitOnFlagUntilTimeout+0x5e>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	631a      	str	r2, [r3, #48]	; 0x30
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	f043 0220 	orr.w	r2, r3, #32
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	641a      	str	r2, [r3, #64]	; 0x40
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008a12:	2301      	movs	r3, #1
 8008a14:	e023      	b.n	8008a5e <I2C_WaitOnFlagUntilTimeout+0xa6>
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	0c1b      	lsrs	r3, r3, #16
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d10d      	bne.n	8008a3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	43da      	mvns	r2, r3
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	bf0c      	ite	eq
 8008a32:	2301      	moveq	r3, #1
 8008a34:	2300      	movne	r3, #0
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	461a      	mov	r2, r3
 8008a3a:	e00c      	b.n	8008a56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	43da      	mvns	r2, r3
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	4013      	ands	r3, r2
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	bf0c      	ite	eq
 8008a4e:	2301      	moveq	r3, #1
 8008a50:	2300      	movne	r3, #0
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	461a      	mov	r2, r3
 8008a56:	79fb      	ldrb	r3, [r7, #7]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d0b6      	beq.n	80089ca <I2C_WaitOnFlagUntilTimeout+0x12>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	607a      	str	r2, [r7, #4]
 8008a72:	603b      	str	r3, [r7, #0]
 8008a74:	e051      	b.n	8008b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a84:	d123      	bne.n	8008ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a9e:	615a      	str	r2, [r3, #20]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	631a      	str	r2, [r3, #48]	; 0x30
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aba:	f043 0204 	orr.w	r2, r3, #4
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008aca:	2301      	movs	r3, #1
 8008acc:	e046      	b.n	8008b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad4:	d021      	beq.n	8008b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8008ad6:	f7fc ff71 	bl	80059bc <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d302      	bcc.n	8008aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d116      	bne.n	8008b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	631a      	str	r2, [r3, #48]	; 0x30
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2220      	movs	r2, #32
 8008af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b06:	f043 0220 	orr.w	r2, r3, #32
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	641a      	str	r2, [r3, #64]	; 0x40
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008b16:	2301      	movs	r3, #1
 8008b18:	e020      	b.n	8008b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	0c1b      	lsrs	r3, r3, #16
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d10c      	bne.n	8008b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	43da      	mvns	r2, r3
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	4013      	ands	r3, r2
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	bf14      	ite	ne
 8008b36:	2301      	movne	r3, #1
 8008b38:	2300      	moveq	r3, #0
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	e00b      	b.n	8008b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	43da      	mvns	r2, r3
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	4013      	ands	r3, r2
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	bf14      	ite	ne
 8008b50:	2301      	movne	r3, #1
 8008b52:	2300      	moveq	r3, #0
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d18d      	bne.n	8008a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <I2C_WaitOnTXEFlagUntilTimeout>:
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	e02d      	b.n	8008bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 f8aa 	bl	8008ccc <I2C_IsAcknowledgeFailed>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e02d      	b.n	8008bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b88:	d021      	beq.n	8008bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8008b8a:	f7fc ff17 	bl	80059bc <HAL_GetTick>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d302      	bcc.n	8008ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d116      	bne.n	8008bce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bba:	f043 0220 	orr.w	r2, r3, #32
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	641a      	str	r2, [r3, #64]	; 0x40
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e007      	b.n	8008bde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	695b      	ldr	r3, [r3, #20]
 8008bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd8:	2b80      	cmp	r3, #128	; 0x80
 8008bda:	d1ca      	bne.n	8008b72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <I2C_WaitOnBTFFlagUntilTimeout>:
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	607a      	str	r2, [r7, #4]
 8008bf2:	e02d      	b.n	8008c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 f869 	bl	8008ccc <I2C_IsAcknowledgeFailed>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8008c00:	2301      	movs	r3, #1
 8008c02:	e02d      	b.n	8008c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0a:	d021      	beq.n	8008c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8008c0c:	f7fc fed6 	bl	80059bc <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d302      	bcc.n	8008c22 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d116      	bne.n	8008c50 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	631a      	str	r2, [r3, #48]	; 0x30
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2220      	movs	r2, #32
 8008c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3c:	f043 0220 	orr.w	r2, r3, #32
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	641a      	str	r2, [r3, #64]	; 0x40
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e007      	b.n	8008c60 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	f003 0304 	and.w	r3, r3, #4
 8008c5a:	2b04      	cmp	r3, #4
 8008c5c:	d1ca      	bne.n	8008bf4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <I2C_WaitOnSTOPRequestThroughIT>:
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	2300      	movs	r3, #0
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	4b13      	ldr	r3, [pc, #76]	; (8008cc4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	08db      	lsrs	r3, r3, #3
 8008c7a:	4a13      	ldr	r2, [pc, #76]	; (8008cc8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c80:	0a1a      	lsrs	r2, r3, #8
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d107      	bne.n	8008ca6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9a:	f043 0220 	orr.w	r2, r3, #32
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	641a      	str	r2, [r3, #64]	; 0x40
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e008      	b.n	8008cb8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cb4:	d0e9      	beq.n	8008c8a <I2C_WaitOnSTOPRequestThroughIT+0x22>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	20000000 	.word	0x20000000
 8008cc8:	14f8b589 	.word	0x14f8b589

08008ccc <I2C_IsAcknowledgeFailed>:
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ce2:	d11b      	bne.n	8008d1c <I2C_IsAcknowledgeFailed+0x50>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008cec:	615a      	str	r2, [r3, #20]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d08:	f043 0204 	orr.w	r2, r3, #4
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	641a      	str	r2, [r3, #64]	; 0x40
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e000      	b.n	8008d1e <I2C_IsAcknowledgeFailed+0x52>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <I2C_ConvertOtherXferOptions>:
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008d3a:	d103      	bne.n	8008d44 <I2C_ConvertOtherXferOptions+0x1a>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d42:	e007      	b.n	8008d54 <I2C_ConvertOtherXferOptions+0x2a>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d48:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008d4c:	d102      	bne.n	8008d54 <I2C_ConvertOtherXferOptions+0x2a>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2208      	movs	r2, #8
 8008d52:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <HAL_RCC_OscConfig>:
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d101      	bne.n	8008d72 <HAL_RCC_OscConfig+0x12>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e267      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d075      	beq.n	8008e6a <HAL_RCC_OscConfig+0x10a>
 8008d7e:	4b88      	ldr	r3, [pc, #544]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f003 030c 	and.w	r3, r3, #12
 8008d86:	2b04      	cmp	r3, #4
 8008d88:	d00c      	beq.n	8008da4 <HAL_RCC_OscConfig+0x44>
 8008d8a:	4b85      	ldr	r3, [pc, #532]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	f003 030c 	and.w	r3, r3, #12
 8008d92:	2b08      	cmp	r3, #8
 8008d94:	d112      	bne.n	8008dbc <HAL_RCC_OscConfig+0x5c>
 8008d96:	4b82      	ldr	r3, [pc, #520]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008da2:	d10b      	bne.n	8008dbc <HAL_RCC_OscConfig+0x5c>
 8008da4:	4b7e      	ldr	r3, [pc, #504]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d05b      	beq.n	8008e68 <HAL_RCC_OscConfig+0x108>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d157      	bne.n	8008e68 <HAL_RCC_OscConfig+0x108>
 8008db8:	2301      	movs	r3, #1
 8008dba:	e242      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc4:	d106      	bne.n	8008dd4 <HAL_RCC_OscConfig+0x74>
 8008dc6:	4b76      	ldr	r3, [pc, #472]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a75      	ldr	r2, [pc, #468]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dd0:	6013      	str	r3, [r2, #0]
 8008dd2:	e01d      	b.n	8008e10 <HAL_RCC_OscConfig+0xb0>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ddc:	d10c      	bne.n	8008df8 <HAL_RCC_OscConfig+0x98>
 8008dde:	4b70      	ldr	r3, [pc, #448]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a6f      	ldr	r2, [pc, #444]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	4b6d      	ldr	r3, [pc, #436]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a6c      	ldr	r2, [pc, #432]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	e00b      	b.n	8008e10 <HAL_RCC_OscConfig+0xb0>
 8008df8:	4b69      	ldr	r3, [pc, #420]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a68      	ldr	r2, [pc, #416]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	4b66      	ldr	r3, [pc, #408]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a65      	ldr	r2, [pc, #404]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e0e:	6013      	str	r3, [r2, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d013      	beq.n	8008e40 <HAL_RCC_OscConfig+0xe0>
 8008e18:	f7fc fdd0 	bl	80059bc <HAL_GetTick>
 8008e1c:	6138      	str	r0, [r7, #16]
 8008e1e:	e008      	b.n	8008e32 <HAL_RCC_OscConfig+0xd2>
 8008e20:	f7fc fdcc 	bl	80059bc <HAL_GetTick>
 8008e24:	4602      	mov	r2, r0
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	2b64      	cmp	r3, #100	; 0x64
 8008e2c:	d901      	bls.n	8008e32 <HAL_RCC_OscConfig+0xd2>
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e207      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 8008e32:	4b5b      	ldr	r3, [pc, #364]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0f0      	beq.n	8008e20 <HAL_RCC_OscConfig+0xc0>
 8008e3e:	e014      	b.n	8008e6a <HAL_RCC_OscConfig+0x10a>
 8008e40:	f7fc fdbc 	bl	80059bc <HAL_GetTick>
 8008e44:	6138      	str	r0, [r7, #16]
 8008e46:	e008      	b.n	8008e5a <HAL_RCC_OscConfig+0xfa>
 8008e48:	f7fc fdb8 	bl	80059bc <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	2b64      	cmp	r3, #100	; 0x64
 8008e54:	d901      	bls.n	8008e5a <HAL_RCC_OscConfig+0xfa>
 8008e56:	2303      	movs	r3, #3
 8008e58:	e1f3      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 8008e5a:	4b51      	ldr	r3, [pc, #324]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1f0      	bne.n	8008e48 <HAL_RCC_OscConfig+0xe8>
 8008e66:	e000      	b.n	8008e6a <HAL_RCC_OscConfig+0x10a>
 8008e68:	bf00      	nop
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0302 	and.w	r3, r3, #2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d063      	beq.n	8008f3e <HAL_RCC_OscConfig+0x1de>
 8008e76:	4b4a      	ldr	r3, [pc, #296]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f003 030c 	and.w	r3, r3, #12
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00b      	beq.n	8008e9a <HAL_RCC_OscConfig+0x13a>
 8008e82:	4b47      	ldr	r3, [pc, #284]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f003 030c 	and.w	r3, r3, #12
 8008e8a:	2b08      	cmp	r3, #8
 8008e8c:	d11c      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x168>
 8008e8e:	4b44      	ldr	r3, [pc, #272]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d116      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x168>
 8008e9a:	4b41      	ldr	r3, [pc, #260]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d005      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x152>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d001      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x152>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e1c7      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 8008eb2:	4b3b      	ldr	r3, [pc, #236]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	4937      	ldr	r1, [pc, #220]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	600b      	str	r3, [r1, #0]
 8008ec6:	e03a      	b.n	8008f3e <HAL_RCC_OscConfig+0x1de>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d020      	beq.n	8008f12 <HAL_RCC_OscConfig+0x1b2>
 8008ed0:	4b34      	ldr	r3, [pc, #208]	; (8008fa4 <HAL_RCC_OscConfig+0x244>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	f7fc fd71 	bl	80059bc <HAL_GetTick>
 8008eda:	6138      	str	r0, [r7, #16]
 8008edc:	e008      	b.n	8008ef0 <HAL_RCC_OscConfig+0x190>
 8008ede:	f7fc fd6d 	bl	80059bc <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d901      	bls.n	8008ef0 <HAL_RCC_OscConfig+0x190>
 8008eec:	2303      	movs	r3, #3
 8008eee:	e1a8      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 8008ef0:	4b2b      	ldr	r3, [pc, #172]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0302 	and.w	r3, r3, #2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0f0      	beq.n	8008ede <HAL_RCC_OscConfig+0x17e>
 8008efc:	4b28      	ldr	r3, [pc, #160]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	4925      	ldr	r1, [pc, #148]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	600b      	str	r3, [r1, #0]
 8008f10:	e015      	b.n	8008f3e <HAL_RCC_OscConfig+0x1de>
 8008f12:	4b24      	ldr	r3, [pc, #144]	; (8008fa4 <HAL_RCC_OscConfig+0x244>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	f7fc fd50 	bl	80059bc <HAL_GetTick>
 8008f1c:	6138      	str	r0, [r7, #16]
 8008f1e:	e008      	b.n	8008f32 <HAL_RCC_OscConfig+0x1d2>
 8008f20:	f7fc fd4c 	bl	80059bc <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0x1d2>
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e187      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 8008f32:	4b1b      	ldr	r3, [pc, #108]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1f0      	bne.n	8008f20 <HAL_RCC_OscConfig+0x1c0>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0308 	and.w	r3, r3, #8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d036      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x258>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d016      	beq.n	8008f80 <HAL_RCC_OscConfig+0x220>
 8008f52:	4b15      	ldr	r3, [pc, #84]	; (8008fa8 <HAL_RCC_OscConfig+0x248>)
 8008f54:	2201      	movs	r2, #1
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	f7fc fd30 	bl	80059bc <HAL_GetTick>
 8008f5c:	6138      	str	r0, [r7, #16]
 8008f5e:	e008      	b.n	8008f72 <HAL_RCC_OscConfig+0x212>
 8008f60:	f7fc fd2c 	bl	80059bc <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d901      	bls.n	8008f72 <HAL_RCC_OscConfig+0x212>
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e167      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 8008f72:	4b0b      	ldr	r3, [pc, #44]	; (8008fa0 <HAL_RCC_OscConfig+0x240>)
 8008f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0f0      	beq.n	8008f60 <HAL_RCC_OscConfig+0x200>
 8008f7e:	e01b      	b.n	8008fb8 <HAL_RCC_OscConfig+0x258>
 8008f80:	4b09      	ldr	r3, [pc, #36]	; (8008fa8 <HAL_RCC_OscConfig+0x248>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]
 8008f86:	f7fc fd19 	bl	80059bc <HAL_GetTick>
 8008f8a:	6138      	str	r0, [r7, #16]
 8008f8c:	e00e      	b.n	8008fac <HAL_RCC_OscConfig+0x24c>
 8008f8e:	f7fc fd15 	bl	80059bc <HAL_GetTick>
 8008f92:	4602      	mov	r2, r0
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d907      	bls.n	8008fac <HAL_RCC_OscConfig+0x24c>
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e150      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 8008fa0:	40023800 	.word	0x40023800
 8008fa4:	42470000 	.word	0x42470000
 8008fa8:	42470e80 	.word	0x42470e80
 8008fac:	4b88      	ldr	r3, [pc, #544]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 8008fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fb0:	f003 0302 	and.w	r3, r3, #2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1ea      	bne.n	8008f8e <HAL_RCC_OscConfig+0x22e>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 8097 	beq.w	80090f4 <HAL_RCC_OscConfig+0x394>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	75fb      	strb	r3, [r7, #23]
 8008fca:	4b81      	ldr	r3, [pc, #516]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10f      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x296>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60bb      	str	r3, [r7, #8]
 8008fda:	4b7d      	ldr	r3, [pc, #500]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fde:	4a7c      	ldr	r2, [pc, #496]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 8008fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8008fe6:	4b7a      	ldr	r3, [pc, #488]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 8008fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fee:	60bb      	str	r3, [r7, #8]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	75fb      	strb	r3, [r7, #23]
 8008ff6:	4b77      	ldr	r3, [pc, #476]	; (80091d4 <HAL_RCC_OscConfig+0x474>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d118      	bne.n	8009034 <HAL_RCC_OscConfig+0x2d4>
 8009002:	4b74      	ldr	r3, [pc, #464]	; (80091d4 <HAL_RCC_OscConfig+0x474>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a73      	ldr	r2, [pc, #460]	; (80091d4 <HAL_RCC_OscConfig+0x474>)
 8009008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	f7fc fcd5 	bl	80059bc <HAL_GetTick>
 8009012:	6138      	str	r0, [r7, #16]
 8009014:	e008      	b.n	8009028 <HAL_RCC_OscConfig+0x2c8>
 8009016:	f7fc fcd1 	bl	80059bc <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	2b02      	cmp	r3, #2
 8009022:	d901      	bls.n	8009028 <HAL_RCC_OscConfig+0x2c8>
 8009024:	2303      	movs	r3, #3
 8009026:	e10c      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 8009028:	4b6a      	ldr	r3, [pc, #424]	; (80091d4 <HAL_RCC_OscConfig+0x474>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009030:	2b00      	cmp	r3, #0
 8009032:	d0f0      	beq.n	8009016 <HAL_RCC_OscConfig+0x2b6>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d106      	bne.n	800904a <HAL_RCC_OscConfig+0x2ea>
 800903c:	4b64      	ldr	r3, [pc, #400]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 800903e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009040:	4a63      	ldr	r2, [pc, #396]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 8009042:	f043 0301 	orr.w	r3, r3, #1
 8009046:	6713      	str	r3, [r2, #112]	; 0x70
 8009048:	e01c      	b.n	8009084 <HAL_RCC_OscConfig+0x324>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	2b05      	cmp	r3, #5
 8009050:	d10c      	bne.n	800906c <HAL_RCC_OscConfig+0x30c>
 8009052:	4b5f      	ldr	r3, [pc, #380]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 8009054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009056:	4a5e      	ldr	r2, [pc, #376]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 8009058:	f043 0304 	orr.w	r3, r3, #4
 800905c:	6713      	str	r3, [r2, #112]	; 0x70
 800905e:	4b5c      	ldr	r3, [pc, #368]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 8009060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009062:	4a5b      	ldr	r2, [pc, #364]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 8009064:	f043 0301 	orr.w	r3, r3, #1
 8009068:	6713      	str	r3, [r2, #112]	; 0x70
 800906a:	e00b      	b.n	8009084 <HAL_RCC_OscConfig+0x324>
 800906c:	4b58      	ldr	r3, [pc, #352]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 800906e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009070:	4a57      	ldr	r2, [pc, #348]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 8009072:	f023 0301 	bic.w	r3, r3, #1
 8009076:	6713      	str	r3, [r2, #112]	; 0x70
 8009078:	4b55      	ldr	r3, [pc, #340]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 800907a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907c:	4a54      	ldr	r2, [pc, #336]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 800907e:	f023 0304 	bic.w	r3, r3, #4
 8009082:	6713      	str	r3, [r2, #112]	; 0x70
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d015      	beq.n	80090b8 <HAL_RCC_OscConfig+0x358>
 800908c:	f7fc fc96 	bl	80059bc <HAL_GetTick>
 8009090:	6138      	str	r0, [r7, #16]
 8009092:	e00a      	b.n	80090aa <HAL_RCC_OscConfig+0x34a>
 8009094:	f7fc fc92 	bl	80059bc <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	f241 3288 	movw	r2, #5000	; 0x1388
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0x34a>
 80090a6:	2303      	movs	r3, #3
 80090a8:	e0cb      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 80090aa:	4b49      	ldr	r3, [pc, #292]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 80090ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ae:	f003 0302 	and.w	r3, r3, #2
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0ee      	beq.n	8009094 <HAL_RCC_OscConfig+0x334>
 80090b6:	e014      	b.n	80090e2 <HAL_RCC_OscConfig+0x382>
 80090b8:	f7fc fc80 	bl	80059bc <HAL_GetTick>
 80090bc:	6138      	str	r0, [r7, #16]
 80090be:	e00a      	b.n	80090d6 <HAL_RCC_OscConfig+0x376>
 80090c0:	f7fc fc7c 	bl	80059bc <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d901      	bls.n	80090d6 <HAL_RCC_OscConfig+0x376>
 80090d2:	2303      	movs	r3, #3
 80090d4:	e0b5      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 80090d6:	4b3e      	ldr	r3, [pc, #248]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 80090d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1ee      	bne.n	80090c0 <HAL_RCC_OscConfig+0x360>
 80090e2:	7dfb      	ldrb	r3, [r7, #23]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d105      	bne.n	80090f4 <HAL_RCC_OscConfig+0x394>
 80090e8:	4b39      	ldr	r3, [pc, #228]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 80090ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ec:	4a38      	ldr	r2, [pc, #224]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 80090ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090f2:	6413      	str	r3, [r2, #64]	; 0x40
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 80a1 	beq.w	8009240 <HAL_RCC_OscConfig+0x4e0>
 80090fe:	4b34      	ldr	r3, [pc, #208]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f003 030c 	and.w	r3, r3, #12
 8009106:	2b08      	cmp	r3, #8
 8009108:	d05c      	beq.n	80091c4 <HAL_RCC_OscConfig+0x464>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	2b02      	cmp	r3, #2
 8009110:	d141      	bne.n	8009196 <HAL_RCC_OscConfig+0x436>
 8009112:	4b31      	ldr	r3, [pc, #196]	; (80091d8 <HAL_RCC_OscConfig+0x478>)
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	f7fc fc50 	bl	80059bc <HAL_GetTick>
 800911c:	6138      	str	r0, [r7, #16]
 800911e:	e008      	b.n	8009132 <HAL_RCC_OscConfig+0x3d2>
 8009120:	f7fc fc4c 	bl	80059bc <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	2b02      	cmp	r3, #2
 800912c:	d901      	bls.n	8009132 <HAL_RCC_OscConfig+0x3d2>
 800912e:	2303      	movs	r3, #3
 8009130:	e087      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 8009132:	4b27      	ldr	r3, [pc, #156]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1f0      	bne.n	8009120 <HAL_RCC_OscConfig+0x3c0>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	69da      	ldr	r2, [r3, #28]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	431a      	orrs	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	019b      	lsls	r3, r3, #6
 800914e:	431a      	orrs	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009154:	085b      	lsrs	r3, r3, #1
 8009156:	3b01      	subs	r3, #1
 8009158:	041b      	lsls	r3, r3, #16
 800915a:	431a      	orrs	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009160:	061b      	lsls	r3, r3, #24
 8009162:	491b      	ldr	r1, [pc, #108]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 8009164:	4313      	orrs	r3, r2
 8009166:	604b      	str	r3, [r1, #4]
 8009168:	4b1b      	ldr	r3, [pc, #108]	; (80091d8 <HAL_RCC_OscConfig+0x478>)
 800916a:	2201      	movs	r2, #1
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	f7fc fc25 	bl	80059bc <HAL_GetTick>
 8009172:	6138      	str	r0, [r7, #16]
 8009174:	e008      	b.n	8009188 <HAL_RCC_OscConfig+0x428>
 8009176:	f7fc fc21 	bl	80059bc <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	2b02      	cmp	r3, #2
 8009182:	d901      	bls.n	8009188 <HAL_RCC_OscConfig+0x428>
 8009184:	2303      	movs	r3, #3
 8009186:	e05c      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 8009188:	4b11      	ldr	r3, [pc, #68]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0f0      	beq.n	8009176 <HAL_RCC_OscConfig+0x416>
 8009194:	e054      	b.n	8009240 <HAL_RCC_OscConfig+0x4e0>
 8009196:	4b10      	ldr	r3, [pc, #64]	; (80091d8 <HAL_RCC_OscConfig+0x478>)
 8009198:	2200      	movs	r2, #0
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	f7fc fc0e 	bl	80059bc <HAL_GetTick>
 80091a0:	6138      	str	r0, [r7, #16]
 80091a2:	e008      	b.n	80091b6 <HAL_RCC_OscConfig+0x456>
 80091a4:	f7fc fc0a 	bl	80059bc <HAL_GetTick>
 80091a8:	4602      	mov	r2, r0
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d901      	bls.n	80091b6 <HAL_RCC_OscConfig+0x456>
 80091b2:	2303      	movs	r3, #3
 80091b4:	e045      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 80091b6:	4b06      	ldr	r3, [pc, #24]	; (80091d0 <HAL_RCC_OscConfig+0x470>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1f0      	bne.n	80091a4 <HAL_RCC_OscConfig+0x444>
 80091c2:	e03d      	b.n	8009240 <HAL_RCC_OscConfig+0x4e0>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d107      	bne.n	80091dc <HAL_RCC_OscConfig+0x47c>
 80091cc:	2301      	movs	r3, #1
 80091ce:	e038      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 80091d0:	40023800 	.word	0x40023800
 80091d4:	40007000 	.word	0x40007000
 80091d8:	42470060 	.word	0x42470060
 80091dc:	4b1b      	ldr	r3, [pc, #108]	; (800924c <HAL_RCC_OscConfig+0x4ec>)
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	60fb      	str	r3, [r7, #12]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d028      	beq.n	800923c <HAL_RCC_OscConfig+0x4dc>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d121      	bne.n	800923c <HAL_RCC_OscConfig+0x4dc>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	429a      	cmp	r2, r3
 8009204:	d11a      	bne.n	800923c <HAL_RCC_OscConfig+0x4dc>
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800920c:	4013      	ands	r3, r2
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009212:	0192      	lsls	r2, r2, #6
 8009214:	4293      	cmp	r3, r2
 8009216:	d111      	bne.n	800923c <HAL_RCC_OscConfig+0x4dc>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009222:	085b      	lsrs	r3, r3, #1
 8009224:	3b01      	subs	r3, #1
 8009226:	041b      	lsls	r3, r3, #16
 8009228:	429a      	cmp	r2, r3
 800922a:	d107      	bne.n	800923c <HAL_RCC_OscConfig+0x4dc>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009236:	061b      	lsls	r3, r3, #24
 8009238:	429a      	cmp	r2, r3
 800923a:	d001      	beq.n	8009240 <HAL_RCC_OscConfig+0x4e0>
 800923c:	2301      	movs	r3, #1
 800923e:	e000      	b.n	8009242 <HAL_RCC_OscConfig+0x4e2>
 8009240:	2300      	movs	r3, #0
 8009242:	4618      	mov	r0, r3
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	40023800 	.word	0x40023800

08009250 <HAL_RCC_ClockConfig>:
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <HAL_RCC_ClockConfig+0x14>
 8009260:	2301      	movs	r3, #1
 8009262:	e0cc      	b.n	80093fe <HAL_RCC_ClockConfig+0x1ae>
 8009264:	4b68      	ldr	r3, [pc, #416]	; (8009408 <HAL_RCC_ClockConfig+0x1b8>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0307 	and.w	r3, r3, #7
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	429a      	cmp	r2, r3
 8009270:	d90c      	bls.n	800928c <HAL_RCC_ClockConfig+0x3c>
 8009272:	4b65      	ldr	r3, [pc, #404]	; (8009408 <HAL_RCC_ClockConfig+0x1b8>)
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	b2d2      	uxtb	r2, r2
 8009278:	701a      	strb	r2, [r3, #0]
 800927a:	4b63      	ldr	r3, [pc, #396]	; (8009408 <HAL_RCC_ClockConfig+0x1b8>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0307 	and.w	r3, r3, #7
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	429a      	cmp	r2, r3
 8009286:	d001      	beq.n	800928c <HAL_RCC_ClockConfig+0x3c>
 8009288:	2301      	movs	r3, #1
 800928a:	e0b8      	b.n	80093fe <HAL_RCC_ClockConfig+0x1ae>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b00      	cmp	r3, #0
 8009296:	d020      	beq.n	80092da <HAL_RCC_ClockConfig+0x8a>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 0304 	and.w	r3, r3, #4
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d005      	beq.n	80092b0 <HAL_RCC_ClockConfig+0x60>
 80092a4:	4b59      	ldr	r3, [pc, #356]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	4a58      	ldr	r2, [pc, #352]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 80092aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80092ae:	6093      	str	r3, [r2, #8]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0308 	and.w	r3, r3, #8
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d005      	beq.n	80092c8 <HAL_RCC_ClockConfig+0x78>
 80092bc:	4b53      	ldr	r3, [pc, #332]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	4a52      	ldr	r2, [pc, #328]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 80092c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80092c6:	6093      	str	r3, [r2, #8]
 80092c8:	4b50      	ldr	r3, [pc, #320]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	494d      	ldr	r1, [pc, #308]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	608b      	str	r3, [r1, #8]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d044      	beq.n	8009370 <HAL_RCC_ClockConfig+0x120>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d107      	bne.n	80092fe <HAL_RCC_ClockConfig+0xae>
 80092ee:	4b47      	ldr	r3, [pc, #284]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d119      	bne.n	800932e <HAL_RCC_ClockConfig+0xde>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e07f      	b.n	80093fe <HAL_RCC_ClockConfig+0x1ae>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	2b02      	cmp	r3, #2
 8009304:	d003      	beq.n	800930e <HAL_RCC_ClockConfig+0xbe>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	2b03      	cmp	r3, #3
 800930c:	d107      	bne.n	800931e <HAL_RCC_ClockConfig+0xce>
 800930e:	4b3f      	ldr	r3, [pc, #252]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009316:	2b00      	cmp	r3, #0
 8009318:	d109      	bne.n	800932e <HAL_RCC_ClockConfig+0xde>
 800931a:	2301      	movs	r3, #1
 800931c:	e06f      	b.n	80093fe <HAL_RCC_ClockConfig+0x1ae>
 800931e:	4b3b      	ldr	r3, [pc, #236]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d101      	bne.n	800932e <HAL_RCC_ClockConfig+0xde>
 800932a:	2301      	movs	r3, #1
 800932c:	e067      	b.n	80093fe <HAL_RCC_ClockConfig+0x1ae>
 800932e:	4b37      	ldr	r3, [pc, #220]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f023 0203 	bic.w	r2, r3, #3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	4934      	ldr	r1, [pc, #208]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 800933c:	4313      	orrs	r3, r2
 800933e:	608b      	str	r3, [r1, #8]
 8009340:	f7fc fb3c 	bl	80059bc <HAL_GetTick>
 8009344:	60f8      	str	r0, [r7, #12]
 8009346:	e00a      	b.n	800935e <HAL_RCC_ClockConfig+0x10e>
 8009348:	f7fc fb38 	bl	80059bc <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	f241 3288 	movw	r2, #5000	; 0x1388
 8009356:	4293      	cmp	r3, r2
 8009358:	d901      	bls.n	800935e <HAL_RCC_ClockConfig+0x10e>
 800935a:	2303      	movs	r3, #3
 800935c:	e04f      	b.n	80093fe <HAL_RCC_ClockConfig+0x1ae>
 800935e:	4b2b      	ldr	r3, [pc, #172]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f003 020c 	and.w	r2, r3, #12
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	429a      	cmp	r2, r3
 800936e:	d1eb      	bne.n	8009348 <HAL_RCC_ClockConfig+0xf8>
 8009370:	4b25      	ldr	r3, [pc, #148]	; (8009408 <HAL_RCC_ClockConfig+0x1b8>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0307 	and.w	r3, r3, #7
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	429a      	cmp	r2, r3
 800937c:	d20c      	bcs.n	8009398 <HAL_RCC_ClockConfig+0x148>
 800937e:	4b22      	ldr	r3, [pc, #136]	; (8009408 <HAL_RCC_ClockConfig+0x1b8>)
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	b2d2      	uxtb	r2, r2
 8009384:	701a      	strb	r2, [r3, #0]
 8009386:	4b20      	ldr	r3, [pc, #128]	; (8009408 <HAL_RCC_ClockConfig+0x1b8>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0307 	and.w	r3, r3, #7
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	429a      	cmp	r2, r3
 8009392:	d001      	beq.n	8009398 <HAL_RCC_ClockConfig+0x148>
 8009394:	2301      	movs	r3, #1
 8009396:	e032      	b.n	80093fe <HAL_RCC_ClockConfig+0x1ae>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0304 	and.w	r3, r3, #4
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d008      	beq.n	80093b6 <HAL_RCC_ClockConfig+0x166>
 80093a4:	4b19      	ldr	r3, [pc, #100]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	4916      	ldr	r1, [pc, #88]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 80093b2:	4313      	orrs	r3, r2
 80093b4:	608b      	str	r3, [r1, #8]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 0308 	and.w	r3, r3, #8
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d009      	beq.n	80093d6 <HAL_RCC_ClockConfig+0x186>
 80093c2:	4b12      	ldr	r3, [pc, #72]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	00db      	lsls	r3, r3, #3
 80093d0:	490e      	ldr	r1, [pc, #56]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	608b      	str	r3, [r1, #8]
 80093d6:	f000 f821 	bl	800941c <HAL_RCC_GetSysClockFreq>
 80093da:	4602      	mov	r2, r0
 80093dc:	4b0b      	ldr	r3, [pc, #44]	; (800940c <HAL_RCC_ClockConfig+0x1bc>)
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	091b      	lsrs	r3, r3, #4
 80093e2:	f003 030f 	and.w	r3, r3, #15
 80093e6:	490a      	ldr	r1, [pc, #40]	; (8009410 <HAL_RCC_ClockConfig+0x1c0>)
 80093e8:	5ccb      	ldrb	r3, [r1, r3]
 80093ea:	fa22 f303 	lsr.w	r3, r2, r3
 80093ee:	4a09      	ldr	r2, [pc, #36]	; (8009414 <HAL_RCC_ClockConfig+0x1c4>)
 80093f0:	6013      	str	r3, [r2, #0]
 80093f2:	4b09      	ldr	r3, [pc, #36]	; (8009418 <HAL_RCC_ClockConfig+0x1c8>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fc fa9c 	bl	8005934 <HAL_InitTick>
 80093fc:	2300      	movs	r3, #0
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	40023c00 	.word	0x40023c00
 800940c:	40023800 	.word	0x40023800
 8009410:	0800f434 	.word	0x0800f434
 8009414:	20000000 	.word	0x20000000
 8009418:	20000004 	.word	0x20000004

0800941c <HAL_RCC_GetSysClockFreq>:
 800941c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009420:	b090      	sub	sp, #64	; 0x40
 8009422:	af00      	add	r7, sp, #0
 8009424:	2300      	movs	r3, #0
 8009426:	637b      	str	r3, [r7, #52]	; 0x34
 8009428:	2300      	movs	r3, #0
 800942a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800942c:	2300      	movs	r3, #0
 800942e:	633b      	str	r3, [r7, #48]	; 0x30
 8009430:	2300      	movs	r3, #0
 8009432:	63bb      	str	r3, [r7, #56]	; 0x38
 8009434:	4b59      	ldr	r3, [pc, #356]	; (800959c <HAL_RCC_GetSysClockFreq+0x180>)
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	f003 030c 	and.w	r3, r3, #12
 800943c:	2b08      	cmp	r3, #8
 800943e:	d00d      	beq.n	800945c <HAL_RCC_GetSysClockFreq+0x40>
 8009440:	2b08      	cmp	r3, #8
 8009442:	f200 80a1 	bhi.w	8009588 <HAL_RCC_GetSysClockFreq+0x16c>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <HAL_RCC_GetSysClockFreq+0x34>
 800944a:	2b04      	cmp	r3, #4
 800944c:	d003      	beq.n	8009456 <HAL_RCC_GetSysClockFreq+0x3a>
 800944e:	e09b      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0x16c>
 8009450:	4b53      	ldr	r3, [pc, #332]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8009452:	63bb      	str	r3, [r7, #56]	; 0x38
 8009454:	e09b      	b.n	800958e <HAL_RCC_GetSysClockFreq+0x172>
 8009456:	4b53      	ldr	r3, [pc, #332]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009458:	63bb      	str	r3, [r7, #56]	; 0x38
 800945a:	e098      	b.n	800958e <HAL_RCC_GetSysClockFreq+0x172>
 800945c:	4b4f      	ldr	r3, [pc, #316]	; (800959c <HAL_RCC_GetSysClockFreq+0x180>)
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009464:	637b      	str	r3, [r7, #52]	; 0x34
 8009466:	4b4d      	ldr	r3, [pc, #308]	; (800959c <HAL_RCC_GetSysClockFreq+0x180>)
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d028      	beq.n	80094c4 <HAL_RCC_GetSysClockFreq+0xa8>
 8009472:	4b4a      	ldr	r3, [pc, #296]	; (800959c <HAL_RCC_GetSysClockFreq+0x180>)
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	099b      	lsrs	r3, r3, #6
 8009478:	2200      	movs	r2, #0
 800947a:	623b      	str	r3, [r7, #32]
 800947c:	627a      	str	r2, [r7, #36]	; 0x24
 800947e:	6a3b      	ldr	r3, [r7, #32]
 8009480:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009484:	2100      	movs	r1, #0
 8009486:	4b47      	ldr	r3, [pc, #284]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009488:	fb03 f201 	mul.w	r2, r3, r1
 800948c:	2300      	movs	r3, #0
 800948e:	fb00 f303 	mul.w	r3, r0, r3
 8009492:	4413      	add	r3, r2
 8009494:	4a43      	ldr	r2, [pc, #268]	; (80095a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8009496:	fba0 1202 	umull	r1, r2, r0, r2
 800949a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800949c:	460a      	mov	r2, r1
 800949e:	62ba      	str	r2, [r7, #40]	; 0x28
 80094a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094a2:	4413      	add	r3, r2
 80094a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a8:	2200      	movs	r2, #0
 80094aa:	61bb      	str	r3, [r7, #24]
 80094ac:	61fa      	str	r2, [r7, #28]
 80094ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80094b6:	f7f7 fbcf 	bl	8000c58 <__aeabi_uldivmod>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	4613      	mov	r3, r2
 80094c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094c2:	e053      	b.n	800956c <HAL_RCC_GetSysClockFreq+0x150>
 80094c4:	4b35      	ldr	r3, [pc, #212]	; (800959c <HAL_RCC_GetSysClockFreq+0x180>)
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	099b      	lsrs	r3, r3, #6
 80094ca:	2200      	movs	r2, #0
 80094cc:	613b      	str	r3, [r7, #16]
 80094ce:	617a      	str	r2, [r7, #20]
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80094d6:	f04f 0b00 	mov.w	fp, #0
 80094da:	4652      	mov	r2, sl
 80094dc:	465b      	mov	r3, fp
 80094de:	f04f 0000 	mov.w	r0, #0
 80094e2:	f04f 0100 	mov.w	r1, #0
 80094e6:	0159      	lsls	r1, r3, #5
 80094e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80094ec:	0150      	lsls	r0, r2, #5
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	ebb2 080a 	subs.w	r8, r2, sl
 80094f6:	eb63 090b 	sbc.w	r9, r3, fp
 80094fa:	f04f 0200 	mov.w	r2, #0
 80094fe:	f04f 0300 	mov.w	r3, #0
 8009502:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009506:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800950a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800950e:	ebb2 0408 	subs.w	r4, r2, r8
 8009512:	eb63 0509 	sbc.w	r5, r3, r9
 8009516:	f04f 0200 	mov.w	r2, #0
 800951a:	f04f 0300 	mov.w	r3, #0
 800951e:	00eb      	lsls	r3, r5, #3
 8009520:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009524:	00e2      	lsls	r2, r4, #3
 8009526:	4614      	mov	r4, r2
 8009528:	461d      	mov	r5, r3
 800952a:	eb14 030a 	adds.w	r3, r4, sl
 800952e:	603b      	str	r3, [r7, #0]
 8009530:	eb45 030b 	adc.w	r3, r5, fp
 8009534:	607b      	str	r3, [r7, #4]
 8009536:	f04f 0200 	mov.w	r2, #0
 800953a:	f04f 0300 	mov.w	r3, #0
 800953e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009542:	4629      	mov	r1, r5
 8009544:	028b      	lsls	r3, r1, #10
 8009546:	4621      	mov	r1, r4
 8009548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800954c:	4621      	mov	r1, r4
 800954e:	028a      	lsls	r2, r1, #10
 8009550:	4610      	mov	r0, r2
 8009552:	4619      	mov	r1, r3
 8009554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009556:	2200      	movs	r2, #0
 8009558:	60bb      	str	r3, [r7, #8]
 800955a:	60fa      	str	r2, [r7, #12]
 800955c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009560:	f7f7 fb7a 	bl	8000c58 <__aeabi_uldivmod>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	4613      	mov	r3, r2
 800956a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800956c:	4b0b      	ldr	r3, [pc, #44]	; (800959c <HAL_RCC_GetSysClockFreq+0x180>)
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	0c1b      	lsrs	r3, r3, #16
 8009572:	f003 0303 	and.w	r3, r3, #3
 8009576:	3301      	adds	r3, #1
 8009578:	005b      	lsls	r3, r3, #1
 800957a:	633b      	str	r3, [r7, #48]	; 0x30
 800957c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800957e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009580:	fbb2 f3f3 	udiv	r3, r2, r3
 8009584:	63bb      	str	r3, [r7, #56]	; 0x38
 8009586:	e002      	b.n	800958e <HAL_RCC_GetSysClockFreq+0x172>
 8009588:	4b05      	ldr	r3, [pc, #20]	; (80095a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800958a:	63bb      	str	r3, [r7, #56]	; 0x38
 800958c:	bf00      	nop
 800958e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009590:	4618      	mov	r0, r3
 8009592:	3740      	adds	r7, #64	; 0x40
 8009594:	46bd      	mov	sp, r7
 8009596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800959a:	bf00      	nop
 800959c:	40023800 	.word	0x40023800
 80095a0:	00f42400 	.word	0x00f42400
 80095a4:	017d7840 	.word	0x017d7840

080095a8 <HAL_RCC_GetHCLKFreq>:
 80095a8:	b480      	push	{r7}
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	4b03      	ldr	r3, [pc, #12]	; (80095bc <HAL_RCC_GetHCLKFreq+0x14>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4618      	mov	r0, r3
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	20000000 	.word	0x20000000

080095c0 <HAL_RCC_GetPCLK1Freq>:
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	f7ff fff0 	bl	80095a8 <HAL_RCC_GetHCLKFreq>
 80095c8:	4602      	mov	r2, r0
 80095ca:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	0a9b      	lsrs	r3, r3, #10
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	4903      	ldr	r1, [pc, #12]	; (80095e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095d6:	5ccb      	ldrb	r3, [r1, r3]
 80095d8:	fa22 f303 	lsr.w	r3, r2, r3
 80095dc:	4618      	mov	r0, r3
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	40023800 	.word	0x40023800
 80095e4:	0800f444 	.word	0x0800f444

080095e8 <HAL_RCC_GetPCLK2Freq>:
 80095e8:	b580      	push	{r7, lr}
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	f7ff ffdc 	bl	80095a8 <HAL_RCC_GetHCLKFreq>
 80095f0:	4602      	mov	r2, r0
 80095f2:	4b05      	ldr	r3, [pc, #20]	; (8009608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	0b5b      	lsrs	r3, r3, #13
 80095f8:	f003 0307 	and.w	r3, r3, #7
 80095fc:	4903      	ldr	r1, [pc, #12]	; (800960c <HAL_RCC_GetPCLK2Freq+0x24>)
 80095fe:	5ccb      	ldrb	r3, [r1, r3]
 8009600:	fa22 f303 	lsr.w	r3, r2, r3
 8009604:	4618      	mov	r0, r3
 8009606:	bd80      	pop	{r7, pc}
 8009608:	40023800 	.word	0x40023800
 800960c:	0800f444 	.word	0x0800f444

08009610 <HAL_TIM_Base_Init>:
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d101      	bne.n	8009622 <HAL_TIM_Base_Init+0x12>
 800961e:	2301      	movs	r3, #1
 8009620:	e041      	b.n	80096a6 <HAL_TIM_Base_Init+0x96>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d106      	bne.n	800963c <HAL_TIM_Base_Init+0x2c>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7fb fd8e 	bl	8005158 <HAL_TIM_Base_MspInit>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	3304      	adds	r3, #4
 800964c:	4619      	mov	r1, r3
 800964e:	4610      	mov	r0, r2
 8009650:	f000 fd7e 	bl	800a150 <TIM_Base_SetConfig>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80096a4:	2300      	movs	r3, #0
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
	...

080096b0 <HAL_TIM_Base_Start_IT>:
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d001      	beq.n	80096c8 <HAL_TIM_Base_Start_IT+0x18>
 80096c4:	2301      	movs	r3, #1
 80096c6:	e044      	b.n	8009752 <HAL_TIM_Base_Start_IT+0xa2>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f042 0201 	orr.w	r2, r2, #1
 80096de:	60da      	str	r2, [r3, #12]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a1e      	ldr	r2, [pc, #120]	; (8009760 <HAL_TIM_Base_Start_IT+0xb0>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d018      	beq.n	800971c <HAL_TIM_Base_Start_IT+0x6c>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096f2:	d013      	beq.n	800971c <HAL_TIM_Base_Start_IT+0x6c>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a1a      	ldr	r2, [pc, #104]	; (8009764 <HAL_TIM_Base_Start_IT+0xb4>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d00e      	beq.n	800971c <HAL_TIM_Base_Start_IT+0x6c>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a19      	ldr	r2, [pc, #100]	; (8009768 <HAL_TIM_Base_Start_IT+0xb8>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d009      	beq.n	800971c <HAL_TIM_Base_Start_IT+0x6c>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a17      	ldr	r2, [pc, #92]	; (800976c <HAL_TIM_Base_Start_IT+0xbc>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d004      	beq.n	800971c <HAL_TIM_Base_Start_IT+0x6c>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a16      	ldr	r2, [pc, #88]	; (8009770 <HAL_TIM_Base_Start_IT+0xc0>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d111      	bne.n	8009740 <HAL_TIM_Base_Start_IT+0x90>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f003 0307 	and.w	r3, r3, #7
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b06      	cmp	r3, #6
 800972c:	d010      	beq.n	8009750 <HAL_TIM_Base_Start_IT+0xa0>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f042 0201 	orr.w	r2, r2, #1
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	e007      	b.n	8009750 <HAL_TIM_Base_Start_IT+0xa0>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f042 0201 	orr.w	r2, r2, #1
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	2300      	movs	r3, #0
 8009752:	4618      	mov	r0, r3
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	40010000 	.word	0x40010000
 8009764:	40000400 	.word	0x40000400
 8009768:	40000800 	.word	0x40000800
 800976c:	40000c00 	.word	0x40000c00
 8009770:	40014000 	.word	0x40014000

08009774 <HAL_TIM_PWM_Init>:
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <HAL_TIM_PWM_Init+0x12>
 8009782:	2301      	movs	r3, #1
 8009784:	e041      	b.n	800980a <HAL_TIM_PWM_Init+0x96>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d106      	bne.n	80097a0 <HAL_TIM_PWM_Init+0x2c>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f7fb fdb6 	bl	800530c <HAL_TIM_PWM_MspInit>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	3304      	adds	r3, #4
 80097b0:	4619      	mov	r1, r3
 80097b2:	4610      	mov	r0, r2
 80097b4:	f000 fccc 	bl	800a150 <TIM_Base_SetConfig>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009808:	2300      	movs	r3, #0
 800980a:	4618      	mov	r0, r3
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <HAL_TIM_PWM_Start>:
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d109      	bne.n	8009838 <HAL_TIM_PWM_Start+0x24>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b01      	cmp	r3, #1
 800982e:	bf14      	ite	ne
 8009830:	2301      	movne	r3, #1
 8009832:	2300      	moveq	r3, #0
 8009834:	b2db      	uxtb	r3, r3
 8009836:	e022      	b.n	800987e <HAL_TIM_PWM_Start+0x6a>
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	2b04      	cmp	r3, #4
 800983c:	d109      	bne.n	8009852 <HAL_TIM_PWM_Start+0x3e>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b01      	cmp	r3, #1
 8009848:	bf14      	ite	ne
 800984a:	2301      	movne	r3, #1
 800984c:	2300      	moveq	r3, #0
 800984e:	b2db      	uxtb	r3, r3
 8009850:	e015      	b.n	800987e <HAL_TIM_PWM_Start+0x6a>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b08      	cmp	r3, #8
 8009856:	d109      	bne.n	800986c <HAL_TIM_PWM_Start+0x58>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800985e:	b2db      	uxtb	r3, r3
 8009860:	2b01      	cmp	r3, #1
 8009862:	bf14      	ite	ne
 8009864:	2301      	movne	r3, #1
 8009866:	2300      	moveq	r3, #0
 8009868:	b2db      	uxtb	r3, r3
 800986a:	e008      	b.n	800987e <HAL_TIM_PWM_Start+0x6a>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b01      	cmp	r3, #1
 8009876:	bf14      	ite	ne
 8009878:	2301      	movne	r3, #1
 800987a:	2300      	moveq	r3, #0
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <HAL_TIM_PWM_Start+0x72>
 8009882:	2301      	movs	r3, #1
 8009884:	e068      	b.n	8009958 <HAL_TIM_PWM_Start+0x144>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d104      	bne.n	8009896 <HAL_TIM_PWM_Start+0x82>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2202      	movs	r2, #2
 8009890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009894:	e013      	b.n	80098be <HAL_TIM_PWM_Start+0xaa>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b04      	cmp	r3, #4
 800989a:	d104      	bne.n	80098a6 <HAL_TIM_PWM_Start+0x92>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2202      	movs	r2, #2
 80098a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098a4:	e00b      	b.n	80098be <HAL_TIM_PWM_Start+0xaa>
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b08      	cmp	r3, #8
 80098aa:	d104      	bne.n	80098b6 <HAL_TIM_PWM_Start+0xa2>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2202      	movs	r2, #2
 80098b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098b4:	e003      	b.n	80098be <HAL_TIM_PWM_Start+0xaa>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2202      	movs	r2, #2
 80098ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2201      	movs	r2, #1
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fee8 	bl	800a69c <TIM_CCxChannelCmd>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a23      	ldr	r2, [pc, #140]	; (8009960 <HAL_TIM_PWM_Start+0x14c>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d107      	bne.n	80098e6 <HAL_TIM_PWM_Start+0xd2>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098e4:	645a      	str	r2, [r3, #68]	; 0x44
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a1d      	ldr	r2, [pc, #116]	; (8009960 <HAL_TIM_PWM_Start+0x14c>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d018      	beq.n	8009922 <HAL_TIM_PWM_Start+0x10e>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098f8:	d013      	beq.n	8009922 <HAL_TIM_PWM_Start+0x10e>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a19      	ldr	r2, [pc, #100]	; (8009964 <HAL_TIM_PWM_Start+0x150>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d00e      	beq.n	8009922 <HAL_TIM_PWM_Start+0x10e>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a17      	ldr	r2, [pc, #92]	; (8009968 <HAL_TIM_PWM_Start+0x154>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d009      	beq.n	8009922 <HAL_TIM_PWM_Start+0x10e>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a16      	ldr	r2, [pc, #88]	; (800996c <HAL_TIM_PWM_Start+0x158>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d004      	beq.n	8009922 <HAL_TIM_PWM_Start+0x10e>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a14      	ldr	r2, [pc, #80]	; (8009970 <HAL_TIM_PWM_Start+0x15c>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d111      	bne.n	8009946 <HAL_TIM_PWM_Start+0x132>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	f003 0307 	and.w	r3, r3, #7
 800992c:	60fb      	str	r3, [r7, #12]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2b06      	cmp	r3, #6
 8009932:	d010      	beq.n	8009956 <HAL_TIM_PWM_Start+0x142>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f042 0201 	orr.w	r2, r2, #1
 8009942:	601a      	str	r2, [r3, #0]
 8009944:	e007      	b.n	8009956 <HAL_TIM_PWM_Start+0x142>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f042 0201 	orr.w	r2, r2, #1
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	2300      	movs	r3, #0
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	40010000 	.word	0x40010000
 8009964:	40000400 	.word	0x40000400
 8009968:	40000800 	.word	0x40000800
 800996c:	40000c00 	.word	0x40000c00
 8009970:	40014000 	.word	0x40014000

08009974 <HAL_TIM_Encoder_Init>:
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <HAL_TIM_Encoder_Init+0x14>
 8009984:	2301      	movs	r3, #1
 8009986:	e097      	b.n	8009ab8 <HAL_TIM_Encoder_Init+0x144>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	d106      	bne.n	80099a2 <HAL_TIM_Encoder_Init+0x2e>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7fb fc1b 	bl	80051d8 <HAL_TIM_Encoder_MspInit>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	6812      	ldr	r2, [r2, #0]
 80099b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099b8:	f023 0307 	bic.w	r3, r3, #7
 80099bc:	6093      	str	r3, [r2, #8]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3304      	adds	r3, #4
 80099c6:	4619      	mov	r1, r3
 80099c8:	4610      	mov	r0, r2
 80099ca:	f000 fbc1 	bl	800a150 <TIM_Base_SetConfig>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	617b      	str	r3, [r7, #20]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	613b      	str	r3, [r7, #16]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	60fb      	str	r3, [r7, #12]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	617b      	str	r3, [r7, #20]
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099f6:	f023 0303 	bic.w	r3, r3, #3
 80099fa:	613b      	str	r3, [r7, #16]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	021b      	lsls	r3, r3, #8
 8009a06:	4313      	orrs	r3, r2
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	613b      	str	r3, [r7, #16]
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009a14:	f023 030c 	bic.w	r3, r3, #12
 8009a18:	613b      	str	r3, [r7, #16]
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a24:	613b      	str	r3, [r7, #16]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	68da      	ldr	r2, [r3, #12]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	021b      	lsls	r3, r3, #8
 8009a30:	4313      	orrs	r3, r2
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	613b      	str	r3, [r7, #16]
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	011a      	lsls	r2, r3, #4
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	031b      	lsls	r3, r3, #12
 8009a44:	4313      	orrs	r3, r2
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	613b      	str	r3, [r7, #16]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	695b      	ldr	r3, [r3, #20]
 8009a64:	011b      	lsls	r3, r3, #4
 8009a66:	4313      	orrs	r3, r2
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	60fb      	str	r3, [r7, #12]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	609a      	str	r2, [r3, #8]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	619a      	str	r2, [r3, #24]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	621a      	str	r2, [r3, #32]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2201      	movs	r2, #1
 8009a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3718      	adds	r7, #24
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <HAL_TIM_Encoder_Start>:
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ad0:	73fb      	strb	r3, [r7, #15]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ad8:	73bb      	strb	r3, [r7, #14]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ae0:	737b      	strb	r3, [r7, #13]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009ae8:	733b      	strb	r3, [r7, #12]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d110      	bne.n	8009b12 <HAL_TIM_Encoder_Start+0x52>
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d102      	bne.n	8009afc <HAL_TIM_Encoder_Start+0x3c>
 8009af6:	7b7b      	ldrb	r3, [r7, #13]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d001      	beq.n	8009b00 <HAL_TIM_Encoder_Start+0x40>
 8009afc:	2301      	movs	r3, #1
 8009afe:	e069      	b.n	8009bd4 <HAL_TIM_Encoder_Start+0x114>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b10:	e031      	b.n	8009b76 <HAL_TIM_Encoder_Start+0xb6>
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	2b04      	cmp	r3, #4
 8009b16:	d110      	bne.n	8009b3a <HAL_TIM_Encoder_Start+0x7a>
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d102      	bne.n	8009b24 <HAL_TIM_Encoder_Start+0x64>
 8009b1e:	7b3b      	ldrb	r3, [r7, #12]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d001      	beq.n	8009b28 <HAL_TIM_Encoder_Start+0x68>
 8009b24:	2301      	movs	r3, #1
 8009b26:	e055      	b.n	8009bd4 <HAL_TIM_Encoder_Start+0x114>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2202      	movs	r2, #2
 8009b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b38:	e01d      	b.n	8009b76 <HAL_TIM_Encoder_Start+0xb6>
 8009b3a:	7bfb      	ldrb	r3, [r7, #15]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d108      	bne.n	8009b52 <HAL_TIM_Encoder_Start+0x92>
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d105      	bne.n	8009b52 <HAL_TIM_Encoder_Start+0x92>
 8009b46:	7b7b      	ldrb	r3, [r7, #13]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d102      	bne.n	8009b52 <HAL_TIM_Encoder_Start+0x92>
 8009b4c:	7b3b      	ldrb	r3, [r7, #12]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d001      	beq.n	8009b56 <HAL_TIM_Encoder_Start+0x96>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e03e      	b.n	8009bd4 <HAL_TIM_Encoder_Start+0x114>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2202      	movs	r2, #2
 8009b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2202      	movs	r2, #2
 8009b62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2202      	movs	r2, #2
 8009b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2202      	movs	r2, #2
 8009b72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d003      	beq.n	8009b84 <HAL_TIM_Encoder_Start+0xc4>
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	d008      	beq.n	8009b94 <HAL_TIM_Encoder_Start+0xd4>
 8009b82:	e00f      	b.n	8009ba4 <HAL_TIM_Encoder_Start+0xe4>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f000 fd85 	bl	800a69c <TIM_CCxChannelCmd>
 8009b92:	e016      	b.n	8009bc2 <HAL_TIM_Encoder_Start+0x102>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	2104      	movs	r1, #4
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 fd7d 	bl	800a69c <TIM_CCxChannelCmd>
 8009ba2:	e00e      	b.n	8009bc2 <HAL_TIM_Encoder_Start+0x102>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	2100      	movs	r1, #0
 8009bac:	4618      	mov	r0, r3
 8009bae:	f000 fd75 	bl	800a69c <TIM_CCxChannelCmd>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	2104      	movs	r1, #4
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 fd6e 	bl	800a69c <TIM_CCxChannelCmd>
 8009bc0:	bf00      	nop
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f042 0201 	orr.w	r2, r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <HAL_TIM_IRQHandler>:
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	f003 0302 	and.w	r3, r3, #2
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d122      	bne.n	8009c38 <HAL_TIM_IRQHandler+0x5c>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f003 0302 	and.w	r3, r3, #2
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d11b      	bne.n	8009c38 <HAL_TIM_IRQHandler+0x5c>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f06f 0202 	mvn.w	r2, #2
 8009c08:	611a      	str	r2, [r3, #16]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	771a      	strb	r2, [r3, #28]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	f003 0303 	and.w	r3, r3, #3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d003      	beq.n	8009c26 <HAL_TIM_IRQHandler+0x4a>
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 fa77 	bl	800a112 <HAL_TIM_IC_CaptureCallback>
 8009c24:	e005      	b.n	8009c32 <HAL_TIM_IRQHandler+0x56>
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa69 	bl	800a0fe <HAL_TIM_OC_DelayElapsedCallback>
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fa7a 	bl	800a126 <HAL_TIM_PWM_PulseFinishedCallback>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	771a      	strb	r2, [r3, #28]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	f003 0304 	and.w	r3, r3, #4
 8009c42:	2b04      	cmp	r3, #4
 8009c44:	d122      	bne.n	8009c8c <HAL_TIM_IRQHandler+0xb0>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	f003 0304 	and.w	r3, r3, #4
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	d11b      	bne.n	8009c8c <HAL_TIM_IRQHandler+0xb0>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f06f 0204 	mvn.w	r2, #4
 8009c5c:	611a      	str	r2, [r3, #16]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2202      	movs	r2, #2
 8009c62:	771a      	strb	r2, [r3, #28]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <HAL_TIM_IRQHandler+0x9e>
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa4d 	bl	800a112 <HAL_TIM_IC_CaptureCallback>
 8009c78:	e005      	b.n	8009c86 <HAL_TIM_IRQHandler+0xaa>
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fa3f 	bl	800a0fe <HAL_TIM_OC_DelayElapsedCallback>
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fa50 	bl	800a126 <HAL_TIM_PWM_PulseFinishedCallback>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	771a      	strb	r2, [r3, #28]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	f003 0308 	and.w	r3, r3, #8
 8009c96:	2b08      	cmp	r3, #8
 8009c98:	d122      	bne.n	8009ce0 <HAL_TIM_IRQHandler+0x104>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	f003 0308 	and.w	r3, r3, #8
 8009ca4:	2b08      	cmp	r3, #8
 8009ca6:	d11b      	bne.n	8009ce0 <HAL_TIM_IRQHandler+0x104>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f06f 0208 	mvn.w	r2, #8
 8009cb0:	611a      	str	r2, [r3, #16]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2204      	movs	r2, #4
 8009cb6:	771a      	strb	r2, [r3, #28]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	69db      	ldr	r3, [r3, #28]
 8009cbe:	f003 0303 	and.w	r3, r3, #3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d003      	beq.n	8009cce <HAL_TIM_IRQHandler+0xf2>
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fa23 	bl	800a112 <HAL_TIM_IC_CaptureCallback>
 8009ccc:	e005      	b.n	8009cda <HAL_TIM_IRQHandler+0xfe>
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fa15 	bl	800a0fe <HAL_TIM_OC_DelayElapsedCallback>
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fa26 	bl	800a126 <HAL_TIM_PWM_PulseFinishedCallback>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	771a      	strb	r2, [r3, #28]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	f003 0310 	and.w	r3, r3, #16
 8009cea:	2b10      	cmp	r3, #16
 8009cec:	d122      	bne.n	8009d34 <HAL_TIM_IRQHandler+0x158>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	f003 0310 	and.w	r3, r3, #16
 8009cf8:	2b10      	cmp	r3, #16
 8009cfa:	d11b      	bne.n	8009d34 <HAL_TIM_IRQHandler+0x158>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f06f 0210 	mvn.w	r2, #16
 8009d04:	611a      	str	r2, [r3, #16]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2208      	movs	r2, #8
 8009d0a:	771a      	strb	r2, [r3, #28]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <HAL_TIM_IRQHandler+0x146>
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f9f9 	bl	800a112 <HAL_TIM_IC_CaptureCallback>
 8009d20:	e005      	b.n	8009d2e <HAL_TIM_IRQHandler+0x152>
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f9eb 	bl	800a0fe <HAL_TIM_OC_DelayElapsedCallback>
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f9fc 	bl	800a126 <HAL_TIM_PWM_PulseFinishedCallback>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	771a      	strb	r2, [r3, #28]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d10e      	bne.n	8009d60 <HAL_TIM_IRQHandler+0x184>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d107      	bne.n	8009d60 <HAL_TIM_IRQHandler+0x184>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f06f 0201 	mvn.w	r2, #1
 8009d58:	611a      	str	r2, [r3, #16]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7f9 f8e4 	bl	8002f28 <HAL_TIM_PeriodElapsedCallback>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d6a:	2b80      	cmp	r3, #128	; 0x80
 8009d6c:	d10e      	bne.n	8009d8c <HAL_TIM_IRQHandler+0x1b0>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d78:	2b80      	cmp	r3, #128	; 0x80
 8009d7a:	d107      	bne.n	8009d8c <HAL_TIM_IRQHandler+0x1b0>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d84:	611a      	str	r2, [r3, #16]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fd26 	bl	800a7d8 <HAL_TIMEx_BreakCallback>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d96:	2b40      	cmp	r3, #64	; 0x40
 8009d98:	d10e      	bne.n	8009db8 <HAL_TIM_IRQHandler+0x1dc>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da4:	2b40      	cmp	r3, #64	; 0x40
 8009da6:	d107      	bne.n	8009db8 <HAL_TIM_IRQHandler+0x1dc>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009db0:	611a      	str	r2, [r3, #16]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f9c1 	bl	800a13a <HAL_TIM_TriggerCallback>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	f003 0320 	and.w	r3, r3, #32
 8009dc2:	2b20      	cmp	r3, #32
 8009dc4:	d10e      	bne.n	8009de4 <HAL_TIM_IRQHandler+0x208>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	f003 0320 	and.w	r3, r3, #32
 8009dd0:	2b20      	cmp	r3, #32
 8009dd2:	d107      	bne.n	8009de4 <HAL_TIM_IRQHandler+0x208>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f06f 0220 	mvn.w	r2, #32
 8009ddc:	611a      	str	r2, [r3, #16]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 fcf0 	bl	800a7c4 <HAL_TIMEx_CommutCallback>
 8009de4:	bf00      	nop
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <HAL_TIM_PWM_ConfigChannel>:
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	75fb      	strb	r3, [r7, #23]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d101      	bne.n	8009e0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e06:	2302      	movs	r3, #2
 8009e08:	e0ae      	b.n	8009f68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b0c      	cmp	r3, #12
 8009e16:	f200 809f 	bhi.w	8009f58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009e1a:	a201      	add	r2, pc, #4	; (adr r2, 8009e20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e20:	08009e55 	.word	0x08009e55
 8009e24:	08009f59 	.word	0x08009f59
 8009e28:	08009f59 	.word	0x08009f59
 8009e2c:	08009f59 	.word	0x08009f59
 8009e30:	08009e95 	.word	0x08009e95
 8009e34:	08009f59 	.word	0x08009f59
 8009e38:	08009f59 	.word	0x08009f59
 8009e3c:	08009f59 	.word	0x08009f59
 8009e40:	08009ed7 	.word	0x08009ed7
 8009e44:	08009f59 	.word	0x08009f59
 8009e48:	08009f59 	.word	0x08009f59
 8009e4c:	08009f59 	.word	0x08009f59
 8009e50:	08009f17 	.word	0x08009f17
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68b9      	ldr	r1, [r7, #8]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 f9f8 	bl	800a250 <TIM_OC1_SetConfig>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	699a      	ldr	r2, [r3, #24]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f042 0208 	orr.w	r2, r2, #8
 8009e6e:	619a      	str	r2, [r3, #24]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	699a      	ldr	r2, [r3, #24]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f022 0204 	bic.w	r2, r2, #4
 8009e7e:	619a      	str	r2, [r3, #24]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6999      	ldr	r1, [r3, #24]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	691a      	ldr	r2, [r3, #16]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	430a      	orrs	r2, r1
 8009e90:	619a      	str	r2, [r3, #24]
 8009e92:	e064      	b.n	8009f5e <HAL_TIM_PWM_ConfigChannel+0x172>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68b9      	ldr	r1, [r7, #8]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 fa3e 	bl	800a31c <TIM_OC2_SetConfig>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	699a      	ldr	r2, [r3, #24]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009eae:	619a      	str	r2, [r3, #24]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	699a      	ldr	r2, [r3, #24]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ebe:	619a      	str	r2, [r3, #24]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6999      	ldr	r1, [r3, #24]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	021a      	lsls	r2, r3, #8
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	619a      	str	r2, [r3, #24]
 8009ed4:	e043      	b.n	8009f5e <HAL_TIM_PWM_ConfigChannel+0x172>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68b9      	ldr	r1, [r7, #8]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 fa89 	bl	800a3f4 <TIM_OC3_SetConfig>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	69da      	ldr	r2, [r3, #28]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f042 0208 	orr.w	r2, r2, #8
 8009ef0:	61da      	str	r2, [r3, #28]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	69da      	ldr	r2, [r3, #28]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f022 0204 	bic.w	r2, r2, #4
 8009f00:	61da      	str	r2, [r3, #28]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	69d9      	ldr	r1, [r3, #28]
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	691a      	ldr	r2, [r3, #16]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	430a      	orrs	r2, r1
 8009f12:	61da      	str	r2, [r3, #28]
 8009f14:	e023      	b.n	8009f5e <HAL_TIM_PWM_ConfigChannel+0x172>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68b9      	ldr	r1, [r7, #8]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f000 fad3 	bl	800a4c8 <TIM_OC4_SetConfig>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	69da      	ldr	r2, [r3, #28]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f30:	61da      	str	r2, [r3, #28]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	69da      	ldr	r2, [r3, #28]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f40:	61da      	str	r2, [r3, #28]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	69d9      	ldr	r1, [r3, #28]
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	021a      	lsls	r2, r3, #8
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	430a      	orrs	r2, r1
 8009f54:	61da      	str	r2, [r3, #28]
 8009f56:	e002      	b.n	8009f5e <HAL_TIM_PWM_ConfigChannel+0x172>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	75fb      	strb	r3, [r7, #23]
 8009f5c:	bf00      	nop
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <HAL_TIM_ConfigClockSource>:
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	73fb      	strb	r3, [r7, #15]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d101      	bne.n	8009f8c <HAL_TIM_ConfigClockSource+0x1c>
 8009f88:	2302      	movs	r3, #2
 8009f8a:	e0b4      	b.n	800a0f6 <HAL_TIM_ConfigClockSource+0x186>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2202      	movs	r2, #2
 8009f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	60bb      	str	r3, [r7, #8]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009faa:	60bb      	str	r3, [r7, #8]
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fb2:	60bb      	str	r3, [r7, #8]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	609a      	str	r2, [r3, #8]
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fc4:	d03e      	beq.n	800a044 <HAL_TIM_ConfigClockSource+0xd4>
 8009fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fca:	f200 8087 	bhi.w	800a0dc <HAL_TIM_ConfigClockSource+0x16c>
 8009fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd2:	f000 8086 	beq.w	800a0e2 <HAL_TIM_ConfigClockSource+0x172>
 8009fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fda:	d87f      	bhi.n	800a0dc <HAL_TIM_ConfigClockSource+0x16c>
 8009fdc:	2b70      	cmp	r3, #112	; 0x70
 8009fde:	d01a      	beq.n	800a016 <HAL_TIM_ConfigClockSource+0xa6>
 8009fe0:	2b70      	cmp	r3, #112	; 0x70
 8009fe2:	d87b      	bhi.n	800a0dc <HAL_TIM_ConfigClockSource+0x16c>
 8009fe4:	2b60      	cmp	r3, #96	; 0x60
 8009fe6:	d050      	beq.n	800a08a <HAL_TIM_ConfigClockSource+0x11a>
 8009fe8:	2b60      	cmp	r3, #96	; 0x60
 8009fea:	d877      	bhi.n	800a0dc <HAL_TIM_ConfigClockSource+0x16c>
 8009fec:	2b50      	cmp	r3, #80	; 0x50
 8009fee:	d03c      	beq.n	800a06a <HAL_TIM_ConfigClockSource+0xfa>
 8009ff0:	2b50      	cmp	r3, #80	; 0x50
 8009ff2:	d873      	bhi.n	800a0dc <HAL_TIM_ConfigClockSource+0x16c>
 8009ff4:	2b40      	cmp	r3, #64	; 0x40
 8009ff6:	d058      	beq.n	800a0aa <HAL_TIM_ConfigClockSource+0x13a>
 8009ff8:	2b40      	cmp	r3, #64	; 0x40
 8009ffa:	d86f      	bhi.n	800a0dc <HAL_TIM_ConfigClockSource+0x16c>
 8009ffc:	2b30      	cmp	r3, #48	; 0x30
 8009ffe:	d064      	beq.n	800a0ca <HAL_TIM_ConfigClockSource+0x15a>
 800a000:	2b30      	cmp	r3, #48	; 0x30
 800a002:	d86b      	bhi.n	800a0dc <HAL_TIM_ConfigClockSource+0x16c>
 800a004:	2b20      	cmp	r3, #32
 800a006:	d060      	beq.n	800a0ca <HAL_TIM_ConfigClockSource+0x15a>
 800a008:	2b20      	cmp	r3, #32
 800a00a:	d867      	bhi.n	800a0dc <HAL_TIM_ConfigClockSource+0x16c>
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d05c      	beq.n	800a0ca <HAL_TIM_ConfigClockSource+0x15a>
 800a010:	2b10      	cmp	r3, #16
 800a012:	d05a      	beq.n	800a0ca <HAL_TIM_ConfigClockSource+0x15a>
 800a014:	e062      	b.n	800a0dc <HAL_TIM_ConfigClockSource+0x16c>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6818      	ldr	r0, [r3, #0]
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	6899      	ldr	r1, [r3, #8]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f000 fb19 	bl	800a65c <TIM_ETR_SetConfig>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	60bb      	str	r3, [r7, #8]
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a038:	60bb      	str	r3, [r7, #8]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	609a      	str	r2, [r3, #8]
 800a042:	e04f      	b.n	800a0e4 <HAL_TIM_ConfigClockSource+0x174>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6818      	ldr	r0, [r3, #0]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	6899      	ldr	r1, [r3, #8]
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f000 fb02 	bl	800a65c <TIM_ETR_SetConfig>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	689a      	ldr	r2, [r3, #8]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a066:	609a      	str	r2, [r3, #8]
 800a068:	e03c      	b.n	800a0e4 <HAL_TIM_ConfigClockSource+0x174>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6818      	ldr	r0, [r3, #0]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	6859      	ldr	r1, [r3, #4]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	461a      	mov	r2, r3
 800a078:	f000 fa76 	bl	800a568 <TIM_TI1_ConfigInputStage>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2150      	movs	r1, #80	; 0x50
 800a082:	4618      	mov	r0, r3
 800a084:	f000 facf 	bl	800a626 <TIM_ITRx_SetConfig>
 800a088:	e02c      	b.n	800a0e4 <HAL_TIM_ConfigClockSource+0x174>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6818      	ldr	r0, [r3, #0]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	6859      	ldr	r1, [r3, #4]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	461a      	mov	r2, r3
 800a098:	f000 fa95 	bl	800a5c6 <TIM_TI2_ConfigInputStage>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2160      	movs	r1, #96	; 0x60
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 fabf 	bl	800a626 <TIM_ITRx_SetConfig>
 800a0a8:	e01c      	b.n	800a0e4 <HAL_TIM_ConfigClockSource+0x174>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6818      	ldr	r0, [r3, #0]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	6859      	ldr	r1, [r3, #4]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f000 fa56 	bl	800a568 <TIM_TI1_ConfigInputStage>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2140      	movs	r1, #64	; 0x40
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 faaf 	bl	800a626 <TIM_ITRx_SetConfig>
 800a0c8:	e00c      	b.n	800a0e4 <HAL_TIM_ConfigClockSource+0x174>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	f000 faa6 	bl	800a626 <TIM_ITRx_SetConfig>
 800a0da:	e003      	b.n	800a0e4 <HAL_TIM_ConfigClockSource+0x174>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	73fb      	strb	r3, [r7, #15]
 800a0e0:	e000      	b.n	800a0e4 <HAL_TIM_ConfigClockSource+0x174>
 800a0e2:	bf00      	nop
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <HAL_TIM_OC_DelayElapsedCallback>:
 800a0fe:	b480      	push	{r7}
 800a100:	b083      	sub	sp, #12
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	bf00      	nop
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <HAL_TIM_IC_CaptureCallback>:
 800a112:	b480      	push	{r7}
 800a114:	b083      	sub	sp, #12
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	bf00      	nop
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a126:	b480      	push	{r7}
 800a128:	b083      	sub	sp, #12
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	bf00      	nop
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <HAL_TIM_TriggerCallback>:
 800a13a:	b480      	push	{r7}
 800a13c:	b083      	sub	sp, #12
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	bf00      	nop
 800a144:	370c      	adds	r7, #12
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
	...

0800a150 <TIM_Base_SetConfig>:
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	60fb      	str	r3, [r7, #12]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a34      	ldr	r2, [pc, #208]	; (800a234 <TIM_Base_SetConfig+0xe4>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d00f      	beq.n	800a188 <TIM_Base_SetConfig+0x38>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a16e:	d00b      	beq.n	800a188 <TIM_Base_SetConfig+0x38>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a31      	ldr	r2, [pc, #196]	; (800a238 <TIM_Base_SetConfig+0xe8>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d007      	beq.n	800a188 <TIM_Base_SetConfig+0x38>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a30      	ldr	r2, [pc, #192]	; (800a23c <TIM_Base_SetConfig+0xec>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d003      	beq.n	800a188 <TIM_Base_SetConfig+0x38>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a2f      	ldr	r2, [pc, #188]	; (800a240 <TIM_Base_SetConfig+0xf0>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d108      	bne.n	800a19a <TIM_Base_SetConfig+0x4a>
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a18e:	60fb      	str	r3, [r7, #12]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	4313      	orrs	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a25      	ldr	r2, [pc, #148]	; (800a234 <TIM_Base_SetConfig+0xe4>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d01b      	beq.n	800a1da <TIM_Base_SetConfig+0x8a>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1a8:	d017      	beq.n	800a1da <TIM_Base_SetConfig+0x8a>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a22      	ldr	r2, [pc, #136]	; (800a238 <TIM_Base_SetConfig+0xe8>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d013      	beq.n	800a1da <TIM_Base_SetConfig+0x8a>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a21      	ldr	r2, [pc, #132]	; (800a23c <TIM_Base_SetConfig+0xec>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d00f      	beq.n	800a1da <TIM_Base_SetConfig+0x8a>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a20      	ldr	r2, [pc, #128]	; (800a240 <TIM_Base_SetConfig+0xf0>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d00b      	beq.n	800a1da <TIM_Base_SetConfig+0x8a>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a1f      	ldr	r2, [pc, #124]	; (800a244 <TIM_Base_SetConfig+0xf4>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d007      	beq.n	800a1da <TIM_Base_SetConfig+0x8a>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a1e      	ldr	r2, [pc, #120]	; (800a248 <TIM_Base_SetConfig+0xf8>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d003      	beq.n	800a1da <TIM_Base_SetConfig+0x8a>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a1d      	ldr	r2, [pc, #116]	; (800a24c <TIM_Base_SetConfig+0xfc>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d108      	bne.n	800a1ec <TIM_Base_SetConfig+0x9c>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1e0:	60fb      	str	r3, [r7, #12]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	62da      	str	r2, [r3, #44]	; 0x2c
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	629a      	str	r2, [r3, #40]	; 0x28
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a08      	ldr	r2, [pc, #32]	; (800a234 <TIM_Base_SetConfig+0xe4>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d103      	bne.n	800a220 <TIM_Base_SetConfig+0xd0>
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	631a      	str	r2, [r3, #48]	; 0x30
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	615a      	str	r2, [r3, #20]
 800a226:	bf00      	nop
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	40010000 	.word	0x40010000
 800a238:	40000400 	.word	0x40000400
 800a23c:	40000800 	.word	0x40000800
 800a240:	40000c00 	.word	0x40000c00
 800a244:	40014000 	.word	0x40014000
 800a248:	40014400 	.word	0x40014400
 800a24c:	40014800 	.word	0x40014800

0800a250 <TIM_OC1_SetConfig>:
 800a250:	b480      	push	{r7}
 800a252:	b087      	sub	sp, #28
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	f023 0201 	bic.w	r2, r3, #1
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	621a      	str	r2, [r3, #32]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	617b      	str	r3, [r7, #20]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	613b      	str	r3, [r7, #16]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	60fb      	str	r3, [r7, #12]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f023 0303 	bic.w	r3, r3, #3
 800a286:	60fb      	str	r3, [r7, #12]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	4313      	orrs	r3, r2
 800a290:	60fb      	str	r3, [r7, #12]
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f023 0302 	bic.w	r3, r3, #2
 800a298:	617b      	str	r3, [r7, #20]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	617b      	str	r3, [r7, #20]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a1c      	ldr	r2, [pc, #112]	; (800a318 <TIM_OC1_SetConfig+0xc8>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d10c      	bne.n	800a2c6 <TIM_OC1_SetConfig+0x76>
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	f023 0308 	bic.w	r3, r3, #8
 800a2b2:	617b      	str	r3, [r7, #20]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	697a      	ldr	r2, [r7, #20]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	617b      	str	r3, [r7, #20]
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f023 0304 	bic.w	r3, r3, #4
 800a2c4:	617b      	str	r3, [r7, #20]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a13      	ldr	r2, [pc, #76]	; (800a318 <TIM_OC1_SetConfig+0xc8>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d111      	bne.n	800a2f2 <TIM_OC1_SetConfig+0xa2>
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2d4:	613b      	str	r3, [r7, #16]
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2dc:	613b      	str	r3, [r7, #16]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	613b      	str	r3, [r7, #16]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	613b      	str	r3, [r7, #16]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	605a      	str	r2, [r3, #4]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	619a      	str	r2, [r3, #24]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	635a      	str	r2, [r3, #52]	; 0x34
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	621a      	str	r2, [r3, #32]
 800a30c:	bf00      	nop
 800a30e:	371c      	adds	r7, #28
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	40010000 	.word	0x40010000

0800a31c <TIM_OC2_SetConfig>:
 800a31c:	b480      	push	{r7}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a1b      	ldr	r3, [r3, #32]
 800a32a:	f023 0210 	bic.w	r2, r3, #16
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	621a      	str	r2, [r3, #32]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	617b      	str	r3, [r7, #20]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	613b      	str	r3, [r7, #16]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a34a:	60fb      	str	r3, [r7, #12]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a352:	60fb      	str	r3, [r7, #12]
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	021b      	lsls	r3, r3, #8
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	60fb      	str	r3, [r7, #12]
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	f023 0320 	bic.w	r3, r3, #32
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	011b      	lsls	r3, r3, #4
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	4313      	orrs	r3, r2
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a1e      	ldr	r2, [pc, #120]	; (800a3f0 <TIM_OC2_SetConfig+0xd4>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d10d      	bne.n	800a398 <TIM_OC2_SetConfig+0x7c>
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a382:	617b      	str	r3, [r7, #20]
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	011b      	lsls	r3, r3, #4
 800a38a:	697a      	ldr	r2, [r7, #20]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	617b      	str	r3, [r7, #20]
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a396:	617b      	str	r3, [r7, #20]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a15      	ldr	r2, [pc, #84]	; (800a3f0 <TIM_OC2_SetConfig+0xd4>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d113      	bne.n	800a3c8 <TIM_OC2_SetConfig+0xac>
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3a6:	613b      	str	r3, [r7, #16]
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3ae:	613b      	str	r3, [r7, #16]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	613b      	str	r3, [r7, #16]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	613b      	str	r3, [r7, #16]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	605a      	str	r2, [r3, #4]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	619a      	str	r2, [r3, #24]
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	685a      	ldr	r2, [r3, #4]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	639a      	str	r2, [r3, #56]	; 0x38
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	621a      	str	r2, [r3, #32]
 800a3e2:	bf00      	nop
 800a3e4:	371c      	adds	r7, #28
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	40010000 	.word	0x40010000

0800a3f4 <TIM_OC3_SetConfig>:
 800a3f4:	b480      	push	{r7}
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	621a      	str	r2, [r3, #32]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a1b      	ldr	r3, [r3, #32]
 800a40e:	617b      	str	r3, [r7, #20]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	613b      	str	r3, [r7, #16]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a422:	60fb      	str	r3, [r7, #12]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f023 0303 	bic.w	r3, r3, #3
 800a42a:	60fb      	str	r3, [r7, #12]
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	4313      	orrs	r3, r2
 800a434:	60fb      	str	r3, [r7, #12]
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a43c:	617b      	str	r3, [r7, #20]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	021b      	lsls	r3, r3, #8
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	4313      	orrs	r3, r2
 800a448:	617b      	str	r3, [r7, #20]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a1d      	ldr	r2, [pc, #116]	; (800a4c4 <TIM_OC3_SetConfig+0xd0>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d10d      	bne.n	800a46e <TIM_OC3_SetConfig+0x7a>
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a458:	617b      	str	r3, [r7, #20]
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	021b      	lsls	r3, r3, #8
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	4313      	orrs	r3, r2
 800a464:	617b      	str	r3, [r7, #20]
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a46c:	617b      	str	r3, [r7, #20]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a14      	ldr	r2, [pc, #80]	; (800a4c4 <TIM_OC3_SetConfig+0xd0>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d113      	bne.n	800a49e <TIM_OC3_SetConfig+0xaa>
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a47c:	613b      	str	r3, [r7, #16]
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a484:	613b      	str	r3, [r7, #16]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	011b      	lsls	r3, r3, #4
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	4313      	orrs	r3, r2
 800a490:	613b      	str	r3, [r7, #16]
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	011b      	lsls	r3, r3, #4
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	613b      	str	r3, [r7, #16]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	605a      	str	r2, [r3, #4]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	61da      	str	r2, [r3, #28]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	63da      	str	r2, [r3, #60]	; 0x3c
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	621a      	str	r2, [r3, #32]
 800a4b8:	bf00      	nop
 800a4ba:	371c      	adds	r7, #28
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr
 800a4c4:	40010000 	.word	0x40010000

0800a4c8 <TIM_OC4_SetConfig>:
 800a4c8:	b480      	push	{r7}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a1b      	ldr	r3, [r3, #32]
 800a4d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	621a      	str	r2, [r3, #32]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	613b      	str	r3, [r7, #16]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	617b      	str	r3, [r7, #20]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	69db      	ldr	r3, [r3, #28]
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4f6:	60fb      	str	r3, [r7, #12]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4fe:	60fb      	str	r3, [r7, #12]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	021b      	lsls	r3, r3, #8
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	4313      	orrs	r3, r2
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a512:	613b      	str	r3, [r7, #16]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	031b      	lsls	r3, r3, #12
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	613b      	str	r3, [r7, #16]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a10      	ldr	r2, [pc, #64]	; (800a564 <TIM_OC4_SetConfig+0x9c>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d109      	bne.n	800a53c <TIM_OC4_SetConfig+0x74>
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a52e:	617b      	str	r3, [r7, #20]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	695b      	ldr	r3, [r3, #20]
 800a534:	019b      	lsls	r3, r3, #6
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	4313      	orrs	r3, r2
 800a53a:	617b      	str	r3, [r7, #20]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	605a      	str	r2, [r3, #4]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	61da      	str	r2, [r3, #28]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	641a      	str	r2, [r3, #64]	; 0x40
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	621a      	str	r2, [r3, #32]
 800a556:	bf00      	nop
 800a558:	371c      	adds	r7, #28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	40010000 	.word	0x40010000

0800a568 <TIM_TI1_ConfigInputStage>:
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6a1b      	ldr	r3, [r3, #32]
 800a578:	617b      	str	r3, [r7, #20]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	f023 0201 	bic.w	r2, r3, #1
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	621a      	str	r2, [r3, #32]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	613b      	str	r3, [r7, #16]
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a592:	613b      	str	r3, [r7, #16]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	011b      	lsls	r3, r3, #4
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	613b      	str	r3, [r7, #16]
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f023 030a 	bic.w	r3, r3, #10
 800a5a4:	617b      	str	r3, [r7, #20]
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	617b      	str	r3, [r7, #20]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	693a      	ldr	r2, [r7, #16]
 800a5b2:	619a      	str	r2, [r3, #24]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	621a      	str	r2, [r3, #32]
 800a5ba:	bf00      	nop
 800a5bc:	371c      	adds	r7, #28
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <TIM_TI2_ConfigInputStage>:
 800a5c6:	b480      	push	{r7}
 800a5c8:	b087      	sub	sp, #28
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	60f8      	str	r0, [r7, #12]
 800a5ce:	60b9      	str	r1, [r7, #8]
 800a5d0:	607a      	str	r2, [r7, #4]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	f023 0210 	bic.w	r2, r3, #16
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	621a      	str	r2, [r3, #32]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	699b      	ldr	r3, [r3, #24]
 800a5e2:	617b      	str	r3, [r7, #20]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6a1b      	ldr	r3, [r3, #32]
 800a5e8:	613b      	str	r3, [r7, #16]
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	031b      	lsls	r3, r3, #12
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	617b      	str	r3, [r7, #20]
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a602:	613b      	str	r3, [r7, #16]
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	011b      	lsls	r3, r3, #4
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	613b      	str	r3, [r7, #16]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	619a      	str	r2, [r3, #24]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	621a      	str	r2, [r3, #32]
 800a61a:	bf00      	nop
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <TIM_ITRx_SetConfig>:
 800a626:	b480      	push	{r7}
 800a628:	b085      	sub	sp, #20
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	6039      	str	r1, [r7, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	60fb      	str	r3, [r7, #12]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a63c:	60fb      	str	r3, [r7, #12]
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4313      	orrs	r3, r2
 800a644:	f043 0307 	orr.w	r3, r3, #7
 800a648:	60fb      	str	r3, [r7, #12]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68fa      	ldr	r2, [r7, #12]
 800a64e:	609a      	str	r2, [r3, #8]
 800a650:	bf00      	nop
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <TIM_ETR_SetConfig>:
 800a65c:	b480      	push	{r7}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
 800a668:	603b      	str	r3, [r7, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	617b      	str	r3, [r7, #20]
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a676:	617b      	str	r3, [r7, #20]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	021a      	lsls	r2, r3, #8
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	431a      	orrs	r2, r3
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	4313      	orrs	r3, r2
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	4313      	orrs	r3, r2
 800a688:	617b      	str	r3, [r7, #20]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	609a      	str	r2, [r3, #8]
 800a690:	bf00      	nop
 800a692:	371c      	adds	r7, #28
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <TIM_CCxChannelCmd>:
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f003 031f 	and.w	r3, r3, #31
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b4:	617b      	str	r3, [r7, #20]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6a1a      	ldr	r2, [r3, #32]
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	43db      	mvns	r3, r3
 800a6be:	401a      	ands	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	621a      	str	r2, [r3, #32]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6a1a      	ldr	r2, [r3, #32]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	f003 031f 	and.w	r3, r3, #31
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d4:	431a      	orrs	r2, r3
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	621a      	str	r2, [r3, #32]
 800a6da:	bf00      	nop
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
	...

0800a6e8 <HAL_TIMEx_MasterConfigSynchronization>:
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d101      	bne.n	800a700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	e050      	b.n	800a7a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2202      	movs	r2, #2
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	60fb      	str	r3, [r7, #12]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	60bb      	str	r3, [r7, #8]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a726:	60fb      	str	r3, [r7, #12]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	605a      	str	r2, [r3, #4]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a1c      	ldr	r2, [pc, #112]	; (800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d018      	beq.n	800a776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a74c:	d013      	beq.n	800a776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a18      	ldr	r2, [pc, #96]	; (800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d00e      	beq.n	800a776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a16      	ldr	r2, [pc, #88]	; (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d009      	beq.n	800a776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a15      	ldr	r2, [pc, #84]	; (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d004      	beq.n	800a776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a13      	ldr	r2, [pc, #76]	; (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d10c      	bne.n	800a790 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a77c:	60bb      	str	r3, [r7, #8]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	4313      	orrs	r3, r2
 800a786:	60bb      	str	r3, [r7, #8]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	609a      	str	r2, [r3, #8]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3714      	adds	r7, #20
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	40010000 	.word	0x40010000
 800a7b4:	40000400 	.word	0x40000400
 800a7b8:	40000800 	.word	0x40000800
 800a7bc:	40000c00 	.word	0x40000c00
 800a7c0:	40014000 	.word	0x40014000

0800a7c4 <HAL_TIMEx_CommutCallback>:
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_TIMEx_BreakCallback>:
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_UART_Init>:
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d101      	bne.n	800a7fe <HAL_UART_Init+0x12>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e03f      	b.n	800a87e <HAL_UART_Init+0x92>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a804:	b2db      	uxtb	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	d106      	bne.n	800a818 <HAL_UART_Init+0x2c>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f7fa fdfc 	bl	8005410 <HAL_UART_MspInit>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2224      	movs	r2, #36	; 0x24
 800a81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68da      	ldr	r2, [r3, #12]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a82e:	60da      	str	r2, [r3, #12]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 fea5 	bl	800b580 <UART_SetConfig>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	691a      	ldr	r2, [r3, #16]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a844:	611a      	str	r2, [r3, #16]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	695a      	ldr	r2, [r3, #20]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a854:	615a      	str	r2, [r3, #20]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	68da      	ldr	r2, [r3, #12]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a864:	60da      	str	r2, [r3, #12]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	641a      	str	r2, [r3, #64]	; 0x40
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2220      	movs	r2, #32
 800a870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2220      	movs	r2, #32
 800a878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a87c:	2300      	movs	r3, #0
 800a87e:	4618      	mov	r0, r3
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <HAL_UART_DeInit>:
 800a886:	b580      	push	{r7, lr}
 800a888:	b082      	sub	sp, #8
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d101      	bne.n	800a898 <HAL_UART_DeInit+0x12>
 800a894:	2301      	movs	r3, #1
 800a896:	e021      	b.n	800a8dc <HAL_UART_DeInit+0x56>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2224      	movs	r2, #36	; 0x24
 800a89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	68da      	ldr	r2, [r3, #12]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a8ae:	60da      	str	r2, [r3, #12]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f7fa fe63 	bl	800557c <HAL_UART_MspDeInit>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	641a      	str	r2, [r3, #64]	; 0x40
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	631a      	str	r2, [r3, #48]	; 0x30
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a8da:	2300      	movs	r3, #0
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <HAL_UART_Transmit>:
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b08a      	sub	sp, #40	; 0x28
 800a8e8:	af02      	add	r7, sp, #8
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	603b      	str	r3, [r7, #0]
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	80fb      	strh	r3, [r7, #6]
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	617b      	str	r3, [r7, #20]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b20      	cmp	r3, #32
 800a902:	d17c      	bne.n	800a9fe <HAL_UART_Transmit+0x11a>
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d002      	beq.n	800a910 <HAL_UART_Transmit+0x2c>
 800a90a:	88fb      	ldrh	r3, [r7, #6]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <HAL_UART_Transmit+0x30>
 800a910:	2301      	movs	r3, #1
 800a912:	e075      	b.n	800aa00 <HAL_UART_Transmit+0x11c>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d101      	bne.n	800a922 <HAL_UART_Transmit+0x3e>
 800a91e:	2302      	movs	r3, #2
 800a920:	e06e      	b.n	800aa00 <HAL_UART_Transmit+0x11c>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2201      	movs	r2, #1
 800a926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	641a      	str	r2, [r3, #64]	; 0x40
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2221      	movs	r2, #33	; 0x21
 800a934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a938:	f7fb f840 	bl	80059bc <HAL_GetTick>
 800a93c:	6178      	str	r0, [r7, #20]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	88fa      	ldrh	r2, [r7, #6]
 800a942:	849a      	strh	r2, [r3, #36]	; 0x24
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	88fa      	ldrh	r2, [r7, #6]
 800a948:	84da      	strh	r2, [r3, #38]	; 0x26
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a952:	d108      	bne.n	800a966 <HAL_UART_Transmit+0x82>
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d104      	bne.n	800a966 <HAL_UART_Transmit+0x82>
 800a95c:	2300      	movs	r3, #0
 800a95e:	61fb      	str	r3, [r7, #28]
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	61bb      	str	r3, [r7, #24]
 800a964:	e003      	b.n	800a96e <HAL_UART_Transmit+0x8a>
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	61fb      	str	r3, [r7, #28]
 800a96a:	2300      	movs	r3, #0
 800a96c:	61bb      	str	r3, [r7, #24]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a976:	e02a      	b.n	800a9ce <HAL_UART_Transmit+0xea>
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	2200      	movs	r2, #0
 800a980:	2180      	movs	r1, #128	; 0x80
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 fbb6 	bl	800b0f4 <UART_WaitOnFlagUntilTimeout>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <HAL_UART_Transmit+0xae>
 800a98e:	2303      	movs	r3, #3
 800a990:	e036      	b.n	800aa00 <HAL_UART_Transmit+0x11c>
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10b      	bne.n	800a9b0 <HAL_UART_Transmit+0xcc>
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	461a      	mov	r2, r3
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9a6:	605a      	str	r2, [r3, #4]
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	3302      	adds	r3, #2
 800a9ac:	61bb      	str	r3, [r7, #24]
 800a9ae:	e007      	b.n	800a9c0 <HAL_UART_Transmit+0xdc>
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	781a      	ldrb	r2, [r3, #0]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	605a      	str	r2, [r3, #4]
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	3301      	adds	r3, #1
 800a9be:	61fb      	str	r3, [r7, #28]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	84da      	strh	r2, [r3, #38]	; 0x26
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1cf      	bne.n	800a978 <HAL_UART_Transmit+0x94>
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2140      	movs	r1, #64	; 0x40
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f000 fb86 	bl	800b0f4 <UART_WaitOnFlagUntilTimeout>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <HAL_UART_Transmit+0x10e>
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	e006      	b.n	800aa00 <HAL_UART_Transmit+0x11c>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	e000      	b.n	800aa00 <HAL_UART_Transmit+0x11c>
 800a9fe:	2302      	movs	r3, #2
 800aa00:	4618      	mov	r0, r3
 800aa02:	3720      	adds	r7, #32
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <HAL_UART_Receive>:
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b08a      	sub	sp, #40	; 0x28
 800aa0c:	af02      	add	r7, sp, #8
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	603b      	str	r3, [r7, #0]
 800aa14:	4613      	mov	r3, r2
 800aa16:	80fb      	strh	r3, [r7, #6]
 800aa18:	2300      	movs	r3, #0
 800aa1a:	617b      	str	r3, [r7, #20]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	2b20      	cmp	r3, #32
 800aa26:	f040 808c 	bne.w	800ab42 <HAL_UART_Receive+0x13a>
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <HAL_UART_Receive+0x2e>
 800aa30:	88fb      	ldrh	r3, [r7, #6]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d101      	bne.n	800aa3a <HAL_UART_Receive+0x32>
 800aa36:	2301      	movs	r3, #1
 800aa38:	e084      	b.n	800ab44 <HAL_UART_Receive+0x13c>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d101      	bne.n	800aa48 <HAL_UART_Receive+0x40>
 800aa44:	2302      	movs	r3, #2
 800aa46:	e07d      	b.n	800ab44 <HAL_UART_Receive+0x13c>
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	641a      	str	r2, [r3, #64]	; 0x40
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2222      	movs	r2, #34	; 0x22
 800aa5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2200      	movs	r2, #0
 800aa62:	631a      	str	r2, [r3, #48]	; 0x30
 800aa64:	f7fa ffaa 	bl	80059bc <HAL_GetTick>
 800aa68:	6178      	str	r0, [r7, #20]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	88fa      	ldrh	r2, [r7, #6]
 800aa6e:	859a      	strh	r2, [r3, #44]	; 0x2c
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	88fa      	ldrh	r2, [r7, #6]
 800aa74:	85da      	strh	r2, [r3, #46]	; 0x2e
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa7e:	d108      	bne.n	800aa92 <HAL_UART_Receive+0x8a>
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d104      	bne.n	800aa92 <HAL_UART_Receive+0x8a>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	61fb      	str	r3, [r7, #28]
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	61bb      	str	r3, [r7, #24]
 800aa90:	e003      	b.n	800aa9a <HAL_UART_Receive+0x92>
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	61fb      	str	r3, [r7, #28]
 800aa96:	2300      	movs	r3, #0
 800aa98:	61bb      	str	r3, [r7, #24]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aaa2:	e043      	b.n	800ab2c <HAL_UART_Receive+0x124>
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2120      	movs	r1, #32
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f000 fb20 	bl	800b0f4 <UART_WaitOnFlagUntilTimeout>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <HAL_UART_Receive+0xb6>
 800aaba:	2303      	movs	r3, #3
 800aabc:	e042      	b.n	800ab44 <HAL_UART_Receive+0x13c>
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10c      	bne.n	800aade <HAL_UART_Receive+0xd6>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad0:	b29a      	uxth	r2, r3
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	801a      	strh	r2, [r3, #0]
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	3302      	adds	r3, #2
 800aada:	61bb      	str	r3, [r7, #24]
 800aadc:	e01f      	b.n	800ab1e <HAL_UART_Receive+0x116>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aae6:	d007      	beq.n	800aaf8 <HAL_UART_Receive+0xf0>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10a      	bne.n	800ab06 <HAL_UART_Receive+0xfe>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d106      	bne.n	800ab06 <HAL_UART_Receive+0xfe>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	b2da      	uxtb	r2, r3
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	701a      	strb	r2, [r3, #0]
 800ab04:	e008      	b.n	800ab18 <HAL_UART_Receive+0x110>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab12:	b2da      	uxtb	r2, r3
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	701a      	strb	r2, [r3, #0]
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	61fb      	str	r3, [r7, #28]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	3b01      	subs	r3, #1
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1b6      	bne.n	800aaa4 <HAL_UART_Receive+0x9c>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2220      	movs	r2, #32
 800ab3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab3e:	2300      	movs	r3, #0
 800ab40:	e000      	b.n	800ab44 <HAL_UART_Receive+0x13c>
 800ab42:	2302      	movs	r3, #2
 800ab44:	4618      	mov	r0, r3
 800ab46:	3720      	adds	r7, #32
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <HAL_UART_Receive_IT>:
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	4613      	mov	r3, r2
 800ab58:	80fb      	strh	r3, [r7, #6]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b20      	cmp	r3, #32
 800ab64:	d11d      	bne.n	800aba2 <HAL_UART_Receive_IT+0x56>
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <HAL_UART_Receive_IT+0x26>
 800ab6c:	88fb      	ldrh	r3, [r7, #6]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <HAL_UART_Receive_IT+0x2a>
 800ab72:	2301      	movs	r3, #1
 800ab74:	e016      	b.n	800aba4 <HAL_UART_Receive_IT+0x58>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d101      	bne.n	800ab84 <HAL_UART_Receive_IT+0x38>
 800ab80:	2302      	movs	r3, #2
 800ab82:	e00f      	b.n	800aba4 <HAL_UART_Receive_IT+0x58>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	631a      	str	r2, [r3, #48]	; 0x30
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	461a      	mov	r2, r3
 800ab96:	68b9      	ldr	r1, [r7, #8]
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f000 fb19 	bl	800b1d0 <UART_Start_Receive_IT>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	e000      	b.n	800aba4 <HAL_UART_Receive_IT+0x58>
 800aba2:	2302      	movs	r3, #2
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <HAL_UART_IRQHandler>:
 800abac:	b580      	push	{r7, lr}
 800abae:	b0ba      	sub	sp, #232	; 0xe8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800abd2:	2300      	movs	r3, #0
 800abd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800abd8:	2300      	movs	r3, #0
 800abda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800abde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abe2:	f003 030f 	and.w	r3, r3, #15
 800abe6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800abea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d10f      	bne.n	800ac12 <HAL_UART_IRQHandler+0x66>
 800abf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abf6:	f003 0320 	and.w	r3, r3, #32
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d009      	beq.n	800ac12 <HAL_UART_IRQHandler+0x66>
 800abfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac02:	f003 0320 	and.w	r3, r3, #32
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d003      	beq.n	800ac12 <HAL_UART_IRQHandler+0x66>
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fbfd 	bl	800b40a <UART_Receive_IT>
 800ac10:	e256      	b.n	800b0c0 <HAL_UART_IRQHandler+0x514>
 800ac12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f000 80de 	beq.w	800add8 <HAL_UART_IRQHandler+0x22c>
 800ac1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d106      	bne.n	800ac36 <HAL_UART_IRQHandler+0x8a>
 800ac28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f000 80d1 	beq.w	800add8 <HAL_UART_IRQHandler+0x22c>
 800ac36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00b      	beq.n	800ac5a <HAL_UART_IRQHandler+0xae>
 800ac42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d005      	beq.n	800ac5a <HAL_UART_IRQHandler+0xae>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac52:	f043 0201 	orr.w	r2, r3, #1
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	641a      	str	r2, [r3, #64]	; 0x40
 800ac5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac5e:	f003 0304 	and.w	r3, r3, #4
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00b      	beq.n	800ac7e <HAL_UART_IRQHandler+0xd2>
 800ac66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d005      	beq.n	800ac7e <HAL_UART_IRQHandler+0xd2>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac76:	f043 0202 	orr.w	r2, r3, #2
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	641a      	str	r2, [r3, #64]	; 0x40
 800ac7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac82:	f003 0302 	and.w	r3, r3, #2
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00b      	beq.n	800aca2 <HAL_UART_IRQHandler+0xf6>
 800ac8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac8e:	f003 0301 	and.w	r3, r3, #1
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d005      	beq.n	800aca2 <HAL_UART_IRQHandler+0xf6>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9a:	f043 0204 	orr.w	r2, r3, #4
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	641a      	str	r2, [r3, #64]	; 0x40
 800aca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aca6:	f003 0308 	and.w	r3, r3, #8
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d011      	beq.n	800acd2 <HAL_UART_IRQHandler+0x126>
 800acae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acb2:	f003 0320 	and.w	r3, r3, #32
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d105      	bne.n	800acc6 <HAL_UART_IRQHandler+0x11a>
 800acba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d005      	beq.n	800acd2 <HAL_UART_IRQHandler+0x126>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acca:	f043 0208 	orr.w	r2, r3, #8
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	641a      	str	r2, [r3, #64]	; 0x40
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 81ed 	beq.w	800b0b6 <HAL_UART_IRQHandler+0x50a>
 800acdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ace0:	f003 0320 	and.w	r3, r3, #32
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d008      	beq.n	800acfa <HAL_UART_IRQHandler+0x14e>
 800ace8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acec:	f003 0320 	and.w	r3, r3, #32
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <HAL_UART_IRQHandler+0x14e>
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fb88 	bl	800b40a <UART_Receive_IT>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad04:	2b40      	cmp	r3, #64	; 0x40
 800ad06:	bf0c      	ite	eq
 800ad08:	2301      	moveq	r3, #1
 800ad0a:	2300      	movne	r3, #0
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad16:	f003 0308 	and.w	r3, r3, #8
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d103      	bne.n	800ad26 <HAL_UART_IRQHandler+0x17a>
 800ad1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d04f      	beq.n	800adc6 <HAL_UART_IRQHandler+0x21a>
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fa90 	bl	800b24c <UART_EndRxTransfer>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	695b      	ldr	r3, [r3, #20]
 800ad32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad36:	2b40      	cmp	r3, #64	; 0x40
 800ad38:	d141      	bne.n	800adbe <HAL_UART_IRQHandler+0x212>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3314      	adds	r3, #20
 800ad40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad48:	e853 3f00 	ldrex	r3, [r3]
 800ad4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ad50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3314      	adds	r3, #20
 800ad62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ad66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ad6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ad6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ad72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad76:	e841 2300 	strex	r3, r2, [r1]
 800ad7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ad7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1d9      	bne.n	800ad3a <HAL_UART_IRQHandler+0x18e>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d013      	beq.n	800adb6 <HAL_UART_IRQHandler+0x20a>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad92:	4a7d      	ldr	r2, [pc, #500]	; (800af88 <HAL_UART_IRQHandler+0x3dc>)
 800ad94:	651a      	str	r2, [r3, #80]	; 0x50
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fb f8fe 	bl	8005f9c <HAL_DMA_Abort_IT>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d016      	beq.n	800add4 <HAL_UART_IRQHandler+0x228>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800adb0:	4610      	mov	r0, r2
 800adb2:	4798      	blx	r3
 800adb4:	e00e      	b.n	800add4 <HAL_UART_IRQHandler+0x228>
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7f8 f8ca 	bl	8002f50 <HAL_UART_ErrorCallback>
 800adbc:	e00a      	b.n	800add4 <HAL_UART_IRQHandler+0x228>
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f7f8 f8c6 	bl	8002f50 <HAL_UART_ErrorCallback>
 800adc4:	e006      	b.n	800add4 <HAL_UART_IRQHandler+0x228>
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f7f8 f8c2 	bl	8002f50 <HAL_UART_ErrorCallback>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	641a      	str	r2, [r3, #64]	; 0x40
 800add2:	e170      	b.n	800b0b6 <HAL_UART_IRQHandler+0x50a>
 800add4:	bf00      	nop
 800add6:	e16e      	b.n	800b0b6 <HAL_UART_IRQHandler+0x50a>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800addc:	2b01      	cmp	r3, #1
 800adde:	f040 814a 	bne.w	800b076 <HAL_UART_IRQHandler+0x4ca>
 800ade2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ade6:	f003 0310 	and.w	r3, r3, #16
 800adea:	2b00      	cmp	r3, #0
 800adec:	f000 8143 	beq.w	800b076 <HAL_UART_IRQHandler+0x4ca>
 800adf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adf4:	f003 0310 	and.w	r3, r3, #16
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 813c 	beq.w	800b076 <HAL_UART_IRQHandler+0x4ca>
 800adfe:	2300      	movs	r3, #0
 800ae00:	60bb      	str	r3, [r7, #8]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	60bb      	str	r3, [r7, #8]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	60bb      	str	r3, [r7, #8]
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1e:	2b40      	cmp	r3, #64	; 0x40
 800ae20:	f040 80b4 	bne.w	800af8c <HAL_UART_IRQHandler+0x3e0>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800ae30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f000 8140 	beq.w	800b0ba <HAL_UART_IRQHandler+0x50e>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae42:	429a      	cmp	r2, r3
 800ae44:	f080 8139 	bcs.w	800b0ba <HAL_UART_IRQHandler+0x50e>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae4e:	85da      	strh	r2, [r3, #46]	; 0x2e
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae5a:	f000 8088 	beq.w	800af6e <HAL_UART_IRQHandler+0x3c2>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	330c      	adds	r3, #12
 800ae64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ae68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae6c:	e853 3f00 	ldrex	r3, [r3]
 800ae70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	330c      	adds	r3, #12
 800ae86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ae8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ae8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ae92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ae9a:	e841 2300 	strex	r3, r2, [r1]
 800ae9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1d9      	bne.n	800ae5e <HAL_UART_IRQHandler+0x2b2>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	3314      	adds	r3, #20
 800aeb0:	677b      	str	r3, [r7, #116]	; 0x74
 800aeb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aeb4:	e853 3f00 	ldrex	r3, [r3]
 800aeb8:	673b      	str	r3, [r7, #112]	; 0x70
 800aeba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aebc:	f023 0301 	bic.w	r3, r3, #1
 800aec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	3314      	adds	r3, #20
 800aeca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aece:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aed2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aed4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aeda:	e841 2300 	strex	r3, r2, [r1]
 800aede:	67bb      	str	r3, [r7, #120]	; 0x78
 800aee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1e1      	bne.n	800aeaa <HAL_UART_IRQHandler+0x2fe>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3314      	adds	r3, #20
 800aeec:	663b      	str	r3, [r7, #96]	; 0x60
 800aeee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aef0:	e853 3f00 	ldrex	r3, [r3]
 800aef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aefc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	3314      	adds	r3, #20
 800af06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800af0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800af0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800af0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800af10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af12:	e841 2300 	strex	r3, r2, [r1]
 800af16:	667b      	str	r3, [r7, #100]	; 0x64
 800af18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1e3      	bne.n	800aee6 <HAL_UART_IRQHandler+0x33a>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2220      	movs	r2, #32
 800af22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	631a      	str	r2, [r3, #48]	; 0x30
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	330c      	adds	r3, #12
 800af32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af36:	e853 3f00 	ldrex	r3, [r3]
 800af3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800af3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af3e:	f023 0310 	bic.w	r3, r3, #16
 800af42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	330c      	adds	r3, #12
 800af4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800af50:	65ba      	str	r2, [r7, #88]	; 0x58
 800af52:	657b      	str	r3, [r7, #84]	; 0x54
 800af54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af58:	e841 2300 	strex	r3, r2, [r1]
 800af5c:	653b      	str	r3, [r7, #80]	; 0x50
 800af5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1e3      	bne.n	800af2c <HAL_UART_IRQHandler+0x380>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fa ffa7 	bl	8005ebc <HAL_DMA_Abort>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af76:	b29b      	uxth	r3, r3
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	4619      	mov	r1, r3
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f8ac 	bl	800b0dc <HAL_UARTEx_RxEventCallback>
 800af84:	e099      	b.n	800b0ba <HAL_UART_IRQHandler+0x50e>
 800af86:	bf00      	nop
 800af88:	0800b313 	.word	0x0800b313
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af94:	b29b      	uxth	r3, r3
 800af96:	1ad3      	subs	r3, r2, r3
 800af98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f000 808b 	beq.w	800b0be <HAL_UART_IRQHandler+0x512>
 800afa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 8086 	beq.w	800b0be <HAL_UART_IRQHandler+0x512>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	330c      	adds	r3, #12
 800afb8:	63bb      	str	r3, [r7, #56]	; 0x38
 800afba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbc:	e853 3f00 	ldrex	r3, [r3]
 800afc0:	637b      	str	r3, [r7, #52]	; 0x34
 800afc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	330c      	adds	r3, #12
 800afd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800afd6:	647a      	str	r2, [r7, #68]	; 0x44
 800afd8:	643b      	str	r3, [r7, #64]	; 0x40
 800afda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afde:	e841 2300 	strex	r3, r2, [r1]
 800afe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1e3      	bne.n	800afb2 <HAL_UART_IRQHandler+0x406>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3314      	adds	r3, #20
 800aff0:	627b      	str	r3, [r7, #36]	; 0x24
 800aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff4:	e853 3f00 	ldrex	r3, [r3]
 800aff8:	623b      	str	r3, [r7, #32]
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	f023 0301 	bic.w	r3, r3, #1
 800b000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3314      	adds	r3, #20
 800b00a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b00e:	633a      	str	r2, [r7, #48]	; 0x30
 800b010:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b016:	e841 2300 	strex	r3, r2, [r1]
 800b01a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1e3      	bne.n	800afea <HAL_UART_IRQHandler+0x43e>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2220      	movs	r2, #32
 800b026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	631a      	str	r2, [r3, #48]	; 0x30
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	330c      	adds	r3, #12
 800b036:	613b      	str	r3, [r7, #16]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	e853 3f00 	ldrex	r3, [r3]
 800b03e:	60fb      	str	r3, [r7, #12]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f023 0310 	bic.w	r3, r3, #16
 800b046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	330c      	adds	r3, #12
 800b050:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b054:	61fa      	str	r2, [r7, #28]
 800b056:	61bb      	str	r3, [r7, #24]
 800b058:	69b9      	ldr	r1, [r7, #24]
 800b05a:	69fa      	ldr	r2, [r7, #28]
 800b05c:	e841 2300 	strex	r3, r2, [r1]
 800b060:	617b      	str	r3, [r7, #20]
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1e3      	bne.n	800b030 <HAL_UART_IRQHandler+0x484>
 800b068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b06c:	4619      	mov	r1, r3
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f834 	bl	800b0dc <HAL_UARTEx_RxEventCallback>
 800b074:	e023      	b.n	800b0be <HAL_UART_IRQHandler+0x512>
 800b076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b07a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d009      	beq.n	800b096 <HAL_UART_IRQHandler+0x4ea>
 800b082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <HAL_UART_IRQHandler+0x4ea>
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 f953 	bl	800b33a <UART_Transmit_IT>
 800b094:	e014      	b.n	800b0c0 <HAL_UART_IRQHandler+0x514>
 800b096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b09a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00e      	beq.n	800b0c0 <HAL_UART_IRQHandler+0x514>
 800b0a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d008      	beq.n	800b0c0 <HAL_UART_IRQHandler+0x514>
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f993 	bl	800b3da <UART_EndTransmit_IT>
 800b0b4:	e004      	b.n	800b0c0 <HAL_UART_IRQHandler+0x514>
 800b0b6:	bf00      	nop
 800b0b8:	e002      	b.n	800b0c0 <HAL_UART_IRQHandler+0x514>
 800b0ba:	bf00      	nop
 800b0bc:	e000      	b.n	800b0c0 <HAL_UART_IRQHandler+0x514>
 800b0be:	bf00      	nop
 800b0c0:	37e8      	adds	r7, #232	; 0xe8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop

0800b0c8 <HAL_UART_TxCpltCallback>:
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	bf00      	nop
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <HAL_UARTEx_RxEventCallback>:
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	807b      	strh	r3, [r7, #2]
 800b0e8:	bf00      	nop
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <UART_WaitOnFlagUntilTimeout>:
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b090      	sub	sp, #64	; 0x40
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	603b      	str	r3, [r7, #0]
 800b100:	4613      	mov	r3, r2
 800b102:	71fb      	strb	r3, [r7, #7]
 800b104:	e050      	b.n	800b1a8 <UART_WaitOnFlagUntilTimeout+0xb4>
 800b106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10c:	d04c      	beq.n	800b1a8 <UART_WaitOnFlagUntilTimeout+0xb4>
 800b10e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b110:	2b00      	cmp	r3, #0
 800b112:	d007      	beq.n	800b124 <UART_WaitOnFlagUntilTimeout+0x30>
 800b114:	f7fa fc52 	bl	80059bc <HAL_GetTick>
 800b118:	4602      	mov	r2, r0
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b120:	429a      	cmp	r2, r3
 800b122:	d241      	bcs.n	800b1a8 <UART_WaitOnFlagUntilTimeout+0xb4>
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	330c      	adds	r3, #12
 800b12a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12e:	e853 3f00 	ldrex	r3, [r3]
 800b132:	627b      	str	r3, [r7, #36]	; 0x24
 800b134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b136:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b13a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	330c      	adds	r3, #12
 800b142:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b144:	637a      	str	r2, [r7, #52]	; 0x34
 800b146:	633b      	str	r3, [r7, #48]	; 0x30
 800b148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b14a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b14c:	e841 2300 	strex	r3, r2, [r1]
 800b150:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1e5      	bne.n	800b124 <UART_WaitOnFlagUntilTimeout+0x30>
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	3314      	adds	r3, #20
 800b15e:	617b      	str	r3, [r7, #20]
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	e853 3f00 	ldrex	r3, [r3]
 800b166:	613b      	str	r3, [r7, #16]
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	f023 0301 	bic.w	r3, r3, #1
 800b16e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3314      	adds	r3, #20
 800b176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b178:	623a      	str	r2, [r7, #32]
 800b17a:	61fb      	str	r3, [r7, #28]
 800b17c:	69f9      	ldr	r1, [r7, #28]
 800b17e:	6a3a      	ldr	r2, [r7, #32]
 800b180:	e841 2300 	strex	r3, r2, [r1]
 800b184:	61bb      	str	r3, [r7, #24]
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1e5      	bne.n	800b158 <UART_WaitOnFlagUntilTimeout+0x64>
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2220      	movs	r2, #32
 800b190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2220      	movs	r2, #32
 800b198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e00f      	b.n	800b1c8 <UART_WaitOnFlagUntilTimeout+0xd4>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	bf0c      	ite	eq
 800b1b8:	2301      	moveq	r3, #1
 800b1ba:	2300      	movne	r3, #0
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	461a      	mov	r2, r3
 800b1c0:	79fb      	ldrb	r3, [r7, #7]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d09f      	beq.n	800b106 <UART_WaitOnFlagUntilTimeout+0x12>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3740      	adds	r7, #64	; 0x40
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <UART_Start_Receive_IT>:
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	80fb      	strh	r3, [r7, #6]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	68ba      	ldr	r2, [r7, #8]
 800b1e2:	629a      	str	r2, [r3, #40]	; 0x28
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	88fa      	ldrh	r2, [r7, #6]
 800b1e8:	859a      	strh	r2, [r3, #44]	; 0x2c
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	88fa      	ldrh	r2, [r7, #6]
 800b1ee:	85da      	strh	r2, [r3, #46]	; 0x2e
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	641a      	str	r2, [r3, #64]	; 0x40
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2222      	movs	r2, #34	; 0x22
 800b1fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d007      	beq.n	800b21e <UART_Start_Receive_IT+0x4e>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	68da      	ldr	r2, [r3, #12]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b21c:	60da      	str	r2, [r3, #12]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	695a      	ldr	r2, [r3, #20]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f042 0201 	orr.w	r2, r2, #1
 800b22c:	615a      	str	r2, [r3, #20]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68da      	ldr	r2, [r3, #12]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f042 0220 	orr.w	r2, r2, #32
 800b23c:	60da      	str	r2, [r3, #12]
 800b23e:	2300      	movs	r3, #0
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <UART_EndRxTransfer>:
 800b24c:	b480      	push	{r7}
 800b24e:	b095      	sub	sp, #84	; 0x54
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	330c      	adds	r3, #12
 800b25a:	637b      	str	r3, [r7, #52]	; 0x34
 800b25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25e:	e853 3f00 	ldrex	r3, [r3]
 800b262:	633b      	str	r3, [r7, #48]	; 0x30
 800b264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b266:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b26a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	330c      	adds	r3, #12
 800b272:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b274:	643a      	str	r2, [r7, #64]	; 0x40
 800b276:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b278:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b27a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b27c:	e841 2300 	strex	r3, r2, [r1]
 800b280:	63bb      	str	r3, [r7, #56]	; 0x38
 800b282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1e5      	bne.n	800b254 <UART_EndRxTransfer+0x8>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3314      	adds	r3, #20
 800b28e:	623b      	str	r3, [r7, #32]
 800b290:	6a3b      	ldr	r3, [r7, #32]
 800b292:	e853 3f00 	ldrex	r3, [r3]
 800b296:	61fb      	str	r3, [r7, #28]
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	f023 0301 	bic.w	r3, r3, #1
 800b29e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3314      	adds	r3, #20
 800b2a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2b0:	e841 2300 	strex	r3, r2, [r1]
 800b2b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1e5      	bne.n	800b288 <UART_EndRxTransfer+0x3c>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d119      	bne.n	800b2f8 <UART_EndRxTransfer+0xac>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	330c      	adds	r3, #12
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	e853 3f00 	ldrex	r3, [r3]
 800b2d2:	60bb      	str	r3, [r7, #8]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	f023 0310 	bic.w	r3, r3, #16
 800b2da:	647b      	str	r3, [r7, #68]	; 0x44
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	330c      	adds	r3, #12
 800b2e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2e4:	61ba      	str	r2, [r7, #24]
 800b2e6:	617b      	str	r3, [r7, #20]
 800b2e8:	6979      	ldr	r1, [r7, #20]
 800b2ea:	69ba      	ldr	r2, [r7, #24]
 800b2ec:	e841 2300 	strex	r3, r2, [r1]
 800b2f0:	613b      	str	r3, [r7, #16]
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1e5      	bne.n	800b2c4 <UART_EndRxTransfer+0x78>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	631a      	str	r2, [r3, #48]	; 0x30
 800b306:	bf00      	nop
 800b308:	3754      	adds	r7, #84	; 0x54
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr

0800b312 <UART_DMAAbortOnError>:
 800b312:	b580      	push	{r7, lr}
 800b314:	b084      	sub	sp, #16
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31e:	60fb      	str	r3, [r7, #12]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	85da      	strh	r2, [r3, #46]	; 0x2e
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	84da      	strh	r2, [r3, #38]	; 0x26
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f7f7 fe0f 	bl	8002f50 <HAL_UART_ErrorCallback>
 800b332:	bf00      	nop
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <UART_Transmit_IT>:
 800b33a:	b480      	push	{r7}
 800b33c:	b085      	sub	sp, #20
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	2b21      	cmp	r3, #33	; 0x21
 800b34c:	d13e      	bne.n	800b3cc <UART_Transmit_IT+0x92>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b356:	d114      	bne.n	800b382 <UART_Transmit_IT+0x48>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d110      	bne.n	800b382 <UART_Transmit_IT+0x48>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a1b      	ldr	r3, [r3, #32]
 800b364:	60fb      	str	r3, [r7, #12]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	881b      	ldrh	r3, [r3, #0]
 800b36a:	461a      	mov	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b374:	605a      	str	r2, [r3, #4]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	1c9a      	adds	r2, r3, #2
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	621a      	str	r2, [r3, #32]
 800b380:	e008      	b.n	800b394 <UART_Transmit_IT+0x5a>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a1b      	ldr	r3, [r3, #32]
 800b386:	1c59      	adds	r1, r3, #1
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	6211      	str	r1, [r2, #32]
 800b38c:	781a      	ldrb	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	605a      	str	r2, [r3, #4]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b398:	b29b      	uxth	r3, r3
 800b39a:	3b01      	subs	r3, #1
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10f      	bne.n	800b3c8 <UART_Transmit_IT+0x8e>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68da      	ldr	r2, [r3, #12]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3b6:	60da      	str	r2, [r3, #12]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68da      	ldr	r2, [r3, #12]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3c6:	60da      	str	r2, [r3, #12]
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	e000      	b.n	800b3ce <UART_Transmit_IT+0x94>
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3714      	adds	r7, #20
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <UART_EndTransmit_IT>:
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b082      	sub	sp, #8
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	68da      	ldr	r2, [r3, #12]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3f0:	60da      	str	r2, [r3, #12]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f7ff fe64 	bl	800b0c8 <HAL_UART_TxCpltCallback>
 800b400:	2300      	movs	r3, #0
 800b402:	4618      	mov	r0, r3
 800b404:	3708      	adds	r7, #8
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <UART_Receive_IT>:
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b08c      	sub	sp, #48	; 0x30
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	2b22      	cmp	r3, #34	; 0x22
 800b41c:	f040 80ab 	bne.w	800b576 <UART_Receive_IT+0x16c>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b428:	d117      	bne.n	800b45a <UART_Receive_IT+0x50>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d113      	bne.n	800b45a <UART_Receive_IT+0x50>
 800b432:	2300      	movs	r3, #0
 800b434:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b43a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	b29b      	uxth	r3, r3
 800b444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b448:	b29a      	uxth	r2, r3
 800b44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44c:	801a      	strh	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b452:	1c9a      	adds	r2, r3, #2
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	629a      	str	r2, [r3, #40]	; 0x28
 800b458:	e026      	b.n	800b4a8 <UART_Receive_IT+0x9e>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b45e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b460:	2300      	movs	r3, #0
 800b462:	62bb      	str	r3, [r7, #40]	; 0x28
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b46c:	d007      	beq.n	800b47e <UART_Receive_IT+0x74>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10a      	bne.n	800b48c <UART_Receive_IT+0x82>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d106      	bne.n	800b48c <UART_Receive_IT+0x82>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	b2da      	uxtb	r2, r3
 800b486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b488:	701a      	strb	r2, [r3, #0]
 800b48a:	e008      	b.n	800b49e <UART_Receive_IT+0x94>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	b2db      	uxtb	r3, r3
 800b494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b498:	b2da      	uxtb	r2, r3
 800b49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49c:	701a      	strb	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a2:	1c5a      	adds	r2, r3, #1
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	629a      	str	r2, [r3, #40]	; 0x28
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d15a      	bne.n	800b572 <UART_Receive_IT+0x168>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68da      	ldr	r2, [r3, #12]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f022 0220 	bic.w	r2, r2, #32
 800b4ca:	60da      	str	r2, [r3, #12]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68da      	ldr	r2, [r3, #12]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4da:	60da      	str	r2, [r3, #12]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	695a      	ldr	r2, [r3, #20]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f022 0201 	bic.w	r2, r2, #1
 800b4ea:	615a      	str	r2, [r3, #20]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d135      	bne.n	800b568 <UART_Receive_IT+0x15e>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	631a      	str	r2, [r3, #48]	; 0x30
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	330c      	adds	r3, #12
 800b508:	617b      	str	r3, [r7, #20]
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	e853 3f00 	ldrex	r3, [r3]
 800b510:	613b      	str	r3, [r7, #16]
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	f023 0310 	bic.w	r3, r3, #16
 800b518:	627b      	str	r3, [r7, #36]	; 0x24
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	330c      	adds	r3, #12
 800b520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b522:	623a      	str	r2, [r7, #32]
 800b524:	61fb      	str	r3, [r7, #28]
 800b526:	69f9      	ldr	r1, [r7, #28]
 800b528:	6a3a      	ldr	r2, [r7, #32]
 800b52a:	e841 2300 	strex	r3, r2, [r1]
 800b52e:	61bb      	str	r3, [r7, #24]
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1e5      	bne.n	800b502 <UART_Receive_IT+0xf8>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 0310 	and.w	r3, r3, #16
 800b540:	2b10      	cmp	r3, #16
 800b542:	d10a      	bne.n	800b55a <UART_Receive_IT+0x150>
 800b544:	2300      	movs	r3, #0
 800b546:	60fb      	str	r3, [r7, #12]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	60fb      	str	r3, [r7, #12]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	60fb      	str	r3, [r7, #12]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b55e:	4619      	mov	r1, r3
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f7ff fdbb 	bl	800b0dc <HAL_UARTEx_RxEventCallback>
 800b566:	e002      	b.n	800b56e <UART_Receive_IT+0x164>
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f7f7 fd11 	bl	8002f90 <HAL_UART_RxCpltCallback>
 800b56e:	2300      	movs	r3, #0
 800b570:	e002      	b.n	800b578 <UART_Receive_IT+0x16e>
 800b572:	2300      	movs	r3, #0
 800b574:	e000      	b.n	800b578 <UART_Receive_IT+0x16e>
 800b576:	2302      	movs	r3, #2
 800b578:	4618      	mov	r0, r3
 800b57a:	3730      	adds	r7, #48	; 0x30
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <UART_SetConfig>:
 800b580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b584:	b0c0      	sub	sp, #256	; 0x100
 800b586:	af00      	add	r7, sp, #0
 800b588:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800b58c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	691b      	ldr	r3, [r3, #16]
 800b594:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b59c:	68d9      	ldr	r1, [r3, #12]
 800b59e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	ea40 0301 	orr.w	r3, r0, r1
 800b5a8:	6113      	str	r3, [r2, #16]
 800b5aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5ae:	689a      	ldr	r2, [r3, #8]
 800b5b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	431a      	orrs	r2, r3
 800b5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5bc:	695b      	ldr	r3, [r3, #20]
 800b5be:	431a      	orrs	r2, r3
 800b5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5c4:	69db      	ldr	r3, [r3, #28]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b5cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b5d8:	f021 010c 	bic.w	r1, r1, #12
 800b5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b5e6:	430b      	orrs	r3, r1
 800b5e8:	60d3      	str	r3, [r2, #12]
 800b5ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	695b      	ldr	r3, [r3, #20]
 800b5f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b5f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5fa:	6999      	ldr	r1, [r3, #24]
 800b5fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	ea40 0301 	orr.w	r3, r0, r1
 800b606:	6153      	str	r3, [r2, #20]
 800b608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	4b8f      	ldr	r3, [pc, #572]	; (800b84c <UART_SetConfig+0x2cc>)
 800b610:	429a      	cmp	r2, r3
 800b612:	d005      	beq.n	800b620 <UART_SetConfig+0xa0>
 800b614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	4b8d      	ldr	r3, [pc, #564]	; (800b850 <UART_SetConfig+0x2d0>)
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d104      	bne.n	800b62a <UART_SetConfig+0xaa>
 800b620:	f7fd ffe2 	bl	80095e8 <HAL_RCC_GetPCLK2Freq>
 800b624:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b628:	e003      	b.n	800b632 <UART_SetConfig+0xb2>
 800b62a:	f7fd ffc9 	bl	80095c0 <HAL_RCC_GetPCLK1Freq>
 800b62e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b636:	69db      	ldr	r3, [r3, #28]
 800b638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b63c:	f040 810c 	bne.w	800b858 <UART_SetConfig+0x2d8>
 800b640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b644:	2200      	movs	r2, #0
 800b646:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b64a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b64e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b652:	4622      	mov	r2, r4
 800b654:	462b      	mov	r3, r5
 800b656:	1891      	adds	r1, r2, r2
 800b658:	65b9      	str	r1, [r7, #88]	; 0x58
 800b65a:	415b      	adcs	r3, r3
 800b65c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b65e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b662:	4621      	mov	r1, r4
 800b664:	eb12 0801 	adds.w	r8, r2, r1
 800b668:	4629      	mov	r1, r5
 800b66a:	eb43 0901 	adc.w	r9, r3, r1
 800b66e:	f04f 0200 	mov.w	r2, #0
 800b672:	f04f 0300 	mov.w	r3, #0
 800b676:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b67a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b67e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b682:	4690      	mov	r8, r2
 800b684:	4699      	mov	r9, r3
 800b686:	4623      	mov	r3, r4
 800b688:	eb18 0303 	adds.w	r3, r8, r3
 800b68c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b690:	462b      	mov	r3, r5
 800b692:	eb49 0303 	adc.w	r3, r9, r3
 800b696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b69a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b6aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	18db      	adds	r3, r3, r3
 800b6b2:	653b      	str	r3, [r7, #80]	; 0x50
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	eb42 0303 	adc.w	r3, r2, r3
 800b6ba:	657b      	str	r3, [r7, #84]	; 0x54
 800b6bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b6c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b6c4:	f7f5 fac8 	bl	8000c58 <__aeabi_uldivmod>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	4b61      	ldr	r3, [pc, #388]	; (800b854 <UART_SetConfig+0x2d4>)
 800b6ce:	fba3 2302 	umull	r2, r3, r3, r2
 800b6d2:	095b      	lsrs	r3, r3, #5
 800b6d4:	011c      	lsls	r4, r3, #4
 800b6d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b6e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b6e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b6e8:	4642      	mov	r2, r8
 800b6ea:	464b      	mov	r3, r9
 800b6ec:	1891      	adds	r1, r2, r2
 800b6ee:	64b9      	str	r1, [r7, #72]	; 0x48
 800b6f0:	415b      	adcs	r3, r3
 800b6f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b6f8:	4641      	mov	r1, r8
 800b6fa:	eb12 0a01 	adds.w	sl, r2, r1
 800b6fe:	4649      	mov	r1, r9
 800b700:	eb43 0b01 	adc.w	fp, r3, r1
 800b704:	f04f 0200 	mov.w	r2, #0
 800b708:	f04f 0300 	mov.w	r3, #0
 800b70c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b710:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b718:	4692      	mov	sl, r2
 800b71a:	469b      	mov	fp, r3
 800b71c:	4643      	mov	r3, r8
 800b71e:	eb1a 0303 	adds.w	r3, sl, r3
 800b722:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b726:	464b      	mov	r3, r9
 800b728:	eb4b 0303 	adc.w	r3, fp, r3
 800b72c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b73c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b740:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b744:	460b      	mov	r3, r1
 800b746:	18db      	adds	r3, r3, r3
 800b748:	643b      	str	r3, [r7, #64]	; 0x40
 800b74a:	4613      	mov	r3, r2
 800b74c:	eb42 0303 	adc.w	r3, r2, r3
 800b750:	647b      	str	r3, [r7, #68]	; 0x44
 800b752:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b756:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b75a:	f7f5 fa7d 	bl	8000c58 <__aeabi_uldivmod>
 800b75e:	4602      	mov	r2, r0
 800b760:	460b      	mov	r3, r1
 800b762:	4611      	mov	r1, r2
 800b764:	4b3b      	ldr	r3, [pc, #236]	; (800b854 <UART_SetConfig+0x2d4>)
 800b766:	fba3 2301 	umull	r2, r3, r3, r1
 800b76a:	095b      	lsrs	r3, r3, #5
 800b76c:	2264      	movs	r2, #100	; 0x64
 800b76e:	fb02 f303 	mul.w	r3, r2, r3
 800b772:	1acb      	subs	r3, r1, r3
 800b774:	00db      	lsls	r3, r3, #3
 800b776:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b77a:	4b36      	ldr	r3, [pc, #216]	; (800b854 <UART_SetConfig+0x2d4>)
 800b77c:	fba3 2302 	umull	r2, r3, r3, r2
 800b780:	095b      	lsrs	r3, r3, #5
 800b782:	005b      	lsls	r3, r3, #1
 800b784:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b788:	441c      	add	r4, r3
 800b78a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b78e:	2200      	movs	r2, #0
 800b790:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b794:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b798:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b79c:	4642      	mov	r2, r8
 800b79e:	464b      	mov	r3, r9
 800b7a0:	1891      	adds	r1, r2, r2
 800b7a2:	63b9      	str	r1, [r7, #56]	; 0x38
 800b7a4:	415b      	adcs	r3, r3
 800b7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b7ac:	4641      	mov	r1, r8
 800b7ae:	1851      	adds	r1, r2, r1
 800b7b0:	6339      	str	r1, [r7, #48]	; 0x30
 800b7b2:	4649      	mov	r1, r9
 800b7b4:	414b      	adcs	r3, r1
 800b7b6:	637b      	str	r3, [r7, #52]	; 0x34
 800b7b8:	f04f 0200 	mov.w	r2, #0
 800b7bc:	f04f 0300 	mov.w	r3, #0
 800b7c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b7c4:	4659      	mov	r1, fp
 800b7c6:	00cb      	lsls	r3, r1, #3
 800b7c8:	4651      	mov	r1, sl
 800b7ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b7ce:	4651      	mov	r1, sl
 800b7d0:	00ca      	lsls	r2, r1, #3
 800b7d2:	4610      	mov	r0, r2
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	4642      	mov	r2, r8
 800b7da:	189b      	adds	r3, r3, r2
 800b7dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b7e0:	464b      	mov	r3, r9
 800b7e2:	460a      	mov	r2, r1
 800b7e4:	eb42 0303 	adc.w	r3, r2, r3
 800b7e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b7f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b7fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b800:	460b      	mov	r3, r1
 800b802:	18db      	adds	r3, r3, r3
 800b804:	62bb      	str	r3, [r7, #40]	; 0x28
 800b806:	4613      	mov	r3, r2
 800b808:	eb42 0303 	adc.w	r3, r2, r3
 800b80c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b80e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b812:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b816:	f7f5 fa1f 	bl	8000c58 <__aeabi_uldivmod>
 800b81a:	4602      	mov	r2, r0
 800b81c:	460b      	mov	r3, r1
 800b81e:	4b0d      	ldr	r3, [pc, #52]	; (800b854 <UART_SetConfig+0x2d4>)
 800b820:	fba3 1302 	umull	r1, r3, r3, r2
 800b824:	095b      	lsrs	r3, r3, #5
 800b826:	2164      	movs	r1, #100	; 0x64
 800b828:	fb01 f303 	mul.w	r3, r1, r3
 800b82c:	1ad3      	subs	r3, r2, r3
 800b82e:	00db      	lsls	r3, r3, #3
 800b830:	3332      	adds	r3, #50	; 0x32
 800b832:	4a08      	ldr	r2, [pc, #32]	; (800b854 <UART_SetConfig+0x2d4>)
 800b834:	fba2 2303 	umull	r2, r3, r2, r3
 800b838:	095b      	lsrs	r3, r3, #5
 800b83a:	f003 0207 	and.w	r2, r3, #7
 800b83e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4422      	add	r2, r4
 800b846:	609a      	str	r2, [r3, #8]
 800b848:	e105      	b.n	800ba56 <UART_SetConfig+0x4d6>
 800b84a:	bf00      	nop
 800b84c:	40011000 	.word	0x40011000
 800b850:	40011400 	.word	0x40011400
 800b854:	51eb851f 	.word	0x51eb851f
 800b858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b85c:	2200      	movs	r2, #0
 800b85e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b862:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b866:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b86a:	4642      	mov	r2, r8
 800b86c:	464b      	mov	r3, r9
 800b86e:	1891      	adds	r1, r2, r2
 800b870:	6239      	str	r1, [r7, #32]
 800b872:	415b      	adcs	r3, r3
 800b874:	627b      	str	r3, [r7, #36]	; 0x24
 800b876:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b87a:	4641      	mov	r1, r8
 800b87c:	1854      	adds	r4, r2, r1
 800b87e:	4649      	mov	r1, r9
 800b880:	eb43 0501 	adc.w	r5, r3, r1
 800b884:	f04f 0200 	mov.w	r2, #0
 800b888:	f04f 0300 	mov.w	r3, #0
 800b88c:	00eb      	lsls	r3, r5, #3
 800b88e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b892:	00e2      	lsls	r2, r4, #3
 800b894:	4614      	mov	r4, r2
 800b896:	461d      	mov	r5, r3
 800b898:	4643      	mov	r3, r8
 800b89a:	18e3      	adds	r3, r4, r3
 800b89c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b8a0:	464b      	mov	r3, r9
 800b8a2:	eb45 0303 	adc.w	r3, r5, r3
 800b8a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b8aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b8b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b8ba:	f04f 0200 	mov.w	r2, #0
 800b8be:	f04f 0300 	mov.w	r3, #0
 800b8c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	008b      	lsls	r3, r1, #2
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	008a      	lsls	r2, r1, #2
 800b8d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b8d8:	f7f5 f9be 	bl	8000c58 <__aeabi_uldivmod>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	4b60      	ldr	r3, [pc, #384]	; (800ba64 <UART_SetConfig+0x4e4>)
 800b8e2:	fba3 2302 	umull	r2, r3, r3, r2
 800b8e6:	095b      	lsrs	r3, r3, #5
 800b8e8:	011c      	lsls	r4, r3, #4
 800b8ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b8f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b8f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b8fc:	4642      	mov	r2, r8
 800b8fe:	464b      	mov	r3, r9
 800b900:	1891      	adds	r1, r2, r2
 800b902:	61b9      	str	r1, [r7, #24]
 800b904:	415b      	adcs	r3, r3
 800b906:	61fb      	str	r3, [r7, #28]
 800b908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b90c:	4641      	mov	r1, r8
 800b90e:	1851      	adds	r1, r2, r1
 800b910:	6139      	str	r1, [r7, #16]
 800b912:	4649      	mov	r1, r9
 800b914:	414b      	adcs	r3, r1
 800b916:	617b      	str	r3, [r7, #20]
 800b918:	f04f 0200 	mov.w	r2, #0
 800b91c:	f04f 0300 	mov.w	r3, #0
 800b920:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b924:	4659      	mov	r1, fp
 800b926:	00cb      	lsls	r3, r1, #3
 800b928:	4651      	mov	r1, sl
 800b92a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b92e:	4651      	mov	r1, sl
 800b930:	00ca      	lsls	r2, r1, #3
 800b932:	4610      	mov	r0, r2
 800b934:	4619      	mov	r1, r3
 800b936:	4603      	mov	r3, r0
 800b938:	4642      	mov	r2, r8
 800b93a:	189b      	adds	r3, r3, r2
 800b93c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b940:	464b      	mov	r3, r9
 800b942:	460a      	mov	r2, r1
 800b944:	eb42 0303 	adc.w	r3, r2, r3
 800b948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	67bb      	str	r3, [r7, #120]	; 0x78
 800b956:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b958:	f04f 0200 	mov.w	r2, #0
 800b95c:	f04f 0300 	mov.w	r3, #0
 800b960:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b964:	4649      	mov	r1, r9
 800b966:	008b      	lsls	r3, r1, #2
 800b968:	4641      	mov	r1, r8
 800b96a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b96e:	4641      	mov	r1, r8
 800b970:	008a      	lsls	r2, r1, #2
 800b972:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b976:	f7f5 f96f 	bl	8000c58 <__aeabi_uldivmod>
 800b97a:	4602      	mov	r2, r0
 800b97c:	460b      	mov	r3, r1
 800b97e:	4b39      	ldr	r3, [pc, #228]	; (800ba64 <UART_SetConfig+0x4e4>)
 800b980:	fba3 1302 	umull	r1, r3, r3, r2
 800b984:	095b      	lsrs	r3, r3, #5
 800b986:	2164      	movs	r1, #100	; 0x64
 800b988:	fb01 f303 	mul.w	r3, r1, r3
 800b98c:	1ad3      	subs	r3, r2, r3
 800b98e:	011b      	lsls	r3, r3, #4
 800b990:	3332      	adds	r3, #50	; 0x32
 800b992:	4a34      	ldr	r2, [pc, #208]	; (800ba64 <UART_SetConfig+0x4e4>)
 800b994:	fba2 2303 	umull	r2, r3, r2, r3
 800b998:	095b      	lsrs	r3, r3, #5
 800b99a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b99e:	441c      	add	r4, r3
 800b9a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	673b      	str	r3, [r7, #112]	; 0x70
 800b9a8:	677a      	str	r2, [r7, #116]	; 0x74
 800b9aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b9ae:	4642      	mov	r2, r8
 800b9b0:	464b      	mov	r3, r9
 800b9b2:	1891      	adds	r1, r2, r2
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	415b      	adcs	r3, r3
 800b9b8:	60fb      	str	r3, [r7, #12]
 800b9ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b9be:	4641      	mov	r1, r8
 800b9c0:	1851      	adds	r1, r2, r1
 800b9c2:	6039      	str	r1, [r7, #0]
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	414b      	adcs	r3, r1
 800b9c8:	607b      	str	r3, [r7, #4]
 800b9ca:	f04f 0200 	mov.w	r2, #0
 800b9ce:	f04f 0300 	mov.w	r3, #0
 800b9d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b9d6:	4659      	mov	r1, fp
 800b9d8:	00cb      	lsls	r3, r1, #3
 800b9da:	4651      	mov	r1, sl
 800b9dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9e0:	4651      	mov	r1, sl
 800b9e2:	00ca      	lsls	r2, r1, #3
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	4642      	mov	r2, r8
 800b9ec:	189b      	adds	r3, r3, r2
 800b9ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9f0:	464b      	mov	r3, r9
 800b9f2:	460a      	mov	r2, r1
 800b9f4:	eb42 0303 	adc.w	r3, r2, r3
 800b9f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b9fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	663b      	str	r3, [r7, #96]	; 0x60
 800ba04:	667a      	str	r2, [r7, #100]	; 0x64
 800ba06:	f04f 0200 	mov.w	r2, #0
 800ba0a:	f04f 0300 	mov.w	r3, #0
 800ba0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ba12:	4649      	mov	r1, r9
 800ba14:	008b      	lsls	r3, r1, #2
 800ba16:	4641      	mov	r1, r8
 800ba18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba1c:	4641      	mov	r1, r8
 800ba1e:	008a      	lsls	r2, r1, #2
 800ba20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ba24:	f7f5 f918 	bl	8000c58 <__aeabi_uldivmod>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4b0d      	ldr	r3, [pc, #52]	; (800ba64 <UART_SetConfig+0x4e4>)
 800ba2e:	fba3 1302 	umull	r1, r3, r3, r2
 800ba32:	095b      	lsrs	r3, r3, #5
 800ba34:	2164      	movs	r1, #100	; 0x64
 800ba36:	fb01 f303 	mul.w	r3, r1, r3
 800ba3a:	1ad3      	subs	r3, r2, r3
 800ba3c:	011b      	lsls	r3, r3, #4
 800ba3e:	3332      	adds	r3, #50	; 0x32
 800ba40:	4a08      	ldr	r2, [pc, #32]	; (800ba64 <UART_SetConfig+0x4e4>)
 800ba42:	fba2 2303 	umull	r2, r3, r2, r3
 800ba46:	095b      	lsrs	r3, r3, #5
 800ba48:	f003 020f 	and.w	r2, r3, #15
 800ba4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4422      	add	r2, r4
 800ba54:	609a      	str	r2, [r3, #8]
 800ba56:	bf00      	nop
 800ba58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba62:	bf00      	nop
 800ba64:	51eb851f 	.word	0x51eb851f

0800ba68 <_ZdlPvj>:
 800ba68:	f000 b817 	b.w	800ba9a <_ZdlPv>

0800ba6c <_Znwj>:
 800ba6c:	2801      	cmp	r0, #1
 800ba6e:	bf38      	it	cc
 800ba70:	2001      	movcc	r0, #1
 800ba72:	b510      	push	{r4, lr}
 800ba74:	4604      	mov	r4, r0
 800ba76:	4620      	mov	r0, r4
 800ba78:	f000 ff66 	bl	800c948 <malloc>
 800ba7c:	b930      	cbnz	r0, 800ba8c <_Znwj+0x20>
 800ba7e:	f000 f80f 	bl	800baa0 <_ZSt15get_new_handlerv>
 800ba82:	b908      	cbnz	r0, 800ba88 <_Znwj+0x1c>
 800ba84:	f000 ff2e 	bl	800c8e4 <abort>
 800ba88:	4780      	blx	r0
 800ba8a:	e7f4      	b.n	800ba76 <_Znwj+0xa>
 800ba8c:	bd10      	pop	{r4, pc}

0800ba8e <_ZSt17__throw_bad_allocv>:
 800ba8e:	b508      	push	{r3, lr}
 800ba90:	f000 ff28 	bl	800c8e4 <abort>

0800ba94 <_ZSt20__throw_length_errorPKc>:
 800ba94:	b508      	push	{r3, lr}
 800ba96:	f000 ff25 	bl	800c8e4 <abort>

0800ba9a <_ZdlPv>:
 800ba9a:	f000 bf5d 	b.w	800c958 <free>
	...

0800baa0 <_ZSt15get_new_handlerv>:
 800baa0:	4b02      	ldr	r3, [pc, #8]	; (800baac <_ZSt15get_new_handlerv+0xc>)
 800baa2:	6818      	ldr	r0, [r3, #0]
 800baa4:	f3bf 8f5b 	dmb	ish
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	20001168 	.word	0x20001168

0800bab0 <pow>:
 800bab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab2:	ed2d 8b02 	vpush	{d8}
 800bab6:	eeb0 8a40 	vmov.f32	s16, s0
 800baba:	eef0 8a60 	vmov.f32	s17, s1
 800babe:	ec55 4b11 	vmov	r4, r5, d1
 800bac2:	f000 f865 	bl	800bb90 <__ieee754_pow>
 800bac6:	4622      	mov	r2, r4
 800bac8:	462b      	mov	r3, r5
 800baca:	4620      	mov	r0, r4
 800bacc:	4629      	mov	r1, r5
 800bace:	ec57 6b10 	vmov	r6, r7, d0
 800bad2:	f7f5 f833 	bl	8000b3c <__aeabi_dcmpun>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d13b      	bne.n	800bb52 <pow+0xa2>
 800bada:	ec51 0b18 	vmov	r0, r1, d8
 800bade:	2200      	movs	r2, #0
 800bae0:	2300      	movs	r3, #0
 800bae2:	f7f4 fff9 	bl	8000ad8 <__aeabi_dcmpeq>
 800bae6:	b1b8      	cbz	r0, 800bb18 <pow+0x68>
 800bae8:	2200      	movs	r2, #0
 800baea:	2300      	movs	r3, #0
 800baec:	4620      	mov	r0, r4
 800baee:	4629      	mov	r1, r5
 800baf0:	f7f4 fff2 	bl	8000ad8 <__aeabi_dcmpeq>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d146      	bne.n	800bb86 <pow+0xd6>
 800baf8:	ec45 4b10 	vmov	d0, r4, r5
 800bafc:	f000 fe61 	bl	800c7c2 <finite>
 800bb00:	b338      	cbz	r0, 800bb52 <pow+0xa2>
 800bb02:	2200      	movs	r2, #0
 800bb04:	2300      	movs	r3, #0
 800bb06:	4620      	mov	r0, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	f7f4 ffef 	bl	8000aec <__aeabi_dcmplt>
 800bb0e:	b300      	cbz	r0, 800bb52 <pow+0xa2>
 800bb10:	f000 fef0 	bl	800c8f4 <__errno>
 800bb14:	2322      	movs	r3, #34	; 0x22
 800bb16:	e01b      	b.n	800bb50 <pow+0xa0>
 800bb18:	ec47 6b10 	vmov	d0, r6, r7
 800bb1c:	f000 fe51 	bl	800c7c2 <finite>
 800bb20:	b9e0      	cbnz	r0, 800bb5c <pow+0xac>
 800bb22:	eeb0 0a48 	vmov.f32	s0, s16
 800bb26:	eef0 0a68 	vmov.f32	s1, s17
 800bb2a:	f000 fe4a 	bl	800c7c2 <finite>
 800bb2e:	b1a8      	cbz	r0, 800bb5c <pow+0xac>
 800bb30:	ec45 4b10 	vmov	d0, r4, r5
 800bb34:	f000 fe45 	bl	800c7c2 <finite>
 800bb38:	b180      	cbz	r0, 800bb5c <pow+0xac>
 800bb3a:	4632      	mov	r2, r6
 800bb3c:	463b      	mov	r3, r7
 800bb3e:	4630      	mov	r0, r6
 800bb40:	4639      	mov	r1, r7
 800bb42:	f7f4 fffb 	bl	8000b3c <__aeabi_dcmpun>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d0e2      	beq.n	800bb10 <pow+0x60>
 800bb4a:	f000 fed3 	bl	800c8f4 <__errno>
 800bb4e:	2321      	movs	r3, #33	; 0x21
 800bb50:	6003      	str	r3, [r0, #0]
 800bb52:	ecbd 8b02 	vpop	{d8}
 800bb56:	ec47 6b10 	vmov	d0, r6, r7
 800bb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	2300      	movs	r3, #0
 800bb60:	4630      	mov	r0, r6
 800bb62:	4639      	mov	r1, r7
 800bb64:	f7f4 ffb8 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	d0f2      	beq.n	800bb52 <pow+0xa2>
 800bb6c:	eeb0 0a48 	vmov.f32	s0, s16
 800bb70:	eef0 0a68 	vmov.f32	s1, s17
 800bb74:	f000 fe25 	bl	800c7c2 <finite>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d0ea      	beq.n	800bb52 <pow+0xa2>
 800bb7c:	ec45 4b10 	vmov	d0, r4, r5
 800bb80:	f000 fe1f 	bl	800c7c2 <finite>
 800bb84:	e7c3      	b.n	800bb0e <pow+0x5e>
 800bb86:	4f01      	ldr	r7, [pc, #4]	; (800bb8c <pow+0xdc>)
 800bb88:	2600      	movs	r6, #0
 800bb8a:	e7e2      	b.n	800bb52 <pow+0xa2>
 800bb8c:	3ff00000 	.word	0x3ff00000

0800bb90 <__ieee754_pow>:
 800bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	ed2d 8b06 	vpush	{d8-d10}
 800bb98:	b089      	sub	sp, #36	; 0x24
 800bb9a:	ed8d 1b00 	vstr	d1, [sp]
 800bb9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bba2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bba6:	ea58 0102 	orrs.w	r1, r8, r2
 800bbaa:	ec57 6b10 	vmov	r6, r7, d0
 800bbae:	d115      	bne.n	800bbdc <__ieee754_pow+0x4c>
 800bbb0:	19b3      	adds	r3, r6, r6
 800bbb2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bbb6:	4152      	adcs	r2, r2
 800bbb8:	4299      	cmp	r1, r3
 800bbba:	4b89      	ldr	r3, [pc, #548]	; (800bde0 <__ieee754_pow+0x250>)
 800bbbc:	4193      	sbcs	r3, r2
 800bbbe:	f080 84d2 	bcs.w	800c566 <__ieee754_pow+0x9d6>
 800bbc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	4639      	mov	r1, r7
 800bbca:	f7f4 fb67 	bl	800029c <__adddf3>
 800bbce:	ec41 0b10 	vmov	d0, r0, r1
 800bbd2:	b009      	add	sp, #36	; 0x24
 800bbd4:	ecbd 8b06 	vpop	{d8-d10}
 800bbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbdc:	4b81      	ldr	r3, [pc, #516]	; (800bde4 <__ieee754_pow+0x254>)
 800bbde:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bbe2:	429c      	cmp	r4, r3
 800bbe4:	ee10 aa10 	vmov	sl, s0
 800bbe8:	463d      	mov	r5, r7
 800bbea:	dc06      	bgt.n	800bbfa <__ieee754_pow+0x6a>
 800bbec:	d101      	bne.n	800bbf2 <__ieee754_pow+0x62>
 800bbee:	2e00      	cmp	r6, #0
 800bbf0:	d1e7      	bne.n	800bbc2 <__ieee754_pow+0x32>
 800bbf2:	4598      	cmp	r8, r3
 800bbf4:	dc01      	bgt.n	800bbfa <__ieee754_pow+0x6a>
 800bbf6:	d10f      	bne.n	800bc18 <__ieee754_pow+0x88>
 800bbf8:	b172      	cbz	r2, 800bc18 <__ieee754_pow+0x88>
 800bbfa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bbfe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bc02:	ea55 050a 	orrs.w	r5, r5, sl
 800bc06:	d1dc      	bne.n	800bbc2 <__ieee754_pow+0x32>
 800bc08:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bc0c:	18db      	adds	r3, r3, r3
 800bc0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bc12:	4152      	adcs	r2, r2
 800bc14:	429d      	cmp	r5, r3
 800bc16:	e7d0      	b.n	800bbba <__ieee754_pow+0x2a>
 800bc18:	2d00      	cmp	r5, #0
 800bc1a:	da3b      	bge.n	800bc94 <__ieee754_pow+0x104>
 800bc1c:	4b72      	ldr	r3, [pc, #456]	; (800bde8 <__ieee754_pow+0x258>)
 800bc1e:	4598      	cmp	r8, r3
 800bc20:	dc51      	bgt.n	800bcc6 <__ieee754_pow+0x136>
 800bc22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bc26:	4598      	cmp	r8, r3
 800bc28:	f340 84ac 	ble.w	800c584 <__ieee754_pow+0x9f4>
 800bc2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bc30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bc34:	2b14      	cmp	r3, #20
 800bc36:	dd0f      	ble.n	800bc58 <__ieee754_pow+0xc8>
 800bc38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bc3c:	fa22 f103 	lsr.w	r1, r2, r3
 800bc40:	fa01 f303 	lsl.w	r3, r1, r3
 800bc44:	4293      	cmp	r3, r2
 800bc46:	f040 849d 	bne.w	800c584 <__ieee754_pow+0x9f4>
 800bc4a:	f001 0101 	and.w	r1, r1, #1
 800bc4e:	f1c1 0302 	rsb	r3, r1, #2
 800bc52:	9304      	str	r3, [sp, #16]
 800bc54:	b182      	cbz	r2, 800bc78 <__ieee754_pow+0xe8>
 800bc56:	e05f      	b.n	800bd18 <__ieee754_pow+0x188>
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	d15b      	bne.n	800bd14 <__ieee754_pow+0x184>
 800bc5c:	f1c3 0314 	rsb	r3, r3, #20
 800bc60:	fa48 f103 	asr.w	r1, r8, r3
 800bc64:	fa01 f303 	lsl.w	r3, r1, r3
 800bc68:	4543      	cmp	r3, r8
 800bc6a:	f040 8488 	bne.w	800c57e <__ieee754_pow+0x9ee>
 800bc6e:	f001 0101 	and.w	r1, r1, #1
 800bc72:	f1c1 0302 	rsb	r3, r1, #2
 800bc76:	9304      	str	r3, [sp, #16]
 800bc78:	4b5c      	ldr	r3, [pc, #368]	; (800bdec <__ieee754_pow+0x25c>)
 800bc7a:	4598      	cmp	r8, r3
 800bc7c:	d132      	bne.n	800bce4 <__ieee754_pow+0x154>
 800bc7e:	f1b9 0f00 	cmp.w	r9, #0
 800bc82:	f280 8478 	bge.w	800c576 <__ieee754_pow+0x9e6>
 800bc86:	4959      	ldr	r1, [pc, #356]	; (800bdec <__ieee754_pow+0x25c>)
 800bc88:	4632      	mov	r2, r6
 800bc8a:	463b      	mov	r3, r7
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	f7f4 fde5 	bl	800085c <__aeabi_ddiv>
 800bc92:	e79c      	b.n	800bbce <__ieee754_pow+0x3e>
 800bc94:	2300      	movs	r3, #0
 800bc96:	9304      	str	r3, [sp, #16]
 800bc98:	2a00      	cmp	r2, #0
 800bc9a:	d13d      	bne.n	800bd18 <__ieee754_pow+0x188>
 800bc9c:	4b51      	ldr	r3, [pc, #324]	; (800bde4 <__ieee754_pow+0x254>)
 800bc9e:	4598      	cmp	r8, r3
 800bca0:	d1ea      	bne.n	800bc78 <__ieee754_pow+0xe8>
 800bca2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bca6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bcaa:	ea53 030a 	orrs.w	r3, r3, sl
 800bcae:	f000 845a 	beq.w	800c566 <__ieee754_pow+0x9d6>
 800bcb2:	4b4f      	ldr	r3, [pc, #316]	; (800bdf0 <__ieee754_pow+0x260>)
 800bcb4:	429c      	cmp	r4, r3
 800bcb6:	dd08      	ble.n	800bcca <__ieee754_pow+0x13a>
 800bcb8:	f1b9 0f00 	cmp.w	r9, #0
 800bcbc:	f2c0 8457 	blt.w	800c56e <__ieee754_pow+0x9de>
 800bcc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcc4:	e783      	b.n	800bbce <__ieee754_pow+0x3e>
 800bcc6:	2302      	movs	r3, #2
 800bcc8:	e7e5      	b.n	800bc96 <__ieee754_pow+0x106>
 800bcca:	f1b9 0f00 	cmp.w	r9, #0
 800bcce:	f04f 0000 	mov.w	r0, #0
 800bcd2:	f04f 0100 	mov.w	r1, #0
 800bcd6:	f6bf af7a 	bge.w	800bbce <__ieee754_pow+0x3e>
 800bcda:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bcde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bce2:	e774      	b.n	800bbce <__ieee754_pow+0x3e>
 800bce4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bce8:	d106      	bne.n	800bcf8 <__ieee754_pow+0x168>
 800bcea:	4632      	mov	r2, r6
 800bcec:	463b      	mov	r3, r7
 800bcee:	4630      	mov	r0, r6
 800bcf0:	4639      	mov	r1, r7
 800bcf2:	f7f4 fc89 	bl	8000608 <__aeabi_dmul>
 800bcf6:	e76a      	b.n	800bbce <__ieee754_pow+0x3e>
 800bcf8:	4b3e      	ldr	r3, [pc, #248]	; (800bdf4 <__ieee754_pow+0x264>)
 800bcfa:	4599      	cmp	r9, r3
 800bcfc:	d10c      	bne.n	800bd18 <__ieee754_pow+0x188>
 800bcfe:	2d00      	cmp	r5, #0
 800bd00:	db0a      	blt.n	800bd18 <__ieee754_pow+0x188>
 800bd02:	ec47 6b10 	vmov	d0, r6, r7
 800bd06:	b009      	add	sp, #36	; 0x24
 800bd08:	ecbd 8b06 	vpop	{d8-d10}
 800bd0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd10:	f000 bc6c 	b.w	800c5ec <__ieee754_sqrt>
 800bd14:	2300      	movs	r3, #0
 800bd16:	9304      	str	r3, [sp, #16]
 800bd18:	ec47 6b10 	vmov	d0, r6, r7
 800bd1c:	f000 fd48 	bl	800c7b0 <fabs>
 800bd20:	ec51 0b10 	vmov	r0, r1, d0
 800bd24:	f1ba 0f00 	cmp.w	sl, #0
 800bd28:	d129      	bne.n	800bd7e <__ieee754_pow+0x1ee>
 800bd2a:	b124      	cbz	r4, 800bd36 <__ieee754_pow+0x1a6>
 800bd2c:	4b2f      	ldr	r3, [pc, #188]	; (800bdec <__ieee754_pow+0x25c>)
 800bd2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d123      	bne.n	800bd7e <__ieee754_pow+0x1ee>
 800bd36:	f1b9 0f00 	cmp.w	r9, #0
 800bd3a:	da05      	bge.n	800bd48 <__ieee754_pow+0x1b8>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	2000      	movs	r0, #0
 800bd42:	492a      	ldr	r1, [pc, #168]	; (800bdec <__ieee754_pow+0x25c>)
 800bd44:	f7f4 fd8a 	bl	800085c <__aeabi_ddiv>
 800bd48:	2d00      	cmp	r5, #0
 800bd4a:	f6bf af40 	bge.w	800bbce <__ieee754_pow+0x3e>
 800bd4e:	9b04      	ldr	r3, [sp, #16]
 800bd50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bd54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bd58:	4323      	orrs	r3, r4
 800bd5a:	d108      	bne.n	800bd6e <__ieee754_pow+0x1de>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	4610      	mov	r0, r2
 800bd62:	4619      	mov	r1, r3
 800bd64:	f7f4 fa98 	bl	8000298 <__aeabi_dsub>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	e78f      	b.n	800bc8e <__ieee754_pow+0xfe>
 800bd6e:	9b04      	ldr	r3, [sp, #16]
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	f47f af2c 	bne.w	800bbce <__ieee754_pow+0x3e>
 800bd76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	e727      	b.n	800bbce <__ieee754_pow+0x3e>
 800bd7e:	0feb      	lsrs	r3, r5, #31
 800bd80:	3b01      	subs	r3, #1
 800bd82:	9306      	str	r3, [sp, #24]
 800bd84:	9a06      	ldr	r2, [sp, #24]
 800bd86:	9b04      	ldr	r3, [sp, #16]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	d102      	bne.n	800bd92 <__ieee754_pow+0x202>
 800bd8c:	4632      	mov	r2, r6
 800bd8e:	463b      	mov	r3, r7
 800bd90:	e7e6      	b.n	800bd60 <__ieee754_pow+0x1d0>
 800bd92:	4b19      	ldr	r3, [pc, #100]	; (800bdf8 <__ieee754_pow+0x268>)
 800bd94:	4598      	cmp	r8, r3
 800bd96:	f340 80fb 	ble.w	800bf90 <__ieee754_pow+0x400>
 800bd9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bd9e:	4598      	cmp	r8, r3
 800bda0:	4b13      	ldr	r3, [pc, #76]	; (800bdf0 <__ieee754_pow+0x260>)
 800bda2:	dd0c      	ble.n	800bdbe <__ieee754_pow+0x22e>
 800bda4:	429c      	cmp	r4, r3
 800bda6:	dc0f      	bgt.n	800bdc8 <__ieee754_pow+0x238>
 800bda8:	f1b9 0f00 	cmp.w	r9, #0
 800bdac:	da0f      	bge.n	800bdce <__ieee754_pow+0x23e>
 800bdae:	2000      	movs	r0, #0
 800bdb0:	b009      	add	sp, #36	; 0x24
 800bdb2:	ecbd 8b06 	vpop	{d8-d10}
 800bdb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdba:	f000 bcf0 	b.w	800c79e <__math_oflow>
 800bdbe:	429c      	cmp	r4, r3
 800bdc0:	dbf2      	blt.n	800bda8 <__ieee754_pow+0x218>
 800bdc2:	4b0a      	ldr	r3, [pc, #40]	; (800bdec <__ieee754_pow+0x25c>)
 800bdc4:	429c      	cmp	r4, r3
 800bdc6:	dd19      	ble.n	800bdfc <__ieee754_pow+0x26c>
 800bdc8:	f1b9 0f00 	cmp.w	r9, #0
 800bdcc:	dcef      	bgt.n	800bdae <__ieee754_pow+0x21e>
 800bdce:	2000      	movs	r0, #0
 800bdd0:	b009      	add	sp, #36	; 0x24
 800bdd2:	ecbd 8b06 	vpop	{d8-d10}
 800bdd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdda:	f000 bcd7 	b.w	800c78c <__math_uflow>
 800bdde:	bf00      	nop
 800bde0:	fff00000 	.word	0xfff00000
 800bde4:	7ff00000 	.word	0x7ff00000
 800bde8:	433fffff 	.word	0x433fffff
 800bdec:	3ff00000 	.word	0x3ff00000
 800bdf0:	3fefffff 	.word	0x3fefffff
 800bdf4:	3fe00000 	.word	0x3fe00000
 800bdf8:	41e00000 	.word	0x41e00000
 800bdfc:	4b60      	ldr	r3, [pc, #384]	; (800bf80 <__ieee754_pow+0x3f0>)
 800bdfe:	2200      	movs	r2, #0
 800be00:	f7f4 fa4a 	bl	8000298 <__aeabi_dsub>
 800be04:	a354      	add	r3, pc, #336	; (adr r3, 800bf58 <__ieee754_pow+0x3c8>)
 800be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0a:	4604      	mov	r4, r0
 800be0c:	460d      	mov	r5, r1
 800be0e:	f7f4 fbfb 	bl	8000608 <__aeabi_dmul>
 800be12:	a353      	add	r3, pc, #332	; (adr r3, 800bf60 <__ieee754_pow+0x3d0>)
 800be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be18:	4606      	mov	r6, r0
 800be1a:	460f      	mov	r7, r1
 800be1c:	4620      	mov	r0, r4
 800be1e:	4629      	mov	r1, r5
 800be20:	f7f4 fbf2 	bl	8000608 <__aeabi_dmul>
 800be24:	4b57      	ldr	r3, [pc, #348]	; (800bf84 <__ieee754_pow+0x3f4>)
 800be26:	4682      	mov	sl, r0
 800be28:	468b      	mov	fp, r1
 800be2a:	2200      	movs	r2, #0
 800be2c:	4620      	mov	r0, r4
 800be2e:	4629      	mov	r1, r5
 800be30:	f7f4 fbea 	bl	8000608 <__aeabi_dmul>
 800be34:	4602      	mov	r2, r0
 800be36:	460b      	mov	r3, r1
 800be38:	a14b      	add	r1, pc, #300	; (adr r1, 800bf68 <__ieee754_pow+0x3d8>)
 800be3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be3e:	f7f4 fa2b 	bl	8000298 <__aeabi_dsub>
 800be42:	4622      	mov	r2, r4
 800be44:	462b      	mov	r3, r5
 800be46:	f7f4 fbdf 	bl	8000608 <__aeabi_dmul>
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	2000      	movs	r0, #0
 800be50:	494d      	ldr	r1, [pc, #308]	; (800bf88 <__ieee754_pow+0x3f8>)
 800be52:	f7f4 fa21 	bl	8000298 <__aeabi_dsub>
 800be56:	4622      	mov	r2, r4
 800be58:	4680      	mov	r8, r0
 800be5a:	4689      	mov	r9, r1
 800be5c:	462b      	mov	r3, r5
 800be5e:	4620      	mov	r0, r4
 800be60:	4629      	mov	r1, r5
 800be62:	f7f4 fbd1 	bl	8000608 <__aeabi_dmul>
 800be66:	4602      	mov	r2, r0
 800be68:	460b      	mov	r3, r1
 800be6a:	4640      	mov	r0, r8
 800be6c:	4649      	mov	r1, r9
 800be6e:	f7f4 fbcb 	bl	8000608 <__aeabi_dmul>
 800be72:	a33f      	add	r3, pc, #252	; (adr r3, 800bf70 <__ieee754_pow+0x3e0>)
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f7f4 fbc6 	bl	8000608 <__aeabi_dmul>
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	4650      	mov	r0, sl
 800be82:	4659      	mov	r1, fp
 800be84:	f7f4 fa08 	bl	8000298 <__aeabi_dsub>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4680      	mov	r8, r0
 800be8e:	4689      	mov	r9, r1
 800be90:	4630      	mov	r0, r6
 800be92:	4639      	mov	r1, r7
 800be94:	f7f4 fa02 	bl	800029c <__adddf3>
 800be98:	2000      	movs	r0, #0
 800be9a:	4632      	mov	r2, r6
 800be9c:	463b      	mov	r3, r7
 800be9e:	4604      	mov	r4, r0
 800bea0:	460d      	mov	r5, r1
 800bea2:	f7f4 f9f9 	bl	8000298 <__aeabi_dsub>
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	4640      	mov	r0, r8
 800beac:	4649      	mov	r1, r9
 800beae:	f7f4 f9f3 	bl	8000298 <__aeabi_dsub>
 800beb2:	9b04      	ldr	r3, [sp, #16]
 800beb4:	9a06      	ldr	r2, [sp, #24]
 800beb6:	3b01      	subs	r3, #1
 800beb8:	4313      	orrs	r3, r2
 800beba:	4682      	mov	sl, r0
 800bebc:	468b      	mov	fp, r1
 800bebe:	f040 81e7 	bne.w	800c290 <__ieee754_pow+0x700>
 800bec2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bf78 <__ieee754_pow+0x3e8>
 800bec6:	eeb0 8a47 	vmov.f32	s16, s14
 800beca:	eef0 8a67 	vmov.f32	s17, s15
 800bece:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bed2:	2600      	movs	r6, #0
 800bed4:	4632      	mov	r2, r6
 800bed6:	463b      	mov	r3, r7
 800bed8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bedc:	f7f4 f9dc 	bl	8000298 <__aeabi_dsub>
 800bee0:	4622      	mov	r2, r4
 800bee2:	462b      	mov	r3, r5
 800bee4:	f7f4 fb90 	bl	8000608 <__aeabi_dmul>
 800bee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800beec:	4680      	mov	r8, r0
 800beee:	4689      	mov	r9, r1
 800bef0:	4650      	mov	r0, sl
 800bef2:	4659      	mov	r1, fp
 800bef4:	f7f4 fb88 	bl	8000608 <__aeabi_dmul>
 800bef8:	4602      	mov	r2, r0
 800befa:	460b      	mov	r3, r1
 800befc:	4640      	mov	r0, r8
 800befe:	4649      	mov	r1, r9
 800bf00:	f7f4 f9cc 	bl	800029c <__adddf3>
 800bf04:	4632      	mov	r2, r6
 800bf06:	463b      	mov	r3, r7
 800bf08:	4680      	mov	r8, r0
 800bf0a:	4689      	mov	r9, r1
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	4629      	mov	r1, r5
 800bf10:	f7f4 fb7a 	bl	8000608 <__aeabi_dmul>
 800bf14:	460b      	mov	r3, r1
 800bf16:	4604      	mov	r4, r0
 800bf18:	460d      	mov	r5, r1
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	4649      	mov	r1, r9
 800bf1e:	4640      	mov	r0, r8
 800bf20:	f7f4 f9bc 	bl	800029c <__adddf3>
 800bf24:	4b19      	ldr	r3, [pc, #100]	; (800bf8c <__ieee754_pow+0x3fc>)
 800bf26:	4299      	cmp	r1, r3
 800bf28:	ec45 4b19 	vmov	d9, r4, r5
 800bf2c:	4606      	mov	r6, r0
 800bf2e:	460f      	mov	r7, r1
 800bf30:	468b      	mov	fp, r1
 800bf32:	f340 82f1 	ble.w	800c518 <__ieee754_pow+0x988>
 800bf36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bf3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bf3e:	4303      	orrs	r3, r0
 800bf40:	f000 81e4 	beq.w	800c30c <__ieee754_pow+0x77c>
 800bf44:	ec51 0b18 	vmov	r0, r1, d8
 800bf48:	2200      	movs	r2, #0
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	f7f4 fdce 	bl	8000aec <__aeabi_dcmplt>
 800bf50:	3800      	subs	r0, #0
 800bf52:	bf18      	it	ne
 800bf54:	2001      	movne	r0, #1
 800bf56:	e72b      	b.n	800bdb0 <__ieee754_pow+0x220>
 800bf58:	60000000 	.word	0x60000000
 800bf5c:	3ff71547 	.word	0x3ff71547
 800bf60:	f85ddf44 	.word	0xf85ddf44
 800bf64:	3e54ae0b 	.word	0x3e54ae0b
 800bf68:	55555555 	.word	0x55555555
 800bf6c:	3fd55555 	.word	0x3fd55555
 800bf70:	652b82fe 	.word	0x652b82fe
 800bf74:	3ff71547 	.word	0x3ff71547
 800bf78:	00000000 	.word	0x00000000
 800bf7c:	bff00000 	.word	0xbff00000
 800bf80:	3ff00000 	.word	0x3ff00000
 800bf84:	3fd00000 	.word	0x3fd00000
 800bf88:	3fe00000 	.word	0x3fe00000
 800bf8c:	408fffff 	.word	0x408fffff
 800bf90:	4bd5      	ldr	r3, [pc, #852]	; (800c2e8 <__ieee754_pow+0x758>)
 800bf92:	402b      	ands	r3, r5
 800bf94:	2200      	movs	r2, #0
 800bf96:	b92b      	cbnz	r3, 800bfa4 <__ieee754_pow+0x414>
 800bf98:	4bd4      	ldr	r3, [pc, #848]	; (800c2ec <__ieee754_pow+0x75c>)
 800bf9a:	f7f4 fb35 	bl	8000608 <__aeabi_dmul>
 800bf9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bfa2:	460c      	mov	r4, r1
 800bfa4:	1523      	asrs	r3, r4, #20
 800bfa6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bfaa:	4413      	add	r3, r2
 800bfac:	9305      	str	r3, [sp, #20]
 800bfae:	4bd0      	ldr	r3, [pc, #832]	; (800c2f0 <__ieee754_pow+0x760>)
 800bfb0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bfb4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bfb8:	429c      	cmp	r4, r3
 800bfba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bfbe:	dd08      	ble.n	800bfd2 <__ieee754_pow+0x442>
 800bfc0:	4bcc      	ldr	r3, [pc, #816]	; (800c2f4 <__ieee754_pow+0x764>)
 800bfc2:	429c      	cmp	r4, r3
 800bfc4:	f340 8162 	ble.w	800c28c <__ieee754_pow+0x6fc>
 800bfc8:	9b05      	ldr	r3, [sp, #20]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	9305      	str	r3, [sp, #20]
 800bfce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bfd2:	2400      	movs	r4, #0
 800bfd4:	00e3      	lsls	r3, r4, #3
 800bfd6:	9307      	str	r3, [sp, #28]
 800bfd8:	4bc7      	ldr	r3, [pc, #796]	; (800c2f8 <__ieee754_pow+0x768>)
 800bfda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfde:	ed93 7b00 	vldr	d7, [r3]
 800bfe2:	4629      	mov	r1, r5
 800bfe4:	ec53 2b17 	vmov	r2, r3, d7
 800bfe8:	eeb0 9a47 	vmov.f32	s18, s14
 800bfec:	eef0 9a67 	vmov.f32	s19, s15
 800bff0:	4682      	mov	sl, r0
 800bff2:	f7f4 f951 	bl	8000298 <__aeabi_dsub>
 800bff6:	4652      	mov	r2, sl
 800bff8:	4606      	mov	r6, r0
 800bffa:	460f      	mov	r7, r1
 800bffc:	462b      	mov	r3, r5
 800bffe:	ec51 0b19 	vmov	r0, r1, d9
 800c002:	f7f4 f94b 	bl	800029c <__adddf3>
 800c006:	4602      	mov	r2, r0
 800c008:	460b      	mov	r3, r1
 800c00a:	2000      	movs	r0, #0
 800c00c:	49bb      	ldr	r1, [pc, #748]	; (800c2fc <__ieee754_pow+0x76c>)
 800c00e:	f7f4 fc25 	bl	800085c <__aeabi_ddiv>
 800c012:	ec41 0b1a 	vmov	d10, r0, r1
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	4630      	mov	r0, r6
 800c01c:	4639      	mov	r1, r7
 800c01e:	f7f4 faf3 	bl	8000608 <__aeabi_dmul>
 800c022:	2300      	movs	r3, #0
 800c024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c028:	9302      	str	r3, [sp, #8]
 800c02a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c02e:	46ab      	mov	fp, r5
 800c030:	106d      	asrs	r5, r5, #1
 800c032:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c036:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c03a:	ec41 0b18 	vmov	d8, r0, r1
 800c03e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c042:	2200      	movs	r2, #0
 800c044:	4640      	mov	r0, r8
 800c046:	4649      	mov	r1, r9
 800c048:	4614      	mov	r4, r2
 800c04a:	461d      	mov	r5, r3
 800c04c:	f7f4 fadc 	bl	8000608 <__aeabi_dmul>
 800c050:	4602      	mov	r2, r0
 800c052:	460b      	mov	r3, r1
 800c054:	4630      	mov	r0, r6
 800c056:	4639      	mov	r1, r7
 800c058:	f7f4 f91e 	bl	8000298 <__aeabi_dsub>
 800c05c:	ec53 2b19 	vmov	r2, r3, d9
 800c060:	4606      	mov	r6, r0
 800c062:	460f      	mov	r7, r1
 800c064:	4620      	mov	r0, r4
 800c066:	4629      	mov	r1, r5
 800c068:	f7f4 f916 	bl	8000298 <__aeabi_dsub>
 800c06c:	4602      	mov	r2, r0
 800c06e:	460b      	mov	r3, r1
 800c070:	4650      	mov	r0, sl
 800c072:	4659      	mov	r1, fp
 800c074:	f7f4 f910 	bl	8000298 <__aeabi_dsub>
 800c078:	4642      	mov	r2, r8
 800c07a:	464b      	mov	r3, r9
 800c07c:	f7f4 fac4 	bl	8000608 <__aeabi_dmul>
 800c080:	4602      	mov	r2, r0
 800c082:	460b      	mov	r3, r1
 800c084:	4630      	mov	r0, r6
 800c086:	4639      	mov	r1, r7
 800c088:	f7f4 f906 	bl	8000298 <__aeabi_dsub>
 800c08c:	ec53 2b1a 	vmov	r2, r3, d10
 800c090:	f7f4 faba 	bl	8000608 <__aeabi_dmul>
 800c094:	ec53 2b18 	vmov	r2, r3, d8
 800c098:	ec41 0b19 	vmov	d9, r0, r1
 800c09c:	ec51 0b18 	vmov	r0, r1, d8
 800c0a0:	f7f4 fab2 	bl	8000608 <__aeabi_dmul>
 800c0a4:	a37c      	add	r3, pc, #496	; (adr r3, 800c298 <__ieee754_pow+0x708>)
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	4604      	mov	r4, r0
 800c0ac:	460d      	mov	r5, r1
 800c0ae:	f7f4 faab 	bl	8000608 <__aeabi_dmul>
 800c0b2:	a37b      	add	r3, pc, #492	; (adr r3, 800c2a0 <__ieee754_pow+0x710>)
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	f7f4 f8f0 	bl	800029c <__adddf3>
 800c0bc:	4622      	mov	r2, r4
 800c0be:	462b      	mov	r3, r5
 800c0c0:	f7f4 faa2 	bl	8000608 <__aeabi_dmul>
 800c0c4:	a378      	add	r3, pc, #480	; (adr r3, 800c2a8 <__ieee754_pow+0x718>)
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	f7f4 f8e7 	bl	800029c <__adddf3>
 800c0ce:	4622      	mov	r2, r4
 800c0d0:	462b      	mov	r3, r5
 800c0d2:	f7f4 fa99 	bl	8000608 <__aeabi_dmul>
 800c0d6:	a376      	add	r3, pc, #472	; (adr r3, 800c2b0 <__ieee754_pow+0x720>)
 800c0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0dc:	f7f4 f8de 	bl	800029c <__adddf3>
 800c0e0:	4622      	mov	r2, r4
 800c0e2:	462b      	mov	r3, r5
 800c0e4:	f7f4 fa90 	bl	8000608 <__aeabi_dmul>
 800c0e8:	a373      	add	r3, pc, #460	; (adr r3, 800c2b8 <__ieee754_pow+0x728>)
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	f7f4 f8d5 	bl	800029c <__adddf3>
 800c0f2:	4622      	mov	r2, r4
 800c0f4:	462b      	mov	r3, r5
 800c0f6:	f7f4 fa87 	bl	8000608 <__aeabi_dmul>
 800c0fa:	a371      	add	r3, pc, #452	; (adr r3, 800c2c0 <__ieee754_pow+0x730>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	f7f4 f8cc 	bl	800029c <__adddf3>
 800c104:	4622      	mov	r2, r4
 800c106:	4606      	mov	r6, r0
 800c108:	460f      	mov	r7, r1
 800c10a:	462b      	mov	r3, r5
 800c10c:	4620      	mov	r0, r4
 800c10e:	4629      	mov	r1, r5
 800c110:	f7f4 fa7a 	bl	8000608 <__aeabi_dmul>
 800c114:	4602      	mov	r2, r0
 800c116:	460b      	mov	r3, r1
 800c118:	4630      	mov	r0, r6
 800c11a:	4639      	mov	r1, r7
 800c11c:	f7f4 fa74 	bl	8000608 <__aeabi_dmul>
 800c120:	4642      	mov	r2, r8
 800c122:	4604      	mov	r4, r0
 800c124:	460d      	mov	r5, r1
 800c126:	464b      	mov	r3, r9
 800c128:	ec51 0b18 	vmov	r0, r1, d8
 800c12c:	f7f4 f8b6 	bl	800029c <__adddf3>
 800c130:	ec53 2b19 	vmov	r2, r3, d9
 800c134:	f7f4 fa68 	bl	8000608 <__aeabi_dmul>
 800c138:	4622      	mov	r2, r4
 800c13a:	462b      	mov	r3, r5
 800c13c:	f7f4 f8ae 	bl	800029c <__adddf3>
 800c140:	4642      	mov	r2, r8
 800c142:	4682      	mov	sl, r0
 800c144:	468b      	mov	fp, r1
 800c146:	464b      	mov	r3, r9
 800c148:	4640      	mov	r0, r8
 800c14a:	4649      	mov	r1, r9
 800c14c:	f7f4 fa5c 	bl	8000608 <__aeabi_dmul>
 800c150:	4b6b      	ldr	r3, [pc, #428]	; (800c300 <__ieee754_pow+0x770>)
 800c152:	2200      	movs	r2, #0
 800c154:	4606      	mov	r6, r0
 800c156:	460f      	mov	r7, r1
 800c158:	f7f4 f8a0 	bl	800029c <__adddf3>
 800c15c:	4652      	mov	r2, sl
 800c15e:	465b      	mov	r3, fp
 800c160:	f7f4 f89c 	bl	800029c <__adddf3>
 800c164:	2000      	movs	r0, #0
 800c166:	4604      	mov	r4, r0
 800c168:	460d      	mov	r5, r1
 800c16a:	4602      	mov	r2, r0
 800c16c:	460b      	mov	r3, r1
 800c16e:	4640      	mov	r0, r8
 800c170:	4649      	mov	r1, r9
 800c172:	f7f4 fa49 	bl	8000608 <__aeabi_dmul>
 800c176:	4b62      	ldr	r3, [pc, #392]	; (800c300 <__ieee754_pow+0x770>)
 800c178:	4680      	mov	r8, r0
 800c17a:	4689      	mov	r9, r1
 800c17c:	2200      	movs	r2, #0
 800c17e:	4620      	mov	r0, r4
 800c180:	4629      	mov	r1, r5
 800c182:	f7f4 f889 	bl	8000298 <__aeabi_dsub>
 800c186:	4632      	mov	r2, r6
 800c188:	463b      	mov	r3, r7
 800c18a:	f7f4 f885 	bl	8000298 <__aeabi_dsub>
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	4650      	mov	r0, sl
 800c194:	4659      	mov	r1, fp
 800c196:	f7f4 f87f 	bl	8000298 <__aeabi_dsub>
 800c19a:	ec53 2b18 	vmov	r2, r3, d8
 800c19e:	f7f4 fa33 	bl	8000608 <__aeabi_dmul>
 800c1a2:	4622      	mov	r2, r4
 800c1a4:	4606      	mov	r6, r0
 800c1a6:	460f      	mov	r7, r1
 800c1a8:	462b      	mov	r3, r5
 800c1aa:	ec51 0b19 	vmov	r0, r1, d9
 800c1ae:	f7f4 fa2b 	bl	8000608 <__aeabi_dmul>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	4639      	mov	r1, r7
 800c1ba:	f7f4 f86f 	bl	800029c <__adddf3>
 800c1be:	4606      	mov	r6, r0
 800c1c0:	460f      	mov	r7, r1
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4640      	mov	r0, r8
 800c1c8:	4649      	mov	r1, r9
 800c1ca:	f7f4 f867 	bl	800029c <__adddf3>
 800c1ce:	a33e      	add	r3, pc, #248	; (adr r3, 800c2c8 <__ieee754_pow+0x738>)
 800c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	460d      	mov	r5, r1
 800c1da:	f7f4 fa15 	bl	8000608 <__aeabi_dmul>
 800c1de:	4642      	mov	r2, r8
 800c1e0:	ec41 0b18 	vmov	d8, r0, r1
 800c1e4:	464b      	mov	r3, r9
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	4629      	mov	r1, r5
 800c1ea:	f7f4 f855 	bl	8000298 <__aeabi_dsub>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	4639      	mov	r1, r7
 800c1f6:	f7f4 f84f 	bl	8000298 <__aeabi_dsub>
 800c1fa:	a335      	add	r3, pc, #212	; (adr r3, 800c2d0 <__ieee754_pow+0x740>)
 800c1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c200:	f7f4 fa02 	bl	8000608 <__aeabi_dmul>
 800c204:	a334      	add	r3, pc, #208	; (adr r3, 800c2d8 <__ieee754_pow+0x748>)
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	4606      	mov	r6, r0
 800c20c:	460f      	mov	r7, r1
 800c20e:	4620      	mov	r0, r4
 800c210:	4629      	mov	r1, r5
 800c212:	f7f4 f9f9 	bl	8000608 <__aeabi_dmul>
 800c216:	4602      	mov	r2, r0
 800c218:	460b      	mov	r3, r1
 800c21a:	4630      	mov	r0, r6
 800c21c:	4639      	mov	r1, r7
 800c21e:	f7f4 f83d 	bl	800029c <__adddf3>
 800c222:	9a07      	ldr	r2, [sp, #28]
 800c224:	4b37      	ldr	r3, [pc, #220]	; (800c304 <__ieee754_pow+0x774>)
 800c226:	4413      	add	r3, r2
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	f7f4 f836 	bl	800029c <__adddf3>
 800c230:	4682      	mov	sl, r0
 800c232:	9805      	ldr	r0, [sp, #20]
 800c234:	468b      	mov	fp, r1
 800c236:	f7f4 f97d 	bl	8000534 <__aeabi_i2d>
 800c23a:	9a07      	ldr	r2, [sp, #28]
 800c23c:	4b32      	ldr	r3, [pc, #200]	; (800c308 <__ieee754_pow+0x778>)
 800c23e:	4413      	add	r3, r2
 800c240:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c244:	4606      	mov	r6, r0
 800c246:	460f      	mov	r7, r1
 800c248:	4652      	mov	r2, sl
 800c24a:	465b      	mov	r3, fp
 800c24c:	ec51 0b18 	vmov	r0, r1, d8
 800c250:	f7f4 f824 	bl	800029c <__adddf3>
 800c254:	4642      	mov	r2, r8
 800c256:	464b      	mov	r3, r9
 800c258:	f7f4 f820 	bl	800029c <__adddf3>
 800c25c:	4632      	mov	r2, r6
 800c25e:	463b      	mov	r3, r7
 800c260:	f7f4 f81c 	bl	800029c <__adddf3>
 800c264:	2000      	movs	r0, #0
 800c266:	4632      	mov	r2, r6
 800c268:	463b      	mov	r3, r7
 800c26a:	4604      	mov	r4, r0
 800c26c:	460d      	mov	r5, r1
 800c26e:	f7f4 f813 	bl	8000298 <__aeabi_dsub>
 800c272:	4642      	mov	r2, r8
 800c274:	464b      	mov	r3, r9
 800c276:	f7f4 f80f 	bl	8000298 <__aeabi_dsub>
 800c27a:	ec53 2b18 	vmov	r2, r3, d8
 800c27e:	f7f4 f80b 	bl	8000298 <__aeabi_dsub>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
 800c286:	4650      	mov	r0, sl
 800c288:	4659      	mov	r1, fp
 800c28a:	e610      	b.n	800beae <__ieee754_pow+0x31e>
 800c28c:	2401      	movs	r4, #1
 800c28e:	e6a1      	b.n	800bfd4 <__ieee754_pow+0x444>
 800c290:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c2e0 <__ieee754_pow+0x750>
 800c294:	e617      	b.n	800bec6 <__ieee754_pow+0x336>
 800c296:	bf00      	nop
 800c298:	4a454eef 	.word	0x4a454eef
 800c29c:	3fca7e28 	.word	0x3fca7e28
 800c2a0:	93c9db65 	.word	0x93c9db65
 800c2a4:	3fcd864a 	.word	0x3fcd864a
 800c2a8:	a91d4101 	.word	0xa91d4101
 800c2ac:	3fd17460 	.word	0x3fd17460
 800c2b0:	518f264d 	.word	0x518f264d
 800c2b4:	3fd55555 	.word	0x3fd55555
 800c2b8:	db6fabff 	.word	0xdb6fabff
 800c2bc:	3fdb6db6 	.word	0x3fdb6db6
 800c2c0:	33333303 	.word	0x33333303
 800c2c4:	3fe33333 	.word	0x3fe33333
 800c2c8:	e0000000 	.word	0xe0000000
 800c2cc:	3feec709 	.word	0x3feec709
 800c2d0:	dc3a03fd 	.word	0xdc3a03fd
 800c2d4:	3feec709 	.word	0x3feec709
 800c2d8:	145b01f5 	.word	0x145b01f5
 800c2dc:	be3e2fe0 	.word	0xbe3e2fe0
 800c2e0:	00000000 	.word	0x00000000
 800c2e4:	3ff00000 	.word	0x3ff00000
 800c2e8:	7ff00000 	.word	0x7ff00000
 800c2ec:	43400000 	.word	0x43400000
 800c2f0:	0003988e 	.word	0x0003988e
 800c2f4:	000bb679 	.word	0x000bb679
 800c2f8:	0800f458 	.word	0x0800f458
 800c2fc:	3ff00000 	.word	0x3ff00000
 800c300:	40080000 	.word	0x40080000
 800c304:	0800f478 	.word	0x0800f478
 800c308:	0800f468 	.word	0x0800f468
 800c30c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c5e4 <__ieee754_pow+0xa54>)
 800c30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c312:	4640      	mov	r0, r8
 800c314:	4649      	mov	r1, r9
 800c316:	f7f3 ffc1 	bl	800029c <__adddf3>
 800c31a:	4622      	mov	r2, r4
 800c31c:	ec41 0b1a 	vmov	d10, r0, r1
 800c320:	462b      	mov	r3, r5
 800c322:	4630      	mov	r0, r6
 800c324:	4639      	mov	r1, r7
 800c326:	f7f3 ffb7 	bl	8000298 <__aeabi_dsub>
 800c32a:	4602      	mov	r2, r0
 800c32c:	460b      	mov	r3, r1
 800c32e:	ec51 0b1a 	vmov	r0, r1, d10
 800c332:	f7f4 fbf9 	bl	8000b28 <__aeabi_dcmpgt>
 800c336:	2800      	cmp	r0, #0
 800c338:	f47f ae04 	bne.w	800bf44 <__ieee754_pow+0x3b4>
 800c33c:	4aa4      	ldr	r2, [pc, #656]	; (800c5d0 <__ieee754_pow+0xa40>)
 800c33e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c342:	4293      	cmp	r3, r2
 800c344:	f340 8108 	ble.w	800c558 <__ieee754_pow+0x9c8>
 800c348:	151b      	asrs	r3, r3, #20
 800c34a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c34e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c352:	fa4a f303 	asr.w	r3, sl, r3
 800c356:	445b      	add	r3, fp
 800c358:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c35c:	4e9d      	ldr	r6, [pc, #628]	; (800c5d4 <__ieee754_pow+0xa44>)
 800c35e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c362:	4116      	asrs	r6, r2
 800c364:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c368:	2000      	movs	r0, #0
 800c36a:	ea23 0106 	bic.w	r1, r3, r6
 800c36e:	f1c2 0214 	rsb	r2, r2, #20
 800c372:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c376:	fa4a fa02 	asr.w	sl, sl, r2
 800c37a:	f1bb 0f00 	cmp.w	fp, #0
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	4620      	mov	r0, r4
 800c384:	4629      	mov	r1, r5
 800c386:	bfb8      	it	lt
 800c388:	f1ca 0a00 	rsblt	sl, sl, #0
 800c38c:	f7f3 ff84 	bl	8000298 <__aeabi_dsub>
 800c390:	ec41 0b19 	vmov	d9, r0, r1
 800c394:	4642      	mov	r2, r8
 800c396:	464b      	mov	r3, r9
 800c398:	ec51 0b19 	vmov	r0, r1, d9
 800c39c:	f7f3 ff7e 	bl	800029c <__adddf3>
 800c3a0:	a37b      	add	r3, pc, #492	; (adr r3, 800c590 <__ieee754_pow+0xa00>)
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	460d      	mov	r5, r1
 800c3ac:	f7f4 f92c 	bl	8000608 <__aeabi_dmul>
 800c3b0:	ec53 2b19 	vmov	r2, r3, d9
 800c3b4:	4606      	mov	r6, r0
 800c3b6:	460f      	mov	r7, r1
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	4629      	mov	r1, r5
 800c3bc:	f7f3 ff6c 	bl	8000298 <__aeabi_dsub>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	4640      	mov	r0, r8
 800c3c6:	4649      	mov	r1, r9
 800c3c8:	f7f3 ff66 	bl	8000298 <__aeabi_dsub>
 800c3cc:	a372      	add	r3, pc, #456	; (adr r3, 800c598 <__ieee754_pow+0xa08>)
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	f7f4 f919 	bl	8000608 <__aeabi_dmul>
 800c3d6:	a372      	add	r3, pc, #456	; (adr r3, 800c5a0 <__ieee754_pow+0xa10>)
 800c3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3dc:	4680      	mov	r8, r0
 800c3de:	4689      	mov	r9, r1
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	f7f4 f910 	bl	8000608 <__aeabi_dmul>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	4640      	mov	r0, r8
 800c3ee:	4649      	mov	r1, r9
 800c3f0:	f7f3 ff54 	bl	800029c <__adddf3>
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	460d      	mov	r5, r1
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	4639      	mov	r1, r7
 800c400:	f7f3 ff4c 	bl	800029c <__adddf3>
 800c404:	4632      	mov	r2, r6
 800c406:	463b      	mov	r3, r7
 800c408:	4680      	mov	r8, r0
 800c40a:	4689      	mov	r9, r1
 800c40c:	f7f3 ff44 	bl	8000298 <__aeabi_dsub>
 800c410:	4602      	mov	r2, r0
 800c412:	460b      	mov	r3, r1
 800c414:	4620      	mov	r0, r4
 800c416:	4629      	mov	r1, r5
 800c418:	f7f3 ff3e 	bl	8000298 <__aeabi_dsub>
 800c41c:	4642      	mov	r2, r8
 800c41e:	4606      	mov	r6, r0
 800c420:	460f      	mov	r7, r1
 800c422:	464b      	mov	r3, r9
 800c424:	4640      	mov	r0, r8
 800c426:	4649      	mov	r1, r9
 800c428:	f7f4 f8ee 	bl	8000608 <__aeabi_dmul>
 800c42c:	a35e      	add	r3, pc, #376	; (adr r3, 800c5a8 <__ieee754_pow+0xa18>)
 800c42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c432:	4604      	mov	r4, r0
 800c434:	460d      	mov	r5, r1
 800c436:	f7f4 f8e7 	bl	8000608 <__aeabi_dmul>
 800c43a:	a35d      	add	r3, pc, #372	; (adr r3, 800c5b0 <__ieee754_pow+0xa20>)
 800c43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c440:	f7f3 ff2a 	bl	8000298 <__aeabi_dsub>
 800c444:	4622      	mov	r2, r4
 800c446:	462b      	mov	r3, r5
 800c448:	f7f4 f8de 	bl	8000608 <__aeabi_dmul>
 800c44c:	a35a      	add	r3, pc, #360	; (adr r3, 800c5b8 <__ieee754_pow+0xa28>)
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	f7f3 ff23 	bl	800029c <__adddf3>
 800c456:	4622      	mov	r2, r4
 800c458:	462b      	mov	r3, r5
 800c45a:	f7f4 f8d5 	bl	8000608 <__aeabi_dmul>
 800c45e:	a358      	add	r3, pc, #352	; (adr r3, 800c5c0 <__ieee754_pow+0xa30>)
 800c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c464:	f7f3 ff18 	bl	8000298 <__aeabi_dsub>
 800c468:	4622      	mov	r2, r4
 800c46a:	462b      	mov	r3, r5
 800c46c:	f7f4 f8cc 	bl	8000608 <__aeabi_dmul>
 800c470:	a355      	add	r3, pc, #340	; (adr r3, 800c5c8 <__ieee754_pow+0xa38>)
 800c472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c476:	f7f3 ff11 	bl	800029c <__adddf3>
 800c47a:	4622      	mov	r2, r4
 800c47c:	462b      	mov	r3, r5
 800c47e:	f7f4 f8c3 	bl	8000608 <__aeabi_dmul>
 800c482:	4602      	mov	r2, r0
 800c484:	460b      	mov	r3, r1
 800c486:	4640      	mov	r0, r8
 800c488:	4649      	mov	r1, r9
 800c48a:	f7f3 ff05 	bl	8000298 <__aeabi_dsub>
 800c48e:	4604      	mov	r4, r0
 800c490:	460d      	mov	r5, r1
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	4640      	mov	r0, r8
 800c498:	4649      	mov	r1, r9
 800c49a:	f7f4 f8b5 	bl	8000608 <__aeabi_dmul>
 800c49e:	2200      	movs	r2, #0
 800c4a0:	ec41 0b19 	vmov	d9, r0, r1
 800c4a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	4629      	mov	r1, r5
 800c4ac:	f7f3 fef4 	bl	8000298 <__aeabi_dsub>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	ec51 0b19 	vmov	r0, r1, d9
 800c4b8:	f7f4 f9d0 	bl	800085c <__aeabi_ddiv>
 800c4bc:	4632      	mov	r2, r6
 800c4be:	4604      	mov	r4, r0
 800c4c0:	460d      	mov	r5, r1
 800c4c2:	463b      	mov	r3, r7
 800c4c4:	4640      	mov	r0, r8
 800c4c6:	4649      	mov	r1, r9
 800c4c8:	f7f4 f89e 	bl	8000608 <__aeabi_dmul>
 800c4cc:	4632      	mov	r2, r6
 800c4ce:	463b      	mov	r3, r7
 800c4d0:	f7f3 fee4 	bl	800029c <__adddf3>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	4620      	mov	r0, r4
 800c4da:	4629      	mov	r1, r5
 800c4dc:	f7f3 fedc 	bl	8000298 <__aeabi_dsub>
 800c4e0:	4642      	mov	r2, r8
 800c4e2:	464b      	mov	r3, r9
 800c4e4:	f7f3 fed8 	bl	8000298 <__aeabi_dsub>
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	493a      	ldr	r1, [pc, #232]	; (800c5d8 <__ieee754_pow+0xa48>)
 800c4ee:	2000      	movs	r0, #0
 800c4f0:	f7f3 fed2 	bl	8000298 <__aeabi_dsub>
 800c4f4:	ec41 0b10 	vmov	d0, r0, r1
 800c4f8:	ee10 3a90 	vmov	r3, s1
 800c4fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c504:	da2b      	bge.n	800c55e <__ieee754_pow+0x9ce>
 800c506:	4650      	mov	r0, sl
 800c508:	f000 f966 	bl	800c7d8 <scalbn>
 800c50c:	ec51 0b10 	vmov	r0, r1, d0
 800c510:	ec53 2b18 	vmov	r2, r3, d8
 800c514:	f7ff bbed 	b.w	800bcf2 <__ieee754_pow+0x162>
 800c518:	4b30      	ldr	r3, [pc, #192]	; (800c5dc <__ieee754_pow+0xa4c>)
 800c51a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c51e:	429e      	cmp	r6, r3
 800c520:	f77f af0c 	ble.w	800c33c <__ieee754_pow+0x7ac>
 800c524:	4b2e      	ldr	r3, [pc, #184]	; (800c5e0 <__ieee754_pow+0xa50>)
 800c526:	440b      	add	r3, r1
 800c528:	4303      	orrs	r3, r0
 800c52a:	d009      	beq.n	800c540 <__ieee754_pow+0x9b0>
 800c52c:	ec51 0b18 	vmov	r0, r1, d8
 800c530:	2200      	movs	r2, #0
 800c532:	2300      	movs	r3, #0
 800c534:	f7f4 fada 	bl	8000aec <__aeabi_dcmplt>
 800c538:	3800      	subs	r0, #0
 800c53a:	bf18      	it	ne
 800c53c:	2001      	movne	r0, #1
 800c53e:	e447      	b.n	800bdd0 <__ieee754_pow+0x240>
 800c540:	4622      	mov	r2, r4
 800c542:	462b      	mov	r3, r5
 800c544:	f7f3 fea8 	bl	8000298 <__aeabi_dsub>
 800c548:	4642      	mov	r2, r8
 800c54a:	464b      	mov	r3, r9
 800c54c:	f7f4 fae2 	bl	8000b14 <__aeabi_dcmpge>
 800c550:	2800      	cmp	r0, #0
 800c552:	f43f aef3 	beq.w	800c33c <__ieee754_pow+0x7ac>
 800c556:	e7e9      	b.n	800c52c <__ieee754_pow+0x99c>
 800c558:	f04f 0a00 	mov.w	sl, #0
 800c55c:	e71a      	b.n	800c394 <__ieee754_pow+0x804>
 800c55e:	ec51 0b10 	vmov	r0, r1, d0
 800c562:	4619      	mov	r1, r3
 800c564:	e7d4      	b.n	800c510 <__ieee754_pow+0x980>
 800c566:	491c      	ldr	r1, [pc, #112]	; (800c5d8 <__ieee754_pow+0xa48>)
 800c568:	2000      	movs	r0, #0
 800c56a:	f7ff bb30 	b.w	800bbce <__ieee754_pow+0x3e>
 800c56e:	2000      	movs	r0, #0
 800c570:	2100      	movs	r1, #0
 800c572:	f7ff bb2c 	b.w	800bbce <__ieee754_pow+0x3e>
 800c576:	4630      	mov	r0, r6
 800c578:	4639      	mov	r1, r7
 800c57a:	f7ff bb28 	b.w	800bbce <__ieee754_pow+0x3e>
 800c57e:	9204      	str	r2, [sp, #16]
 800c580:	f7ff bb7a 	b.w	800bc78 <__ieee754_pow+0xe8>
 800c584:	2300      	movs	r3, #0
 800c586:	f7ff bb64 	b.w	800bc52 <__ieee754_pow+0xc2>
 800c58a:	bf00      	nop
 800c58c:	f3af 8000 	nop.w
 800c590:	00000000 	.word	0x00000000
 800c594:	3fe62e43 	.word	0x3fe62e43
 800c598:	fefa39ef 	.word	0xfefa39ef
 800c59c:	3fe62e42 	.word	0x3fe62e42
 800c5a0:	0ca86c39 	.word	0x0ca86c39
 800c5a4:	be205c61 	.word	0xbe205c61
 800c5a8:	72bea4d0 	.word	0x72bea4d0
 800c5ac:	3e663769 	.word	0x3e663769
 800c5b0:	c5d26bf1 	.word	0xc5d26bf1
 800c5b4:	3ebbbd41 	.word	0x3ebbbd41
 800c5b8:	af25de2c 	.word	0xaf25de2c
 800c5bc:	3f11566a 	.word	0x3f11566a
 800c5c0:	16bebd93 	.word	0x16bebd93
 800c5c4:	3f66c16c 	.word	0x3f66c16c
 800c5c8:	5555553e 	.word	0x5555553e
 800c5cc:	3fc55555 	.word	0x3fc55555
 800c5d0:	3fe00000 	.word	0x3fe00000
 800c5d4:	000fffff 	.word	0x000fffff
 800c5d8:	3ff00000 	.word	0x3ff00000
 800c5dc:	4090cbff 	.word	0x4090cbff
 800c5e0:	3f6f3400 	.word	0x3f6f3400
 800c5e4:	652b82fe 	.word	0x652b82fe
 800c5e8:	3c971547 	.word	0x3c971547

0800c5ec <__ieee754_sqrt>:
 800c5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f0:	ec55 4b10 	vmov	r4, r5, d0
 800c5f4:	4e55      	ldr	r6, [pc, #340]	; (800c74c <__ieee754_sqrt+0x160>)
 800c5f6:	43ae      	bics	r6, r5
 800c5f8:	ee10 0a10 	vmov	r0, s0
 800c5fc:	ee10 3a10 	vmov	r3, s0
 800c600:	462a      	mov	r2, r5
 800c602:	4629      	mov	r1, r5
 800c604:	d110      	bne.n	800c628 <__ieee754_sqrt+0x3c>
 800c606:	ee10 2a10 	vmov	r2, s0
 800c60a:	462b      	mov	r3, r5
 800c60c:	f7f3 fffc 	bl	8000608 <__aeabi_dmul>
 800c610:	4602      	mov	r2, r0
 800c612:	460b      	mov	r3, r1
 800c614:	4620      	mov	r0, r4
 800c616:	4629      	mov	r1, r5
 800c618:	f7f3 fe40 	bl	800029c <__adddf3>
 800c61c:	4604      	mov	r4, r0
 800c61e:	460d      	mov	r5, r1
 800c620:	ec45 4b10 	vmov	d0, r4, r5
 800c624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c628:	2d00      	cmp	r5, #0
 800c62a:	dc10      	bgt.n	800c64e <__ieee754_sqrt+0x62>
 800c62c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c630:	4330      	orrs	r0, r6
 800c632:	d0f5      	beq.n	800c620 <__ieee754_sqrt+0x34>
 800c634:	b15d      	cbz	r5, 800c64e <__ieee754_sqrt+0x62>
 800c636:	ee10 2a10 	vmov	r2, s0
 800c63a:	462b      	mov	r3, r5
 800c63c:	ee10 0a10 	vmov	r0, s0
 800c640:	f7f3 fe2a 	bl	8000298 <__aeabi_dsub>
 800c644:	4602      	mov	r2, r0
 800c646:	460b      	mov	r3, r1
 800c648:	f7f4 f908 	bl	800085c <__aeabi_ddiv>
 800c64c:	e7e6      	b.n	800c61c <__ieee754_sqrt+0x30>
 800c64e:	1512      	asrs	r2, r2, #20
 800c650:	d074      	beq.n	800c73c <__ieee754_sqrt+0x150>
 800c652:	07d4      	lsls	r4, r2, #31
 800c654:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c658:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c65c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c660:	bf5e      	ittt	pl
 800c662:	0fda      	lsrpl	r2, r3, #31
 800c664:	005b      	lslpl	r3, r3, #1
 800c666:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c66a:	2400      	movs	r4, #0
 800c66c:	0fda      	lsrs	r2, r3, #31
 800c66e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c672:	107f      	asrs	r7, r7, #1
 800c674:	005b      	lsls	r3, r3, #1
 800c676:	2516      	movs	r5, #22
 800c678:	4620      	mov	r0, r4
 800c67a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c67e:	1886      	adds	r6, r0, r2
 800c680:	428e      	cmp	r6, r1
 800c682:	bfde      	ittt	le
 800c684:	1b89      	suble	r1, r1, r6
 800c686:	18b0      	addle	r0, r6, r2
 800c688:	18a4      	addle	r4, r4, r2
 800c68a:	0049      	lsls	r1, r1, #1
 800c68c:	3d01      	subs	r5, #1
 800c68e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c692:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c696:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c69a:	d1f0      	bne.n	800c67e <__ieee754_sqrt+0x92>
 800c69c:	462a      	mov	r2, r5
 800c69e:	f04f 0e20 	mov.w	lr, #32
 800c6a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c6a6:	4281      	cmp	r1, r0
 800c6a8:	eb06 0c05 	add.w	ip, r6, r5
 800c6ac:	dc02      	bgt.n	800c6b4 <__ieee754_sqrt+0xc8>
 800c6ae:	d113      	bne.n	800c6d8 <__ieee754_sqrt+0xec>
 800c6b0:	459c      	cmp	ip, r3
 800c6b2:	d811      	bhi.n	800c6d8 <__ieee754_sqrt+0xec>
 800c6b4:	f1bc 0f00 	cmp.w	ip, #0
 800c6b8:	eb0c 0506 	add.w	r5, ip, r6
 800c6bc:	da43      	bge.n	800c746 <__ieee754_sqrt+0x15a>
 800c6be:	2d00      	cmp	r5, #0
 800c6c0:	db41      	blt.n	800c746 <__ieee754_sqrt+0x15a>
 800c6c2:	f100 0801 	add.w	r8, r0, #1
 800c6c6:	1a09      	subs	r1, r1, r0
 800c6c8:	459c      	cmp	ip, r3
 800c6ca:	bf88      	it	hi
 800c6cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c6d0:	eba3 030c 	sub.w	r3, r3, ip
 800c6d4:	4432      	add	r2, r6
 800c6d6:	4640      	mov	r0, r8
 800c6d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c6dc:	f1be 0e01 	subs.w	lr, lr, #1
 800c6e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c6e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c6e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c6ec:	d1db      	bne.n	800c6a6 <__ieee754_sqrt+0xba>
 800c6ee:	430b      	orrs	r3, r1
 800c6f0:	d006      	beq.n	800c700 <__ieee754_sqrt+0x114>
 800c6f2:	1c50      	adds	r0, r2, #1
 800c6f4:	bf13      	iteet	ne
 800c6f6:	3201      	addne	r2, #1
 800c6f8:	3401      	addeq	r4, #1
 800c6fa:	4672      	moveq	r2, lr
 800c6fc:	f022 0201 	bicne.w	r2, r2, #1
 800c700:	1063      	asrs	r3, r4, #1
 800c702:	0852      	lsrs	r2, r2, #1
 800c704:	07e1      	lsls	r1, r4, #31
 800c706:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c70a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c70e:	bf48      	it	mi
 800c710:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c714:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c718:	4614      	mov	r4, r2
 800c71a:	e781      	b.n	800c620 <__ieee754_sqrt+0x34>
 800c71c:	0ad9      	lsrs	r1, r3, #11
 800c71e:	3815      	subs	r0, #21
 800c720:	055b      	lsls	r3, r3, #21
 800c722:	2900      	cmp	r1, #0
 800c724:	d0fa      	beq.n	800c71c <__ieee754_sqrt+0x130>
 800c726:	02cd      	lsls	r5, r1, #11
 800c728:	d50a      	bpl.n	800c740 <__ieee754_sqrt+0x154>
 800c72a:	f1c2 0420 	rsb	r4, r2, #32
 800c72e:	fa23 f404 	lsr.w	r4, r3, r4
 800c732:	1e55      	subs	r5, r2, #1
 800c734:	4093      	lsls	r3, r2
 800c736:	4321      	orrs	r1, r4
 800c738:	1b42      	subs	r2, r0, r5
 800c73a:	e78a      	b.n	800c652 <__ieee754_sqrt+0x66>
 800c73c:	4610      	mov	r0, r2
 800c73e:	e7f0      	b.n	800c722 <__ieee754_sqrt+0x136>
 800c740:	0049      	lsls	r1, r1, #1
 800c742:	3201      	adds	r2, #1
 800c744:	e7ef      	b.n	800c726 <__ieee754_sqrt+0x13a>
 800c746:	4680      	mov	r8, r0
 800c748:	e7bd      	b.n	800c6c6 <__ieee754_sqrt+0xda>
 800c74a:	bf00      	nop
 800c74c:	7ff00000 	.word	0x7ff00000

0800c750 <with_errno>:
 800c750:	b570      	push	{r4, r5, r6, lr}
 800c752:	4604      	mov	r4, r0
 800c754:	460d      	mov	r5, r1
 800c756:	4616      	mov	r6, r2
 800c758:	f000 f8cc 	bl	800c8f4 <__errno>
 800c75c:	4629      	mov	r1, r5
 800c75e:	6006      	str	r6, [r0, #0]
 800c760:	4620      	mov	r0, r4
 800c762:	bd70      	pop	{r4, r5, r6, pc}

0800c764 <xflow>:
 800c764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c766:	4614      	mov	r4, r2
 800c768:	461d      	mov	r5, r3
 800c76a:	b108      	cbz	r0, 800c770 <xflow+0xc>
 800c76c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c770:	e9cd 2300 	strd	r2, r3, [sp]
 800c774:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c778:	4620      	mov	r0, r4
 800c77a:	4629      	mov	r1, r5
 800c77c:	f7f3 ff44 	bl	8000608 <__aeabi_dmul>
 800c780:	2222      	movs	r2, #34	; 0x22
 800c782:	b003      	add	sp, #12
 800c784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c788:	f7ff bfe2 	b.w	800c750 <with_errno>

0800c78c <__math_uflow>:
 800c78c:	b508      	push	{r3, lr}
 800c78e:	2200      	movs	r2, #0
 800c790:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c794:	f7ff ffe6 	bl	800c764 <xflow>
 800c798:	ec41 0b10 	vmov	d0, r0, r1
 800c79c:	bd08      	pop	{r3, pc}

0800c79e <__math_oflow>:
 800c79e:	b508      	push	{r3, lr}
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c7a6:	f7ff ffdd 	bl	800c764 <xflow>
 800c7aa:	ec41 0b10 	vmov	d0, r0, r1
 800c7ae:	bd08      	pop	{r3, pc}

0800c7b0 <fabs>:
 800c7b0:	ec51 0b10 	vmov	r0, r1, d0
 800c7b4:	ee10 2a10 	vmov	r2, s0
 800c7b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7bc:	ec43 2b10 	vmov	d0, r2, r3
 800c7c0:	4770      	bx	lr

0800c7c2 <finite>:
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	ed8d 0b00 	vstr	d0, [sp]
 800c7c8:	9801      	ldr	r0, [sp, #4]
 800c7ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c7ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c7d2:	0fc0      	lsrs	r0, r0, #31
 800c7d4:	b002      	add	sp, #8
 800c7d6:	4770      	bx	lr

0800c7d8 <scalbn>:
 800c7d8:	b570      	push	{r4, r5, r6, lr}
 800c7da:	ec55 4b10 	vmov	r4, r5, d0
 800c7de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	462b      	mov	r3, r5
 800c7e6:	b99a      	cbnz	r2, 800c810 <scalbn+0x38>
 800c7e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c7ec:	4323      	orrs	r3, r4
 800c7ee:	d036      	beq.n	800c85e <scalbn+0x86>
 800c7f0:	4b39      	ldr	r3, [pc, #228]	; (800c8d8 <scalbn+0x100>)
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	ee10 0a10 	vmov	r0, s0
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f7f3 ff05 	bl	8000608 <__aeabi_dmul>
 800c7fe:	4b37      	ldr	r3, [pc, #220]	; (800c8dc <scalbn+0x104>)
 800c800:	429e      	cmp	r6, r3
 800c802:	4604      	mov	r4, r0
 800c804:	460d      	mov	r5, r1
 800c806:	da10      	bge.n	800c82a <scalbn+0x52>
 800c808:	a32b      	add	r3, pc, #172	; (adr r3, 800c8b8 <scalbn+0xe0>)
 800c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80e:	e03a      	b.n	800c886 <scalbn+0xae>
 800c810:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c814:	428a      	cmp	r2, r1
 800c816:	d10c      	bne.n	800c832 <scalbn+0x5a>
 800c818:	ee10 2a10 	vmov	r2, s0
 800c81c:	4620      	mov	r0, r4
 800c81e:	4629      	mov	r1, r5
 800c820:	f7f3 fd3c 	bl	800029c <__adddf3>
 800c824:	4604      	mov	r4, r0
 800c826:	460d      	mov	r5, r1
 800c828:	e019      	b.n	800c85e <scalbn+0x86>
 800c82a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c82e:	460b      	mov	r3, r1
 800c830:	3a36      	subs	r2, #54	; 0x36
 800c832:	4432      	add	r2, r6
 800c834:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c838:	428a      	cmp	r2, r1
 800c83a:	dd08      	ble.n	800c84e <scalbn+0x76>
 800c83c:	2d00      	cmp	r5, #0
 800c83e:	a120      	add	r1, pc, #128	; (adr r1, 800c8c0 <scalbn+0xe8>)
 800c840:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c844:	da1c      	bge.n	800c880 <scalbn+0xa8>
 800c846:	a120      	add	r1, pc, #128	; (adr r1, 800c8c8 <scalbn+0xf0>)
 800c848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c84c:	e018      	b.n	800c880 <scalbn+0xa8>
 800c84e:	2a00      	cmp	r2, #0
 800c850:	dd08      	ble.n	800c864 <scalbn+0x8c>
 800c852:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c856:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c85a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c85e:	ec45 4b10 	vmov	d0, r4, r5
 800c862:	bd70      	pop	{r4, r5, r6, pc}
 800c864:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c868:	da19      	bge.n	800c89e <scalbn+0xc6>
 800c86a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c86e:	429e      	cmp	r6, r3
 800c870:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c874:	dd0a      	ble.n	800c88c <scalbn+0xb4>
 800c876:	a112      	add	r1, pc, #72	; (adr r1, 800c8c0 <scalbn+0xe8>)
 800c878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1e2      	bne.n	800c846 <scalbn+0x6e>
 800c880:	a30f      	add	r3, pc, #60	; (adr r3, 800c8c0 <scalbn+0xe8>)
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	f7f3 febf 	bl	8000608 <__aeabi_dmul>
 800c88a:	e7cb      	b.n	800c824 <scalbn+0x4c>
 800c88c:	a10a      	add	r1, pc, #40	; (adr r1, 800c8b8 <scalbn+0xe0>)
 800c88e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d0b8      	beq.n	800c808 <scalbn+0x30>
 800c896:	a10e      	add	r1, pc, #56	; (adr r1, 800c8d0 <scalbn+0xf8>)
 800c898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c89c:	e7b4      	b.n	800c808 <scalbn+0x30>
 800c89e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c8a2:	3236      	adds	r2, #54	; 0x36
 800c8a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c8a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	4b0c      	ldr	r3, [pc, #48]	; (800c8e0 <scalbn+0x108>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	e7e8      	b.n	800c886 <scalbn+0xae>
 800c8b4:	f3af 8000 	nop.w
 800c8b8:	c2f8f359 	.word	0xc2f8f359
 800c8bc:	01a56e1f 	.word	0x01a56e1f
 800c8c0:	8800759c 	.word	0x8800759c
 800c8c4:	7e37e43c 	.word	0x7e37e43c
 800c8c8:	8800759c 	.word	0x8800759c
 800c8cc:	fe37e43c 	.word	0xfe37e43c
 800c8d0:	c2f8f359 	.word	0xc2f8f359
 800c8d4:	81a56e1f 	.word	0x81a56e1f
 800c8d8:	43500000 	.word	0x43500000
 800c8dc:	ffff3cb0 	.word	0xffff3cb0
 800c8e0:	3c900000 	.word	0x3c900000

0800c8e4 <abort>:
 800c8e4:	b508      	push	{r3, lr}
 800c8e6:	2006      	movs	r0, #6
 800c8e8:	f000 fdf0 	bl	800d4cc <raise>
 800c8ec:	2001      	movs	r0, #1
 800c8ee:	f7f8 ff15 	bl	800571c <_exit>
	...

0800c8f4 <__errno>:
 800c8f4:	4b01      	ldr	r3, [pc, #4]	; (800c8fc <__errno+0x8>)
 800c8f6:	6818      	ldr	r0, [r3, #0]
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	2000000c 	.word	0x2000000c

0800c900 <__libc_init_array>:
 800c900:	b570      	push	{r4, r5, r6, lr}
 800c902:	4d0d      	ldr	r5, [pc, #52]	; (800c938 <__libc_init_array+0x38>)
 800c904:	4c0d      	ldr	r4, [pc, #52]	; (800c93c <__libc_init_array+0x3c>)
 800c906:	1b64      	subs	r4, r4, r5
 800c908:	10a4      	asrs	r4, r4, #2
 800c90a:	2600      	movs	r6, #0
 800c90c:	42a6      	cmp	r6, r4
 800c90e:	d109      	bne.n	800c924 <__libc_init_array+0x24>
 800c910:	4d0b      	ldr	r5, [pc, #44]	; (800c940 <__libc_init_array+0x40>)
 800c912:	4c0c      	ldr	r4, [pc, #48]	; (800c944 <__libc_init_array+0x44>)
 800c914:	f002 fd50 	bl	800f3b8 <_init>
 800c918:	1b64      	subs	r4, r4, r5
 800c91a:	10a4      	asrs	r4, r4, #2
 800c91c:	2600      	movs	r6, #0
 800c91e:	42a6      	cmp	r6, r4
 800c920:	d105      	bne.n	800c92e <__libc_init_array+0x2e>
 800c922:	bd70      	pop	{r4, r5, r6, pc}
 800c924:	f855 3b04 	ldr.w	r3, [r5], #4
 800c928:	4798      	blx	r3
 800c92a:	3601      	adds	r6, #1
 800c92c:	e7ee      	b.n	800c90c <__libc_init_array+0xc>
 800c92e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c932:	4798      	blx	r3
 800c934:	3601      	adds	r6, #1
 800c936:	e7f2      	b.n	800c91e <__libc_init_array+0x1e>
 800c938:	0800f86c 	.word	0x0800f86c
 800c93c:	0800f86c 	.word	0x0800f86c
 800c940:	0800f86c 	.word	0x0800f86c
 800c944:	0800f874 	.word	0x0800f874

0800c948 <malloc>:
 800c948:	4b02      	ldr	r3, [pc, #8]	; (800c954 <malloc+0xc>)
 800c94a:	4601      	mov	r1, r0
 800c94c:	6818      	ldr	r0, [r3, #0]
 800c94e:	f000 b8a7 	b.w	800caa0 <_malloc_r>
 800c952:	bf00      	nop
 800c954:	2000000c 	.word	0x2000000c

0800c958 <free>:
 800c958:	4b02      	ldr	r3, [pc, #8]	; (800c964 <free+0xc>)
 800c95a:	4601      	mov	r1, r0
 800c95c:	6818      	ldr	r0, [r3, #0]
 800c95e:	f000 b833 	b.w	800c9c8 <_free_r>
 800c962:	bf00      	nop
 800c964:	2000000c 	.word	0x2000000c

0800c968 <memcpy>:
 800c968:	440a      	add	r2, r1
 800c96a:	4291      	cmp	r1, r2
 800c96c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c970:	d100      	bne.n	800c974 <memcpy+0xc>
 800c972:	4770      	bx	lr
 800c974:	b510      	push	{r4, lr}
 800c976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c97a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c97e:	4291      	cmp	r1, r2
 800c980:	d1f9      	bne.n	800c976 <memcpy+0xe>
 800c982:	bd10      	pop	{r4, pc}

0800c984 <memmove>:
 800c984:	4288      	cmp	r0, r1
 800c986:	b510      	push	{r4, lr}
 800c988:	eb01 0402 	add.w	r4, r1, r2
 800c98c:	d902      	bls.n	800c994 <memmove+0x10>
 800c98e:	4284      	cmp	r4, r0
 800c990:	4623      	mov	r3, r4
 800c992:	d807      	bhi.n	800c9a4 <memmove+0x20>
 800c994:	1e43      	subs	r3, r0, #1
 800c996:	42a1      	cmp	r1, r4
 800c998:	d008      	beq.n	800c9ac <memmove+0x28>
 800c99a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c99e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9a2:	e7f8      	b.n	800c996 <memmove+0x12>
 800c9a4:	4402      	add	r2, r0
 800c9a6:	4601      	mov	r1, r0
 800c9a8:	428a      	cmp	r2, r1
 800c9aa:	d100      	bne.n	800c9ae <memmove+0x2a>
 800c9ac:	bd10      	pop	{r4, pc}
 800c9ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9b6:	e7f7      	b.n	800c9a8 <memmove+0x24>

0800c9b8 <memset>:
 800c9b8:	4402      	add	r2, r0
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d100      	bne.n	800c9c2 <memset+0xa>
 800c9c0:	4770      	bx	lr
 800c9c2:	f803 1b01 	strb.w	r1, [r3], #1
 800c9c6:	e7f9      	b.n	800c9bc <memset+0x4>

0800c9c8 <_free_r>:
 800c9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9ca:	2900      	cmp	r1, #0
 800c9cc:	d044      	beq.n	800ca58 <_free_r+0x90>
 800c9ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9d2:	9001      	str	r0, [sp, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f1a1 0404 	sub.w	r4, r1, #4
 800c9da:	bfb8      	it	lt
 800c9dc:	18e4      	addlt	r4, r4, r3
 800c9de:	f001 fc11 	bl	800e204 <__malloc_lock>
 800c9e2:	4a1e      	ldr	r2, [pc, #120]	; (800ca5c <_free_r+0x94>)
 800c9e4:	9801      	ldr	r0, [sp, #4]
 800c9e6:	6813      	ldr	r3, [r2, #0]
 800c9e8:	b933      	cbnz	r3, 800c9f8 <_free_r+0x30>
 800c9ea:	6063      	str	r3, [r4, #4]
 800c9ec:	6014      	str	r4, [r2, #0]
 800c9ee:	b003      	add	sp, #12
 800c9f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9f4:	f001 bc0c 	b.w	800e210 <__malloc_unlock>
 800c9f8:	42a3      	cmp	r3, r4
 800c9fa:	d908      	bls.n	800ca0e <_free_r+0x46>
 800c9fc:	6825      	ldr	r5, [r4, #0]
 800c9fe:	1961      	adds	r1, r4, r5
 800ca00:	428b      	cmp	r3, r1
 800ca02:	bf01      	itttt	eq
 800ca04:	6819      	ldreq	r1, [r3, #0]
 800ca06:	685b      	ldreq	r3, [r3, #4]
 800ca08:	1949      	addeq	r1, r1, r5
 800ca0a:	6021      	streq	r1, [r4, #0]
 800ca0c:	e7ed      	b.n	800c9ea <_free_r+0x22>
 800ca0e:	461a      	mov	r2, r3
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	b10b      	cbz	r3, 800ca18 <_free_r+0x50>
 800ca14:	42a3      	cmp	r3, r4
 800ca16:	d9fa      	bls.n	800ca0e <_free_r+0x46>
 800ca18:	6811      	ldr	r1, [r2, #0]
 800ca1a:	1855      	adds	r5, r2, r1
 800ca1c:	42a5      	cmp	r5, r4
 800ca1e:	d10b      	bne.n	800ca38 <_free_r+0x70>
 800ca20:	6824      	ldr	r4, [r4, #0]
 800ca22:	4421      	add	r1, r4
 800ca24:	1854      	adds	r4, r2, r1
 800ca26:	42a3      	cmp	r3, r4
 800ca28:	6011      	str	r1, [r2, #0]
 800ca2a:	d1e0      	bne.n	800c9ee <_free_r+0x26>
 800ca2c:	681c      	ldr	r4, [r3, #0]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	6053      	str	r3, [r2, #4]
 800ca32:	4421      	add	r1, r4
 800ca34:	6011      	str	r1, [r2, #0]
 800ca36:	e7da      	b.n	800c9ee <_free_r+0x26>
 800ca38:	d902      	bls.n	800ca40 <_free_r+0x78>
 800ca3a:	230c      	movs	r3, #12
 800ca3c:	6003      	str	r3, [r0, #0]
 800ca3e:	e7d6      	b.n	800c9ee <_free_r+0x26>
 800ca40:	6825      	ldr	r5, [r4, #0]
 800ca42:	1961      	adds	r1, r4, r5
 800ca44:	428b      	cmp	r3, r1
 800ca46:	bf04      	itt	eq
 800ca48:	6819      	ldreq	r1, [r3, #0]
 800ca4a:	685b      	ldreq	r3, [r3, #4]
 800ca4c:	6063      	str	r3, [r4, #4]
 800ca4e:	bf04      	itt	eq
 800ca50:	1949      	addeq	r1, r1, r5
 800ca52:	6021      	streq	r1, [r4, #0]
 800ca54:	6054      	str	r4, [r2, #4]
 800ca56:	e7ca      	b.n	800c9ee <_free_r+0x26>
 800ca58:	b003      	add	sp, #12
 800ca5a:	bd30      	pop	{r4, r5, pc}
 800ca5c:	2000116c 	.word	0x2000116c

0800ca60 <sbrk_aligned>:
 800ca60:	b570      	push	{r4, r5, r6, lr}
 800ca62:	4e0e      	ldr	r6, [pc, #56]	; (800ca9c <sbrk_aligned+0x3c>)
 800ca64:	460c      	mov	r4, r1
 800ca66:	6831      	ldr	r1, [r6, #0]
 800ca68:	4605      	mov	r5, r0
 800ca6a:	b911      	cbnz	r1, 800ca72 <sbrk_aligned+0x12>
 800ca6c:	f000 fcf6 	bl	800d45c <_sbrk_r>
 800ca70:	6030      	str	r0, [r6, #0]
 800ca72:	4621      	mov	r1, r4
 800ca74:	4628      	mov	r0, r5
 800ca76:	f000 fcf1 	bl	800d45c <_sbrk_r>
 800ca7a:	1c43      	adds	r3, r0, #1
 800ca7c:	d00a      	beq.n	800ca94 <sbrk_aligned+0x34>
 800ca7e:	1cc4      	adds	r4, r0, #3
 800ca80:	f024 0403 	bic.w	r4, r4, #3
 800ca84:	42a0      	cmp	r0, r4
 800ca86:	d007      	beq.n	800ca98 <sbrk_aligned+0x38>
 800ca88:	1a21      	subs	r1, r4, r0
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	f000 fce6 	bl	800d45c <_sbrk_r>
 800ca90:	3001      	adds	r0, #1
 800ca92:	d101      	bne.n	800ca98 <sbrk_aligned+0x38>
 800ca94:	f04f 34ff 	mov.w	r4, #4294967295
 800ca98:	4620      	mov	r0, r4
 800ca9a:	bd70      	pop	{r4, r5, r6, pc}
 800ca9c:	20001170 	.word	0x20001170

0800caa0 <_malloc_r>:
 800caa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa4:	1ccd      	adds	r5, r1, #3
 800caa6:	f025 0503 	bic.w	r5, r5, #3
 800caaa:	3508      	adds	r5, #8
 800caac:	2d0c      	cmp	r5, #12
 800caae:	bf38      	it	cc
 800cab0:	250c      	movcc	r5, #12
 800cab2:	2d00      	cmp	r5, #0
 800cab4:	4607      	mov	r7, r0
 800cab6:	db01      	blt.n	800cabc <_malloc_r+0x1c>
 800cab8:	42a9      	cmp	r1, r5
 800caba:	d905      	bls.n	800cac8 <_malloc_r+0x28>
 800cabc:	230c      	movs	r3, #12
 800cabe:	603b      	str	r3, [r7, #0]
 800cac0:	2600      	movs	r6, #0
 800cac2:	4630      	mov	r0, r6
 800cac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac8:	4e2e      	ldr	r6, [pc, #184]	; (800cb84 <_malloc_r+0xe4>)
 800caca:	f001 fb9b 	bl	800e204 <__malloc_lock>
 800cace:	6833      	ldr	r3, [r6, #0]
 800cad0:	461c      	mov	r4, r3
 800cad2:	bb34      	cbnz	r4, 800cb22 <_malloc_r+0x82>
 800cad4:	4629      	mov	r1, r5
 800cad6:	4638      	mov	r0, r7
 800cad8:	f7ff ffc2 	bl	800ca60 <sbrk_aligned>
 800cadc:	1c43      	adds	r3, r0, #1
 800cade:	4604      	mov	r4, r0
 800cae0:	d14d      	bne.n	800cb7e <_malloc_r+0xde>
 800cae2:	6834      	ldr	r4, [r6, #0]
 800cae4:	4626      	mov	r6, r4
 800cae6:	2e00      	cmp	r6, #0
 800cae8:	d140      	bne.n	800cb6c <_malloc_r+0xcc>
 800caea:	6823      	ldr	r3, [r4, #0]
 800caec:	4631      	mov	r1, r6
 800caee:	4638      	mov	r0, r7
 800caf0:	eb04 0803 	add.w	r8, r4, r3
 800caf4:	f000 fcb2 	bl	800d45c <_sbrk_r>
 800caf8:	4580      	cmp	r8, r0
 800cafa:	d13a      	bne.n	800cb72 <_malloc_r+0xd2>
 800cafc:	6821      	ldr	r1, [r4, #0]
 800cafe:	3503      	adds	r5, #3
 800cb00:	1a6d      	subs	r5, r5, r1
 800cb02:	f025 0503 	bic.w	r5, r5, #3
 800cb06:	3508      	adds	r5, #8
 800cb08:	2d0c      	cmp	r5, #12
 800cb0a:	bf38      	it	cc
 800cb0c:	250c      	movcc	r5, #12
 800cb0e:	4629      	mov	r1, r5
 800cb10:	4638      	mov	r0, r7
 800cb12:	f7ff ffa5 	bl	800ca60 <sbrk_aligned>
 800cb16:	3001      	adds	r0, #1
 800cb18:	d02b      	beq.n	800cb72 <_malloc_r+0xd2>
 800cb1a:	6823      	ldr	r3, [r4, #0]
 800cb1c:	442b      	add	r3, r5
 800cb1e:	6023      	str	r3, [r4, #0]
 800cb20:	e00e      	b.n	800cb40 <_malloc_r+0xa0>
 800cb22:	6822      	ldr	r2, [r4, #0]
 800cb24:	1b52      	subs	r2, r2, r5
 800cb26:	d41e      	bmi.n	800cb66 <_malloc_r+0xc6>
 800cb28:	2a0b      	cmp	r2, #11
 800cb2a:	d916      	bls.n	800cb5a <_malloc_r+0xba>
 800cb2c:	1961      	adds	r1, r4, r5
 800cb2e:	42a3      	cmp	r3, r4
 800cb30:	6025      	str	r5, [r4, #0]
 800cb32:	bf18      	it	ne
 800cb34:	6059      	strne	r1, [r3, #4]
 800cb36:	6863      	ldr	r3, [r4, #4]
 800cb38:	bf08      	it	eq
 800cb3a:	6031      	streq	r1, [r6, #0]
 800cb3c:	5162      	str	r2, [r4, r5]
 800cb3e:	604b      	str	r3, [r1, #4]
 800cb40:	4638      	mov	r0, r7
 800cb42:	f104 060b 	add.w	r6, r4, #11
 800cb46:	f001 fb63 	bl	800e210 <__malloc_unlock>
 800cb4a:	f026 0607 	bic.w	r6, r6, #7
 800cb4e:	1d23      	adds	r3, r4, #4
 800cb50:	1af2      	subs	r2, r6, r3
 800cb52:	d0b6      	beq.n	800cac2 <_malloc_r+0x22>
 800cb54:	1b9b      	subs	r3, r3, r6
 800cb56:	50a3      	str	r3, [r4, r2]
 800cb58:	e7b3      	b.n	800cac2 <_malloc_r+0x22>
 800cb5a:	6862      	ldr	r2, [r4, #4]
 800cb5c:	42a3      	cmp	r3, r4
 800cb5e:	bf0c      	ite	eq
 800cb60:	6032      	streq	r2, [r6, #0]
 800cb62:	605a      	strne	r2, [r3, #4]
 800cb64:	e7ec      	b.n	800cb40 <_malloc_r+0xa0>
 800cb66:	4623      	mov	r3, r4
 800cb68:	6864      	ldr	r4, [r4, #4]
 800cb6a:	e7b2      	b.n	800cad2 <_malloc_r+0x32>
 800cb6c:	4634      	mov	r4, r6
 800cb6e:	6876      	ldr	r6, [r6, #4]
 800cb70:	e7b9      	b.n	800cae6 <_malloc_r+0x46>
 800cb72:	230c      	movs	r3, #12
 800cb74:	603b      	str	r3, [r7, #0]
 800cb76:	4638      	mov	r0, r7
 800cb78:	f001 fb4a 	bl	800e210 <__malloc_unlock>
 800cb7c:	e7a1      	b.n	800cac2 <_malloc_r+0x22>
 800cb7e:	6025      	str	r5, [r4, #0]
 800cb80:	e7de      	b.n	800cb40 <_malloc_r+0xa0>
 800cb82:	bf00      	nop
 800cb84:	2000116c 	.word	0x2000116c

0800cb88 <__cvt>:
 800cb88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb8c:	ec55 4b10 	vmov	r4, r5, d0
 800cb90:	2d00      	cmp	r5, #0
 800cb92:	460e      	mov	r6, r1
 800cb94:	4619      	mov	r1, r3
 800cb96:	462b      	mov	r3, r5
 800cb98:	bfbb      	ittet	lt
 800cb9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cb9e:	461d      	movlt	r5, r3
 800cba0:	2300      	movge	r3, #0
 800cba2:	232d      	movlt	r3, #45	; 0x2d
 800cba4:	700b      	strb	r3, [r1, #0]
 800cba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cba8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cbac:	4691      	mov	r9, r2
 800cbae:	f023 0820 	bic.w	r8, r3, #32
 800cbb2:	bfbc      	itt	lt
 800cbb4:	4622      	movlt	r2, r4
 800cbb6:	4614      	movlt	r4, r2
 800cbb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cbbc:	d005      	beq.n	800cbca <__cvt+0x42>
 800cbbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cbc2:	d100      	bne.n	800cbc6 <__cvt+0x3e>
 800cbc4:	3601      	adds	r6, #1
 800cbc6:	2102      	movs	r1, #2
 800cbc8:	e000      	b.n	800cbcc <__cvt+0x44>
 800cbca:	2103      	movs	r1, #3
 800cbcc:	ab03      	add	r3, sp, #12
 800cbce:	9301      	str	r3, [sp, #4]
 800cbd0:	ab02      	add	r3, sp, #8
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	ec45 4b10 	vmov	d0, r4, r5
 800cbd8:	4653      	mov	r3, sl
 800cbda:	4632      	mov	r2, r6
 800cbdc:	f000 fd20 	bl	800d620 <_dtoa_r>
 800cbe0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cbe4:	4607      	mov	r7, r0
 800cbe6:	d102      	bne.n	800cbee <__cvt+0x66>
 800cbe8:	f019 0f01 	tst.w	r9, #1
 800cbec:	d022      	beq.n	800cc34 <__cvt+0xac>
 800cbee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cbf2:	eb07 0906 	add.w	r9, r7, r6
 800cbf6:	d110      	bne.n	800cc1a <__cvt+0x92>
 800cbf8:	783b      	ldrb	r3, [r7, #0]
 800cbfa:	2b30      	cmp	r3, #48	; 0x30
 800cbfc:	d10a      	bne.n	800cc14 <__cvt+0x8c>
 800cbfe:	2200      	movs	r2, #0
 800cc00:	2300      	movs	r3, #0
 800cc02:	4620      	mov	r0, r4
 800cc04:	4629      	mov	r1, r5
 800cc06:	f7f3 ff67 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc0a:	b918      	cbnz	r0, 800cc14 <__cvt+0x8c>
 800cc0c:	f1c6 0601 	rsb	r6, r6, #1
 800cc10:	f8ca 6000 	str.w	r6, [sl]
 800cc14:	f8da 3000 	ldr.w	r3, [sl]
 800cc18:	4499      	add	r9, r3
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	4620      	mov	r0, r4
 800cc20:	4629      	mov	r1, r5
 800cc22:	f7f3 ff59 	bl	8000ad8 <__aeabi_dcmpeq>
 800cc26:	b108      	cbz	r0, 800cc2c <__cvt+0xa4>
 800cc28:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc2c:	2230      	movs	r2, #48	; 0x30
 800cc2e:	9b03      	ldr	r3, [sp, #12]
 800cc30:	454b      	cmp	r3, r9
 800cc32:	d307      	bcc.n	800cc44 <__cvt+0xbc>
 800cc34:	9b03      	ldr	r3, [sp, #12]
 800cc36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc38:	1bdb      	subs	r3, r3, r7
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	6013      	str	r3, [r2, #0]
 800cc3e:	b004      	add	sp, #16
 800cc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc44:	1c59      	adds	r1, r3, #1
 800cc46:	9103      	str	r1, [sp, #12]
 800cc48:	701a      	strb	r2, [r3, #0]
 800cc4a:	e7f0      	b.n	800cc2e <__cvt+0xa6>

0800cc4c <__exponent>:
 800cc4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2900      	cmp	r1, #0
 800cc52:	bfb8      	it	lt
 800cc54:	4249      	neglt	r1, r1
 800cc56:	f803 2b02 	strb.w	r2, [r3], #2
 800cc5a:	bfb4      	ite	lt
 800cc5c:	222d      	movlt	r2, #45	; 0x2d
 800cc5e:	222b      	movge	r2, #43	; 0x2b
 800cc60:	2909      	cmp	r1, #9
 800cc62:	7042      	strb	r2, [r0, #1]
 800cc64:	dd2a      	ble.n	800ccbc <__exponent+0x70>
 800cc66:	f10d 0407 	add.w	r4, sp, #7
 800cc6a:	46a4      	mov	ip, r4
 800cc6c:	270a      	movs	r7, #10
 800cc6e:	46a6      	mov	lr, r4
 800cc70:	460a      	mov	r2, r1
 800cc72:	fb91 f6f7 	sdiv	r6, r1, r7
 800cc76:	fb07 1516 	mls	r5, r7, r6, r1
 800cc7a:	3530      	adds	r5, #48	; 0x30
 800cc7c:	2a63      	cmp	r2, #99	; 0x63
 800cc7e:	f104 34ff 	add.w	r4, r4, #4294967295
 800cc82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cc86:	4631      	mov	r1, r6
 800cc88:	dcf1      	bgt.n	800cc6e <__exponent+0x22>
 800cc8a:	3130      	adds	r1, #48	; 0x30
 800cc8c:	f1ae 0502 	sub.w	r5, lr, #2
 800cc90:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cc94:	1c44      	adds	r4, r0, #1
 800cc96:	4629      	mov	r1, r5
 800cc98:	4561      	cmp	r1, ip
 800cc9a:	d30a      	bcc.n	800ccb2 <__exponent+0x66>
 800cc9c:	f10d 0209 	add.w	r2, sp, #9
 800cca0:	eba2 020e 	sub.w	r2, r2, lr
 800cca4:	4565      	cmp	r5, ip
 800cca6:	bf88      	it	hi
 800cca8:	2200      	movhi	r2, #0
 800ccaa:	4413      	add	r3, r2
 800ccac:	1a18      	subs	r0, r3, r0
 800ccae:	b003      	add	sp, #12
 800ccb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ccba:	e7ed      	b.n	800cc98 <__exponent+0x4c>
 800ccbc:	2330      	movs	r3, #48	; 0x30
 800ccbe:	3130      	adds	r1, #48	; 0x30
 800ccc0:	7083      	strb	r3, [r0, #2]
 800ccc2:	70c1      	strb	r1, [r0, #3]
 800ccc4:	1d03      	adds	r3, r0, #4
 800ccc6:	e7f1      	b.n	800ccac <__exponent+0x60>

0800ccc8 <_printf_float>:
 800ccc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cccc:	ed2d 8b02 	vpush	{d8}
 800ccd0:	b08d      	sub	sp, #52	; 0x34
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ccd8:	4616      	mov	r6, r2
 800ccda:	461f      	mov	r7, r3
 800ccdc:	4605      	mov	r5, r0
 800ccde:	f001 fa8d 	bl	800e1fc <_localeconv_r>
 800cce2:	f8d0 a000 	ldr.w	sl, [r0]
 800cce6:	4650      	mov	r0, sl
 800cce8:	f7f3 fa7a 	bl	80001e0 <strlen>
 800ccec:	2300      	movs	r3, #0
 800ccee:	930a      	str	r3, [sp, #40]	; 0x28
 800ccf0:	6823      	ldr	r3, [r4, #0]
 800ccf2:	9305      	str	r3, [sp, #20]
 800ccf4:	f8d8 3000 	ldr.w	r3, [r8]
 800ccf8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ccfc:	3307      	adds	r3, #7
 800ccfe:	f023 0307 	bic.w	r3, r3, #7
 800cd02:	f103 0208 	add.w	r2, r3, #8
 800cd06:	f8c8 2000 	str.w	r2, [r8]
 800cd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cd12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cd16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd1a:	9307      	str	r3, [sp, #28]
 800cd1c:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd20:	ee08 0a10 	vmov	s16, r0
 800cd24:	4b9f      	ldr	r3, [pc, #636]	; (800cfa4 <_printf_float+0x2dc>)
 800cd26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd2e:	f7f3 ff05 	bl	8000b3c <__aeabi_dcmpun>
 800cd32:	bb88      	cbnz	r0, 800cd98 <_printf_float+0xd0>
 800cd34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd38:	4b9a      	ldr	r3, [pc, #616]	; (800cfa4 <_printf_float+0x2dc>)
 800cd3a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd3e:	f7f3 fedf 	bl	8000b00 <__aeabi_dcmple>
 800cd42:	bb48      	cbnz	r0, 800cd98 <_printf_float+0xd0>
 800cd44:	2200      	movs	r2, #0
 800cd46:	2300      	movs	r3, #0
 800cd48:	4640      	mov	r0, r8
 800cd4a:	4649      	mov	r1, r9
 800cd4c:	f7f3 fece 	bl	8000aec <__aeabi_dcmplt>
 800cd50:	b110      	cbz	r0, 800cd58 <_printf_float+0x90>
 800cd52:	232d      	movs	r3, #45	; 0x2d
 800cd54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd58:	4b93      	ldr	r3, [pc, #588]	; (800cfa8 <_printf_float+0x2e0>)
 800cd5a:	4894      	ldr	r0, [pc, #592]	; (800cfac <_printf_float+0x2e4>)
 800cd5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cd60:	bf94      	ite	ls
 800cd62:	4698      	movls	r8, r3
 800cd64:	4680      	movhi	r8, r0
 800cd66:	2303      	movs	r3, #3
 800cd68:	6123      	str	r3, [r4, #16]
 800cd6a:	9b05      	ldr	r3, [sp, #20]
 800cd6c:	f023 0204 	bic.w	r2, r3, #4
 800cd70:	6022      	str	r2, [r4, #0]
 800cd72:	f04f 0900 	mov.w	r9, #0
 800cd76:	9700      	str	r7, [sp, #0]
 800cd78:	4633      	mov	r3, r6
 800cd7a:	aa0b      	add	r2, sp, #44	; 0x2c
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	4628      	mov	r0, r5
 800cd80:	f000 f9d8 	bl	800d134 <_printf_common>
 800cd84:	3001      	adds	r0, #1
 800cd86:	f040 8090 	bne.w	800ceaa <_printf_float+0x1e2>
 800cd8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd8e:	b00d      	add	sp, #52	; 0x34
 800cd90:	ecbd 8b02 	vpop	{d8}
 800cd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd98:	4642      	mov	r2, r8
 800cd9a:	464b      	mov	r3, r9
 800cd9c:	4640      	mov	r0, r8
 800cd9e:	4649      	mov	r1, r9
 800cda0:	f7f3 fecc 	bl	8000b3c <__aeabi_dcmpun>
 800cda4:	b140      	cbz	r0, 800cdb8 <_printf_float+0xf0>
 800cda6:	464b      	mov	r3, r9
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	bfbc      	itt	lt
 800cdac:	232d      	movlt	r3, #45	; 0x2d
 800cdae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cdb2:	487f      	ldr	r0, [pc, #508]	; (800cfb0 <_printf_float+0x2e8>)
 800cdb4:	4b7f      	ldr	r3, [pc, #508]	; (800cfb4 <_printf_float+0x2ec>)
 800cdb6:	e7d1      	b.n	800cd5c <_printf_float+0x94>
 800cdb8:	6863      	ldr	r3, [r4, #4]
 800cdba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cdbe:	9206      	str	r2, [sp, #24]
 800cdc0:	1c5a      	adds	r2, r3, #1
 800cdc2:	d13f      	bne.n	800ce44 <_printf_float+0x17c>
 800cdc4:	2306      	movs	r3, #6
 800cdc6:	6063      	str	r3, [r4, #4]
 800cdc8:	9b05      	ldr	r3, [sp, #20]
 800cdca:	6861      	ldr	r1, [r4, #4]
 800cdcc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	9303      	str	r3, [sp, #12]
 800cdd4:	ab0a      	add	r3, sp, #40	; 0x28
 800cdd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cdda:	ab09      	add	r3, sp, #36	; 0x24
 800cddc:	ec49 8b10 	vmov	d0, r8, r9
 800cde0:	9300      	str	r3, [sp, #0]
 800cde2:	6022      	str	r2, [r4, #0]
 800cde4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cde8:	4628      	mov	r0, r5
 800cdea:	f7ff fecd 	bl	800cb88 <__cvt>
 800cdee:	9b06      	ldr	r3, [sp, #24]
 800cdf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdf2:	2b47      	cmp	r3, #71	; 0x47
 800cdf4:	4680      	mov	r8, r0
 800cdf6:	d108      	bne.n	800ce0a <_printf_float+0x142>
 800cdf8:	1cc8      	adds	r0, r1, #3
 800cdfa:	db02      	blt.n	800ce02 <_printf_float+0x13a>
 800cdfc:	6863      	ldr	r3, [r4, #4]
 800cdfe:	4299      	cmp	r1, r3
 800ce00:	dd41      	ble.n	800ce86 <_printf_float+0x1be>
 800ce02:	f1ab 0b02 	sub.w	fp, fp, #2
 800ce06:	fa5f fb8b 	uxtb.w	fp, fp
 800ce0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce0e:	d820      	bhi.n	800ce52 <_printf_float+0x18a>
 800ce10:	3901      	subs	r1, #1
 800ce12:	465a      	mov	r2, fp
 800ce14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ce18:	9109      	str	r1, [sp, #36]	; 0x24
 800ce1a:	f7ff ff17 	bl	800cc4c <__exponent>
 800ce1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce20:	1813      	adds	r3, r2, r0
 800ce22:	2a01      	cmp	r2, #1
 800ce24:	4681      	mov	r9, r0
 800ce26:	6123      	str	r3, [r4, #16]
 800ce28:	dc02      	bgt.n	800ce30 <_printf_float+0x168>
 800ce2a:	6822      	ldr	r2, [r4, #0]
 800ce2c:	07d2      	lsls	r2, r2, #31
 800ce2e:	d501      	bpl.n	800ce34 <_printf_float+0x16c>
 800ce30:	3301      	adds	r3, #1
 800ce32:	6123      	str	r3, [r4, #16]
 800ce34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d09c      	beq.n	800cd76 <_printf_float+0xae>
 800ce3c:	232d      	movs	r3, #45	; 0x2d
 800ce3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce42:	e798      	b.n	800cd76 <_printf_float+0xae>
 800ce44:	9a06      	ldr	r2, [sp, #24]
 800ce46:	2a47      	cmp	r2, #71	; 0x47
 800ce48:	d1be      	bne.n	800cdc8 <_printf_float+0x100>
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d1bc      	bne.n	800cdc8 <_printf_float+0x100>
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e7b9      	b.n	800cdc6 <_printf_float+0xfe>
 800ce52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ce56:	d118      	bne.n	800ce8a <_printf_float+0x1c2>
 800ce58:	2900      	cmp	r1, #0
 800ce5a:	6863      	ldr	r3, [r4, #4]
 800ce5c:	dd0b      	ble.n	800ce76 <_printf_float+0x1ae>
 800ce5e:	6121      	str	r1, [r4, #16]
 800ce60:	b913      	cbnz	r3, 800ce68 <_printf_float+0x1a0>
 800ce62:	6822      	ldr	r2, [r4, #0]
 800ce64:	07d0      	lsls	r0, r2, #31
 800ce66:	d502      	bpl.n	800ce6e <_printf_float+0x1a6>
 800ce68:	3301      	adds	r3, #1
 800ce6a:	440b      	add	r3, r1
 800ce6c:	6123      	str	r3, [r4, #16]
 800ce6e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ce70:	f04f 0900 	mov.w	r9, #0
 800ce74:	e7de      	b.n	800ce34 <_printf_float+0x16c>
 800ce76:	b913      	cbnz	r3, 800ce7e <_printf_float+0x1b6>
 800ce78:	6822      	ldr	r2, [r4, #0]
 800ce7a:	07d2      	lsls	r2, r2, #31
 800ce7c:	d501      	bpl.n	800ce82 <_printf_float+0x1ba>
 800ce7e:	3302      	adds	r3, #2
 800ce80:	e7f4      	b.n	800ce6c <_printf_float+0x1a4>
 800ce82:	2301      	movs	r3, #1
 800ce84:	e7f2      	b.n	800ce6c <_printf_float+0x1a4>
 800ce86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ce8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce8c:	4299      	cmp	r1, r3
 800ce8e:	db05      	blt.n	800ce9c <_printf_float+0x1d4>
 800ce90:	6823      	ldr	r3, [r4, #0]
 800ce92:	6121      	str	r1, [r4, #16]
 800ce94:	07d8      	lsls	r0, r3, #31
 800ce96:	d5ea      	bpl.n	800ce6e <_printf_float+0x1a6>
 800ce98:	1c4b      	adds	r3, r1, #1
 800ce9a:	e7e7      	b.n	800ce6c <_printf_float+0x1a4>
 800ce9c:	2900      	cmp	r1, #0
 800ce9e:	bfd4      	ite	le
 800cea0:	f1c1 0202 	rsble	r2, r1, #2
 800cea4:	2201      	movgt	r2, #1
 800cea6:	4413      	add	r3, r2
 800cea8:	e7e0      	b.n	800ce6c <_printf_float+0x1a4>
 800ceaa:	6823      	ldr	r3, [r4, #0]
 800ceac:	055a      	lsls	r2, r3, #21
 800ceae:	d407      	bmi.n	800cec0 <_printf_float+0x1f8>
 800ceb0:	6923      	ldr	r3, [r4, #16]
 800ceb2:	4642      	mov	r2, r8
 800ceb4:	4631      	mov	r1, r6
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	47b8      	blx	r7
 800ceba:	3001      	adds	r0, #1
 800cebc:	d12c      	bne.n	800cf18 <_printf_float+0x250>
 800cebe:	e764      	b.n	800cd8a <_printf_float+0xc2>
 800cec0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cec4:	f240 80e0 	bls.w	800d088 <_printf_float+0x3c0>
 800cec8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cecc:	2200      	movs	r2, #0
 800cece:	2300      	movs	r3, #0
 800ced0:	f7f3 fe02 	bl	8000ad8 <__aeabi_dcmpeq>
 800ced4:	2800      	cmp	r0, #0
 800ced6:	d034      	beq.n	800cf42 <_printf_float+0x27a>
 800ced8:	4a37      	ldr	r2, [pc, #220]	; (800cfb8 <_printf_float+0x2f0>)
 800ceda:	2301      	movs	r3, #1
 800cedc:	4631      	mov	r1, r6
 800cede:	4628      	mov	r0, r5
 800cee0:	47b8      	blx	r7
 800cee2:	3001      	adds	r0, #1
 800cee4:	f43f af51 	beq.w	800cd8a <_printf_float+0xc2>
 800cee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ceec:	429a      	cmp	r2, r3
 800ceee:	db02      	blt.n	800cef6 <_printf_float+0x22e>
 800cef0:	6823      	ldr	r3, [r4, #0]
 800cef2:	07d8      	lsls	r0, r3, #31
 800cef4:	d510      	bpl.n	800cf18 <_printf_float+0x250>
 800cef6:	ee18 3a10 	vmov	r3, s16
 800cefa:	4652      	mov	r2, sl
 800cefc:	4631      	mov	r1, r6
 800cefe:	4628      	mov	r0, r5
 800cf00:	47b8      	blx	r7
 800cf02:	3001      	adds	r0, #1
 800cf04:	f43f af41 	beq.w	800cd8a <_printf_float+0xc2>
 800cf08:	f04f 0800 	mov.w	r8, #0
 800cf0c:	f104 091a 	add.w	r9, r4, #26
 800cf10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf12:	3b01      	subs	r3, #1
 800cf14:	4543      	cmp	r3, r8
 800cf16:	dc09      	bgt.n	800cf2c <_printf_float+0x264>
 800cf18:	6823      	ldr	r3, [r4, #0]
 800cf1a:	079b      	lsls	r3, r3, #30
 800cf1c:	f100 8105 	bmi.w	800d12a <_printf_float+0x462>
 800cf20:	68e0      	ldr	r0, [r4, #12]
 800cf22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf24:	4298      	cmp	r0, r3
 800cf26:	bfb8      	it	lt
 800cf28:	4618      	movlt	r0, r3
 800cf2a:	e730      	b.n	800cd8e <_printf_float+0xc6>
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	464a      	mov	r2, r9
 800cf30:	4631      	mov	r1, r6
 800cf32:	4628      	mov	r0, r5
 800cf34:	47b8      	blx	r7
 800cf36:	3001      	adds	r0, #1
 800cf38:	f43f af27 	beq.w	800cd8a <_printf_float+0xc2>
 800cf3c:	f108 0801 	add.w	r8, r8, #1
 800cf40:	e7e6      	b.n	800cf10 <_printf_float+0x248>
 800cf42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	dc39      	bgt.n	800cfbc <_printf_float+0x2f4>
 800cf48:	4a1b      	ldr	r2, [pc, #108]	; (800cfb8 <_printf_float+0x2f0>)
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	4631      	mov	r1, r6
 800cf4e:	4628      	mov	r0, r5
 800cf50:	47b8      	blx	r7
 800cf52:	3001      	adds	r0, #1
 800cf54:	f43f af19 	beq.w	800cd8a <_printf_float+0xc2>
 800cf58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	d102      	bne.n	800cf66 <_printf_float+0x29e>
 800cf60:	6823      	ldr	r3, [r4, #0]
 800cf62:	07d9      	lsls	r1, r3, #31
 800cf64:	d5d8      	bpl.n	800cf18 <_printf_float+0x250>
 800cf66:	ee18 3a10 	vmov	r3, s16
 800cf6a:	4652      	mov	r2, sl
 800cf6c:	4631      	mov	r1, r6
 800cf6e:	4628      	mov	r0, r5
 800cf70:	47b8      	blx	r7
 800cf72:	3001      	adds	r0, #1
 800cf74:	f43f af09 	beq.w	800cd8a <_printf_float+0xc2>
 800cf78:	f04f 0900 	mov.w	r9, #0
 800cf7c:	f104 0a1a 	add.w	sl, r4, #26
 800cf80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf82:	425b      	negs	r3, r3
 800cf84:	454b      	cmp	r3, r9
 800cf86:	dc01      	bgt.n	800cf8c <_printf_float+0x2c4>
 800cf88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf8a:	e792      	b.n	800ceb2 <_printf_float+0x1ea>
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	4652      	mov	r2, sl
 800cf90:	4631      	mov	r1, r6
 800cf92:	4628      	mov	r0, r5
 800cf94:	47b8      	blx	r7
 800cf96:	3001      	adds	r0, #1
 800cf98:	f43f aef7 	beq.w	800cd8a <_printf_float+0xc2>
 800cf9c:	f109 0901 	add.w	r9, r9, #1
 800cfa0:	e7ee      	b.n	800cf80 <_printf_float+0x2b8>
 800cfa2:	bf00      	nop
 800cfa4:	7fefffff 	.word	0x7fefffff
 800cfa8:	0800f48c 	.word	0x0800f48c
 800cfac:	0800f490 	.word	0x0800f490
 800cfb0:	0800f498 	.word	0x0800f498
 800cfb4:	0800f494 	.word	0x0800f494
 800cfb8:	0800f49c 	.word	0x0800f49c
 800cfbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	bfa8      	it	ge
 800cfc4:	461a      	movge	r2, r3
 800cfc6:	2a00      	cmp	r2, #0
 800cfc8:	4691      	mov	r9, r2
 800cfca:	dc37      	bgt.n	800d03c <_printf_float+0x374>
 800cfcc:	f04f 0b00 	mov.w	fp, #0
 800cfd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfd4:	f104 021a 	add.w	r2, r4, #26
 800cfd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cfda:	9305      	str	r3, [sp, #20]
 800cfdc:	eba3 0309 	sub.w	r3, r3, r9
 800cfe0:	455b      	cmp	r3, fp
 800cfe2:	dc33      	bgt.n	800d04c <_printf_float+0x384>
 800cfe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	db3b      	blt.n	800d064 <_printf_float+0x39c>
 800cfec:	6823      	ldr	r3, [r4, #0]
 800cfee:	07da      	lsls	r2, r3, #31
 800cff0:	d438      	bmi.n	800d064 <_printf_float+0x39c>
 800cff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cff4:	9a05      	ldr	r2, [sp, #20]
 800cff6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cff8:	1a9a      	subs	r2, r3, r2
 800cffa:	eba3 0901 	sub.w	r9, r3, r1
 800cffe:	4591      	cmp	r9, r2
 800d000:	bfa8      	it	ge
 800d002:	4691      	movge	r9, r2
 800d004:	f1b9 0f00 	cmp.w	r9, #0
 800d008:	dc35      	bgt.n	800d076 <_printf_float+0x3ae>
 800d00a:	f04f 0800 	mov.w	r8, #0
 800d00e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d012:	f104 0a1a 	add.w	sl, r4, #26
 800d016:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d01a:	1a9b      	subs	r3, r3, r2
 800d01c:	eba3 0309 	sub.w	r3, r3, r9
 800d020:	4543      	cmp	r3, r8
 800d022:	f77f af79 	ble.w	800cf18 <_printf_float+0x250>
 800d026:	2301      	movs	r3, #1
 800d028:	4652      	mov	r2, sl
 800d02a:	4631      	mov	r1, r6
 800d02c:	4628      	mov	r0, r5
 800d02e:	47b8      	blx	r7
 800d030:	3001      	adds	r0, #1
 800d032:	f43f aeaa 	beq.w	800cd8a <_printf_float+0xc2>
 800d036:	f108 0801 	add.w	r8, r8, #1
 800d03a:	e7ec      	b.n	800d016 <_printf_float+0x34e>
 800d03c:	4613      	mov	r3, r2
 800d03e:	4631      	mov	r1, r6
 800d040:	4642      	mov	r2, r8
 800d042:	4628      	mov	r0, r5
 800d044:	47b8      	blx	r7
 800d046:	3001      	adds	r0, #1
 800d048:	d1c0      	bne.n	800cfcc <_printf_float+0x304>
 800d04a:	e69e      	b.n	800cd8a <_printf_float+0xc2>
 800d04c:	2301      	movs	r3, #1
 800d04e:	4631      	mov	r1, r6
 800d050:	4628      	mov	r0, r5
 800d052:	9205      	str	r2, [sp, #20]
 800d054:	47b8      	blx	r7
 800d056:	3001      	adds	r0, #1
 800d058:	f43f ae97 	beq.w	800cd8a <_printf_float+0xc2>
 800d05c:	9a05      	ldr	r2, [sp, #20]
 800d05e:	f10b 0b01 	add.w	fp, fp, #1
 800d062:	e7b9      	b.n	800cfd8 <_printf_float+0x310>
 800d064:	ee18 3a10 	vmov	r3, s16
 800d068:	4652      	mov	r2, sl
 800d06a:	4631      	mov	r1, r6
 800d06c:	4628      	mov	r0, r5
 800d06e:	47b8      	blx	r7
 800d070:	3001      	adds	r0, #1
 800d072:	d1be      	bne.n	800cff2 <_printf_float+0x32a>
 800d074:	e689      	b.n	800cd8a <_printf_float+0xc2>
 800d076:	9a05      	ldr	r2, [sp, #20]
 800d078:	464b      	mov	r3, r9
 800d07a:	4442      	add	r2, r8
 800d07c:	4631      	mov	r1, r6
 800d07e:	4628      	mov	r0, r5
 800d080:	47b8      	blx	r7
 800d082:	3001      	adds	r0, #1
 800d084:	d1c1      	bne.n	800d00a <_printf_float+0x342>
 800d086:	e680      	b.n	800cd8a <_printf_float+0xc2>
 800d088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d08a:	2a01      	cmp	r2, #1
 800d08c:	dc01      	bgt.n	800d092 <_printf_float+0x3ca>
 800d08e:	07db      	lsls	r3, r3, #31
 800d090:	d538      	bpl.n	800d104 <_printf_float+0x43c>
 800d092:	2301      	movs	r3, #1
 800d094:	4642      	mov	r2, r8
 800d096:	4631      	mov	r1, r6
 800d098:	4628      	mov	r0, r5
 800d09a:	47b8      	blx	r7
 800d09c:	3001      	adds	r0, #1
 800d09e:	f43f ae74 	beq.w	800cd8a <_printf_float+0xc2>
 800d0a2:	ee18 3a10 	vmov	r3, s16
 800d0a6:	4652      	mov	r2, sl
 800d0a8:	4631      	mov	r1, r6
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	47b8      	blx	r7
 800d0ae:	3001      	adds	r0, #1
 800d0b0:	f43f ae6b 	beq.w	800cd8a <_printf_float+0xc2>
 800d0b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	f7f3 fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0c0:	b9d8      	cbnz	r0, 800d0fa <_printf_float+0x432>
 800d0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0c4:	f108 0201 	add.w	r2, r8, #1
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	4631      	mov	r1, r6
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	47b8      	blx	r7
 800d0d0:	3001      	adds	r0, #1
 800d0d2:	d10e      	bne.n	800d0f2 <_printf_float+0x42a>
 800d0d4:	e659      	b.n	800cd8a <_printf_float+0xc2>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	4652      	mov	r2, sl
 800d0da:	4631      	mov	r1, r6
 800d0dc:	4628      	mov	r0, r5
 800d0de:	47b8      	blx	r7
 800d0e0:	3001      	adds	r0, #1
 800d0e2:	f43f ae52 	beq.w	800cd8a <_printf_float+0xc2>
 800d0e6:	f108 0801 	add.w	r8, r8, #1
 800d0ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	4543      	cmp	r3, r8
 800d0f0:	dcf1      	bgt.n	800d0d6 <_printf_float+0x40e>
 800d0f2:	464b      	mov	r3, r9
 800d0f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d0f8:	e6dc      	b.n	800ceb4 <_printf_float+0x1ec>
 800d0fa:	f04f 0800 	mov.w	r8, #0
 800d0fe:	f104 0a1a 	add.w	sl, r4, #26
 800d102:	e7f2      	b.n	800d0ea <_printf_float+0x422>
 800d104:	2301      	movs	r3, #1
 800d106:	4642      	mov	r2, r8
 800d108:	e7df      	b.n	800d0ca <_printf_float+0x402>
 800d10a:	2301      	movs	r3, #1
 800d10c:	464a      	mov	r2, r9
 800d10e:	4631      	mov	r1, r6
 800d110:	4628      	mov	r0, r5
 800d112:	47b8      	blx	r7
 800d114:	3001      	adds	r0, #1
 800d116:	f43f ae38 	beq.w	800cd8a <_printf_float+0xc2>
 800d11a:	f108 0801 	add.w	r8, r8, #1
 800d11e:	68e3      	ldr	r3, [r4, #12]
 800d120:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d122:	1a5b      	subs	r3, r3, r1
 800d124:	4543      	cmp	r3, r8
 800d126:	dcf0      	bgt.n	800d10a <_printf_float+0x442>
 800d128:	e6fa      	b.n	800cf20 <_printf_float+0x258>
 800d12a:	f04f 0800 	mov.w	r8, #0
 800d12e:	f104 0919 	add.w	r9, r4, #25
 800d132:	e7f4      	b.n	800d11e <_printf_float+0x456>

0800d134 <_printf_common>:
 800d134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d138:	4616      	mov	r6, r2
 800d13a:	4699      	mov	r9, r3
 800d13c:	688a      	ldr	r2, [r1, #8]
 800d13e:	690b      	ldr	r3, [r1, #16]
 800d140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d144:	4293      	cmp	r3, r2
 800d146:	bfb8      	it	lt
 800d148:	4613      	movlt	r3, r2
 800d14a:	6033      	str	r3, [r6, #0]
 800d14c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d150:	4607      	mov	r7, r0
 800d152:	460c      	mov	r4, r1
 800d154:	b10a      	cbz	r2, 800d15a <_printf_common+0x26>
 800d156:	3301      	adds	r3, #1
 800d158:	6033      	str	r3, [r6, #0]
 800d15a:	6823      	ldr	r3, [r4, #0]
 800d15c:	0699      	lsls	r1, r3, #26
 800d15e:	bf42      	ittt	mi
 800d160:	6833      	ldrmi	r3, [r6, #0]
 800d162:	3302      	addmi	r3, #2
 800d164:	6033      	strmi	r3, [r6, #0]
 800d166:	6825      	ldr	r5, [r4, #0]
 800d168:	f015 0506 	ands.w	r5, r5, #6
 800d16c:	d106      	bne.n	800d17c <_printf_common+0x48>
 800d16e:	f104 0a19 	add.w	sl, r4, #25
 800d172:	68e3      	ldr	r3, [r4, #12]
 800d174:	6832      	ldr	r2, [r6, #0]
 800d176:	1a9b      	subs	r3, r3, r2
 800d178:	42ab      	cmp	r3, r5
 800d17a:	dc26      	bgt.n	800d1ca <_printf_common+0x96>
 800d17c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d180:	1e13      	subs	r3, r2, #0
 800d182:	6822      	ldr	r2, [r4, #0]
 800d184:	bf18      	it	ne
 800d186:	2301      	movne	r3, #1
 800d188:	0692      	lsls	r2, r2, #26
 800d18a:	d42b      	bmi.n	800d1e4 <_printf_common+0xb0>
 800d18c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d190:	4649      	mov	r1, r9
 800d192:	4638      	mov	r0, r7
 800d194:	47c0      	blx	r8
 800d196:	3001      	adds	r0, #1
 800d198:	d01e      	beq.n	800d1d8 <_printf_common+0xa4>
 800d19a:	6823      	ldr	r3, [r4, #0]
 800d19c:	68e5      	ldr	r5, [r4, #12]
 800d19e:	6832      	ldr	r2, [r6, #0]
 800d1a0:	f003 0306 	and.w	r3, r3, #6
 800d1a4:	2b04      	cmp	r3, #4
 800d1a6:	bf08      	it	eq
 800d1a8:	1aad      	subeq	r5, r5, r2
 800d1aa:	68a3      	ldr	r3, [r4, #8]
 800d1ac:	6922      	ldr	r2, [r4, #16]
 800d1ae:	bf0c      	ite	eq
 800d1b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1b4:	2500      	movne	r5, #0
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	bfc4      	itt	gt
 800d1ba:	1a9b      	subgt	r3, r3, r2
 800d1bc:	18ed      	addgt	r5, r5, r3
 800d1be:	2600      	movs	r6, #0
 800d1c0:	341a      	adds	r4, #26
 800d1c2:	42b5      	cmp	r5, r6
 800d1c4:	d11a      	bne.n	800d1fc <_printf_common+0xc8>
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	e008      	b.n	800d1dc <_printf_common+0xa8>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	4652      	mov	r2, sl
 800d1ce:	4649      	mov	r1, r9
 800d1d0:	4638      	mov	r0, r7
 800d1d2:	47c0      	blx	r8
 800d1d4:	3001      	adds	r0, #1
 800d1d6:	d103      	bne.n	800d1e0 <_printf_common+0xac>
 800d1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e0:	3501      	adds	r5, #1
 800d1e2:	e7c6      	b.n	800d172 <_printf_common+0x3e>
 800d1e4:	18e1      	adds	r1, r4, r3
 800d1e6:	1c5a      	adds	r2, r3, #1
 800d1e8:	2030      	movs	r0, #48	; 0x30
 800d1ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d1ee:	4422      	add	r2, r4
 800d1f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d1f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d1f8:	3302      	adds	r3, #2
 800d1fa:	e7c7      	b.n	800d18c <_printf_common+0x58>
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	4622      	mov	r2, r4
 800d200:	4649      	mov	r1, r9
 800d202:	4638      	mov	r0, r7
 800d204:	47c0      	blx	r8
 800d206:	3001      	adds	r0, #1
 800d208:	d0e6      	beq.n	800d1d8 <_printf_common+0xa4>
 800d20a:	3601      	adds	r6, #1
 800d20c:	e7d9      	b.n	800d1c2 <_printf_common+0x8e>
	...

0800d210 <_printf_i>:
 800d210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d214:	7e0f      	ldrb	r7, [r1, #24]
 800d216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d218:	2f78      	cmp	r7, #120	; 0x78
 800d21a:	4691      	mov	r9, r2
 800d21c:	4680      	mov	r8, r0
 800d21e:	460c      	mov	r4, r1
 800d220:	469a      	mov	sl, r3
 800d222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d226:	d807      	bhi.n	800d238 <_printf_i+0x28>
 800d228:	2f62      	cmp	r7, #98	; 0x62
 800d22a:	d80a      	bhi.n	800d242 <_printf_i+0x32>
 800d22c:	2f00      	cmp	r7, #0
 800d22e:	f000 80d8 	beq.w	800d3e2 <_printf_i+0x1d2>
 800d232:	2f58      	cmp	r7, #88	; 0x58
 800d234:	f000 80a3 	beq.w	800d37e <_printf_i+0x16e>
 800d238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d23c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d240:	e03a      	b.n	800d2b8 <_printf_i+0xa8>
 800d242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d246:	2b15      	cmp	r3, #21
 800d248:	d8f6      	bhi.n	800d238 <_printf_i+0x28>
 800d24a:	a101      	add	r1, pc, #4	; (adr r1, 800d250 <_printf_i+0x40>)
 800d24c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d250:	0800d2a9 	.word	0x0800d2a9
 800d254:	0800d2bd 	.word	0x0800d2bd
 800d258:	0800d239 	.word	0x0800d239
 800d25c:	0800d239 	.word	0x0800d239
 800d260:	0800d239 	.word	0x0800d239
 800d264:	0800d239 	.word	0x0800d239
 800d268:	0800d2bd 	.word	0x0800d2bd
 800d26c:	0800d239 	.word	0x0800d239
 800d270:	0800d239 	.word	0x0800d239
 800d274:	0800d239 	.word	0x0800d239
 800d278:	0800d239 	.word	0x0800d239
 800d27c:	0800d3c9 	.word	0x0800d3c9
 800d280:	0800d2ed 	.word	0x0800d2ed
 800d284:	0800d3ab 	.word	0x0800d3ab
 800d288:	0800d239 	.word	0x0800d239
 800d28c:	0800d239 	.word	0x0800d239
 800d290:	0800d3eb 	.word	0x0800d3eb
 800d294:	0800d239 	.word	0x0800d239
 800d298:	0800d2ed 	.word	0x0800d2ed
 800d29c:	0800d239 	.word	0x0800d239
 800d2a0:	0800d239 	.word	0x0800d239
 800d2a4:	0800d3b3 	.word	0x0800d3b3
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	1d1a      	adds	r2, r3, #4
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	602a      	str	r2, [r5, #0]
 800d2b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e0a3      	b.n	800d404 <_printf_i+0x1f4>
 800d2bc:	6820      	ldr	r0, [r4, #0]
 800d2be:	6829      	ldr	r1, [r5, #0]
 800d2c0:	0606      	lsls	r6, r0, #24
 800d2c2:	f101 0304 	add.w	r3, r1, #4
 800d2c6:	d50a      	bpl.n	800d2de <_printf_i+0xce>
 800d2c8:	680e      	ldr	r6, [r1, #0]
 800d2ca:	602b      	str	r3, [r5, #0]
 800d2cc:	2e00      	cmp	r6, #0
 800d2ce:	da03      	bge.n	800d2d8 <_printf_i+0xc8>
 800d2d0:	232d      	movs	r3, #45	; 0x2d
 800d2d2:	4276      	negs	r6, r6
 800d2d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2d8:	485e      	ldr	r0, [pc, #376]	; (800d454 <_printf_i+0x244>)
 800d2da:	230a      	movs	r3, #10
 800d2dc:	e019      	b.n	800d312 <_printf_i+0x102>
 800d2de:	680e      	ldr	r6, [r1, #0]
 800d2e0:	602b      	str	r3, [r5, #0]
 800d2e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d2e6:	bf18      	it	ne
 800d2e8:	b236      	sxthne	r6, r6
 800d2ea:	e7ef      	b.n	800d2cc <_printf_i+0xbc>
 800d2ec:	682b      	ldr	r3, [r5, #0]
 800d2ee:	6820      	ldr	r0, [r4, #0]
 800d2f0:	1d19      	adds	r1, r3, #4
 800d2f2:	6029      	str	r1, [r5, #0]
 800d2f4:	0601      	lsls	r1, r0, #24
 800d2f6:	d501      	bpl.n	800d2fc <_printf_i+0xec>
 800d2f8:	681e      	ldr	r6, [r3, #0]
 800d2fa:	e002      	b.n	800d302 <_printf_i+0xf2>
 800d2fc:	0646      	lsls	r6, r0, #25
 800d2fe:	d5fb      	bpl.n	800d2f8 <_printf_i+0xe8>
 800d300:	881e      	ldrh	r6, [r3, #0]
 800d302:	4854      	ldr	r0, [pc, #336]	; (800d454 <_printf_i+0x244>)
 800d304:	2f6f      	cmp	r7, #111	; 0x6f
 800d306:	bf0c      	ite	eq
 800d308:	2308      	moveq	r3, #8
 800d30a:	230a      	movne	r3, #10
 800d30c:	2100      	movs	r1, #0
 800d30e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d312:	6865      	ldr	r5, [r4, #4]
 800d314:	60a5      	str	r5, [r4, #8]
 800d316:	2d00      	cmp	r5, #0
 800d318:	bfa2      	ittt	ge
 800d31a:	6821      	ldrge	r1, [r4, #0]
 800d31c:	f021 0104 	bicge.w	r1, r1, #4
 800d320:	6021      	strge	r1, [r4, #0]
 800d322:	b90e      	cbnz	r6, 800d328 <_printf_i+0x118>
 800d324:	2d00      	cmp	r5, #0
 800d326:	d04d      	beq.n	800d3c4 <_printf_i+0x1b4>
 800d328:	4615      	mov	r5, r2
 800d32a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d32e:	fb03 6711 	mls	r7, r3, r1, r6
 800d332:	5dc7      	ldrb	r7, [r0, r7]
 800d334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d338:	4637      	mov	r7, r6
 800d33a:	42bb      	cmp	r3, r7
 800d33c:	460e      	mov	r6, r1
 800d33e:	d9f4      	bls.n	800d32a <_printf_i+0x11a>
 800d340:	2b08      	cmp	r3, #8
 800d342:	d10b      	bne.n	800d35c <_printf_i+0x14c>
 800d344:	6823      	ldr	r3, [r4, #0]
 800d346:	07de      	lsls	r6, r3, #31
 800d348:	d508      	bpl.n	800d35c <_printf_i+0x14c>
 800d34a:	6923      	ldr	r3, [r4, #16]
 800d34c:	6861      	ldr	r1, [r4, #4]
 800d34e:	4299      	cmp	r1, r3
 800d350:	bfde      	ittt	le
 800d352:	2330      	movle	r3, #48	; 0x30
 800d354:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d35c:	1b52      	subs	r2, r2, r5
 800d35e:	6122      	str	r2, [r4, #16]
 800d360:	f8cd a000 	str.w	sl, [sp]
 800d364:	464b      	mov	r3, r9
 800d366:	aa03      	add	r2, sp, #12
 800d368:	4621      	mov	r1, r4
 800d36a:	4640      	mov	r0, r8
 800d36c:	f7ff fee2 	bl	800d134 <_printf_common>
 800d370:	3001      	adds	r0, #1
 800d372:	d14c      	bne.n	800d40e <_printf_i+0x1fe>
 800d374:	f04f 30ff 	mov.w	r0, #4294967295
 800d378:	b004      	add	sp, #16
 800d37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d37e:	4835      	ldr	r0, [pc, #212]	; (800d454 <_printf_i+0x244>)
 800d380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d384:	6829      	ldr	r1, [r5, #0]
 800d386:	6823      	ldr	r3, [r4, #0]
 800d388:	f851 6b04 	ldr.w	r6, [r1], #4
 800d38c:	6029      	str	r1, [r5, #0]
 800d38e:	061d      	lsls	r5, r3, #24
 800d390:	d514      	bpl.n	800d3bc <_printf_i+0x1ac>
 800d392:	07df      	lsls	r7, r3, #31
 800d394:	bf44      	itt	mi
 800d396:	f043 0320 	orrmi.w	r3, r3, #32
 800d39a:	6023      	strmi	r3, [r4, #0]
 800d39c:	b91e      	cbnz	r6, 800d3a6 <_printf_i+0x196>
 800d39e:	6823      	ldr	r3, [r4, #0]
 800d3a0:	f023 0320 	bic.w	r3, r3, #32
 800d3a4:	6023      	str	r3, [r4, #0]
 800d3a6:	2310      	movs	r3, #16
 800d3a8:	e7b0      	b.n	800d30c <_printf_i+0xfc>
 800d3aa:	6823      	ldr	r3, [r4, #0]
 800d3ac:	f043 0320 	orr.w	r3, r3, #32
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	2378      	movs	r3, #120	; 0x78
 800d3b4:	4828      	ldr	r0, [pc, #160]	; (800d458 <_printf_i+0x248>)
 800d3b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d3ba:	e7e3      	b.n	800d384 <_printf_i+0x174>
 800d3bc:	0659      	lsls	r1, r3, #25
 800d3be:	bf48      	it	mi
 800d3c0:	b2b6      	uxthmi	r6, r6
 800d3c2:	e7e6      	b.n	800d392 <_printf_i+0x182>
 800d3c4:	4615      	mov	r5, r2
 800d3c6:	e7bb      	b.n	800d340 <_printf_i+0x130>
 800d3c8:	682b      	ldr	r3, [r5, #0]
 800d3ca:	6826      	ldr	r6, [r4, #0]
 800d3cc:	6961      	ldr	r1, [r4, #20]
 800d3ce:	1d18      	adds	r0, r3, #4
 800d3d0:	6028      	str	r0, [r5, #0]
 800d3d2:	0635      	lsls	r5, r6, #24
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	d501      	bpl.n	800d3dc <_printf_i+0x1cc>
 800d3d8:	6019      	str	r1, [r3, #0]
 800d3da:	e002      	b.n	800d3e2 <_printf_i+0x1d2>
 800d3dc:	0670      	lsls	r0, r6, #25
 800d3de:	d5fb      	bpl.n	800d3d8 <_printf_i+0x1c8>
 800d3e0:	8019      	strh	r1, [r3, #0]
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	6123      	str	r3, [r4, #16]
 800d3e6:	4615      	mov	r5, r2
 800d3e8:	e7ba      	b.n	800d360 <_printf_i+0x150>
 800d3ea:	682b      	ldr	r3, [r5, #0]
 800d3ec:	1d1a      	adds	r2, r3, #4
 800d3ee:	602a      	str	r2, [r5, #0]
 800d3f0:	681d      	ldr	r5, [r3, #0]
 800d3f2:	6862      	ldr	r2, [r4, #4]
 800d3f4:	2100      	movs	r1, #0
 800d3f6:	4628      	mov	r0, r5
 800d3f8:	f7f2 fefa 	bl	80001f0 <memchr>
 800d3fc:	b108      	cbz	r0, 800d402 <_printf_i+0x1f2>
 800d3fe:	1b40      	subs	r0, r0, r5
 800d400:	6060      	str	r0, [r4, #4]
 800d402:	6863      	ldr	r3, [r4, #4]
 800d404:	6123      	str	r3, [r4, #16]
 800d406:	2300      	movs	r3, #0
 800d408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d40c:	e7a8      	b.n	800d360 <_printf_i+0x150>
 800d40e:	6923      	ldr	r3, [r4, #16]
 800d410:	462a      	mov	r2, r5
 800d412:	4649      	mov	r1, r9
 800d414:	4640      	mov	r0, r8
 800d416:	47d0      	blx	sl
 800d418:	3001      	adds	r0, #1
 800d41a:	d0ab      	beq.n	800d374 <_printf_i+0x164>
 800d41c:	6823      	ldr	r3, [r4, #0]
 800d41e:	079b      	lsls	r3, r3, #30
 800d420:	d413      	bmi.n	800d44a <_printf_i+0x23a>
 800d422:	68e0      	ldr	r0, [r4, #12]
 800d424:	9b03      	ldr	r3, [sp, #12]
 800d426:	4298      	cmp	r0, r3
 800d428:	bfb8      	it	lt
 800d42a:	4618      	movlt	r0, r3
 800d42c:	e7a4      	b.n	800d378 <_printf_i+0x168>
 800d42e:	2301      	movs	r3, #1
 800d430:	4632      	mov	r2, r6
 800d432:	4649      	mov	r1, r9
 800d434:	4640      	mov	r0, r8
 800d436:	47d0      	blx	sl
 800d438:	3001      	adds	r0, #1
 800d43a:	d09b      	beq.n	800d374 <_printf_i+0x164>
 800d43c:	3501      	adds	r5, #1
 800d43e:	68e3      	ldr	r3, [r4, #12]
 800d440:	9903      	ldr	r1, [sp, #12]
 800d442:	1a5b      	subs	r3, r3, r1
 800d444:	42ab      	cmp	r3, r5
 800d446:	dcf2      	bgt.n	800d42e <_printf_i+0x21e>
 800d448:	e7eb      	b.n	800d422 <_printf_i+0x212>
 800d44a:	2500      	movs	r5, #0
 800d44c:	f104 0619 	add.w	r6, r4, #25
 800d450:	e7f5      	b.n	800d43e <_printf_i+0x22e>
 800d452:	bf00      	nop
 800d454:	0800f49e 	.word	0x0800f49e
 800d458:	0800f4af 	.word	0x0800f4af

0800d45c <_sbrk_r>:
 800d45c:	b538      	push	{r3, r4, r5, lr}
 800d45e:	4d06      	ldr	r5, [pc, #24]	; (800d478 <_sbrk_r+0x1c>)
 800d460:	2300      	movs	r3, #0
 800d462:	4604      	mov	r4, r0
 800d464:	4608      	mov	r0, r1
 800d466:	602b      	str	r3, [r5, #0]
 800d468:	f7f8 f9d0 	bl	800580c <_sbrk>
 800d46c:	1c43      	adds	r3, r0, #1
 800d46e:	d102      	bne.n	800d476 <_sbrk_r+0x1a>
 800d470:	682b      	ldr	r3, [r5, #0]
 800d472:	b103      	cbz	r3, 800d476 <_sbrk_r+0x1a>
 800d474:	6023      	str	r3, [r4, #0]
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	20001174 	.word	0x20001174

0800d47c <_raise_r>:
 800d47c:	291f      	cmp	r1, #31
 800d47e:	b538      	push	{r3, r4, r5, lr}
 800d480:	4604      	mov	r4, r0
 800d482:	460d      	mov	r5, r1
 800d484:	d904      	bls.n	800d490 <_raise_r+0x14>
 800d486:	2316      	movs	r3, #22
 800d488:	6003      	str	r3, [r0, #0]
 800d48a:	f04f 30ff 	mov.w	r0, #4294967295
 800d48e:	bd38      	pop	{r3, r4, r5, pc}
 800d490:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d492:	b112      	cbz	r2, 800d49a <_raise_r+0x1e>
 800d494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d498:	b94b      	cbnz	r3, 800d4ae <_raise_r+0x32>
 800d49a:	4620      	mov	r0, r4
 800d49c:	f000 f830 	bl	800d500 <_getpid_r>
 800d4a0:	462a      	mov	r2, r5
 800d4a2:	4601      	mov	r1, r0
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4aa:	f000 b817 	b.w	800d4dc <_kill_r>
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d00a      	beq.n	800d4c8 <_raise_r+0x4c>
 800d4b2:	1c59      	adds	r1, r3, #1
 800d4b4:	d103      	bne.n	800d4be <_raise_r+0x42>
 800d4b6:	2316      	movs	r3, #22
 800d4b8:	6003      	str	r3, [r0, #0]
 800d4ba:	2001      	movs	r0, #1
 800d4bc:	e7e7      	b.n	800d48e <_raise_r+0x12>
 800d4be:	2400      	movs	r4, #0
 800d4c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	4798      	blx	r3
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	e7e0      	b.n	800d48e <_raise_r+0x12>

0800d4cc <raise>:
 800d4cc:	4b02      	ldr	r3, [pc, #8]	; (800d4d8 <raise+0xc>)
 800d4ce:	4601      	mov	r1, r0
 800d4d0:	6818      	ldr	r0, [r3, #0]
 800d4d2:	f7ff bfd3 	b.w	800d47c <_raise_r>
 800d4d6:	bf00      	nop
 800d4d8:	2000000c 	.word	0x2000000c

0800d4dc <_kill_r>:
 800d4dc:	b538      	push	{r3, r4, r5, lr}
 800d4de:	4d07      	ldr	r5, [pc, #28]	; (800d4fc <_kill_r+0x20>)
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	4604      	mov	r4, r0
 800d4e4:	4608      	mov	r0, r1
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	602b      	str	r3, [r5, #0]
 800d4ea:	f7f8 f907 	bl	80056fc <_kill>
 800d4ee:	1c43      	adds	r3, r0, #1
 800d4f0:	d102      	bne.n	800d4f8 <_kill_r+0x1c>
 800d4f2:	682b      	ldr	r3, [r5, #0]
 800d4f4:	b103      	cbz	r3, 800d4f8 <_kill_r+0x1c>
 800d4f6:	6023      	str	r3, [r4, #0]
 800d4f8:	bd38      	pop	{r3, r4, r5, pc}
 800d4fa:	bf00      	nop
 800d4fc:	20001174 	.word	0x20001174

0800d500 <_getpid_r>:
 800d500:	f7f8 b8f4 	b.w	80056ec <_getpid>

0800d504 <quorem>:
 800d504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d508:	6903      	ldr	r3, [r0, #16]
 800d50a:	690c      	ldr	r4, [r1, #16]
 800d50c:	42a3      	cmp	r3, r4
 800d50e:	4607      	mov	r7, r0
 800d510:	f2c0 8081 	blt.w	800d616 <quorem+0x112>
 800d514:	3c01      	subs	r4, #1
 800d516:	f101 0814 	add.w	r8, r1, #20
 800d51a:	f100 0514 	add.w	r5, r0, #20
 800d51e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d522:	9301      	str	r3, [sp, #4]
 800d524:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d528:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d52c:	3301      	adds	r3, #1
 800d52e:	429a      	cmp	r2, r3
 800d530:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d534:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d538:	fbb2 f6f3 	udiv	r6, r2, r3
 800d53c:	d331      	bcc.n	800d5a2 <quorem+0x9e>
 800d53e:	f04f 0e00 	mov.w	lr, #0
 800d542:	4640      	mov	r0, r8
 800d544:	46ac      	mov	ip, r5
 800d546:	46f2      	mov	sl, lr
 800d548:	f850 2b04 	ldr.w	r2, [r0], #4
 800d54c:	b293      	uxth	r3, r2
 800d54e:	fb06 e303 	mla	r3, r6, r3, lr
 800d552:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d556:	b29b      	uxth	r3, r3
 800d558:	ebaa 0303 	sub.w	r3, sl, r3
 800d55c:	f8dc a000 	ldr.w	sl, [ip]
 800d560:	0c12      	lsrs	r2, r2, #16
 800d562:	fa13 f38a 	uxtah	r3, r3, sl
 800d566:	fb06 e202 	mla	r2, r6, r2, lr
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	9b00      	ldr	r3, [sp, #0]
 800d56e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d572:	b292      	uxth	r2, r2
 800d574:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d578:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d57c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d580:	4581      	cmp	r9, r0
 800d582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d586:	f84c 3b04 	str.w	r3, [ip], #4
 800d58a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d58e:	d2db      	bcs.n	800d548 <quorem+0x44>
 800d590:	f855 300b 	ldr.w	r3, [r5, fp]
 800d594:	b92b      	cbnz	r3, 800d5a2 <quorem+0x9e>
 800d596:	9b01      	ldr	r3, [sp, #4]
 800d598:	3b04      	subs	r3, #4
 800d59a:	429d      	cmp	r5, r3
 800d59c:	461a      	mov	r2, r3
 800d59e:	d32e      	bcc.n	800d5fe <quorem+0xfa>
 800d5a0:	613c      	str	r4, [r7, #16]
 800d5a2:	4638      	mov	r0, r7
 800d5a4:	f001 f8bc 	bl	800e720 <__mcmp>
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	db24      	blt.n	800d5f6 <quorem+0xf2>
 800d5ac:	3601      	adds	r6, #1
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	f04f 0c00 	mov.w	ip, #0
 800d5b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d5b8:	f8d0 e000 	ldr.w	lr, [r0]
 800d5bc:	b293      	uxth	r3, r2
 800d5be:	ebac 0303 	sub.w	r3, ip, r3
 800d5c2:	0c12      	lsrs	r2, r2, #16
 800d5c4:	fa13 f38e 	uxtah	r3, r3, lr
 800d5c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d5cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5d6:	45c1      	cmp	r9, r8
 800d5d8:	f840 3b04 	str.w	r3, [r0], #4
 800d5dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d5e0:	d2e8      	bcs.n	800d5b4 <quorem+0xb0>
 800d5e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5ea:	b922      	cbnz	r2, 800d5f6 <quorem+0xf2>
 800d5ec:	3b04      	subs	r3, #4
 800d5ee:	429d      	cmp	r5, r3
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	d30a      	bcc.n	800d60a <quorem+0x106>
 800d5f4:	613c      	str	r4, [r7, #16]
 800d5f6:	4630      	mov	r0, r6
 800d5f8:	b003      	add	sp, #12
 800d5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5fe:	6812      	ldr	r2, [r2, #0]
 800d600:	3b04      	subs	r3, #4
 800d602:	2a00      	cmp	r2, #0
 800d604:	d1cc      	bne.n	800d5a0 <quorem+0x9c>
 800d606:	3c01      	subs	r4, #1
 800d608:	e7c7      	b.n	800d59a <quorem+0x96>
 800d60a:	6812      	ldr	r2, [r2, #0]
 800d60c:	3b04      	subs	r3, #4
 800d60e:	2a00      	cmp	r2, #0
 800d610:	d1f0      	bne.n	800d5f4 <quorem+0xf0>
 800d612:	3c01      	subs	r4, #1
 800d614:	e7eb      	b.n	800d5ee <quorem+0xea>
 800d616:	2000      	movs	r0, #0
 800d618:	e7ee      	b.n	800d5f8 <quorem+0xf4>
 800d61a:	0000      	movs	r0, r0
 800d61c:	0000      	movs	r0, r0
	...

0800d620 <_dtoa_r>:
 800d620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d624:	ed2d 8b04 	vpush	{d8-d9}
 800d628:	ec57 6b10 	vmov	r6, r7, d0
 800d62c:	b093      	sub	sp, #76	; 0x4c
 800d62e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d630:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d634:	9106      	str	r1, [sp, #24]
 800d636:	ee10 aa10 	vmov	sl, s0
 800d63a:	4604      	mov	r4, r0
 800d63c:	9209      	str	r2, [sp, #36]	; 0x24
 800d63e:	930c      	str	r3, [sp, #48]	; 0x30
 800d640:	46bb      	mov	fp, r7
 800d642:	b975      	cbnz	r5, 800d662 <_dtoa_r+0x42>
 800d644:	2010      	movs	r0, #16
 800d646:	f7ff f97f 	bl	800c948 <malloc>
 800d64a:	4602      	mov	r2, r0
 800d64c:	6260      	str	r0, [r4, #36]	; 0x24
 800d64e:	b920      	cbnz	r0, 800d65a <_dtoa_r+0x3a>
 800d650:	4ba7      	ldr	r3, [pc, #668]	; (800d8f0 <_dtoa_r+0x2d0>)
 800d652:	21ea      	movs	r1, #234	; 0xea
 800d654:	48a7      	ldr	r0, [pc, #668]	; (800d8f4 <_dtoa_r+0x2d4>)
 800d656:	f001 f97b 	bl	800e950 <__assert_func>
 800d65a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d65e:	6005      	str	r5, [r0, #0]
 800d660:	60c5      	str	r5, [r0, #12]
 800d662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d664:	6819      	ldr	r1, [r3, #0]
 800d666:	b151      	cbz	r1, 800d67e <_dtoa_r+0x5e>
 800d668:	685a      	ldr	r2, [r3, #4]
 800d66a:	604a      	str	r2, [r1, #4]
 800d66c:	2301      	movs	r3, #1
 800d66e:	4093      	lsls	r3, r2
 800d670:	608b      	str	r3, [r1, #8]
 800d672:	4620      	mov	r0, r4
 800d674:	f000 fe12 	bl	800e29c <_Bfree>
 800d678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d67a:	2200      	movs	r2, #0
 800d67c:	601a      	str	r2, [r3, #0]
 800d67e:	1e3b      	subs	r3, r7, #0
 800d680:	bfaa      	itet	ge
 800d682:	2300      	movge	r3, #0
 800d684:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d688:	f8c8 3000 	strge.w	r3, [r8]
 800d68c:	4b9a      	ldr	r3, [pc, #616]	; (800d8f8 <_dtoa_r+0x2d8>)
 800d68e:	bfbc      	itt	lt
 800d690:	2201      	movlt	r2, #1
 800d692:	f8c8 2000 	strlt.w	r2, [r8]
 800d696:	ea33 030b 	bics.w	r3, r3, fp
 800d69a:	d11b      	bne.n	800d6d4 <_dtoa_r+0xb4>
 800d69c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d69e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d6a2:	6013      	str	r3, [r2, #0]
 800d6a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6a8:	4333      	orrs	r3, r6
 800d6aa:	f000 8592 	beq.w	800e1d2 <_dtoa_r+0xbb2>
 800d6ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6b0:	b963      	cbnz	r3, 800d6cc <_dtoa_r+0xac>
 800d6b2:	4b92      	ldr	r3, [pc, #584]	; (800d8fc <_dtoa_r+0x2dc>)
 800d6b4:	e022      	b.n	800d6fc <_dtoa_r+0xdc>
 800d6b6:	4b92      	ldr	r3, [pc, #584]	; (800d900 <_dtoa_r+0x2e0>)
 800d6b8:	9301      	str	r3, [sp, #4]
 800d6ba:	3308      	adds	r3, #8
 800d6bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d6be:	6013      	str	r3, [r2, #0]
 800d6c0:	9801      	ldr	r0, [sp, #4]
 800d6c2:	b013      	add	sp, #76	; 0x4c
 800d6c4:	ecbd 8b04 	vpop	{d8-d9}
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6cc:	4b8b      	ldr	r3, [pc, #556]	; (800d8fc <_dtoa_r+0x2dc>)
 800d6ce:	9301      	str	r3, [sp, #4]
 800d6d0:	3303      	adds	r3, #3
 800d6d2:	e7f3      	b.n	800d6bc <_dtoa_r+0x9c>
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	4650      	mov	r0, sl
 800d6da:	4659      	mov	r1, fp
 800d6dc:	f7f3 f9fc 	bl	8000ad8 <__aeabi_dcmpeq>
 800d6e0:	ec4b ab19 	vmov	d9, sl, fp
 800d6e4:	4680      	mov	r8, r0
 800d6e6:	b158      	cbz	r0, 800d700 <_dtoa_r+0xe0>
 800d6e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	6013      	str	r3, [r2, #0]
 800d6ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	f000 856b 	beq.w	800e1cc <_dtoa_r+0xbac>
 800d6f6:	4883      	ldr	r0, [pc, #524]	; (800d904 <_dtoa_r+0x2e4>)
 800d6f8:	6018      	str	r0, [r3, #0]
 800d6fa:	1e43      	subs	r3, r0, #1
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	e7df      	b.n	800d6c0 <_dtoa_r+0xa0>
 800d700:	ec4b ab10 	vmov	d0, sl, fp
 800d704:	aa10      	add	r2, sp, #64	; 0x40
 800d706:	a911      	add	r1, sp, #68	; 0x44
 800d708:	4620      	mov	r0, r4
 800d70a:	f001 f8af 	bl	800e86c <__d2b>
 800d70e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d712:	ee08 0a10 	vmov	s16, r0
 800d716:	2d00      	cmp	r5, #0
 800d718:	f000 8084 	beq.w	800d824 <_dtoa_r+0x204>
 800d71c:	ee19 3a90 	vmov	r3, s19
 800d720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d724:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d728:	4656      	mov	r6, sl
 800d72a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d72e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d732:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d736:	4b74      	ldr	r3, [pc, #464]	; (800d908 <_dtoa_r+0x2e8>)
 800d738:	2200      	movs	r2, #0
 800d73a:	4630      	mov	r0, r6
 800d73c:	4639      	mov	r1, r7
 800d73e:	f7f2 fdab 	bl	8000298 <__aeabi_dsub>
 800d742:	a365      	add	r3, pc, #404	; (adr r3, 800d8d8 <_dtoa_r+0x2b8>)
 800d744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d748:	f7f2 ff5e 	bl	8000608 <__aeabi_dmul>
 800d74c:	a364      	add	r3, pc, #400	; (adr r3, 800d8e0 <_dtoa_r+0x2c0>)
 800d74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d752:	f7f2 fda3 	bl	800029c <__adddf3>
 800d756:	4606      	mov	r6, r0
 800d758:	4628      	mov	r0, r5
 800d75a:	460f      	mov	r7, r1
 800d75c:	f7f2 feea 	bl	8000534 <__aeabi_i2d>
 800d760:	a361      	add	r3, pc, #388	; (adr r3, 800d8e8 <_dtoa_r+0x2c8>)
 800d762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d766:	f7f2 ff4f 	bl	8000608 <__aeabi_dmul>
 800d76a:	4602      	mov	r2, r0
 800d76c:	460b      	mov	r3, r1
 800d76e:	4630      	mov	r0, r6
 800d770:	4639      	mov	r1, r7
 800d772:	f7f2 fd93 	bl	800029c <__adddf3>
 800d776:	4606      	mov	r6, r0
 800d778:	460f      	mov	r7, r1
 800d77a:	f7f3 f9f5 	bl	8000b68 <__aeabi_d2iz>
 800d77e:	2200      	movs	r2, #0
 800d780:	9000      	str	r0, [sp, #0]
 800d782:	2300      	movs	r3, #0
 800d784:	4630      	mov	r0, r6
 800d786:	4639      	mov	r1, r7
 800d788:	f7f3 f9b0 	bl	8000aec <__aeabi_dcmplt>
 800d78c:	b150      	cbz	r0, 800d7a4 <_dtoa_r+0x184>
 800d78e:	9800      	ldr	r0, [sp, #0]
 800d790:	f7f2 fed0 	bl	8000534 <__aeabi_i2d>
 800d794:	4632      	mov	r2, r6
 800d796:	463b      	mov	r3, r7
 800d798:	f7f3 f99e 	bl	8000ad8 <__aeabi_dcmpeq>
 800d79c:	b910      	cbnz	r0, 800d7a4 <_dtoa_r+0x184>
 800d79e:	9b00      	ldr	r3, [sp, #0]
 800d7a0:	3b01      	subs	r3, #1
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	9b00      	ldr	r3, [sp, #0]
 800d7a6:	2b16      	cmp	r3, #22
 800d7a8:	d85a      	bhi.n	800d860 <_dtoa_r+0x240>
 800d7aa:	9a00      	ldr	r2, [sp, #0]
 800d7ac:	4b57      	ldr	r3, [pc, #348]	; (800d90c <_dtoa_r+0x2ec>)
 800d7ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b6:	ec51 0b19 	vmov	r0, r1, d9
 800d7ba:	f7f3 f997 	bl	8000aec <__aeabi_dcmplt>
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d050      	beq.n	800d864 <_dtoa_r+0x244>
 800d7c2:	9b00      	ldr	r3, [sp, #0]
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7ce:	1b5d      	subs	r5, r3, r5
 800d7d0:	1e6b      	subs	r3, r5, #1
 800d7d2:	9305      	str	r3, [sp, #20]
 800d7d4:	bf45      	ittet	mi
 800d7d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d7da:	9304      	strmi	r3, [sp, #16]
 800d7dc:	2300      	movpl	r3, #0
 800d7de:	2300      	movmi	r3, #0
 800d7e0:	bf4c      	ite	mi
 800d7e2:	9305      	strmi	r3, [sp, #20]
 800d7e4:	9304      	strpl	r3, [sp, #16]
 800d7e6:	9b00      	ldr	r3, [sp, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	db3d      	blt.n	800d868 <_dtoa_r+0x248>
 800d7ec:	9b05      	ldr	r3, [sp, #20]
 800d7ee:	9a00      	ldr	r2, [sp, #0]
 800d7f0:	920a      	str	r2, [sp, #40]	; 0x28
 800d7f2:	4413      	add	r3, r2
 800d7f4:	9305      	str	r3, [sp, #20]
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	9307      	str	r3, [sp, #28]
 800d7fa:	9b06      	ldr	r3, [sp, #24]
 800d7fc:	2b09      	cmp	r3, #9
 800d7fe:	f200 8089 	bhi.w	800d914 <_dtoa_r+0x2f4>
 800d802:	2b05      	cmp	r3, #5
 800d804:	bfc4      	itt	gt
 800d806:	3b04      	subgt	r3, #4
 800d808:	9306      	strgt	r3, [sp, #24]
 800d80a:	9b06      	ldr	r3, [sp, #24]
 800d80c:	f1a3 0302 	sub.w	r3, r3, #2
 800d810:	bfcc      	ite	gt
 800d812:	2500      	movgt	r5, #0
 800d814:	2501      	movle	r5, #1
 800d816:	2b03      	cmp	r3, #3
 800d818:	f200 8087 	bhi.w	800d92a <_dtoa_r+0x30a>
 800d81c:	e8df f003 	tbb	[pc, r3]
 800d820:	59383a2d 	.word	0x59383a2d
 800d824:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d828:	441d      	add	r5, r3
 800d82a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d82e:	2b20      	cmp	r3, #32
 800d830:	bfc1      	itttt	gt
 800d832:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d836:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d83a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d83e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d842:	bfda      	itte	le
 800d844:	f1c3 0320 	rsble	r3, r3, #32
 800d848:	fa06 f003 	lslle.w	r0, r6, r3
 800d84c:	4318      	orrgt	r0, r3
 800d84e:	f7f2 fe61 	bl	8000514 <__aeabi_ui2d>
 800d852:	2301      	movs	r3, #1
 800d854:	4606      	mov	r6, r0
 800d856:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d85a:	3d01      	subs	r5, #1
 800d85c:	930e      	str	r3, [sp, #56]	; 0x38
 800d85e:	e76a      	b.n	800d736 <_dtoa_r+0x116>
 800d860:	2301      	movs	r3, #1
 800d862:	e7b2      	b.n	800d7ca <_dtoa_r+0x1aa>
 800d864:	900b      	str	r0, [sp, #44]	; 0x2c
 800d866:	e7b1      	b.n	800d7cc <_dtoa_r+0x1ac>
 800d868:	9b04      	ldr	r3, [sp, #16]
 800d86a:	9a00      	ldr	r2, [sp, #0]
 800d86c:	1a9b      	subs	r3, r3, r2
 800d86e:	9304      	str	r3, [sp, #16]
 800d870:	4253      	negs	r3, r2
 800d872:	9307      	str	r3, [sp, #28]
 800d874:	2300      	movs	r3, #0
 800d876:	930a      	str	r3, [sp, #40]	; 0x28
 800d878:	e7bf      	b.n	800d7fa <_dtoa_r+0x1da>
 800d87a:	2300      	movs	r3, #0
 800d87c:	9308      	str	r3, [sp, #32]
 800d87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d880:	2b00      	cmp	r3, #0
 800d882:	dc55      	bgt.n	800d930 <_dtoa_r+0x310>
 800d884:	2301      	movs	r3, #1
 800d886:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d88a:	461a      	mov	r2, r3
 800d88c:	9209      	str	r2, [sp, #36]	; 0x24
 800d88e:	e00c      	b.n	800d8aa <_dtoa_r+0x28a>
 800d890:	2301      	movs	r3, #1
 800d892:	e7f3      	b.n	800d87c <_dtoa_r+0x25c>
 800d894:	2300      	movs	r3, #0
 800d896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d898:	9308      	str	r3, [sp, #32]
 800d89a:	9b00      	ldr	r3, [sp, #0]
 800d89c:	4413      	add	r3, r2
 800d89e:	9302      	str	r3, [sp, #8]
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	9303      	str	r3, [sp, #12]
 800d8a6:	bfb8      	it	lt
 800d8a8:	2301      	movlt	r3, #1
 800d8aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	6042      	str	r2, [r0, #4]
 800d8b0:	2204      	movs	r2, #4
 800d8b2:	f102 0614 	add.w	r6, r2, #20
 800d8b6:	429e      	cmp	r6, r3
 800d8b8:	6841      	ldr	r1, [r0, #4]
 800d8ba:	d93d      	bls.n	800d938 <_dtoa_r+0x318>
 800d8bc:	4620      	mov	r0, r4
 800d8be:	f000 fcad 	bl	800e21c <_Balloc>
 800d8c2:	9001      	str	r0, [sp, #4]
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	d13b      	bne.n	800d940 <_dtoa_r+0x320>
 800d8c8:	4b11      	ldr	r3, [pc, #68]	; (800d910 <_dtoa_r+0x2f0>)
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d8d0:	e6c0      	b.n	800d654 <_dtoa_r+0x34>
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e7df      	b.n	800d896 <_dtoa_r+0x276>
 800d8d6:	bf00      	nop
 800d8d8:	636f4361 	.word	0x636f4361
 800d8dc:	3fd287a7 	.word	0x3fd287a7
 800d8e0:	8b60c8b3 	.word	0x8b60c8b3
 800d8e4:	3fc68a28 	.word	0x3fc68a28
 800d8e8:	509f79fb 	.word	0x509f79fb
 800d8ec:	3fd34413 	.word	0x3fd34413
 800d8f0:	0800f4cd 	.word	0x0800f4cd
 800d8f4:	0800f4e4 	.word	0x0800f4e4
 800d8f8:	7ff00000 	.word	0x7ff00000
 800d8fc:	0800f4c9 	.word	0x0800f4c9
 800d900:	0800f4c0 	.word	0x0800f4c0
 800d904:	0800f49d 	.word	0x0800f49d
 800d908:	3ff80000 	.word	0x3ff80000
 800d90c:	0800f5d8 	.word	0x0800f5d8
 800d910:	0800f53f 	.word	0x0800f53f
 800d914:	2501      	movs	r5, #1
 800d916:	2300      	movs	r3, #0
 800d918:	9306      	str	r3, [sp, #24]
 800d91a:	9508      	str	r5, [sp, #32]
 800d91c:	f04f 33ff 	mov.w	r3, #4294967295
 800d920:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d924:	2200      	movs	r2, #0
 800d926:	2312      	movs	r3, #18
 800d928:	e7b0      	b.n	800d88c <_dtoa_r+0x26c>
 800d92a:	2301      	movs	r3, #1
 800d92c:	9308      	str	r3, [sp, #32]
 800d92e:	e7f5      	b.n	800d91c <_dtoa_r+0x2fc>
 800d930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d932:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d936:	e7b8      	b.n	800d8aa <_dtoa_r+0x28a>
 800d938:	3101      	adds	r1, #1
 800d93a:	6041      	str	r1, [r0, #4]
 800d93c:	0052      	lsls	r2, r2, #1
 800d93e:	e7b8      	b.n	800d8b2 <_dtoa_r+0x292>
 800d940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d942:	9a01      	ldr	r2, [sp, #4]
 800d944:	601a      	str	r2, [r3, #0]
 800d946:	9b03      	ldr	r3, [sp, #12]
 800d948:	2b0e      	cmp	r3, #14
 800d94a:	f200 809d 	bhi.w	800da88 <_dtoa_r+0x468>
 800d94e:	2d00      	cmp	r5, #0
 800d950:	f000 809a 	beq.w	800da88 <_dtoa_r+0x468>
 800d954:	9b00      	ldr	r3, [sp, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	dd32      	ble.n	800d9c0 <_dtoa_r+0x3a0>
 800d95a:	4ab7      	ldr	r2, [pc, #732]	; (800dc38 <_dtoa_r+0x618>)
 800d95c:	f003 030f 	and.w	r3, r3, #15
 800d960:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d964:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d968:	9b00      	ldr	r3, [sp, #0]
 800d96a:	05d8      	lsls	r0, r3, #23
 800d96c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d970:	d516      	bpl.n	800d9a0 <_dtoa_r+0x380>
 800d972:	4bb2      	ldr	r3, [pc, #712]	; (800dc3c <_dtoa_r+0x61c>)
 800d974:	ec51 0b19 	vmov	r0, r1, d9
 800d978:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d97c:	f7f2 ff6e 	bl	800085c <__aeabi_ddiv>
 800d980:	f007 070f 	and.w	r7, r7, #15
 800d984:	4682      	mov	sl, r0
 800d986:	468b      	mov	fp, r1
 800d988:	2503      	movs	r5, #3
 800d98a:	4eac      	ldr	r6, [pc, #688]	; (800dc3c <_dtoa_r+0x61c>)
 800d98c:	b957      	cbnz	r7, 800d9a4 <_dtoa_r+0x384>
 800d98e:	4642      	mov	r2, r8
 800d990:	464b      	mov	r3, r9
 800d992:	4650      	mov	r0, sl
 800d994:	4659      	mov	r1, fp
 800d996:	f7f2 ff61 	bl	800085c <__aeabi_ddiv>
 800d99a:	4682      	mov	sl, r0
 800d99c:	468b      	mov	fp, r1
 800d99e:	e028      	b.n	800d9f2 <_dtoa_r+0x3d2>
 800d9a0:	2502      	movs	r5, #2
 800d9a2:	e7f2      	b.n	800d98a <_dtoa_r+0x36a>
 800d9a4:	07f9      	lsls	r1, r7, #31
 800d9a6:	d508      	bpl.n	800d9ba <_dtoa_r+0x39a>
 800d9a8:	4640      	mov	r0, r8
 800d9aa:	4649      	mov	r1, r9
 800d9ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d9b0:	f7f2 fe2a 	bl	8000608 <__aeabi_dmul>
 800d9b4:	3501      	adds	r5, #1
 800d9b6:	4680      	mov	r8, r0
 800d9b8:	4689      	mov	r9, r1
 800d9ba:	107f      	asrs	r7, r7, #1
 800d9bc:	3608      	adds	r6, #8
 800d9be:	e7e5      	b.n	800d98c <_dtoa_r+0x36c>
 800d9c0:	f000 809b 	beq.w	800dafa <_dtoa_r+0x4da>
 800d9c4:	9b00      	ldr	r3, [sp, #0]
 800d9c6:	4f9d      	ldr	r7, [pc, #628]	; (800dc3c <_dtoa_r+0x61c>)
 800d9c8:	425e      	negs	r6, r3
 800d9ca:	4b9b      	ldr	r3, [pc, #620]	; (800dc38 <_dtoa_r+0x618>)
 800d9cc:	f006 020f 	and.w	r2, r6, #15
 800d9d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d8:	ec51 0b19 	vmov	r0, r1, d9
 800d9dc:	f7f2 fe14 	bl	8000608 <__aeabi_dmul>
 800d9e0:	1136      	asrs	r6, r6, #4
 800d9e2:	4682      	mov	sl, r0
 800d9e4:	468b      	mov	fp, r1
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	2502      	movs	r5, #2
 800d9ea:	2e00      	cmp	r6, #0
 800d9ec:	d17a      	bne.n	800dae4 <_dtoa_r+0x4c4>
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d1d3      	bne.n	800d99a <_dtoa_r+0x37a>
 800d9f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f000 8082 	beq.w	800dafe <_dtoa_r+0x4de>
 800d9fa:	4b91      	ldr	r3, [pc, #580]	; (800dc40 <_dtoa_r+0x620>)
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	4650      	mov	r0, sl
 800da00:	4659      	mov	r1, fp
 800da02:	f7f3 f873 	bl	8000aec <__aeabi_dcmplt>
 800da06:	2800      	cmp	r0, #0
 800da08:	d079      	beq.n	800dafe <_dtoa_r+0x4de>
 800da0a:	9b03      	ldr	r3, [sp, #12]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d076      	beq.n	800dafe <_dtoa_r+0x4de>
 800da10:	9b02      	ldr	r3, [sp, #8]
 800da12:	2b00      	cmp	r3, #0
 800da14:	dd36      	ble.n	800da84 <_dtoa_r+0x464>
 800da16:	9b00      	ldr	r3, [sp, #0]
 800da18:	4650      	mov	r0, sl
 800da1a:	4659      	mov	r1, fp
 800da1c:	1e5f      	subs	r7, r3, #1
 800da1e:	2200      	movs	r2, #0
 800da20:	4b88      	ldr	r3, [pc, #544]	; (800dc44 <_dtoa_r+0x624>)
 800da22:	f7f2 fdf1 	bl	8000608 <__aeabi_dmul>
 800da26:	9e02      	ldr	r6, [sp, #8]
 800da28:	4682      	mov	sl, r0
 800da2a:	468b      	mov	fp, r1
 800da2c:	3501      	adds	r5, #1
 800da2e:	4628      	mov	r0, r5
 800da30:	f7f2 fd80 	bl	8000534 <__aeabi_i2d>
 800da34:	4652      	mov	r2, sl
 800da36:	465b      	mov	r3, fp
 800da38:	f7f2 fde6 	bl	8000608 <__aeabi_dmul>
 800da3c:	4b82      	ldr	r3, [pc, #520]	; (800dc48 <_dtoa_r+0x628>)
 800da3e:	2200      	movs	r2, #0
 800da40:	f7f2 fc2c 	bl	800029c <__adddf3>
 800da44:	46d0      	mov	r8, sl
 800da46:	46d9      	mov	r9, fp
 800da48:	4682      	mov	sl, r0
 800da4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800da4e:	2e00      	cmp	r6, #0
 800da50:	d158      	bne.n	800db04 <_dtoa_r+0x4e4>
 800da52:	4b7e      	ldr	r3, [pc, #504]	; (800dc4c <_dtoa_r+0x62c>)
 800da54:	2200      	movs	r2, #0
 800da56:	4640      	mov	r0, r8
 800da58:	4649      	mov	r1, r9
 800da5a:	f7f2 fc1d 	bl	8000298 <__aeabi_dsub>
 800da5e:	4652      	mov	r2, sl
 800da60:	465b      	mov	r3, fp
 800da62:	4680      	mov	r8, r0
 800da64:	4689      	mov	r9, r1
 800da66:	f7f3 f85f 	bl	8000b28 <__aeabi_dcmpgt>
 800da6a:	2800      	cmp	r0, #0
 800da6c:	f040 8295 	bne.w	800df9a <_dtoa_r+0x97a>
 800da70:	4652      	mov	r2, sl
 800da72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800da76:	4640      	mov	r0, r8
 800da78:	4649      	mov	r1, r9
 800da7a:	f7f3 f837 	bl	8000aec <__aeabi_dcmplt>
 800da7e:	2800      	cmp	r0, #0
 800da80:	f040 8289 	bne.w	800df96 <_dtoa_r+0x976>
 800da84:	ec5b ab19 	vmov	sl, fp, d9
 800da88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f2c0 8148 	blt.w	800dd20 <_dtoa_r+0x700>
 800da90:	9a00      	ldr	r2, [sp, #0]
 800da92:	2a0e      	cmp	r2, #14
 800da94:	f300 8144 	bgt.w	800dd20 <_dtoa_r+0x700>
 800da98:	4b67      	ldr	r3, [pc, #412]	; (800dc38 <_dtoa_r+0x618>)
 800da9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800daa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f280 80d5 	bge.w	800dc54 <_dtoa_r+0x634>
 800daaa:	9b03      	ldr	r3, [sp, #12]
 800daac:	2b00      	cmp	r3, #0
 800daae:	f300 80d1 	bgt.w	800dc54 <_dtoa_r+0x634>
 800dab2:	f040 826f 	bne.w	800df94 <_dtoa_r+0x974>
 800dab6:	4b65      	ldr	r3, [pc, #404]	; (800dc4c <_dtoa_r+0x62c>)
 800dab8:	2200      	movs	r2, #0
 800daba:	4640      	mov	r0, r8
 800dabc:	4649      	mov	r1, r9
 800dabe:	f7f2 fda3 	bl	8000608 <__aeabi_dmul>
 800dac2:	4652      	mov	r2, sl
 800dac4:	465b      	mov	r3, fp
 800dac6:	f7f3 f825 	bl	8000b14 <__aeabi_dcmpge>
 800daca:	9e03      	ldr	r6, [sp, #12]
 800dacc:	4637      	mov	r7, r6
 800dace:	2800      	cmp	r0, #0
 800dad0:	f040 8245 	bne.w	800df5e <_dtoa_r+0x93e>
 800dad4:	9d01      	ldr	r5, [sp, #4]
 800dad6:	2331      	movs	r3, #49	; 0x31
 800dad8:	f805 3b01 	strb.w	r3, [r5], #1
 800dadc:	9b00      	ldr	r3, [sp, #0]
 800dade:	3301      	adds	r3, #1
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	e240      	b.n	800df66 <_dtoa_r+0x946>
 800dae4:	07f2      	lsls	r2, r6, #31
 800dae6:	d505      	bpl.n	800daf4 <_dtoa_r+0x4d4>
 800dae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800daec:	f7f2 fd8c 	bl	8000608 <__aeabi_dmul>
 800daf0:	3501      	adds	r5, #1
 800daf2:	2301      	movs	r3, #1
 800daf4:	1076      	asrs	r6, r6, #1
 800daf6:	3708      	adds	r7, #8
 800daf8:	e777      	b.n	800d9ea <_dtoa_r+0x3ca>
 800dafa:	2502      	movs	r5, #2
 800dafc:	e779      	b.n	800d9f2 <_dtoa_r+0x3d2>
 800dafe:	9f00      	ldr	r7, [sp, #0]
 800db00:	9e03      	ldr	r6, [sp, #12]
 800db02:	e794      	b.n	800da2e <_dtoa_r+0x40e>
 800db04:	9901      	ldr	r1, [sp, #4]
 800db06:	4b4c      	ldr	r3, [pc, #304]	; (800dc38 <_dtoa_r+0x618>)
 800db08:	4431      	add	r1, r6
 800db0a:	910d      	str	r1, [sp, #52]	; 0x34
 800db0c:	9908      	ldr	r1, [sp, #32]
 800db0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800db12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800db16:	2900      	cmp	r1, #0
 800db18:	d043      	beq.n	800dba2 <_dtoa_r+0x582>
 800db1a:	494d      	ldr	r1, [pc, #308]	; (800dc50 <_dtoa_r+0x630>)
 800db1c:	2000      	movs	r0, #0
 800db1e:	f7f2 fe9d 	bl	800085c <__aeabi_ddiv>
 800db22:	4652      	mov	r2, sl
 800db24:	465b      	mov	r3, fp
 800db26:	f7f2 fbb7 	bl	8000298 <__aeabi_dsub>
 800db2a:	9d01      	ldr	r5, [sp, #4]
 800db2c:	4682      	mov	sl, r0
 800db2e:	468b      	mov	fp, r1
 800db30:	4649      	mov	r1, r9
 800db32:	4640      	mov	r0, r8
 800db34:	f7f3 f818 	bl	8000b68 <__aeabi_d2iz>
 800db38:	4606      	mov	r6, r0
 800db3a:	f7f2 fcfb 	bl	8000534 <__aeabi_i2d>
 800db3e:	4602      	mov	r2, r0
 800db40:	460b      	mov	r3, r1
 800db42:	4640      	mov	r0, r8
 800db44:	4649      	mov	r1, r9
 800db46:	f7f2 fba7 	bl	8000298 <__aeabi_dsub>
 800db4a:	3630      	adds	r6, #48	; 0x30
 800db4c:	f805 6b01 	strb.w	r6, [r5], #1
 800db50:	4652      	mov	r2, sl
 800db52:	465b      	mov	r3, fp
 800db54:	4680      	mov	r8, r0
 800db56:	4689      	mov	r9, r1
 800db58:	f7f2 ffc8 	bl	8000aec <__aeabi_dcmplt>
 800db5c:	2800      	cmp	r0, #0
 800db5e:	d163      	bne.n	800dc28 <_dtoa_r+0x608>
 800db60:	4642      	mov	r2, r8
 800db62:	464b      	mov	r3, r9
 800db64:	4936      	ldr	r1, [pc, #216]	; (800dc40 <_dtoa_r+0x620>)
 800db66:	2000      	movs	r0, #0
 800db68:	f7f2 fb96 	bl	8000298 <__aeabi_dsub>
 800db6c:	4652      	mov	r2, sl
 800db6e:	465b      	mov	r3, fp
 800db70:	f7f2 ffbc 	bl	8000aec <__aeabi_dcmplt>
 800db74:	2800      	cmp	r0, #0
 800db76:	f040 80b5 	bne.w	800dce4 <_dtoa_r+0x6c4>
 800db7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db7c:	429d      	cmp	r5, r3
 800db7e:	d081      	beq.n	800da84 <_dtoa_r+0x464>
 800db80:	4b30      	ldr	r3, [pc, #192]	; (800dc44 <_dtoa_r+0x624>)
 800db82:	2200      	movs	r2, #0
 800db84:	4650      	mov	r0, sl
 800db86:	4659      	mov	r1, fp
 800db88:	f7f2 fd3e 	bl	8000608 <__aeabi_dmul>
 800db8c:	4b2d      	ldr	r3, [pc, #180]	; (800dc44 <_dtoa_r+0x624>)
 800db8e:	4682      	mov	sl, r0
 800db90:	468b      	mov	fp, r1
 800db92:	4640      	mov	r0, r8
 800db94:	4649      	mov	r1, r9
 800db96:	2200      	movs	r2, #0
 800db98:	f7f2 fd36 	bl	8000608 <__aeabi_dmul>
 800db9c:	4680      	mov	r8, r0
 800db9e:	4689      	mov	r9, r1
 800dba0:	e7c6      	b.n	800db30 <_dtoa_r+0x510>
 800dba2:	4650      	mov	r0, sl
 800dba4:	4659      	mov	r1, fp
 800dba6:	f7f2 fd2f 	bl	8000608 <__aeabi_dmul>
 800dbaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbac:	9d01      	ldr	r5, [sp, #4]
 800dbae:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbb0:	4682      	mov	sl, r0
 800dbb2:	468b      	mov	fp, r1
 800dbb4:	4649      	mov	r1, r9
 800dbb6:	4640      	mov	r0, r8
 800dbb8:	f7f2 ffd6 	bl	8000b68 <__aeabi_d2iz>
 800dbbc:	4606      	mov	r6, r0
 800dbbe:	f7f2 fcb9 	bl	8000534 <__aeabi_i2d>
 800dbc2:	3630      	adds	r6, #48	; 0x30
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	4640      	mov	r0, r8
 800dbca:	4649      	mov	r1, r9
 800dbcc:	f7f2 fb64 	bl	8000298 <__aeabi_dsub>
 800dbd0:	f805 6b01 	strb.w	r6, [r5], #1
 800dbd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbd6:	429d      	cmp	r5, r3
 800dbd8:	4680      	mov	r8, r0
 800dbda:	4689      	mov	r9, r1
 800dbdc:	f04f 0200 	mov.w	r2, #0
 800dbe0:	d124      	bne.n	800dc2c <_dtoa_r+0x60c>
 800dbe2:	4b1b      	ldr	r3, [pc, #108]	; (800dc50 <_dtoa_r+0x630>)
 800dbe4:	4650      	mov	r0, sl
 800dbe6:	4659      	mov	r1, fp
 800dbe8:	f7f2 fb58 	bl	800029c <__adddf3>
 800dbec:	4602      	mov	r2, r0
 800dbee:	460b      	mov	r3, r1
 800dbf0:	4640      	mov	r0, r8
 800dbf2:	4649      	mov	r1, r9
 800dbf4:	f7f2 ff98 	bl	8000b28 <__aeabi_dcmpgt>
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	d173      	bne.n	800dce4 <_dtoa_r+0x6c4>
 800dbfc:	4652      	mov	r2, sl
 800dbfe:	465b      	mov	r3, fp
 800dc00:	4913      	ldr	r1, [pc, #76]	; (800dc50 <_dtoa_r+0x630>)
 800dc02:	2000      	movs	r0, #0
 800dc04:	f7f2 fb48 	bl	8000298 <__aeabi_dsub>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	4640      	mov	r0, r8
 800dc0e:	4649      	mov	r1, r9
 800dc10:	f7f2 ff6c 	bl	8000aec <__aeabi_dcmplt>
 800dc14:	2800      	cmp	r0, #0
 800dc16:	f43f af35 	beq.w	800da84 <_dtoa_r+0x464>
 800dc1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dc1c:	1e6b      	subs	r3, r5, #1
 800dc1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc24:	2b30      	cmp	r3, #48	; 0x30
 800dc26:	d0f8      	beq.n	800dc1a <_dtoa_r+0x5fa>
 800dc28:	9700      	str	r7, [sp, #0]
 800dc2a:	e049      	b.n	800dcc0 <_dtoa_r+0x6a0>
 800dc2c:	4b05      	ldr	r3, [pc, #20]	; (800dc44 <_dtoa_r+0x624>)
 800dc2e:	f7f2 fceb 	bl	8000608 <__aeabi_dmul>
 800dc32:	4680      	mov	r8, r0
 800dc34:	4689      	mov	r9, r1
 800dc36:	e7bd      	b.n	800dbb4 <_dtoa_r+0x594>
 800dc38:	0800f5d8 	.word	0x0800f5d8
 800dc3c:	0800f5b0 	.word	0x0800f5b0
 800dc40:	3ff00000 	.word	0x3ff00000
 800dc44:	40240000 	.word	0x40240000
 800dc48:	401c0000 	.word	0x401c0000
 800dc4c:	40140000 	.word	0x40140000
 800dc50:	3fe00000 	.word	0x3fe00000
 800dc54:	9d01      	ldr	r5, [sp, #4]
 800dc56:	4656      	mov	r6, sl
 800dc58:	465f      	mov	r7, fp
 800dc5a:	4642      	mov	r2, r8
 800dc5c:	464b      	mov	r3, r9
 800dc5e:	4630      	mov	r0, r6
 800dc60:	4639      	mov	r1, r7
 800dc62:	f7f2 fdfb 	bl	800085c <__aeabi_ddiv>
 800dc66:	f7f2 ff7f 	bl	8000b68 <__aeabi_d2iz>
 800dc6a:	4682      	mov	sl, r0
 800dc6c:	f7f2 fc62 	bl	8000534 <__aeabi_i2d>
 800dc70:	4642      	mov	r2, r8
 800dc72:	464b      	mov	r3, r9
 800dc74:	f7f2 fcc8 	bl	8000608 <__aeabi_dmul>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	4639      	mov	r1, r7
 800dc80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dc84:	f7f2 fb08 	bl	8000298 <__aeabi_dsub>
 800dc88:	f805 6b01 	strb.w	r6, [r5], #1
 800dc8c:	9e01      	ldr	r6, [sp, #4]
 800dc8e:	9f03      	ldr	r7, [sp, #12]
 800dc90:	1bae      	subs	r6, r5, r6
 800dc92:	42b7      	cmp	r7, r6
 800dc94:	4602      	mov	r2, r0
 800dc96:	460b      	mov	r3, r1
 800dc98:	d135      	bne.n	800dd06 <_dtoa_r+0x6e6>
 800dc9a:	f7f2 faff 	bl	800029c <__adddf3>
 800dc9e:	4642      	mov	r2, r8
 800dca0:	464b      	mov	r3, r9
 800dca2:	4606      	mov	r6, r0
 800dca4:	460f      	mov	r7, r1
 800dca6:	f7f2 ff3f 	bl	8000b28 <__aeabi_dcmpgt>
 800dcaa:	b9d0      	cbnz	r0, 800dce2 <_dtoa_r+0x6c2>
 800dcac:	4642      	mov	r2, r8
 800dcae:	464b      	mov	r3, r9
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	4639      	mov	r1, r7
 800dcb4:	f7f2 ff10 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcb8:	b110      	cbz	r0, 800dcc0 <_dtoa_r+0x6a0>
 800dcba:	f01a 0f01 	tst.w	sl, #1
 800dcbe:	d110      	bne.n	800dce2 <_dtoa_r+0x6c2>
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	ee18 1a10 	vmov	r1, s16
 800dcc6:	f000 fae9 	bl	800e29c <_Bfree>
 800dcca:	2300      	movs	r3, #0
 800dccc:	9800      	ldr	r0, [sp, #0]
 800dcce:	702b      	strb	r3, [r5, #0]
 800dcd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcd2:	3001      	adds	r0, #1
 800dcd4:	6018      	str	r0, [r3, #0]
 800dcd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	f43f acf1 	beq.w	800d6c0 <_dtoa_r+0xa0>
 800dcde:	601d      	str	r5, [r3, #0]
 800dce0:	e4ee      	b.n	800d6c0 <_dtoa_r+0xa0>
 800dce2:	9f00      	ldr	r7, [sp, #0]
 800dce4:	462b      	mov	r3, r5
 800dce6:	461d      	mov	r5, r3
 800dce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcec:	2a39      	cmp	r2, #57	; 0x39
 800dcee:	d106      	bne.n	800dcfe <_dtoa_r+0x6de>
 800dcf0:	9a01      	ldr	r2, [sp, #4]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d1f7      	bne.n	800dce6 <_dtoa_r+0x6c6>
 800dcf6:	9901      	ldr	r1, [sp, #4]
 800dcf8:	2230      	movs	r2, #48	; 0x30
 800dcfa:	3701      	adds	r7, #1
 800dcfc:	700a      	strb	r2, [r1, #0]
 800dcfe:	781a      	ldrb	r2, [r3, #0]
 800dd00:	3201      	adds	r2, #1
 800dd02:	701a      	strb	r2, [r3, #0]
 800dd04:	e790      	b.n	800dc28 <_dtoa_r+0x608>
 800dd06:	4ba6      	ldr	r3, [pc, #664]	; (800dfa0 <_dtoa_r+0x980>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	f7f2 fc7d 	bl	8000608 <__aeabi_dmul>
 800dd0e:	2200      	movs	r2, #0
 800dd10:	2300      	movs	r3, #0
 800dd12:	4606      	mov	r6, r0
 800dd14:	460f      	mov	r7, r1
 800dd16:	f7f2 fedf 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd1a:	2800      	cmp	r0, #0
 800dd1c:	d09d      	beq.n	800dc5a <_dtoa_r+0x63a>
 800dd1e:	e7cf      	b.n	800dcc0 <_dtoa_r+0x6a0>
 800dd20:	9a08      	ldr	r2, [sp, #32]
 800dd22:	2a00      	cmp	r2, #0
 800dd24:	f000 80d7 	beq.w	800ded6 <_dtoa_r+0x8b6>
 800dd28:	9a06      	ldr	r2, [sp, #24]
 800dd2a:	2a01      	cmp	r2, #1
 800dd2c:	f300 80ba 	bgt.w	800dea4 <_dtoa_r+0x884>
 800dd30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd32:	2a00      	cmp	r2, #0
 800dd34:	f000 80b2 	beq.w	800de9c <_dtoa_r+0x87c>
 800dd38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dd3c:	9e07      	ldr	r6, [sp, #28]
 800dd3e:	9d04      	ldr	r5, [sp, #16]
 800dd40:	9a04      	ldr	r2, [sp, #16]
 800dd42:	441a      	add	r2, r3
 800dd44:	9204      	str	r2, [sp, #16]
 800dd46:	9a05      	ldr	r2, [sp, #20]
 800dd48:	2101      	movs	r1, #1
 800dd4a:	441a      	add	r2, r3
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	9205      	str	r2, [sp, #20]
 800dd50:	f000 fb5c 	bl	800e40c <__i2b>
 800dd54:	4607      	mov	r7, r0
 800dd56:	2d00      	cmp	r5, #0
 800dd58:	dd0c      	ble.n	800dd74 <_dtoa_r+0x754>
 800dd5a:	9b05      	ldr	r3, [sp, #20]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	dd09      	ble.n	800dd74 <_dtoa_r+0x754>
 800dd60:	42ab      	cmp	r3, r5
 800dd62:	9a04      	ldr	r2, [sp, #16]
 800dd64:	bfa8      	it	ge
 800dd66:	462b      	movge	r3, r5
 800dd68:	1ad2      	subs	r2, r2, r3
 800dd6a:	9204      	str	r2, [sp, #16]
 800dd6c:	9a05      	ldr	r2, [sp, #20]
 800dd6e:	1aed      	subs	r5, r5, r3
 800dd70:	1ad3      	subs	r3, r2, r3
 800dd72:	9305      	str	r3, [sp, #20]
 800dd74:	9b07      	ldr	r3, [sp, #28]
 800dd76:	b31b      	cbz	r3, 800ddc0 <_dtoa_r+0x7a0>
 800dd78:	9b08      	ldr	r3, [sp, #32]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	f000 80af 	beq.w	800dede <_dtoa_r+0x8be>
 800dd80:	2e00      	cmp	r6, #0
 800dd82:	dd13      	ble.n	800ddac <_dtoa_r+0x78c>
 800dd84:	4639      	mov	r1, r7
 800dd86:	4632      	mov	r2, r6
 800dd88:	4620      	mov	r0, r4
 800dd8a:	f000 fbff 	bl	800e58c <__pow5mult>
 800dd8e:	ee18 2a10 	vmov	r2, s16
 800dd92:	4601      	mov	r1, r0
 800dd94:	4607      	mov	r7, r0
 800dd96:	4620      	mov	r0, r4
 800dd98:	f000 fb4e 	bl	800e438 <__multiply>
 800dd9c:	ee18 1a10 	vmov	r1, s16
 800dda0:	4680      	mov	r8, r0
 800dda2:	4620      	mov	r0, r4
 800dda4:	f000 fa7a 	bl	800e29c <_Bfree>
 800dda8:	ee08 8a10 	vmov	s16, r8
 800ddac:	9b07      	ldr	r3, [sp, #28]
 800ddae:	1b9a      	subs	r2, r3, r6
 800ddb0:	d006      	beq.n	800ddc0 <_dtoa_r+0x7a0>
 800ddb2:	ee18 1a10 	vmov	r1, s16
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f000 fbe8 	bl	800e58c <__pow5mult>
 800ddbc:	ee08 0a10 	vmov	s16, r0
 800ddc0:	2101      	movs	r1, #1
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f000 fb22 	bl	800e40c <__i2b>
 800ddc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	4606      	mov	r6, r0
 800ddce:	f340 8088 	ble.w	800dee2 <_dtoa_r+0x8c2>
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	4601      	mov	r1, r0
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	f000 fbd8 	bl	800e58c <__pow5mult>
 800dddc:	9b06      	ldr	r3, [sp, #24]
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	4606      	mov	r6, r0
 800dde2:	f340 8081 	ble.w	800dee8 <_dtoa_r+0x8c8>
 800dde6:	f04f 0800 	mov.w	r8, #0
 800ddea:	6933      	ldr	r3, [r6, #16]
 800ddec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ddf0:	6918      	ldr	r0, [r3, #16]
 800ddf2:	f000 fabb 	bl	800e36c <__hi0bits>
 800ddf6:	f1c0 0020 	rsb	r0, r0, #32
 800ddfa:	9b05      	ldr	r3, [sp, #20]
 800ddfc:	4418      	add	r0, r3
 800ddfe:	f010 001f 	ands.w	r0, r0, #31
 800de02:	f000 8092 	beq.w	800df2a <_dtoa_r+0x90a>
 800de06:	f1c0 0320 	rsb	r3, r0, #32
 800de0a:	2b04      	cmp	r3, #4
 800de0c:	f340 808a 	ble.w	800df24 <_dtoa_r+0x904>
 800de10:	f1c0 001c 	rsb	r0, r0, #28
 800de14:	9b04      	ldr	r3, [sp, #16]
 800de16:	4403      	add	r3, r0
 800de18:	9304      	str	r3, [sp, #16]
 800de1a:	9b05      	ldr	r3, [sp, #20]
 800de1c:	4403      	add	r3, r0
 800de1e:	4405      	add	r5, r0
 800de20:	9305      	str	r3, [sp, #20]
 800de22:	9b04      	ldr	r3, [sp, #16]
 800de24:	2b00      	cmp	r3, #0
 800de26:	dd07      	ble.n	800de38 <_dtoa_r+0x818>
 800de28:	ee18 1a10 	vmov	r1, s16
 800de2c:	461a      	mov	r2, r3
 800de2e:	4620      	mov	r0, r4
 800de30:	f000 fc06 	bl	800e640 <__lshift>
 800de34:	ee08 0a10 	vmov	s16, r0
 800de38:	9b05      	ldr	r3, [sp, #20]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	dd05      	ble.n	800de4a <_dtoa_r+0x82a>
 800de3e:	4631      	mov	r1, r6
 800de40:	461a      	mov	r2, r3
 800de42:	4620      	mov	r0, r4
 800de44:	f000 fbfc 	bl	800e640 <__lshift>
 800de48:	4606      	mov	r6, r0
 800de4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d06e      	beq.n	800df2e <_dtoa_r+0x90e>
 800de50:	ee18 0a10 	vmov	r0, s16
 800de54:	4631      	mov	r1, r6
 800de56:	f000 fc63 	bl	800e720 <__mcmp>
 800de5a:	2800      	cmp	r0, #0
 800de5c:	da67      	bge.n	800df2e <_dtoa_r+0x90e>
 800de5e:	9b00      	ldr	r3, [sp, #0]
 800de60:	3b01      	subs	r3, #1
 800de62:	ee18 1a10 	vmov	r1, s16
 800de66:	9300      	str	r3, [sp, #0]
 800de68:	220a      	movs	r2, #10
 800de6a:	2300      	movs	r3, #0
 800de6c:	4620      	mov	r0, r4
 800de6e:	f000 fa37 	bl	800e2e0 <__multadd>
 800de72:	9b08      	ldr	r3, [sp, #32]
 800de74:	ee08 0a10 	vmov	s16, r0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	f000 81b1 	beq.w	800e1e0 <_dtoa_r+0xbc0>
 800de7e:	2300      	movs	r3, #0
 800de80:	4639      	mov	r1, r7
 800de82:	220a      	movs	r2, #10
 800de84:	4620      	mov	r0, r4
 800de86:	f000 fa2b 	bl	800e2e0 <__multadd>
 800de8a:	9b02      	ldr	r3, [sp, #8]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	4607      	mov	r7, r0
 800de90:	f300 808e 	bgt.w	800dfb0 <_dtoa_r+0x990>
 800de94:	9b06      	ldr	r3, [sp, #24]
 800de96:	2b02      	cmp	r3, #2
 800de98:	dc51      	bgt.n	800df3e <_dtoa_r+0x91e>
 800de9a:	e089      	b.n	800dfb0 <_dtoa_r+0x990>
 800de9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dea2:	e74b      	b.n	800dd3c <_dtoa_r+0x71c>
 800dea4:	9b03      	ldr	r3, [sp, #12]
 800dea6:	1e5e      	subs	r6, r3, #1
 800dea8:	9b07      	ldr	r3, [sp, #28]
 800deaa:	42b3      	cmp	r3, r6
 800deac:	bfbf      	itttt	lt
 800deae:	9b07      	ldrlt	r3, [sp, #28]
 800deb0:	9607      	strlt	r6, [sp, #28]
 800deb2:	1af2      	sublt	r2, r6, r3
 800deb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800deb6:	bfb6      	itet	lt
 800deb8:	189b      	addlt	r3, r3, r2
 800deba:	1b9e      	subge	r6, r3, r6
 800debc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800debe:	9b03      	ldr	r3, [sp, #12]
 800dec0:	bfb8      	it	lt
 800dec2:	2600      	movlt	r6, #0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	bfb7      	itett	lt
 800dec8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800decc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ded0:	1a9d      	sublt	r5, r3, r2
 800ded2:	2300      	movlt	r3, #0
 800ded4:	e734      	b.n	800dd40 <_dtoa_r+0x720>
 800ded6:	9e07      	ldr	r6, [sp, #28]
 800ded8:	9d04      	ldr	r5, [sp, #16]
 800deda:	9f08      	ldr	r7, [sp, #32]
 800dedc:	e73b      	b.n	800dd56 <_dtoa_r+0x736>
 800dede:	9a07      	ldr	r2, [sp, #28]
 800dee0:	e767      	b.n	800ddb2 <_dtoa_r+0x792>
 800dee2:	9b06      	ldr	r3, [sp, #24]
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	dc18      	bgt.n	800df1a <_dtoa_r+0x8fa>
 800dee8:	f1ba 0f00 	cmp.w	sl, #0
 800deec:	d115      	bne.n	800df1a <_dtoa_r+0x8fa>
 800deee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800def2:	b993      	cbnz	r3, 800df1a <_dtoa_r+0x8fa>
 800def4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800def8:	0d1b      	lsrs	r3, r3, #20
 800defa:	051b      	lsls	r3, r3, #20
 800defc:	b183      	cbz	r3, 800df20 <_dtoa_r+0x900>
 800defe:	9b04      	ldr	r3, [sp, #16]
 800df00:	3301      	adds	r3, #1
 800df02:	9304      	str	r3, [sp, #16]
 800df04:	9b05      	ldr	r3, [sp, #20]
 800df06:	3301      	adds	r3, #1
 800df08:	9305      	str	r3, [sp, #20]
 800df0a:	f04f 0801 	mov.w	r8, #1
 800df0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df10:	2b00      	cmp	r3, #0
 800df12:	f47f af6a 	bne.w	800ddea <_dtoa_r+0x7ca>
 800df16:	2001      	movs	r0, #1
 800df18:	e76f      	b.n	800ddfa <_dtoa_r+0x7da>
 800df1a:	f04f 0800 	mov.w	r8, #0
 800df1e:	e7f6      	b.n	800df0e <_dtoa_r+0x8ee>
 800df20:	4698      	mov	r8, r3
 800df22:	e7f4      	b.n	800df0e <_dtoa_r+0x8ee>
 800df24:	f43f af7d 	beq.w	800de22 <_dtoa_r+0x802>
 800df28:	4618      	mov	r0, r3
 800df2a:	301c      	adds	r0, #28
 800df2c:	e772      	b.n	800de14 <_dtoa_r+0x7f4>
 800df2e:	9b03      	ldr	r3, [sp, #12]
 800df30:	2b00      	cmp	r3, #0
 800df32:	dc37      	bgt.n	800dfa4 <_dtoa_r+0x984>
 800df34:	9b06      	ldr	r3, [sp, #24]
 800df36:	2b02      	cmp	r3, #2
 800df38:	dd34      	ble.n	800dfa4 <_dtoa_r+0x984>
 800df3a:	9b03      	ldr	r3, [sp, #12]
 800df3c:	9302      	str	r3, [sp, #8]
 800df3e:	9b02      	ldr	r3, [sp, #8]
 800df40:	b96b      	cbnz	r3, 800df5e <_dtoa_r+0x93e>
 800df42:	4631      	mov	r1, r6
 800df44:	2205      	movs	r2, #5
 800df46:	4620      	mov	r0, r4
 800df48:	f000 f9ca 	bl	800e2e0 <__multadd>
 800df4c:	4601      	mov	r1, r0
 800df4e:	4606      	mov	r6, r0
 800df50:	ee18 0a10 	vmov	r0, s16
 800df54:	f000 fbe4 	bl	800e720 <__mcmp>
 800df58:	2800      	cmp	r0, #0
 800df5a:	f73f adbb 	bgt.w	800dad4 <_dtoa_r+0x4b4>
 800df5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df60:	9d01      	ldr	r5, [sp, #4]
 800df62:	43db      	mvns	r3, r3
 800df64:	9300      	str	r3, [sp, #0]
 800df66:	f04f 0800 	mov.w	r8, #0
 800df6a:	4631      	mov	r1, r6
 800df6c:	4620      	mov	r0, r4
 800df6e:	f000 f995 	bl	800e29c <_Bfree>
 800df72:	2f00      	cmp	r7, #0
 800df74:	f43f aea4 	beq.w	800dcc0 <_dtoa_r+0x6a0>
 800df78:	f1b8 0f00 	cmp.w	r8, #0
 800df7c:	d005      	beq.n	800df8a <_dtoa_r+0x96a>
 800df7e:	45b8      	cmp	r8, r7
 800df80:	d003      	beq.n	800df8a <_dtoa_r+0x96a>
 800df82:	4641      	mov	r1, r8
 800df84:	4620      	mov	r0, r4
 800df86:	f000 f989 	bl	800e29c <_Bfree>
 800df8a:	4639      	mov	r1, r7
 800df8c:	4620      	mov	r0, r4
 800df8e:	f000 f985 	bl	800e29c <_Bfree>
 800df92:	e695      	b.n	800dcc0 <_dtoa_r+0x6a0>
 800df94:	2600      	movs	r6, #0
 800df96:	4637      	mov	r7, r6
 800df98:	e7e1      	b.n	800df5e <_dtoa_r+0x93e>
 800df9a:	9700      	str	r7, [sp, #0]
 800df9c:	4637      	mov	r7, r6
 800df9e:	e599      	b.n	800dad4 <_dtoa_r+0x4b4>
 800dfa0:	40240000 	.word	0x40240000
 800dfa4:	9b08      	ldr	r3, [sp, #32]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	f000 80ca 	beq.w	800e140 <_dtoa_r+0xb20>
 800dfac:	9b03      	ldr	r3, [sp, #12]
 800dfae:	9302      	str	r3, [sp, #8]
 800dfb0:	2d00      	cmp	r5, #0
 800dfb2:	dd05      	ble.n	800dfc0 <_dtoa_r+0x9a0>
 800dfb4:	4639      	mov	r1, r7
 800dfb6:	462a      	mov	r2, r5
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f000 fb41 	bl	800e640 <__lshift>
 800dfbe:	4607      	mov	r7, r0
 800dfc0:	f1b8 0f00 	cmp.w	r8, #0
 800dfc4:	d05b      	beq.n	800e07e <_dtoa_r+0xa5e>
 800dfc6:	6879      	ldr	r1, [r7, #4]
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f000 f927 	bl	800e21c <_Balloc>
 800dfce:	4605      	mov	r5, r0
 800dfd0:	b928      	cbnz	r0, 800dfde <_dtoa_r+0x9be>
 800dfd2:	4b87      	ldr	r3, [pc, #540]	; (800e1f0 <_dtoa_r+0xbd0>)
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dfda:	f7ff bb3b 	b.w	800d654 <_dtoa_r+0x34>
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	3202      	adds	r2, #2
 800dfe2:	0092      	lsls	r2, r2, #2
 800dfe4:	f107 010c 	add.w	r1, r7, #12
 800dfe8:	300c      	adds	r0, #12
 800dfea:	f7fe fcbd 	bl	800c968 <memcpy>
 800dfee:	2201      	movs	r2, #1
 800dff0:	4629      	mov	r1, r5
 800dff2:	4620      	mov	r0, r4
 800dff4:	f000 fb24 	bl	800e640 <__lshift>
 800dff8:	9b01      	ldr	r3, [sp, #4]
 800dffa:	f103 0901 	add.w	r9, r3, #1
 800dffe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e002:	4413      	add	r3, r2
 800e004:	9305      	str	r3, [sp, #20]
 800e006:	f00a 0301 	and.w	r3, sl, #1
 800e00a:	46b8      	mov	r8, r7
 800e00c:	9304      	str	r3, [sp, #16]
 800e00e:	4607      	mov	r7, r0
 800e010:	4631      	mov	r1, r6
 800e012:	ee18 0a10 	vmov	r0, s16
 800e016:	f7ff fa75 	bl	800d504 <quorem>
 800e01a:	4641      	mov	r1, r8
 800e01c:	9002      	str	r0, [sp, #8]
 800e01e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e022:	ee18 0a10 	vmov	r0, s16
 800e026:	f000 fb7b 	bl	800e720 <__mcmp>
 800e02a:	463a      	mov	r2, r7
 800e02c:	9003      	str	r0, [sp, #12]
 800e02e:	4631      	mov	r1, r6
 800e030:	4620      	mov	r0, r4
 800e032:	f000 fb91 	bl	800e758 <__mdiff>
 800e036:	68c2      	ldr	r2, [r0, #12]
 800e038:	f109 3bff 	add.w	fp, r9, #4294967295
 800e03c:	4605      	mov	r5, r0
 800e03e:	bb02      	cbnz	r2, 800e082 <_dtoa_r+0xa62>
 800e040:	4601      	mov	r1, r0
 800e042:	ee18 0a10 	vmov	r0, s16
 800e046:	f000 fb6b 	bl	800e720 <__mcmp>
 800e04a:	4602      	mov	r2, r0
 800e04c:	4629      	mov	r1, r5
 800e04e:	4620      	mov	r0, r4
 800e050:	9207      	str	r2, [sp, #28]
 800e052:	f000 f923 	bl	800e29c <_Bfree>
 800e056:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e05a:	ea43 0102 	orr.w	r1, r3, r2
 800e05e:	9b04      	ldr	r3, [sp, #16]
 800e060:	430b      	orrs	r3, r1
 800e062:	464d      	mov	r5, r9
 800e064:	d10f      	bne.n	800e086 <_dtoa_r+0xa66>
 800e066:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e06a:	d02a      	beq.n	800e0c2 <_dtoa_r+0xaa2>
 800e06c:	9b03      	ldr	r3, [sp, #12]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	dd02      	ble.n	800e078 <_dtoa_r+0xa58>
 800e072:	9b02      	ldr	r3, [sp, #8]
 800e074:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e078:	f88b a000 	strb.w	sl, [fp]
 800e07c:	e775      	b.n	800df6a <_dtoa_r+0x94a>
 800e07e:	4638      	mov	r0, r7
 800e080:	e7ba      	b.n	800dff8 <_dtoa_r+0x9d8>
 800e082:	2201      	movs	r2, #1
 800e084:	e7e2      	b.n	800e04c <_dtoa_r+0xa2c>
 800e086:	9b03      	ldr	r3, [sp, #12]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	db04      	blt.n	800e096 <_dtoa_r+0xa76>
 800e08c:	9906      	ldr	r1, [sp, #24]
 800e08e:	430b      	orrs	r3, r1
 800e090:	9904      	ldr	r1, [sp, #16]
 800e092:	430b      	orrs	r3, r1
 800e094:	d122      	bne.n	800e0dc <_dtoa_r+0xabc>
 800e096:	2a00      	cmp	r2, #0
 800e098:	ddee      	ble.n	800e078 <_dtoa_r+0xa58>
 800e09a:	ee18 1a10 	vmov	r1, s16
 800e09e:	2201      	movs	r2, #1
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f000 facd 	bl	800e640 <__lshift>
 800e0a6:	4631      	mov	r1, r6
 800e0a8:	ee08 0a10 	vmov	s16, r0
 800e0ac:	f000 fb38 	bl	800e720 <__mcmp>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	dc03      	bgt.n	800e0bc <_dtoa_r+0xa9c>
 800e0b4:	d1e0      	bne.n	800e078 <_dtoa_r+0xa58>
 800e0b6:	f01a 0f01 	tst.w	sl, #1
 800e0ba:	d0dd      	beq.n	800e078 <_dtoa_r+0xa58>
 800e0bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e0c0:	d1d7      	bne.n	800e072 <_dtoa_r+0xa52>
 800e0c2:	2339      	movs	r3, #57	; 0x39
 800e0c4:	f88b 3000 	strb.w	r3, [fp]
 800e0c8:	462b      	mov	r3, r5
 800e0ca:	461d      	mov	r5, r3
 800e0cc:	3b01      	subs	r3, #1
 800e0ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e0d2:	2a39      	cmp	r2, #57	; 0x39
 800e0d4:	d071      	beq.n	800e1ba <_dtoa_r+0xb9a>
 800e0d6:	3201      	adds	r2, #1
 800e0d8:	701a      	strb	r2, [r3, #0]
 800e0da:	e746      	b.n	800df6a <_dtoa_r+0x94a>
 800e0dc:	2a00      	cmp	r2, #0
 800e0de:	dd07      	ble.n	800e0f0 <_dtoa_r+0xad0>
 800e0e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e0e4:	d0ed      	beq.n	800e0c2 <_dtoa_r+0xaa2>
 800e0e6:	f10a 0301 	add.w	r3, sl, #1
 800e0ea:	f88b 3000 	strb.w	r3, [fp]
 800e0ee:	e73c      	b.n	800df6a <_dtoa_r+0x94a>
 800e0f0:	9b05      	ldr	r3, [sp, #20]
 800e0f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e0f6:	4599      	cmp	r9, r3
 800e0f8:	d047      	beq.n	800e18a <_dtoa_r+0xb6a>
 800e0fa:	ee18 1a10 	vmov	r1, s16
 800e0fe:	2300      	movs	r3, #0
 800e100:	220a      	movs	r2, #10
 800e102:	4620      	mov	r0, r4
 800e104:	f000 f8ec 	bl	800e2e0 <__multadd>
 800e108:	45b8      	cmp	r8, r7
 800e10a:	ee08 0a10 	vmov	s16, r0
 800e10e:	f04f 0300 	mov.w	r3, #0
 800e112:	f04f 020a 	mov.w	r2, #10
 800e116:	4641      	mov	r1, r8
 800e118:	4620      	mov	r0, r4
 800e11a:	d106      	bne.n	800e12a <_dtoa_r+0xb0a>
 800e11c:	f000 f8e0 	bl	800e2e0 <__multadd>
 800e120:	4680      	mov	r8, r0
 800e122:	4607      	mov	r7, r0
 800e124:	f109 0901 	add.w	r9, r9, #1
 800e128:	e772      	b.n	800e010 <_dtoa_r+0x9f0>
 800e12a:	f000 f8d9 	bl	800e2e0 <__multadd>
 800e12e:	4639      	mov	r1, r7
 800e130:	4680      	mov	r8, r0
 800e132:	2300      	movs	r3, #0
 800e134:	220a      	movs	r2, #10
 800e136:	4620      	mov	r0, r4
 800e138:	f000 f8d2 	bl	800e2e0 <__multadd>
 800e13c:	4607      	mov	r7, r0
 800e13e:	e7f1      	b.n	800e124 <_dtoa_r+0xb04>
 800e140:	9b03      	ldr	r3, [sp, #12]
 800e142:	9302      	str	r3, [sp, #8]
 800e144:	9d01      	ldr	r5, [sp, #4]
 800e146:	ee18 0a10 	vmov	r0, s16
 800e14a:	4631      	mov	r1, r6
 800e14c:	f7ff f9da 	bl	800d504 <quorem>
 800e150:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e154:	9b01      	ldr	r3, [sp, #4]
 800e156:	f805 ab01 	strb.w	sl, [r5], #1
 800e15a:	1aea      	subs	r2, r5, r3
 800e15c:	9b02      	ldr	r3, [sp, #8]
 800e15e:	4293      	cmp	r3, r2
 800e160:	dd09      	ble.n	800e176 <_dtoa_r+0xb56>
 800e162:	ee18 1a10 	vmov	r1, s16
 800e166:	2300      	movs	r3, #0
 800e168:	220a      	movs	r2, #10
 800e16a:	4620      	mov	r0, r4
 800e16c:	f000 f8b8 	bl	800e2e0 <__multadd>
 800e170:	ee08 0a10 	vmov	s16, r0
 800e174:	e7e7      	b.n	800e146 <_dtoa_r+0xb26>
 800e176:	9b02      	ldr	r3, [sp, #8]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	bfc8      	it	gt
 800e17c:	461d      	movgt	r5, r3
 800e17e:	9b01      	ldr	r3, [sp, #4]
 800e180:	bfd8      	it	le
 800e182:	2501      	movle	r5, #1
 800e184:	441d      	add	r5, r3
 800e186:	f04f 0800 	mov.w	r8, #0
 800e18a:	ee18 1a10 	vmov	r1, s16
 800e18e:	2201      	movs	r2, #1
 800e190:	4620      	mov	r0, r4
 800e192:	f000 fa55 	bl	800e640 <__lshift>
 800e196:	4631      	mov	r1, r6
 800e198:	ee08 0a10 	vmov	s16, r0
 800e19c:	f000 fac0 	bl	800e720 <__mcmp>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	dc91      	bgt.n	800e0c8 <_dtoa_r+0xaa8>
 800e1a4:	d102      	bne.n	800e1ac <_dtoa_r+0xb8c>
 800e1a6:	f01a 0f01 	tst.w	sl, #1
 800e1aa:	d18d      	bne.n	800e0c8 <_dtoa_r+0xaa8>
 800e1ac:	462b      	mov	r3, r5
 800e1ae:	461d      	mov	r5, r3
 800e1b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e1b4:	2a30      	cmp	r2, #48	; 0x30
 800e1b6:	d0fa      	beq.n	800e1ae <_dtoa_r+0xb8e>
 800e1b8:	e6d7      	b.n	800df6a <_dtoa_r+0x94a>
 800e1ba:	9a01      	ldr	r2, [sp, #4]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d184      	bne.n	800e0ca <_dtoa_r+0xaaa>
 800e1c0:	9b00      	ldr	r3, [sp, #0]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	2331      	movs	r3, #49	; 0x31
 800e1c8:	7013      	strb	r3, [r2, #0]
 800e1ca:	e6ce      	b.n	800df6a <_dtoa_r+0x94a>
 800e1cc:	4b09      	ldr	r3, [pc, #36]	; (800e1f4 <_dtoa_r+0xbd4>)
 800e1ce:	f7ff ba95 	b.w	800d6fc <_dtoa_r+0xdc>
 800e1d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	f47f aa6e 	bne.w	800d6b6 <_dtoa_r+0x96>
 800e1da:	4b07      	ldr	r3, [pc, #28]	; (800e1f8 <_dtoa_r+0xbd8>)
 800e1dc:	f7ff ba8e 	b.w	800d6fc <_dtoa_r+0xdc>
 800e1e0:	9b02      	ldr	r3, [sp, #8]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	dcae      	bgt.n	800e144 <_dtoa_r+0xb24>
 800e1e6:	9b06      	ldr	r3, [sp, #24]
 800e1e8:	2b02      	cmp	r3, #2
 800e1ea:	f73f aea8 	bgt.w	800df3e <_dtoa_r+0x91e>
 800e1ee:	e7a9      	b.n	800e144 <_dtoa_r+0xb24>
 800e1f0:	0800f53f 	.word	0x0800f53f
 800e1f4:	0800f49c 	.word	0x0800f49c
 800e1f8:	0800f4c0 	.word	0x0800f4c0

0800e1fc <_localeconv_r>:
 800e1fc:	4800      	ldr	r0, [pc, #0]	; (800e200 <_localeconv_r+0x4>)
 800e1fe:	4770      	bx	lr
 800e200:	20000160 	.word	0x20000160

0800e204 <__malloc_lock>:
 800e204:	4801      	ldr	r0, [pc, #4]	; (800e20c <__malloc_lock+0x8>)
 800e206:	f000 bbd4 	b.w	800e9b2 <__retarget_lock_acquire_recursive>
 800e20a:	bf00      	nop
 800e20c:	20001178 	.word	0x20001178

0800e210 <__malloc_unlock>:
 800e210:	4801      	ldr	r0, [pc, #4]	; (800e218 <__malloc_unlock+0x8>)
 800e212:	f000 bbcf 	b.w	800e9b4 <__retarget_lock_release_recursive>
 800e216:	bf00      	nop
 800e218:	20001178 	.word	0x20001178

0800e21c <_Balloc>:
 800e21c:	b570      	push	{r4, r5, r6, lr}
 800e21e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e220:	4604      	mov	r4, r0
 800e222:	460d      	mov	r5, r1
 800e224:	b976      	cbnz	r6, 800e244 <_Balloc+0x28>
 800e226:	2010      	movs	r0, #16
 800e228:	f7fe fb8e 	bl	800c948 <malloc>
 800e22c:	4602      	mov	r2, r0
 800e22e:	6260      	str	r0, [r4, #36]	; 0x24
 800e230:	b920      	cbnz	r0, 800e23c <_Balloc+0x20>
 800e232:	4b18      	ldr	r3, [pc, #96]	; (800e294 <_Balloc+0x78>)
 800e234:	4818      	ldr	r0, [pc, #96]	; (800e298 <_Balloc+0x7c>)
 800e236:	2166      	movs	r1, #102	; 0x66
 800e238:	f000 fb8a 	bl	800e950 <__assert_func>
 800e23c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e240:	6006      	str	r6, [r0, #0]
 800e242:	60c6      	str	r6, [r0, #12]
 800e244:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e246:	68f3      	ldr	r3, [r6, #12]
 800e248:	b183      	cbz	r3, 800e26c <_Balloc+0x50>
 800e24a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e24c:	68db      	ldr	r3, [r3, #12]
 800e24e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e252:	b9b8      	cbnz	r0, 800e284 <_Balloc+0x68>
 800e254:	2101      	movs	r1, #1
 800e256:	fa01 f605 	lsl.w	r6, r1, r5
 800e25a:	1d72      	adds	r2, r6, #5
 800e25c:	0092      	lsls	r2, r2, #2
 800e25e:	4620      	mov	r0, r4
 800e260:	f000 fb60 	bl	800e924 <_calloc_r>
 800e264:	b160      	cbz	r0, 800e280 <_Balloc+0x64>
 800e266:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e26a:	e00e      	b.n	800e28a <_Balloc+0x6e>
 800e26c:	2221      	movs	r2, #33	; 0x21
 800e26e:	2104      	movs	r1, #4
 800e270:	4620      	mov	r0, r4
 800e272:	f000 fb57 	bl	800e924 <_calloc_r>
 800e276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e278:	60f0      	str	r0, [r6, #12]
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d1e4      	bne.n	800e24a <_Balloc+0x2e>
 800e280:	2000      	movs	r0, #0
 800e282:	bd70      	pop	{r4, r5, r6, pc}
 800e284:	6802      	ldr	r2, [r0, #0]
 800e286:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e28a:	2300      	movs	r3, #0
 800e28c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e290:	e7f7      	b.n	800e282 <_Balloc+0x66>
 800e292:	bf00      	nop
 800e294:	0800f4cd 	.word	0x0800f4cd
 800e298:	0800f550 	.word	0x0800f550

0800e29c <_Bfree>:
 800e29c:	b570      	push	{r4, r5, r6, lr}
 800e29e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e2a0:	4605      	mov	r5, r0
 800e2a2:	460c      	mov	r4, r1
 800e2a4:	b976      	cbnz	r6, 800e2c4 <_Bfree+0x28>
 800e2a6:	2010      	movs	r0, #16
 800e2a8:	f7fe fb4e 	bl	800c948 <malloc>
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	6268      	str	r0, [r5, #36]	; 0x24
 800e2b0:	b920      	cbnz	r0, 800e2bc <_Bfree+0x20>
 800e2b2:	4b09      	ldr	r3, [pc, #36]	; (800e2d8 <_Bfree+0x3c>)
 800e2b4:	4809      	ldr	r0, [pc, #36]	; (800e2dc <_Bfree+0x40>)
 800e2b6:	218a      	movs	r1, #138	; 0x8a
 800e2b8:	f000 fb4a 	bl	800e950 <__assert_func>
 800e2bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2c0:	6006      	str	r6, [r0, #0]
 800e2c2:	60c6      	str	r6, [r0, #12]
 800e2c4:	b13c      	cbz	r4, 800e2d6 <_Bfree+0x3a>
 800e2c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e2c8:	6862      	ldr	r2, [r4, #4]
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e2d0:	6021      	str	r1, [r4, #0]
 800e2d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e2d6:	bd70      	pop	{r4, r5, r6, pc}
 800e2d8:	0800f4cd 	.word	0x0800f4cd
 800e2dc:	0800f550 	.word	0x0800f550

0800e2e0 <__multadd>:
 800e2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e4:	690d      	ldr	r5, [r1, #16]
 800e2e6:	4607      	mov	r7, r0
 800e2e8:	460c      	mov	r4, r1
 800e2ea:	461e      	mov	r6, r3
 800e2ec:	f101 0c14 	add.w	ip, r1, #20
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	f8dc 3000 	ldr.w	r3, [ip]
 800e2f6:	b299      	uxth	r1, r3
 800e2f8:	fb02 6101 	mla	r1, r2, r1, r6
 800e2fc:	0c1e      	lsrs	r6, r3, #16
 800e2fe:	0c0b      	lsrs	r3, r1, #16
 800e300:	fb02 3306 	mla	r3, r2, r6, r3
 800e304:	b289      	uxth	r1, r1
 800e306:	3001      	adds	r0, #1
 800e308:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e30c:	4285      	cmp	r5, r0
 800e30e:	f84c 1b04 	str.w	r1, [ip], #4
 800e312:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e316:	dcec      	bgt.n	800e2f2 <__multadd+0x12>
 800e318:	b30e      	cbz	r6, 800e35e <__multadd+0x7e>
 800e31a:	68a3      	ldr	r3, [r4, #8]
 800e31c:	42ab      	cmp	r3, r5
 800e31e:	dc19      	bgt.n	800e354 <__multadd+0x74>
 800e320:	6861      	ldr	r1, [r4, #4]
 800e322:	4638      	mov	r0, r7
 800e324:	3101      	adds	r1, #1
 800e326:	f7ff ff79 	bl	800e21c <_Balloc>
 800e32a:	4680      	mov	r8, r0
 800e32c:	b928      	cbnz	r0, 800e33a <__multadd+0x5a>
 800e32e:	4602      	mov	r2, r0
 800e330:	4b0c      	ldr	r3, [pc, #48]	; (800e364 <__multadd+0x84>)
 800e332:	480d      	ldr	r0, [pc, #52]	; (800e368 <__multadd+0x88>)
 800e334:	21b5      	movs	r1, #181	; 0xb5
 800e336:	f000 fb0b 	bl	800e950 <__assert_func>
 800e33a:	6922      	ldr	r2, [r4, #16]
 800e33c:	3202      	adds	r2, #2
 800e33e:	f104 010c 	add.w	r1, r4, #12
 800e342:	0092      	lsls	r2, r2, #2
 800e344:	300c      	adds	r0, #12
 800e346:	f7fe fb0f 	bl	800c968 <memcpy>
 800e34a:	4621      	mov	r1, r4
 800e34c:	4638      	mov	r0, r7
 800e34e:	f7ff ffa5 	bl	800e29c <_Bfree>
 800e352:	4644      	mov	r4, r8
 800e354:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e358:	3501      	adds	r5, #1
 800e35a:	615e      	str	r6, [r3, #20]
 800e35c:	6125      	str	r5, [r4, #16]
 800e35e:	4620      	mov	r0, r4
 800e360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e364:	0800f53f 	.word	0x0800f53f
 800e368:	0800f550 	.word	0x0800f550

0800e36c <__hi0bits>:
 800e36c:	0c03      	lsrs	r3, r0, #16
 800e36e:	041b      	lsls	r3, r3, #16
 800e370:	b9d3      	cbnz	r3, 800e3a8 <__hi0bits+0x3c>
 800e372:	0400      	lsls	r0, r0, #16
 800e374:	2310      	movs	r3, #16
 800e376:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e37a:	bf04      	itt	eq
 800e37c:	0200      	lsleq	r0, r0, #8
 800e37e:	3308      	addeq	r3, #8
 800e380:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e384:	bf04      	itt	eq
 800e386:	0100      	lsleq	r0, r0, #4
 800e388:	3304      	addeq	r3, #4
 800e38a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e38e:	bf04      	itt	eq
 800e390:	0080      	lsleq	r0, r0, #2
 800e392:	3302      	addeq	r3, #2
 800e394:	2800      	cmp	r0, #0
 800e396:	db05      	blt.n	800e3a4 <__hi0bits+0x38>
 800e398:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e39c:	f103 0301 	add.w	r3, r3, #1
 800e3a0:	bf08      	it	eq
 800e3a2:	2320      	moveq	r3, #32
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	4770      	bx	lr
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	e7e4      	b.n	800e376 <__hi0bits+0xa>

0800e3ac <__lo0bits>:
 800e3ac:	6803      	ldr	r3, [r0, #0]
 800e3ae:	f013 0207 	ands.w	r2, r3, #7
 800e3b2:	4601      	mov	r1, r0
 800e3b4:	d00b      	beq.n	800e3ce <__lo0bits+0x22>
 800e3b6:	07da      	lsls	r2, r3, #31
 800e3b8:	d423      	bmi.n	800e402 <__lo0bits+0x56>
 800e3ba:	0798      	lsls	r0, r3, #30
 800e3bc:	bf49      	itett	mi
 800e3be:	085b      	lsrmi	r3, r3, #1
 800e3c0:	089b      	lsrpl	r3, r3, #2
 800e3c2:	2001      	movmi	r0, #1
 800e3c4:	600b      	strmi	r3, [r1, #0]
 800e3c6:	bf5c      	itt	pl
 800e3c8:	600b      	strpl	r3, [r1, #0]
 800e3ca:	2002      	movpl	r0, #2
 800e3cc:	4770      	bx	lr
 800e3ce:	b298      	uxth	r0, r3
 800e3d0:	b9a8      	cbnz	r0, 800e3fe <__lo0bits+0x52>
 800e3d2:	0c1b      	lsrs	r3, r3, #16
 800e3d4:	2010      	movs	r0, #16
 800e3d6:	b2da      	uxtb	r2, r3
 800e3d8:	b90a      	cbnz	r2, 800e3de <__lo0bits+0x32>
 800e3da:	3008      	adds	r0, #8
 800e3dc:	0a1b      	lsrs	r3, r3, #8
 800e3de:	071a      	lsls	r2, r3, #28
 800e3e0:	bf04      	itt	eq
 800e3e2:	091b      	lsreq	r3, r3, #4
 800e3e4:	3004      	addeq	r0, #4
 800e3e6:	079a      	lsls	r2, r3, #30
 800e3e8:	bf04      	itt	eq
 800e3ea:	089b      	lsreq	r3, r3, #2
 800e3ec:	3002      	addeq	r0, #2
 800e3ee:	07da      	lsls	r2, r3, #31
 800e3f0:	d403      	bmi.n	800e3fa <__lo0bits+0x4e>
 800e3f2:	085b      	lsrs	r3, r3, #1
 800e3f4:	f100 0001 	add.w	r0, r0, #1
 800e3f8:	d005      	beq.n	800e406 <__lo0bits+0x5a>
 800e3fa:	600b      	str	r3, [r1, #0]
 800e3fc:	4770      	bx	lr
 800e3fe:	4610      	mov	r0, r2
 800e400:	e7e9      	b.n	800e3d6 <__lo0bits+0x2a>
 800e402:	2000      	movs	r0, #0
 800e404:	4770      	bx	lr
 800e406:	2020      	movs	r0, #32
 800e408:	4770      	bx	lr
	...

0800e40c <__i2b>:
 800e40c:	b510      	push	{r4, lr}
 800e40e:	460c      	mov	r4, r1
 800e410:	2101      	movs	r1, #1
 800e412:	f7ff ff03 	bl	800e21c <_Balloc>
 800e416:	4602      	mov	r2, r0
 800e418:	b928      	cbnz	r0, 800e426 <__i2b+0x1a>
 800e41a:	4b05      	ldr	r3, [pc, #20]	; (800e430 <__i2b+0x24>)
 800e41c:	4805      	ldr	r0, [pc, #20]	; (800e434 <__i2b+0x28>)
 800e41e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e422:	f000 fa95 	bl	800e950 <__assert_func>
 800e426:	2301      	movs	r3, #1
 800e428:	6144      	str	r4, [r0, #20]
 800e42a:	6103      	str	r3, [r0, #16]
 800e42c:	bd10      	pop	{r4, pc}
 800e42e:	bf00      	nop
 800e430:	0800f53f 	.word	0x0800f53f
 800e434:	0800f550 	.word	0x0800f550

0800e438 <__multiply>:
 800e438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43c:	4691      	mov	r9, r2
 800e43e:	690a      	ldr	r2, [r1, #16]
 800e440:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e444:	429a      	cmp	r2, r3
 800e446:	bfb8      	it	lt
 800e448:	460b      	movlt	r3, r1
 800e44a:	460c      	mov	r4, r1
 800e44c:	bfbc      	itt	lt
 800e44e:	464c      	movlt	r4, r9
 800e450:	4699      	movlt	r9, r3
 800e452:	6927      	ldr	r7, [r4, #16]
 800e454:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e458:	68a3      	ldr	r3, [r4, #8]
 800e45a:	6861      	ldr	r1, [r4, #4]
 800e45c:	eb07 060a 	add.w	r6, r7, sl
 800e460:	42b3      	cmp	r3, r6
 800e462:	b085      	sub	sp, #20
 800e464:	bfb8      	it	lt
 800e466:	3101      	addlt	r1, #1
 800e468:	f7ff fed8 	bl	800e21c <_Balloc>
 800e46c:	b930      	cbnz	r0, 800e47c <__multiply+0x44>
 800e46e:	4602      	mov	r2, r0
 800e470:	4b44      	ldr	r3, [pc, #272]	; (800e584 <__multiply+0x14c>)
 800e472:	4845      	ldr	r0, [pc, #276]	; (800e588 <__multiply+0x150>)
 800e474:	f240 115d 	movw	r1, #349	; 0x15d
 800e478:	f000 fa6a 	bl	800e950 <__assert_func>
 800e47c:	f100 0514 	add.w	r5, r0, #20
 800e480:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e484:	462b      	mov	r3, r5
 800e486:	2200      	movs	r2, #0
 800e488:	4543      	cmp	r3, r8
 800e48a:	d321      	bcc.n	800e4d0 <__multiply+0x98>
 800e48c:	f104 0314 	add.w	r3, r4, #20
 800e490:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e494:	f109 0314 	add.w	r3, r9, #20
 800e498:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e49c:	9202      	str	r2, [sp, #8]
 800e49e:	1b3a      	subs	r2, r7, r4
 800e4a0:	3a15      	subs	r2, #21
 800e4a2:	f022 0203 	bic.w	r2, r2, #3
 800e4a6:	3204      	adds	r2, #4
 800e4a8:	f104 0115 	add.w	r1, r4, #21
 800e4ac:	428f      	cmp	r7, r1
 800e4ae:	bf38      	it	cc
 800e4b0:	2204      	movcc	r2, #4
 800e4b2:	9201      	str	r2, [sp, #4]
 800e4b4:	9a02      	ldr	r2, [sp, #8]
 800e4b6:	9303      	str	r3, [sp, #12]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d80c      	bhi.n	800e4d6 <__multiply+0x9e>
 800e4bc:	2e00      	cmp	r6, #0
 800e4be:	dd03      	ble.n	800e4c8 <__multiply+0x90>
 800e4c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d05a      	beq.n	800e57e <__multiply+0x146>
 800e4c8:	6106      	str	r6, [r0, #16]
 800e4ca:	b005      	add	sp, #20
 800e4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d0:	f843 2b04 	str.w	r2, [r3], #4
 800e4d4:	e7d8      	b.n	800e488 <__multiply+0x50>
 800e4d6:	f8b3 a000 	ldrh.w	sl, [r3]
 800e4da:	f1ba 0f00 	cmp.w	sl, #0
 800e4de:	d024      	beq.n	800e52a <__multiply+0xf2>
 800e4e0:	f104 0e14 	add.w	lr, r4, #20
 800e4e4:	46a9      	mov	r9, r5
 800e4e6:	f04f 0c00 	mov.w	ip, #0
 800e4ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e4ee:	f8d9 1000 	ldr.w	r1, [r9]
 800e4f2:	fa1f fb82 	uxth.w	fp, r2
 800e4f6:	b289      	uxth	r1, r1
 800e4f8:	fb0a 110b 	mla	r1, sl, fp, r1
 800e4fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e500:	f8d9 2000 	ldr.w	r2, [r9]
 800e504:	4461      	add	r1, ip
 800e506:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e50a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e50e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e512:	b289      	uxth	r1, r1
 800e514:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e518:	4577      	cmp	r7, lr
 800e51a:	f849 1b04 	str.w	r1, [r9], #4
 800e51e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e522:	d8e2      	bhi.n	800e4ea <__multiply+0xb2>
 800e524:	9a01      	ldr	r2, [sp, #4]
 800e526:	f845 c002 	str.w	ip, [r5, r2]
 800e52a:	9a03      	ldr	r2, [sp, #12]
 800e52c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e530:	3304      	adds	r3, #4
 800e532:	f1b9 0f00 	cmp.w	r9, #0
 800e536:	d020      	beq.n	800e57a <__multiply+0x142>
 800e538:	6829      	ldr	r1, [r5, #0]
 800e53a:	f104 0c14 	add.w	ip, r4, #20
 800e53e:	46ae      	mov	lr, r5
 800e540:	f04f 0a00 	mov.w	sl, #0
 800e544:	f8bc b000 	ldrh.w	fp, [ip]
 800e548:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e54c:	fb09 220b 	mla	r2, r9, fp, r2
 800e550:	4492      	add	sl, r2
 800e552:	b289      	uxth	r1, r1
 800e554:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e558:	f84e 1b04 	str.w	r1, [lr], #4
 800e55c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e560:	f8be 1000 	ldrh.w	r1, [lr]
 800e564:	0c12      	lsrs	r2, r2, #16
 800e566:	fb09 1102 	mla	r1, r9, r2, r1
 800e56a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e56e:	4567      	cmp	r7, ip
 800e570:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e574:	d8e6      	bhi.n	800e544 <__multiply+0x10c>
 800e576:	9a01      	ldr	r2, [sp, #4]
 800e578:	50a9      	str	r1, [r5, r2]
 800e57a:	3504      	adds	r5, #4
 800e57c:	e79a      	b.n	800e4b4 <__multiply+0x7c>
 800e57e:	3e01      	subs	r6, #1
 800e580:	e79c      	b.n	800e4bc <__multiply+0x84>
 800e582:	bf00      	nop
 800e584:	0800f53f 	.word	0x0800f53f
 800e588:	0800f550 	.word	0x0800f550

0800e58c <__pow5mult>:
 800e58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e590:	4615      	mov	r5, r2
 800e592:	f012 0203 	ands.w	r2, r2, #3
 800e596:	4606      	mov	r6, r0
 800e598:	460f      	mov	r7, r1
 800e59a:	d007      	beq.n	800e5ac <__pow5mult+0x20>
 800e59c:	4c25      	ldr	r4, [pc, #148]	; (800e634 <__pow5mult+0xa8>)
 800e59e:	3a01      	subs	r2, #1
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e5a6:	f7ff fe9b 	bl	800e2e0 <__multadd>
 800e5aa:	4607      	mov	r7, r0
 800e5ac:	10ad      	asrs	r5, r5, #2
 800e5ae:	d03d      	beq.n	800e62c <__pow5mult+0xa0>
 800e5b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e5b2:	b97c      	cbnz	r4, 800e5d4 <__pow5mult+0x48>
 800e5b4:	2010      	movs	r0, #16
 800e5b6:	f7fe f9c7 	bl	800c948 <malloc>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	6270      	str	r0, [r6, #36]	; 0x24
 800e5be:	b928      	cbnz	r0, 800e5cc <__pow5mult+0x40>
 800e5c0:	4b1d      	ldr	r3, [pc, #116]	; (800e638 <__pow5mult+0xac>)
 800e5c2:	481e      	ldr	r0, [pc, #120]	; (800e63c <__pow5mult+0xb0>)
 800e5c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e5c8:	f000 f9c2 	bl	800e950 <__assert_func>
 800e5cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e5d0:	6004      	str	r4, [r0, #0]
 800e5d2:	60c4      	str	r4, [r0, #12]
 800e5d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e5d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e5dc:	b94c      	cbnz	r4, 800e5f2 <__pow5mult+0x66>
 800e5de:	f240 2171 	movw	r1, #625	; 0x271
 800e5e2:	4630      	mov	r0, r6
 800e5e4:	f7ff ff12 	bl	800e40c <__i2b>
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	6003      	str	r3, [r0, #0]
 800e5f2:	f04f 0900 	mov.w	r9, #0
 800e5f6:	07eb      	lsls	r3, r5, #31
 800e5f8:	d50a      	bpl.n	800e610 <__pow5mult+0x84>
 800e5fa:	4639      	mov	r1, r7
 800e5fc:	4622      	mov	r2, r4
 800e5fe:	4630      	mov	r0, r6
 800e600:	f7ff ff1a 	bl	800e438 <__multiply>
 800e604:	4639      	mov	r1, r7
 800e606:	4680      	mov	r8, r0
 800e608:	4630      	mov	r0, r6
 800e60a:	f7ff fe47 	bl	800e29c <_Bfree>
 800e60e:	4647      	mov	r7, r8
 800e610:	106d      	asrs	r5, r5, #1
 800e612:	d00b      	beq.n	800e62c <__pow5mult+0xa0>
 800e614:	6820      	ldr	r0, [r4, #0]
 800e616:	b938      	cbnz	r0, 800e628 <__pow5mult+0x9c>
 800e618:	4622      	mov	r2, r4
 800e61a:	4621      	mov	r1, r4
 800e61c:	4630      	mov	r0, r6
 800e61e:	f7ff ff0b 	bl	800e438 <__multiply>
 800e622:	6020      	str	r0, [r4, #0]
 800e624:	f8c0 9000 	str.w	r9, [r0]
 800e628:	4604      	mov	r4, r0
 800e62a:	e7e4      	b.n	800e5f6 <__pow5mult+0x6a>
 800e62c:	4638      	mov	r0, r7
 800e62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e632:	bf00      	nop
 800e634:	0800f6a0 	.word	0x0800f6a0
 800e638:	0800f4cd 	.word	0x0800f4cd
 800e63c:	0800f550 	.word	0x0800f550

0800e640 <__lshift>:
 800e640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e644:	460c      	mov	r4, r1
 800e646:	6849      	ldr	r1, [r1, #4]
 800e648:	6923      	ldr	r3, [r4, #16]
 800e64a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e64e:	68a3      	ldr	r3, [r4, #8]
 800e650:	4607      	mov	r7, r0
 800e652:	4691      	mov	r9, r2
 800e654:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e658:	f108 0601 	add.w	r6, r8, #1
 800e65c:	42b3      	cmp	r3, r6
 800e65e:	db0b      	blt.n	800e678 <__lshift+0x38>
 800e660:	4638      	mov	r0, r7
 800e662:	f7ff fddb 	bl	800e21c <_Balloc>
 800e666:	4605      	mov	r5, r0
 800e668:	b948      	cbnz	r0, 800e67e <__lshift+0x3e>
 800e66a:	4602      	mov	r2, r0
 800e66c:	4b2a      	ldr	r3, [pc, #168]	; (800e718 <__lshift+0xd8>)
 800e66e:	482b      	ldr	r0, [pc, #172]	; (800e71c <__lshift+0xdc>)
 800e670:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e674:	f000 f96c 	bl	800e950 <__assert_func>
 800e678:	3101      	adds	r1, #1
 800e67a:	005b      	lsls	r3, r3, #1
 800e67c:	e7ee      	b.n	800e65c <__lshift+0x1c>
 800e67e:	2300      	movs	r3, #0
 800e680:	f100 0114 	add.w	r1, r0, #20
 800e684:	f100 0210 	add.w	r2, r0, #16
 800e688:	4618      	mov	r0, r3
 800e68a:	4553      	cmp	r3, sl
 800e68c:	db37      	blt.n	800e6fe <__lshift+0xbe>
 800e68e:	6920      	ldr	r0, [r4, #16]
 800e690:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e694:	f104 0314 	add.w	r3, r4, #20
 800e698:	f019 091f 	ands.w	r9, r9, #31
 800e69c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e6a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e6a4:	d02f      	beq.n	800e706 <__lshift+0xc6>
 800e6a6:	f1c9 0e20 	rsb	lr, r9, #32
 800e6aa:	468a      	mov	sl, r1
 800e6ac:	f04f 0c00 	mov.w	ip, #0
 800e6b0:	681a      	ldr	r2, [r3, #0]
 800e6b2:	fa02 f209 	lsl.w	r2, r2, r9
 800e6b6:	ea42 020c 	orr.w	r2, r2, ip
 800e6ba:	f84a 2b04 	str.w	r2, [sl], #4
 800e6be:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6c2:	4298      	cmp	r0, r3
 800e6c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e6c8:	d8f2      	bhi.n	800e6b0 <__lshift+0x70>
 800e6ca:	1b03      	subs	r3, r0, r4
 800e6cc:	3b15      	subs	r3, #21
 800e6ce:	f023 0303 	bic.w	r3, r3, #3
 800e6d2:	3304      	adds	r3, #4
 800e6d4:	f104 0215 	add.w	r2, r4, #21
 800e6d8:	4290      	cmp	r0, r2
 800e6da:	bf38      	it	cc
 800e6dc:	2304      	movcc	r3, #4
 800e6de:	f841 c003 	str.w	ip, [r1, r3]
 800e6e2:	f1bc 0f00 	cmp.w	ip, #0
 800e6e6:	d001      	beq.n	800e6ec <__lshift+0xac>
 800e6e8:	f108 0602 	add.w	r6, r8, #2
 800e6ec:	3e01      	subs	r6, #1
 800e6ee:	4638      	mov	r0, r7
 800e6f0:	612e      	str	r6, [r5, #16]
 800e6f2:	4621      	mov	r1, r4
 800e6f4:	f7ff fdd2 	bl	800e29c <_Bfree>
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800e702:	3301      	adds	r3, #1
 800e704:	e7c1      	b.n	800e68a <__lshift+0x4a>
 800e706:	3904      	subs	r1, #4
 800e708:	f853 2b04 	ldr.w	r2, [r3], #4
 800e70c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e710:	4298      	cmp	r0, r3
 800e712:	d8f9      	bhi.n	800e708 <__lshift+0xc8>
 800e714:	e7ea      	b.n	800e6ec <__lshift+0xac>
 800e716:	bf00      	nop
 800e718:	0800f53f 	.word	0x0800f53f
 800e71c:	0800f550 	.word	0x0800f550

0800e720 <__mcmp>:
 800e720:	b530      	push	{r4, r5, lr}
 800e722:	6902      	ldr	r2, [r0, #16]
 800e724:	690c      	ldr	r4, [r1, #16]
 800e726:	1b12      	subs	r2, r2, r4
 800e728:	d10e      	bne.n	800e748 <__mcmp+0x28>
 800e72a:	f100 0314 	add.w	r3, r0, #20
 800e72e:	3114      	adds	r1, #20
 800e730:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e734:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e738:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e73c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e740:	42a5      	cmp	r5, r4
 800e742:	d003      	beq.n	800e74c <__mcmp+0x2c>
 800e744:	d305      	bcc.n	800e752 <__mcmp+0x32>
 800e746:	2201      	movs	r2, #1
 800e748:	4610      	mov	r0, r2
 800e74a:	bd30      	pop	{r4, r5, pc}
 800e74c:	4283      	cmp	r3, r0
 800e74e:	d3f3      	bcc.n	800e738 <__mcmp+0x18>
 800e750:	e7fa      	b.n	800e748 <__mcmp+0x28>
 800e752:	f04f 32ff 	mov.w	r2, #4294967295
 800e756:	e7f7      	b.n	800e748 <__mcmp+0x28>

0800e758 <__mdiff>:
 800e758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e75c:	460c      	mov	r4, r1
 800e75e:	4606      	mov	r6, r0
 800e760:	4611      	mov	r1, r2
 800e762:	4620      	mov	r0, r4
 800e764:	4690      	mov	r8, r2
 800e766:	f7ff ffdb 	bl	800e720 <__mcmp>
 800e76a:	1e05      	subs	r5, r0, #0
 800e76c:	d110      	bne.n	800e790 <__mdiff+0x38>
 800e76e:	4629      	mov	r1, r5
 800e770:	4630      	mov	r0, r6
 800e772:	f7ff fd53 	bl	800e21c <_Balloc>
 800e776:	b930      	cbnz	r0, 800e786 <__mdiff+0x2e>
 800e778:	4b3a      	ldr	r3, [pc, #232]	; (800e864 <__mdiff+0x10c>)
 800e77a:	4602      	mov	r2, r0
 800e77c:	f240 2132 	movw	r1, #562	; 0x232
 800e780:	4839      	ldr	r0, [pc, #228]	; (800e868 <__mdiff+0x110>)
 800e782:	f000 f8e5 	bl	800e950 <__assert_func>
 800e786:	2301      	movs	r3, #1
 800e788:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e78c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e790:	bfa4      	itt	ge
 800e792:	4643      	movge	r3, r8
 800e794:	46a0      	movge	r8, r4
 800e796:	4630      	mov	r0, r6
 800e798:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e79c:	bfa6      	itte	ge
 800e79e:	461c      	movge	r4, r3
 800e7a0:	2500      	movge	r5, #0
 800e7a2:	2501      	movlt	r5, #1
 800e7a4:	f7ff fd3a 	bl	800e21c <_Balloc>
 800e7a8:	b920      	cbnz	r0, 800e7b4 <__mdiff+0x5c>
 800e7aa:	4b2e      	ldr	r3, [pc, #184]	; (800e864 <__mdiff+0x10c>)
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e7b2:	e7e5      	b.n	800e780 <__mdiff+0x28>
 800e7b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e7b8:	6926      	ldr	r6, [r4, #16]
 800e7ba:	60c5      	str	r5, [r0, #12]
 800e7bc:	f104 0914 	add.w	r9, r4, #20
 800e7c0:	f108 0514 	add.w	r5, r8, #20
 800e7c4:	f100 0e14 	add.w	lr, r0, #20
 800e7c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e7cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e7d0:	f108 0210 	add.w	r2, r8, #16
 800e7d4:	46f2      	mov	sl, lr
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e7dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e7e0:	fa1f f883 	uxth.w	r8, r3
 800e7e4:	fa11 f18b 	uxtah	r1, r1, fp
 800e7e8:	0c1b      	lsrs	r3, r3, #16
 800e7ea:	eba1 0808 	sub.w	r8, r1, r8
 800e7ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e7f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e7f6:	fa1f f888 	uxth.w	r8, r8
 800e7fa:	1419      	asrs	r1, r3, #16
 800e7fc:	454e      	cmp	r6, r9
 800e7fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e802:	f84a 3b04 	str.w	r3, [sl], #4
 800e806:	d8e7      	bhi.n	800e7d8 <__mdiff+0x80>
 800e808:	1b33      	subs	r3, r6, r4
 800e80a:	3b15      	subs	r3, #21
 800e80c:	f023 0303 	bic.w	r3, r3, #3
 800e810:	3304      	adds	r3, #4
 800e812:	3415      	adds	r4, #21
 800e814:	42a6      	cmp	r6, r4
 800e816:	bf38      	it	cc
 800e818:	2304      	movcc	r3, #4
 800e81a:	441d      	add	r5, r3
 800e81c:	4473      	add	r3, lr
 800e81e:	469e      	mov	lr, r3
 800e820:	462e      	mov	r6, r5
 800e822:	4566      	cmp	r6, ip
 800e824:	d30e      	bcc.n	800e844 <__mdiff+0xec>
 800e826:	f10c 0203 	add.w	r2, ip, #3
 800e82a:	1b52      	subs	r2, r2, r5
 800e82c:	f022 0203 	bic.w	r2, r2, #3
 800e830:	3d03      	subs	r5, #3
 800e832:	45ac      	cmp	ip, r5
 800e834:	bf38      	it	cc
 800e836:	2200      	movcc	r2, #0
 800e838:	441a      	add	r2, r3
 800e83a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e83e:	b17b      	cbz	r3, 800e860 <__mdiff+0x108>
 800e840:	6107      	str	r7, [r0, #16]
 800e842:	e7a3      	b.n	800e78c <__mdiff+0x34>
 800e844:	f856 8b04 	ldr.w	r8, [r6], #4
 800e848:	fa11 f288 	uxtah	r2, r1, r8
 800e84c:	1414      	asrs	r4, r2, #16
 800e84e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e852:	b292      	uxth	r2, r2
 800e854:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e858:	f84e 2b04 	str.w	r2, [lr], #4
 800e85c:	1421      	asrs	r1, r4, #16
 800e85e:	e7e0      	b.n	800e822 <__mdiff+0xca>
 800e860:	3f01      	subs	r7, #1
 800e862:	e7ea      	b.n	800e83a <__mdiff+0xe2>
 800e864:	0800f53f 	.word	0x0800f53f
 800e868:	0800f550 	.word	0x0800f550

0800e86c <__d2b>:
 800e86c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e870:	4689      	mov	r9, r1
 800e872:	2101      	movs	r1, #1
 800e874:	ec57 6b10 	vmov	r6, r7, d0
 800e878:	4690      	mov	r8, r2
 800e87a:	f7ff fccf 	bl	800e21c <_Balloc>
 800e87e:	4604      	mov	r4, r0
 800e880:	b930      	cbnz	r0, 800e890 <__d2b+0x24>
 800e882:	4602      	mov	r2, r0
 800e884:	4b25      	ldr	r3, [pc, #148]	; (800e91c <__d2b+0xb0>)
 800e886:	4826      	ldr	r0, [pc, #152]	; (800e920 <__d2b+0xb4>)
 800e888:	f240 310a 	movw	r1, #778	; 0x30a
 800e88c:	f000 f860 	bl	800e950 <__assert_func>
 800e890:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e894:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e898:	bb35      	cbnz	r5, 800e8e8 <__d2b+0x7c>
 800e89a:	2e00      	cmp	r6, #0
 800e89c:	9301      	str	r3, [sp, #4]
 800e89e:	d028      	beq.n	800e8f2 <__d2b+0x86>
 800e8a0:	4668      	mov	r0, sp
 800e8a2:	9600      	str	r6, [sp, #0]
 800e8a4:	f7ff fd82 	bl	800e3ac <__lo0bits>
 800e8a8:	9900      	ldr	r1, [sp, #0]
 800e8aa:	b300      	cbz	r0, 800e8ee <__d2b+0x82>
 800e8ac:	9a01      	ldr	r2, [sp, #4]
 800e8ae:	f1c0 0320 	rsb	r3, r0, #32
 800e8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e8b6:	430b      	orrs	r3, r1
 800e8b8:	40c2      	lsrs	r2, r0
 800e8ba:	6163      	str	r3, [r4, #20]
 800e8bc:	9201      	str	r2, [sp, #4]
 800e8be:	9b01      	ldr	r3, [sp, #4]
 800e8c0:	61a3      	str	r3, [r4, #24]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	bf14      	ite	ne
 800e8c6:	2202      	movne	r2, #2
 800e8c8:	2201      	moveq	r2, #1
 800e8ca:	6122      	str	r2, [r4, #16]
 800e8cc:	b1d5      	cbz	r5, 800e904 <__d2b+0x98>
 800e8ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e8d2:	4405      	add	r5, r0
 800e8d4:	f8c9 5000 	str.w	r5, [r9]
 800e8d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e8dc:	f8c8 0000 	str.w	r0, [r8]
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	b003      	add	sp, #12
 800e8e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e8ec:	e7d5      	b.n	800e89a <__d2b+0x2e>
 800e8ee:	6161      	str	r1, [r4, #20]
 800e8f0:	e7e5      	b.n	800e8be <__d2b+0x52>
 800e8f2:	a801      	add	r0, sp, #4
 800e8f4:	f7ff fd5a 	bl	800e3ac <__lo0bits>
 800e8f8:	9b01      	ldr	r3, [sp, #4]
 800e8fa:	6163      	str	r3, [r4, #20]
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	6122      	str	r2, [r4, #16]
 800e900:	3020      	adds	r0, #32
 800e902:	e7e3      	b.n	800e8cc <__d2b+0x60>
 800e904:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e908:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e90c:	f8c9 0000 	str.w	r0, [r9]
 800e910:	6918      	ldr	r0, [r3, #16]
 800e912:	f7ff fd2b 	bl	800e36c <__hi0bits>
 800e916:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e91a:	e7df      	b.n	800e8dc <__d2b+0x70>
 800e91c:	0800f53f 	.word	0x0800f53f
 800e920:	0800f550 	.word	0x0800f550

0800e924 <_calloc_r>:
 800e924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e926:	fba1 2402 	umull	r2, r4, r1, r2
 800e92a:	b94c      	cbnz	r4, 800e940 <_calloc_r+0x1c>
 800e92c:	4611      	mov	r1, r2
 800e92e:	9201      	str	r2, [sp, #4]
 800e930:	f7fe f8b6 	bl	800caa0 <_malloc_r>
 800e934:	9a01      	ldr	r2, [sp, #4]
 800e936:	4605      	mov	r5, r0
 800e938:	b930      	cbnz	r0, 800e948 <_calloc_r+0x24>
 800e93a:	4628      	mov	r0, r5
 800e93c:	b003      	add	sp, #12
 800e93e:	bd30      	pop	{r4, r5, pc}
 800e940:	220c      	movs	r2, #12
 800e942:	6002      	str	r2, [r0, #0]
 800e944:	2500      	movs	r5, #0
 800e946:	e7f8      	b.n	800e93a <_calloc_r+0x16>
 800e948:	4621      	mov	r1, r4
 800e94a:	f7fe f835 	bl	800c9b8 <memset>
 800e94e:	e7f4      	b.n	800e93a <_calloc_r+0x16>

0800e950 <__assert_func>:
 800e950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e952:	4614      	mov	r4, r2
 800e954:	461a      	mov	r2, r3
 800e956:	4b09      	ldr	r3, [pc, #36]	; (800e97c <__assert_func+0x2c>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4605      	mov	r5, r0
 800e95c:	68d8      	ldr	r0, [r3, #12]
 800e95e:	b14c      	cbz	r4, 800e974 <__assert_func+0x24>
 800e960:	4b07      	ldr	r3, [pc, #28]	; (800e980 <__assert_func+0x30>)
 800e962:	9100      	str	r1, [sp, #0]
 800e964:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e968:	4906      	ldr	r1, [pc, #24]	; (800e984 <__assert_func+0x34>)
 800e96a:	462b      	mov	r3, r5
 800e96c:	f000 f80e 	bl	800e98c <fiprintf>
 800e970:	f7fd ffb8 	bl	800c8e4 <abort>
 800e974:	4b04      	ldr	r3, [pc, #16]	; (800e988 <__assert_func+0x38>)
 800e976:	461c      	mov	r4, r3
 800e978:	e7f3      	b.n	800e962 <__assert_func+0x12>
 800e97a:	bf00      	nop
 800e97c:	2000000c 	.word	0x2000000c
 800e980:	0800f6ac 	.word	0x0800f6ac
 800e984:	0800f6b9 	.word	0x0800f6b9
 800e988:	0800f6e7 	.word	0x0800f6e7

0800e98c <fiprintf>:
 800e98c:	b40e      	push	{r1, r2, r3}
 800e98e:	b503      	push	{r0, r1, lr}
 800e990:	4601      	mov	r1, r0
 800e992:	ab03      	add	r3, sp, #12
 800e994:	4805      	ldr	r0, [pc, #20]	; (800e9ac <fiprintf+0x20>)
 800e996:	f853 2b04 	ldr.w	r2, [r3], #4
 800e99a:	6800      	ldr	r0, [r0, #0]
 800e99c:	9301      	str	r3, [sp, #4]
 800e99e:	f000 f845 	bl	800ea2c <_vfiprintf_r>
 800e9a2:	b002      	add	sp, #8
 800e9a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9a8:	b003      	add	sp, #12
 800e9aa:	4770      	bx	lr
 800e9ac:	2000000c 	.word	0x2000000c

0800e9b0 <__retarget_lock_init_recursive>:
 800e9b0:	4770      	bx	lr

0800e9b2 <__retarget_lock_acquire_recursive>:
 800e9b2:	4770      	bx	lr

0800e9b4 <__retarget_lock_release_recursive>:
 800e9b4:	4770      	bx	lr

0800e9b6 <__ascii_mbtowc>:
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	b901      	cbnz	r1, 800e9bc <__ascii_mbtowc+0x6>
 800e9ba:	a901      	add	r1, sp, #4
 800e9bc:	b142      	cbz	r2, 800e9d0 <__ascii_mbtowc+0x1a>
 800e9be:	b14b      	cbz	r3, 800e9d4 <__ascii_mbtowc+0x1e>
 800e9c0:	7813      	ldrb	r3, [r2, #0]
 800e9c2:	600b      	str	r3, [r1, #0]
 800e9c4:	7812      	ldrb	r2, [r2, #0]
 800e9c6:	1e10      	subs	r0, r2, #0
 800e9c8:	bf18      	it	ne
 800e9ca:	2001      	movne	r0, #1
 800e9cc:	b002      	add	sp, #8
 800e9ce:	4770      	bx	lr
 800e9d0:	4610      	mov	r0, r2
 800e9d2:	e7fb      	b.n	800e9cc <__ascii_mbtowc+0x16>
 800e9d4:	f06f 0001 	mvn.w	r0, #1
 800e9d8:	e7f8      	b.n	800e9cc <__ascii_mbtowc+0x16>

0800e9da <__sfputc_r>:
 800e9da:	6893      	ldr	r3, [r2, #8]
 800e9dc:	3b01      	subs	r3, #1
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	b410      	push	{r4}
 800e9e2:	6093      	str	r3, [r2, #8]
 800e9e4:	da08      	bge.n	800e9f8 <__sfputc_r+0x1e>
 800e9e6:	6994      	ldr	r4, [r2, #24]
 800e9e8:	42a3      	cmp	r3, r4
 800e9ea:	db01      	blt.n	800e9f0 <__sfputc_r+0x16>
 800e9ec:	290a      	cmp	r1, #10
 800e9ee:	d103      	bne.n	800e9f8 <__sfputc_r+0x1e>
 800e9f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9f4:	f000 b94a 	b.w	800ec8c <__swbuf_r>
 800e9f8:	6813      	ldr	r3, [r2, #0]
 800e9fa:	1c58      	adds	r0, r3, #1
 800e9fc:	6010      	str	r0, [r2, #0]
 800e9fe:	7019      	strb	r1, [r3, #0]
 800ea00:	4608      	mov	r0, r1
 800ea02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea06:	4770      	bx	lr

0800ea08 <__sfputs_r>:
 800ea08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea0a:	4606      	mov	r6, r0
 800ea0c:	460f      	mov	r7, r1
 800ea0e:	4614      	mov	r4, r2
 800ea10:	18d5      	adds	r5, r2, r3
 800ea12:	42ac      	cmp	r4, r5
 800ea14:	d101      	bne.n	800ea1a <__sfputs_r+0x12>
 800ea16:	2000      	movs	r0, #0
 800ea18:	e007      	b.n	800ea2a <__sfputs_r+0x22>
 800ea1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea1e:	463a      	mov	r2, r7
 800ea20:	4630      	mov	r0, r6
 800ea22:	f7ff ffda 	bl	800e9da <__sfputc_r>
 800ea26:	1c43      	adds	r3, r0, #1
 800ea28:	d1f3      	bne.n	800ea12 <__sfputs_r+0xa>
 800ea2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ea2c <_vfiprintf_r>:
 800ea2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea30:	460d      	mov	r5, r1
 800ea32:	b09d      	sub	sp, #116	; 0x74
 800ea34:	4614      	mov	r4, r2
 800ea36:	4698      	mov	r8, r3
 800ea38:	4606      	mov	r6, r0
 800ea3a:	b118      	cbz	r0, 800ea44 <_vfiprintf_r+0x18>
 800ea3c:	6983      	ldr	r3, [r0, #24]
 800ea3e:	b90b      	cbnz	r3, 800ea44 <_vfiprintf_r+0x18>
 800ea40:	f000 fb0c 	bl	800f05c <__sinit>
 800ea44:	4b89      	ldr	r3, [pc, #548]	; (800ec6c <_vfiprintf_r+0x240>)
 800ea46:	429d      	cmp	r5, r3
 800ea48:	d11b      	bne.n	800ea82 <_vfiprintf_r+0x56>
 800ea4a:	6875      	ldr	r5, [r6, #4]
 800ea4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea4e:	07d9      	lsls	r1, r3, #31
 800ea50:	d405      	bmi.n	800ea5e <_vfiprintf_r+0x32>
 800ea52:	89ab      	ldrh	r3, [r5, #12]
 800ea54:	059a      	lsls	r2, r3, #22
 800ea56:	d402      	bmi.n	800ea5e <_vfiprintf_r+0x32>
 800ea58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea5a:	f7ff ffaa 	bl	800e9b2 <__retarget_lock_acquire_recursive>
 800ea5e:	89ab      	ldrh	r3, [r5, #12]
 800ea60:	071b      	lsls	r3, r3, #28
 800ea62:	d501      	bpl.n	800ea68 <_vfiprintf_r+0x3c>
 800ea64:	692b      	ldr	r3, [r5, #16]
 800ea66:	b9eb      	cbnz	r3, 800eaa4 <_vfiprintf_r+0x78>
 800ea68:	4629      	mov	r1, r5
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	f000 f96e 	bl	800ed4c <__swsetup_r>
 800ea70:	b1c0      	cbz	r0, 800eaa4 <_vfiprintf_r+0x78>
 800ea72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea74:	07dc      	lsls	r4, r3, #31
 800ea76:	d50e      	bpl.n	800ea96 <_vfiprintf_r+0x6a>
 800ea78:	f04f 30ff 	mov.w	r0, #4294967295
 800ea7c:	b01d      	add	sp, #116	; 0x74
 800ea7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea82:	4b7b      	ldr	r3, [pc, #492]	; (800ec70 <_vfiprintf_r+0x244>)
 800ea84:	429d      	cmp	r5, r3
 800ea86:	d101      	bne.n	800ea8c <_vfiprintf_r+0x60>
 800ea88:	68b5      	ldr	r5, [r6, #8]
 800ea8a:	e7df      	b.n	800ea4c <_vfiprintf_r+0x20>
 800ea8c:	4b79      	ldr	r3, [pc, #484]	; (800ec74 <_vfiprintf_r+0x248>)
 800ea8e:	429d      	cmp	r5, r3
 800ea90:	bf08      	it	eq
 800ea92:	68f5      	ldreq	r5, [r6, #12]
 800ea94:	e7da      	b.n	800ea4c <_vfiprintf_r+0x20>
 800ea96:	89ab      	ldrh	r3, [r5, #12]
 800ea98:	0598      	lsls	r0, r3, #22
 800ea9a:	d4ed      	bmi.n	800ea78 <_vfiprintf_r+0x4c>
 800ea9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea9e:	f7ff ff89 	bl	800e9b4 <__retarget_lock_release_recursive>
 800eaa2:	e7e9      	b.n	800ea78 <_vfiprintf_r+0x4c>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	9309      	str	r3, [sp, #36]	; 0x24
 800eaa8:	2320      	movs	r3, #32
 800eaaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eaae:	f8cd 800c 	str.w	r8, [sp, #12]
 800eab2:	2330      	movs	r3, #48	; 0x30
 800eab4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ec78 <_vfiprintf_r+0x24c>
 800eab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eabc:	f04f 0901 	mov.w	r9, #1
 800eac0:	4623      	mov	r3, r4
 800eac2:	469a      	mov	sl, r3
 800eac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eac8:	b10a      	cbz	r2, 800eace <_vfiprintf_r+0xa2>
 800eaca:	2a25      	cmp	r2, #37	; 0x25
 800eacc:	d1f9      	bne.n	800eac2 <_vfiprintf_r+0x96>
 800eace:	ebba 0b04 	subs.w	fp, sl, r4
 800ead2:	d00b      	beq.n	800eaec <_vfiprintf_r+0xc0>
 800ead4:	465b      	mov	r3, fp
 800ead6:	4622      	mov	r2, r4
 800ead8:	4629      	mov	r1, r5
 800eada:	4630      	mov	r0, r6
 800eadc:	f7ff ff94 	bl	800ea08 <__sfputs_r>
 800eae0:	3001      	adds	r0, #1
 800eae2:	f000 80aa 	beq.w	800ec3a <_vfiprintf_r+0x20e>
 800eae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eae8:	445a      	add	r2, fp
 800eaea:	9209      	str	r2, [sp, #36]	; 0x24
 800eaec:	f89a 3000 	ldrb.w	r3, [sl]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	f000 80a2 	beq.w	800ec3a <_vfiprintf_r+0x20e>
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	f04f 32ff 	mov.w	r2, #4294967295
 800eafc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb00:	f10a 0a01 	add.w	sl, sl, #1
 800eb04:	9304      	str	r3, [sp, #16]
 800eb06:	9307      	str	r3, [sp, #28]
 800eb08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb0c:	931a      	str	r3, [sp, #104]	; 0x68
 800eb0e:	4654      	mov	r4, sl
 800eb10:	2205      	movs	r2, #5
 800eb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb16:	4858      	ldr	r0, [pc, #352]	; (800ec78 <_vfiprintf_r+0x24c>)
 800eb18:	f7f1 fb6a 	bl	80001f0 <memchr>
 800eb1c:	9a04      	ldr	r2, [sp, #16]
 800eb1e:	b9d8      	cbnz	r0, 800eb58 <_vfiprintf_r+0x12c>
 800eb20:	06d1      	lsls	r1, r2, #27
 800eb22:	bf44      	itt	mi
 800eb24:	2320      	movmi	r3, #32
 800eb26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb2a:	0713      	lsls	r3, r2, #28
 800eb2c:	bf44      	itt	mi
 800eb2e:	232b      	movmi	r3, #43	; 0x2b
 800eb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb34:	f89a 3000 	ldrb.w	r3, [sl]
 800eb38:	2b2a      	cmp	r3, #42	; 0x2a
 800eb3a:	d015      	beq.n	800eb68 <_vfiprintf_r+0x13c>
 800eb3c:	9a07      	ldr	r2, [sp, #28]
 800eb3e:	4654      	mov	r4, sl
 800eb40:	2000      	movs	r0, #0
 800eb42:	f04f 0c0a 	mov.w	ip, #10
 800eb46:	4621      	mov	r1, r4
 800eb48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb4c:	3b30      	subs	r3, #48	; 0x30
 800eb4e:	2b09      	cmp	r3, #9
 800eb50:	d94e      	bls.n	800ebf0 <_vfiprintf_r+0x1c4>
 800eb52:	b1b0      	cbz	r0, 800eb82 <_vfiprintf_r+0x156>
 800eb54:	9207      	str	r2, [sp, #28]
 800eb56:	e014      	b.n	800eb82 <_vfiprintf_r+0x156>
 800eb58:	eba0 0308 	sub.w	r3, r0, r8
 800eb5c:	fa09 f303 	lsl.w	r3, r9, r3
 800eb60:	4313      	orrs	r3, r2
 800eb62:	9304      	str	r3, [sp, #16]
 800eb64:	46a2      	mov	sl, r4
 800eb66:	e7d2      	b.n	800eb0e <_vfiprintf_r+0xe2>
 800eb68:	9b03      	ldr	r3, [sp, #12]
 800eb6a:	1d19      	adds	r1, r3, #4
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	9103      	str	r1, [sp, #12]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	bfbb      	ittet	lt
 800eb74:	425b      	neglt	r3, r3
 800eb76:	f042 0202 	orrlt.w	r2, r2, #2
 800eb7a:	9307      	strge	r3, [sp, #28]
 800eb7c:	9307      	strlt	r3, [sp, #28]
 800eb7e:	bfb8      	it	lt
 800eb80:	9204      	strlt	r2, [sp, #16]
 800eb82:	7823      	ldrb	r3, [r4, #0]
 800eb84:	2b2e      	cmp	r3, #46	; 0x2e
 800eb86:	d10c      	bne.n	800eba2 <_vfiprintf_r+0x176>
 800eb88:	7863      	ldrb	r3, [r4, #1]
 800eb8a:	2b2a      	cmp	r3, #42	; 0x2a
 800eb8c:	d135      	bne.n	800ebfa <_vfiprintf_r+0x1ce>
 800eb8e:	9b03      	ldr	r3, [sp, #12]
 800eb90:	1d1a      	adds	r2, r3, #4
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	9203      	str	r2, [sp, #12]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	bfb8      	it	lt
 800eb9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb9e:	3402      	adds	r4, #2
 800eba0:	9305      	str	r3, [sp, #20]
 800eba2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ec88 <_vfiprintf_r+0x25c>
 800eba6:	7821      	ldrb	r1, [r4, #0]
 800eba8:	2203      	movs	r2, #3
 800ebaa:	4650      	mov	r0, sl
 800ebac:	f7f1 fb20 	bl	80001f0 <memchr>
 800ebb0:	b140      	cbz	r0, 800ebc4 <_vfiprintf_r+0x198>
 800ebb2:	2340      	movs	r3, #64	; 0x40
 800ebb4:	eba0 000a 	sub.w	r0, r0, sl
 800ebb8:	fa03 f000 	lsl.w	r0, r3, r0
 800ebbc:	9b04      	ldr	r3, [sp, #16]
 800ebbe:	4303      	orrs	r3, r0
 800ebc0:	3401      	adds	r4, #1
 800ebc2:	9304      	str	r3, [sp, #16]
 800ebc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebc8:	482c      	ldr	r0, [pc, #176]	; (800ec7c <_vfiprintf_r+0x250>)
 800ebca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebce:	2206      	movs	r2, #6
 800ebd0:	f7f1 fb0e 	bl	80001f0 <memchr>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	d03f      	beq.n	800ec58 <_vfiprintf_r+0x22c>
 800ebd8:	4b29      	ldr	r3, [pc, #164]	; (800ec80 <_vfiprintf_r+0x254>)
 800ebda:	bb1b      	cbnz	r3, 800ec24 <_vfiprintf_r+0x1f8>
 800ebdc:	9b03      	ldr	r3, [sp, #12]
 800ebde:	3307      	adds	r3, #7
 800ebe0:	f023 0307 	bic.w	r3, r3, #7
 800ebe4:	3308      	adds	r3, #8
 800ebe6:	9303      	str	r3, [sp, #12]
 800ebe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebea:	443b      	add	r3, r7
 800ebec:	9309      	str	r3, [sp, #36]	; 0x24
 800ebee:	e767      	b.n	800eac0 <_vfiprintf_r+0x94>
 800ebf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebf4:	460c      	mov	r4, r1
 800ebf6:	2001      	movs	r0, #1
 800ebf8:	e7a5      	b.n	800eb46 <_vfiprintf_r+0x11a>
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	3401      	adds	r4, #1
 800ebfe:	9305      	str	r3, [sp, #20]
 800ec00:	4619      	mov	r1, r3
 800ec02:	f04f 0c0a 	mov.w	ip, #10
 800ec06:	4620      	mov	r0, r4
 800ec08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec0c:	3a30      	subs	r2, #48	; 0x30
 800ec0e:	2a09      	cmp	r2, #9
 800ec10:	d903      	bls.n	800ec1a <_vfiprintf_r+0x1ee>
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d0c5      	beq.n	800eba2 <_vfiprintf_r+0x176>
 800ec16:	9105      	str	r1, [sp, #20]
 800ec18:	e7c3      	b.n	800eba2 <_vfiprintf_r+0x176>
 800ec1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec1e:	4604      	mov	r4, r0
 800ec20:	2301      	movs	r3, #1
 800ec22:	e7f0      	b.n	800ec06 <_vfiprintf_r+0x1da>
 800ec24:	ab03      	add	r3, sp, #12
 800ec26:	9300      	str	r3, [sp, #0]
 800ec28:	462a      	mov	r2, r5
 800ec2a:	4b16      	ldr	r3, [pc, #88]	; (800ec84 <_vfiprintf_r+0x258>)
 800ec2c:	a904      	add	r1, sp, #16
 800ec2e:	4630      	mov	r0, r6
 800ec30:	f7fe f84a 	bl	800ccc8 <_printf_float>
 800ec34:	4607      	mov	r7, r0
 800ec36:	1c78      	adds	r0, r7, #1
 800ec38:	d1d6      	bne.n	800ebe8 <_vfiprintf_r+0x1bc>
 800ec3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec3c:	07d9      	lsls	r1, r3, #31
 800ec3e:	d405      	bmi.n	800ec4c <_vfiprintf_r+0x220>
 800ec40:	89ab      	ldrh	r3, [r5, #12]
 800ec42:	059a      	lsls	r2, r3, #22
 800ec44:	d402      	bmi.n	800ec4c <_vfiprintf_r+0x220>
 800ec46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec48:	f7ff feb4 	bl	800e9b4 <__retarget_lock_release_recursive>
 800ec4c:	89ab      	ldrh	r3, [r5, #12]
 800ec4e:	065b      	lsls	r3, r3, #25
 800ec50:	f53f af12 	bmi.w	800ea78 <_vfiprintf_r+0x4c>
 800ec54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec56:	e711      	b.n	800ea7c <_vfiprintf_r+0x50>
 800ec58:	ab03      	add	r3, sp, #12
 800ec5a:	9300      	str	r3, [sp, #0]
 800ec5c:	462a      	mov	r2, r5
 800ec5e:	4b09      	ldr	r3, [pc, #36]	; (800ec84 <_vfiprintf_r+0x258>)
 800ec60:	a904      	add	r1, sp, #16
 800ec62:	4630      	mov	r0, r6
 800ec64:	f7fe fad4 	bl	800d210 <_printf_i>
 800ec68:	e7e4      	b.n	800ec34 <_vfiprintf_r+0x208>
 800ec6a:	bf00      	nop
 800ec6c:	0800f824 	.word	0x0800f824
 800ec70:	0800f844 	.word	0x0800f844
 800ec74:	0800f804 	.word	0x0800f804
 800ec78:	0800f6f2 	.word	0x0800f6f2
 800ec7c:	0800f6fc 	.word	0x0800f6fc
 800ec80:	0800ccc9 	.word	0x0800ccc9
 800ec84:	0800ea09 	.word	0x0800ea09
 800ec88:	0800f6f8 	.word	0x0800f6f8

0800ec8c <__swbuf_r>:
 800ec8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec8e:	460e      	mov	r6, r1
 800ec90:	4614      	mov	r4, r2
 800ec92:	4605      	mov	r5, r0
 800ec94:	b118      	cbz	r0, 800ec9e <__swbuf_r+0x12>
 800ec96:	6983      	ldr	r3, [r0, #24]
 800ec98:	b90b      	cbnz	r3, 800ec9e <__swbuf_r+0x12>
 800ec9a:	f000 f9df 	bl	800f05c <__sinit>
 800ec9e:	4b21      	ldr	r3, [pc, #132]	; (800ed24 <__swbuf_r+0x98>)
 800eca0:	429c      	cmp	r4, r3
 800eca2:	d12b      	bne.n	800ecfc <__swbuf_r+0x70>
 800eca4:	686c      	ldr	r4, [r5, #4]
 800eca6:	69a3      	ldr	r3, [r4, #24]
 800eca8:	60a3      	str	r3, [r4, #8]
 800ecaa:	89a3      	ldrh	r3, [r4, #12]
 800ecac:	071a      	lsls	r2, r3, #28
 800ecae:	d52f      	bpl.n	800ed10 <__swbuf_r+0x84>
 800ecb0:	6923      	ldr	r3, [r4, #16]
 800ecb2:	b36b      	cbz	r3, 800ed10 <__swbuf_r+0x84>
 800ecb4:	6923      	ldr	r3, [r4, #16]
 800ecb6:	6820      	ldr	r0, [r4, #0]
 800ecb8:	1ac0      	subs	r0, r0, r3
 800ecba:	6963      	ldr	r3, [r4, #20]
 800ecbc:	b2f6      	uxtb	r6, r6
 800ecbe:	4283      	cmp	r3, r0
 800ecc0:	4637      	mov	r7, r6
 800ecc2:	dc04      	bgt.n	800ecce <__swbuf_r+0x42>
 800ecc4:	4621      	mov	r1, r4
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	f000 f934 	bl	800ef34 <_fflush_r>
 800eccc:	bb30      	cbnz	r0, 800ed1c <__swbuf_r+0x90>
 800ecce:	68a3      	ldr	r3, [r4, #8]
 800ecd0:	3b01      	subs	r3, #1
 800ecd2:	60a3      	str	r3, [r4, #8]
 800ecd4:	6823      	ldr	r3, [r4, #0]
 800ecd6:	1c5a      	adds	r2, r3, #1
 800ecd8:	6022      	str	r2, [r4, #0]
 800ecda:	701e      	strb	r6, [r3, #0]
 800ecdc:	6963      	ldr	r3, [r4, #20]
 800ecde:	3001      	adds	r0, #1
 800ece0:	4283      	cmp	r3, r0
 800ece2:	d004      	beq.n	800ecee <__swbuf_r+0x62>
 800ece4:	89a3      	ldrh	r3, [r4, #12]
 800ece6:	07db      	lsls	r3, r3, #31
 800ece8:	d506      	bpl.n	800ecf8 <__swbuf_r+0x6c>
 800ecea:	2e0a      	cmp	r6, #10
 800ecec:	d104      	bne.n	800ecf8 <__swbuf_r+0x6c>
 800ecee:	4621      	mov	r1, r4
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	f000 f91f 	bl	800ef34 <_fflush_r>
 800ecf6:	b988      	cbnz	r0, 800ed1c <__swbuf_r+0x90>
 800ecf8:	4638      	mov	r0, r7
 800ecfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecfc:	4b0a      	ldr	r3, [pc, #40]	; (800ed28 <__swbuf_r+0x9c>)
 800ecfe:	429c      	cmp	r4, r3
 800ed00:	d101      	bne.n	800ed06 <__swbuf_r+0x7a>
 800ed02:	68ac      	ldr	r4, [r5, #8]
 800ed04:	e7cf      	b.n	800eca6 <__swbuf_r+0x1a>
 800ed06:	4b09      	ldr	r3, [pc, #36]	; (800ed2c <__swbuf_r+0xa0>)
 800ed08:	429c      	cmp	r4, r3
 800ed0a:	bf08      	it	eq
 800ed0c:	68ec      	ldreq	r4, [r5, #12]
 800ed0e:	e7ca      	b.n	800eca6 <__swbuf_r+0x1a>
 800ed10:	4621      	mov	r1, r4
 800ed12:	4628      	mov	r0, r5
 800ed14:	f000 f81a 	bl	800ed4c <__swsetup_r>
 800ed18:	2800      	cmp	r0, #0
 800ed1a:	d0cb      	beq.n	800ecb4 <__swbuf_r+0x28>
 800ed1c:	f04f 37ff 	mov.w	r7, #4294967295
 800ed20:	e7ea      	b.n	800ecf8 <__swbuf_r+0x6c>
 800ed22:	bf00      	nop
 800ed24:	0800f824 	.word	0x0800f824
 800ed28:	0800f844 	.word	0x0800f844
 800ed2c:	0800f804 	.word	0x0800f804

0800ed30 <__ascii_wctomb>:
 800ed30:	b149      	cbz	r1, 800ed46 <__ascii_wctomb+0x16>
 800ed32:	2aff      	cmp	r2, #255	; 0xff
 800ed34:	bf85      	ittet	hi
 800ed36:	238a      	movhi	r3, #138	; 0x8a
 800ed38:	6003      	strhi	r3, [r0, #0]
 800ed3a:	700a      	strbls	r2, [r1, #0]
 800ed3c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ed40:	bf98      	it	ls
 800ed42:	2001      	movls	r0, #1
 800ed44:	4770      	bx	lr
 800ed46:	4608      	mov	r0, r1
 800ed48:	4770      	bx	lr
	...

0800ed4c <__swsetup_r>:
 800ed4c:	4b32      	ldr	r3, [pc, #200]	; (800ee18 <__swsetup_r+0xcc>)
 800ed4e:	b570      	push	{r4, r5, r6, lr}
 800ed50:	681d      	ldr	r5, [r3, #0]
 800ed52:	4606      	mov	r6, r0
 800ed54:	460c      	mov	r4, r1
 800ed56:	b125      	cbz	r5, 800ed62 <__swsetup_r+0x16>
 800ed58:	69ab      	ldr	r3, [r5, #24]
 800ed5a:	b913      	cbnz	r3, 800ed62 <__swsetup_r+0x16>
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	f000 f97d 	bl	800f05c <__sinit>
 800ed62:	4b2e      	ldr	r3, [pc, #184]	; (800ee1c <__swsetup_r+0xd0>)
 800ed64:	429c      	cmp	r4, r3
 800ed66:	d10f      	bne.n	800ed88 <__swsetup_r+0x3c>
 800ed68:	686c      	ldr	r4, [r5, #4]
 800ed6a:	89a3      	ldrh	r3, [r4, #12]
 800ed6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed70:	0719      	lsls	r1, r3, #28
 800ed72:	d42c      	bmi.n	800edce <__swsetup_r+0x82>
 800ed74:	06dd      	lsls	r5, r3, #27
 800ed76:	d411      	bmi.n	800ed9c <__swsetup_r+0x50>
 800ed78:	2309      	movs	r3, #9
 800ed7a:	6033      	str	r3, [r6, #0]
 800ed7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed80:	81a3      	strh	r3, [r4, #12]
 800ed82:	f04f 30ff 	mov.w	r0, #4294967295
 800ed86:	e03e      	b.n	800ee06 <__swsetup_r+0xba>
 800ed88:	4b25      	ldr	r3, [pc, #148]	; (800ee20 <__swsetup_r+0xd4>)
 800ed8a:	429c      	cmp	r4, r3
 800ed8c:	d101      	bne.n	800ed92 <__swsetup_r+0x46>
 800ed8e:	68ac      	ldr	r4, [r5, #8]
 800ed90:	e7eb      	b.n	800ed6a <__swsetup_r+0x1e>
 800ed92:	4b24      	ldr	r3, [pc, #144]	; (800ee24 <__swsetup_r+0xd8>)
 800ed94:	429c      	cmp	r4, r3
 800ed96:	bf08      	it	eq
 800ed98:	68ec      	ldreq	r4, [r5, #12]
 800ed9a:	e7e6      	b.n	800ed6a <__swsetup_r+0x1e>
 800ed9c:	0758      	lsls	r0, r3, #29
 800ed9e:	d512      	bpl.n	800edc6 <__swsetup_r+0x7a>
 800eda0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eda2:	b141      	cbz	r1, 800edb6 <__swsetup_r+0x6a>
 800eda4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eda8:	4299      	cmp	r1, r3
 800edaa:	d002      	beq.n	800edb2 <__swsetup_r+0x66>
 800edac:	4630      	mov	r0, r6
 800edae:	f7fd fe0b 	bl	800c9c8 <_free_r>
 800edb2:	2300      	movs	r3, #0
 800edb4:	6363      	str	r3, [r4, #52]	; 0x34
 800edb6:	89a3      	ldrh	r3, [r4, #12]
 800edb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800edbc:	81a3      	strh	r3, [r4, #12]
 800edbe:	2300      	movs	r3, #0
 800edc0:	6063      	str	r3, [r4, #4]
 800edc2:	6923      	ldr	r3, [r4, #16]
 800edc4:	6023      	str	r3, [r4, #0]
 800edc6:	89a3      	ldrh	r3, [r4, #12]
 800edc8:	f043 0308 	orr.w	r3, r3, #8
 800edcc:	81a3      	strh	r3, [r4, #12]
 800edce:	6923      	ldr	r3, [r4, #16]
 800edd0:	b94b      	cbnz	r3, 800ede6 <__swsetup_r+0x9a>
 800edd2:	89a3      	ldrh	r3, [r4, #12]
 800edd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800edd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eddc:	d003      	beq.n	800ede6 <__swsetup_r+0x9a>
 800edde:	4621      	mov	r1, r4
 800ede0:	4630      	mov	r0, r6
 800ede2:	f000 f9fd 	bl	800f1e0 <__smakebuf_r>
 800ede6:	89a0      	ldrh	r0, [r4, #12]
 800ede8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edec:	f010 0301 	ands.w	r3, r0, #1
 800edf0:	d00a      	beq.n	800ee08 <__swsetup_r+0xbc>
 800edf2:	2300      	movs	r3, #0
 800edf4:	60a3      	str	r3, [r4, #8]
 800edf6:	6963      	ldr	r3, [r4, #20]
 800edf8:	425b      	negs	r3, r3
 800edfa:	61a3      	str	r3, [r4, #24]
 800edfc:	6923      	ldr	r3, [r4, #16]
 800edfe:	b943      	cbnz	r3, 800ee12 <__swsetup_r+0xc6>
 800ee00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee04:	d1ba      	bne.n	800ed7c <__swsetup_r+0x30>
 800ee06:	bd70      	pop	{r4, r5, r6, pc}
 800ee08:	0781      	lsls	r1, r0, #30
 800ee0a:	bf58      	it	pl
 800ee0c:	6963      	ldrpl	r3, [r4, #20]
 800ee0e:	60a3      	str	r3, [r4, #8]
 800ee10:	e7f4      	b.n	800edfc <__swsetup_r+0xb0>
 800ee12:	2000      	movs	r0, #0
 800ee14:	e7f7      	b.n	800ee06 <__swsetup_r+0xba>
 800ee16:	bf00      	nop
 800ee18:	2000000c 	.word	0x2000000c
 800ee1c:	0800f824 	.word	0x0800f824
 800ee20:	0800f844 	.word	0x0800f844
 800ee24:	0800f804 	.word	0x0800f804

0800ee28 <__sflush_r>:
 800ee28:	898a      	ldrh	r2, [r1, #12]
 800ee2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee2e:	4605      	mov	r5, r0
 800ee30:	0710      	lsls	r0, r2, #28
 800ee32:	460c      	mov	r4, r1
 800ee34:	d458      	bmi.n	800eee8 <__sflush_r+0xc0>
 800ee36:	684b      	ldr	r3, [r1, #4]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	dc05      	bgt.n	800ee48 <__sflush_r+0x20>
 800ee3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	dc02      	bgt.n	800ee48 <__sflush_r+0x20>
 800ee42:	2000      	movs	r0, #0
 800ee44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee4a:	2e00      	cmp	r6, #0
 800ee4c:	d0f9      	beq.n	800ee42 <__sflush_r+0x1a>
 800ee4e:	2300      	movs	r3, #0
 800ee50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ee54:	682f      	ldr	r7, [r5, #0]
 800ee56:	602b      	str	r3, [r5, #0]
 800ee58:	d032      	beq.n	800eec0 <__sflush_r+0x98>
 800ee5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ee5c:	89a3      	ldrh	r3, [r4, #12]
 800ee5e:	075a      	lsls	r2, r3, #29
 800ee60:	d505      	bpl.n	800ee6e <__sflush_r+0x46>
 800ee62:	6863      	ldr	r3, [r4, #4]
 800ee64:	1ac0      	subs	r0, r0, r3
 800ee66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee68:	b10b      	cbz	r3, 800ee6e <__sflush_r+0x46>
 800ee6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee6c:	1ac0      	subs	r0, r0, r3
 800ee6e:	2300      	movs	r3, #0
 800ee70:	4602      	mov	r2, r0
 800ee72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee74:	6a21      	ldr	r1, [r4, #32]
 800ee76:	4628      	mov	r0, r5
 800ee78:	47b0      	blx	r6
 800ee7a:	1c43      	adds	r3, r0, #1
 800ee7c:	89a3      	ldrh	r3, [r4, #12]
 800ee7e:	d106      	bne.n	800ee8e <__sflush_r+0x66>
 800ee80:	6829      	ldr	r1, [r5, #0]
 800ee82:	291d      	cmp	r1, #29
 800ee84:	d82c      	bhi.n	800eee0 <__sflush_r+0xb8>
 800ee86:	4a2a      	ldr	r2, [pc, #168]	; (800ef30 <__sflush_r+0x108>)
 800ee88:	40ca      	lsrs	r2, r1
 800ee8a:	07d6      	lsls	r6, r2, #31
 800ee8c:	d528      	bpl.n	800eee0 <__sflush_r+0xb8>
 800ee8e:	2200      	movs	r2, #0
 800ee90:	6062      	str	r2, [r4, #4]
 800ee92:	04d9      	lsls	r1, r3, #19
 800ee94:	6922      	ldr	r2, [r4, #16]
 800ee96:	6022      	str	r2, [r4, #0]
 800ee98:	d504      	bpl.n	800eea4 <__sflush_r+0x7c>
 800ee9a:	1c42      	adds	r2, r0, #1
 800ee9c:	d101      	bne.n	800eea2 <__sflush_r+0x7a>
 800ee9e:	682b      	ldr	r3, [r5, #0]
 800eea0:	b903      	cbnz	r3, 800eea4 <__sflush_r+0x7c>
 800eea2:	6560      	str	r0, [r4, #84]	; 0x54
 800eea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eea6:	602f      	str	r7, [r5, #0]
 800eea8:	2900      	cmp	r1, #0
 800eeaa:	d0ca      	beq.n	800ee42 <__sflush_r+0x1a>
 800eeac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eeb0:	4299      	cmp	r1, r3
 800eeb2:	d002      	beq.n	800eeba <__sflush_r+0x92>
 800eeb4:	4628      	mov	r0, r5
 800eeb6:	f7fd fd87 	bl	800c9c8 <_free_r>
 800eeba:	2000      	movs	r0, #0
 800eebc:	6360      	str	r0, [r4, #52]	; 0x34
 800eebe:	e7c1      	b.n	800ee44 <__sflush_r+0x1c>
 800eec0:	6a21      	ldr	r1, [r4, #32]
 800eec2:	2301      	movs	r3, #1
 800eec4:	4628      	mov	r0, r5
 800eec6:	47b0      	blx	r6
 800eec8:	1c41      	adds	r1, r0, #1
 800eeca:	d1c7      	bne.n	800ee5c <__sflush_r+0x34>
 800eecc:	682b      	ldr	r3, [r5, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d0c4      	beq.n	800ee5c <__sflush_r+0x34>
 800eed2:	2b1d      	cmp	r3, #29
 800eed4:	d001      	beq.n	800eeda <__sflush_r+0xb2>
 800eed6:	2b16      	cmp	r3, #22
 800eed8:	d101      	bne.n	800eede <__sflush_r+0xb6>
 800eeda:	602f      	str	r7, [r5, #0]
 800eedc:	e7b1      	b.n	800ee42 <__sflush_r+0x1a>
 800eede:	89a3      	ldrh	r3, [r4, #12]
 800eee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eee4:	81a3      	strh	r3, [r4, #12]
 800eee6:	e7ad      	b.n	800ee44 <__sflush_r+0x1c>
 800eee8:	690f      	ldr	r7, [r1, #16]
 800eeea:	2f00      	cmp	r7, #0
 800eeec:	d0a9      	beq.n	800ee42 <__sflush_r+0x1a>
 800eeee:	0793      	lsls	r3, r2, #30
 800eef0:	680e      	ldr	r6, [r1, #0]
 800eef2:	bf08      	it	eq
 800eef4:	694b      	ldreq	r3, [r1, #20]
 800eef6:	600f      	str	r7, [r1, #0]
 800eef8:	bf18      	it	ne
 800eefa:	2300      	movne	r3, #0
 800eefc:	eba6 0807 	sub.w	r8, r6, r7
 800ef00:	608b      	str	r3, [r1, #8]
 800ef02:	f1b8 0f00 	cmp.w	r8, #0
 800ef06:	dd9c      	ble.n	800ee42 <__sflush_r+0x1a>
 800ef08:	6a21      	ldr	r1, [r4, #32]
 800ef0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef0c:	4643      	mov	r3, r8
 800ef0e:	463a      	mov	r2, r7
 800ef10:	4628      	mov	r0, r5
 800ef12:	47b0      	blx	r6
 800ef14:	2800      	cmp	r0, #0
 800ef16:	dc06      	bgt.n	800ef26 <__sflush_r+0xfe>
 800ef18:	89a3      	ldrh	r3, [r4, #12]
 800ef1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef1e:	81a3      	strh	r3, [r4, #12]
 800ef20:	f04f 30ff 	mov.w	r0, #4294967295
 800ef24:	e78e      	b.n	800ee44 <__sflush_r+0x1c>
 800ef26:	4407      	add	r7, r0
 800ef28:	eba8 0800 	sub.w	r8, r8, r0
 800ef2c:	e7e9      	b.n	800ef02 <__sflush_r+0xda>
 800ef2e:	bf00      	nop
 800ef30:	20400001 	.word	0x20400001

0800ef34 <_fflush_r>:
 800ef34:	b538      	push	{r3, r4, r5, lr}
 800ef36:	690b      	ldr	r3, [r1, #16]
 800ef38:	4605      	mov	r5, r0
 800ef3a:	460c      	mov	r4, r1
 800ef3c:	b913      	cbnz	r3, 800ef44 <_fflush_r+0x10>
 800ef3e:	2500      	movs	r5, #0
 800ef40:	4628      	mov	r0, r5
 800ef42:	bd38      	pop	{r3, r4, r5, pc}
 800ef44:	b118      	cbz	r0, 800ef4e <_fflush_r+0x1a>
 800ef46:	6983      	ldr	r3, [r0, #24]
 800ef48:	b90b      	cbnz	r3, 800ef4e <_fflush_r+0x1a>
 800ef4a:	f000 f887 	bl	800f05c <__sinit>
 800ef4e:	4b14      	ldr	r3, [pc, #80]	; (800efa0 <_fflush_r+0x6c>)
 800ef50:	429c      	cmp	r4, r3
 800ef52:	d11b      	bne.n	800ef8c <_fflush_r+0x58>
 800ef54:	686c      	ldr	r4, [r5, #4]
 800ef56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d0ef      	beq.n	800ef3e <_fflush_r+0xa>
 800ef5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ef60:	07d0      	lsls	r0, r2, #31
 800ef62:	d404      	bmi.n	800ef6e <_fflush_r+0x3a>
 800ef64:	0599      	lsls	r1, r3, #22
 800ef66:	d402      	bmi.n	800ef6e <_fflush_r+0x3a>
 800ef68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef6a:	f7ff fd22 	bl	800e9b2 <__retarget_lock_acquire_recursive>
 800ef6e:	4628      	mov	r0, r5
 800ef70:	4621      	mov	r1, r4
 800ef72:	f7ff ff59 	bl	800ee28 <__sflush_r>
 800ef76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef78:	07da      	lsls	r2, r3, #31
 800ef7a:	4605      	mov	r5, r0
 800ef7c:	d4e0      	bmi.n	800ef40 <_fflush_r+0xc>
 800ef7e:	89a3      	ldrh	r3, [r4, #12]
 800ef80:	059b      	lsls	r3, r3, #22
 800ef82:	d4dd      	bmi.n	800ef40 <_fflush_r+0xc>
 800ef84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef86:	f7ff fd15 	bl	800e9b4 <__retarget_lock_release_recursive>
 800ef8a:	e7d9      	b.n	800ef40 <_fflush_r+0xc>
 800ef8c:	4b05      	ldr	r3, [pc, #20]	; (800efa4 <_fflush_r+0x70>)
 800ef8e:	429c      	cmp	r4, r3
 800ef90:	d101      	bne.n	800ef96 <_fflush_r+0x62>
 800ef92:	68ac      	ldr	r4, [r5, #8]
 800ef94:	e7df      	b.n	800ef56 <_fflush_r+0x22>
 800ef96:	4b04      	ldr	r3, [pc, #16]	; (800efa8 <_fflush_r+0x74>)
 800ef98:	429c      	cmp	r4, r3
 800ef9a:	bf08      	it	eq
 800ef9c:	68ec      	ldreq	r4, [r5, #12]
 800ef9e:	e7da      	b.n	800ef56 <_fflush_r+0x22>
 800efa0:	0800f824 	.word	0x0800f824
 800efa4:	0800f844 	.word	0x0800f844
 800efa8:	0800f804 	.word	0x0800f804

0800efac <std>:
 800efac:	2300      	movs	r3, #0
 800efae:	b510      	push	{r4, lr}
 800efb0:	4604      	mov	r4, r0
 800efb2:	e9c0 3300 	strd	r3, r3, [r0]
 800efb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800efba:	6083      	str	r3, [r0, #8]
 800efbc:	8181      	strh	r1, [r0, #12]
 800efbe:	6643      	str	r3, [r0, #100]	; 0x64
 800efc0:	81c2      	strh	r2, [r0, #14]
 800efc2:	6183      	str	r3, [r0, #24]
 800efc4:	4619      	mov	r1, r3
 800efc6:	2208      	movs	r2, #8
 800efc8:	305c      	adds	r0, #92	; 0x5c
 800efca:	f7fd fcf5 	bl	800c9b8 <memset>
 800efce:	4b05      	ldr	r3, [pc, #20]	; (800efe4 <std+0x38>)
 800efd0:	6263      	str	r3, [r4, #36]	; 0x24
 800efd2:	4b05      	ldr	r3, [pc, #20]	; (800efe8 <std+0x3c>)
 800efd4:	62a3      	str	r3, [r4, #40]	; 0x28
 800efd6:	4b05      	ldr	r3, [pc, #20]	; (800efec <std+0x40>)
 800efd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800efda:	4b05      	ldr	r3, [pc, #20]	; (800eff0 <std+0x44>)
 800efdc:	6224      	str	r4, [r4, #32]
 800efde:	6323      	str	r3, [r4, #48]	; 0x30
 800efe0:	bd10      	pop	{r4, pc}
 800efe2:	bf00      	nop
 800efe4:	0800f261 	.word	0x0800f261
 800efe8:	0800f283 	.word	0x0800f283
 800efec:	0800f2bb 	.word	0x0800f2bb
 800eff0:	0800f2df 	.word	0x0800f2df

0800eff4 <_cleanup_r>:
 800eff4:	4901      	ldr	r1, [pc, #4]	; (800effc <_cleanup_r+0x8>)
 800eff6:	f000 b8af 	b.w	800f158 <_fwalk_reent>
 800effa:	bf00      	nop
 800effc:	0800ef35 	.word	0x0800ef35

0800f000 <__sfmoreglue>:
 800f000:	b570      	push	{r4, r5, r6, lr}
 800f002:	2268      	movs	r2, #104	; 0x68
 800f004:	1e4d      	subs	r5, r1, #1
 800f006:	4355      	muls	r5, r2
 800f008:	460e      	mov	r6, r1
 800f00a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f00e:	f7fd fd47 	bl	800caa0 <_malloc_r>
 800f012:	4604      	mov	r4, r0
 800f014:	b140      	cbz	r0, 800f028 <__sfmoreglue+0x28>
 800f016:	2100      	movs	r1, #0
 800f018:	e9c0 1600 	strd	r1, r6, [r0]
 800f01c:	300c      	adds	r0, #12
 800f01e:	60a0      	str	r0, [r4, #8]
 800f020:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f024:	f7fd fcc8 	bl	800c9b8 <memset>
 800f028:	4620      	mov	r0, r4
 800f02a:	bd70      	pop	{r4, r5, r6, pc}

0800f02c <__sfp_lock_acquire>:
 800f02c:	4801      	ldr	r0, [pc, #4]	; (800f034 <__sfp_lock_acquire+0x8>)
 800f02e:	f7ff bcc0 	b.w	800e9b2 <__retarget_lock_acquire_recursive>
 800f032:	bf00      	nop
 800f034:	20001179 	.word	0x20001179

0800f038 <__sfp_lock_release>:
 800f038:	4801      	ldr	r0, [pc, #4]	; (800f040 <__sfp_lock_release+0x8>)
 800f03a:	f7ff bcbb 	b.w	800e9b4 <__retarget_lock_release_recursive>
 800f03e:	bf00      	nop
 800f040:	20001179 	.word	0x20001179

0800f044 <__sinit_lock_acquire>:
 800f044:	4801      	ldr	r0, [pc, #4]	; (800f04c <__sinit_lock_acquire+0x8>)
 800f046:	f7ff bcb4 	b.w	800e9b2 <__retarget_lock_acquire_recursive>
 800f04a:	bf00      	nop
 800f04c:	2000117a 	.word	0x2000117a

0800f050 <__sinit_lock_release>:
 800f050:	4801      	ldr	r0, [pc, #4]	; (800f058 <__sinit_lock_release+0x8>)
 800f052:	f7ff bcaf 	b.w	800e9b4 <__retarget_lock_release_recursive>
 800f056:	bf00      	nop
 800f058:	2000117a 	.word	0x2000117a

0800f05c <__sinit>:
 800f05c:	b510      	push	{r4, lr}
 800f05e:	4604      	mov	r4, r0
 800f060:	f7ff fff0 	bl	800f044 <__sinit_lock_acquire>
 800f064:	69a3      	ldr	r3, [r4, #24]
 800f066:	b11b      	cbz	r3, 800f070 <__sinit+0x14>
 800f068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f06c:	f7ff bff0 	b.w	800f050 <__sinit_lock_release>
 800f070:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f074:	6523      	str	r3, [r4, #80]	; 0x50
 800f076:	4b13      	ldr	r3, [pc, #76]	; (800f0c4 <__sinit+0x68>)
 800f078:	4a13      	ldr	r2, [pc, #76]	; (800f0c8 <__sinit+0x6c>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f07e:	42a3      	cmp	r3, r4
 800f080:	bf04      	itt	eq
 800f082:	2301      	moveq	r3, #1
 800f084:	61a3      	streq	r3, [r4, #24]
 800f086:	4620      	mov	r0, r4
 800f088:	f000 f820 	bl	800f0cc <__sfp>
 800f08c:	6060      	str	r0, [r4, #4]
 800f08e:	4620      	mov	r0, r4
 800f090:	f000 f81c 	bl	800f0cc <__sfp>
 800f094:	60a0      	str	r0, [r4, #8]
 800f096:	4620      	mov	r0, r4
 800f098:	f000 f818 	bl	800f0cc <__sfp>
 800f09c:	2200      	movs	r2, #0
 800f09e:	60e0      	str	r0, [r4, #12]
 800f0a0:	2104      	movs	r1, #4
 800f0a2:	6860      	ldr	r0, [r4, #4]
 800f0a4:	f7ff ff82 	bl	800efac <std>
 800f0a8:	68a0      	ldr	r0, [r4, #8]
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	2109      	movs	r1, #9
 800f0ae:	f7ff ff7d 	bl	800efac <std>
 800f0b2:	68e0      	ldr	r0, [r4, #12]
 800f0b4:	2202      	movs	r2, #2
 800f0b6:	2112      	movs	r1, #18
 800f0b8:	f7ff ff78 	bl	800efac <std>
 800f0bc:	2301      	movs	r3, #1
 800f0be:	61a3      	str	r3, [r4, #24]
 800f0c0:	e7d2      	b.n	800f068 <__sinit+0xc>
 800f0c2:	bf00      	nop
 800f0c4:	0800f488 	.word	0x0800f488
 800f0c8:	0800eff5 	.word	0x0800eff5

0800f0cc <__sfp>:
 800f0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ce:	4607      	mov	r7, r0
 800f0d0:	f7ff ffac 	bl	800f02c <__sfp_lock_acquire>
 800f0d4:	4b1e      	ldr	r3, [pc, #120]	; (800f150 <__sfp+0x84>)
 800f0d6:	681e      	ldr	r6, [r3, #0]
 800f0d8:	69b3      	ldr	r3, [r6, #24]
 800f0da:	b913      	cbnz	r3, 800f0e2 <__sfp+0x16>
 800f0dc:	4630      	mov	r0, r6
 800f0de:	f7ff ffbd 	bl	800f05c <__sinit>
 800f0e2:	3648      	adds	r6, #72	; 0x48
 800f0e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f0e8:	3b01      	subs	r3, #1
 800f0ea:	d503      	bpl.n	800f0f4 <__sfp+0x28>
 800f0ec:	6833      	ldr	r3, [r6, #0]
 800f0ee:	b30b      	cbz	r3, 800f134 <__sfp+0x68>
 800f0f0:	6836      	ldr	r6, [r6, #0]
 800f0f2:	e7f7      	b.n	800f0e4 <__sfp+0x18>
 800f0f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f0f8:	b9d5      	cbnz	r5, 800f130 <__sfp+0x64>
 800f0fa:	4b16      	ldr	r3, [pc, #88]	; (800f154 <__sfp+0x88>)
 800f0fc:	60e3      	str	r3, [r4, #12]
 800f0fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f102:	6665      	str	r5, [r4, #100]	; 0x64
 800f104:	f7ff fc54 	bl	800e9b0 <__retarget_lock_init_recursive>
 800f108:	f7ff ff96 	bl	800f038 <__sfp_lock_release>
 800f10c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f110:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f114:	6025      	str	r5, [r4, #0]
 800f116:	61a5      	str	r5, [r4, #24]
 800f118:	2208      	movs	r2, #8
 800f11a:	4629      	mov	r1, r5
 800f11c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f120:	f7fd fc4a 	bl	800c9b8 <memset>
 800f124:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f128:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f12c:	4620      	mov	r0, r4
 800f12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f130:	3468      	adds	r4, #104	; 0x68
 800f132:	e7d9      	b.n	800f0e8 <__sfp+0x1c>
 800f134:	2104      	movs	r1, #4
 800f136:	4638      	mov	r0, r7
 800f138:	f7ff ff62 	bl	800f000 <__sfmoreglue>
 800f13c:	4604      	mov	r4, r0
 800f13e:	6030      	str	r0, [r6, #0]
 800f140:	2800      	cmp	r0, #0
 800f142:	d1d5      	bne.n	800f0f0 <__sfp+0x24>
 800f144:	f7ff ff78 	bl	800f038 <__sfp_lock_release>
 800f148:	230c      	movs	r3, #12
 800f14a:	603b      	str	r3, [r7, #0]
 800f14c:	e7ee      	b.n	800f12c <__sfp+0x60>
 800f14e:	bf00      	nop
 800f150:	0800f488 	.word	0x0800f488
 800f154:	ffff0001 	.word	0xffff0001

0800f158 <_fwalk_reent>:
 800f158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f15c:	4606      	mov	r6, r0
 800f15e:	4688      	mov	r8, r1
 800f160:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f164:	2700      	movs	r7, #0
 800f166:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f16a:	f1b9 0901 	subs.w	r9, r9, #1
 800f16e:	d505      	bpl.n	800f17c <_fwalk_reent+0x24>
 800f170:	6824      	ldr	r4, [r4, #0]
 800f172:	2c00      	cmp	r4, #0
 800f174:	d1f7      	bne.n	800f166 <_fwalk_reent+0xe>
 800f176:	4638      	mov	r0, r7
 800f178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f17c:	89ab      	ldrh	r3, [r5, #12]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d907      	bls.n	800f192 <_fwalk_reent+0x3a>
 800f182:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f186:	3301      	adds	r3, #1
 800f188:	d003      	beq.n	800f192 <_fwalk_reent+0x3a>
 800f18a:	4629      	mov	r1, r5
 800f18c:	4630      	mov	r0, r6
 800f18e:	47c0      	blx	r8
 800f190:	4307      	orrs	r7, r0
 800f192:	3568      	adds	r5, #104	; 0x68
 800f194:	e7e9      	b.n	800f16a <_fwalk_reent+0x12>

0800f196 <__swhatbuf_r>:
 800f196:	b570      	push	{r4, r5, r6, lr}
 800f198:	460e      	mov	r6, r1
 800f19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f19e:	2900      	cmp	r1, #0
 800f1a0:	b096      	sub	sp, #88	; 0x58
 800f1a2:	4614      	mov	r4, r2
 800f1a4:	461d      	mov	r5, r3
 800f1a6:	da08      	bge.n	800f1ba <__swhatbuf_r+0x24>
 800f1a8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	602a      	str	r2, [r5, #0]
 800f1b0:	061a      	lsls	r2, r3, #24
 800f1b2:	d410      	bmi.n	800f1d6 <__swhatbuf_r+0x40>
 800f1b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1b8:	e00e      	b.n	800f1d8 <__swhatbuf_r+0x42>
 800f1ba:	466a      	mov	r2, sp
 800f1bc:	f000 f8b6 	bl	800f32c <_fstat_r>
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	dbf1      	blt.n	800f1a8 <__swhatbuf_r+0x12>
 800f1c4:	9a01      	ldr	r2, [sp, #4]
 800f1c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f1ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f1ce:	425a      	negs	r2, r3
 800f1d0:	415a      	adcs	r2, r3
 800f1d2:	602a      	str	r2, [r5, #0]
 800f1d4:	e7ee      	b.n	800f1b4 <__swhatbuf_r+0x1e>
 800f1d6:	2340      	movs	r3, #64	; 0x40
 800f1d8:	2000      	movs	r0, #0
 800f1da:	6023      	str	r3, [r4, #0]
 800f1dc:	b016      	add	sp, #88	; 0x58
 800f1de:	bd70      	pop	{r4, r5, r6, pc}

0800f1e0 <__smakebuf_r>:
 800f1e0:	898b      	ldrh	r3, [r1, #12]
 800f1e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1e4:	079d      	lsls	r5, r3, #30
 800f1e6:	4606      	mov	r6, r0
 800f1e8:	460c      	mov	r4, r1
 800f1ea:	d507      	bpl.n	800f1fc <__smakebuf_r+0x1c>
 800f1ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f1f0:	6023      	str	r3, [r4, #0]
 800f1f2:	6123      	str	r3, [r4, #16]
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	6163      	str	r3, [r4, #20]
 800f1f8:	b002      	add	sp, #8
 800f1fa:	bd70      	pop	{r4, r5, r6, pc}
 800f1fc:	ab01      	add	r3, sp, #4
 800f1fe:	466a      	mov	r2, sp
 800f200:	f7ff ffc9 	bl	800f196 <__swhatbuf_r>
 800f204:	9900      	ldr	r1, [sp, #0]
 800f206:	4605      	mov	r5, r0
 800f208:	4630      	mov	r0, r6
 800f20a:	f7fd fc49 	bl	800caa0 <_malloc_r>
 800f20e:	b948      	cbnz	r0, 800f224 <__smakebuf_r+0x44>
 800f210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f214:	059a      	lsls	r2, r3, #22
 800f216:	d4ef      	bmi.n	800f1f8 <__smakebuf_r+0x18>
 800f218:	f023 0303 	bic.w	r3, r3, #3
 800f21c:	f043 0302 	orr.w	r3, r3, #2
 800f220:	81a3      	strh	r3, [r4, #12]
 800f222:	e7e3      	b.n	800f1ec <__smakebuf_r+0xc>
 800f224:	4b0d      	ldr	r3, [pc, #52]	; (800f25c <__smakebuf_r+0x7c>)
 800f226:	62b3      	str	r3, [r6, #40]	; 0x28
 800f228:	89a3      	ldrh	r3, [r4, #12]
 800f22a:	6020      	str	r0, [r4, #0]
 800f22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f230:	81a3      	strh	r3, [r4, #12]
 800f232:	9b00      	ldr	r3, [sp, #0]
 800f234:	6163      	str	r3, [r4, #20]
 800f236:	9b01      	ldr	r3, [sp, #4]
 800f238:	6120      	str	r0, [r4, #16]
 800f23a:	b15b      	cbz	r3, 800f254 <__smakebuf_r+0x74>
 800f23c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f240:	4630      	mov	r0, r6
 800f242:	f000 f885 	bl	800f350 <_isatty_r>
 800f246:	b128      	cbz	r0, 800f254 <__smakebuf_r+0x74>
 800f248:	89a3      	ldrh	r3, [r4, #12]
 800f24a:	f023 0303 	bic.w	r3, r3, #3
 800f24e:	f043 0301 	orr.w	r3, r3, #1
 800f252:	81a3      	strh	r3, [r4, #12]
 800f254:	89a0      	ldrh	r0, [r4, #12]
 800f256:	4305      	orrs	r5, r0
 800f258:	81a5      	strh	r5, [r4, #12]
 800f25a:	e7cd      	b.n	800f1f8 <__smakebuf_r+0x18>
 800f25c:	0800eff5 	.word	0x0800eff5

0800f260 <__sread>:
 800f260:	b510      	push	{r4, lr}
 800f262:	460c      	mov	r4, r1
 800f264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f268:	f000 f894 	bl	800f394 <_read_r>
 800f26c:	2800      	cmp	r0, #0
 800f26e:	bfab      	itete	ge
 800f270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f272:	89a3      	ldrhlt	r3, [r4, #12]
 800f274:	181b      	addge	r3, r3, r0
 800f276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f27a:	bfac      	ite	ge
 800f27c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f27e:	81a3      	strhlt	r3, [r4, #12]
 800f280:	bd10      	pop	{r4, pc}

0800f282 <__swrite>:
 800f282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f286:	461f      	mov	r7, r3
 800f288:	898b      	ldrh	r3, [r1, #12]
 800f28a:	05db      	lsls	r3, r3, #23
 800f28c:	4605      	mov	r5, r0
 800f28e:	460c      	mov	r4, r1
 800f290:	4616      	mov	r6, r2
 800f292:	d505      	bpl.n	800f2a0 <__swrite+0x1e>
 800f294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f298:	2302      	movs	r3, #2
 800f29a:	2200      	movs	r2, #0
 800f29c:	f000 f868 	bl	800f370 <_lseek_r>
 800f2a0:	89a3      	ldrh	r3, [r4, #12]
 800f2a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2aa:	81a3      	strh	r3, [r4, #12]
 800f2ac:	4632      	mov	r2, r6
 800f2ae:	463b      	mov	r3, r7
 800f2b0:	4628      	mov	r0, r5
 800f2b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b6:	f000 b817 	b.w	800f2e8 <_write_r>

0800f2ba <__sseek>:
 800f2ba:	b510      	push	{r4, lr}
 800f2bc:	460c      	mov	r4, r1
 800f2be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2c2:	f000 f855 	bl	800f370 <_lseek_r>
 800f2c6:	1c43      	adds	r3, r0, #1
 800f2c8:	89a3      	ldrh	r3, [r4, #12]
 800f2ca:	bf15      	itete	ne
 800f2cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2d6:	81a3      	strheq	r3, [r4, #12]
 800f2d8:	bf18      	it	ne
 800f2da:	81a3      	strhne	r3, [r4, #12]
 800f2dc:	bd10      	pop	{r4, pc}

0800f2de <__sclose>:
 800f2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2e2:	f000 b813 	b.w	800f30c <_close_r>
	...

0800f2e8 <_write_r>:
 800f2e8:	b538      	push	{r3, r4, r5, lr}
 800f2ea:	4d07      	ldr	r5, [pc, #28]	; (800f308 <_write_r+0x20>)
 800f2ec:	4604      	mov	r4, r0
 800f2ee:	4608      	mov	r0, r1
 800f2f0:	4611      	mov	r1, r2
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	602a      	str	r2, [r5, #0]
 800f2f6:	461a      	mov	r2, r3
 800f2f8:	f7f6 fa37 	bl	800576a <_write>
 800f2fc:	1c43      	adds	r3, r0, #1
 800f2fe:	d102      	bne.n	800f306 <_write_r+0x1e>
 800f300:	682b      	ldr	r3, [r5, #0]
 800f302:	b103      	cbz	r3, 800f306 <_write_r+0x1e>
 800f304:	6023      	str	r3, [r4, #0]
 800f306:	bd38      	pop	{r3, r4, r5, pc}
 800f308:	20001174 	.word	0x20001174

0800f30c <_close_r>:
 800f30c:	b538      	push	{r3, r4, r5, lr}
 800f30e:	4d06      	ldr	r5, [pc, #24]	; (800f328 <_close_r+0x1c>)
 800f310:	2300      	movs	r3, #0
 800f312:	4604      	mov	r4, r0
 800f314:	4608      	mov	r0, r1
 800f316:	602b      	str	r3, [r5, #0]
 800f318:	f7f6 fa43 	bl	80057a2 <_close>
 800f31c:	1c43      	adds	r3, r0, #1
 800f31e:	d102      	bne.n	800f326 <_close_r+0x1a>
 800f320:	682b      	ldr	r3, [r5, #0]
 800f322:	b103      	cbz	r3, 800f326 <_close_r+0x1a>
 800f324:	6023      	str	r3, [r4, #0]
 800f326:	bd38      	pop	{r3, r4, r5, pc}
 800f328:	20001174 	.word	0x20001174

0800f32c <_fstat_r>:
 800f32c:	b538      	push	{r3, r4, r5, lr}
 800f32e:	4d07      	ldr	r5, [pc, #28]	; (800f34c <_fstat_r+0x20>)
 800f330:	2300      	movs	r3, #0
 800f332:	4604      	mov	r4, r0
 800f334:	4608      	mov	r0, r1
 800f336:	4611      	mov	r1, r2
 800f338:	602b      	str	r3, [r5, #0]
 800f33a:	f7f6 fa3e 	bl	80057ba <_fstat>
 800f33e:	1c43      	adds	r3, r0, #1
 800f340:	d102      	bne.n	800f348 <_fstat_r+0x1c>
 800f342:	682b      	ldr	r3, [r5, #0]
 800f344:	b103      	cbz	r3, 800f348 <_fstat_r+0x1c>
 800f346:	6023      	str	r3, [r4, #0]
 800f348:	bd38      	pop	{r3, r4, r5, pc}
 800f34a:	bf00      	nop
 800f34c:	20001174 	.word	0x20001174

0800f350 <_isatty_r>:
 800f350:	b538      	push	{r3, r4, r5, lr}
 800f352:	4d06      	ldr	r5, [pc, #24]	; (800f36c <_isatty_r+0x1c>)
 800f354:	2300      	movs	r3, #0
 800f356:	4604      	mov	r4, r0
 800f358:	4608      	mov	r0, r1
 800f35a:	602b      	str	r3, [r5, #0]
 800f35c:	f7f6 fa3d 	bl	80057da <_isatty>
 800f360:	1c43      	adds	r3, r0, #1
 800f362:	d102      	bne.n	800f36a <_isatty_r+0x1a>
 800f364:	682b      	ldr	r3, [r5, #0]
 800f366:	b103      	cbz	r3, 800f36a <_isatty_r+0x1a>
 800f368:	6023      	str	r3, [r4, #0]
 800f36a:	bd38      	pop	{r3, r4, r5, pc}
 800f36c:	20001174 	.word	0x20001174

0800f370 <_lseek_r>:
 800f370:	b538      	push	{r3, r4, r5, lr}
 800f372:	4d07      	ldr	r5, [pc, #28]	; (800f390 <_lseek_r+0x20>)
 800f374:	4604      	mov	r4, r0
 800f376:	4608      	mov	r0, r1
 800f378:	4611      	mov	r1, r2
 800f37a:	2200      	movs	r2, #0
 800f37c:	602a      	str	r2, [r5, #0]
 800f37e:	461a      	mov	r2, r3
 800f380:	f7f6 fa36 	bl	80057f0 <_lseek>
 800f384:	1c43      	adds	r3, r0, #1
 800f386:	d102      	bne.n	800f38e <_lseek_r+0x1e>
 800f388:	682b      	ldr	r3, [r5, #0]
 800f38a:	b103      	cbz	r3, 800f38e <_lseek_r+0x1e>
 800f38c:	6023      	str	r3, [r4, #0]
 800f38e:	bd38      	pop	{r3, r4, r5, pc}
 800f390:	20001174 	.word	0x20001174

0800f394 <_read_r>:
 800f394:	b538      	push	{r3, r4, r5, lr}
 800f396:	4d07      	ldr	r5, [pc, #28]	; (800f3b4 <_read_r+0x20>)
 800f398:	4604      	mov	r4, r0
 800f39a:	4608      	mov	r0, r1
 800f39c:	4611      	mov	r1, r2
 800f39e:	2200      	movs	r2, #0
 800f3a0:	602a      	str	r2, [r5, #0]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	f7f6 f9c4 	bl	8005730 <_read>
 800f3a8:	1c43      	adds	r3, r0, #1
 800f3aa:	d102      	bne.n	800f3b2 <_read_r+0x1e>
 800f3ac:	682b      	ldr	r3, [r5, #0]
 800f3ae:	b103      	cbz	r3, 800f3b2 <_read_r+0x1e>
 800f3b0:	6023      	str	r3, [r4, #0]
 800f3b2:	bd38      	pop	{r3, r4, r5, pc}
 800f3b4:	20001174 	.word	0x20001174

0800f3b8 <_init>:
 800f3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ba:	bf00      	nop
 800f3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3be:	bc08      	pop	{r3}
 800f3c0:	469e      	mov	lr, r3
 800f3c2:	4770      	bx	lr

0800f3c4 <_fini>:
 800f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c6:	bf00      	nop
 800f3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ca:	bc08      	pop	{r3}
 800f3cc:	469e      	mov	lr, r3
 800f3ce:	4770      	bx	lr
