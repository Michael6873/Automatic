
f4_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800de28  0800de28  0001de28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e45c  0800e45c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e45c  0800e45c  0001e45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e464  0800e464  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e464  0800e464  0001e464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e46c  0800e46c  0001e46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f4  200001e0  0800e654  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ad4  0800e654  00020ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abd0  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dbc  00000000  00000000  0003ade0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0003dba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  0003f1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b245  00000000  00000000  00040760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155bb  00000000  00000000  0005b9a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1b34  00000000  00000000  00070f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112a94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077fc  00000000  00000000  00112ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800de10 	.word	0x0800de10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800de10 	.word	0x0800de10

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <_ZN7RPLidar3endEv>:
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f811 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <_ZN7RPLidar3endEv+0x20>
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <_ZN7RPLidar3endEv+0x28>)
 8000f72:	f007 fdbc 	bl	8008aee <HAL_UART_DeInit>
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <_ZN7RPLidar3endEv+0x2c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000a74 	.word	0x20000a74
 8000f88:	200001fc 	.word	0x200001fc

08000f8c <_ZN7RPLidar6isOpenEv>:
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <_ZN7RPLidar6isOpenEv+0x18>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	200001fc 	.word	0x200001fc

08000fa8 <_ZN7RPLidarC1Ev>:
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000fba:	d80b      	bhi.n	8000fd4 <_ZN7RPLidarC1Ev+0x2c>
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <_ZN7RPLidarC1Ev+0x58>)
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	e7ef      	b.n	8000fb4 <_ZN7RPLidarC1Ev+0xc>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	721a      	strb	r2, [r3, #8]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	725a      	strb	r2, [r3, #9]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	461c4000 	.word	0x461c4000

08001004 <_ZN7RPLidarD1Ev>:
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ffa5 	bl	8000f5c <_ZN7RPLidar3endEv>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <_ZN7RPLidar5beginEv>:
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ffb1 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <_ZN7RPLidar5beginEv+0x1a>
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff93 	bl	8000f5c <_ZN7RPLidar3endEv>
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <_ZN7RPLidar5beginEv+0x7c>)
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 800103e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 8001058:	220c      	movs	r2, #12
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 8001064:	2200      	movs	r2, #0
 8001066:	61da      	str	r2, [r3, #28]
 8001068:	480a      	ldr	r0, [pc, #40]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 800106a:	f007 fcf3 	bl	8008a54 <HAL_UART_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	bf14      	ite	ne
 8001074:	2301      	movne	r3, #1
 8001076:	2300      	moveq	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <_ZN7RPLidar5beginEv+0x66>
 800107e:	2300      	movs	r3, #0
 8001080:	e003      	b.n	800108a <_ZN7RPLidar5beginEv+0x6e>
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <_ZN7RPLidar5beginEv+0x80>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000a74 	.word	0x20000a74
 8001098:	40004400 	.word	0x40004400
 800109c:	200001fc 	.word	0x200001fc

080010a0 <_ZN7RPLidar12_sendCommandEhPKvj>:
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	460b      	mov	r3, r1
 80010ae:	72fb      	strb	r3, [r7, #11]
 80010b0:	2300      	movs	r3, #0
 80010b2:	75fb      	strb	r3, [r7, #23]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <_ZN7RPLidar12_sendCommandEhPKvj+0x28>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <_ZN7RPLidar12_sendCommandEhPKvj+0x28>
 80010c0:	7afb      	ldrb	r3, [r7, #11]
 80010c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010c6:	72fb      	strb	r3, [r7, #11]
 80010c8:	23a5      	movs	r3, #165	; 0xa5
 80010ca:	763b      	strb	r3, [r7, #24]
 80010cc:	7afb      	ldrb	r3, [r7, #11]
 80010ce:	767b      	strb	r3, [r7, #25]
 80010d0:	f107 0118 	add.w	r1, r7, #24
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	2203      	movs	r2, #3
 80010da:	4833      	ldr	r0, [pc, #204]	; (80011a8 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 80010dc:	f007 fd36 	bl	8008b4c <HAL_UART_Transmit>
 80010e0:	4603      	mov	r3, r0
 80010e2:	76fb      	strb	r3, [r7, #27]
 80010e4:	7efb      	ldrb	r3, [r7, #27]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <_ZN7RPLidar12_sendCommandEhPKvj+0x4e>
 80010ea:	4b30      	ldr	r3, [pc, #192]	; (80011ac <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 80010ec:	e057      	b.n	800119e <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
 80010ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	da52      	bge.n	800119c <_ZN7RPLidar12_sendCommandEhPKvj+0xfc>
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	f083 035a 	eor.w	r3, r3, #90	; 0x5a
 80010fc:	43db      	mvns	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	75fb      	strb	r3, [r7, #23]
 8001102:	7dfa      	ldrb	r2, [r7, #23]
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	4053      	eors	r3, r2
 8001108:	b2db      	uxtb	r3, r3
 800110a:	75fb      	strb	r3, [r7, #23]
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	4053      	eors	r3, r2
 8001114:	b2db      	uxtb	r3, r3
 8001116:	75fb      	strb	r3, [r7, #23]
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d20b      	bcs.n	800113c <_ZN7RPLidar12_sendCommandEhPKvj+0x9c>
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	4413      	add	r3, r2
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	4053      	eors	r3, r2
 8001130:	b2db      	uxtb	r3, r3
 8001132:	75fb      	strb	r3, [r7, #23]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	3301      	adds	r3, #1
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e7ef      	b.n	800111c <_ZN7RPLidar12_sendCommandEhPKvj+0x7c>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	75bb      	strb	r3, [r7, #22]
 8001142:	f107 0116 	add.w	r1, r7, #22
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	2201      	movs	r2, #1
 800114c:	4816      	ldr	r0, [pc, #88]	; (80011a8 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 800114e:	f007 fcfd 	bl	8008b4c <HAL_UART_Transmit>
 8001152:	4603      	mov	r3, r0
 8001154:	76fb      	strb	r3, [r7, #27]
 8001156:	7efb      	ldrb	r3, [r7, #27]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <_ZN7RPLidar12_sendCommandEhPKvj+0xc0>
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 800115e:	e01e      	b.n	800119e <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	b29a      	uxth	r2, r3
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	480f      	ldr	r0, [pc, #60]	; (80011a8 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 800116c:	f007 fcee 	bl	8008b4c <HAL_UART_Transmit>
 8001170:	4603      	mov	r3, r0
 8001172:	76fb      	strb	r3, [r7, #27]
 8001174:	7efb      	ldrb	r3, [r7, #27]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <_ZN7RPLidar12_sendCommandEhPKvj+0xde>
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 800117c:	e00f      	b.n	800119e <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
 800117e:	f107 0117 	add.w	r1, r7, #23
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	2201      	movs	r2, #1
 8001188:	4807      	ldr	r0, [pc, #28]	; (80011a8 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 800118a:	f007 fcdf 	bl	8008b4c <HAL_UART_Transmit>
 800118e:	4603      	mov	r3, r0
 8001190:	76fb      	strb	r3, [r7, #27]
 8001192:	7efb      	ldrb	r3, [r7, #27]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <_ZN7RPLidar12_sendCommandEhPKvj+0xfc>
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 800119a:	e000      	b.n	800119e <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
 800119c:	2300      	movs	r3, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000a74 	.word	0x20000a74
 80011ac:	80008001 	.word	0x80008001

080011b0 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>:
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	f003 fc4e 	bl	8004a5c <HAL_GetTick>
 80011c0:	61b8      	str	r0, [r7, #24]
 80011c2:	2300      	movs	r3, #0
 80011c4:	77fb      	strb	r3, [r7, #31]
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	f003 fc47 	bl	8004a5c <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	bf8c      	ite	hi
 80011da:	2301      	movhi	r3, #1
 80011dc:	2300      	movls	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d039      	beq.n	8001258 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa8>
 80011e4:	f003 fc3a 	bl	8004a5c <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	1a9a      	subs	r2, r3, r2
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	f107 0112 	add.w	r1, r7, #18
 80011f6:	2201      	movs	r2, #1
 80011f8:	481a      	ldr	r0, [pc, #104]	; (8001264 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb4>)
 80011fa:	f007 fd39 	bl	8008c70 <HAL_UART_Receive>
 80011fe:	4603      	mov	r3, r0
 8001200:	74fb      	strb	r3, [r7, #19]
 8001202:	7cfb      	ldrb	r3, [r7, #19]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d11f      	bne.n	8001248 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x98>
 8001208:	7ffb      	ldrb	r3, [r7, #31]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x64>
 800120e:	2b01      	cmp	r3, #1
 8001210:	d004      	beq.n	800121c <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x6c>
 8001212:	e00c      	b.n	800122e <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7e>
 8001214:	7cbb      	ldrb	r3, [r7, #18]
 8001216:	2ba5      	cmp	r3, #165	; 0xa5
 8001218:	d006      	beq.n	8001228 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x78>
 800121a:	e01c      	b.n	8001256 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa6>
 800121c:	7cbb      	ldrb	r3, [r7, #18]
 800121e:	2b5a      	cmp	r3, #90	; 0x5a
 8001220:	d004      	beq.n	800122c <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7c>
 8001222:	2300      	movs	r3, #0
 8001224:	77fb      	strb	r3, [r7, #31]
 8001226:	e016      	b.n	8001256 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa6>
 8001228:	bf00      	nop
 800122a:	e000      	b.n	800122e <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7e>
 800122c:	bf00      	nop
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	77fa      	strb	r2, [r7, #31]
 8001234:	461a      	mov	r2, r3
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	4413      	add	r3, r2
 800123a:	7cba      	ldrb	r2, [r7, #18]
 800123c:	701a      	strb	r2, [r3, #0]
 800123e:	7ffb      	ldrb	r3, [r7, #31]
 8001240:	2b07      	cmp	r3, #7
 8001242:	d1c2      	bne.n	80011ca <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x1a>
 8001244:	2300      	movs	r3, #0
 8001246:	e008      	b.n	800125a <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
 8001248:	7cfb      	ldrb	r3, [r7, #19]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d101      	bne.n	8001252 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa2>
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb8>)
 8001250:	e003      	b.n	800125a <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xbc>)
 8001254:	e001      	b.n	800125a <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
 8001256:	e7b8      	b.n	80011ca <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x1a>
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb8>)
 800125a:	4618      	mov	r0, r3
 800125c:	3720      	adds	r7, #32
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000a74 	.word	0x20000a74
 8001268:	80008002 	.word	0x80008002
 800126c:	80008001 	.word	0x80008001

08001270 <_ZN7RPLidar4stopEv>:
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fe87 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 800127e:	4603      	mov	r3, r0
 8001280:	f083 0301 	eor.w	r3, r3, #1
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <_ZN7RPLidar4stopEv+0x1e>
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <_ZN7RPLidar4stopEv+0x38>)
 800128c:	e007      	b.n	800129e <_ZN7RPLidar4stopEv+0x2e>
 800128e:	2300      	movs	r3, #0
 8001290:	2200      	movs	r2, #0
 8001292:	2125      	movs	r1, #37	; 0x25
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff03 	bl	80010a0 <_ZN7RPLidar12_sendCommandEhPKvj>
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	80008001 	.word	0x80008001

080012ac <_ZN7RPLidar9startScanEbm>:
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	460b      	mov	r3, r1
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	72fb      	strb	r3, [r7, #11]
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff fe66 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f083 0301 	eor.w	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <_ZN7RPLidar9startScanEbm+0x24>
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <_ZN7RPLidar9startScanEbm+0x9c>)
 80012ce:	e036      	b.n	800133e <_ZN7RPLidar9startScanEbm+0x92>
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f7ff ffcd 	bl	8001270 <_ZN7RPLidar4stopEv>
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <_ZN7RPLidar9startScanEbm+0x34>
 80012dc:	2321      	movs	r3, #33	; 0x21
 80012de:	e000      	b.n	80012e2 <_ZN7RPLidar9startScanEbm+0x36>
 80012e0:	2320      	movs	r3, #32
 80012e2:	77fb      	strb	r3, [r7, #31]
 80012e4:	7ff9      	ldrb	r1, [r7, #31]
 80012e6:	2300      	movs	r3, #0
 80012e8:	2200      	movs	r2, #0
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7ff fed8 	bl	80010a0 <_ZN7RPLidar12_sendCommandEhPKvj>
 80012f0:	61b8      	str	r0, [r7, #24]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	da01      	bge.n	80012fc <_ZN7RPLidar9startScanEbm+0x50>
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	e020      	b.n	800133e <_ZN7RPLidar9startScanEbm+0x92>
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4619      	mov	r1, r3
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f7ff ff53 	bl	80011b0 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>
 800130a:	61b8      	str	r0, [r7, #24]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	0fdb      	lsrs	r3, r3, #31
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <_ZN7RPLidar9startScanEbm+0x6e>
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	e011      	b.n	800133e <_ZN7RPLidar9startScanEbm+0x92>
 800131a:	7dbb      	ldrb	r3, [r7, #22]
 800131c:	2b81      	cmp	r3, #129	; 0x81
 800131e:	d002      	beq.n	8001326 <_ZN7RPLidar9startScanEbm+0x7a>
 8001320:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8001324:	e00b      	b.n	800133e <_ZN7RPLidar9startScanEbm+0x92>
 8001326:	8a7b      	ldrh	r3, [r7, #18]
 8001328:	8aba      	ldrh	r2, [r7, #20]
 800132a:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800132e:	0412      	lsls	r2, r2, #16
 8001330:	4313      	orrs	r3, r2
 8001332:	2b04      	cmp	r3, #4
 8001334:	d802      	bhi.n	800133c <_ZN7RPLidar9startScanEbm+0x90>
 8001336:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 800133a:	e000      	b.n	800133e <_ZN7RPLidar9startScanEbm+0x92>
 800133c:	2300      	movs	r3, #0
 800133e:	4618      	mov	r0, r3
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	80008001 	.word	0x80008001

0800134c <_ZN7RPLidar12getDistancesEv>:
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	330c      	adds	r3, #12
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_ZN7RPLidar12getDistancesEi>:
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	3302      	adds	r3, #2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	3304      	adds	r3, #4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eeb0 0a67 	vmov.f32	s0, s15
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <_ZN7RPLidar9constrainElll>:
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dd01      	ble.n	80013a8 <_ZN7RPLidar9constrainElll+0x1a>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	da01      	bge.n	80013b4 <_ZN7RPLidar9constrainElll+0x26>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <_ZN7RPLidar9waitPointEm>:
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	f003 fb41 	bl	8004a5c <HAL_GetTick>
 80013da:	62b8      	str	r0, [r7, #40]	; 0x28
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80013e8:	f003 fb38 	bl	8004a5c <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	6a3a      	ldr	r2, [r7, #32]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	bf94      	ite	ls
 80013fc:	2301      	movls	r3, #1
 80013fe:	2300      	movhi	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 80b7 	beq.w	8001576 <_ZN7RPLidar9waitPointEm+0x1aa>
 8001408:	f107 010b 	add.w	r1, r7, #11
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2201      	movs	r2, #1
 8001410:	485b      	ldr	r0, [pc, #364]	; (8001580 <_ZN7RPLidar9waitPointEm+0x1b4>)
 8001412:	f007 fc2d 	bl	8008c70 <HAL_UART_Receive>
 8001416:	4603      	mov	r3, r0
 8001418:	77fb      	strb	r3, [r7, #31]
 800141a:	7ffb      	ldrb	r3, [r7, #31]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f040 80a8 	bne.w	8001572 <_ZN7RPLidar9waitPointEm+0x1a6>
 8001422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <_ZN7RPLidar9waitPointEm+0x64>
 800142a:	2b01      	cmp	r3, #1
 800142c:	d00c      	beq.n	8001448 <_ZN7RPLidar9waitPointEm+0x7c>
 800142e:	e017      	b.n	8001460 <_ZN7RPLidar9waitPointEm+0x94>
 8001430:	7afb      	ldrb	r3, [r7, #11]
 8001432:	085b      	lsrs	r3, r3, #1
 8001434:	77bb      	strb	r3, [r7, #30]
 8001436:	7afa      	ldrb	r2, [r7, #11]
 8001438:	7fbb      	ldrb	r3, [r7, #30]
 800143a:	4053      	eors	r3, r2
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <_ZN7RPLidar9waitPointEm+0x8e>
 8001446:	e095      	b.n	8001574 <_ZN7RPLidar9waitPointEm+0x1a8>
 8001448:	7afb      	ldrb	r3, [r7, #11]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <_ZN7RPLidar9waitPointEm+0x92>
 8001452:	2300      	movs	r3, #0
 8001454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001458:	e08c      	b.n	8001574 <_ZN7RPLidar9waitPointEm+0x1a8>
 800145a:	bf00      	nop
 800145c:	e000      	b.n	8001460 <_ZN7RPLidar9waitPointEm+0x94>
 800145e:	bf00      	nop
 8001460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800146a:	461a      	mov	r2, r3
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	4413      	add	r3, r2
 8001470:	7afa      	ldrb	r2, [r7, #11]
 8001472:	701a      	strb	r2, [r3, #0]
 8001474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001478:	2b05      	cmp	r3, #5
 800147a:	d1b5      	bne.n	80013e8 <_ZN7RPLidar9waitPointEm+0x1c>
 800147c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8001480:	b29b      	uxth	r3, r3
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800148e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	edc3 7a00 	vstr	s15, [r3]
 8001498:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800149c:	b29b      	uxth	r3, r3
 800149e:	085b      	lsrs	r3, r3, #1
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014aa:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001584 <_ZN7RPLidar9waitPointEm+0x1b8>
 80014ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80014ba:	2200      	movs	r2, #0
 80014bc:	ee17 1a90 	vmov	r1, s15
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff64 	bl	800138e <_ZN7RPLidar9constrainElll>
 80014c6:	eef0 7a40 	vmov.f32	s15, s0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edc3 7a01 	vstr	s15, [r3, #4]
 80014d0:	7b3b      	ldrb	r3, [r7, #12]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	721a      	strb	r2, [r3, #8]
 80014da:	7b3b      	ldrb	r3, [r7, #12]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf14      	ite	ne
 80014e4:	2301      	movne	r3, #1
 80014e6:	2300      	moveq	r3, #0
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	725a      	strb	r2, [r3, #9]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80014fe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001588 <_ZN7RPLidar9waitPointEm+0x1bc>
 8001502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	dd30      	ble.n	800156e <_ZN7RPLidar9waitPointEm+0x1a2>
 800150c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001518:	db29      	blt.n	800156e <_ZN7RPLidar9waitPointEm+0x1a2>
 800151a:	edd7 7a06 	vldr	s15, [r7, #24]
 800151e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800158c <_ZN7RPLidar9waitPointEm+0x1c0>
 8001522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	d820      	bhi.n	800156e <_ZN7RPLidar9waitPointEm+0x1a2>
 800152c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001534:	ee17 3a90 	vmov	r3, s15
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	3302      	adds	r3, #2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	3304      	adds	r3, #4
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ed97 7a05 	vldr	s14, [r7, #20]
 800154a:	eeb4 7a67 	vcmp.f32	s14, s15
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	d00c      	beq.n	800156e <_ZN7RPLidar9waitPointEm+0x1a2>
 8001554:	edd7 7a06 	vldr	s15, [r7, #24]
 8001558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155c:	ee17 3a90 	vmov	r3, s15
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	3302      	adds	r3, #2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	3304      	adds	r3, #4
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	2300      	movs	r3, #0
 8001570:	e002      	b.n	8001578 <_ZN7RPLidar9waitPointEm+0x1ac>
 8001572:	bf00      	nop
 8001574:	e738      	b.n	80013e8 <_ZN7RPLidar9waitPointEm+0x1c>
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <_ZN7RPLidar9waitPointEm+0x1c4>)
 8001578:	4618      	mov	r0, r3
 800157a:	3730      	adds	r7, #48	; 0x30
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000a74 	.word	0x20000a74
 8001584:	42800000 	.word	0x42800000
 8001588:	43160000 	.word	0x43160000
 800158c:	43b40000 	.word	0x43b40000
 8001590:	80008002 	.word	0x80008002

08001594 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ba:	d205      	bcs.n	80015c8 <_ZSt16__deque_buf_sizej+0x1c>
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	e000      	b.n	80015ca <_ZSt16__deque_buf_sizej+0x1e>
 80015c8:	2301      	movs	r3, #1
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_ZN7EncoderC1EP17TIM_HandleTypeDef>:
#include  <cmath>

class Encoder
{
public:
	Encoder(TIM_HandleTypeDef* _encTim)
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
		:encTim(_encTim)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	60da      	str	r2, [r3, #12]
	{
		//HAL_TIM_Encoder_Start(_encTim, TIM_CHANNEL_1);
	};
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_ZN7Encoder7handlerEv>:

	void handler() {
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
		encoderValue = (int32_t)__HAL_TIM_GET_COUNTER(encTim);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	461a      	mov	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(encTim, 0);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_ZN7Encoder15getEncoderValueEv>:

	int32_t getEncoderValue(){
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
		return encoderValue;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
	}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f001 fa0c 	bl	8002a5e <_ZNSaIfED1Ev>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4618      	mov	r0, r3
 800165c:	f001 f9ef 	bl	8002a3e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <_ZNSt6vectorIfSaIfEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ffeb 	bl	8001650 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_ZN7BFilterC1Ev>:
#include <vector> // Для использования std::vector (если нужно)

class BFilter {
public:
    // Конструктор по умолчанию
    BFilter() {
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ffeb 	bl	800166a <_ZNSt6vectorIfSaIfEEC1Ev>
        // Инициализация коэффициентов фильтра нулями
        coefs = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	2305      	movs	r3, #5
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80016b8:	f001 fa11 	bl	8002ade <_ZNSt6vectorIfSaIfEEaSESt16initializer_listIfE>
        initializeStates();
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f86f 	bl	80017a0 <_ZN7BFilter16initializeStatesEv>
    }
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4618      	mov	r0, r3
 80016c6:	3728      	adds	r7, #40	; 0x28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_ZN7BFilter4calcEf>:
            coefs = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
        }
        initializeStates();
    }
    // Метод для вычисления отфильтрованного значения
    float calc(float inData) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	ed2d 8b02 	vpush	{d8}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	ed87 0a00 	vstr	s0, [r7]
        // Вычисление выходного значения по разностному уравнению
        float y = coefs[2] * inData + coefs[3] * x1 + coefs[4] * x2 - coefs[0] * y1 - coefs[1] * y2;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2102      	movs	r1, #2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f001 fa27 	bl	8002b34 <_ZNSt6vectorIfSaIfEEixEj>
 80016e6:	4603      	mov	r3, r0
 80016e8:	ed93 7a00 	vldr	s14, [r3]
 80016ec:	edd7 7a00 	vldr	s15, [r7]
 80016f0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2103      	movs	r1, #3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f001 fa1b 	bl	8002b34 <_ZNSt6vectorIfSaIfEEixEj>
 80016fe:	4603      	mov	r3, r0
 8001700:	ed93 7a00 	vldr	s14, [r3]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	edd3 7a03 	vldr	s15, [r3, #12]
 800170a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2104      	movs	r1, #4
 8001716:	4618      	mov	r0, r3
 8001718:	f001 fa0c 	bl	8002b34 <_ZNSt6vectorIfSaIfEEixEj>
 800171c:	4603      	mov	r3, r0
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	edd3 7a04 	vldr	s15, [r3, #16]
 8001728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f001 f9fd 	bl	8002b34 <_ZNSt6vectorIfSaIfEEixEj>
 800173a:	4603      	mov	r3, r0
 800173c:	ed93 7a00 	vldr	s14, [r3]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	edd3 7a05 	vldr	s15, [r3, #20]
 8001746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2101      	movs	r1, #1
 8001752:	4618      	mov	r0, r3
 8001754:	f001 f9ee 	bl	8002b34 <_ZNSt6vectorIfSaIfEEixEj>
 8001758:	4603      	mov	r3, r0
 800175a:	ed93 7a00 	vldr	s14, [r3]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	edd3 7a06 	vldr	s15, [r3, #24]
 8001764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001768:	ee78 7a67 	vsub.f32	s15, s16, s15
 800176c:	edc7 7a03 	vstr	s15, [r7, #12]

        // Обновление состояний фильтра
        x2 = x1;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	611a      	str	r2, [r3, #16]
        x1 = inData;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	60da      	str	r2, [r3, #12]
        y2 = y1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	619a      	str	r2, [r3, #24]
        y1 = y;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	615a      	str	r2, [r3, #20]

        return y;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	ee07 3a90 	vmov	s15, r3
    }
 8001792:	eeb0 0a67 	vmov.f32	s0, s15
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	ecbd 8b02 	vpop	{d8}
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_ZN7BFilter16initializeStatesEv>:
    // Метод для инициализации состояний фильтра
    void initializeStates() {
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
        x1 = 0.0f;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
        x2 = 0.0f;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
        y1 = 0.0f;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
        y2 = 0.0f;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
    }
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_ZN3PIDC1Eddd>:


class PID {
public:
    PID(double kp, double ki, double kd)
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	61f8      	str	r0, [r7, #28]
 80017dc:	ed87 0b04 	vstr	d0, [r7, #16]
 80017e0:	ed87 1b02 	vstr	d1, [r7, #8]
 80017e4:	ed87 2b00 	vstr	d2, [r7]
        : kp(kp), ki(ki), kd(kd), prevError(0), integral(0) {
 80017e8:	69f9      	ldr	r1, [r7, #28]
 80017ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017ee:	e9c1 2300 	strd	r2, r3, [r1]
 80017f2:	69f9      	ldr	r1, [r7, #28]
 80017f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80017fc:	69f9      	ldr	r1, [r7, #28]
 80017fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001802:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001806:	69f9      	ldr	r1, [r7, #28]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001814:	69f9      	ldr	r1, [r7, #28]
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    }
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4618      	mov	r0, r3
 8001826:	3724      	adds	r7, #36	; 0x24
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <_ZN3PID9calculateEdd>:

    // Метод для расчета управляющего воздействия
    double calculate(double target, double current) {
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6178      	str	r0, [r7, #20]
 8001838:	ed87 0b02 	vstr	d0, [r7, #8]
 800183c:	ed87 1b00 	vstr	d1, [r7]
        double error = target - current;
 8001840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001844:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001848:	f7fe fd26 	bl	8000298 <__aeabi_dsub>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	e9c7 2308 	strd	r2, r3, [r7, #32]
        integral += error; // Накопление интегральной ошибки
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800185a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800185e:	f7fe fd1d 	bl	800029c <__adddf3>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	6979      	ldr	r1, [r7, #20]
 8001868:	e9c1 2308 	strd	r2, r3, [r1, #32]
        double derivative = error - prevError; // Разница ошибок
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001872:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001876:	f7fe fd0f 	bl	8000298 <__aeabi_dsub>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        prevError = error;
 8001882:	6979      	ldr	r1, [r7, #20]
 8001884:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001888:	e9c1 2306 	strd	r2, r3, [r1, #24]

        return kp * error + ki * integral + kd * derivative;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001892:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001896:	f7fe feb7 	bl	8000608 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4614      	mov	r4, r2
 80018a0:	461d      	mov	r5, r3
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80018ae:	f7fe feab 	bl	8000608 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4620      	mov	r0, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	f7fe fcef 	bl	800029c <__adddf3>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4614      	mov	r4, r2
 80018c4:	461d      	mov	r5, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80018cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018d0:	f7fe fe9a 	bl	8000608 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fcde 	bl	800029c <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	ec43 2b17 	vmov	d7, r2, r3
    }
 80018e8:	eeb0 0a47 	vmov.f32	s0, s14
 80018ec:	eef0 0a67 	vmov.f32	s1, s15
 80018f0:	3728      	adds	r7, #40	; 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bdb0      	pop	{r4, r5, r7, pc}

080018f6 <_ZN3PID5clearEv>:
    void clear(){
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
    	prevError = 0;
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9c1 2306 	strd	r2, r3, [r1, #24]
    	integral = 0;
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9c1 2308 	strd	r2, r3, [r1, #32]
    }
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <_Z9constrainlll>:
#include  <cmath>

#ifndef INC_MOTOR_H_
#define INC_MOTOR_H_

	int32_t constrain(int32_t value,int32_t num1,int32_t num2){
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
		if (value>num2) value = num2;
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	dd01      	ble.n	800193e <_Z9constrainlll+0x18>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]
		if (value<num1) value = num1;
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	429a      	cmp	r2, r3
 8001944:	da01      	bge.n	800194a <_Z9constrainlll+0x24>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	60fb      	str	r3, [r7, #12]
		return value;
 800194a:	68fb      	ldr	r3, [r7, #12]
	}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_ZN7BFilterD1Ev>:
class BFilter {
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4618      	mov	r0, r3
 8001964:	f001 f8a0 	bl	8002aa8 <_ZNSt6vectorIfSaIfEED1Ev>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	0000      	movs	r0, r0
 8001974:	0000      	movs	r0, r0
	...

08001978 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>:

class Motor{

public:

	Motor(TIM_HandleTypeDef* _encTim,TIM_HandleTypeDef* _ctrlTim, uint8_t _ctrlTimCh):
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	70fb      	strb	r3, [r7, #3]
		ctrlTim(_ctrlTim),ctrlTimCh(_ctrlTimCh),enc(_encTim),pid(10,0.0005,1)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fe23 	bl	80015d6 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3310      	adds	r3, #16
 8001994:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 80019c8 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h+0x50>
 8001998:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 80019d0 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h+0x58>
 800199c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80019d8 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h+0x60>
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff17 	bl	80017d4 <_ZN3PIDC1Eddd>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3338      	adds	r3, #56	; 0x38
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fe6a 	bl	8001684 <_ZN7BFilterC1Ev>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	655a      	str	r2, [r3, #84]	; 0x54
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	659a      	str	r2, [r3, #88]	; 0x58
	{};
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	00000000 	.word	0x00000000
 80019cc:	3ff00000 	.word	0x3ff00000
 80019d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80019d4:	3f40624d 	.word	0x3f40624d
 80019d8:	00000000 	.word	0x00000000
 80019dc:	40240000 	.word	0x40240000

080019e0 <_ZN5Motor14setTargetSpeedEf>:
		return targetSpeed;
	}
	float getCurrentSpeed(){
		return currentSpeed;
	}
	void setTargetSpeed(float speed){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	ed87 0a00 	vstr	s0, [r7]
		targetSpeed = speed;
 80019ec:	edd7 7a00 	vldr	s15, [r7]
 80019f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f4:	ee17 2a90 	vmov	r2, s15
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	669a      	str	r2, [r3, #104]	; 0x68
		targetSpeed = constrain(targetSpeed,-MAX_MOT_SPEED,MAX_MOT_SPEED);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a00:	2264      	movs	r2, #100	; 0x64
 8001a02:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff8d 	bl	8001926 <_Z9constrainlll>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	669a      	str	r2, [r3, #104]	; 0x68
	}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_ZN5Motor7handlerEv>:
	void handler(){
 8001a1a:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
		calcCurSpeedMotor();
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f849 	bl	8001abc <_ZN5Motor17calcCurSpeedMotorEv>
		pidClear();
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f828 	bl	8001a80 <_ZN5Motor8pidClearEv>
		setMotorPWM((int32_t)pid.calculate(targetSpeed, currentSpeed));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f103 0410 	add.w	r4, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd7a 	bl	8000534 <__aeabi_i2d>
 8001a40:	4680      	mov	r8, r0
 8001a42:	4689      	mov	r9, r1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd73 	bl	8000534 <__aeabi_i2d>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	ec43 2b11 	vmov	d1, r2, r3
 8001a56:	ec49 8b10 	vmov	d0, r8, r9
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f7ff fee8 	bl	8001830 <_ZN3PID9calculateEdd>
 8001a60:	ec53 2b10 	vmov	r2, r3, d0
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f87e 	bl	8000b68 <__aeabi_d2iz>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4619      	mov	r1, r3
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f855 	bl	8001b20 <_ZN5Motor11setMotorPWMEl>
	}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

08001a80 <_ZN5Motor8pidClearEv>:

	void pidClear(){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
		static bool helpFlag = true;
		bool targFlag = (bool)targetSpeed;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bf14      	ite	ne
 8001a90:	2301      	movne	r3, #1
 8001a92:	2300      	moveq	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
		if(helpFlag!=targFlag) {
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <_ZN5Motor8pidClearEv+0x38>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d007      	beq.n	8001ab0 <_ZN5Motor8pidClearEv+0x30>
			pid.clear();
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3310      	adds	r3, #16
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff26 	bl	80018f6 <_ZN3PID5clearEv>
			helpFlag = targFlag;
 8001aaa:	4a03      	ldr	r2, [pc, #12]	; (8001ab8 <_ZN5Motor8pidClearEv+0x38>)
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	7013      	strb	r3, [r2, #0]
		}
	}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000000 	.word	0x20000000

08001abc <_ZN5Motor17calcCurSpeedMotorEv>:

private:

	void calcCurSpeedMotor(){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
				enc.handler();
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fd94 	bl	80015f4 <_ZN7Encoder7handlerEv>
				currentSpeed = ((enc.getEncoderValue())*60)/(ENC_MAX);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fda6 	bl	8001620 <_ZN7Encoder15getEncoderValueEv>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <_ZN5Motor17calcCurSpeedMotorEv+0x60>)
 8001ad8:	fb82 1203 	smull	r1, r2, r2, r3
 8001adc:	441a      	add	r2, r3
 8001ade:	1112      	asrs	r2, r2, #4
 8001ae0:	17db      	asrs	r3, r3, #31
 8001ae2:	1ad2      	subs	r2, r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	665a      	str	r2, [r3, #100]	; 0x64
				currentSpeed = filt.calc(currentSpeed);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afa:	eeb0 0a67 	vmov.f32	s0, s15
 8001afe:	4610      	mov	r0, r2
 8001b00:	f7ff fde4 	bl	80016cc <_ZN7BFilter4calcEf>
 8001b04:	eef0 7a40 	vmov.f32	s15, s0
 8001b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b0c:	ee17 2a90 	vmov	r2, s15
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	665a      	str	r2, [r3, #100]	; 0x64
		}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	88888889 	.word	0x88888889

08001b20 <_ZN5Motor11setMotorPWMEl>:
	void setMotorPWM(int32_t PWM){
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]


		if (ctrlTimCh == CHANNEL1||ctrlTimCh == CHANNEL2){
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d003      	beq.n	8001b3a <_ZN5Motor11setMotorPWMEl+0x1a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d11f      	bne.n	8001b7a <_ZN5Motor11setMotorPWMEl+0x5a>
			if (PWM>0){
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	dd0a      	ble.n	8001b56 <_ZN5Motor11setMotorPWMEl+0x36>
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_1, ZERO);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2200      	movs	r2, #0
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_2, PWM);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	639a      	str	r2, [r3, #56]	; 0x38
 8001b54:	e011      	b.n	8001b7a <_ZN5Motor11setMotorPWMEl+0x5a>
			}

			else if (PWM<0){
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	da0e      	bge.n	8001b7a <_ZN5Motor11setMotorPWMEl+0x5a>
				PWM = abs(PWM);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bfb8      	it	lt
 8001b62:	425b      	neglt	r3, r3
 8001b64:	603b      	str	r3, [r7, #0]
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_2, ZERO);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_1, PWM);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}

		if (ctrlTimCh == CHANNEL3||ctrlTimCh == CHANNEL4){
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d003      	beq.n	8001b8a <_ZN5Motor11setMotorPWMEl+0x6a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d11f      	bne.n	8001bca <_ZN5Motor11setMotorPWMEl+0xaa>
			if (PWM>0){
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	dd0a      	ble.n	8001ba6 <_ZN5Motor11setMotorPWMEl+0x86>
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, ZERO);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2200      	movs	r2, #0
 8001b98:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, PWM);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40
				PWM = abs(PWM);
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, ZERO);
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, PWM);
			}
		}
	}
 8001ba4:	e011      	b.n	8001bca <_ZN5Motor11setMotorPWMEl+0xaa>
			else if (PWM<0){
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	da0e      	bge.n	8001bca <_ZN5Motor11setMotorPWMEl+0xaa>
				PWM = abs(PWM);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	bfb8      	it	lt
 8001bb2:	425b      	neglt	r3, r3
 8001bb4:	603b      	str	r3, [r7, #0]
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, ZERO);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, PWM);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_ZN5MotorD1Ev>:
class Motor{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3338      	adds	r3, #56	; 0x38
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff feb8 	bl	8001958 <_ZN7BFilterD1Ev>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <_ZN6TelegaC1Ev>:

class Telega{

public:

	Telega():
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
		leftMotor(ENC_LEFT_TIM,MOT_L_PWM_TIM,CHANNEL3),
		rightMotor(ENC_RIGHT_TIM,MOT_R_PWM_TIM,CHANNEL1)
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	2303      	movs	r3, #3
 8001c00:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <_ZN6TelegaC1Ev+0x30>)
 8001c02:	4909      	ldr	r1, [pc, #36]	; (8001c28 <_ZN6TelegaC1Ev+0x34>)
 8001c04:	f7ff feb8 	bl	8001978 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8001c0e:	2301      	movs	r3, #1
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <_ZN6TelegaC1Ev+0x30>)
 8001c12:	4906      	ldr	r1, [pc, #24]	; (8001c2c <_ZN6TelegaC1Ev+0x38>)
 8001c14:	f7ff feb0 	bl	8001978 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>
	{};
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200009e4 	.word	0x200009e4
 8001c28:	2000099c 	.word	0x2000099c
 8001c2c:	20000a2c 	.word	0x20000a2c

08001c30 <_ZN6Telega7handlerEv>:

	void handler(){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
			leftMotor.handler();
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff feed 	bl	8001a1a <_ZN5Motor7handlerEv>
			rightMotor.handler();
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3370      	adds	r3, #112	; 0x70
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fee8 	bl	8001a1a <_ZN5Motor7handlerEv>
	}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_ZN6Telega13setRobotSpeedEll>:
	void setRobotSpeed(int32_t linSpeed, int32_t angSpeed){
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
		setMotorSpeed(linSpeed-angSpeed,linSpeed+angSpeed);
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	1ad1      	subs	r1, r2, r3
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f804 	bl	8001c7a <_ZN6Telega13setMotorSpeedEll>
	}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_ZN6Telega13setMotorSpeedEll>:


private:

	void setMotorSpeed(int32_t lSpd, int32_t rSpd){
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
			leftMotor.setTargetSpeed(lSpd);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	ee07 2a90 	vmov	s15, r2
 8001c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c92:	eeb0 0a67 	vmov.f32	s0, s15
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fea2 	bl	80019e0 <_ZN5Motor14setTargetSpeedEf>
			rightMotor.setTargetSpeed(-rSpd);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	425b      	negs	r3, r3
 8001ca6:	ee07 3a90 	vmov	s15, r3
 8001caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cae:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f7ff fe94 	bl	80019e0 <_ZN5Motor14setTargetSpeedEf>
	}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_ZN10TanControl16calcTgtRobotSpdsEff>:
	float ang;
};

class TanControl{
public:
	Spd calcTgtRobotSpds(float dist, float ang) {
 8001cc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cc4:	b088      	sub	sp, #32
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6178      	str	r0, [r7, #20]
 8001cca:	ed87 0a04 	vstr	s0, [r7, #16]
 8001cce:	edc7 0a03 	vstr	s1, [r7, #12]
		clearSpd();
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	f000 f8fa 	bl	8001ecc <_ZN10TanControl8clearSpdEv>
		spd.lin = MAX_MOT_SPEED * tanh(dist) * cos(ang);
 8001cd8:	6938      	ldr	r0, [r7, #16]
 8001cda:	f7fe fc3d 	bl	8000558 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	ec43 2b10 	vmov	d0, r2, r3
 8001ce6:	f008 f86b 	bl	8009dc0 <tanh>
 8001cea:	ec51 0b10 	vmov	r0, r1, d0
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <_ZN10TanControl16calcTgtRobotSpdsEff+0x120>)
 8001cf4:	f7fe fc88 	bl	8000608 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4614      	mov	r4, r2
 8001cfe:	461d      	mov	r5, r3
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f7fe fc29 	bl	8000558 <__aeabi_f2d>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	ec43 2b10 	vmov	d0, r2, r3
 8001d0e:	f007 ffab 	bl	8009c68 <cos>
 8001d12:	ec53 2b10 	vmov	r2, r3, d0
 8001d16:	4620      	mov	r0, r4
 8001d18:	4629      	mov	r1, r5
 8001d1a:	f7fe fc75 	bl	8000608 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe ff47 	bl	8000bb8 <__aeabi_d2f>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	601a      	str	r2, [r3, #0]
		spd.ang = K_ANG * ang + spd.lin * sin(ang) / dist;
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f7fe fc11 	bl	8000558 <__aeabi_f2d>
 8001d36:	a328      	add	r3, pc, #160	; (adr r3, 8001dd8 <_ZN10TanControl16calcTgtRobotSpdsEff+0x118>)
 8001d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3c:	f7fe fc64 	bl	8000608 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4690      	mov	r8, r2
 8001d46:	4699      	mov	r9, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fc03 	bl	8000558 <__aeabi_f2d>
 8001d52:	4604      	mov	r4, r0
 8001d54:	460d      	mov	r5, r1
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f7fe fbfe 	bl	8000558 <__aeabi_f2d>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	ec43 2b10 	vmov	d0, r2, r3
 8001d64:	f007 ffd4 	bl	8009d10 <sin>
 8001d68:	ec53 2b10 	vmov	r2, r3, d0
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	4629      	mov	r1, r5
 8001d70:	f7fe fc4a 	bl	8000608 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4614      	mov	r4, r2
 8001d7a:	461d      	mov	r5, r3
 8001d7c:	6938      	ldr	r0, [r7, #16]
 8001d7e:	f7fe fbeb 	bl	8000558 <__aeabi_f2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4620      	mov	r0, r4
 8001d88:	4629      	mov	r1, r5
 8001d8a:	f7fe fd67 	bl	800085c <__aeabi_ddiv>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4640      	mov	r0, r8
 8001d94:	4649      	mov	r1, r9
 8001d96:	f7fe fa81 	bl	800029c <__adddf3>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7fe ff09 	bl	8000bb8 <__aeabi_d2f>
 8001da6:	4602      	mov	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	605a      	str	r2, [r3, #4]
		return spd;
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	f107 0318 	add.w	r3, r7, #24
 8001db2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001db6:	e883 0003 	stmia.w	r3, {r0, r1}
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	ee07 2a10 	vmov	s14, r2
 8001dc2:	ee07 3a90 	vmov	s15, r3
	}
 8001dc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001dca:	eef0 0a67 	vmov.f32	s1, s15
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dd6:	bf00      	nop
 8001dd8:	47ae147b 	.word	0x47ae147b
 8001ddc:	3fb47ae1 	.word	0x3fb47ae1
 8001de0:	40590000 	.word	0x40590000

08001de4 <_ZN10TanControl13getErrorAngleEPf>:

	float getErrorAngle(float *distances){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
		int32_t errorAngle = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
		int32_t minDistance = 10000;
 8001df2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001df6:	613b      	str	r3, [r7, #16]
		  for(int i = 0;i<=360;i++){
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001e02:	dc2f      	bgt.n	8001e64 <_ZN10TanControl13getErrorAngleEPf+0x80>

			  if(distances[i]<minDistance){
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	ed93 7a00 	vldr	s14, [r3]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	d51b      	bpl.n	8001e5c <_ZN10TanControl13getErrorAngleEPf+0x78>
				  minDistance = distances[i];
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e34:	ee17 3a90 	vmov	r3, s15
 8001e38:	613b      	str	r3, [r7, #16]
				  errorAngle = limitAng(i);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e44:	eeb0 0a67 	vmov.f32	s0, s15
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f815 	bl	8001e78 <_ZN10TanControl8limitAngEf>
 8001e4e:	eef0 7a40 	vmov.f32	s15, s0
 8001e52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e56:	ee17 3a90 	vmov	r3, s15
 8001e5a:	617b      	str	r3, [r7, #20]
		  for(int i = 0;i<=360;i++){
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	e7cb      	b.n	8001dfc <_ZN10TanControl13getErrorAngleEPf+0x18>
			  }
		  }
		  return errorAngle;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	}
 8001e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZN10TanControl8limitAngEf>:
private:
	float limitAng(float ang){
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	ed87 0a00 	vstr	s0, [r7]
		int32_t inAng = ang;
 8001e84:	edd7 7a00 	vldr	s15, [r7]
 8001e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e8c:	ee17 3a90 	vmov	r3, s15
 8001e90:	60fb      	str	r3, [r7, #12]
		while (inAng >= HALF_CIRCLE) {
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2bb3      	cmp	r3, #179	; 0xb3
 8001e96:	dd04      	ble.n	8001ea2 <_ZN10TanControl8limitAngEf+0x2a>
			inAng -= 2 * HALF_CIRCLE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e9e:	60fb      	str	r3, [r7, #12]
		while (inAng >= HALF_CIRCLE) {
 8001ea0:	e7f7      	b.n	8001e92 <_ZN10TanControl8limitAngEf+0x1a>
		}
		while (inAng <= -HALF_CIRCLE) {
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 8001ea8:	da04      	bge.n	8001eb4 <_ZN10TanControl8limitAngEf+0x3c>
			inAng += 2 * HALF_CIRCLE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eb0:	60fb      	str	r3, [r7, #12]
		while (inAng <= -HALF_CIRCLE) {
 8001eb2:	e7f6      	b.n	8001ea2 <_ZN10TanControl8limitAngEf+0x2a>
		}
		return inAng;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	}
 8001ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <_ZN10TanControl8clearSpdEv>:
	void clearSpd(){
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
		spd.lin = 0;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
		spd.ang = 0;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
	}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fe4b 	bl	8002b96 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_ZN6TelegaD1Ev>:
class Telega{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3370      	adds	r3, #112	; 0x70
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fe5d 	bl	8001bd6 <_ZN5MotorD1Ev>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fe59 	bl	8001bd6 <_ZN5MotorD1Ev>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <_ZN12ActionsQueueC1Ev>:

class ActionsQueue
{
public:
	
	ActionsQueue():pidl(10,0.0005,1){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fe17 	bl	8002b6e <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3328      	adds	r3, #40	; 0x28
 8001f44:	ed9f 2b0e 	vldr	d2, [pc, #56]	; 8001f80 <_ZN12ActionsQueueC1Ev+0x50>
 8001f48:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8001f88 <_ZN12ActionsQueueC1Ev+0x58>
 8001f4c:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8001f90 <_ZN12ActionsQueueC1Ev+0x60>
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fc3f 	bl	80017d4 <_ZN3PIDC1Eddd>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3350      	adds	r3, #80	; 0x50
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f824 	bl	8000fa8 <_ZN7RPLidarC1Ev>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fe44 	bl	8001bf4 <_ZN6TelegaC1Ev>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 26f0 	strb.w	r2, [r3, #1776]	; 0x6f0
	};
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	00000000 	.word	0x00000000
 8001f84:	3ff00000 	.word	0x3ff00000
 8001f88:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f8c:	3f40624d 	.word	0x3f40624d
 8001f90:	00000000 	.word	0x00000000
 8001f94:	40240000 	.word	0x40240000

08001f98 <_ZN12ActionsQueue4initEv>:
	void init(){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
		lid.begin();
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3350      	adds	r3, #80	; 0x50
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f839 	bl	800101c <_ZN7RPLidar5beginEv>
		lid.startScan();
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3350      	adds	r3, #80	; 0x50
 8001fae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f979 	bl	80012ac <_ZN7RPLidar9startScanEbm>
	}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <_ZN12ActionsQueue4pushE7ACTIONS>:

	void push(ACTIONS action) {
 8001fc2:	b590      	push	{r4, r7, lr}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	70fb      	strb	r3, [r7, #3]
		rQueue.push(RobotInstruction(action));
 8001fce:	687c      	ldr	r4, [r7, #4]
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 f973 	bl	80022c4 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f000 fdfb 	bl	8002be0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>
	};
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}

08001ff2 <_ZN12ActionsQueue7isClearEv>:
		while (!rQueue.empty()) {
			rQueue.pop();
		}
		delayInit = false;
	}
	bool isClear() {
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
		if (rQueue.size() == 0) {
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fe01 	bl	8002c04 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <_ZN12ActionsQueue7isClearEv+0x24>
			return true;
 8002012:	2301      	movs	r3, #1
 8002014:	e00f      	b.n	8002036 <_ZN12ActionsQueue7isClearEv+0x44>
		}
		else if (rQueue.front().robotAction == ACTIONS::IDLE) {
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	f000 fe19 	bl	8002c50 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 800201e:	4603      	mov	r3, r0
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf0c      	ite	eq
 8002026:	2301      	moveq	r3, #1
 8002028:	2300      	movne	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <_ZN12ActionsQueue7isClearEv+0x42>
			return true;
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <_ZN12ActionsQueue7isClearEv+0x44>
		}
		else {
			return false;
 8002034:	2300      	movs	r3, #0
		};
	}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <_ZN12ActionsQueue7handlerEv>:

	void handler(){
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
		telega.handler();
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fdef 	bl	8001c30 <_ZN6Telega7handlerEv>
	}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <_ZN12ActionsQueue9fastCycleEv>:

	void fastCycle() {
 800205c:	b5b0      	push	{r4, r5, r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

		float K,Y;
		if (rQueue.empty()) {
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fdd9 	bl	8002c1e <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5emptyEv>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00d      	beq.n	800208e <_ZN12ActionsQueue9fastCycleEv+0x32>
			rQueue.push(RobotInstruction(IDLE));
 8002072:	687c      	ldr	r4, [r7, #4]
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f922 	bl	80022c4 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4619      	mov	r1, r3
 8002086:	4620      	mov	r0, r4
 8002088:	f000 fdaa 	bl	8002be0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>
				break;
			default:
				break;
			}
		}
	};
 800208c:	e113      	b.n	80022b6 <_ZN12ActionsQueue9fastCycleEv+0x25a>
		else if ((rQueue.size() > 1) && (rQueue.front().robotAction == IDLE)) {
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4618      	mov	r0, r3
 8002092:	f000 fdb7 	bl	8002c04 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>
 8002096:	4603      	mov	r3, r0
 8002098:	2b01      	cmp	r3, #1
 800209a:	d909      	bls.n	80020b0 <_ZN12ActionsQueue9fastCycleEv+0x54>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fdd6 	bl	8002c50 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 80020a4:	4603      	mov	r3, r0
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <_ZN12ActionsQueue9fastCycleEv+0x54>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <_ZN12ActionsQueue9fastCycleEv+0x56>
 80020b0:	2300      	movs	r3, #0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d004      	beq.n	80020c0 <_ZN12ActionsQueue9fastCycleEv+0x64>
			rQueue.pop();
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fdbd 	bl	8002c38 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
	};
 80020be:	e0fa      	b.n	80022b6 <_ZN12ActionsQueue9fastCycleEv+0x25a>
			RobotInstruction _curInstr = rQueue.front();
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fdc4 	bl	8002c50 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020d2:	e883 0003 	stmia.w	r3, {r0, r1}
			if(IS_OK(lid.waitPoint())) ;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3350      	adds	r3, #80	; 0x50
 80020da:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff f974 	bl	80013cc <_ZN7RPLidar9waitPointEm>
			switch (_curInstr.robotAction)
 80020e4:	7b3b      	ldrb	r3, [r7, #12]
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	f200 80e2 	bhi.w	80022b0 <_ZN12ActionsQueue9fastCycleEv+0x254>
 80020ec:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <_ZN12ActionsQueue9fastCycleEv+0x98>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	080022b1 	.word	0x080022b1
 80020f8:	08002119 	.word	0x08002119
 80020fc:	08002133 	.word	0x08002133
 8002100:	0800214d 	.word	0x0800214d
 8002104:	08002169 	.word	0x08002169
 8002108:	0800219d 	.word	0x0800219d
 800210c:	080021b9 	.word	0x080021b9
 8002110:	08002253 	.word	0x08002253
 8002114:	08002183 	.word	0x08002183
				telega.setRobotSpeed(0,0);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fd95 	bl	8001c52 <_ZN6Telega13setRobotSpeedEll>
				rQueue.pop();
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fd84 	bl	8002c38 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002130:	e0c1      	b.n	80022b6 <_ZN12ActionsQueue9fastCycleEv+0x25a>
				telega.setRobotSpeed(0,TURN_SPEED);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002138:	2264      	movs	r2, #100	; 0x64
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fd88 	bl	8001c52 <_ZN6Telega13setRobotSpeedEll>
				rQueue.pop();
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	f000 fd77 	bl	8002c38 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 800214a:	e0b4      	b.n	80022b6 <_ZN12ActionsQueue9fastCycleEv+0x25a>
				telega.setRobotSpeed(0,-TURN_SPEED);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002152:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fd7a 	bl	8001c52 <_ZN6Telega13setRobotSpeedEll>
				rQueue.pop();
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fd69 	bl	8002c38 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002166:	e0a6      	b.n	80022b6 <_ZN12ActionsQueue9fastCycleEv+0x25a>
				telega.setRobotSpeed(MAX_MOT_SPEED*0.8,0);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800216e:	2200      	movs	r2, #0
 8002170:	2150      	movs	r1, #80	; 0x50
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fd6d 	bl	8001c52 <_ZN6Telega13setRobotSpeedEll>
				rQueue.pop();
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fd5c 	bl	8002c38 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002180:	e099      	b.n	80022b6 <_ZN12ActionsQueue9fastCycleEv+0x25a>
				telega.setRobotSpeed(MAX_MOT_SPEED,0);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002188:	2200      	movs	r2, #0
 800218a:	2164      	movs	r1, #100	; 0x64
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fd60 	bl	8001c52 <_ZN6Telega13setRobotSpeedEll>
				rQueue.pop();
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fd4f 	bl	8002c38 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 800219a:	e08c      	b.n	80022b6 <_ZN12ActionsQueue9fastCycleEv+0x25a>
				telega.setRobotSpeed(-MAX_MOT_SPEED*0.8, 0);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80021a2:	2200      	movs	r2, #0
 80021a4:	f06f 014f 	mvn.w	r1, #79	; 0x4f
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fd52 	bl	8001c52 <_ZN6Telega13setRobotSpeedEll>
				rQueue.pop();
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fd41 	bl	8002c38 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 80021b6:	e07e      	b.n	80022b6 <_ZN12ActionsQueue9fastCycleEv+0x25a>
				K = tan.getErrorAngle(lid.getDistances());
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f503 64dc 	add.w	r4, r3, #1760	; 0x6e0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3350      	adds	r3, #80	; 0x50
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff f8c2 	bl	800134c <_ZN7RPLidar12getDistancesEv>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4619      	mov	r1, r3
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7ff fe09 	bl	8001de4 <_ZN10TanControl13getErrorAngleEPf>
 80021d2:	ed87 0a07 	vstr	s0, [r7, #28]
				spd = tan.calcTgtRobotSpds(lid.getDistances((int32_t)K), K);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f503 64dc 	add.w	r4, r3, #1760	; 0x6e0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3350      	adds	r3, #80	; 0x50
 80021e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80021e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021e8:	ee17 1a90 	vmov	r1, s15
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff f8b9 	bl	8001364 <_ZN7RPLidar12getDistancesEi>
 80021f2:	eef0 7a40 	vmov.f32	s15, s0
 80021f6:	687d      	ldr	r5, [r7, #4]
 80021f8:	edd7 0a07 	vldr	s1, [r7, #28]
 80021fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002200:	4620      	mov	r0, r4
 8002202:	f7ff fd5d 	bl	8001cc0 <_ZN10TanControl16calcTgtRobotSpdsEff>
 8002206:	eeb0 7a40 	vmov.f32	s14, s0
 800220a:	eef0 7a60 	vmov.f32	s15, s1
 800220e:	462b      	mov	r3, r5
 8002210:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8002214:	ed83 7a00 	vstr	s14, [r3]
 8002218:	462b      	mov	r3, r5
 800221a:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 800221e:	edc3 7a00 	vstr	s15, [r3]
				telega.setRobotSpeed(spd.lin,spd.ang);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f503 60c0 	add.w	r0, r3, #1536	; 0x600
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002244:	ee17 2a90 	vmov	r2, s15
 8002248:	ee17 1a10 	vmov	r1, s14
 800224c:	f7ff fd01 	bl	8001c52 <_ZN6Telega13setRobotSpeedEll>
				break;
 8002250:	e031      	b.n	80022b6 <_ZN12ActionsQueue9fastCycleEv+0x25a>
				if (!delayInit) {
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 36f0 	ldrb.w	r3, [r3, #1776]	; 0x6f0
 8002258:	f083 0301 	eor.w	r3, r3, #1
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <_ZN12ActionsQueue9fastCycleEv+0x21a>
					delayInit = true;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 26f0 	strb.w	r2, [r3, #1776]	; 0x6f0
					delayBegin = HAL_GetTick();
 800226a:	f002 fbf7 	bl	8004a5c <HAL_GetTick>
 800226e:	4603      	mov	r3, r0
 8002270:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <_ZN12ActionsQueue9fastCycleEv+0x264>)
 8002272:	6013      	str	r3, [r2, #0]
				break;
 8002274:	e01e      	b.n	80022b4 <_ZN12ActionsQueue9fastCycleEv+0x258>
				else if (HAL_GetTick() - delayBegin >= (uint16_t)_curInstr.parametr) {
 8002276:	f002 fbf1 	bl	8004a5c <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <_ZN12ActionsQueue9fastCycleEv+0x264>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	edd7 7a04 	vldr	s15, [r7, #16]
 8002286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800228a:	ee17 2a90 	vmov	r2, s15
 800228e:	b292      	uxth	r2, r2
 8002290:	4293      	cmp	r3, r2
 8002292:	bf2c      	ite	cs
 8002294:	2301      	movcs	r3, #1
 8002296:	2300      	movcc	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <_ZN12ActionsQueue9fastCycleEv+0x258>
					rQueue.pop();
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fcc9 	bl	8002c38 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
					delayInit = false;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 26f0 	strb.w	r2, [r3, #1776]	; 0x6f0
				break;
 80022ae:	e001      	b.n	80022b4 <_ZN12ActionsQueue9fastCycleEv+0x258>
				break;
 80022b0:	bf00      	nop
 80022b2:	e000      	b.n	80022b6 <_ZN12ActionsQueue9fastCycleEv+0x25a>
				break;
 80022b4:	bf00      	nop
	};
 80022b6:	bf00      	nop
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bdb0      	pop	{r4, r5, r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000200 	.word	0x20000200

080022c4 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>:
		bool paramAvalible = false;
		bool pointAvalible = false;
		float parametr = 0;

		RobotInstruction() {};
		RobotInstruction(ACTIONS _action)
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
			: robotAction(_action) {};
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	705a      	strb	r2, [r3, #1]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	709a      	strb	r2, [r3, #2]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) // Проверяем, что прерывание от TIM3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d102      	bne.n	8002310 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        // Действия при срабатывании прерывания
    	Queue.handler();
 800230a:	4804      	ldr	r0, [pc, #16]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800230c:	f7ff fe97 	bl	800203e <_ZN12ActionsQueue7handlerEv>
    }
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40010000 	.word	0x40010000
 800231c:	20000208 	.word	0x20000208

08002320 <_Z4initv>:
void init(){
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	  //питание для левого энкодера
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800232a:	481c      	ldr	r0, [pc, #112]	; (800239c <_Z4initv+0x7c>)
 800232c:	f003 f812 	bl	8005354 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002330:	2201      	movs	r2, #1
 8002332:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002336:	4819      	ldr	r0, [pc, #100]	; (800239c <_Z4initv+0x7c>)
 8002338:	f003 f80c 	bl	8005354 <HAL_GPIO_WritePin>

	  //питание для правого энкодера
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800233c:	2200      	movs	r2, #0
 800233e:	2110      	movs	r1, #16
 8002340:	4817      	ldr	r0, [pc, #92]	; (80023a0 <_Z4initv+0x80>)
 8002342:	f003 f807 	bl	8005354 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002346:	2201      	movs	r2, #1
 8002348:	2120      	movs	r1, #32
 800234a:	4815      	ldr	r0, [pc, #84]	; (80023a0 <_Z4initv+0x80>)
 800234c:	f003 f802 	bl	8005354 <HAL_GPIO_WritePin>

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002350:	2100      	movs	r1, #0
 8002352:	4814      	ldr	r0, [pc, #80]	; (80023a4 <_Z4initv+0x84>)
 8002354:	f005 fb92 	bl	8007a7c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002358:	2104      	movs	r1, #4
 800235a:	4812      	ldr	r0, [pc, #72]	; (80023a4 <_Z4initv+0x84>)
 800235c:	f005 fb8e 	bl	8007a7c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002360:	2108      	movs	r1, #8
 8002362:	4810      	ldr	r0, [pc, #64]	; (80023a4 <_Z4initv+0x84>)
 8002364:	f005 fb8a 	bl	8007a7c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002368:	210c      	movs	r1, #12
 800236a:	480e      	ldr	r0, [pc, #56]	; (80023a4 <_Z4initv+0x84>)
 800236c:	f005 fb86 	bl	8007a7c <HAL_TIM_PWM_Start>

	  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8002370:	2100      	movs	r1, #0
 8002372:	480d      	ldr	r0, [pc, #52]	; (80023a8 <_Z4initv+0x88>)
 8002374:	f005 fcd8 	bl	8007d28 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8002378:	2104      	movs	r1, #4
 800237a:	480b      	ldr	r0, [pc, #44]	; (80023a8 <_Z4initv+0x88>)
 800237c:	f005 fcd4 	bl	8007d28 <HAL_TIM_Encoder_Start>

	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8002380:	2100      	movs	r1, #0
 8002382:	480a      	ldr	r0, [pc, #40]	; (80023ac <_Z4initv+0x8c>)
 8002384:	f005 fcd0 	bl	8007d28 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8002388:	2104      	movs	r1, #4
 800238a:	4808      	ldr	r0, [pc, #32]	; (80023ac <_Z4initv+0x8c>)
 800238c:	f005 fccc 	bl	8007d28 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Base_Start_IT(&htim1);
 8002390:	4807      	ldr	r0, [pc, #28]	; (80023b0 <_Z4initv+0x90>)
 8002392:	f005 fac1 	bl	8007918 <HAL_TIM_Base_Start_IT>

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40020000 	.word	0x40020000
 80023a0:	40020400 	.word	0x40020400
 80023a4:	200009e4 	.word	0x200009e4
 80023a8:	2000099c 	.word	0x2000099c
 80023ac:	20000a2c 	.word	0x20000a2c
 80023b0:	20000954 	.word	0x20000954

080023b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b8:	f002 faea 	bl	8004990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023bc:	f000 f826 	bl	800240c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023c0:	f000 faac 	bl	800291c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80023c4:	f000 fa7c 	bl	80028c0 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 80023c8:	f000 f892 	bl	80024f0 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80023cc:	f000 f924 	bl	8002618 <_ZL12MX_TIM2_Initv>
  MX_TIM4_Init();
 80023d0:	f000 fa18 	bl	8002804 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 80023d4:	f000 f97e 	bl	80026d4 <_ZL12MX_TIM3_Initv>
  MX_TIM1_Init();
 80023d8:	f000 f8be 	bl	8002558 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */

  init();
 80023dc:	f7ff ffa0 	bl	8002320 <_Z4initv>
  Queue.init();
 80023e0:	4809      	ldr	r0, [pc, #36]	; (8002408 <main+0x54>)
 80023e2:	f7ff fdd9 	bl	8001f98 <_ZN12ActionsQueue4initEv>
  HAL_Delay(100);
 80023e6:	2064      	movs	r0, #100	; 0x64
 80023e8:	f002 fb44 	bl	8004a74 <HAL_Delay>
	  green = tcs.getColorGreen();
	  blue = tcs.getColorBlue();
	  white = tcs.getColorWhite();
	*/

	  if(Queue.isClear()){
 80023ec:	4806      	ldr	r0, [pc, #24]	; (8002408 <main+0x54>)
 80023ee:	f7ff fe00 	bl	8001ff2 <_ZN12ActionsQueue7isClearEv>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <main+0x4c>
		  Queue.push(TURN_RIGHT); // Движение вперёд
 80023f8:	2103      	movs	r1, #3
 80023fa:	4803      	ldr	r0, [pc, #12]	; (8002408 <main+0x54>)
 80023fc:	f7ff fde1 	bl	8001fc2 <_ZN12ActionsQueue4pushE7ACTIONS>
	  }

      Queue.fastCycle();
 8002400:	4801      	ldr	r0, [pc, #4]	; (8002408 <main+0x54>)
 8002402:	f7ff fe2b 	bl	800205c <_ZN12ActionsQueue9fastCycleEv>
	  if(Queue.isClear()){
 8002406:	e7f1      	b.n	80023ec <main+0x38>
 8002408:	20000208 	.word	0x20000208

0800240c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b094      	sub	sp, #80	; 0x50
 8002410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002412:	f107 0320 	add.w	r3, r7, #32
 8002416:	2230      	movs	r2, #48	; 0x30
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f008 fffa 	bl	800b414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <_Z18SystemClock_Configv+0xdc>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	4a2b      	ldr	r2, [pc, #172]	; (80024e8 <_Z18SystemClock_Configv+0xdc>)
 800243a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243e:	6413      	str	r3, [r2, #64]	; 0x40
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <_Z18SystemClock_Configv+0xdc>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800244c:	2300      	movs	r3, #0
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	4b26      	ldr	r3, [pc, #152]	; (80024ec <_Z18SystemClock_Configv+0xe0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a25      	ldr	r2, [pc, #148]	; (80024ec <_Z18SystemClock_Configv+0xe0>)
 8002456:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	4b23      	ldr	r3, [pc, #140]	; (80024ec <_Z18SystemClock_Configv+0xe0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002468:	2301      	movs	r3, #1
 800246a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800246c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002472:	2302      	movs	r3, #2
 8002474:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002476:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800247c:	230c      	movs	r3, #12
 800247e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002480:	2360      	movs	r3, #96	; 0x60
 8002482:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002484:	2302      	movs	r3, #2
 8002486:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002488:	2304      	movs	r3, #4
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800248c:	f107 0320 	add.w	r3, r7, #32
 8002490:	4618      	mov	r0, r3
 8002492:	f004 fd99 	bl	8006fc8 <HAL_RCC_OscConfig>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf14      	ite	ne
 800249c:	2301      	movne	r3, #1
 800249e:	2300      	moveq	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80024a6:	f000 fac5 	bl	8002a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024aa:	230f      	movs	r3, #15
 80024ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024ae:	2302      	movs	r3, #2
 80024b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80024c0:	f107 030c 	add.w	r3, r7, #12
 80024c4:	2103      	movs	r1, #3
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 fff6 	bl	80074b8 <HAL_RCC_ClockConfig>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bf14      	ite	ne
 80024d2:	2301      	movne	r3, #1
 80024d4:	2300      	moveq	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80024dc:	f000 faaa 	bl	8002a34 <Error_Handler>
  }
}
 80024e0:	bf00      	nop
 80024e2:	3750      	adds	r7, #80	; 0x50
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40007000 	.word	0x40007000

080024f0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <_ZL12MX_I2C1_Initv+0x5c>)
 80024f6:	4a16      	ldr	r2, [pc, #88]	; (8002550 <_ZL12MX_I2C1_Initv+0x60>)
 80024f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024fa:	4b14      	ldr	r3, [pc, #80]	; (800254c <_ZL12MX_I2C1_Initv+0x5c>)
 80024fc:	4a15      	ldr	r2, [pc, #84]	; (8002554 <_ZL12MX_I2C1_Initv+0x64>)
 80024fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <_ZL12MX_I2C1_Initv+0x5c>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <_ZL12MX_I2C1_Initv+0x5c>)
 8002508:	2200      	movs	r2, #0
 800250a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <_ZL12MX_I2C1_Initv+0x5c>)
 800250e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002512:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002514:	4b0d      	ldr	r3, [pc, #52]	; (800254c <_ZL12MX_I2C1_Initv+0x5c>)
 8002516:	2200      	movs	r2, #0
 8002518:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <_ZL12MX_I2C1_Initv+0x5c>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <_ZL12MX_I2C1_Initv+0x5c>)
 8002522:	2200      	movs	r2, #0
 8002524:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <_ZL12MX_I2C1_Initv+0x5c>)
 8002528:	2200      	movs	r2, #0
 800252a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800252c:	4807      	ldr	r0, [pc, #28]	; (800254c <_ZL12MX_I2C1_Initv+0x5c>)
 800252e:	f002 ff2b 	bl	8005388 <HAL_I2C_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf14      	ite	ne
 8002538:	2301      	movne	r3, #1
 800253a:	2300      	moveq	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002542:	f000 fa77 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000900 	.word	0x20000900
 8002550:	40005400 	.word	0x40005400
 8002554:	000186a0 	.word	0x000186a0

08002558 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800255e:	f107 0308 	add.w	r3, r7, #8
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800256c:	463b      	mov	r3, r7
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002574:	4b26      	ldr	r3, [pc, #152]	; (8002610 <_ZL12MX_TIM1_Initv+0xb8>)
 8002576:	4a27      	ldr	r2, [pc, #156]	; (8002614 <_ZL12MX_TIM1_Initv+0xbc>)
 8002578:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 800257a:	4b25      	ldr	r3, [pc, #148]	; (8002610 <_ZL12MX_TIM1_Initv+0xb8>)
 800257c:	2263      	movs	r2, #99	; 0x63
 800257e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002580:	4b23      	ldr	r3, [pc, #140]	; (8002610 <_ZL12MX_TIM1_Initv+0xb8>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <_ZL12MX_TIM1_Initv+0xb8>)
 8002588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800258c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <_ZL12MX_TIM1_Initv+0xb8>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002594:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <_ZL12MX_TIM1_Initv+0xb8>)
 8002596:	2200      	movs	r2, #0
 8002598:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <_ZL12MX_TIM1_Initv+0xb8>)
 800259c:	2200      	movs	r2, #0
 800259e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025a0:	481b      	ldr	r0, [pc, #108]	; (8002610 <_ZL12MX_TIM1_Initv+0xb8>)
 80025a2:	f005 f969 	bl	8007878 <HAL_TIM_Base_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf14      	ite	ne
 80025ac:	2301      	movne	r3, #1
 80025ae:	2300      	moveq	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 80025b6:	f000 fa3d 	bl	8002a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025c0:	f107 0308 	add.w	r3, r7, #8
 80025c4:	4619      	mov	r1, r3
 80025c6:	4812      	ldr	r0, [pc, #72]	; (8002610 <_ZL12MX_TIM1_Initv+0xb8>)
 80025c8:	f005 fe06 	bl	80081d8 <HAL_TIM_ConfigClockSource>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf14      	ite	ne
 80025d2:	2301      	movne	r3, #1
 80025d4:	2300      	moveq	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 80025dc:	f000 fa2a 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e0:	2300      	movs	r3, #0
 80025e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025e8:	463b      	mov	r3, r7
 80025ea:	4619      	mov	r1, r3
 80025ec:	4808      	ldr	r0, [pc, #32]	; (8002610 <_ZL12MX_TIM1_Initv+0xb8>)
 80025ee:	f006 f9af 	bl	8008950 <HAL_TIMEx_MasterConfigSynchronization>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8002602:	f000 fa17 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000954 	.word	0x20000954
 8002614:	40010000 	.word	0x40010000

08002618 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08c      	sub	sp, #48	; 0x30
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800261e:	f107 030c 	add.w	r3, r7, #12
 8002622:	2224      	movs	r2, #36	; 0x24
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f008 fef4 	bl	800b414 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002634:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <_ZL12MX_TIM2_Initv+0xb8>)
 8002636:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800263a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <_ZL12MX_TIM2_Initv+0xb8>)
 800263e:	2200      	movs	r2, #0
 8002640:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002642:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <_ZL12MX_TIM2_Initv+0xb8>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002648:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <_ZL12MX_TIM2_Initv+0xb8>)
 800264a:	f04f 32ff 	mov.w	r2, #4294967295
 800264e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002650:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <_ZL12MX_TIM2_Initv+0xb8>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <_ZL12MX_TIM2_Initv+0xb8>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800265c:	2301      	movs	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002664:	2301      	movs	r3, #1
 8002666:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002668:	2300      	movs	r3, #0
 800266a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002674:	2301      	movs	r3, #1
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002678:	2300      	movs	r3, #0
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	4619      	mov	r1, r3
 8002686:	4812      	ldr	r0, [pc, #72]	; (80026d0 <_ZL12MX_TIM2_Initv+0xb8>)
 8002688:	f005 faa8 	bl	8007bdc <HAL_TIM_Encoder_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf14      	ite	ne
 8002692:	2301      	movne	r3, #1
 8002694:	2300      	moveq	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 800269c:	f000 f9ca 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a0:	2300      	movs	r3, #0
 80026a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	4619      	mov	r1, r3
 80026ac:	4808      	ldr	r0, [pc, #32]	; (80026d0 <_ZL12MX_TIM2_Initv+0xb8>)
 80026ae:	f006 f94f 	bl	8008950 <HAL_TIMEx_MasterConfigSynchronization>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf14      	ite	ne
 80026b8:	2301      	movne	r3, #1
 80026ba:	2300      	moveq	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 80026c2:	f000 f9b7 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026c6:	bf00      	nop
 80026c8:	3730      	adds	r7, #48	; 0x30
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000099c 	.word	0x2000099c

080026d4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026da:	f107 0320 	add.w	r3, r7, #32
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	611a      	str	r2, [r3, #16]
 80026f2:	615a      	str	r2, [r3, #20]
 80026f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026f6:	4b41      	ldr	r3, [pc, #260]	; (80027fc <_ZL12MX_TIM3_Initv+0x128>)
 80026f8:	4a41      	ldr	r2, [pc, #260]	; (8002800 <_ZL12MX_TIM3_Initv+0x12c>)
 80026fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026fc:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <_ZL12MX_TIM3_Initv+0x128>)
 80026fe:	2200      	movs	r2, #0
 8002700:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002702:	4b3e      	ldr	r3, [pc, #248]	; (80027fc <_ZL12MX_TIM3_Initv+0x128>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002708:	4b3c      	ldr	r3, [pc, #240]	; (80027fc <_ZL12MX_TIM3_Initv+0x128>)
 800270a:	f242 720f 	movw	r2, #9999	; 0x270f
 800270e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002710:	4b3a      	ldr	r3, [pc, #232]	; (80027fc <_ZL12MX_TIM3_Initv+0x128>)
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <_ZL12MX_TIM3_Initv+0x128>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800271c:	4837      	ldr	r0, [pc, #220]	; (80027fc <_ZL12MX_TIM3_Initv+0x128>)
 800271e:	f005 f95d 	bl	80079dc <HAL_TIM_PWM_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8002732:	f000 f97f 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002736:	2300      	movs	r3, #0
 8002738:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800273e:	f107 0320 	add.w	r3, r7, #32
 8002742:	4619      	mov	r1, r3
 8002744:	482d      	ldr	r0, [pc, #180]	; (80027fc <_ZL12MX_TIM3_Initv+0x128>)
 8002746:	f006 f903 	bl	8008950 <HAL_TIMEx_MasterConfigSynchronization>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf14      	ite	ne
 8002750:	2301      	movne	r3, #1
 8002752:	2300      	moveq	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 800275a:	f000 f96b 	bl	8002a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800275e:	2360      	movs	r3, #96	; 0x60
 8002760:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	2200      	movs	r2, #0
 8002772:	4619      	mov	r1, r3
 8002774:	4821      	ldr	r0, [pc, #132]	; (80027fc <_ZL12MX_TIM3_Initv+0x128>)
 8002776:	f005 fc6d 	bl	8008054 <HAL_TIM_PWM_ConfigChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800278a:	f000 f953 	bl	8002a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	2204      	movs	r2, #4
 8002792:	4619      	mov	r1, r3
 8002794:	4819      	ldr	r0, [pc, #100]	; (80027fc <_ZL12MX_TIM3_Initv+0x128>)
 8002796:	f005 fc5d 	bl	8008054 <HAL_TIM_PWM_ConfigChannel>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf14      	ite	ne
 80027a0:	2301      	movne	r3, #1
 80027a2:	2300      	moveq	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80027aa:	f000 f943 	bl	8002a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	2208      	movs	r2, #8
 80027b2:	4619      	mov	r1, r3
 80027b4:	4811      	ldr	r0, [pc, #68]	; (80027fc <_ZL12MX_TIM3_Initv+0x128>)
 80027b6:	f005 fc4d 	bl	8008054 <HAL_TIM_PWM_ConfigChannel>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf14      	ite	ne
 80027c0:	2301      	movne	r3, #1
 80027c2:	2300      	moveq	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 80027ca:	f000 f933 	bl	8002a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	220c      	movs	r2, #12
 80027d2:	4619      	mov	r1, r3
 80027d4:	4809      	ldr	r0, [pc, #36]	; (80027fc <_ZL12MX_TIM3_Initv+0x128>)
 80027d6:	f005 fc3d 	bl	8008054 <HAL_TIM_PWM_ConfigChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 80027ea:	f000 f923 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027ee:	4803      	ldr	r0, [pc, #12]	; (80027fc <_ZL12MX_TIM3_Initv+0x128>)
 80027f0:	f001 fe88 	bl	8004504 <HAL_TIM_MspPostInit>

}
 80027f4:	bf00      	nop
 80027f6:	3728      	adds	r7, #40	; 0x28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	200009e4 	.word	0x200009e4
 8002800:	40000400 	.word	0x40000400

08002804 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	; 0x30
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800280a:	f107 030c 	add.w	r3, r7, #12
 800280e:	2224      	movs	r2, #36	; 0x24
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f008 fdfe 	bl	800b414 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002820:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <_ZL12MX_TIM4_Initv+0xb4>)
 8002822:	4a26      	ldr	r2, [pc, #152]	; (80028bc <_ZL12MX_TIM4_Initv+0xb8>)
 8002824:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002826:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <_ZL12MX_TIM4_Initv+0xb4>)
 8002828:	2200      	movs	r2, #0
 800282a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282c:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <_ZL12MX_TIM4_Initv+0xb4>)
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002832:	4b21      	ldr	r3, [pc, #132]	; (80028b8 <_ZL12MX_TIM4_Initv+0xb4>)
 8002834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002838:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283a:	4b1f      	ldr	r3, [pc, #124]	; (80028b8 <_ZL12MX_TIM4_Initv+0xb4>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <_ZL12MX_TIM4_Initv+0xb4>)
 8002842:	2200      	movs	r2, #0
 8002844:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002846:	2301      	movs	r3, #1
 8002848:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800284e:	2301      	movs	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800285e:	2301      	movs	r3, #1
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002862:	2300      	movs	r3, #0
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800286a:	f107 030c 	add.w	r3, r7, #12
 800286e:	4619      	mov	r1, r3
 8002870:	4811      	ldr	r0, [pc, #68]	; (80028b8 <_ZL12MX_TIM4_Initv+0xb4>)
 8002872:	f005 f9b3 	bl	8007bdc <HAL_TIM_Encoder_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf14      	ite	ne
 800287c:	2301      	movne	r3, #1
 800287e:	2300      	moveq	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8002886:	f000 f8d5 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	4619      	mov	r1, r3
 8002896:	4808      	ldr	r0, [pc, #32]	; (80028b8 <_ZL12MX_TIM4_Initv+0xb4>)
 8002898:	f006 f85a 	bl	8008950 <HAL_TIMEx_MasterConfigSynchronization>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bf14      	ite	ne
 80028a2:	2301      	movne	r3, #1
 80028a4:	2300      	moveq	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 80028ac:	f000 f8c2 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80028b0:	bf00      	nop
 80028b2:	3730      	adds	r7, #48	; 0x30
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000a2c 	.word	0x20000a2c
 80028bc:	40000800 	.word	0x40000800

080028c0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028c4:	4b13      	ldr	r3, [pc, #76]	; (8002914 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028c6:	4a14      	ldr	r2, [pc, #80]	; (8002918 <_ZL19MX_USART2_UART_Initv+0x58>)
 80028c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028da:	2200      	movs	r2, #0
 80028dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028e6:	220c      	movs	r2, #12
 80028e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028f6:	4807      	ldr	r0, [pc, #28]	; (8002914 <_ZL19MX_USART2_UART_Initv+0x54>)
 80028f8:	f006 f8ac 	bl	8008a54 <HAL_UART_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800290c:	f000 f892 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000a74 	.word	0x20000a74
 8002918:	40004400 	.word	0x40004400

0800291c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
 8002930:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <_ZL12MX_GPIO_Initv+0x108>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a3a      	ldr	r2, [pc, #232]	; (8002a24 <_ZL12MX_GPIO_Initv+0x108>)
 800293c:	f043 0304 	orr.w	r3, r3, #4
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <_ZL12MX_GPIO_Initv+0x108>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <_ZL12MX_GPIO_Initv+0x108>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a33      	ldr	r2, [pc, #204]	; (8002a24 <_ZL12MX_GPIO_Initv+0x108>)
 8002958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <_ZL12MX_GPIO_Initv+0x108>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <_ZL12MX_GPIO_Initv+0x108>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a2c      	ldr	r2, [pc, #176]	; (8002a24 <_ZL12MX_GPIO_Initv+0x108>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b2a      	ldr	r3, [pc, #168]	; (8002a24 <_ZL12MX_GPIO_Initv+0x108>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <_ZL12MX_GPIO_Initv+0x108>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a25      	ldr	r2, [pc, #148]	; (8002a24 <_ZL12MX_GPIO_Initv+0x108>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <_ZL12MX_GPIO_Initv+0x108>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80029a2:	2200      	movs	r2, #0
 80029a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029a8:	481f      	ldr	r0, [pc, #124]	; (8002a28 <_ZL12MX_GPIO_Initv+0x10c>)
 80029aa:	f002 fcd3 	bl	8005354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80029ae:	2200      	movs	r2, #0
 80029b0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80029b4:	481d      	ldr	r0, [pc, #116]	; (8002a2c <_ZL12MX_GPIO_Initv+0x110>)
 80029b6:	f002 fccd 	bl	8005354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2130      	movs	r1, #48	; 0x30
 80029be:	481c      	ldr	r0, [pc, #112]	; (8002a30 <_ZL12MX_GPIO_Initv+0x114>)
 80029c0:	f002 fcc8 	bl	8005354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80029c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	4619      	mov	r1, r3
 80029dc:	4812      	ldr	r0, [pc, #72]	; (8002a28 <_ZL12MX_GPIO_Initv+0x10c>)
 80029de:	f002 fa51 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e8:	2301      	movs	r3, #1
 80029ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	480c      	ldr	r0, [pc, #48]	; (8002a2c <_ZL12MX_GPIO_Initv+0x110>)
 80029fc:	f002 fa42 	bl	8004e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a00:	2330      	movs	r3, #48	; 0x30
 8002a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a04:	2301      	movs	r3, #1
 8002a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4619      	mov	r1, r3
 8002a16:	4806      	ldr	r0, [pc, #24]	; (8002a30 <_ZL12MX_GPIO_Initv+0x114>)
 8002a18:	f002 fa34 	bl	8004e84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a1c:	bf00      	nop
 8002a1e:	3728      	adds	r7, #40	; 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40020800 	.word	0x40020800
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	40020400 	.word	0x40020400

08002a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a38:	b672      	cpsid	i
}
 8002a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <Error_Handler+0x8>

08002a3e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f90f 	bl	8002c6a <_ZNSaIfEC1Ev>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f917 	bl	8002c82 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f91f 	bl	8002caa <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002a8e:	461a      	mov	r2, r3
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f915 	bl	8002cc0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe fdcd 	bl	8001638 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002aa8:	b5b0      	push	{r4, r5, r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681c      	ldr	r4, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 f913 	bl	8002ce6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002ac0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	f000 f918 	bl	8002cfc <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff ffd1 	bl	8002a76 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bdb0      	pop	{r4, r5, r7, pc}

08002ade <_ZNSt6vectorIfSaIfEEaSESt16initializer_listIfE>:
       *  Note that the assignment completely changes the %vector and
       *  that the resulting %vector's size is the same as the number
       *  of elements assigned.
       */
      vector&
      operator=(initializer_list<value_type> __l)
 8002ade:	b5b0      	push	{r4, r5, r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	this->_M_assign_aux(__l.begin(), __l.end(),
 8002aec:	1d3b      	adds	r3, r7, #4
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f912 	bl	8002d18 <_ZNKSt16initializer_listIfE5beginEv>
 8002af4:	4604      	mov	r4, r0
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 f919 	bl	8002d30 <_ZNKSt16initializer_listIfE3endEv>
 8002afe:	4602      	mov	r2, r0
 8002b00:	462b      	mov	r3, r5
 8002b02:	4621      	mov	r1, r4
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f925 	bl	8002d54 <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
	return *this;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
      }
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bdb0      	pop	{r4, r5, r7, pc}

08002b14 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	109b      	asrs	r3, r3, #2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <_ZNSt6vectorIfSaIfEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
      }
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 f9ad 	bl	8002ebe <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
	: c() { }
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	2328      	movs	r3, #40	; 0x28
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2100      	movs	r1, #0
 8002b80:	f008 fc48 	bl	800b414 <memset>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ffe4 	bl	8002b54 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b08a      	sub	sp, #40	; 0x28
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 f9bd 	bl	8002f24 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>
 8002baa:	f107 0318 	add.w	r3, r7, #24
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f9c6 	bl	8002f42 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE3endEv>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f9d1 	bl	8002f60 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f107 0218 	add.w	r2, r7, #24
 8002bc4:	f107 0108 	add.w	r1, r7, #8
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f9f0 	bl	8002fae <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 f985 	bl	8002ee0 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3728      	adds	r7, #40	; 0x28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>:
      push(const value_type& __x)
      { c.push_back(__x); }

#if __cplusplus >= 201103L
      void
      push(value_type&& __x)
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8002bea:	687c      	ldr	r4, [r7, #4]
 8002bec:	6838      	ldr	r0, [r7, #0]
 8002bee:	f000 f9eb 	bl	8002fc8 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f000 f9f1 	bl	8002fde <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9push_backEOS1_>
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd90      	pop	{r4, r7, pc}

08002c04 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>:
      size() const
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f9f6 	bl	8003000 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5emptyEv>:
      empty() const
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 f9fb 	bl	8003024 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5emptyEv>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 fa00 	bl	8003048 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv>
      }
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>:
      front()
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	return c.front();
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fa18 	bl	8003090 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5frontEv>
 8002c60:	4603      	mov	r3, r0
      }
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fa20 	bl	80030b8 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
	{ }
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
	if (__p)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 f9f8 	bl	80030ce <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f9ee 	bl	80030ec <_ZSt8_DestroyIPfEvT_S1_>
    }
 8002d10:	bf00      	nop
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ffed 	bl	8002d18 <_ZNKSt16initializer_listIfE5beginEv>
 8002d3e:	4604      	mov	r4, r0
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f9e0 	bl	8003106 <_ZNKSt16initializer_listIfE4sizeEv>
 8002d46:	4603      	mov	r3, r0
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4423      	add	r3, r4
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd90      	pop	{r4, r7, pc}

08002d54 <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag>:
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
 8002d54:	b5b0      	push	{r4, r5, r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	703b      	strb	r3, [r7, #0]
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
		    std::forward_iterator_tag)
      {
	const size_type __len = std::distance(__first, __last);
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	68b8      	ldr	r0, [r7, #8]
 8002d66:	f000 f9da 	bl	800311e <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	61fb      	str	r3, [r7, #28]

	if (__len > capacity())
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f889 	bl	8002e86 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8002d74:	4602      	mov	r2, r0
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	bf8c      	ite	hi
 8002d7c:	2301      	movhi	r3, #1
 8002d7e:	2300      	movls	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d038      	beq.n	8002df8 <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag+0xa4>
	  {
	    _S_check_init_len(__len, _M_get_Tp_allocator());
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ffac 	bl	8002ce6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4619      	mov	r1, r3
 8002d92:	69f8      	ldr	r0, [r7, #28]
 8002d94:	f000 f9d8 	bl	8003148 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	69f9      	ldr	r1, [r7, #28]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f9fa 	bl	8003198 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIPKfEEPfjT_S6_>
 8002da4:	6178      	str	r0, [r7, #20]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681c      	ldr	r4, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff98 	bl	8002ce6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002db6:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002db8:	461a      	mov	r2, r3
 8002dba:	4629      	mov	r1, r5
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f7ff ff9d 	bl	8002cfc <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
	    _M_deallocate(this->_M_impl._M_start,
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_start);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	109b      	asrs	r3, r3, #2
	    _M_deallocate(this->_M_impl._M_start,
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f7ff ff73 	bl	8002cc0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	    this->_M_impl._M_start = __tmp;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	441a      	add	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	609a      	str	r2, [r3, #8]
	      std::__uninitialized_copy_a(__mid, __last,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
	  }
      }
 8002df6:	e042      	b.n	8002e7e <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag+0x12a>
	else if (size() >= __len)
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff fe8b 	bl	8002b14 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	4293      	cmp	r3, r2
 8002e04:	bf94      	ite	ls
 8002e06:	2301      	movls	r3, #1
 8002e08:	2300      	movhi	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00c      	beq.n	8002e2a <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag+0xd6>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	68b8      	ldr	r0, [r7, #8]
 8002e1a:	f000 f9fa 	bl	8003212 <_ZSt4copyIPKfPfET0_T_S4_S3_>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4619      	mov	r1, r3
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f9d4 	bl	80031d0 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>
      }
 8002e28:	e029      	b.n	8002e7e <_ZNSt6vectorIfSaIfEE13_M_assign_auxIPKfEEvT_S5_St20forward_iterator_tag+0x12a>
	    _ForwardIterator __mid = __first;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	613b      	str	r3, [r7, #16]
	    std::advance(__mid, size());
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f7ff fe70 	bl	8002b14 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f107 0310 	add.w	r3, r7, #16
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fa00 	bl	8003242 <_ZSt7advanceIPKfjEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 8002e42:	6939      	ldr	r1, [r7, #16]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68b8      	ldr	r0, [r7, #8]
 8002e4c:	f000 f9e1 	bl	8003212 <_ZSt4copyIPKfPfET0_T_S4_S3_>
	    const size_type __attribute__((__unused__)) __n = __len - size();
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff fe5f 	bl	8002b14 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002e56:	4602      	mov	r2, r0
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
	      std::__uninitialized_copy_a(__mid, __last,
 8002e5e:	693c      	ldr	r4, [r7, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff ff3d 	bl	8002ce6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002e6c:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 8002e6e:	462a      	mov	r2, r5
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4620      	mov	r0, r4
 8002e74:	f000 f9f8 	bl	8003268 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
 8002e78:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	605a      	str	r2, [r3, #4]
      }
 8002e7e:	bf00      	nop
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bdb0      	pop	{r4, r5, r7, pc}

08002e86 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	109b      	asrs	r3, r3, #2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fa1d 	bl	80032ee <_ZNSaIN12ActionsQueue16RobotInstructionEED1Ev>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>:
      _Deque_base()
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 fa00 	bl	80032ce <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002ece:	2100      	movs	r1, #0
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fa18 	bl	8003306 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_initialize_mapEj>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d010      	beq.n	8002f12 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002ef8:	3304      	adds	r3, #4
 8002efa:	461a      	mov	r2, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fa65 	bl	80033cc <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6819      	ldr	r1, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fa77 	bl	8003400 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ffc6 	bl	8002ea6 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implD1Ev>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	3308      	adds	r3, #8
 8002f32:	4619      	mov	r1, r3
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f81e 	bl	8002f76 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	3318      	adds	r3, #24
 8002f50:	4619      	mov	r1, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f80f 	bl	8002f76 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	60da      	str	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8002fae:	b480      	push	{r7}
 8002fb0:	b08d      	sub	sp, #52	; 0x34
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8002fbc:	bf00      	nop
 8002fbe:	3734      	adds	r7, #52	; 0x34
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8002fe8:	6838      	ldr	r0, [r7, #0]
 8002fea:	f7ff ffed 	bl	8002fc8 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fa20 	bl	8003438 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f103 0218 	add.w	r2, r3, #24
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3308      	adds	r3, #8
 8003012:	4619      	mov	r1, r3
 8003014:	4610      	mov	r0, r2
 8003016:	f000 fa3a 	bl	800348e <_ZStmiRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>
 800301a:	4603      	mov	r3, r0
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f103 0218 	add.w	r2, r3, #24
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3308      	adds	r3, #8
 8003036:	4619      	mov	r1, r3
 8003038:	4610      	mov	r0, r2
 800303a:	f000 fa4c 	bl	80034d6 <_ZSteqRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>
 800303e:	4603      	mov	r3, r0
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	3b08      	subs	r3, #8
	if (this->_M_impl._M_start._M_cur
 800305a:	429a      	cmp	r2, r3
 800305c:	d011      	beq.n	8003082 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff ff7d 	bl	8002f60 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8003066:	4602      	mov	r2, r0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f000 fa45 	bl	80034fe <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f103 0208 	add.w	r2, r3, #8
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	609a      	str	r2, [r3, #8]
      }
 8003080:	e002      	b.n	8003088 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fa48 	bl	8003518 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_pop_front_auxEv>
      }
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	return *begin();
 8003098:	f107 0308 	add.w	r3, r7, #8
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff40 	bl	8002f24 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>
 80030a4:	f107 0308 	add.w	r3, r7, #8
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fa5d 	bl	8003568 <_ZNKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EdeEv>
 80030ae:	4603      	mov	r3, r0
      }
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fa4e 	bl	8003580 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80030f6:	6839      	ldr	r1, [r7, #0]
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fa51 	bl	80035a0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4618      	mov	r0, r3
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800311e:	b5b0      	push	{r4, r5, r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8003128:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fa42 	bl	80035b6 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8003132:	462a      	mov	r2, r5
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	4620      	mov	r0, r4
 8003138:	f000 fa48 	bl	80035cc <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800313c:	4603      	mov	r3, r0
    }
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003148 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8003152:	f107 030c 	add.w	r3, r7, #12
 8003156:	6839      	ldr	r1, [r7, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f8aa 	bl	80032b2 <_ZNSaIfEC1ERKS_>
 800315e:	f107 030c 	add.w	r3, r7, #12
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fa42 	bl	80035ec <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8003168:	4602      	mov	r2, r0
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4293      	cmp	r3, r2
 800316e:	bf8c      	ite	hi
 8003170:	2301      	movhi	r3, #1
 8003172:	2300      	movls	r3, #0
 8003174:	b2dc      	uxtb	r4, r3
 8003176:	f107 030c 	add.w	r3, r7, #12
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fc6f 	bl	8002a5e <_ZNSaIfED1Ev>
 8003180:	2c00      	cmp	r4, #0
 8003182:	d002      	beq.n	800318a <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8003184:	4803      	ldr	r0, [pc, #12]	; (8003194 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x4c>)
 8003186:	f006 fd5f 	bl	8009c48 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 800318a:	687b      	ldr	r3, [r7, #4]
      }
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}
 8003194:	0800de28 	.word	0x0800de28

08003198 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyIPKfEEPfjT_S6_>:
	_M_allocate_and_copy(size_type __n,
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f86d 	bl	800328a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80031b0:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fd96 	bl	8002ce6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80031ba:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	6839      	ldr	r1, [r7, #0]
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f851 	bl	8003268 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
	      return __result;
 80031c6:	697b      	ldr	r3, [r7, #20]
	}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	109b      	asrs	r3, r3, #2
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00e      	beq.n	800320a <_ZNSt6vectorIfSaIfEE15_M_erase_at_endEPf+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fd77 	bl	8002ce6 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80031f8:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80031fa:	461a      	mov	r2, r3
 80031fc:	4621      	mov	r1, r4
 80031fe:	6838      	ldr	r0, [r7, #0]
 8003200:	f7ff fd7c 	bl	8002cfc <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	bd90      	pop	{r4, r7, pc}

08003212 <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003212:	b590      	push	{r4, r7, lr}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f9fe 	bl	8003620 <_ZSt12__miter_baseIPKfET_S2_>
 8003224:	4604      	mov	r4, r0
 8003226:	68b8      	ldr	r0, [r7, #8]
 8003228:	f000 f9fa 	bl	8003620 <_ZSt12__miter_baseIPKfET_S2_>
 800322c:	4603      	mov	r3, r0
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4619      	mov	r1, r3
 8003232:	4620      	mov	r0, r4
 8003234:	f000 f9ff 	bl	8003636 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8003238:	4603      	mov	r3, r0
    }
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bd90      	pop	{r4, r7, pc}

08003242 <_ZSt7advanceIPKfjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8003242:	b590      	push	{r4, r7, lr}
 8003244:	b085      	sub	sp, #20
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f9b0 	bl	80035b6 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 8003256:	4622      	mov	r2, r4
 8003258:	68f9      	ldr	r1, [r7, #12]
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fa0e 	bl	800367c <_ZSt9__advanceIPKfiEvRT_T0_St26random_access_iterator_tag>
    }
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}

08003268 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fa11 	bl	80036a2 <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>
 8003280:	4603      	mov	r3, r0
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d006      	beq.n	80032a8 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6839      	ldr	r1, [r7, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fa11 	bl	80036c6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 80032a4:	4603      	mov	r3, r0
 80032a6:	e000      	b.n	80032aa <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 80032a8:	2300      	movs	r3, #0
      }
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80032bc:	6839      	ldr	r1, [r7, #0]
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fa37 	bl	8003732 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fa37 	bl	800374a <_ZNSaIN12ActionsQueue16RobotInstructionEEC1Ev>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fa3f 	bl	8003762 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <_ZNSaIN12ActionsQueue16RobotInstructionEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fa4c 	bl	8003794 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEED1Ev>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003306:	b590      	push	{r4, r7, lr}
 8003308:	b089      	sub	sp, #36	; 0x24
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003310:	2008      	movs	r0, #8
 8003312:	f7fe f94b 	bl	80015ac <_ZSt16__deque_buf_sizej>
 8003316:	4602      	mov	r2, r0
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	fbb3 f3f2 	udiv	r3, r3, r2
 800331e:	3301      	adds	r3, #1
 8003320:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003322:	2308      	movs	r3, #8
 8003324:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3302      	adds	r3, #2
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	f107 0210 	add.w	r2, r7, #16
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fa37 	bl	80037aa <_ZSt3maxIjERKT_S2_S2_>
 800333c:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fa41 	bl	80037d2 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>
 8003350:	4602      	mov	r2, r0
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6859      	ldr	r1, [r3, #4]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	1acb      	subs	r3, r1, r3
 8003362:	085b      	lsrs	r3, r3, #1
 8003364:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003366:	4413      	add	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4413      	add	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	69b9      	ldr	r1, [r7, #24]
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fa47 	bl	800380c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3308      	adds	r3, #8
 8003382:	69b9      	ldr	r1, [r7, #24]
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fa5b 	bl	8003840 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f103 0218 	add.w	r2, r3, #24
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	3b04      	subs	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f000 fa52 	bl	8003840 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80033a8:	2008      	movs	r0, #8
 80033aa:	f7fe f8ff 	bl	80015ac <_ZSt16__deque_buf_sizej>
 80033ae:	4602      	mov	r2, r0
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80033b6:	fb01 f202 	mul.w	r2, r1, r2
 80033ba:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	619a      	str	r2, [r3, #24]
    }
 80033c4:	bf00      	nop
 80033c6:	3724      	adds	r7, #36	; 0x24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd90      	pop	{r4, r7, pc}

080033cc <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d209      	bcs.n	80033f8 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4619      	mov	r1, r3
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fa41 	bl	8003872 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3304      	adds	r3, #4
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	e7f1      	b.n	80033dc <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 80033f8:	bf00      	nop
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	68f9      	ldr	r1, [r7, #12]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fa40 	bl	8003898 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8003418:	f107 0314 	add.w	r3, r7, #20
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fa56 	bl	80038d2 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003426:	f107 0314 	add.w	r3, r7, #20
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fa45 	bl	80038ba <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>
      }
 8003430:	bf00      	nop
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 8003438:	b5b0      	push	{r4, r5, r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	3b08      	subs	r3, #8
	if (this->_M_impl._M_finish._M_cur
 800344c:	429a      	cmp	r2, r3
 800344e:	d012      	beq.n	8003476 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8003450:	687c      	ldr	r4, [r7, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699d      	ldr	r5, [r3, #24]
 8003456:	6838      	ldr	r0, [r7, #0]
 8003458:	f000 fa4a 	bl	80038f0 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 800345c:	4603      	mov	r3, r0
 800345e:	461a      	mov	r2, r3
 8003460:	4629      	mov	r1, r5
 8003462:	4620      	mov	r0, r4
 8003464:	f000 fa4f 	bl	8003906 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f103 0208 	add.w	r2, r3, #8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8003474:	e007      	b.n	8003486 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8003476:	6838      	ldr	r0, [r7, #0]
 8003478:	f000 fa3a 	bl	80038f0 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 800347c:	4603      	mov	r3, r0
 800347e:	4619      	mov	r1, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fa53 	bl	800392c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>
      }
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bdb0      	pop	{r4, r5, r7, pc}

0800348e <_ZStmiRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8003498:	f000 fa8c 	bl	80039b4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>
 800349c:	4603      	mov	r3, r0
 800349e:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	109b      	asrs	r3, r3, #2
 80034ac:	3b01      	subs	r3, #1
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6811      	ldr	r1, [r2, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6852      	ldr	r2, [r2, #4]
 80034ba:	1a8a      	subs	r2, r1, r2
 80034bc:	10d2      	asrs	r2, r2, #3
 80034be:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	6891      	ldr	r1, [r2, #8]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	1a8a      	subs	r2, r1, r2
 80034ca:	10d2      	asrs	r2, r2, #3
 80034cc:	4413      	add	r3, r2
      }
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <_ZSteqRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003508:	6839      	ldr	r1, [r7, #0]
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa5a 	bl	80039c4 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE7destroyIS2_EEvPT_>
	}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fd1c 	bl	8002f60 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8003528:	4602      	mov	r2, r0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	4619      	mov	r1, r3
 8003530:	4610      	mov	r0, r2
 8003532:	f7ff ffe4 	bl	80034fe <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f000 f997 	bl	8003872 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f103 0208 	add.w	r2, r3, #8
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	3304      	adds	r3, #4
 8003550:	4619      	mov	r1, r3
 8003552:	4610      	mov	r0, r2
 8003554:	f000 f974 	bl	8003840 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	609a      	str	r2, [r3, #8]
    }
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <_ZNKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4619      	mov	r1, r3
 8003592:	68b8      	ldr	r0, [r7, #8]
 8003594:	f006 fb42 	bl	8009c1c <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80035be:	bf00      	nop
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	109b      	asrs	r3, r3, #2
    }
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80035f4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80035f8:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f9ed 	bl	80039da <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8003600:	4603      	mov	r3, r0
 8003602:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003604:	f107 0208 	add.w	r2, r7, #8
 8003608:	f107 030c 	add.w	r3, r7, #12
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f9ef 	bl	80039f2 <_ZSt3minIjERKT_S2_S2_>
 8003614:	4603      	mov	r3, r0
 8003616:	681b      	ldr	r3, [r3, #0]
      }
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <_ZSt12__miter_baseIPKfET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003636:	b5b0      	push	{r4, r5, r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f9e9 	bl	8003a1a <_ZSt12__niter_baseIPKfET_S2_>
 8003648:	4604      	mov	r4, r0
 800364a:	68b8      	ldr	r0, [r7, #8]
 800364c:	f000 f9e5 	bl	8003a1a <_ZSt12__niter_baseIPKfET_S2_>
 8003650:	4605      	mov	r5, r0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4618      	mov	r0, r3
 8003656:	f000 f855 	bl	8003704 <_ZSt12__niter_baseIPfET_S1_>
 800365a:	4603      	mov	r3, r0
 800365c:	461a      	mov	r2, r3
 800365e:	4629      	mov	r1, r5
 8003660:	4620      	mov	r0, r4
 8003662:	f000 f83f 	bl	80036e4 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 8003666:	4602      	mov	r2, r0
 8003668:	1d3b      	adds	r3, r7, #4
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f000 f854 	bl	800371a <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8003672:	4603      	mov	r3, r0
    }
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bdb0      	pop	{r4, r5, r7, pc}

0800367c <_ZSt9__advanceIPKfiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	441a      	add	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	601a      	str	r2, [r3, #0]
    }
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80036ae:	2301      	movs	r3, #1
 80036b0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f9ba 	bl	8003a30 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>
 80036bc:	4603      	mov	r3, r0
    }
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80036d0:	2200      	movs	r2, #0
 80036d2:	6839      	ldr	r1, [r7, #0]
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f9bb 	bl	8003a50 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 80036da:	4603      	mov	r3, r0
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f9c9 	bl	8003a8c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 80036fa:	4603      	mov	r3, r0
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
    { return __res; }
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	6039      	str	r1, [r7, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4618      	mov	r0, r3
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <_ZNSaIN12ActionsQueue16RobotInstructionEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f9aa 	bl	8003aac <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEEC1Ev>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3308      	adds	r3, #8
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f9a1 	bl	8003ac2 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3318      	adds	r3, #24
 8003784:	4618      	mov	r0, r3
 8003786:	f000 f99c 	bl	8003ac2 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>
	{ }
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d201      	bcs.n	80037c4 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	e000      	b.n	80037c6 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80037c4:	687b      	ldr	r3, [r7, #4]
    }
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80037d2:	b590      	push	{r4, r7, lr}
 80037d4:	b085      	sub	sp, #20
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80037dc:	f107 030c 	add.w	r3, r7, #12
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f858 	bl	8003898 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80037e8:	f107 030c 	add.w	r3, r7, #12
 80037ec:	6839      	ldr	r1, [r7, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f97e 	bl	8003af0 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE8allocateERS3_j>
 80037f4:	4604      	mov	r4, r0
 80037f6:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 f85c 	bl	80038ba <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003802:	4623      	mov	r3, r4
      }
 8003804:	4618      	mov	r0, r3
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	bd90      	pop	{r4, r7, pc}

0800380c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	d209      	bcs.n	8003838 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f972 	bl	8003b0e <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>
 800382a:	4602      	mov	r2, r0
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3304      	adds	r3, #4
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e7f1      	b.n	800381c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8003838:	bf00      	nop
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685c      	ldr	r4, [r3, #4]
 800385c:	f000 f8aa 	bl	80039b4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>
 8003860:	4603      	mov	r3, r0
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	18e2      	adds	r2, r4, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	609a      	str	r2, [r3, #8]
      }
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	bd90      	pop	{r4, r7, pc}

08003872 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8003872:	b590      	push	{r4, r7, lr}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 800387c:	687c      	ldr	r4, [r7, #4]
 800387e:	2008      	movs	r0, #8
 8003880:	f7fd fe94 	bl	80015ac <_ZSt16__deque_buf_sizej>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	4620      	mov	r0, r4
 800388c:	f000 f951 	bl	8003b32 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE10deallocateERS2_PS1_j>
      }
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}

08003898 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80038a2:	6838      	ldr	r0, [r7, #0]
 80038a4:	f000 f954 	bl	8003b50 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 80038a8:	4603      	mov	r3, r0
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f95a 	bl	8003b66 <_ZNSaIPN12ActionsQueue16RobotInstructionEEC1IS0_EERKSaIT_E>
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f95c 	bl	8003b80 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEED1Ev>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f957 	bl	8003b96 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE10deallocateEPS3_j>
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ffec 	bl	80038f0 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003918:	4603      	mov	r3, r0
 800391a:	461a      	mov	r2, r3
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f949 	bl	8003bb6 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 800392c:	b5b0      	push	{r4, r5, r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fb62 	bl	8003000 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>
 800393c:	4604      	mov	r4, r0
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f952 	bl	8003be8 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE8max_sizeEv>
 8003944:	4603      	mov	r3, r0
 8003946:	429c      	cmp	r4, r3
 8003948:	bf0c      	ite	eq
 800394a:	2301      	moveq	r3, #1
 800394c:	2300      	movne	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8003954:	4816      	ldr	r0, [pc, #88]	; (80039b0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x84>)
 8003956:	f006 f977 	bl	8009c48 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 800395a:	2101      	movs	r1, #1
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f954 	bl	8003c0a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	1d1c      	adds	r4, r3, #4
 800396a:	4610      	mov	r0, r2
 800396c:	f000 f8cf 	bl	8003b0e <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>
 8003970:	4603      	mov	r3, r0
 8003972:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8003974:	687c      	ldr	r4, [r7, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699d      	ldr	r5, [r3, #24]
 800397a:	6838      	ldr	r0, [r7, #0]
 800397c:	f7ff ffb8 	bl	80038f0 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003980:	4603      	mov	r3, r0
 8003982:	461a      	mov	r2, r3
 8003984:	4629      	mov	r1, r5
 8003986:	4620      	mov	r0, r4
 8003988:	f7ff ffbd 	bl	8003906 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f103 0218 	add.w	r2, r3, #24
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f7ff ff50 	bl	8003840 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69da      	ldr	r2, [r3, #28]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	619a      	str	r2, [r3, #24]
      }
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bdb0      	pop	{r4, r5, r7, pc}
 80039b0:	0800de5c 	.word	0x0800de5c

080039b4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80039b8:	2008      	movs	r0, #8
 80039ba:	f7fd fdf7 	bl	80015ac <_ZSt16__deque_buf_sizej>
 80039be:	4603      	mov	r3, r0
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE7destroyIS2_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f92c 	bl	8003c40 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 80039e8:	4603      	mov	r3, r0
      }
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d201      	bcs.n	8003a0c <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	e000      	b.n	8003a0e <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003a0c:	687b      	ldr	r3, [r7, #4]
    }
 8003a0e:	4618      	mov	r0, r3
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f7ff fbe6 	bl	8003212 <_ZSt4copyIPKfPfET0_T_S4_S3_>
 8003a46:	4603      	mov	r3, r0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f8fb 	bl	8003c58 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8003a62:	4602      	mov	r2, r0
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4293      	cmp	r3, r2
 8003a68:	bf8c      	ite	hi
 8003a6a:	2301      	movhi	r3, #1
 8003a6c:	2300      	movls	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003a74:	f006 f8e5 	bl	8009c42 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f006 f8cf 	bl	8009c20 <_Znwj>
 8003a82:	4603      	mov	r3, r0
      }
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f8e7 	bl	8003c70 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8003aa2:	4603      	mov	r3, r0
    }
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	60da      	str	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003afa:	2200      	movs	r2, #0
 8003afc:	6839      	ldr	r1, [r7, #0]
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f8d3 	bl	8003caa <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv>
 8003b04:	4603      	mov	r3, r0
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8003b0e:	b590      	push	{r4, r7, lr}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8003b16:	687c      	ldr	r4, [r7, #4]
 8003b18:	2008      	movs	r0, #8
 8003b1a:	f7fd fd47 	bl	80015ac <_ZSt16__deque_buf_sizej>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	4619      	mov	r1, r3
 8003b22:	4620      	mov	r0, r4
 8003b24:	f000 f8df 	bl	8003ce6 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8allocateERS2_j>
 8003b28:	4603      	mov	r3, r0
      }
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd90      	pop	{r4, r7, pc}

08003b32 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f8de 	bl	8003d04 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE10deallocateEPS2_j>
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <_ZNSaIPN12ActionsQueue16RobotInstructionEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f8d7 	bl	8003d24 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEEC1Ev>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	68b8      	ldr	r0, [r7, #8]
 8003baa:	f006 f837 	bl	8009c1c <_ZdlPvj>
      }
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003bb6:	b590      	push	{r4, r7, lr}
 8003bb8:	b085      	sub	sp, #20
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff fe94 	bl	80038f0 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003bc8:	4604      	mov	r4, r0
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	2008      	movs	r0, #8
 8003bd0:	f7fd fce0 	bl	8001594 <_ZnwjPv>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bdc:	e883 0003 	stmia.w	r3, {r0, r1}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd90      	pop	{r4, r7, pc}

08003be8 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff ffac 	bl	8003b50 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f89d 	bl	8003d3a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE11_S_max_sizeERKS2_>
 8003c00:	4603      	mov	r3, r0
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	6809      	ldr	r1, [r1, #0]
 8003c24:	1a41      	subs	r1, r0, r1
 8003c26:	1089      	asrs	r1, r1, #2
 8003c28:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d904      	bls.n	8003c38 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	6839      	ldr	r1, [r7, #0]
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f89b 	bl	8003d6e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb>
      }
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f805 	bl	8003c58 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003c60:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	109b      	asrs	r3, r3, #2
 8003c84:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d006      	beq.n	8003c9a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	461a      	mov	r2, r3
 8003c92:	68f9      	ldr	r1, [r7, #12]
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f007 fba3 	bl	800b3e0 <memmove>
	  return __result + _Num;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4413      	add	r3, r2
	}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f8f3 	bl	8003ea2 <_ZNK9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	bf8c      	ite	hi
 8003cc4:	2301      	movhi	r3, #1
 8003cc6:	2300      	movls	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003cce:	f005 ffb8 	bl	8009c42 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f005 ffa2 	bl	8009c20 <_Znwj>
 8003cdc:	4603      	mov	r3, r0
      }
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	6839      	ldr	r1, [r7, #0]
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f8e0 	bl	8003eba <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4619      	mov	r1, r3
 8003d16:	68b8      	ldr	r0, [r7, #8]
 8003d18:	f005 ff80 	bl	8009c1c <_ZdlPvj>
      }
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8003d42:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8003d46:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f8d4 	bl	8003ef6 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8max_sizeERKS2_>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003d52:	f107 0208 	add.w	r2, r7, #8
 8003d56:	f107 030c 	add.w	r3, r7, #12
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fe48 	bl	80039f2 <_ZSt3minIjERKT_S2_S2_>
 8003d62:	4603      	mov	r3, r0
 8003d64:	681b      	ldr	r3, [r3, #0]
      }
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8003d6e:	b590      	push	{r4, r7, lr}
 8003d70:	b08b      	sub	sp, #44	; 0x2c
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	109b      	asrs	r3, r3, #2
 8003d88:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8003d8a:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	6a3a      	ldr	r2, [r7, #32]
 8003d90:	4413      	add	r3, r2
 8003d92:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d92d      	bls.n	8003dfc <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	1acb      	subs	r3, r1, r3
 8003dac:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003dae:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	e000      	b.n	8003dbe <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x50>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003dc0:	4413      	add	r3, r2
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d209      	bcs.n	8003de2 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dda:	4619      	mov	r1, r3
 8003ddc:	f000 f897 	bl	8003f0e <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
 8003de0:	e048      	b.n	8003e74 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003dea:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df2:	4413      	add	r3, r2
 8003df4:	461a      	mov	r2, r3
 8003df6:	f000 f8a2 	bl	8003f3e <_ZSt13copy_backwardIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
 8003dfa:	e03b      	b.n	8003e74 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3304      	adds	r3, #4
 8003e04:	f107 0208 	add.w	r2, r7, #8
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fccd 	bl	80037aa <_ZSt3maxIjERKT_S2_S2_>
 8003e10:	4603      	mov	r3, r0
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003e16:	3302      	adds	r3, #2
 8003e18:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	69b9      	ldr	r1, [r7, #24]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fcd7 	bl	80037d2 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>
 8003e24:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0xce>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	e000      	b.n	8003e3e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4413      	add	r3, r2
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8003e4e:	3304      	adds	r3, #4
 8003e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e52:	4619      	mov	r1, r3
 8003e54:	f000 f85b 	bl	8003f0e <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6819      	ldr	r1, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	461a      	mov	r2, r3
 8003e64:	f7ff facc 	bl	8003400 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3308      	adds	r3, #8
 8003e78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fce0 	bl	8003840 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f103 0018 	add.w	r0, r3, #24
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e92:	4413      	add	r3, r2
 8003e94:	4619      	mov	r1, r3
 8003e96:	f7ff fcd3 	bl	8003840 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
    }
 8003e9a:	bf00      	nop
 8003e9c:	372c      	adds	r7, #44	; 0x2c
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd90      	pop	{r4, r7, pc}

08003ea2 <_ZNK9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003eaa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f851 	bl	8003f6e <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	bf8c      	ite	hi
 8003ed4:	2301      	movhi	r3, #1
 8003ed6:	2300      	movls	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003ede:	f005 feb0 	bl	8009c42 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f005 fe9a 	bl	8009c20 <_Znwj>
 8003eec:	4603      	mov	r3, r0
      }
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f841 	bl	8003f86 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8max_sizeEv>
 8003f04:	4603      	mov	r3, r0
      }
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8003f0e:	b590      	push	{r4, r7, lr}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f83f 	bl	8003f9e <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8003f20:	4604      	mov	r4, r0
 8003f22:	68b8      	ldr	r0, [r7, #8]
 8003f24:	f000 f83b 	bl	8003f9e <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f000 f840 	bl	8003fb4 <_ZSt13__copy_move_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8003f34:	4603      	mov	r3, r0
    }
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd90      	pop	{r4, r7, pc}

08003f3e <_ZSt13copy_backwardIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003f3e:	b590      	push	{r4, r7, lr}
 8003f40:	b085      	sub	sp, #20
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f827 	bl	8003f9e <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8003f50:	4604      	mov	r4, r0
 8003f52:	68b8      	ldr	r0, [r7, #8]
 8003f54:	f000 f823 	bl	8003f9e <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4620      	mov	r0, r4
 8003f60:	f000 f84b 	bl	8003ffa <_ZSt22__copy_move_backward_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8003f64:	4603      	mov	r3, r0
    }
 8003f66:	4618      	mov	r0, r3
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd90      	pop	{r4, r7, pc}

08003f6e <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003f76:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ffed 	bl	8003f6e <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 8003f94:	4603      	mov	r3, r0
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>:
    __miter_base(_Iterator __it)
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <_ZSt13__copy_move_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003fb4:	b5b0      	push	{r4, r5, r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f83d 	bl	8004040 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	68b8      	ldr	r0, [r7, #8]
 8003fca:	f000 f839 	bl	8004040 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8003fce:	4605      	mov	r5, r0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f834 	bl	8004040 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4629      	mov	r1, r5
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f000 f839 	bl	8004056 <_ZSt14__copy_move_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	1d3b      	adds	r3, r7, #4
 8003fe8:	4611      	mov	r1, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f843 	bl	8004076 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>
 8003ff0:	4603      	mov	r3, r0
    }
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bdb0      	pop	{r4, r5, r7, pc}

08003ffa <_ZSt22__copy_move_backward_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8003ffa:	b5b0      	push	{r4, r5, r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 f81a 	bl	8004040 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 800400c:	4604      	mov	r4, r0
 800400e:	68b8      	ldr	r0, [r7, #8]
 8004010:	f000 f816 	bl	8004040 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004014:	4605      	mov	r5, r0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f811 	bl	8004040 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 800401e:	4603      	mov	r3, r0
 8004020:	461a      	mov	r2, r3
 8004022:	4629      	mov	r1, r5
 8004024:	4620      	mov	r0, r4
 8004026:	f000 f832 	bl	800408e <_ZSt23__copy_move_backward_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 800402a:	4602      	mov	r2, r0
 800402c:	1d3b      	adds	r3, r7, #4
 800402e:	4611      	mov	r1, r2
 8004030:	4618      	mov	r0, r3
 8004032:	f000 f820 	bl	8004076 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>
 8004036:	4603      	mov	r3, r0
    }
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bdb0      	pop	{r4, r5, r7, pc}

08004040 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>:
    __niter_base(_Iterator __it)
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <_ZSt14__copy_move_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f821 	bl	80040ae <_ZSt14__copy_move_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 800406c:	4603      	mov	r3, r0
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <_ZSt23__copy_move_backward_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f815 	bl	80040ce <_ZSt23__copy_move_backward_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <_ZSt14__copy_move_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f815 	bl	80040ee <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>
 80040c4:	4603      	mov	r3, r0
    }
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <_ZSt23__copy_move_backward_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f822 	bl	8004128 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>
 80040e4:	4603      	mov	r3, r0
    }
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	109b      	asrs	r3, r3, #2
 8004102:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d006      	beq.n	8004118 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	461a      	mov	r2, r3
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f007 f964 	bl	800b3e0 <memmove>
	  return __result + _Num;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	4413      	add	r3, r2
	}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	109b      	asrs	r3, r3, #2
 800413c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	425b      	negs	r3, r3
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	18d0      	adds	r0, r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	461a      	mov	r2, r3
 8004154:	68f9      	ldr	r1, [r7, #12]
 8004156:	f007 f943 	bl	800b3e0 <memmove>
	  return __result - _Num;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	425b      	negs	r3, r3
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4413      	add	r3, r2
	}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <_ZN12ActionsQueueD1Ev>:
class ActionsQueue
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800417a:	4618      	mov	r0, r3
 800417c:	f7fd fec5 	bl	8001f0a <_ZN6TelegaD1Ev>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3350      	adds	r3, #80	; 0x50
 8004184:	4618      	mov	r0, r3
 8004186:	f7fc ff3d 	bl	8001004 <_ZN7RPLidarD1Ev>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4618      	mov	r0, r3
 800418e:	f7fd feaf 	bl	8001ef0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEED1Ev>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d107      	bne.n	80041bc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d102      	bne.n	80041bc <_Z41__static_initialization_and_destruction_0ii+0x20>
ActionsQueue Queue;
 80041b6:	4809      	ldr	r0, [pc, #36]	; (80041dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80041b8:	f7fd feba 	bl	8001f30 <_ZN12ActionsQueueC1Ev>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d107      	bne.n	80041d2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d102      	bne.n	80041d2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80041cc:	4803      	ldr	r0, [pc, #12]	; (80041dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80041ce:	f7ff ffcd 	bl	800416c <_ZN12ActionsQueueD1Ev>
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000208 	.word	0x20000208

080041e0 <_GLOBAL__sub_I__Z9constrainlll>:
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041e8:	2001      	movs	r0, #1
 80041ea:	f7ff ffd7 	bl	800419c <_Z41__static_initialization_and_destruction_0ii>
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_GLOBAL__sub_D__Z9constrainlll>:
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041f8:	2000      	movs	r0, #0
 80041fa:	f7ff ffcf 	bl	800419c <_Z41__static_initialization_and_destruction_0ii>
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_MspInit>:
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_MspInit+0x4c>)
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	4a0f      	ldr	r2, [pc, #60]	; (800424c <HAL_MspInit+0x4c>)
 8004210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004214:	6453      	str	r3, [r2, #68]	; 0x44
 8004216:	4b0d      	ldr	r3, [pc, #52]	; (800424c <HAL_MspInit+0x4c>)
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421e:	607b      	str	r3, [r7, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2300      	movs	r3, #0
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_MspInit+0x4c>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	4a08      	ldr	r2, [pc, #32]	; (800424c <HAL_MspInit+0x4c>)
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004230:	6413      	str	r3, [r2, #64]	; 0x40
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <HAL_MspInit+0x4c>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800

08004250 <HAL_I2C_MspInit>:
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	; 0x28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	f107 0314 	add.w	r3, r7, #20
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	605a      	str	r2, [r3, #4]
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	60da      	str	r2, [r3, #12]
 8004266:	611a      	str	r2, [r3, #16]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a21      	ldr	r2, [pc, #132]	; (80042f4 <HAL_I2C_MspInit+0xa4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d13c      	bne.n	80042ec <HAL_I2C_MspInit+0x9c>
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_I2C_MspInit+0xa8>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <HAL_I2C_MspInit+0xa8>)
 800427c:	f043 0302 	orr.w	r3, r3, #2
 8004280:	6313      	str	r3, [r2, #48]	; 0x30
 8004282:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <HAL_I2C_MspInit+0xa8>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	2312      	movs	r3, #18
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	2300      	movs	r3, #0
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	2303      	movs	r3, #3
 800429e:	623b      	str	r3, [r7, #32]
 80042a0:	2304      	movs	r3, #4
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
 80042a4:	f107 0314 	add.w	r3, r7, #20
 80042a8:	4619      	mov	r1, r3
 80042aa:	4814      	ldr	r0, [pc, #80]	; (80042fc <HAL_I2C_MspInit+0xac>)
 80042ac:	f000 fdea 	bl	8004e84 <HAL_GPIO_Init>
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <HAL_I2C_MspInit+0xa8>)
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	4a0f      	ldr	r2, [pc, #60]	; (80042f8 <HAL_I2C_MspInit+0xa8>)
 80042ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042be:	6413      	str	r3, [r2, #64]	; 0x40
 80042c0:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <HAL_I2C_MspInit+0xa8>)
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	2100      	movs	r1, #0
 80042d0:	201f      	movs	r0, #31
 80042d2:	f000 fcf2 	bl	8004cba <HAL_NVIC_SetPriority>
 80042d6:	201f      	movs	r0, #31
 80042d8:	f000 fd0b 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
 80042dc:	2200      	movs	r2, #0
 80042de:	2100      	movs	r1, #0
 80042e0:	2020      	movs	r0, #32
 80042e2:	f000 fcea 	bl	8004cba <HAL_NVIC_SetPriority>
 80042e6:	2020      	movs	r0, #32
 80042e8:	f000 fd03 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
 80042ec:	bf00      	nop
 80042ee:	3728      	adds	r7, #40	; 0x28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40005400 	.word	0x40005400
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40020400 	.word	0x40020400

08004300 <HAL_TIM_Base_MspInit>:
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a1a      	ldr	r2, [pc, #104]	; (8004378 <HAL_TIM_Base_MspInit+0x78>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d12d      	bne.n	800436e <HAL_TIM_Base_MspInit+0x6e>
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	4b19      	ldr	r3, [pc, #100]	; (800437c <HAL_TIM_Base_MspInit+0x7c>)
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	4a18      	ldr	r2, [pc, #96]	; (800437c <HAL_TIM_Base_MspInit+0x7c>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	6453      	str	r3, [r2, #68]	; 0x44
 8004322:	4b16      	ldr	r3, [pc, #88]	; (800437c <HAL_TIM_Base_MspInit+0x7c>)
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	2100      	movs	r1, #0
 8004332:	2018      	movs	r0, #24
 8004334:	f000 fcc1 	bl	8004cba <HAL_NVIC_SetPriority>
 8004338:	2018      	movs	r0, #24
 800433a:	f000 fcda 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
 800433e:	2200      	movs	r2, #0
 8004340:	2100      	movs	r1, #0
 8004342:	2019      	movs	r0, #25
 8004344:	f000 fcb9 	bl	8004cba <HAL_NVIC_SetPriority>
 8004348:	2019      	movs	r0, #25
 800434a:	f000 fcd2 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
 800434e:	2200      	movs	r2, #0
 8004350:	2100      	movs	r1, #0
 8004352:	201a      	movs	r0, #26
 8004354:	f000 fcb1 	bl	8004cba <HAL_NVIC_SetPriority>
 8004358:	201a      	movs	r0, #26
 800435a:	f000 fcca 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
 800435e:	2200      	movs	r2, #0
 8004360:	2100      	movs	r1, #0
 8004362:	201b      	movs	r0, #27
 8004364:	f000 fca9 	bl	8004cba <HAL_NVIC_SetPriority>
 8004368:	201b      	movs	r0, #27
 800436a:	f000 fcc2 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40010000 	.word	0x40010000
 800437c:	40023800 	.word	0x40023800

08004380 <HAL_TIM_Encoder_MspInit>:
 8004380:	b580      	push	{r7, lr}
 8004382:	b08c      	sub	sp, #48	; 0x30
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	f107 031c 	add.w	r3, r7, #28
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	611a      	str	r2, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a0:	d14b      	bne.n	800443a <HAL_TIM_Encoder_MspInit+0xba>
 80043a2:	2300      	movs	r3, #0
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	4b3f      	ldr	r3, [pc, #252]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	4a3e      	ldr	r2, [pc, #248]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	6413      	str	r3, [r2, #64]	; 0x40
 80043b2:	4b3c      	ldr	r3, [pc, #240]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2300      	movs	r3, #0
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	4b38      	ldr	r3, [pc, #224]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	4a37      	ldr	r2, [pc, #220]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 80043c8:	f043 0301 	orr.w	r3, r3, #1
 80043cc:	6313      	str	r3, [r2, #48]	; 0x30
 80043ce:	4b35      	ldr	r3, [pc, #212]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	4b31      	ldr	r3, [pc, #196]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	4a30      	ldr	r2, [pc, #192]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 80043e4:	f043 0302 	orr.w	r3, r3, #2
 80043e8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ea:	4b2e      	ldr	r3, [pc, #184]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	2302      	movs	r3, #2
 80043fe:	623b      	str	r3, [r7, #32]
 8004400:	2300      	movs	r3, #0
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
 8004404:	2300      	movs	r3, #0
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
 8004408:	2301      	movs	r3, #1
 800440a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800440c:	f107 031c 	add.w	r3, r7, #28
 8004410:	4619      	mov	r1, r3
 8004412:	4825      	ldr	r0, [pc, #148]	; (80044a8 <HAL_TIM_Encoder_MspInit+0x128>)
 8004414:	f000 fd36 	bl	8004e84 <HAL_GPIO_Init>
 8004418:	2308      	movs	r3, #8
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	2302      	movs	r3, #2
 800441e:	623b      	str	r3, [r7, #32]
 8004420:	2300      	movs	r3, #0
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
 8004424:	2300      	movs	r3, #0
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
 8004428:	2301      	movs	r3, #1
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800442c:	f107 031c 	add.w	r3, r7, #28
 8004430:	4619      	mov	r1, r3
 8004432:	481e      	ldr	r0, [pc, #120]	; (80044ac <HAL_TIM_Encoder_MspInit+0x12c>)
 8004434:	f000 fd26 	bl	8004e84 <HAL_GPIO_Init>
 8004438:	e030      	b.n	800449c <HAL_TIM_Encoder_MspInit+0x11c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1c      	ldr	r2, [pc, #112]	; (80044b0 <HAL_TIM_Encoder_MspInit+0x130>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d12b      	bne.n	800449c <HAL_TIM_Encoder_MspInit+0x11c>
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	4b16      	ldr	r3, [pc, #88]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800444e:	f043 0304 	orr.w	r3, r3, #4
 8004452:	6413      	str	r3, [r2, #64]	; 0x40
 8004454:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2300      	movs	r3, #0
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	4a0e      	ldr	r2, [pc, #56]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 800446a:	f043 0302 	orr.w	r3, r3, #2
 800446e:	6313      	str	r3, [r2, #48]	; 0x30
 8004470:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <HAL_TIM_Encoder_MspInit+0x124>)
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	23c0      	movs	r3, #192	; 0xc0
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	2302      	movs	r3, #2
 8004482:	623b      	str	r3, [r7, #32]
 8004484:	2300      	movs	r3, #0
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
 8004488:	2300      	movs	r3, #0
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28
 800448c:	2302      	movs	r3, #2
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004490:	f107 031c 	add.w	r3, r7, #28
 8004494:	4619      	mov	r1, r3
 8004496:	4805      	ldr	r0, [pc, #20]	; (80044ac <HAL_TIM_Encoder_MspInit+0x12c>)
 8004498:	f000 fcf4 	bl	8004e84 <HAL_GPIO_Init>
 800449c:	bf00      	nop
 800449e:	3730      	adds	r7, #48	; 0x30
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40023800 	.word	0x40023800
 80044a8:	40020000 	.word	0x40020000
 80044ac:	40020400 	.word	0x40020400
 80044b0:	40000800 	.word	0x40000800

080044b4 <HAL_TIM_PWM_MspInit>:
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a0e      	ldr	r2, [pc, #56]	; (80044fc <HAL_TIM_PWM_MspInit+0x48>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d115      	bne.n	80044f2 <HAL_TIM_PWM_MspInit+0x3e>
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <HAL_TIM_PWM_MspInit+0x4c>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <HAL_TIM_PWM_MspInit+0x4c>)
 80044d0:	f043 0302 	orr.w	r3, r3, #2
 80044d4:	6413      	str	r3, [r2, #64]	; 0x40
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <HAL_TIM_PWM_MspInit+0x4c>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	2100      	movs	r1, #0
 80044e6:	201d      	movs	r0, #29
 80044e8:	f000 fbe7 	bl	8004cba <HAL_NVIC_SetPriority>
 80044ec:	201d      	movs	r0, #29
 80044ee:	f000 fc00 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40000400 	.word	0x40000400
 8004500:	40023800 	.word	0x40023800

08004504 <HAL_TIM_MspPostInit>:
 8004504:	b580      	push	{r7, lr}
 8004506:	b08a      	sub	sp, #40	; 0x28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	f107 0314 	add.w	r3, r7, #20
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	611a      	str	r2, [r3, #16]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a21      	ldr	r2, [pc, #132]	; (80045a8 <HAL_TIM_MspPostInit+0xa4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d13b      	bne.n	800459e <HAL_TIM_MspPostInit+0x9a>
 8004526:	2300      	movs	r3, #0
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	4b20      	ldr	r3, [pc, #128]	; (80045ac <HAL_TIM_MspPostInit+0xa8>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	4a1f      	ldr	r2, [pc, #124]	; (80045ac <HAL_TIM_MspPostInit+0xa8>)
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	6313      	str	r3, [r2, #48]	; 0x30
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <HAL_TIM_MspPostInit+0xa8>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	4b19      	ldr	r3, [pc, #100]	; (80045ac <HAL_TIM_MspPostInit+0xa8>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	4a18      	ldr	r2, [pc, #96]	; (80045ac <HAL_TIM_MspPostInit+0xa8>)
 800454c:	f043 0302 	orr.w	r3, r3, #2
 8004550:	6313      	str	r3, [r2, #48]	; 0x30
 8004552:	4b16      	ldr	r3, [pc, #88]	; (80045ac <HAL_TIM_MspPostInit+0xa8>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	23c0      	movs	r3, #192	; 0xc0
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	2302      	movs	r3, #2
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	2300      	movs	r3, #0
 800456c:	623b      	str	r3, [r7, #32]
 800456e:	2302      	movs	r3, #2
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
 8004572:	f107 0314 	add.w	r3, r7, #20
 8004576:	4619      	mov	r1, r3
 8004578:	480d      	ldr	r0, [pc, #52]	; (80045b0 <HAL_TIM_MspPostInit+0xac>)
 800457a:	f000 fc83 	bl	8004e84 <HAL_GPIO_Init>
 800457e:	2303      	movs	r3, #3
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	2302      	movs	r3, #2
 8004584:	61bb      	str	r3, [r7, #24]
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	2300      	movs	r3, #0
 800458c:	623b      	str	r3, [r7, #32]
 800458e:	2302      	movs	r3, #2
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
 8004592:	f107 0314 	add.w	r3, r7, #20
 8004596:	4619      	mov	r1, r3
 8004598:	4806      	ldr	r0, [pc, #24]	; (80045b4 <HAL_TIM_MspPostInit+0xb0>)
 800459a:	f000 fc73 	bl	8004e84 <HAL_GPIO_Init>
 800459e:	bf00      	nop
 80045a0:	3728      	adds	r7, #40	; 0x28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40020000 	.word	0x40020000
 80045b4:	40020400 	.word	0x40020400

080045b8 <HAL_UART_MspInit>:
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	; 0x28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	f107 0314 	add.w	r3, r7, #20
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	609a      	str	r2, [r3, #8]
 80045cc:	60da      	str	r2, [r3, #12]
 80045ce:	611a      	str	r2, [r3, #16]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1d      	ldr	r2, [pc, #116]	; (800464c <HAL_UART_MspInit+0x94>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d133      	bne.n	8004642 <HAL_UART_MspInit+0x8a>
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	4b1c      	ldr	r3, [pc, #112]	; (8004650 <HAL_UART_MspInit+0x98>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <HAL_UART_MspInit+0x98>)
 80045e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ea:	4b19      	ldr	r3, [pc, #100]	; (8004650 <HAL_UART_MspInit+0x98>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	4b15      	ldr	r3, [pc, #84]	; (8004650 <HAL_UART_MspInit+0x98>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	4a14      	ldr	r2, [pc, #80]	; (8004650 <HAL_UART_MspInit+0x98>)
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	6313      	str	r3, [r2, #48]	; 0x30
 8004606:	4b12      	ldr	r3, [pc, #72]	; (8004650 <HAL_UART_MspInit+0x98>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	230c      	movs	r3, #12
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	2302      	movs	r3, #2
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	2303      	movs	r3, #3
 8004620:	623b      	str	r3, [r7, #32]
 8004622:	2307      	movs	r3, #7
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
 8004626:	f107 0314 	add.w	r3, r7, #20
 800462a:	4619      	mov	r1, r3
 800462c:	4809      	ldr	r0, [pc, #36]	; (8004654 <HAL_UART_MspInit+0x9c>)
 800462e:	f000 fc29 	bl	8004e84 <HAL_GPIO_Init>
 8004632:	2200      	movs	r2, #0
 8004634:	2100      	movs	r1, #0
 8004636:	2026      	movs	r0, #38	; 0x26
 8004638:	f000 fb3f 	bl	8004cba <HAL_NVIC_SetPriority>
 800463c:	2026      	movs	r0, #38	; 0x26
 800463e:	f000 fb58 	bl	8004cf2 <HAL_NVIC_EnableIRQ>
 8004642:	bf00      	nop
 8004644:	3728      	adds	r7, #40	; 0x28
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40004400 	.word	0x40004400
 8004650:	40023800 	.word	0x40023800
 8004654:	40020000 	.word	0x40020000

08004658 <HAL_UART_MspDeInit>:
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a09      	ldr	r2, [pc, #36]	; (800468c <HAL_UART_MspDeInit+0x34>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d10c      	bne.n	8004684 <HAL_UART_MspDeInit+0x2c>
 800466a:	4b09      	ldr	r3, [pc, #36]	; (8004690 <HAL_UART_MspDeInit+0x38>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	4a08      	ldr	r2, [pc, #32]	; (8004690 <HAL_UART_MspDeInit+0x38>)
 8004670:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004674:	6413      	str	r3, [r2, #64]	; 0x40
 8004676:	210c      	movs	r1, #12
 8004678:	4806      	ldr	r0, [pc, #24]	; (8004694 <HAL_UART_MspDeInit+0x3c>)
 800467a:	f000 fd87 	bl	800518c <HAL_GPIO_DeInit>
 800467e:	2026      	movs	r0, #38	; 0x26
 8004680:	f000 fb45 	bl	8004d0e <HAL_NVIC_DisableIRQ>
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40004400 	.word	0x40004400
 8004690:	40023800 	.word	0x40023800
 8004694:	40020000 	.word	0x40020000

08004698 <NMI_Handler>:
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
 800469c:	e7fe      	b.n	800469c <NMI_Handler+0x4>

0800469e <HardFault_Handler>:
 800469e:	b480      	push	{r7}
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	e7fe      	b.n	80046a2 <HardFault_Handler+0x4>

080046a4 <MemManage_Handler>:
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	e7fe      	b.n	80046a8 <MemManage_Handler+0x4>

080046aa <BusFault_Handler>:
 80046aa:	b480      	push	{r7}
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	e7fe      	b.n	80046ae <BusFault_Handler+0x4>

080046b0 <UsageFault_Handler>:
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	e7fe      	b.n	80046b4 <UsageFault_Handler+0x4>

080046b6 <SVC_Handler>:
 80046b6:	b480      	push	{r7}
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	bf00      	nop
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <DebugMon_Handler>:
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	bf00      	nop
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <PendSV_Handler>:
 80046d2:	b480      	push	{r7}
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	bf00      	nop
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <SysTick_Handler>:
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	f000 f9a6 	bl	8004a34 <HAL_IncTick>
 80046e8:	bf00      	nop
 80046ea:	bd80      	pop	{r7, pc}

080046ec <TIM1_BRK_TIM9_IRQHandler>:
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	4802      	ldr	r0, [pc, #8]	; (80046fc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80046f2:	f003 fba7 	bl	8007e44 <HAL_TIM_IRQHandler>
 80046f6:	bf00      	nop
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000954 	.word	0x20000954

08004700 <TIM1_UP_TIM10_IRQHandler>:
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
 8004704:	4802      	ldr	r0, [pc, #8]	; (8004710 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004706:	f003 fb9d 	bl	8007e44 <HAL_TIM_IRQHandler>
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20000954 	.word	0x20000954

08004714 <TIM1_TRG_COM_TIM11_IRQHandler>:
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
 8004718:	4802      	ldr	r0, [pc, #8]	; (8004724 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800471a:	f003 fb93 	bl	8007e44 <HAL_TIM_IRQHandler>
 800471e:	bf00      	nop
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000954 	.word	0x20000954

08004728 <TIM1_CC_IRQHandler>:
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
 800472c:	4802      	ldr	r0, [pc, #8]	; (8004738 <TIM1_CC_IRQHandler+0x10>)
 800472e:	f003 fb89 	bl	8007e44 <HAL_TIM_IRQHandler>
 8004732:	bf00      	nop
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000954 	.word	0x20000954

0800473c <TIM3_IRQHandler>:
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
 8004740:	4802      	ldr	r0, [pc, #8]	; (800474c <TIM3_IRQHandler+0x10>)
 8004742:	f003 fb7f 	bl	8007e44 <HAL_TIM_IRQHandler>
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	200009e4 	.word	0x200009e4

08004750 <I2C1_EV_IRQHandler>:
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
 8004754:	4802      	ldr	r0, [pc, #8]	; (8004760 <I2C1_EV_IRQHandler+0x10>)
 8004756:	f000 ff5b 	bl	8005610 <HAL_I2C_EV_IRQHandler>
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20000900 	.word	0x20000900

08004764 <I2C1_ER_IRQHandler>:
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
 8004768:	4802      	ldr	r0, [pc, #8]	; (8004774 <I2C1_ER_IRQHandler+0x10>)
 800476a:	f001 f8c2 	bl	80058f2 <HAL_I2C_ER_IRQHandler>
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000900 	.word	0x20000900

08004778 <USART2_IRQHandler>:
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
 800477c:	4802      	ldr	r0, [pc, #8]	; (8004788 <USART2_IRQHandler+0x10>)
 800477e:	f004 fb19 	bl	8008db4 <HAL_UART_IRQHandler>
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000a74 	.word	0x20000a74

0800478c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return 1;
 8004790:	2301      	movs	r3, #1
}
 8004792:	4618      	mov	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <_kill>:

int _kill(int pid, int sig)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80047a6:	f006 fdd3 	bl	800b350 <__errno>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2216      	movs	r2, #22
 80047ae:	601a      	str	r2, [r3, #0]
  return -1;
 80047b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <_exit>:

void _exit (int status)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80047c4:	f04f 31ff 	mov.w	r1, #4294967295
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff ffe7 	bl	800479c <_kill>
  while (1) {}    /* Make sure we hang here */
 80047ce:	e7fe      	b.n	80047ce <_exit+0x12>

080047d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	e00a      	b.n	80047f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80047e2:	f3af 8000 	nop.w
 80047e6:	4601      	mov	r1, r0
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	60ba      	str	r2, [r7, #8]
 80047ee:	b2ca      	uxtb	r2, r1
 80047f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	3301      	adds	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	dbf0      	blt.n	80047e2 <_read+0x12>
  }

  return len;
 8004800:	687b      	ldr	r3, [r7, #4]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b086      	sub	sp, #24
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	e009      	b.n	8004830 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	60ba      	str	r2, [r7, #8]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	3301      	adds	r3, #1
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	dbf1      	blt.n	800481c <_write+0x12>
  }
  return len;
 8004838:	687b      	ldr	r3, [r7, #4]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <_close>:

int _close(int file)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800484a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800486a:	605a      	str	r2, [r3, #4]
  return 0;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <_isatty>:

int _isatty(int file)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004882:	2301      	movs	r3, #1
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048b4:	4a14      	ldr	r2, [pc, #80]	; (8004908 <_sbrk+0x5c>)
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <_sbrk+0x60>)
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048c0:	4b13      	ldr	r3, [pc, #76]	; (8004910 <_sbrk+0x64>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <_sbrk+0x64>)
 80048ca:	4a12      	ldr	r2, [pc, #72]	; (8004914 <_sbrk+0x68>)
 80048cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048ce:	4b10      	ldr	r3, [pc, #64]	; (8004910 <_sbrk+0x64>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4413      	add	r3, r2
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d207      	bcs.n	80048ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048dc:	f006 fd38 	bl	800b350 <__errno>
 80048e0:	4603      	mov	r3, r0
 80048e2:	220c      	movs	r2, #12
 80048e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ea:	e009      	b.n	8004900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048ec:	4b08      	ldr	r3, [pc, #32]	; (8004910 <_sbrk+0x64>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048f2:	4b07      	ldr	r3, [pc, #28]	; (8004910 <_sbrk+0x64>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4413      	add	r3, r2
 80048fa:	4a05      	ldr	r2, [pc, #20]	; (8004910 <_sbrk+0x64>)
 80048fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048fe:	68fb      	ldr	r3, [r7, #12]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20020000 	.word	0x20020000
 800490c:	00000400 	.word	0x00000400
 8004910:	20000ab8 	.word	0x20000ab8
 8004914:	20000ad8 	.word	0x20000ad8

08004918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800491c:	4b06      	ldr	r3, [pc, #24]	; (8004938 <SystemInit+0x20>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	4a05      	ldr	r2, [pc, #20]	; (8004938 <SystemInit+0x20>)
 8004924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800492c:	bf00      	nop
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	e000ed00 	.word	0xe000ed00

0800493c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800493c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004974 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004940:	480d      	ldr	r0, [pc, #52]	; (8004978 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004942:	490e      	ldr	r1, [pc, #56]	; (800497c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004944:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004948:	e002      	b.n	8004950 <LoopCopyDataInit>

0800494a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800494a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800494c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800494e:	3304      	adds	r3, #4

08004950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004954:	d3f9      	bcc.n	800494a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004956:	4a0b      	ldr	r2, [pc, #44]	; (8004984 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004958:	4c0b      	ldr	r4, [pc, #44]	; (8004988 <LoopFillZerobss+0x26>)
  movs r3, #0
 800495a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800495c:	e001      	b.n	8004962 <LoopFillZerobss>

0800495e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800495e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004960:	3204      	adds	r2, #4

08004962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004964:	d3fb      	bcc.n	800495e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004966:	f7ff ffd7 	bl	8004918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800496a:	f006 fcf7 	bl	800b35c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800496e:	f7fd fd21 	bl	80023b4 <main>
  bx  lr    
 8004972:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800497c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004980:	0800e474 	.word	0x0800e474
  ldr r2, =_sbss
 8004984:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004988:	20000ad4 	.word	0x20000ad4

0800498c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800498c:	e7fe      	b.n	800498c <ADC_IRQHandler>
	...

08004990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004994:	4b0e      	ldr	r3, [pc, #56]	; (80049d0 <HAL_Init+0x40>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0d      	ldr	r2, [pc, #52]	; (80049d0 <HAL_Init+0x40>)
 800499a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800499e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_Init+0x40>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a0a      	ldr	r2, [pc, #40]	; (80049d0 <HAL_Init+0x40>)
 80049a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049ac:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <HAL_Init+0x40>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a07      	ldr	r2, [pc, #28]	; (80049d0 <HAL_Init+0x40>)
 80049b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049b8:	2003      	movs	r0, #3
 80049ba:	f000 f973 	bl	8004ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049be:	200f      	movs	r0, #15
 80049c0:	f000 f808 	bl	80049d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049c4:	f7ff fc1c 	bl	8004200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023c00 	.word	0x40023c00

080049d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049dc:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <HAL_InitTick+0x54>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <HAL_InitTick+0x58>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	4619      	mov	r1, r3
 80049e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80049ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 f999 	bl	8004d2a <HAL_SYSTICK_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e00e      	b.n	8004a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b0f      	cmp	r3, #15
 8004a06:	d80a      	bhi.n	8004a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a10:	f000 f953 	bl	8004cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a14:	4a06      	ldr	r2, [pc, #24]	; (8004a30 <HAL_InitTick+0x5c>)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e000      	b.n	8004a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000004 	.word	0x20000004
 8004a2c:	2000000c 	.word	0x2000000c
 8004a30:	20000008 	.word	0x20000008

08004a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <HAL_IncTick+0x20>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <HAL_IncTick+0x24>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4413      	add	r3, r2
 8004a44:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <HAL_IncTick+0x24>)
 8004a46:	6013      	str	r3, [r2, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	2000000c 	.word	0x2000000c
 8004a58:	20000abc 	.word	0x20000abc

08004a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8004a60:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <HAL_GetTick+0x14>)
 8004a62:	681b      	ldr	r3, [r3, #0]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000abc 	.word	0x20000abc

08004a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a7c:	f7ff ffee 	bl	8004a5c <HAL_GetTick>
 8004a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d005      	beq.n	8004a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <HAL_Delay+0x44>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a9a:	bf00      	nop
 8004a9c:	f7ff ffde 	bl	8004a5c <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d8f7      	bhi.n	8004a9c <HAL_Delay+0x28>
  {
  }
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	2000000c 	.word	0x2000000c

08004abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004acc:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <__NVIC_SetPriorityGrouping+0x44>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ad8:	4013      	ands	r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aee:	4a04      	ldr	r2, [pc, #16]	; (8004b00 <__NVIC_SetPriorityGrouping+0x44>)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	60d3      	str	r3, [r2, #12]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	e000ed00 	.word	0xe000ed00

08004b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b08:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <__NVIC_GetPriorityGrouping+0x18>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	0a1b      	lsrs	r3, r3, #8
 8004b0e:	f003 0307 	and.w	r3, r3, #7
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	e000ed00 	.word	0xe000ed00

08004b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	db0b      	blt.n	8004b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	f003 021f 	and.w	r2, r3, #31
 8004b38:	4907      	ldr	r1, [pc, #28]	; (8004b58 <__NVIC_EnableIRQ+0x38>)
 8004b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2001      	movs	r0, #1
 8004b42:	fa00 f202 	lsl.w	r2, r0, r2
 8004b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	e000e100 	.word	0xe000e100

08004b5c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	db12      	blt.n	8004b94 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	f003 021f 	and.w	r2, r3, #31
 8004b74:	490a      	ldr	r1, [pc, #40]	; (8004ba0 <__NVIC_DisableIRQ+0x44>)
 8004b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	2001      	movs	r0, #1
 8004b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b82:	3320      	adds	r3, #32
 8004b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b88:	f3bf 8f4f 	dsb	sy
}
 8004b8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b8e:	f3bf 8f6f 	isb	sy
}
 8004b92:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	e000e100 	.word	0xe000e100

08004ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	6039      	str	r1, [r7, #0]
 8004bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	db0a      	blt.n	8004bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	490c      	ldr	r1, [pc, #48]	; (8004bf0 <__NVIC_SetPriority+0x4c>)
 8004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc2:	0112      	lsls	r2, r2, #4
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bcc:	e00a      	b.n	8004be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4908      	ldr	r1, [pc, #32]	; (8004bf4 <__NVIC_SetPriority+0x50>)
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	3b04      	subs	r3, #4
 8004bdc:	0112      	lsls	r2, r2, #4
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	440b      	add	r3, r1
 8004be2:	761a      	strb	r2, [r3, #24]
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	e000e100 	.word	0xe000e100
 8004bf4:	e000ed00 	.word	0xe000ed00

08004bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b089      	sub	sp, #36	; 0x24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f1c3 0307 	rsb	r3, r3, #7
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	bf28      	it	cs
 8004c16:	2304      	movcs	r3, #4
 8004c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	2b06      	cmp	r3, #6
 8004c20:	d902      	bls.n	8004c28 <NVIC_EncodePriority+0x30>
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	3b03      	subs	r3, #3
 8004c26:	e000      	b.n	8004c2a <NVIC_EncodePriority+0x32>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43da      	mvns	r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	401a      	ands	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c40:	f04f 31ff 	mov.w	r1, #4294967295
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4a:	43d9      	mvns	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c50:	4313      	orrs	r3, r2
         );
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3724      	adds	r7, #36	; 0x24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
	...

08004c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c70:	d301      	bcc.n	8004c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c72:	2301      	movs	r3, #1
 8004c74:	e00f      	b.n	8004c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c76:	4a0a      	ldr	r2, [pc, #40]	; (8004ca0 <SysTick_Config+0x40>)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c7e:	210f      	movs	r1, #15
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295
 8004c84:	f7ff ff8e 	bl	8004ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <SysTick_Config+0x40>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c8e:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <SysTick_Config+0x40>)
 8004c90:	2207      	movs	r2, #7
 8004c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	e000e010 	.word	0xe000e010

08004ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff ff05 	bl	8004abc <__NVIC_SetPriorityGrouping>
}
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b086      	sub	sp, #24
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ccc:	f7ff ff1a 	bl	8004b04 <__NVIC_GetPriorityGrouping>
 8004cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f7ff ff8e 	bl	8004bf8 <NVIC_EncodePriority>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff ff5d 	bl	8004ba4 <__NVIC_SetPriority>
}
 8004cea:	bf00      	nop
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff ff0d 	bl	8004b20 <__NVIC_EnableIRQ>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	4603      	mov	r3, r0
 8004d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff ff1d 	bl	8004b5c <__NVIC_DisableIRQ>
}
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff ff94 	bl	8004c60 <SysTick_Config>
 8004d38:	4603      	mov	r3, r0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d50:	f7ff fe84 	bl	8004a5c <HAL_GetTick>
 8004d54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d008      	beq.n	8004d74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2280      	movs	r2, #128	; 0x80
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e052      	b.n	8004e1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0216 	bic.w	r2, r2, #22
 8004d82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d103      	bne.n	8004da4 <HAL_DMA_Abort+0x62>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d007      	beq.n	8004db4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0208 	bic.w	r2, r2, #8
 8004db2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0201 	bic.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dc4:	e013      	b.n	8004dee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dc6:	f7ff fe49 	bl	8004a5c <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b05      	cmp	r3, #5
 8004dd2:	d90c      	bls.n	8004dee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2203      	movs	r2, #3
 8004dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e015      	b.n	8004e1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e4      	bne.n	8004dc6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e00:	223f      	movs	r2, #63	; 0x3f
 8004e02:	409a      	lsls	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d004      	beq.n	8004e40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2280      	movs	r2, #128	; 0x80
 8004e3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e00c      	b.n	8004e5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2205      	movs	r2, #5
 8004e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e74:	b2db      	uxtb	r3, r3
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b089      	sub	sp, #36	; 0x24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
 8004e9e:	e159      	b.n	8005154 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	f040 8148 	bne.w	800514e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d005      	beq.n	8004ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d130      	bne.n	8004f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4013      	ands	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	43db      	mvns	r3, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	091b      	lsrs	r3, r3, #4
 8004f22:	f003 0201 	and.w	r2, r3, #1
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d017      	beq.n	8004f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	2203      	movs	r2, #3
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	43db      	mvns	r3, r3
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d123      	bne.n	8004fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	08da      	lsrs	r2, r3, #3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3208      	adds	r2, #8
 8004f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	220f      	movs	r2, #15
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	08da      	lsrs	r2, r3, #3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3208      	adds	r2, #8
 8004fc2:	69b9      	ldr	r1, [r7, #24]
 8004fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	2203      	movs	r2, #3
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f003 0203 	and.w	r2, r3, #3
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80a2 	beq.w	800514e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	4b57      	ldr	r3, [pc, #348]	; (800516c <HAL_GPIO_Init+0x2e8>)
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	4a56      	ldr	r2, [pc, #344]	; (800516c <HAL_GPIO_Init+0x2e8>)
 8005014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005018:	6453      	str	r3, [r2, #68]	; 0x44
 800501a:	4b54      	ldr	r3, [pc, #336]	; (800516c <HAL_GPIO_Init+0x2e8>)
 800501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005026:	4a52      	ldr	r2, [pc, #328]	; (8005170 <HAL_GPIO_Init+0x2ec>)
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	089b      	lsrs	r3, r3, #2
 800502c:	3302      	adds	r3, #2
 800502e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	220f      	movs	r2, #15
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43db      	mvns	r3, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4013      	ands	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a49      	ldr	r2, [pc, #292]	; (8005174 <HAL_GPIO_Init+0x2f0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d019      	beq.n	8005086 <HAL_GPIO_Init+0x202>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a48      	ldr	r2, [pc, #288]	; (8005178 <HAL_GPIO_Init+0x2f4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <HAL_GPIO_Init+0x1fe>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a47      	ldr	r2, [pc, #284]	; (800517c <HAL_GPIO_Init+0x2f8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00d      	beq.n	800507e <HAL_GPIO_Init+0x1fa>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a46      	ldr	r2, [pc, #280]	; (8005180 <HAL_GPIO_Init+0x2fc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d007      	beq.n	800507a <HAL_GPIO_Init+0x1f6>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a45      	ldr	r2, [pc, #276]	; (8005184 <HAL_GPIO_Init+0x300>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d101      	bne.n	8005076 <HAL_GPIO_Init+0x1f2>
 8005072:	2304      	movs	r3, #4
 8005074:	e008      	b.n	8005088 <HAL_GPIO_Init+0x204>
 8005076:	2307      	movs	r3, #7
 8005078:	e006      	b.n	8005088 <HAL_GPIO_Init+0x204>
 800507a:	2303      	movs	r3, #3
 800507c:	e004      	b.n	8005088 <HAL_GPIO_Init+0x204>
 800507e:	2302      	movs	r3, #2
 8005080:	e002      	b.n	8005088 <HAL_GPIO_Init+0x204>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <HAL_GPIO_Init+0x204>
 8005086:	2300      	movs	r3, #0
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	f002 0203 	and.w	r2, r2, #3
 800508e:	0092      	lsls	r2, r2, #2
 8005090:	4093      	lsls	r3, r2
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005098:	4935      	ldr	r1, [pc, #212]	; (8005170 <HAL_GPIO_Init+0x2ec>)
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	089b      	lsrs	r3, r3, #2
 800509e:	3302      	adds	r3, #2
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050a6:	4b38      	ldr	r3, [pc, #224]	; (8005188 <HAL_GPIO_Init+0x304>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	43db      	mvns	r3, r3
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	4013      	ands	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050ca:	4a2f      	ldr	r2, [pc, #188]	; (8005188 <HAL_GPIO_Init+0x304>)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050d0:	4b2d      	ldr	r3, [pc, #180]	; (8005188 <HAL_GPIO_Init+0x304>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	43db      	mvns	r3, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4013      	ands	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050f4:	4a24      	ldr	r2, [pc, #144]	; (8005188 <HAL_GPIO_Init+0x304>)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050fa:	4b23      	ldr	r3, [pc, #140]	; (8005188 <HAL_GPIO_Init+0x304>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	43db      	mvns	r3, r3
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4013      	ands	r3, r2
 8005108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800511e:	4a1a      	ldr	r2, [pc, #104]	; (8005188 <HAL_GPIO_Init+0x304>)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005124:	4b18      	ldr	r3, [pc, #96]	; (8005188 <HAL_GPIO_Init+0x304>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005148:	4a0f      	ldr	r2, [pc, #60]	; (8005188 <HAL_GPIO_Init+0x304>)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	3301      	adds	r3, #1
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	2b0f      	cmp	r3, #15
 8005158:	f67f aea2 	bls.w	8004ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800515c:	bf00      	nop
 800515e:	bf00      	nop
 8005160:	3724      	adds	r7, #36	; 0x24
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800
 8005170:	40013800 	.word	0x40013800
 8005174:	40020000 	.word	0x40020000
 8005178:	40020400 	.word	0x40020400
 800517c:	40020800 	.word	0x40020800
 8005180:	40020c00 	.word	0x40020c00
 8005184:	40021000 	.word	0x40021000
 8005188:	40013c00 	.word	0x40013c00

0800518c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005196:	2300      	movs	r3, #0
 8005198:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e0bb      	b.n	8005320 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051a8:	2201      	movs	r2, #1
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4013      	ands	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	429a      	cmp	r2, r3
 80051c0:	f040 80ab 	bne.w	800531a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80051c4:	4a5c      	ldr	r2, [pc, #368]	; (8005338 <HAL_GPIO_DeInit+0x1ac>)
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	089b      	lsrs	r3, r3, #2
 80051ca:	3302      	adds	r3, #2
 80051cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	220f      	movs	r2, #15
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	4013      	ands	r3, r2
 80051e4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a54      	ldr	r2, [pc, #336]	; (800533c <HAL_GPIO_DeInit+0x1b0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d019      	beq.n	8005222 <HAL_GPIO_DeInit+0x96>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a53      	ldr	r2, [pc, #332]	; (8005340 <HAL_GPIO_DeInit+0x1b4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <HAL_GPIO_DeInit+0x92>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a52      	ldr	r2, [pc, #328]	; (8005344 <HAL_GPIO_DeInit+0x1b8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00d      	beq.n	800521a <HAL_GPIO_DeInit+0x8e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a51      	ldr	r2, [pc, #324]	; (8005348 <HAL_GPIO_DeInit+0x1bc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d007      	beq.n	8005216 <HAL_GPIO_DeInit+0x8a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a50      	ldr	r2, [pc, #320]	; (800534c <HAL_GPIO_DeInit+0x1c0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d101      	bne.n	8005212 <HAL_GPIO_DeInit+0x86>
 800520e:	2304      	movs	r3, #4
 8005210:	e008      	b.n	8005224 <HAL_GPIO_DeInit+0x98>
 8005212:	2307      	movs	r3, #7
 8005214:	e006      	b.n	8005224 <HAL_GPIO_DeInit+0x98>
 8005216:	2303      	movs	r3, #3
 8005218:	e004      	b.n	8005224 <HAL_GPIO_DeInit+0x98>
 800521a:	2302      	movs	r3, #2
 800521c:	e002      	b.n	8005224 <HAL_GPIO_DeInit+0x98>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <HAL_GPIO_DeInit+0x98>
 8005222:	2300      	movs	r3, #0
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	f002 0203 	and.w	r2, r2, #3
 800522a:	0092      	lsls	r2, r2, #2
 800522c:	4093      	lsls	r3, r2
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	429a      	cmp	r2, r3
 8005232:	d132      	bne.n	800529a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005234:	4b46      	ldr	r3, [pc, #280]	; (8005350 <HAL_GPIO_DeInit+0x1c4>)
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	43db      	mvns	r3, r3
 800523c:	4944      	ldr	r1, [pc, #272]	; (8005350 <HAL_GPIO_DeInit+0x1c4>)
 800523e:	4013      	ands	r3, r2
 8005240:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005242:	4b43      	ldr	r3, [pc, #268]	; (8005350 <HAL_GPIO_DeInit+0x1c4>)
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	43db      	mvns	r3, r3
 800524a:	4941      	ldr	r1, [pc, #260]	; (8005350 <HAL_GPIO_DeInit+0x1c4>)
 800524c:	4013      	ands	r3, r2
 800524e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005250:	4b3f      	ldr	r3, [pc, #252]	; (8005350 <HAL_GPIO_DeInit+0x1c4>)
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	43db      	mvns	r3, r3
 8005258:	493d      	ldr	r1, [pc, #244]	; (8005350 <HAL_GPIO_DeInit+0x1c4>)
 800525a:	4013      	ands	r3, r2
 800525c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800525e:	4b3c      	ldr	r3, [pc, #240]	; (8005350 <HAL_GPIO_DeInit+0x1c4>)
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	43db      	mvns	r3, r3
 8005266:	493a      	ldr	r1, [pc, #232]	; (8005350 <HAL_GPIO_DeInit+0x1c4>)
 8005268:	4013      	ands	r3, r2
 800526a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	220f      	movs	r2, #15
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800527c:	4a2e      	ldr	r2, [pc, #184]	; (8005338 <HAL_GPIO_DeInit+0x1ac>)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	089b      	lsrs	r3, r3, #2
 8005282:	3302      	adds	r3, #2
 8005284:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	43da      	mvns	r2, r3
 800528c:	482a      	ldr	r0, [pc, #168]	; (8005338 <HAL_GPIO_DeInit+0x1ac>)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	089b      	lsrs	r3, r3, #2
 8005292:	400a      	ands	r2, r1
 8005294:	3302      	adds	r3, #2
 8005296:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	2103      	movs	r1, #3
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	43db      	mvns	r3, r3
 80052aa:	401a      	ands	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	08da      	lsrs	r2, r3, #3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3208      	adds	r2, #8
 80052b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	220f      	movs	r2, #15
 80052c6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ca:	43db      	mvns	r3, r3
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	08d2      	lsrs	r2, r2, #3
 80052d0:	4019      	ands	r1, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3208      	adds	r2, #8
 80052d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	2103      	movs	r1, #3
 80052e4:	fa01 f303 	lsl.w	r3, r1, r3
 80052e8:	43db      	mvns	r3, r3
 80052ea:	401a      	ands	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	2101      	movs	r1, #1
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	fa01 f303 	lsl.w	r3, r1, r3
 80052fc:	43db      	mvns	r3, r3
 80052fe:	401a      	ands	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	2103      	movs	r1, #3
 800530e:	fa01 f303 	lsl.w	r3, r1, r3
 8005312:	43db      	mvns	r3, r3
 8005314:	401a      	ands	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	3301      	adds	r3, #1
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b0f      	cmp	r3, #15
 8005324:	f67f af40 	bls.w	80051a8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	371c      	adds	r7, #28
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40013800 	.word	0x40013800
 800533c:	40020000 	.word	0x40020000
 8005340:	40020400 	.word	0x40020400
 8005344:	40020800 	.word	0x40020800
 8005348:	40020c00 	.word	0x40020c00
 800534c:	40021000 	.word	0x40021000
 8005350:	40013c00 	.word	0x40013c00

08005354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	807b      	strh	r3, [r7, #2]
 8005360:	4613      	mov	r3, r2
 8005362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005364:	787b      	ldrb	r3, [r7, #1]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800536a:	887a      	ldrh	r2, [r7, #2]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005370:	e003      	b.n	800537a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005372:	887b      	ldrh	r3, [r7, #2]
 8005374:	041a      	lsls	r2, r3, #16
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	619a      	str	r2, [r3, #24]
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
	...

08005388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e12b      	b.n	80055f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d106      	bne.n	80053b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fe ff4e 	bl	8004250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2224      	movs	r2, #36	; 0x24
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053ec:	f002 fa1c 	bl	8007828 <HAL_RCC_GetPCLK1Freq>
 80053f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	4a81      	ldr	r2, [pc, #516]	; (80055fc <HAL_I2C_Init+0x274>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d807      	bhi.n	800540c <HAL_I2C_Init+0x84>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4a80      	ldr	r2, [pc, #512]	; (8005600 <HAL_I2C_Init+0x278>)
 8005400:	4293      	cmp	r3, r2
 8005402:	bf94      	ite	ls
 8005404:	2301      	movls	r3, #1
 8005406:	2300      	movhi	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	e006      	b.n	800541a <HAL_I2C_Init+0x92>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4a7d      	ldr	r2, [pc, #500]	; (8005604 <HAL_I2C_Init+0x27c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	bf94      	ite	ls
 8005414:	2301      	movls	r3, #1
 8005416:	2300      	movhi	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e0e7      	b.n	80055f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4a78      	ldr	r2, [pc, #480]	; (8005608 <HAL_I2C_Init+0x280>)
 8005426:	fba2 2303 	umull	r2, r3, r2, r3
 800542a:	0c9b      	lsrs	r3, r3, #18
 800542c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	430a      	orrs	r2, r1
 8005440:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4a6a      	ldr	r2, [pc, #424]	; (80055fc <HAL_I2C_Init+0x274>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d802      	bhi.n	800545c <HAL_I2C_Init+0xd4>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	3301      	adds	r3, #1
 800545a:	e009      	b.n	8005470 <HAL_I2C_Init+0xe8>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005462:	fb02 f303 	mul.w	r3, r2, r3
 8005466:	4a69      	ldr	r2, [pc, #420]	; (800560c <HAL_I2C_Init+0x284>)
 8005468:	fba2 2303 	umull	r2, r3, r2, r3
 800546c:	099b      	lsrs	r3, r3, #6
 800546e:	3301      	adds	r3, #1
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	430b      	orrs	r3, r1
 8005476:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005482:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	495c      	ldr	r1, [pc, #368]	; (80055fc <HAL_I2C_Init+0x274>)
 800548c:	428b      	cmp	r3, r1
 800548e:	d819      	bhi.n	80054c4 <HAL_I2C_Init+0x13c>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	1e59      	subs	r1, r3, #1
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	fbb1 f3f3 	udiv	r3, r1, r3
 800549e:	1c59      	adds	r1, r3, #1
 80054a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054a4:	400b      	ands	r3, r1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_I2C_Init+0x138>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1e59      	subs	r1, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80054b8:	3301      	adds	r3, #1
 80054ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054be:	e051      	b.n	8005564 <HAL_I2C_Init+0x1dc>
 80054c0:	2304      	movs	r3, #4
 80054c2:	e04f      	b.n	8005564 <HAL_I2C_Init+0x1dc>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d111      	bne.n	80054f0 <HAL_I2C_Init+0x168>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	1e58      	subs	r0, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6859      	ldr	r1, [r3, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	440b      	add	r3, r1
 80054da:	fbb0 f3f3 	udiv	r3, r0, r3
 80054de:	3301      	adds	r3, #1
 80054e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	e012      	b.n	8005516 <HAL_I2C_Init+0x18e>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	1e58      	subs	r0, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6859      	ldr	r1, [r3, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	0099      	lsls	r1, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	fbb0 f3f3 	udiv	r3, r0, r3
 8005506:	3301      	adds	r3, #1
 8005508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800550c:	2b00      	cmp	r3, #0
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_I2C_Init+0x196>
 800551a:	2301      	movs	r3, #1
 800551c:	e022      	b.n	8005564 <HAL_I2C_Init+0x1dc>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10e      	bne.n	8005544 <HAL_I2C_Init+0x1bc>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1e58      	subs	r0, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6859      	ldr	r1, [r3, #4]
 800552e:	460b      	mov	r3, r1
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	440b      	add	r3, r1
 8005534:	fbb0 f3f3 	udiv	r3, r0, r3
 8005538:	3301      	adds	r3, #1
 800553a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005542:	e00f      	b.n	8005564 <HAL_I2C_Init+0x1dc>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	1e58      	subs	r0, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6859      	ldr	r1, [r3, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	0099      	lsls	r1, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	fbb0 f3f3 	udiv	r3, r0, r3
 800555a:	3301      	adds	r3, #1
 800555c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005560:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	6809      	ldr	r1, [r1, #0]
 8005568:	4313      	orrs	r3, r2
 800556a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69da      	ldr	r2, [r3, #28]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005592:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6911      	ldr	r1, [r2, #16]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	68d2      	ldr	r2, [r2, #12]
 800559e:	4311      	orrs	r1, r2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	430b      	orrs	r3, r1
 80055a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	000186a0 	.word	0x000186a0
 8005600:	001e847f 	.word	0x001e847f
 8005604:	003d08ff 	.word	0x003d08ff
 8005608:	431bde83 	.word	0x431bde83
 800560c:	10624dd3 	.word	0x10624dd3

08005610 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005630:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005638:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b10      	cmp	r3, #16
 800563e:	d003      	beq.n	8005648 <HAL_I2C_EV_IRQHandler+0x38>
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	f040 80c1 	bne.w	80057ca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10d      	bne.n	800567e <HAL_I2C_EV_IRQHandler+0x6e>
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005668:	d003      	beq.n	8005672 <HAL_I2C_EV_IRQHandler+0x62>
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005670:	d101      	bne.n	8005676 <HAL_I2C_EV_IRQHandler+0x66>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <HAL_I2C_EV_IRQHandler+0x68>
 8005676:	2300      	movs	r3, #0
 8005678:	2b01      	cmp	r3, #1
 800567a:	f000 8132 	beq.w	80058e2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00c      	beq.n	80056a2 <HAL_I2C_EV_IRQHandler+0x92>
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	0a5b      	lsrs	r3, r3, #9
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d006      	beq.n	80056a2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 fc7b 	bl	8006f90 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fd83 	bl	80061a6 <I2C_Master_SB>
 80056a0:	e092      	b.n	80057c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	08db      	lsrs	r3, r3, #3
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <HAL_I2C_EV_IRQHandler+0xb2>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	0a5b      	lsrs	r3, r3, #9
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fdf9 	bl	80062b2 <I2C_Master_ADD10>
 80056c0:	e082      	b.n	80057c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	085b      	lsrs	r3, r3, #1
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_I2C_EV_IRQHandler+0xd2>
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	0a5b      	lsrs	r3, r3, #9
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fe13 	bl	8006306 <I2C_Master_ADDR>
 80056e0:	e072      	b.n	80057c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	089b      	lsrs	r3, r3, #2
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d03b      	beq.n	8005766 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056fc:	f000 80f3 	beq.w	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	09db      	lsrs	r3, r3, #7
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00f      	beq.n	800572c <HAL_I2C_EV_IRQHandler+0x11c>
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	0a9b      	lsrs	r3, r3, #10
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d009      	beq.n	800572c <HAL_I2C_EV_IRQHandler+0x11c>
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	089b      	lsrs	r3, r3, #2
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d103      	bne.n	800572c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f9f3 	bl	8005b10 <I2C_MasterTransmit_TXE>
 800572a:	e04d      	b.n	80057c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	089b      	lsrs	r3, r3, #2
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 80d6 	beq.w	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	0a5b      	lsrs	r3, r3, #9
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 80cf 	beq.w	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005748:	7bbb      	ldrb	r3, [r7, #14]
 800574a:	2b21      	cmp	r3, #33	; 0x21
 800574c:	d103      	bne.n	8005756 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fa7a 	bl	8005c48 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005754:	e0c7      	b.n	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	f040 80c4 	bne.w	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fae8 	bl	8005d34 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005764:	e0bf      	b.n	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005774:	f000 80b7 	beq.w	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	099b      	lsrs	r3, r3, #6
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00f      	beq.n	80057a4 <HAL_I2C_EV_IRQHandler+0x194>
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	0a9b      	lsrs	r3, r3, #10
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d009      	beq.n	80057a4 <HAL_I2C_EV_IRQHandler+0x194>
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	089b      	lsrs	r3, r3, #2
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d103      	bne.n	80057a4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fb5d 	bl	8005e5c <I2C_MasterReceive_RXNE>
 80057a2:	e011      	b.n	80057c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	089b      	lsrs	r3, r3, #2
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 809a 	beq.w	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	0a5b      	lsrs	r3, r3, #9
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 8093 	beq.w	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fc06 	bl	8005fd2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057c6:	e08e      	b.n	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80057c8:	e08d      	b.n	80058e6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d004      	beq.n	80057dc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	e007      	b.n	80057ec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	085b      	lsrs	r3, r3, #1
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d012      	beq.n	800581e <HAL_I2C_EV_IRQHandler+0x20e>
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	0a5b      	lsrs	r3, r3, #9
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00c      	beq.n	800581e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005814:	69b9      	ldr	r1, [r7, #24]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 ffc4 	bl	80067a4 <I2C_Slave_ADDR>
 800581c:	e066      	b.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	091b      	lsrs	r3, r3, #4
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <HAL_I2C_EV_IRQHandler+0x22e>
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	0a5b      	lsrs	r3, r3, #9
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fffe 	bl	8006838 <I2C_Slave_STOPF>
 800583c:	e056      	b.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800583e:	7bbb      	ldrb	r3, [r7, #14]
 8005840:	2b21      	cmp	r3, #33	; 0x21
 8005842:	d002      	beq.n	800584a <HAL_I2C_EV_IRQHandler+0x23a>
 8005844:	7bbb      	ldrb	r3, [r7, #14]
 8005846:	2b29      	cmp	r3, #41	; 0x29
 8005848:	d125      	bne.n	8005896 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	09db      	lsrs	r3, r3, #7
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00f      	beq.n	8005876 <HAL_I2C_EV_IRQHandler+0x266>
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	0a9b      	lsrs	r3, r3, #10
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <HAL_I2C_EV_IRQHandler+0x266>
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	089b      	lsrs	r3, r3, #2
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 feda 	bl	8006628 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005874:	e039      	b.n	80058ea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	089b      	lsrs	r3, r3, #2
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d033      	beq.n	80058ea <HAL_I2C_EV_IRQHandler+0x2da>
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	0a5b      	lsrs	r3, r3, #9
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d02d      	beq.n	80058ea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 ff07 	bl	80066a2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005894:	e029      	b.n	80058ea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	099b      	lsrs	r3, r3, #6
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00f      	beq.n	80058c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	0a9b      	lsrs	r3, r3, #10
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d009      	beq.n	80058c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	089b      	lsrs	r3, r3, #2
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d103      	bne.n	80058c2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 ff12 	bl	80066e4 <I2C_SlaveReceive_RXNE>
 80058c0:	e014      	b.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	089b      	lsrs	r3, r3, #2
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00e      	beq.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	0a5b      	lsrs	r3, r3, #9
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d008      	beq.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 ff40 	bl	8006760 <I2C_SlaveReceive_BTF>
 80058e0:	e004      	b.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80058e2:	bf00      	nop
 80058e4:	e002      	b.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80058ec:	3720      	adds	r7, #32
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b08a      	sub	sp, #40	; 0x28
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800590a:	2300      	movs	r3, #0
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005914:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	0a1b      	lsrs	r3, r3, #8
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00e      	beq.n	8005940 <HAL_I2C_ER_IRQHandler+0x4e>
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800593e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	0a5b      	lsrs	r3, r3, #9
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00e      	beq.n	800596a <HAL_I2C_ER_IRQHandler+0x78>
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	0a1b      	lsrs	r3, r3, #8
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	f043 0302 	orr.w	r3, r3, #2
 800595e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005968:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	0a9b      	lsrs	r3, r3, #10
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d03f      	beq.n	80059f6 <HAL_I2C_ER_IRQHandler+0x104>
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	0a1b      	lsrs	r3, r3, #8
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d039      	beq.n	80059f6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005982:	7efb      	ldrb	r3, [r7, #27]
 8005984:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598a:	b29b      	uxth	r3, r3
 800598c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005994:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800599c:	7ebb      	ldrb	r3, [r7, #26]
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d112      	bne.n	80059c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10f      	bne.n	80059c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80059a8:	7cfb      	ldrb	r3, [r7, #19]
 80059aa:	2b21      	cmp	r3, #33	; 0x21
 80059ac:	d008      	beq.n	80059c0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80059ae:	7cfb      	ldrb	r3, [r7, #19]
 80059b0:	2b29      	cmp	r3, #41	; 0x29
 80059b2:	d005      	beq.n	80059c0 <HAL_I2C_ER_IRQHandler+0xce>
 80059b4:	7cfb      	ldrb	r3, [r7, #19]
 80059b6:	2b28      	cmp	r3, #40	; 0x28
 80059b8:	d106      	bne.n	80059c8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b21      	cmp	r3, #33	; 0x21
 80059be:	d103      	bne.n	80059c8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 f869 	bl	8006a98 <I2C_Slave_AF>
 80059c6:	e016      	b.n	80059f6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059d0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	f043 0304 	orr.w	r3, r3, #4
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80059da:	7efb      	ldrb	r3, [r7, #27]
 80059dc:	2b10      	cmp	r3, #16
 80059de:	d002      	beq.n	80059e6 <HAL_I2C_ER_IRQHandler+0xf4>
 80059e0:	7efb      	ldrb	r3, [r7, #27]
 80059e2:	2b40      	cmp	r3, #64	; 0x40
 80059e4:	d107      	bne.n	80059f6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	0adb      	lsrs	r3, r3, #11
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00e      	beq.n	8005a20 <HAL_I2C_ER_IRQHandler+0x12e>
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	0a1b      	lsrs	r3, r3, #8
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d008      	beq.n	8005a20 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	f043 0308 	orr.w	r3, r3, #8
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005a1e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d008      	beq.n	8005a38 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 f8a0 	bl	8006b78 <I2C_ITError>
  }
}
 8005a38:	bf00      	nop
 8005a3a:	3728      	adds	r7, #40	; 0x28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d150      	bne.n	8005bd8 <I2C_MasterTransmit_TXE+0xc8>
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	2b21      	cmp	r3, #33	; 0x21
 8005b3a:	d14d      	bne.n	8005bd8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	d01d      	beq.n	8005b7e <I2C_MasterTransmit_TXE+0x6e>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	d01a      	beq.n	8005b7e <I2C_MasterTransmit_TXE+0x6e>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b4e:	d016      	beq.n	8005b7e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b5e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2211      	movs	r2, #17
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff ff62 	bl	8005a40 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b7c:	e060      	b.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b8c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d107      	bne.n	8005bc8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff ff7d 	bl	8005ac0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bc6:	e03b      	b.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff ff35 	bl	8005a40 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bd6:	e033      	b.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	2b21      	cmp	r3, #33	; 0x21
 8005bdc:	d005      	beq.n	8005bea <I2C_MasterTransmit_TXE+0xda>
 8005bde:	7bbb      	ldrb	r3, [r7, #14]
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d12d      	bne.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	2b22      	cmp	r3, #34	; 0x22
 8005be8:	d12a      	bne.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d108      	bne.n	8005c06 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c02:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005c04:	e01c      	b.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b40      	cmp	r3, #64	; 0x40
 8005c10:	d103      	bne.n	8005c1a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f88e 	bl	8005d34 <I2C_MemoryTransmit_TXE_BTF>
}
 8005c18:	e012      	b.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	781a      	ldrb	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c3e:	e7ff      	b.n	8005c40 <I2C_MasterTransmit_TXE+0x130>
 8005c40:	bf00      	nop
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b21      	cmp	r3, #33	; 0x21
 8005c60:	d164      	bne.n	8005d2c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d012      	beq.n	8005c92 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	781a      	ldrb	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005c90:	e04c      	b.n	8005d2c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d01d      	beq.n	8005cd4 <I2C_MasterTransmit_BTF+0x8c>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	d01a      	beq.n	8005cd4 <I2C_MasterTransmit_BTF+0x8c>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ca4:	d016      	beq.n	8005cd4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cb4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2211      	movs	r2, #17
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff feb7 	bl	8005a40 <HAL_I2C_MasterTxCpltCallback>
}
 8005cd2:	e02b      	b.n	8005d2c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ce2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d107      	bne.n	8005d1e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff fed2 	bl	8005ac0 <HAL_I2C_MemTxCpltCallback>
}
 8005d1c:	e006      	b.n	8005d2c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff fe8a 	bl	8005a40 <HAL_I2C_MasterTxCpltCallback>
}
 8005d2c:	bf00      	nop
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d11d      	bne.n	8005d88 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d10b      	bne.n	8005d6c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d64:	1c9a      	adds	r2, r3, #2
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005d6a:	e073      	b.n	8005e54 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	121b      	asrs	r3, r3, #8
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005d86:	e065      	b.n	8005e54 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d10b      	bne.n	8005da8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005da6:	e055      	b.n	8005e54 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d151      	bne.n	8005e54 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	2b22      	cmp	r3, #34	; 0x22
 8005db4:	d10d      	bne.n	8005dd2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dc4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005dd0:	e040      	b.n	8005e54 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d015      	beq.n	8005e08 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2b21      	cmp	r3, #33	; 0x21
 8005de0:	d112      	bne.n	8005e08 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	781a      	ldrb	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e06:	e025      	b.n	8005e54 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d120      	bne.n	8005e54 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b21      	cmp	r3, #33	; 0x21
 8005e16:	d11d      	bne.n	8005e54 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e26:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff fe36 	bl	8005ac0 <HAL_I2C_MemTxCpltCallback>
}
 8005e54:	bf00      	nop
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b22      	cmp	r3, #34	; 0x22
 8005e6e:	f040 80ac 	bne.w	8005fca <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d921      	bls.n	8005ec4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	f040 808c 	bne.w	8005fca <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005ec2:	e082      	b.n	8005fca <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d075      	beq.n	8005fb8 <I2C_MasterReceive_RXNE+0x15c>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d002      	beq.n	8005ed8 <I2C_MasterReceive_RXNE+0x7c>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d16f      	bne.n	8005fb8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 f827 	bl	8006f2c <I2C_WaitOnSTOPRequestThroughIT>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d142      	bne.n	8005f6a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b40      	cmp	r3, #64	; 0x40
 8005f3c:	d10a      	bne.n	8005f54 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff fdc1 	bl	8005ad4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f52:	e03a      	b.n	8005fca <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2212      	movs	r2, #18
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff fd76 	bl	8005a54 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f68:	e02f      	b.n	8005fca <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff fd99 	bl	8005ae8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005fb6:	e008      	b.n	8005fca <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc6:	605a      	str	r2, [r3, #4]
}
 8005fc8:	e7ff      	b.n	8005fca <I2C_MasterReceive_RXNE+0x16e>
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d11b      	bne.n	8006022 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	b2d2      	uxtb	r2, r2
 8006006:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	b29a      	uxth	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006020:	e0bd      	b.n	800619e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006026:	b29b      	uxth	r3, r3
 8006028:	2b03      	cmp	r3, #3
 800602a:	d129      	bne.n	8006080 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800603a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b04      	cmp	r3, #4
 8006040:	d00a      	beq.n	8006058 <I2C_MasterReceive_BTF+0x86>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d007      	beq.n	8006058 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006056:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800607e:	e08e      	b.n	800619e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d176      	bne.n	8006178 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d002      	beq.n	8006096 <I2C_MasterReceive_BTF+0xc4>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b10      	cmp	r3, #16
 8006094:	d108      	bne.n	80060a8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	e019      	b.n	80060dc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d002      	beq.n	80060b4 <I2C_MasterReceive_BTF+0xe2>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d108      	bne.n	80060c6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e00a      	b.n	80060dc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b10      	cmp	r3, #16
 80060ca:	d007      	beq.n	80060dc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611e:	b29b      	uxth	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006136:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d10a      	bne.n	8006162 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff fcba 	bl	8005ad4 <HAL_I2C_MemRxCpltCallback>
}
 8006160:	e01d      	b.n	800619e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2212      	movs	r2, #18
 800616e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7ff fc6f 	bl	8005a54 <HAL_I2C_MasterRxCpltCallback>
}
 8006176:	e012      	b.n	800619e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800619e:	bf00      	nop
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b40      	cmp	r3, #64	; 0x40
 80061b8:	d117      	bne.n	80061ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	461a      	mov	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80061d4:	e067      	b.n	80062a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	f043 0301 	orr.w	r3, r3, #1
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	611a      	str	r2, [r3, #16]
}
 80061e8:	e05d      	b.n	80062a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061f2:	d133      	bne.n	800625c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b21      	cmp	r3, #33	; 0x21
 80061fe:	d109      	bne.n	8006214 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006204:	b2db      	uxtb	r3, r3
 8006206:	461a      	mov	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006210:	611a      	str	r2, [r3, #16]
 8006212:	e008      	b.n	8006226 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f043 0301 	orr.w	r3, r3, #1
 800621e:	b2da      	uxtb	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622a:	2b00      	cmp	r3, #0
 800622c:	d004      	beq.n	8006238 <I2C_Master_SB+0x92>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	2b00      	cmp	r3, #0
 8006236:	d108      	bne.n	800624a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	2b00      	cmp	r3, #0
 800623e:	d032      	beq.n	80062a6 <I2C_Master_SB+0x100>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	2b00      	cmp	r3, #0
 8006248:	d02d      	beq.n	80062a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006258:	605a      	str	r2, [r3, #4]
}
 800625a:	e024      	b.n	80062a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10e      	bne.n	8006282 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006268:	b29b      	uxth	r3, r3
 800626a:	11db      	asrs	r3, r3, #7
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f003 0306 	and.w	r3, r3, #6
 8006272:	b2db      	uxtb	r3, r3
 8006274:	f063 030f 	orn	r3, r3, #15
 8006278:	b2da      	uxtb	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	611a      	str	r2, [r3, #16]
}
 8006280:	e011      	b.n	80062a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006286:	2b01      	cmp	r3, #1
 8006288:	d10d      	bne.n	80062a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	b29b      	uxth	r3, r3
 8006290:	11db      	asrs	r3, r3, #7
 8006292:	b2db      	uxtb	r3, r3
 8006294:	f003 0306 	and.w	r3, r3, #6
 8006298:	b2db      	uxtb	r3, r3
 800629a:	f063 030e 	orn	r3, r3, #14
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	611a      	str	r2, [r3, #16]
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d004      	beq.n	80062d8 <I2C_Master_ADD10+0x26>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d108      	bne.n	80062ea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00c      	beq.n	80062fa <I2C_Master_ADD10+0x48>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d007      	beq.n	80062fa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062f8:	605a      	str	r2, [r3, #4]
  }
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006306:	b480      	push	{r7}
 8006308:	b091      	sub	sp, #68	; 0x44
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006314:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b22      	cmp	r3, #34	; 0x22
 800632e:	f040 8169 	bne.w	8006604 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10f      	bne.n	800635a <I2C_Master_ADDR+0x54>
 800633a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d10b      	bne.n	800635a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006342:	2300      	movs	r3, #0
 8006344:	633b      	str	r3, [r7, #48]	; 0x30
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	633b      	str	r3, [r7, #48]	; 0x30
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	633b      	str	r3, [r7, #48]	; 0x30
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	e160      	b.n	800661c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635e:	2b00      	cmp	r3, #0
 8006360:	d11d      	bne.n	800639e <I2C_Master_ADDR+0x98>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800636a:	d118      	bne.n	800639e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800636c:	2300      	movs	r3, #0
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006390:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	651a      	str	r2, [r3, #80]	; 0x50
 800639c:	e13e      	b.n	800661c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d113      	bne.n	80063d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063a8:	2300      	movs	r3, #0
 80063aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	e115      	b.n	80065fc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	f040 808a 	bne.w	80064f0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80063dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063e2:	d137      	bne.n	8006454 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006402:	d113      	bne.n	800642c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006412:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006414:	2300      	movs	r3, #0
 8006416:	627b      	str	r3, [r7, #36]	; 0x24
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	e0e7      	b.n	80065fc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800642c:	2300      	movs	r3, #0
 800642e:	623b      	str	r3, [r7, #32]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	623b      	str	r3, [r7, #32]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	623b      	str	r3, [r7, #32]
 8006440:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	e0d3      	b.n	80065fc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	2b08      	cmp	r3, #8
 8006458:	d02e      	beq.n	80064b8 <I2C_Master_ADDR+0x1b2>
 800645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645c:	2b20      	cmp	r3, #32
 800645e:	d02b      	beq.n	80064b8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006462:	2b12      	cmp	r3, #18
 8006464:	d102      	bne.n	800646c <I2C_Master_ADDR+0x166>
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	2b01      	cmp	r3, #1
 800646a:	d125      	bne.n	80064b8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646e:	2b04      	cmp	r3, #4
 8006470:	d00e      	beq.n	8006490 <I2C_Master_ADDR+0x18a>
 8006472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006474:	2b02      	cmp	r3, #2
 8006476:	d00b      	beq.n	8006490 <I2C_Master_ADDR+0x18a>
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	2b10      	cmp	r3, #16
 800647c:	d008      	beq.n	8006490 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	e007      	b.n	80064a0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800649e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064a0:	2300      	movs	r3, #0
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	61fb      	str	r3, [r7, #28]
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	e0a1      	b.n	80065fc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c8:	2300      	movs	r3, #0
 80064ca:	61bb      	str	r3, [r7, #24]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e085      	b.n	80065fc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d14d      	bne.n	8006596 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d016      	beq.n	800652e <I2C_Master_ADDR+0x228>
 8006500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006502:	2b02      	cmp	r3, #2
 8006504:	d013      	beq.n	800652e <I2C_Master_ADDR+0x228>
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	2b10      	cmp	r3, #16
 800650a:	d010      	beq.n	800652e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800651a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	e007      	b.n	800653e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800653c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800654c:	d117      	bne.n	800657e <I2C_Master_ADDR+0x278>
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006554:	d00b      	beq.n	800656e <I2C_Master_ADDR+0x268>
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	2b01      	cmp	r3, #1
 800655a:	d008      	beq.n	800656e <I2C_Master_ADDR+0x268>
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	2b08      	cmp	r3, #8
 8006560:	d005      	beq.n	800656e <I2C_Master_ADDR+0x268>
 8006562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006564:	2b10      	cmp	r3, #16
 8006566:	d002      	beq.n	800656e <I2C_Master_ADDR+0x268>
 8006568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656a:	2b20      	cmp	r3, #32
 800656c:	d107      	bne.n	800657e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800657c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	e032      	b.n	80065fc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065a4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b4:	d117      	bne.n	80065e6 <I2C_Master_ADDR+0x2e0>
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065bc:	d00b      	beq.n	80065d6 <I2C_Master_ADDR+0x2d0>
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d008      	beq.n	80065d6 <I2C_Master_ADDR+0x2d0>
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d005      	beq.n	80065d6 <I2C_Master_ADDR+0x2d0>
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	2b10      	cmp	r3, #16
 80065ce:	d002      	beq.n	80065d6 <I2C_Master_ADDR+0x2d0>
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d107      	bne.n	80065e6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e6:	2300      	movs	r3, #0
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006602:	e00b      	b.n	800661c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
}
 800661a:	e7ff      	b.n	800661c <I2C_Master_ADDR+0x316>
 800661c:	bf00      	nop
 800661e:	3744      	adds	r7, #68	; 0x44
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006636:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d02b      	beq.n	800669a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	781a      	ldrb	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d114      	bne.n	800669a <I2C_SlaveTransmit_TXE+0x72>
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	2b29      	cmp	r3, #41	; 0x29
 8006674:	d111      	bne.n	800669a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006684:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2221      	movs	r2, #33	; 0x21
 800668a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2228      	movs	r2, #40	; 0x28
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff f9e7 	bl	8005a68 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800669a:	bf00      	nop
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d011      	beq.n	80066d8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	781a      	ldrb	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d02c      	beq.n	8006758 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671a:	b29b      	uxth	r3, r3
 800671c:	3b01      	subs	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d114      	bne.n	8006758 <I2C_SlaveReceive_RXNE+0x74>
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	2b2a      	cmp	r3, #42	; 0x2a
 8006732:	d111      	bne.n	8006758 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006742:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2222      	movs	r2, #34	; 0x22
 8006748:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2228      	movs	r2, #40	; 0x28
 800674e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff f992 	bl	8005a7c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d012      	beq.n	8006798 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067be:	2b28      	cmp	r3, #40	; 0x28
 80067c0:	d127      	bne.n	8006812 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	089b      	lsrs	r3, r3, #2
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80067de:	2301      	movs	r3, #1
 80067e0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	09db      	lsrs	r3, r3, #7
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d103      	bne.n	80067f6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	81bb      	strh	r3, [r7, #12]
 80067f4:	e002      	b.n	80067fc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006804:	89ba      	ldrh	r2, [r7, #12]
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff f940 	bl	8005a90 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006810:	e00e      	b.n	8006830 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	60bb      	str	r3, [r7, #8]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006830:	bf00      	nop
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006846:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006856:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006858:	2300      	movs	r3, #0
 800685a:	60bb      	str	r3, [r7, #8]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	60bb      	str	r3, [r7, #8]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0201 	orr.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006884:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006894:	d172      	bne.n	800697c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	2b22      	cmp	r3, #34	; 0x22
 800689a:	d002      	beq.n	80068a2 <I2C_Slave_STOPF+0x6a>
 800689c:	7bfb      	ldrb	r3, [r7, #15]
 800689e:	2b2a      	cmp	r3, #42	; 0x2a
 80068a0:	d135      	bne.n	800690e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	f043 0204 	orr.w	r2, r3, #4
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fe fac3 	bl	8004e66 <HAL_DMA_GetState>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d049      	beq.n	800697a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	4a69      	ldr	r2, [pc, #420]	; (8006a90 <I2C_Slave_STOPF+0x258>)
 80068ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe fa95 	bl	8004e22 <HAL_DMA_Abort_IT>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d03d      	beq.n	800697a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006908:	4610      	mov	r0, r2
 800690a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800690c:	e035      	b.n	800697a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	b29a      	uxth	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	f043 0204 	orr.w	r2, r3, #4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006940:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe fa8d 	bl	8004e66 <HAL_DMA_GetState>
 800694c:	4603      	mov	r3, r0
 800694e:	2b01      	cmp	r3, #1
 8006950:	d014      	beq.n	800697c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006956:	4a4e      	ldr	r2, [pc, #312]	; (8006a90 <I2C_Slave_STOPF+0x258>)
 8006958:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe fa5f 	bl	8004e22 <HAL_DMA_Abort_IT>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d008      	beq.n	800697c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
 8006978:	e000      	b.n	800697c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800697a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d03e      	beq.n	8006a04 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b04      	cmp	r3, #4
 8006992:	d112      	bne.n	80069ba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	691a      	ldr	r2, [r3, #16]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	3b01      	subs	r3, #1
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c4:	2b40      	cmp	r3, #64	; 0x40
 80069c6:	d112      	bne.n	80069ee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691a      	ldr	r2, [r3, #16]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fc:	f043 0204 	orr.w	r2, r3, #4
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f8b3 	bl	8006b78 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006a12:	e039      	b.n	8006a88 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	2b2a      	cmp	r3, #42	; 0x2a
 8006a18:	d109      	bne.n	8006a2e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2228      	movs	r2, #40	; 0x28
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff f827 	bl	8005a7c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b28      	cmp	r3, #40	; 0x28
 8006a38:	d111      	bne.n	8006a5e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a15      	ldr	r2, [pc, #84]	; (8006a94 <I2C_Slave_STOPF+0x25c>)
 8006a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff f828 	bl	8005aac <HAL_I2C_ListenCpltCallback>
}
 8006a5c:	e014      	b.n	8006a88 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	2b22      	cmp	r3, #34	; 0x22
 8006a64:	d002      	beq.n	8006a6c <I2C_Slave_STOPF+0x234>
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	2b22      	cmp	r3, #34	; 0x22
 8006a6a:	d10d      	bne.n	8006a88 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7fe fffa 	bl	8005a7c <HAL_I2C_SlaveRxCpltCallback>
}
 8006a88:	bf00      	nop
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	08006ddd 	.word	0x08006ddd
 8006a94:	ffff0000 	.word	0xffff0000

08006a98 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d002      	beq.n	8006aba <I2C_Slave_AF+0x22>
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2b20      	cmp	r3, #32
 8006ab8:	d129      	bne.n	8006b0e <I2C_Slave_AF+0x76>
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
 8006abc:	2b28      	cmp	r3, #40	; 0x28
 8006abe:	d126      	bne.n	8006b0e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a2c      	ldr	r2, [pc, #176]	; (8006b74 <I2C_Slave_AF+0xdc>)
 8006ac4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ad4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ade:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fe ffd0 	bl	8005aac <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006b0c:	e02e      	b.n	8006b6c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	2b21      	cmp	r3, #33	; 0x21
 8006b12:	d126      	bne.n	8006b62 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a17      	ldr	r2, [pc, #92]	; (8006b74 <I2C_Slave_AF+0xdc>)
 8006b18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2221      	movs	r2, #33	; 0x21
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b3e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b48:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b58:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7fe ff84 	bl	8005a68 <HAL_I2C_SlaveTxCpltCallback>
}
 8006b60:	e004      	b.n	8006b6c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b6a:	615a      	str	r2, [r3, #20]
}
 8006b6c:	bf00      	nop
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	ffff0000 	.word	0xffff0000

08006b78 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b86:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b8e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	2b10      	cmp	r3, #16
 8006b94:	d002      	beq.n	8006b9c <I2C_ITError+0x24>
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	2b40      	cmp	r3, #64	; 0x40
 8006b9a:	d10a      	bne.n	8006bb2 <I2C_ITError+0x3a>
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	2b22      	cmp	r3, #34	; 0x22
 8006ba0:	d107      	bne.n	8006bb2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bb0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006bb8:	2b28      	cmp	r3, #40	; 0x28
 8006bba:	d107      	bne.n	8006bcc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2228      	movs	r2, #40	; 0x28
 8006bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006bca:	e015      	b.n	8006bf8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bda:	d00a      	beq.n	8006bf2 <I2C_ITError+0x7a>
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	2b60      	cmp	r3, #96	; 0x60
 8006be0:	d007      	beq.n	8006bf2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c06:	d162      	bne.n	8006cce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c16:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d020      	beq.n	8006c68 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2a:	4a6a      	ldr	r2, [pc, #424]	; (8006dd4 <I2C_ITError+0x25c>)
 8006c2c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fe f8f5 	bl	8004e22 <HAL_DMA_Abort_IT>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 8089 	beq.w	8006d52 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0201 	bic.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c62:	4610      	mov	r0, r2
 8006c64:	4798      	blx	r3
 8006c66:	e074      	b.n	8006d52 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	4a59      	ldr	r2, [pc, #356]	; (8006dd4 <I2C_ITError+0x25c>)
 8006c6e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fe f8d4 	bl	8004e22 <HAL_DMA_Abort_IT>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d068      	beq.n	8006d52 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8a:	2b40      	cmp	r3, #64	; 0x40
 8006c8c:	d10b      	bne.n	8006ca6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0201 	bic.w	r2, r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cc8:	4610      	mov	r0, r2
 8006cca:	4798      	blx	r3
 8006ccc:	e041      	b.n	8006d52 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b60      	cmp	r3, #96	; 0x60
 8006cd8:	d125      	bne.n	8006d26 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf2:	2b40      	cmp	r3, #64	; 0x40
 8006cf4:	d10b      	bne.n	8006d0e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0201 	bic.w	r2, r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fe feec 	bl	8005afc <HAL_I2C_AbortCpltCallback>
 8006d24:	e015      	b.n	8006d52 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d30:	2b40      	cmp	r3, #64	; 0x40
 8006d32:	d10b      	bne.n	8006d4c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	691a      	ldr	r2, [r3, #16]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7fe fecb 	bl	8005ae8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10e      	bne.n	8006d80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d109      	bne.n	8006d80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d104      	bne.n	8006d80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d007      	beq.n	8006d90 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d8e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d96:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d113      	bne.n	8006dcc <I2C_ITError+0x254>
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	2b28      	cmp	r3, #40	; 0x28
 8006da8:	d110      	bne.n	8006dcc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a0a      	ldr	r2, [pc, #40]	; (8006dd8 <I2C_ITError+0x260>)
 8006dae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fe fe70 	bl	8005aac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	08006ddd 	.word	0x08006ddd
 8006dd8:	ffff0000 	.word	0xffff0000

08006ddc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006df6:	4b4b      	ldr	r3, [pc, #300]	; (8006f24 <I2C_DMAAbort+0x148>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	08db      	lsrs	r3, r3, #3
 8006dfc:	4a4a      	ldr	r2, [pc, #296]	; (8006f28 <I2C_DMAAbort+0x14c>)
 8006dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006e02:	0a1a      	lsrs	r2, r3, #8
 8006e04:	4613      	mov	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	00da      	lsls	r2, r3, #3
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	f043 0220 	orr.w	r2, r3, #32
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006e22:	e00a      	b.n	8006e3a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e38:	d0ea      	beq.n	8006e10 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e46:	2200      	movs	r2, #0
 8006e48:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	2200      	movs	r2, #0
 8006e58:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e68:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b60      	cmp	r3, #96	; 0x60
 8006eaa:	d10e      	bne.n	8006eca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ec2:	6978      	ldr	r0, [r7, #20]
 8006ec4:	f7fe fe1a 	bl	8005afc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ec8:	e027      	b.n	8006f1a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006eca:	7cfb      	ldrb	r3, [r7, #19]
 8006ecc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ed0:	2b28      	cmp	r3, #40	; 0x28
 8006ed2:	d117      	bne.n	8006f04 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0201 	orr.w	r2, r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ef2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2228      	movs	r2, #40	; 0x28
 8006efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f02:	e007      	b.n	8006f14 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006f14:	6978      	ldr	r0, [r7, #20]
 8006f16:	f7fe fde7 	bl	8005ae8 <HAL_I2C_ErrorCallback>
}
 8006f1a:	bf00      	nop
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000004 	.word	0x20000004
 8006f28:	14f8b589 	.word	0x14f8b589

08006f2c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f38:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	08db      	lsrs	r3, r3, #3
 8006f3e:	4a13      	ldr	r2, [pc, #76]	; (8006f8c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006f40:	fba2 2303 	umull	r2, r3, r2, r3
 8006f44:	0a1a      	lsrs	r2, r3, #8
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d107      	bne.n	8006f6a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	f043 0220 	orr.w	r2, r3, #32
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e008      	b.n	8006f7c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f78:	d0e9      	beq.n	8006f4e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	20000004 	.word	0x20000004
 8006f8c:	14f8b589 	.word	0x14f8b589

08006f90 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006fa0:	d103      	bne.n	8006faa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006fa8:	e007      	b.n	8006fba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fae:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006fb2:	d102      	bne.n	8006fba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2208      	movs	r2, #8
 8006fb8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
	...

08006fc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e267      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d075      	beq.n	80070d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006fe6:	4b88      	ldr	r3, [pc, #544]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 030c 	and.w	r3, r3, #12
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d00c      	beq.n	800700c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ff2:	4b85      	ldr	r3, [pc, #532]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ffa:	2b08      	cmp	r3, #8
 8006ffc:	d112      	bne.n	8007024 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ffe:	4b82      	ldr	r3, [pc, #520]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800700a:	d10b      	bne.n	8007024 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800700c:	4b7e      	ldr	r3, [pc, #504]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d05b      	beq.n	80070d0 <HAL_RCC_OscConfig+0x108>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d157      	bne.n	80070d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e242      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800702c:	d106      	bne.n	800703c <HAL_RCC_OscConfig+0x74>
 800702e:	4b76      	ldr	r3, [pc, #472]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a75      	ldr	r2, [pc, #468]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 8007034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	e01d      	b.n	8007078 <HAL_RCC_OscConfig+0xb0>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007044:	d10c      	bne.n	8007060 <HAL_RCC_OscConfig+0x98>
 8007046:	4b70      	ldr	r3, [pc, #448]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a6f      	ldr	r2, [pc, #444]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 800704c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	4b6d      	ldr	r3, [pc, #436]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a6c      	ldr	r2, [pc, #432]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 8007058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	e00b      	b.n	8007078 <HAL_RCC_OscConfig+0xb0>
 8007060:	4b69      	ldr	r3, [pc, #420]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a68      	ldr	r2, [pc, #416]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 8007066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	4b66      	ldr	r3, [pc, #408]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a65      	ldr	r2, [pc, #404]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 8007072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d013      	beq.n	80070a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007080:	f7fd fcec 	bl	8004a5c <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007088:	f7fd fce8 	bl	8004a5c <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b64      	cmp	r3, #100	; 0x64
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e207      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800709a:	4b5b      	ldr	r3, [pc, #364]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d0f0      	beq.n	8007088 <HAL_RCC_OscConfig+0xc0>
 80070a6:	e014      	b.n	80070d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a8:	f7fd fcd8 	bl	8004a5c <HAL_GetTick>
 80070ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ae:	e008      	b.n	80070c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070b0:	f7fd fcd4 	bl	8004a5c <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b64      	cmp	r3, #100	; 0x64
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e1f3      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070c2:	4b51      	ldr	r3, [pc, #324]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1f0      	bne.n	80070b0 <HAL_RCC_OscConfig+0xe8>
 80070ce:	e000      	b.n	80070d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d063      	beq.n	80071a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070de:	4b4a      	ldr	r3, [pc, #296]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 030c 	and.w	r3, r3, #12
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00b      	beq.n	8007102 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070ea:	4b47      	ldr	r3, [pc, #284]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d11c      	bne.n	8007130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070f6:	4b44      	ldr	r3, [pc, #272]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d116      	bne.n	8007130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007102:	4b41      	ldr	r3, [pc, #260]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <HAL_RCC_OscConfig+0x152>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d001      	beq.n	800711a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e1c7      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800711a:	4b3b      	ldr	r3, [pc, #236]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4937      	ldr	r1, [pc, #220]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 800712a:	4313      	orrs	r3, r2
 800712c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800712e:	e03a      	b.n	80071a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d020      	beq.n	800717a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007138:	4b34      	ldr	r3, [pc, #208]	; (800720c <HAL_RCC_OscConfig+0x244>)
 800713a:	2201      	movs	r2, #1
 800713c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713e:	f7fd fc8d 	bl	8004a5c <HAL_GetTick>
 8007142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007144:	e008      	b.n	8007158 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007146:	f7fd fc89 	bl	8004a5c <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d901      	bls.n	8007158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e1a8      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007158:	4b2b      	ldr	r3, [pc, #172]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d0f0      	beq.n	8007146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007164:	4b28      	ldr	r3, [pc, #160]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	4925      	ldr	r1, [pc, #148]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 8007174:	4313      	orrs	r3, r2
 8007176:	600b      	str	r3, [r1, #0]
 8007178:	e015      	b.n	80071a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800717a:	4b24      	ldr	r3, [pc, #144]	; (800720c <HAL_RCC_OscConfig+0x244>)
 800717c:	2200      	movs	r2, #0
 800717e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007180:	f7fd fc6c 	bl	8004a5c <HAL_GetTick>
 8007184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007188:	f7fd fc68 	bl	8004a5c <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e187      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800719a:	4b1b      	ldr	r3, [pc, #108]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f0      	bne.n	8007188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d036      	beq.n	8007220 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d016      	beq.n	80071e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ba:	4b15      	ldr	r3, [pc, #84]	; (8007210 <HAL_RCC_OscConfig+0x248>)
 80071bc:	2201      	movs	r2, #1
 80071be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c0:	f7fd fc4c 	bl	8004a5c <HAL_GetTick>
 80071c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071c8:	f7fd fc48 	bl	8004a5c <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e167      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071da:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <HAL_RCC_OscConfig+0x240>)
 80071dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0f0      	beq.n	80071c8 <HAL_RCC_OscConfig+0x200>
 80071e6:	e01b      	b.n	8007220 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071e8:	4b09      	ldr	r3, [pc, #36]	; (8007210 <HAL_RCC_OscConfig+0x248>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071ee:	f7fd fc35 	bl	8004a5c <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071f4:	e00e      	b.n	8007214 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071f6:	f7fd fc31 	bl	8004a5c <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d907      	bls.n	8007214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e150      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
 8007208:	40023800 	.word	0x40023800
 800720c:	42470000 	.word	0x42470000
 8007210:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007214:	4b88      	ldr	r3, [pc, #544]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 8007216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1ea      	bne.n	80071f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 8097 	beq.w	800735c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007232:	4b81      	ldr	r3, [pc, #516]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 8007234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10f      	bne.n	800725e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800723e:	2300      	movs	r3, #0
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	4b7d      	ldr	r3, [pc, #500]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	4a7c      	ldr	r2, [pc, #496]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 8007248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800724c:	6413      	str	r3, [r2, #64]	; 0x40
 800724e:	4b7a      	ldr	r3, [pc, #488]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007256:	60bb      	str	r3, [r7, #8]
 8007258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800725a:	2301      	movs	r3, #1
 800725c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800725e:	4b77      	ldr	r3, [pc, #476]	; (800743c <HAL_RCC_OscConfig+0x474>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007266:	2b00      	cmp	r3, #0
 8007268:	d118      	bne.n	800729c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800726a:	4b74      	ldr	r3, [pc, #464]	; (800743c <HAL_RCC_OscConfig+0x474>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a73      	ldr	r2, [pc, #460]	; (800743c <HAL_RCC_OscConfig+0x474>)
 8007270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007276:	f7fd fbf1 	bl	8004a5c <HAL_GetTick>
 800727a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800727c:	e008      	b.n	8007290 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800727e:	f7fd fbed 	bl	8004a5c <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d901      	bls.n	8007290 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e10c      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007290:	4b6a      	ldr	r3, [pc, #424]	; (800743c <HAL_RCC_OscConfig+0x474>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0f0      	beq.n	800727e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d106      	bne.n	80072b2 <HAL_RCC_OscConfig+0x2ea>
 80072a4:	4b64      	ldr	r3, [pc, #400]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 80072a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a8:	4a63      	ldr	r2, [pc, #396]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 80072aa:	f043 0301 	orr.w	r3, r3, #1
 80072ae:	6713      	str	r3, [r2, #112]	; 0x70
 80072b0:	e01c      	b.n	80072ec <HAL_RCC_OscConfig+0x324>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	2b05      	cmp	r3, #5
 80072b8:	d10c      	bne.n	80072d4 <HAL_RCC_OscConfig+0x30c>
 80072ba:	4b5f      	ldr	r3, [pc, #380]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	4a5e      	ldr	r2, [pc, #376]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 80072c0:	f043 0304 	orr.w	r3, r3, #4
 80072c4:	6713      	str	r3, [r2, #112]	; 0x70
 80072c6:	4b5c      	ldr	r3, [pc, #368]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	4a5b      	ldr	r2, [pc, #364]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 80072cc:	f043 0301 	orr.w	r3, r3, #1
 80072d0:	6713      	str	r3, [r2, #112]	; 0x70
 80072d2:	e00b      	b.n	80072ec <HAL_RCC_OscConfig+0x324>
 80072d4:	4b58      	ldr	r3, [pc, #352]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 80072d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d8:	4a57      	ldr	r2, [pc, #348]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 80072da:	f023 0301 	bic.w	r3, r3, #1
 80072de:	6713      	str	r3, [r2, #112]	; 0x70
 80072e0:	4b55      	ldr	r3, [pc, #340]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 80072e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e4:	4a54      	ldr	r2, [pc, #336]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 80072e6:	f023 0304 	bic.w	r3, r3, #4
 80072ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d015      	beq.n	8007320 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f4:	f7fd fbb2 	bl	8004a5c <HAL_GetTick>
 80072f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072fa:	e00a      	b.n	8007312 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072fc:	f7fd fbae 	bl	8004a5c <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	f241 3288 	movw	r2, #5000	; 0x1388
 800730a:	4293      	cmp	r3, r2
 800730c:	d901      	bls.n	8007312 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e0cb      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007312:	4b49      	ldr	r3, [pc, #292]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 8007314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0ee      	beq.n	80072fc <HAL_RCC_OscConfig+0x334>
 800731e:	e014      	b.n	800734a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007320:	f7fd fb9c 	bl	8004a5c <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007326:	e00a      	b.n	800733e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007328:	f7fd fb98 	bl	8004a5c <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	f241 3288 	movw	r2, #5000	; 0x1388
 8007336:	4293      	cmp	r3, r2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e0b5      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800733e:	4b3e      	ldr	r3, [pc, #248]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 8007340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1ee      	bne.n	8007328 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800734a:	7dfb      	ldrb	r3, [r7, #23]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d105      	bne.n	800735c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007350:	4b39      	ldr	r3, [pc, #228]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 8007352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007354:	4a38      	ldr	r2, [pc, #224]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 8007356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800735a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 80a1 	beq.w	80074a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007366:	4b34      	ldr	r3, [pc, #208]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f003 030c 	and.w	r3, r3, #12
 800736e:	2b08      	cmp	r3, #8
 8007370:	d05c      	beq.n	800742c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	2b02      	cmp	r3, #2
 8007378:	d141      	bne.n	80073fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800737a:	4b31      	ldr	r3, [pc, #196]	; (8007440 <HAL_RCC_OscConfig+0x478>)
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007380:	f7fd fb6c 	bl	8004a5c <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007388:	f7fd fb68 	bl	8004a5c <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e087      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800739a:	4b27      	ldr	r3, [pc, #156]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1f0      	bne.n	8007388 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69da      	ldr	r2, [r3, #28]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	019b      	lsls	r3, r3, #6
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073bc:	085b      	lsrs	r3, r3, #1
 80073be:	3b01      	subs	r3, #1
 80073c0:	041b      	lsls	r3, r3, #16
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c8:	061b      	lsls	r3, r3, #24
 80073ca:	491b      	ldr	r1, [pc, #108]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073d0:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <HAL_RCC_OscConfig+0x478>)
 80073d2:	2201      	movs	r2, #1
 80073d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073d6:	f7fd fb41 	bl	8004a5c <HAL_GetTick>
 80073da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073dc:	e008      	b.n	80073f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073de:	f7fd fb3d 	bl	8004a5c <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d901      	bls.n	80073f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e05c      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073f0:	4b11      	ldr	r3, [pc, #68]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0f0      	beq.n	80073de <HAL_RCC_OscConfig+0x416>
 80073fc:	e054      	b.n	80074a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073fe:	4b10      	ldr	r3, [pc, #64]	; (8007440 <HAL_RCC_OscConfig+0x478>)
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007404:	f7fd fb2a 	bl	8004a5c <HAL_GetTick>
 8007408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800740a:	e008      	b.n	800741e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800740c:	f7fd fb26 	bl	8004a5c <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b02      	cmp	r3, #2
 8007418:	d901      	bls.n	800741e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e045      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800741e:	4b06      	ldr	r3, [pc, #24]	; (8007438 <HAL_RCC_OscConfig+0x470>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1f0      	bne.n	800740c <HAL_RCC_OscConfig+0x444>
 800742a:	e03d      	b.n	80074a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d107      	bne.n	8007444 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e038      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
 8007438:	40023800 	.word	0x40023800
 800743c:	40007000 	.word	0x40007000
 8007440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007444:	4b1b      	ldr	r3, [pc, #108]	; (80074b4 <HAL_RCC_OscConfig+0x4ec>)
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d028      	beq.n	80074a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800745c:	429a      	cmp	r2, r3
 800745e:	d121      	bne.n	80074a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800746a:	429a      	cmp	r2, r3
 800746c:	d11a      	bne.n	80074a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007474:	4013      	ands	r3, r2
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800747a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800747c:	4293      	cmp	r3, r2
 800747e:	d111      	bne.n	80074a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748a:	085b      	lsrs	r3, r3, #1
 800748c:	3b01      	subs	r3, #1
 800748e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007490:	429a      	cmp	r2, r3
 8007492:	d107      	bne.n	80074a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d001      	beq.n	80074a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e000      	b.n	80074aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	40023800 	.word	0x40023800

080074b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e0cc      	b.n	8007666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074cc:	4b68      	ldr	r3, [pc, #416]	; (8007670 <HAL_RCC_ClockConfig+0x1b8>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0307 	and.w	r3, r3, #7
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d90c      	bls.n	80074f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074da:	4b65      	ldr	r3, [pc, #404]	; (8007670 <HAL_RCC_ClockConfig+0x1b8>)
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074e2:	4b63      	ldr	r3, [pc, #396]	; (8007670 <HAL_RCC_ClockConfig+0x1b8>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d001      	beq.n	80074f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e0b8      	b.n	8007666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d020      	beq.n	8007542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800750c:	4b59      	ldr	r3, [pc, #356]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	4a58      	ldr	r2, [pc, #352]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 8007512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007524:	4b53      	ldr	r3, [pc, #332]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	4a52      	ldr	r2, [pc, #328]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 800752a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800752e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007530:	4b50      	ldr	r3, [pc, #320]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	494d      	ldr	r1, [pc, #308]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 800753e:	4313      	orrs	r3, r2
 8007540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d044      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d107      	bne.n	8007566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007556:	4b47      	ldr	r3, [pc, #284]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d119      	bne.n	8007596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e07f      	b.n	8007666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d003      	beq.n	8007576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007572:	2b03      	cmp	r3, #3
 8007574:	d107      	bne.n	8007586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007576:	4b3f      	ldr	r3, [pc, #252]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d109      	bne.n	8007596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e06f      	b.n	8007666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007586:	4b3b      	ldr	r3, [pc, #236]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e067      	b.n	8007666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007596:	4b37      	ldr	r3, [pc, #220]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f023 0203 	bic.w	r2, r3, #3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	4934      	ldr	r1, [pc, #208]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075a8:	f7fd fa58 	bl	8004a5c <HAL_GetTick>
 80075ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ae:	e00a      	b.n	80075c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075b0:	f7fd fa54 	bl	8004a5c <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80075be:	4293      	cmp	r3, r2
 80075c0:	d901      	bls.n	80075c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e04f      	b.n	8007666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075c6:	4b2b      	ldr	r3, [pc, #172]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 020c 	and.w	r2, r3, #12
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d1eb      	bne.n	80075b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075d8:	4b25      	ldr	r3, [pc, #148]	; (8007670 <HAL_RCC_ClockConfig+0x1b8>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d20c      	bcs.n	8007600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075e6:	4b22      	ldr	r3, [pc, #136]	; (8007670 <HAL_RCC_ClockConfig+0x1b8>)
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	b2d2      	uxtb	r2, r2
 80075ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ee:	4b20      	ldr	r3, [pc, #128]	; (8007670 <HAL_RCC_ClockConfig+0x1b8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d001      	beq.n	8007600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e032      	b.n	8007666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0304 	and.w	r3, r3, #4
 8007608:	2b00      	cmp	r3, #0
 800760a:	d008      	beq.n	800761e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800760c:	4b19      	ldr	r3, [pc, #100]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	4916      	ldr	r1, [pc, #88]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 800761a:	4313      	orrs	r3, r2
 800761c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800762a:	4b12      	ldr	r3, [pc, #72]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	490e      	ldr	r1, [pc, #56]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 800763a:	4313      	orrs	r3, r2
 800763c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800763e:	f000 f821 	bl	8007684 <HAL_RCC_GetSysClockFreq>
 8007642:	4602      	mov	r2, r0
 8007644:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <HAL_RCC_ClockConfig+0x1bc>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	091b      	lsrs	r3, r3, #4
 800764a:	f003 030f 	and.w	r3, r3, #15
 800764e:	490a      	ldr	r1, [pc, #40]	; (8007678 <HAL_RCC_ClockConfig+0x1c0>)
 8007650:	5ccb      	ldrb	r3, [r1, r3]
 8007652:	fa22 f303 	lsr.w	r3, r2, r3
 8007656:	4a09      	ldr	r2, [pc, #36]	; (800767c <HAL_RCC_ClockConfig+0x1c4>)
 8007658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800765a:	4b09      	ldr	r3, [pc, #36]	; (8007680 <HAL_RCC_ClockConfig+0x1c8>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4618      	mov	r0, r3
 8007660:	f7fd f9b8 	bl	80049d4 <HAL_InitTick>

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	40023c00 	.word	0x40023c00
 8007674:	40023800 	.word	0x40023800
 8007678:	0800de8c 	.word	0x0800de8c
 800767c:	20000004 	.word	0x20000004
 8007680:	20000008 	.word	0x20000008

08007684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007688:	b090      	sub	sp, #64	; 0x40
 800768a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
 8007690:	2300      	movs	r3, #0
 8007692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007694:	2300      	movs	r3, #0
 8007696:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800769c:	4b59      	ldr	r3, [pc, #356]	; (8007804 <HAL_RCC_GetSysClockFreq+0x180>)
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f003 030c 	and.w	r3, r3, #12
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d00d      	beq.n	80076c4 <HAL_RCC_GetSysClockFreq+0x40>
 80076a8:	2b08      	cmp	r3, #8
 80076aa:	f200 80a1 	bhi.w	80077f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <HAL_RCC_GetSysClockFreq+0x34>
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d003      	beq.n	80076be <HAL_RCC_GetSysClockFreq+0x3a>
 80076b6:	e09b      	b.n	80077f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076b8:	4b53      	ldr	r3, [pc, #332]	; (8007808 <HAL_RCC_GetSysClockFreq+0x184>)
 80076ba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80076bc:	e09b      	b.n	80077f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076be:	4b53      	ldr	r3, [pc, #332]	; (800780c <HAL_RCC_GetSysClockFreq+0x188>)
 80076c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076c2:	e098      	b.n	80077f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076c4:	4b4f      	ldr	r3, [pc, #316]	; (8007804 <HAL_RCC_GetSysClockFreq+0x180>)
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076ce:	4b4d      	ldr	r3, [pc, #308]	; (8007804 <HAL_RCC_GetSysClockFreq+0x180>)
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d028      	beq.n	800772c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076da:	4b4a      	ldr	r3, [pc, #296]	; (8007804 <HAL_RCC_GetSysClockFreq+0x180>)
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	099b      	lsrs	r3, r3, #6
 80076e0:	2200      	movs	r2, #0
 80076e2:	623b      	str	r3, [r7, #32]
 80076e4:	627a      	str	r2, [r7, #36]	; 0x24
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80076ec:	2100      	movs	r1, #0
 80076ee:	4b47      	ldr	r3, [pc, #284]	; (800780c <HAL_RCC_GetSysClockFreq+0x188>)
 80076f0:	fb03 f201 	mul.w	r2, r3, r1
 80076f4:	2300      	movs	r3, #0
 80076f6:	fb00 f303 	mul.w	r3, r0, r3
 80076fa:	4413      	add	r3, r2
 80076fc:	4a43      	ldr	r2, [pc, #268]	; (800780c <HAL_RCC_GetSysClockFreq+0x188>)
 80076fe:	fba0 1202 	umull	r1, r2, r0, r2
 8007702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007704:	460a      	mov	r2, r1
 8007706:	62ba      	str	r2, [r7, #40]	; 0x28
 8007708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800770a:	4413      	add	r3, r2
 800770c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800770e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007710:	2200      	movs	r2, #0
 8007712:	61bb      	str	r3, [r7, #24]
 8007714:	61fa      	str	r2, [r7, #28]
 8007716:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800771a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800771e:	f7f9 fa9b 	bl	8000c58 <__aeabi_uldivmod>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4613      	mov	r3, r2
 8007728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800772a:	e053      	b.n	80077d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800772c:	4b35      	ldr	r3, [pc, #212]	; (8007804 <HAL_RCC_GetSysClockFreq+0x180>)
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	099b      	lsrs	r3, r3, #6
 8007732:	2200      	movs	r2, #0
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	617a      	str	r2, [r7, #20]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800773e:	f04f 0b00 	mov.w	fp, #0
 8007742:	4652      	mov	r2, sl
 8007744:	465b      	mov	r3, fp
 8007746:	f04f 0000 	mov.w	r0, #0
 800774a:	f04f 0100 	mov.w	r1, #0
 800774e:	0159      	lsls	r1, r3, #5
 8007750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007754:	0150      	lsls	r0, r2, #5
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	ebb2 080a 	subs.w	r8, r2, sl
 800775e:	eb63 090b 	sbc.w	r9, r3, fp
 8007762:	f04f 0200 	mov.w	r2, #0
 8007766:	f04f 0300 	mov.w	r3, #0
 800776a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800776e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007772:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007776:	ebb2 0408 	subs.w	r4, r2, r8
 800777a:	eb63 0509 	sbc.w	r5, r3, r9
 800777e:	f04f 0200 	mov.w	r2, #0
 8007782:	f04f 0300 	mov.w	r3, #0
 8007786:	00eb      	lsls	r3, r5, #3
 8007788:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800778c:	00e2      	lsls	r2, r4, #3
 800778e:	4614      	mov	r4, r2
 8007790:	461d      	mov	r5, r3
 8007792:	eb14 030a 	adds.w	r3, r4, sl
 8007796:	603b      	str	r3, [r7, #0]
 8007798:	eb45 030b 	adc.w	r3, r5, fp
 800779c:	607b      	str	r3, [r7, #4]
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	f04f 0300 	mov.w	r3, #0
 80077a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077aa:	4629      	mov	r1, r5
 80077ac:	028b      	lsls	r3, r1, #10
 80077ae:	4621      	mov	r1, r4
 80077b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077b4:	4621      	mov	r1, r4
 80077b6:	028a      	lsls	r2, r1, #10
 80077b8:	4610      	mov	r0, r2
 80077ba:	4619      	mov	r1, r3
 80077bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077be:	2200      	movs	r2, #0
 80077c0:	60bb      	str	r3, [r7, #8]
 80077c2:	60fa      	str	r2, [r7, #12]
 80077c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077c8:	f7f9 fa46 	bl	8000c58 <__aeabi_uldivmod>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4613      	mov	r3, r2
 80077d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077d4:	4b0b      	ldr	r3, [pc, #44]	; (8007804 <HAL_RCC_GetSysClockFreq+0x180>)
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	0c1b      	lsrs	r3, r3, #16
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	3301      	adds	r3, #1
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80077e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80077ee:	e002      	b.n	80077f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077f0:	4b05      	ldr	r3, [pc, #20]	; (8007808 <HAL_RCC_GetSysClockFreq+0x184>)
 80077f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80077f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3740      	adds	r7, #64	; 0x40
 80077fc:	46bd      	mov	sp, r7
 80077fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007802:	bf00      	nop
 8007804:	40023800 	.word	0x40023800
 8007808:	00f42400 	.word	0x00f42400
 800780c:	017d7840 	.word	0x017d7840

08007810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007810:	b480      	push	{r7}
 8007812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007814:	4b03      	ldr	r3, [pc, #12]	; (8007824 <HAL_RCC_GetHCLKFreq+0x14>)
 8007816:	681b      	ldr	r3, [r3, #0]
}
 8007818:	4618      	mov	r0, r3
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	20000004 	.word	0x20000004

08007828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800782c:	f7ff fff0 	bl	8007810 <HAL_RCC_GetHCLKFreq>
 8007830:	4602      	mov	r2, r0
 8007832:	4b05      	ldr	r3, [pc, #20]	; (8007848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	0a9b      	lsrs	r3, r3, #10
 8007838:	f003 0307 	and.w	r3, r3, #7
 800783c:	4903      	ldr	r1, [pc, #12]	; (800784c <HAL_RCC_GetPCLK1Freq+0x24>)
 800783e:	5ccb      	ldrb	r3, [r1, r3]
 8007840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007844:	4618      	mov	r0, r3
 8007846:	bd80      	pop	{r7, pc}
 8007848:	40023800 	.word	0x40023800
 800784c:	0800de9c 	.word	0x0800de9c

08007850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007854:	f7ff ffdc 	bl	8007810 <HAL_RCC_GetHCLKFreq>
 8007858:	4602      	mov	r2, r0
 800785a:	4b05      	ldr	r3, [pc, #20]	; (8007870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	0b5b      	lsrs	r3, r3, #13
 8007860:	f003 0307 	and.w	r3, r3, #7
 8007864:	4903      	ldr	r1, [pc, #12]	; (8007874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007866:	5ccb      	ldrb	r3, [r1, r3]
 8007868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800786c:	4618      	mov	r0, r3
 800786e:	bd80      	pop	{r7, pc}
 8007870:	40023800 	.word	0x40023800
 8007874:	0800de9c 	.word	0x0800de9c

08007878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e041      	b.n	800790e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	d106      	bne.n	80078a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7fc fd2e 	bl	8004300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3304      	adds	r3, #4
 80078b4:	4619      	mov	r1, r3
 80078b6:	4610      	mov	r0, r2
 80078b8:	f000 fd7e 	bl	80083b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b01      	cmp	r3, #1
 800792a:	d001      	beq.n	8007930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e044      	b.n	80079ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0201 	orr.w	r2, r2, #1
 8007946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a1e      	ldr	r2, [pc, #120]	; (80079c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d018      	beq.n	8007984 <HAL_TIM_Base_Start_IT+0x6c>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795a:	d013      	beq.n	8007984 <HAL_TIM_Base_Start_IT+0x6c>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a1a      	ldr	r2, [pc, #104]	; (80079cc <HAL_TIM_Base_Start_IT+0xb4>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d00e      	beq.n	8007984 <HAL_TIM_Base_Start_IT+0x6c>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a19      	ldr	r2, [pc, #100]	; (80079d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d009      	beq.n	8007984 <HAL_TIM_Base_Start_IT+0x6c>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a17      	ldr	r2, [pc, #92]	; (80079d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d004      	beq.n	8007984 <HAL_TIM_Base_Start_IT+0x6c>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a16      	ldr	r2, [pc, #88]	; (80079d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d111      	bne.n	80079a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2b06      	cmp	r3, #6
 8007994:	d010      	beq.n	80079b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f042 0201 	orr.w	r2, r2, #1
 80079a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a6:	e007      	b.n	80079b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f042 0201 	orr.w	r2, r2, #1
 80079b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	40010000 	.word	0x40010000
 80079cc:	40000400 	.word	0x40000400
 80079d0:	40000800 	.word	0x40000800
 80079d4:	40000c00 	.word	0x40000c00
 80079d8:	40014000 	.word	0x40014000

080079dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e041      	b.n	8007a72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7fc fd56 	bl	80044b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f000 fccc 	bl	80083b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d109      	bne.n	8007aa0 <HAL_TIM_PWM_Start+0x24>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	bf14      	ite	ne
 8007a98:	2301      	movne	r3, #1
 8007a9a:	2300      	moveq	r3, #0
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	e022      	b.n	8007ae6 <HAL_TIM_PWM_Start+0x6a>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d109      	bne.n	8007aba <HAL_TIM_PWM_Start+0x3e>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	bf14      	ite	ne
 8007ab2:	2301      	movne	r3, #1
 8007ab4:	2300      	moveq	r3, #0
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	e015      	b.n	8007ae6 <HAL_TIM_PWM_Start+0x6a>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d109      	bne.n	8007ad4 <HAL_TIM_PWM_Start+0x58>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	bf14      	ite	ne
 8007acc:	2301      	movne	r3, #1
 8007ace:	2300      	moveq	r3, #0
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	e008      	b.n	8007ae6 <HAL_TIM_PWM_Start+0x6a>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	bf14      	ite	ne
 8007ae0:	2301      	movne	r3, #1
 8007ae2:	2300      	moveq	r3, #0
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e068      	b.n	8007bc0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d104      	bne.n	8007afe <HAL_TIM_PWM_Start+0x82>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007afc:	e013      	b.n	8007b26 <HAL_TIM_PWM_Start+0xaa>
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d104      	bne.n	8007b0e <HAL_TIM_PWM_Start+0x92>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b0c:	e00b      	b.n	8007b26 <HAL_TIM_PWM_Start+0xaa>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	d104      	bne.n	8007b1e <HAL_TIM_PWM_Start+0xa2>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b1c:	e003      	b.n	8007b26 <HAL_TIM_PWM_Start+0xaa>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2202      	movs	r2, #2
 8007b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fee8 	bl	8008904 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a23      	ldr	r2, [pc, #140]	; (8007bc8 <HAL_TIM_PWM_Start+0x14c>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d107      	bne.n	8007b4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a1d      	ldr	r2, [pc, #116]	; (8007bc8 <HAL_TIM_PWM_Start+0x14c>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d018      	beq.n	8007b8a <HAL_TIM_PWM_Start+0x10e>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b60:	d013      	beq.n	8007b8a <HAL_TIM_PWM_Start+0x10e>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a19      	ldr	r2, [pc, #100]	; (8007bcc <HAL_TIM_PWM_Start+0x150>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d00e      	beq.n	8007b8a <HAL_TIM_PWM_Start+0x10e>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a17      	ldr	r2, [pc, #92]	; (8007bd0 <HAL_TIM_PWM_Start+0x154>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d009      	beq.n	8007b8a <HAL_TIM_PWM_Start+0x10e>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a16      	ldr	r2, [pc, #88]	; (8007bd4 <HAL_TIM_PWM_Start+0x158>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d004      	beq.n	8007b8a <HAL_TIM_PWM_Start+0x10e>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a14      	ldr	r2, [pc, #80]	; (8007bd8 <HAL_TIM_PWM_Start+0x15c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d111      	bne.n	8007bae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f003 0307 	and.w	r3, r3, #7
 8007b94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2b06      	cmp	r3, #6
 8007b9a:	d010      	beq.n	8007bbe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f042 0201 	orr.w	r2, r2, #1
 8007baa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bac:	e007      	b.n	8007bbe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f042 0201 	orr.w	r2, r2, #1
 8007bbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	40010000 	.word	0x40010000
 8007bcc:	40000400 	.word	0x40000400
 8007bd0:	40000800 	.word	0x40000800
 8007bd4:	40000c00 	.word	0x40000c00
 8007bd8:	40014000 	.word	0x40014000

08007bdc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e097      	b.n	8007d20 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d106      	bne.n	8007c0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7fc fbbb 	bl	8004380 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6812      	ldr	r2, [r2, #0]
 8007c1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c20:	f023 0307 	bic.w	r3, r3, #7
 8007c24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	4619      	mov	r1, r3
 8007c30:	4610      	mov	r0, r2
 8007c32:	f000 fbc1 	bl	80083b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c5e:	f023 0303 	bic.w	r3, r3, #3
 8007c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007c7c:	f023 030c 	bic.w	r3, r3, #12
 8007c80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	021b      	lsls	r3, r3, #8
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	011a      	lsls	r2, r3, #4
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	031b      	lsls	r3, r3, #12
 8007cac:	4313      	orrs	r3, r2
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007cba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007cc2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d110      	bne.n	8007d7a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d102      	bne.n	8007d64 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d5e:	7b7b      	ldrb	r3, [r7, #13]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d001      	beq.n	8007d68 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e069      	b.n	8007e3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2202      	movs	r2, #2
 8007d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d78:	e031      	b.n	8007dde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	d110      	bne.n	8007da2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d102      	bne.n	8007d8c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d86:	7b3b      	ldrb	r3, [r7, #12]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d001      	beq.n	8007d90 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e055      	b.n	8007e3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007da0:	e01d      	b.n	8007dde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d108      	bne.n	8007dba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d105      	bne.n	8007dba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dae:	7b7b      	ldrb	r3, [r7, #13]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d102      	bne.n	8007dba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007db4:	7b3b      	ldrb	r3, [r7, #12]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d001      	beq.n	8007dbe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e03e      	b.n	8007e3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2202      	movs	r2, #2
 8007dda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <HAL_TIM_Encoder_Start+0xc4>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d008      	beq.n	8007dfc <HAL_TIM_Encoder_Start+0xd4>
 8007dea:	e00f      	b.n	8007e0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2201      	movs	r2, #1
 8007df2:	2100      	movs	r1, #0
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 fd85 	bl	8008904 <TIM_CCxChannelCmd>
      break;
 8007dfa:	e016      	b.n	8007e2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2201      	movs	r2, #1
 8007e02:	2104      	movs	r1, #4
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 fd7d 	bl	8008904 <TIM_CCxChannelCmd>
      break;
 8007e0a:	e00e      	b.n	8007e2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2201      	movs	r2, #1
 8007e12:	2100      	movs	r1, #0
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 fd75 	bl	8008904 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	2104      	movs	r1, #4
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fd6e 	bl	8008904 <TIM_CCxChannelCmd>
      break;
 8007e28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f042 0201 	orr.w	r2, r2, #1
 8007e38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d122      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f003 0302 	and.w	r3, r3, #2
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d11b      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f06f 0202 	mvn.w	r2, #2
 8007e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	f003 0303 	and.w	r3, r3, #3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fa77 	bl	800837a <HAL_TIM_IC_CaptureCallback>
 8007e8c:	e005      	b.n	8007e9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa69 	bl	8008366 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fa7a 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	f003 0304 	and.w	r3, r3, #4
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d122      	bne.n	8007ef4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b04      	cmp	r3, #4
 8007eba:	d11b      	bne.n	8007ef4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f06f 0204 	mvn.w	r2, #4
 8007ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2202      	movs	r2, #2
 8007eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fa4d 	bl	800837a <HAL_TIM_IC_CaptureCallback>
 8007ee0:	e005      	b.n	8007eee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa3f 	bl	8008366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fa50 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f003 0308 	and.w	r3, r3, #8
 8007efe:	2b08      	cmp	r3, #8
 8007f00:	d122      	bne.n	8007f48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d11b      	bne.n	8007f48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f06f 0208 	mvn.w	r2, #8
 8007f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2204      	movs	r2, #4
 8007f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fa23 	bl	800837a <HAL_TIM_IC_CaptureCallback>
 8007f34:	e005      	b.n	8007f42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa15 	bl	8008366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fa26 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	f003 0310 	and.w	r3, r3, #16
 8007f52:	2b10      	cmp	r3, #16
 8007f54:	d122      	bne.n	8007f9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f003 0310 	and.w	r3, r3, #16
 8007f60:	2b10      	cmp	r3, #16
 8007f62:	d11b      	bne.n	8007f9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f06f 0210 	mvn.w	r2, #16
 8007f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2208      	movs	r2, #8
 8007f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f9f9 	bl	800837a <HAL_TIM_IC_CaptureCallback>
 8007f88:	e005      	b.n	8007f96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f9eb 	bl	8008366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f9fc 	bl	800838e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d10e      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d107      	bne.n	8007fc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f06f 0201 	mvn.w	r2, #1
 8007fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7fa f998 	bl	80022f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd2:	2b80      	cmp	r3, #128	; 0x80
 8007fd4:	d10e      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe0:	2b80      	cmp	r3, #128	; 0x80
 8007fe2:	d107      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fd26 	bl	8008a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffe:	2b40      	cmp	r3, #64	; 0x40
 8008000:	d10e      	bne.n	8008020 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800c:	2b40      	cmp	r3, #64	; 0x40
 800800e:	d107      	bne.n	8008020 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f9c1 	bl	80083a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b20      	cmp	r3, #32
 800802c:	d10e      	bne.n	800804c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f003 0320 	and.w	r3, r3, #32
 8008038:	2b20      	cmp	r3, #32
 800803a:	d107      	bne.n	800804c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f06f 0220 	mvn.w	r2, #32
 8008044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fcf0 	bl	8008a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800804c:	bf00      	nop
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800806a:	2b01      	cmp	r3, #1
 800806c:	d101      	bne.n	8008072 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800806e:	2302      	movs	r3, #2
 8008070:	e0ae      	b.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b0c      	cmp	r3, #12
 800807e:	f200 809f 	bhi.w	80081c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008082:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	080080bd 	.word	0x080080bd
 800808c:	080081c1 	.word	0x080081c1
 8008090:	080081c1 	.word	0x080081c1
 8008094:	080081c1 	.word	0x080081c1
 8008098:	080080fd 	.word	0x080080fd
 800809c:	080081c1 	.word	0x080081c1
 80080a0:	080081c1 	.word	0x080081c1
 80080a4:	080081c1 	.word	0x080081c1
 80080a8:	0800813f 	.word	0x0800813f
 80080ac:	080081c1 	.word	0x080081c1
 80080b0:	080081c1 	.word	0x080081c1
 80080b4:	080081c1 	.word	0x080081c1
 80080b8:	0800817f 	.word	0x0800817f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 f9f8 	bl	80084b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699a      	ldr	r2, [r3, #24]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f042 0208 	orr.w	r2, r2, #8
 80080d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 0204 	bic.w	r2, r2, #4
 80080e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6999      	ldr	r1, [r3, #24]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	691a      	ldr	r2, [r3, #16]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	619a      	str	r2, [r3, #24]
      break;
 80080fa:	e064      	b.n	80081c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68b9      	ldr	r1, [r7, #8]
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fa3e 	bl	8008584 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699a      	ldr	r2, [r3, #24]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699a      	ldr	r2, [r3, #24]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6999      	ldr	r1, [r3, #24]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	021a      	lsls	r2, r3, #8
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	619a      	str	r2, [r3, #24]
      break;
 800813c:	e043      	b.n	80081c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68b9      	ldr	r1, [r7, #8]
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fa89 	bl	800865c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	69da      	ldr	r2, [r3, #28]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f042 0208 	orr.w	r2, r2, #8
 8008158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69da      	ldr	r2, [r3, #28]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0204 	bic.w	r2, r2, #4
 8008168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69d9      	ldr	r1, [r3, #28]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	691a      	ldr	r2, [r3, #16]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	430a      	orrs	r2, r1
 800817a:	61da      	str	r2, [r3, #28]
      break;
 800817c:	e023      	b.n	80081c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68b9      	ldr	r1, [r7, #8]
 8008184:	4618      	mov	r0, r3
 8008186:	f000 fad3 	bl	8008730 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	69da      	ldr	r2, [r3, #28]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	69da      	ldr	r2, [r3, #28]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	69d9      	ldr	r1, [r3, #28]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	021a      	lsls	r2, r3, #8
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	61da      	str	r2, [r3, #28]
      break;
 80081be:	e002      	b.n	80081c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	75fb      	strb	r3, [r7, #23]
      break;
 80081c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <HAL_TIM_ConfigClockSource+0x1c>
 80081f0:	2302      	movs	r3, #2
 80081f2:	e0b4      	b.n	800835e <HAL_TIM_ConfigClockSource+0x186>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800821a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822c:	d03e      	beq.n	80082ac <HAL_TIM_ConfigClockSource+0xd4>
 800822e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008232:	f200 8087 	bhi.w	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800823a:	f000 8086 	beq.w	800834a <HAL_TIM_ConfigClockSource+0x172>
 800823e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008242:	d87f      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008244:	2b70      	cmp	r3, #112	; 0x70
 8008246:	d01a      	beq.n	800827e <HAL_TIM_ConfigClockSource+0xa6>
 8008248:	2b70      	cmp	r3, #112	; 0x70
 800824a:	d87b      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 800824c:	2b60      	cmp	r3, #96	; 0x60
 800824e:	d050      	beq.n	80082f2 <HAL_TIM_ConfigClockSource+0x11a>
 8008250:	2b60      	cmp	r3, #96	; 0x60
 8008252:	d877      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008254:	2b50      	cmp	r3, #80	; 0x50
 8008256:	d03c      	beq.n	80082d2 <HAL_TIM_ConfigClockSource+0xfa>
 8008258:	2b50      	cmp	r3, #80	; 0x50
 800825a:	d873      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d058      	beq.n	8008312 <HAL_TIM_ConfigClockSource+0x13a>
 8008260:	2b40      	cmp	r3, #64	; 0x40
 8008262:	d86f      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008264:	2b30      	cmp	r3, #48	; 0x30
 8008266:	d064      	beq.n	8008332 <HAL_TIM_ConfigClockSource+0x15a>
 8008268:	2b30      	cmp	r3, #48	; 0x30
 800826a:	d86b      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 800826c:	2b20      	cmp	r3, #32
 800826e:	d060      	beq.n	8008332 <HAL_TIM_ConfigClockSource+0x15a>
 8008270:	2b20      	cmp	r3, #32
 8008272:	d867      	bhi.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
 8008274:	2b00      	cmp	r3, #0
 8008276:	d05c      	beq.n	8008332 <HAL_TIM_ConfigClockSource+0x15a>
 8008278:	2b10      	cmp	r3, #16
 800827a:	d05a      	beq.n	8008332 <HAL_TIM_ConfigClockSource+0x15a>
 800827c:	e062      	b.n	8008344 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	6899      	ldr	r1, [r3, #8]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	f000 fb19 	bl	80088c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	609a      	str	r2, [r3, #8]
      break;
 80082aa:	e04f      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	6899      	ldr	r1, [r3, #8]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f000 fb02 	bl	80088c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689a      	ldr	r2, [r3, #8]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082ce:	609a      	str	r2, [r3, #8]
      break;
 80082d0:	e03c      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6818      	ldr	r0, [r3, #0]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	6859      	ldr	r1, [r3, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	461a      	mov	r2, r3
 80082e0:	f000 fa76 	bl	80087d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2150      	movs	r1, #80	; 0x50
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 facf 	bl	800888e <TIM_ITRx_SetConfig>
      break;
 80082f0:	e02c      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6818      	ldr	r0, [r3, #0]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	6859      	ldr	r1, [r3, #4]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	461a      	mov	r2, r3
 8008300:	f000 fa95 	bl	800882e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2160      	movs	r1, #96	; 0x60
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fabf 	bl	800888e <TIM_ITRx_SetConfig>
      break;
 8008310:	e01c      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	6859      	ldr	r1, [r3, #4]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	461a      	mov	r2, r3
 8008320:	f000 fa56 	bl	80087d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2140      	movs	r1, #64	; 0x40
 800832a:	4618      	mov	r0, r3
 800832c:	f000 faaf 	bl	800888e <TIM_ITRx_SetConfig>
      break;
 8008330:	e00c      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4619      	mov	r1, r3
 800833c:	4610      	mov	r0, r2
 800833e:	f000 faa6 	bl	800888e <TIM_ITRx_SetConfig>
      break;
 8008342:	e003      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	73fb      	strb	r3, [r7, #15]
      break;
 8008348:	e000      	b.n	800834c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800834a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083aa:	bf00      	nop
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
	...

080083b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a34      	ldr	r2, [pc, #208]	; (800849c <TIM_Base_SetConfig+0xe4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d00f      	beq.n	80083f0 <TIM_Base_SetConfig+0x38>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d6:	d00b      	beq.n	80083f0 <TIM_Base_SetConfig+0x38>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a31      	ldr	r2, [pc, #196]	; (80084a0 <TIM_Base_SetConfig+0xe8>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d007      	beq.n	80083f0 <TIM_Base_SetConfig+0x38>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a30      	ldr	r2, [pc, #192]	; (80084a4 <TIM_Base_SetConfig+0xec>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d003      	beq.n	80083f0 <TIM_Base_SetConfig+0x38>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a2f      	ldr	r2, [pc, #188]	; (80084a8 <TIM_Base_SetConfig+0xf0>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d108      	bne.n	8008402 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	4313      	orrs	r3, r2
 8008400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a25      	ldr	r2, [pc, #148]	; (800849c <TIM_Base_SetConfig+0xe4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d01b      	beq.n	8008442 <TIM_Base_SetConfig+0x8a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008410:	d017      	beq.n	8008442 <TIM_Base_SetConfig+0x8a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a22      	ldr	r2, [pc, #136]	; (80084a0 <TIM_Base_SetConfig+0xe8>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d013      	beq.n	8008442 <TIM_Base_SetConfig+0x8a>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a21      	ldr	r2, [pc, #132]	; (80084a4 <TIM_Base_SetConfig+0xec>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00f      	beq.n	8008442 <TIM_Base_SetConfig+0x8a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a20      	ldr	r2, [pc, #128]	; (80084a8 <TIM_Base_SetConfig+0xf0>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d00b      	beq.n	8008442 <TIM_Base_SetConfig+0x8a>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a1f      	ldr	r2, [pc, #124]	; (80084ac <TIM_Base_SetConfig+0xf4>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d007      	beq.n	8008442 <TIM_Base_SetConfig+0x8a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a1e      	ldr	r2, [pc, #120]	; (80084b0 <TIM_Base_SetConfig+0xf8>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d003      	beq.n	8008442 <TIM_Base_SetConfig+0x8a>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a1d      	ldr	r2, [pc, #116]	; (80084b4 <TIM_Base_SetConfig+0xfc>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d108      	bne.n	8008454 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	4313      	orrs	r3, r2
 8008460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	689a      	ldr	r2, [r3, #8]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a08      	ldr	r2, [pc, #32]	; (800849c <TIM_Base_SetConfig+0xe4>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d103      	bne.n	8008488 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	615a      	str	r2, [r3, #20]
}
 800848e:	bf00      	nop
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	40010000 	.word	0x40010000
 80084a0:	40000400 	.word	0x40000400
 80084a4:	40000800 	.word	0x40000800
 80084a8:	40000c00 	.word	0x40000c00
 80084ac:	40014000 	.word	0x40014000
 80084b0:	40014400 	.word	0x40014400
 80084b4:	40014800 	.word	0x40014800

080084b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	f023 0201 	bic.w	r2, r3, #1
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f023 0303 	bic.w	r3, r3, #3
 80084ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f023 0302 	bic.w	r3, r3, #2
 8008500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	4313      	orrs	r3, r2
 800850a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a1c      	ldr	r2, [pc, #112]	; (8008580 <TIM_OC1_SetConfig+0xc8>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d10c      	bne.n	800852e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	f023 0308 	bic.w	r3, r3, #8
 800851a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f023 0304 	bic.w	r3, r3, #4
 800852c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a13      	ldr	r2, [pc, #76]	; (8008580 <TIM_OC1_SetConfig+0xc8>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d111      	bne.n	800855a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800853c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	4313      	orrs	r3, r2
 800854e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	4313      	orrs	r3, r2
 8008558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685a      	ldr	r2, [r3, #4]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	621a      	str	r2, [r3, #32]
}
 8008574:	bf00      	nop
 8008576:	371c      	adds	r7, #28
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	40010000 	.word	0x40010000

08008584 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	f023 0210 	bic.w	r2, r3, #16
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	021b      	lsls	r3, r3, #8
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f023 0320 	bic.w	r3, r3, #32
 80085ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	011b      	lsls	r3, r3, #4
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4313      	orrs	r3, r2
 80085da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a1e      	ldr	r2, [pc, #120]	; (8008658 <TIM_OC2_SetConfig+0xd4>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d10d      	bne.n	8008600 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	011b      	lsls	r3, r3, #4
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a15      	ldr	r2, [pc, #84]	; (8008658 <TIM_OC2_SetConfig+0xd4>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d113      	bne.n	8008630 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800860e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008616:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	4313      	orrs	r3, r2
 8008622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	4313      	orrs	r3, r2
 800862e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	621a      	str	r2, [r3, #32]
}
 800864a:	bf00      	nop
 800864c:	371c      	adds	r7, #28
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	40010000 	.word	0x40010000

0800865c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 0303 	bic.w	r3, r3, #3
 8008692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	4313      	orrs	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	021b      	lsls	r3, r3, #8
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a1d      	ldr	r2, [pc, #116]	; (800872c <TIM_OC3_SetConfig+0xd0>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d10d      	bne.n	80086d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a14      	ldr	r2, [pc, #80]	; (800872c <TIM_OC3_SetConfig+0xd0>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d113      	bne.n	8008706 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	011b      	lsls	r3, r3, #4
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	621a      	str	r2, [r3, #32]
}
 8008720:	bf00      	nop
 8008722:	371c      	adds	r7, #28
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	40010000 	.word	0x40010000

08008730 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800875e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	021b      	lsls	r3, r3, #8
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	4313      	orrs	r3, r2
 8008772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800877a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	031b      	lsls	r3, r3, #12
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	4313      	orrs	r3, r2
 8008786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a10      	ldr	r2, [pc, #64]	; (80087cc <TIM_OC4_SetConfig+0x9c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d109      	bne.n	80087a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	019b      	lsls	r3, r3, #6
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	621a      	str	r2, [r3, #32]
}
 80087be:	bf00      	nop
 80087c0:	371c      	adds	r7, #28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	40010000 	.word	0x40010000

080087d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	f023 0201 	bic.w	r2, r3, #1
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	4313      	orrs	r3, r2
 8008804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f023 030a 	bic.w	r3, r3, #10
 800880c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4313      	orrs	r3, r2
 8008814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	621a      	str	r2, [r3, #32]
}
 8008822:	bf00      	nop
 8008824:	371c      	adds	r7, #28
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800882e:	b480      	push	{r7}
 8008830:	b087      	sub	sp, #28
 8008832:	af00      	add	r7, sp, #0
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f023 0210 	bic.w	r2, r3, #16
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008858:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	031b      	lsls	r3, r3, #12
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	4313      	orrs	r3, r2
 8008862:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800886a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	4313      	orrs	r3, r2
 8008874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	621a      	str	r2, [r3, #32]
}
 8008882:	bf00      	nop
 8008884:	371c      	adds	r7, #28
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800888e:	b480      	push	{r7}
 8008890:	b085      	sub	sp, #20
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	f043 0307 	orr.w	r3, r3, #7
 80088b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	609a      	str	r2, [r3, #8]
}
 80088b8:	bf00      	nop
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	021a      	lsls	r2, r3, #8
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	431a      	orrs	r2, r3
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	609a      	str	r2, [r3, #8]
}
 80088f8:	bf00      	nop
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008904:	b480      	push	{r7}
 8008906:	b087      	sub	sp, #28
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f003 031f 	and.w	r3, r3, #31
 8008916:	2201      	movs	r2, #1
 8008918:	fa02 f303 	lsl.w	r3, r2, r3
 800891c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6a1a      	ldr	r2, [r3, #32]
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	43db      	mvns	r3, r3
 8008926:	401a      	ands	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6a1a      	ldr	r2, [r3, #32]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	f003 031f 	and.w	r3, r3, #31
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	fa01 f303 	lsl.w	r3, r1, r3
 800893c:	431a      	orrs	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	621a      	str	r2, [r3, #32]
}
 8008942:	bf00      	nop
 8008944:	371c      	adds	r7, #28
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
	...

08008950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008960:	2b01      	cmp	r3, #1
 8008962:	d101      	bne.n	8008968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008964:	2302      	movs	r3, #2
 8008966:	e050      	b.n	8008a0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2202      	movs	r2, #2
 8008974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800898e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	4313      	orrs	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a1c      	ldr	r2, [pc, #112]	; (8008a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d018      	beq.n	80089de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089b4:	d013      	beq.n	80089de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a18      	ldr	r2, [pc, #96]	; (8008a1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d00e      	beq.n	80089de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a16      	ldr	r2, [pc, #88]	; (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d009      	beq.n	80089de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a15      	ldr	r2, [pc, #84]	; (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d004      	beq.n	80089de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a13      	ldr	r2, [pc, #76]	; (8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d10c      	bne.n	80089f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	40010000 	.word	0x40010000
 8008a1c:	40000400 	.word	0x40000400
 8008a20:	40000800 	.word	0x40000800
 8008a24:	40000c00 	.word	0x40000c00
 8008a28:	40014000 	.word	0x40014000

08008a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e03f      	b.n	8008ae6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7fb fd9c 	bl	80045b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2224      	movs	r2, #36	; 0x24
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68da      	ldr	r2, [r3, #12]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fe4b 	bl	8009734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	691a      	ldr	r2, [r3, #16]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008aac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	695a      	ldr	r2, [r3, #20]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008abc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68da      	ldr	r2, [r3, #12]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008acc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e021      	b.n	8008b44 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2224      	movs	r2, #36	; 0x24
 8008b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68da      	ldr	r2, [r3, #12]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b16:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7fb fd9d 	bl	8004658 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b08a      	sub	sp, #40	; 0x28
 8008b50:	af02      	add	r7, sp, #8
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	d17c      	bne.n	8008c66 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d002      	beq.n	8008b78 <HAL_UART_Transmit+0x2c>
 8008b72:	88fb      	ldrh	r3, [r7, #6]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e075      	b.n	8008c68 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d101      	bne.n	8008b8a <HAL_UART_Transmit+0x3e>
 8008b86:	2302      	movs	r3, #2
 8008b88:	e06e      	b.n	8008c68 <HAL_UART_Transmit+0x11c>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2221      	movs	r2, #33	; 0x21
 8008b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ba0:	f7fb ff5c 	bl	8004a5c <HAL_GetTick>
 8008ba4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	88fa      	ldrh	r2, [r7, #6]
 8008baa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	88fa      	ldrh	r2, [r7, #6]
 8008bb0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bba:	d108      	bne.n	8008bce <HAL_UART_Transmit+0x82>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d104      	bne.n	8008bce <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	61bb      	str	r3, [r7, #24]
 8008bcc:	e003      	b.n	8008bd6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008bde:	e02a      	b.n	8008c36 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2200      	movs	r2, #0
 8008be8:	2180      	movs	r1, #128	; 0x80
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 fb9a 	bl	8009324 <UART_WaitOnFlagUntilTimeout>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e036      	b.n	8008c68 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10b      	bne.n	8008c18 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	461a      	mov	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c0e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	3302      	adds	r3, #2
 8008c14:	61bb      	str	r3, [r7, #24]
 8008c16:	e007      	b.n	8008c28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	781a      	ldrb	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	3301      	adds	r3, #1
 8008c26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1cf      	bne.n	8008be0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	2200      	movs	r2, #0
 8008c48:	2140      	movs	r1, #64	; 0x40
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 fb6a 	bl	8009324 <UART_WaitOnFlagUntilTimeout>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e006      	b.n	8008c68 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	e000      	b.n	8008c68 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c66:	2302      	movs	r3, #2
  }
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3720      	adds	r7, #32
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b08a      	sub	sp, #40	; 0x28
 8008c74:	af02      	add	r7, sp, #8
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	603b      	str	r3, [r7, #0]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b20      	cmp	r3, #32
 8008c8e:	f040 808c 	bne.w	8008daa <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <HAL_UART_Receive+0x2e>
 8008c98:	88fb      	ldrh	r3, [r7, #6]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d101      	bne.n	8008ca2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e084      	b.n	8008dac <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d101      	bne.n	8008cb0 <HAL_UART_Receive+0x40>
 8008cac:	2302      	movs	r3, #2
 8008cae:	e07d      	b.n	8008dac <HAL_UART_Receive+0x13c>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2222      	movs	r2, #34	; 0x22
 8008cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ccc:	f7fb fec6 	bl	8004a5c <HAL_GetTick>
 8008cd0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	88fa      	ldrh	r2, [r7, #6]
 8008cd6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	88fa      	ldrh	r2, [r7, #6]
 8008cdc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce6:	d108      	bne.n	8008cfa <HAL_UART_Receive+0x8a>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d104      	bne.n	8008cfa <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	61bb      	str	r3, [r7, #24]
 8008cf8:	e003      	b.n	8008d02 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008d0a:	e043      	b.n	8008d94 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	2200      	movs	r2, #0
 8008d14:	2120      	movs	r1, #32
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 fb04 	bl	8009324 <UART_WaitOnFlagUntilTimeout>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e042      	b.n	8008dac <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10c      	bne.n	8008d46 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	3302      	adds	r3, #2
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	e01f      	b.n	8008d86 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d4e:	d007      	beq.n	8008d60 <HAL_UART_Receive+0xf0>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <HAL_UART_Receive+0xfe>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d106      	bne.n	8008d6e <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	701a      	strb	r2, [r3, #0]
 8008d6c:	e008      	b.n	8008d80 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	3301      	adds	r3, #1
 8008d84:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1b6      	bne.n	8008d0c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2220      	movs	r2, #32
 8008da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	e000      	b.n	8008dac <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008daa:	2302      	movs	r3, #2
  }
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3720      	adds	r7, #32
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b0ba      	sub	sp, #232	; 0xe8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dea:	f003 030f 	and.w	r3, r3, #15
 8008dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10f      	bne.n	8008e1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dfe:	f003 0320 	and.w	r3, r3, #32
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d009      	beq.n	8008e1a <HAL_UART_IRQHandler+0x66>
 8008e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e0a:	f003 0320 	and.w	r3, r3, #32
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fbd3 	bl	80095be <UART_Receive_IT>
      return;
 8008e18:	e256      	b.n	80092c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 80de 	beq.w	8008fe0 <HAL_UART_IRQHandler+0x22c>
 8008e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d106      	bne.n	8008e3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 80d1 	beq.w	8008fe0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00b      	beq.n	8008e62 <HAL_UART_IRQHandler+0xae>
 8008e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	f043 0201 	orr.w	r2, r3, #1
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e66:	f003 0304 	and.w	r3, r3, #4
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00b      	beq.n	8008e86 <HAL_UART_IRQHandler+0xd2>
 8008e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	f043 0202 	orr.w	r2, r3, #2
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00b      	beq.n	8008eaa <HAL_UART_IRQHandler+0xf6>
 8008e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d005      	beq.n	8008eaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea2:	f043 0204 	orr.w	r2, r3, #4
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eae:	f003 0308 	and.w	r3, r3, #8
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d011      	beq.n	8008eda <HAL_UART_IRQHandler+0x126>
 8008eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eba:	f003 0320 	and.w	r3, r3, #32
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d105      	bne.n	8008ece <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d005      	beq.n	8008eda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed2:	f043 0208 	orr.w	r2, r3, #8
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f000 81ed 	beq.w	80092be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ee8:	f003 0320 	and.w	r3, r3, #32
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d008      	beq.n	8008f02 <HAL_UART_IRQHandler+0x14e>
 8008ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ef4:	f003 0320 	and.w	r3, r3, #32
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fb5e 	bl	80095be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0c:	2b40      	cmp	r3, #64	; 0x40
 8008f0e:	bf0c      	ite	eq
 8008f10:	2301      	moveq	r3, #1
 8008f12:	2300      	movne	r3, #0
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1e:	f003 0308 	and.w	r3, r3, #8
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d103      	bne.n	8008f2e <HAL_UART_IRQHandler+0x17a>
 8008f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d04f      	beq.n	8008fce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fa66 	bl	8009400 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3e:	2b40      	cmp	r3, #64	; 0x40
 8008f40:	d141      	bne.n	8008fc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3314      	adds	r3, #20
 8008f48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f50:	e853 3f00 	ldrex	r3, [r3]
 8008f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	3314      	adds	r3, #20
 8008f6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1d9      	bne.n	8008f42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d013      	beq.n	8008fbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9a:	4a7d      	ldr	r2, [pc, #500]	; (8009190 <HAL_UART_IRQHandler+0x3dc>)
 8008f9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fb ff3d 	bl	8004e22 <HAL_DMA_Abort_IT>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d016      	beq.n	8008fdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008fb8:	4610      	mov	r0, r2
 8008fba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fbc:	e00e      	b.n	8008fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f99a 	bl	80092f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc4:	e00a      	b.n	8008fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f996 	bl	80092f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fcc:	e006      	b.n	8008fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f992 	bl	80092f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008fda:	e170      	b.n	80092be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fdc:	bf00      	nop
    return;
 8008fde:	e16e      	b.n	80092be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	f040 814a 	bne.w	800927e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fee:	f003 0310 	and.w	r3, r3, #16
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f000 8143 	beq.w	800927e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ffc:	f003 0310 	and.w	r3, r3, #16
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 813c 	beq.w	800927e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009006:	2300      	movs	r3, #0
 8009008:	60bb      	str	r3, [r7, #8]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	60bb      	str	r3, [r7, #8]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	60bb      	str	r3, [r7, #8]
 800901a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009026:	2b40      	cmp	r3, #64	; 0x40
 8009028:	f040 80b4 	bne.w	8009194 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009038:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 8140 	beq.w	80092c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800904a:	429a      	cmp	r2, r3
 800904c:	f080 8139 	bcs.w	80092c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009056:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009062:	f000 8088 	beq.w	8009176 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	330c      	adds	r3, #12
 800906c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800907c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	330c      	adds	r3, #12
 800908e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009092:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800909e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1d9      	bne.n	8009066 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3314      	adds	r3, #20
 80090b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090bc:	e853 3f00 	ldrex	r3, [r3]
 80090c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090c4:	f023 0301 	bic.w	r3, r3, #1
 80090c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3314      	adds	r3, #20
 80090d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80090d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80090da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80090de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090e2:	e841 2300 	strex	r3, r2, [r1]
 80090e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e1      	bne.n	80090b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3314      	adds	r3, #20
 80090f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3314      	adds	r3, #20
 800910e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009112:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009114:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009118:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e3      	bne.n	80090ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2220      	movs	r2, #32
 800912a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	330c      	adds	r3, #12
 800913a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800913e:	e853 3f00 	ldrex	r3, [r3]
 8009142:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009146:	f023 0310 	bic.w	r3, r3, #16
 800914a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	330c      	adds	r3, #12
 8009154:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009158:	65ba      	str	r2, [r7, #88]	; 0x58
 800915a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800915e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009160:	e841 2300 	strex	r3, r2, [r1]
 8009164:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1e3      	bne.n	8009134 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009170:	4618      	mov	r0, r3
 8009172:	f7fb fde6 	bl	8004d42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800917e:	b29b      	uxth	r3, r3
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	b29b      	uxth	r3, r3
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f8c0 	bl	800930c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800918c:	e099      	b.n	80092c2 <HAL_UART_IRQHandler+0x50e>
 800918e:	bf00      	nop
 8009190:	080094c7 	.word	0x080094c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800919c:	b29b      	uxth	r3, r3
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 808b 	beq.w	80092c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80091b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 8086 	beq.w	80092c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	330c      	adds	r3, #12
 80091c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	330c      	adds	r3, #12
 80091da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80091de:	647a      	str	r2, [r7, #68]	; 0x44
 80091e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091e6:	e841 2300 	strex	r3, r2, [r1]
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80091ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1e3      	bne.n	80091ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3314      	adds	r3, #20
 80091f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	e853 3f00 	ldrex	r3, [r3]
 8009200:	623b      	str	r3, [r7, #32]
   return(result);
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	f023 0301 	bic.w	r3, r3, #1
 8009208:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3314      	adds	r3, #20
 8009212:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009216:	633a      	str	r2, [r7, #48]	; 0x30
 8009218:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800921c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1e3      	bne.n	80091f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2220      	movs	r2, #32
 800922e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	330c      	adds	r3, #12
 800923e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	e853 3f00 	ldrex	r3, [r3]
 8009246:	60fb      	str	r3, [r7, #12]
   return(result);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 0310 	bic.w	r3, r3, #16
 800924e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	330c      	adds	r3, #12
 8009258:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800925c:	61fa      	str	r2, [r7, #28]
 800925e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	69b9      	ldr	r1, [r7, #24]
 8009262:	69fa      	ldr	r2, [r7, #28]
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	617b      	str	r3, [r7, #20]
   return(result);
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e3      	bne.n	8009238 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f848 	bl	800930c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800927c:	e023      	b.n	80092c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800927e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009286:	2b00      	cmp	r3, #0
 8009288:	d009      	beq.n	800929e <HAL_UART_IRQHandler+0x4ea>
 800928a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800928e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f929 	bl	80094ee <UART_Transmit_IT>
    return;
 800929c:	e014      	b.n	80092c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800929e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00e      	beq.n	80092c8 <HAL_UART_IRQHandler+0x514>
 80092aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d008      	beq.n	80092c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f969 	bl	800958e <UART_EndTransmit_IT>
    return;
 80092bc:	e004      	b.n	80092c8 <HAL_UART_IRQHandler+0x514>
    return;
 80092be:	bf00      	nop
 80092c0:	e002      	b.n	80092c8 <HAL_UART_IRQHandler+0x514>
      return;
 80092c2:	bf00      	nop
 80092c4:	e000      	b.n	80092c8 <HAL_UART_IRQHandler+0x514>
      return;
 80092c6:	bf00      	nop
  }
}
 80092c8:	37e8      	adds	r7, #232	; 0xe8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop

080092d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	460b      	mov	r3, r1
 8009316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b090      	sub	sp, #64	; 0x40
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	4613      	mov	r3, r2
 8009332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009334:	e050      	b.n	80093d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933c:	d04c      	beq.n	80093d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800933e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009340:	2b00      	cmp	r3, #0
 8009342:	d007      	beq.n	8009354 <UART_WaitOnFlagUntilTimeout+0x30>
 8009344:	f7fb fb8a 	bl	8004a5c <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009350:	429a      	cmp	r2, r3
 8009352:	d241      	bcs.n	80093d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	330c      	adds	r3, #12
 800935a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935e:	e853 3f00 	ldrex	r3, [r3]
 8009362:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800936a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	330c      	adds	r3, #12
 8009372:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009374:	637a      	str	r2, [r7, #52]	; 0x34
 8009376:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800937a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800937c:	e841 2300 	strex	r3, r2, [r1]
 8009380:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1e5      	bne.n	8009354 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3314      	adds	r3, #20
 800938e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	e853 3f00 	ldrex	r3, [r3]
 8009396:	613b      	str	r3, [r7, #16]
   return(result);
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f023 0301 	bic.w	r3, r3, #1
 800939e:	63bb      	str	r3, [r7, #56]	; 0x38
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	3314      	adds	r3, #20
 80093a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093a8:	623a      	str	r2, [r7, #32]
 80093aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	69f9      	ldr	r1, [r7, #28]
 80093ae:	6a3a      	ldr	r2, [r7, #32]
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e5      	bne.n	8009388 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2220      	movs	r2, #32
 80093c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2220      	movs	r2, #32
 80093c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e00f      	b.n	80093f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	4013      	ands	r3, r2
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	bf0c      	ite	eq
 80093e8:	2301      	moveq	r3, #1
 80093ea:	2300      	movne	r3, #0
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	461a      	mov	r2, r3
 80093f0:	79fb      	ldrb	r3, [r7, #7]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d09f      	beq.n	8009336 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3740      	adds	r7, #64	; 0x40
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009400:	b480      	push	{r7}
 8009402:	b095      	sub	sp, #84	; 0x54
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	330c      	adds	r3, #12
 800940e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009412:	e853 3f00 	ldrex	r3, [r3]
 8009416:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800941e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	330c      	adds	r3, #12
 8009426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009428:	643a      	str	r2, [r7, #64]	; 0x40
 800942a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800942e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009430:	e841 2300 	strex	r3, r2, [r1]
 8009434:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1e5      	bne.n	8009408 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3314      	adds	r3, #20
 8009442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	6a3b      	ldr	r3, [r7, #32]
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	61fb      	str	r3, [r7, #28]
   return(result);
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	f023 0301 	bic.w	r3, r3, #1
 8009452:	64bb      	str	r3, [r7, #72]	; 0x48
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3314      	adds	r3, #20
 800945a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800945c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800945e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e5      	bne.n	800943c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009474:	2b01      	cmp	r3, #1
 8009476:	d119      	bne.n	80094ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	330c      	adds	r3, #12
 800947e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	e853 3f00 	ldrex	r3, [r3]
 8009486:	60bb      	str	r3, [r7, #8]
   return(result);
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	f023 0310 	bic.w	r3, r3, #16
 800948e:	647b      	str	r3, [r7, #68]	; 0x44
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	330c      	adds	r3, #12
 8009496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009498:	61ba      	str	r2, [r7, #24]
 800949a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949c:	6979      	ldr	r1, [r7, #20]
 800949e:	69ba      	ldr	r2, [r7, #24]
 80094a0:	e841 2300 	strex	r3, r2, [r1]
 80094a4:	613b      	str	r3, [r7, #16]
   return(result);
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1e5      	bne.n	8009478 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2220      	movs	r2, #32
 80094b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80094ba:	bf00      	nop
 80094bc:	3754      	adds	r7, #84	; 0x54
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f7ff ff09 	bl	80092f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094e6:	bf00      	nop
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b085      	sub	sp, #20
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b21      	cmp	r3, #33	; 0x21
 8009500:	d13e      	bne.n	8009580 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800950a:	d114      	bne.n	8009536 <UART_Transmit_IT+0x48>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d110      	bne.n	8009536 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a1b      	ldr	r3, [r3, #32]
 8009518:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009528:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	1c9a      	adds	r2, r3, #2
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	621a      	str	r2, [r3, #32]
 8009534:	e008      	b.n	8009548 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	1c59      	adds	r1, r3, #1
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	6211      	str	r1, [r2, #32]
 8009540:	781a      	ldrb	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800954c:	b29b      	uxth	r3, r3
 800954e:	3b01      	subs	r3, #1
 8009550:	b29b      	uxth	r3, r3
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	4619      	mov	r1, r3
 8009556:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10f      	bne.n	800957c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800956a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68da      	ldr	r2, [r3, #12]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800957a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	e000      	b.n	8009582 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009580:	2302      	movs	r3, #2
  }
}
 8009582:	4618      	mov	r0, r3
 8009584:	3714      	adds	r7, #20
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2220      	movs	r2, #32
 80095aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7ff fe8e 	bl	80092d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b08c      	sub	sp, #48	; 0x30
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b22      	cmp	r3, #34	; 0x22
 80095d0:	f040 80ab 	bne.w	800972a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095dc:	d117      	bne.n	800960e <UART_Receive_IT+0x50>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d113      	bne.n	800960e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009600:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009606:	1c9a      	adds	r2, r3, #2
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	629a      	str	r2, [r3, #40]	; 0x28
 800960c:	e026      	b.n	800965c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009612:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009614:	2300      	movs	r3, #0
 8009616:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009620:	d007      	beq.n	8009632 <UART_Receive_IT+0x74>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10a      	bne.n	8009640 <UART_Receive_IT+0x82>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d106      	bne.n	8009640 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	b2da      	uxtb	r2, r3
 800963a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963c:	701a      	strb	r2, [r3, #0]
 800963e:	e008      	b.n	8009652 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	b2db      	uxtb	r3, r3
 8009648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800964c:	b2da      	uxtb	r2, r3
 800964e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009650:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009656:	1c5a      	adds	r2, r3, #1
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009660:	b29b      	uxth	r3, r3
 8009662:	3b01      	subs	r3, #1
 8009664:	b29b      	uxth	r3, r3
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	4619      	mov	r1, r3
 800966a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800966c:	2b00      	cmp	r3, #0
 800966e:	d15a      	bne.n	8009726 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68da      	ldr	r2, [r3, #12]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f022 0220 	bic.w	r2, r2, #32
 800967e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68da      	ldr	r2, [r3, #12]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800968e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	695a      	ldr	r2, [r3, #20]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f022 0201 	bic.w	r2, r2, #1
 800969e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2220      	movs	r2, #32
 80096a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d135      	bne.n	800971c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	330c      	adds	r3, #12
 80096bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	e853 3f00 	ldrex	r3, [r3]
 80096c4:	613b      	str	r3, [r7, #16]
   return(result);
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	f023 0310 	bic.w	r3, r3, #16
 80096cc:	627b      	str	r3, [r7, #36]	; 0x24
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	330c      	adds	r3, #12
 80096d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d6:	623a      	str	r2, [r7, #32]
 80096d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	69f9      	ldr	r1, [r7, #28]
 80096dc:	6a3a      	ldr	r2, [r7, #32]
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e5      	bne.n	80096b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0310 	and.w	r3, r3, #16
 80096f4:	2b10      	cmp	r3, #16
 80096f6:	d10a      	bne.n	800970e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096f8:	2300      	movs	r3, #0
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	60fb      	str	r3, [r7, #12]
 800970c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f7ff fdf9 	bl	800930c <HAL_UARTEx_RxEventCallback>
 800971a:	e002      	b.n	8009722 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7ff fde1 	bl	80092e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	e002      	b.n	800972c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	e000      	b.n	800972c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800972a:	2302      	movs	r3, #2
  }
}
 800972c:	4618      	mov	r0, r3
 800972e:	3730      	adds	r7, #48	; 0x30
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009738:	b0c0      	sub	sp, #256	; 0x100
 800973a:	af00      	add	r7, sp, #0
 800973c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800974c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009750:	68d9      	ldr	r1, [r3, #12]
 8009752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	ea40 0301 	orr.w	r3, r0, r1
 800975c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800975e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009762:	689a      	ldr	r2, [r3, #8]
 8009764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	431a      	orrs	r2, r3
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	431a      	orrs	r2, r3
 8009774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	4313      	orrs	r3, r2
 800977c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800978c:	f021 010c 	bic.w	r1, r1, #12
 8009790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800979a:	430b      	orrs	r3, r1
 800979c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800979e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80097aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ae:	6999      	ldr	r1, [r3, #24]
 80097b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	ea40 0301 	orr.w	r3, r0, r1
 80097ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	4b8f      	ldr	r3, [pc, #572]	; (8009a00 <UART_SetConfig+0x2cc>)
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d005      	beq.n	80097d4 <UART_SetConfig+0xa0>
 80097c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	4b8d      	ldr	r3, [pc, #564]	; (8009a04 <UART_SetConfig+0x2d0>)
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d104      	bne.n	80097de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097d4:	f7fe f83c 	bl	8007850 <HAL_RCC_GetPCLK2Freq>
 80097d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80097dc:	e003      	b.n	80097e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80097de:	f7fe f823 	bl	8007828 <HAL_RCC_GetPCLK1Freq>
 80097e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097f0:	f040 810c 	bne.w	8009a0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097f8:	2200      	movs	r2, #0
 80097fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009802:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009806:	4622      	mov	r2, r4
 8009808:	462b      	mov	r3, r5
 800980a:	1891      	adds	r1, r2, r2
 800980c:	65b9      	str	r1, [r7, #88]	; 0x58
 800980e:	415b      	adcs	r3, r3
 8009810:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009812:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009816:	4621      	mov	r1, r4
 8009818:	eb12 0801 	adds.w	r8, r2, r1
 800981c:	4629      	mov	r1, r5
 800981e:	eb43 0901 	adc.w	r9, r3, r1
 8009822:	f04f 0200 	mov.w	r2, #0
 8009826:	f04f 0300 	mov.w	r3, #0
 800982a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800982e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009836:	4690      	mov	r8, r2
 8009838:	4699      	mov	r9, r3
 800983a:	4623      	mov	r3, r4
 800983c:	eb18 0303 	adds.w	r3, r8, r3
 8009840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009844:	462b      	mov	r3, r5
 8009846:	eb49 0303 	adc.w	r3, r9, r3
 800984a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800984e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800985a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800985e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009862:	460b      	mov	r3, r1
 8009864:	18db      	adds	r3, r3, r3
 8009866:	653b      	str	r3, [r7, #80]	; 0x50
 8009868:	4613      	mov	r3, r2
 800986a:	eb42 0303 	adc.w	r3, r2, r3
 800986e:	657b      	str	r3, [r7, #84]	; 0x54
 8009870:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009874:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009878:	f7f7 f9ee 	bl	8000c58 <__aeabi_uldivmod>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4b61      	ldr	r3, [pc, #388]	; (8009a08 <UART_SetConfig+0x2d4>)
 8009882:	fba3 2302 	umull	r2, r3, r3, r2
 8009886:	095b      	lsrs	r3, r3, #5
 8009888:	011c      	lsls	r4, r3, #4
 800988a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800988e:	2200      	movs	r2, #0
 8009890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009894:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009898:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800989c:	4642      	mov	r2, r8
 800989e:	464b      	mov	r3, r9
 80098a0:	1891      	adds	r1, r2, r2
 80098a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80098a4:	415b      	adcs	r3, r3
 80098a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80098ac:	4641      	mov	r1, r8
 80098ae:	eb12 0a01 	adds.w	sl, r2, r1
 80098b2:	4649      	mov	r1, r9
 80098b4:	eb43 0b01 	adc.w	fp, r3, r1
 80098b8:	f04f 0200 	mov.w	r2, #0
 80098bc:	f04f 0300 	mov.w	r3, #0
 80098c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098cc:	4692      	mov	sl, r2
 80098ce:	469b      	mov	fp, r3
 80098d0:	4643      	mov	r3, r8
 80098d2:	eb1a 0303 	adds.w	r3, sl, r3
 80098d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098da:	464b      	mov	r3, r9
 80098dc:	eb4b 0303 	adc.w	r3, fp, r3
 80098e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80098e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80098f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80098f8:	460b      	mov	r3, r1
 80098fa:	18db      	adds	r3, r3, r3
 80098fc:	643b      	str	r3, [r7, #64]	; 0x40
 80098fe:	4613      	mov	r3, r2
 8009900:	eb42 0303 	adc.w	r3, r2, r3
 8009904:	647b      	str	r3, [r7, #68]	; 0x44
 8009906:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800990a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800990e:	f7f7 f9a3 	bl	8000c58 <__aeabi_uldivmod>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4611      	mov	r1, r2
 8009918:	4b3b      	ldr	r3, [pc, #236]	; (8009a08 <UART_SetConfig+0x2d4>)
 800991a:	fba3 2301 	umull	r2, r3, r3, r1
 800991e:	095b      	lsrs	r3, r3, #5
 8009920:	2264      	movs	r2, #100	; 0x64
 8009922:	fb02 f303 	mul.w	r3, r2, r3
 8009926:	1acb      	subs	r3, r1, r3
 8009928:	00db      	lsls	r3, r3, #3
 800992a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800992e:	4b36      	ldr	r3, [pc, #216]	; (8009a08 <UART_SetConfig+0x2d4>)
 8009930:	fba3 2302 	umull	r2, r3, r3, r2
 8009934:	095b      	lsrs	r3, r3, #5
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800993c:	441c      	add	r4, r3
 800993e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009942:	2200      	movs	r2, #0
 8009944:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009948:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800994c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009950:	4642      	mov	r2, r8
 8009952:	464b      	mov	r3, r9
 8009954:	1891      	adds	r1, r2, r2
 8009956:	63b9      	str	r1, [r7, #56]	; 0x38
 8009958:	415b      	adcs	r3, r3
 800995a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800995c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009960:	4641      	mov	r1, r8
 8009962:	1851      	adds	r1, r2, r1
 8009964:	6339      	str	r1, [r7, #48]	; 0x30
 8009966:	4649      	mov	r1, r9
 8009968:	414b      	adcs	r3, r1
 800996a:	637b      	str	r3, [r7, #52]	; 0x34
 800996c:	f04f 0200 	mov.w	r2, #0
 8009970:	f04f 0300 	mov.w	r3, #0
 8009974:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009978:	4659      	mov	r1, fp
 800997a:	00cb      	lsls	r3, r1, #3
 800997c:	4651      	mov	r1, sl
 800997e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009982:	4651      	mov	r1, sl
 8009984:	00ca      	lsls	r2, r1, #3
 8009986:	4610      	mov	r0, r2
 8009988:	4619      	mov	r1, r3
 800998a:	4603      	mov	r3, r0
 800998c:	4642      	mov	r2, r8
 800998e:	189b      	adds	r3, r3, r2
 8009990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009994:	464b      	mov	r3, r9
 8009996:	460a      	mov	r2, r1
 8009998:	eb42 0303 	adc.w	r3, r2, r3
 800999c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80099ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80099b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80099b4:	460b      	mov	r3, r1
 80099b6:	18db      	adds	r3, r3, r3
 80099b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80099ba:	4613      	mov	r3, r2
 80099bc:	eb42 0303 	adc.w	r3, r2, r3
 80099c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80099ca:	f7f7 f945 	bl	8000c58 <__aeabi_uldivmod>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4b0d      	ldr	r3, [pc, #52]	; (8009a08 <UART_SetConfig+0x2d4>)
 80099d4:	fba3 1302 	umull	r1, r3, r3, r2
 80099d8:	095b      	lsrs	r3, r3, #5
 80099da:	2164      	movs	r1, #100	; 0x64
 80099dc:	fb01 f303 	mul.w	r3, r1, r3
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	3332      	adds	r3, #50	; 0x32
 80099e6:	4a08      	ldr	r2, [pc, #32]	; (8009a08 <UART_SetConfig+0x2d4>)
 80099e8:	fba2 2303 	umull	r2, r3, r2, r3
 80099ec:	095b      	lsrs	r3, r3, #5
 80099ee:	f003 0207 	and.w	r2, r3, #7
 80099f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4422      	add	r2, r4
 80099fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80099fc:	e105      	b.n	8009c0a <UART_SetConfig+0x4d6>
 80099fe:	bf00      	nop
 8009a00:	40011000 	.word	0x40011000
 8009a04:	40011400 	.word	0x40011400
 8009a08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a10:	2200      	movs	r2, #0
 8009a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009a1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009a1e:	4642      	mov	r2, r8
 8009a20:	464b      	mov	r3, r9
 8009a22:	1891      	adds	r1, r2, r2
 8009a24:	6239      	str	r1, [r7, #32]
 8009a26:	415b      	adcs	r3, r3
 8009a28:	627b      	str	r3, [r7, #36]	; 0x24
 8009a2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a2e:	4641      	mov	r1, r8
 8009a30:	1854      	adds	r4, r2, r1
 8009a32:	4649      	mov	r1, r9
 8009a34:	eb43 0501 	adc.w	r5, r3, r1
 8009a38:	f04f 0200 	mov.w	r2, #0
 8009a3c:	f04f 0300 	mov.w	r3, #0
 8009a40:	00eb      	lsls	r3, r5, #3
 8009a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a46:	00e2      	lsls	r2, r4, #3
 8009a48:	4614      	mov	r4, r2
 8009a4a:	461d      	mov	r5, r3
 8009a4c:	4643      	mov	r3, r8
 8009a4e:	18e3      	adds	r3, r4, r3
 8009a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a54:	464b      	mov	r3, r9
 8009a56:	eb45 0303 	adc.w	r3, r5, r3
 8009a5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a6e:	f04f 0200 	mov.w	r2, #0
 8009a72:	f04f 0300 	mov.w	r3, #0
 8009a76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	008b      	lsls	r3, r1, #2
 8009a7e:	4621      	mov	r1, r4
 8009a80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a84:	4621      	mov	r1, r4
 8009a86:	008a      	lsls	r2, r1, #2
 8009a88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a8c:	f7f7 f8e4 	bl	8000c58 <__aeabi_uldivmod>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	4b60      	ldr	r3, [pc, #384]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009a96:	fba3 2302 	umull	r2, r3, r3, r2
 8009a9a:	095b      	lsrs	r3, r3, #5
 8009a9c:	011c      	lsls	r4, r3, #4
 8009a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009aa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009aac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	464b      	mov	r3, r9
 8009ab4:	1891      	adds	r1, r2, r2
 8009ab6:	61b9      	str	r1, [r7, #24]
 8009ab8:	415b      	adcs	r3, r3
 8009aba:	61fb      	str	r3, [r7, #28]
 8009abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ac0:	4641      	mov	r1, r8
 8009ac2:	1851      	adds	r1, r2, r1
 8009ac4:	6139      	str	r1, [r7, #16]
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	414b      	adcs	r3, r1
 8009aca:	617b      	str	r3, [r7, #20]
 8009acc:	f04f 0200 	mov.w	r2, #0
 8009ad0:	f04f 0300 	mov.w	r3, #0
 8009ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ad8:	4659      	mov	r1, fp
 8009ada:	00cb      	lsls	r3, r1, #3
 8009adc:	4651      	mov	r1, sl
 8009ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ae2:	4651      	mov	r1, sl
 8009ae4:	00ca      	lsls	r2, r1, #3
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4603      	mov	r3, r0
 8009aec:	4642      	mov	r2, r8
 8009aee:	189b      	adds	r3, r3, r2
 8009af0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009af4:	464b      	mov	r3, r9
 8009af6:	460a      	mov	r2, r1
 8009af8:	eb42 0303 	adc.w	r3, r2, r3
 8009afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009b0c:	f04f 0200 	mov.w	r2, #0
 8009b10:	f04f 0300 	mov.w	r3, #0
 8009b14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009b18:	4649      	mov	r1, r9
 8009b1a:	008b      	lsls	r3, r1, #2
 8009b1c:	4641      	mov	r1, r8
 8009b1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b22:	4641      	mov	r1, r8
 8009b24:	008a      	lsls	r2, r1, #2
 8009b26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009b2a:	f7f7 f895 	bl	8000c58 <__aeabi_uldivmod>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4b39      	ldr	r3, [pc, #228]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009b34:	fba3 1302 	umull	r1, r3, r3, r2
 8009b38:	095b      	lsrs	r3, r3, #5
 8009b3a:	2164      	movs	r1, #100	; 0x64
 8009b3c:	fb01 f303 	mul.w	r3, r1, r3
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	3332      	adds	r3, #50	; 0x32
 8009b46:	4a34      	ldr	r2, [pc, #208]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009b48:	fba2 2303 	umull	r2, r3, r2, r3
 8009b4c:	095b      	lsrs	r3, r3, #5
 8009b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b52:	441c      	add	r4, r3
 8009b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b58:	2200      	movs	r2, #0
 8009b5a:	673b      	str	r3, [r7, #112]	; 0x70
 8009b5c:	677a      	str	r2, [r7, #116]	; 0x74
 8009b5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009b62:	4642      	mov	r2, r8
 8009b64:	464b      	mov	r3, r9
 8009b66:	1891      	adds	r1, r2, r2
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	415b      	adcs	r3, r3
 8009b6c:	60fb      	str	r3, [r7, #12]
 8009b6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b72:	4641      	mov	r1, r8
 8009b74:	1851      	adds	r1, r2, r1
 8009b76:	6039      	str	r1, [r7, #0]
 8009b78:	4649      	mov	r1, r9
 8009b7a:	414b      	adcs	r3, r1
 8009b7c:	607b      	str	r3, [r7, #4]
 8009b7e:	f04f 0200 	mov.w	r2, #0
 8009b82:	f04f 0300 	mov.w	r3, #0
 8009b86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b8a:	4659      	mov	r1, fp
 8009b8c:	00cb      	lsls	r3, r1, #3
 8009b8e:	4651      	mov	r1, sl
 8009b90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b94:	4651      	mov	r1, sl
 8009b96:	00ca      	lsls	r2, r1, #3
 8009b98:	4610      	mov	r0, r2
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	4642      	mov	r2, r8
 8009ba0:	189b      	adds	r3, r3, r2
 8009ba2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ba4:	464b      	mov	r3, r9
 8009ba6:	460a      	mov	r2, r1
 8009ba8:	eb42 0303 	adc.w	r3, r2, r3
 8009bac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	663b      	str	r3, [r7, #96]	; 0x60
 8009bb8:	667a      	str	r2, [r7, #100]	; 0x64
 8009bba:	f04f 0200 	mov.w	r2, #0
 8009bbe:	f04f 0300 	mov.w	r3, #0
 8009bc2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009bc6:	4649      	mov	r1, r9
 8009bc8:	008b      	lsls	r3, r1, #2
 8009bca:	4641      	mov	r1, r8
 8009bcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bd0:	4641      	mov	r1, r8
 8009bd2:	008a      	lsls	r2, r1, #2
 8009bd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009bd8:	f7f7 f83e 	bl	8000c58 <__aeabi_uldivmod>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4b0d      	ldr	r3, [pc, #52]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009be2:	fba3 1302 	umull	r1, r3, r3, r2
 8009be6:	095b      	lsrs	r3, r3, #5
 8009be8:	2164      	movs	r1, #100	; 0x64
 8009bea:	fb01 f303 	mul.w	r3, r1, r3
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	011b      	lsls	r3, r3, #4
 8009bf2:	3332      	adds	r3, #50	; 0x32
 8009bf4:	4a08      	ldr	r2, [pc, #32]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfa:	095b      	lsrs	r3, r3, #5
 8009bfc:	f003 020f 	and.w	r2, r3, #15
 8009c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4422      	add	r2, r4
 8009c08:	609a      	str	r2, [r3, #8]
}
 8009c0a:	bf00      	nop
 8009c0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009c10:	46bd      	mov	sp, r7
 8009c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c16:	bf00      	nop
 8009c18:	51eb851f 	.word	0x51eb851f

08009c1c <_ZdlPvj>:
 8009c1c:	f000 b817 	b.w	8009c4e <_ZdlPv>

08009c20 <_Znwj>:
 8009c20:	2801      	cmp	r0, #1
 8009c22:	bf38      	it	cc
 8009c24:	2001      	movcc	r0, #1
 8009c26:	b510      	push	{r4, lr}
 8009c28:	4604      	mov	r4, r0
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f001 fbba 	bl	800b3a4 <malloc>
 8009c30:	b930      	cbnz	r0, 8009c40 <_Znwj+0x20>
 8009c32:	f000 f80f 	bl	8009c54 <_ZSt15get_new_handlerv>
 8009c36:	b908      	cbnz	r0, 8009c3c <_Znwj+0x1c>
 8009c38:	f001 fb83 	bl	800b342 <abort>
 8009c3c:	4780      	blx	r0
 8009c3e:	e7f4      	b.n	8009c2a <_Znwj+0xa>
 8009c40:	bd10      	pop	{r4, pc}

08009c42 <_ZSt17__throw_bad_allocv>:
 8009c42:	b508      	push	{r3, lr}
 8009c44:	f001 fb7d 	bl	800b342 <abort>

08009c48 <_ZSt20__throw_length_errorPKc>:
 8009c48:	b508      	push	{r3, lr}
 8009c4a:	f001 fb7a 	bl	800b342 <abort>

08009c4e <_ZdlPv>:
 8009c4e:	f001 bbb1 	b.w	800b3b4 <free>
	...

08009c54 <_ZSt15get_new_handlerv>:
 8009c54:	4b02      	ldr	r3, [pc, #8]	; (8009c60 <_ZSt15get_new_handlerv+0xc>)
 8009c56:	6818      	ldr	r0, [r3, #0]
 8009c58:	f3bf 8f5b 	dmb	ish
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	20000ac0 	.word	0x20000ac0
 8009c64:	00000000 	.word	0x00000000

08009c68 <cos>:
 8009c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c6a:	ec53 2b10 	vmov	r2, r3, d0
 8009c6e:	4826      	ldr	r0, [pc, #152]	; (8009d08 <cos+0xa0>)
 8009c70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c74:	4281      	cmp	r1, r0
 8009c76:	dc06      	bgt.n	8009c86 <cos+0x1e>
 8009c78:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009d00 <cos+0x98>
 8009c7c:	b005      	add	sp, #20
 8009c7e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c82:	f000 bb31 	b.w	800a2e8 <__kernel_cos>
 8009c86:	4821      	ldr	r0, [pc, #132]	; (8009d0c <cos+0xa4>)
 8009c88:	4281      	cmp	r1, r0
 8009c8a:	dd09      	ble.n	8009ca0 <cos+0x38>
 8009c8c:	ee10 0a10 	vmov	r0, s0
 8009c90:	4619      	mov	r1, r3
 8009c92:	f7f6 fb01 	bl	8000298 <__aeabi_dsub>
 8009c96:	ec41 0b10 	vmov	d0, r0, r1
 8009c9a:	b005      	add	sp, #20
 8009c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ca0:	4668      	mov	r0, sp
 8009ca2:	f000 f915 	bl	8009ed0 <__ieee754_rem_pio2>
 8009ca6:	f000 0003 	and.w	r0, r0, #3
 8009caa:	2801      	cmp	r0, #1
 8009cac:	d00b      	beq.n	8009cc6 <cos+0x5e>
 8009cae:	2802      	cmp	r0, #2
 8009cb0:	d016      	beq.n	8009ce0 <cos+0x78>
 8009cb2:	b9e0      	cbnz	r0, 8009cee <cos+0x86>
 8009cb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cb8:	ed9d 0b00 	vldr	d0, [sp]
 8009cbc:	f000 fb14 	bl	800a2e8 <__kernel_cos>
 8009cc0:	ec51 0b10 	vmov	r0, r1, d0
 8009cc4:	e7e7      	b.n	8009c96 <cos+0x2e>
 8009cc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cca:	ed9d 0b00 	vldr	d0, [sp]
 8009cce:	f000 ff23 	bl	800ab18 <__kernel_sin>
 8009cd2:	ec53 2b10 	vmov	r2, r3, d0
 8009cd6:	ee10 0a10 	vmov	r0, s0
 8009cda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009cde:	e7da      	b.n	8009c96 <cos+0x2e>
 8009ce0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ce4:	ed9d 0b00 	vldr	d0, [sp]
 8009ce8:	f000 fafe 	bl	800a2e8 <__kernel_cos>
 8009cec:	e7f1      	b.n	8009cd2 <cos+0x6a>
 8009cee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cf2:	ed9d 0b00 	vldr	d0, [sp]
 8009cf6:	2001      	movs	r0, #1
 8009cf8:	f000 ff0e 	bl	800ab18 <__kernel_sin>
 8009cfc:	e7e0      	b.n	8009cc0 <cos+0x58>
 8009cfe:	bf00      	nop
	...
 8009d08:	3fe921fb 	.word	0x3fe921fb
 8009d0c:	7fefffff 	.word	0x7fefffff

08009d10 <sin>:
 8009d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d12:	ec53 2b10 	vmov	r2, r3, d0
 8009d16:	4828      	ldr	r0, [pc, #160]	; (8009db8 <sin+0xa8>)
 8009d18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d1c:	4281      	cmp	r1, r0
 8009d1e:	dc07      	bgt.n	8009d30 <sin+0x20>
 8009d20:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009db0 <sin+0xa0>
 8009d24:	2000      	movs	r0, #0
 8009d26:	b005      	add	sp, #20
 8009d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d2c:	f000 bef4 	b.w	800ab18 <__kernel_sin>
 8009d30:	4822      	ldr	r0, [pc, #136]	; (8009dbc <sin+0xac>)
 8009d32:	4281      	cmp	r1, r0
 8009d34:	dd09      	ble.n	8009d4a <sin+0x3a>
 8009d36:	ee10 0a10 	vmov	r0, s0
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	f7f6 faac 	bl	8000298 <__aeabi_dsub>
 8009d40:	ec41 0b10 	vmov	d0, r0, r1
 8009d44:	b005      	add	sp, #20
 8009d46:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d4a:	4668      	mov	r0, sp
 8009d4c:	f000 f8c0 	bl	8009ed0 <__ieee754_rem_pio2>
 8009d50:	f000 0003 	and.w	r0, r0, #3
 8009d54:	2801      	cmp	r0, #1
 8009d56:	d00c      	beq.n	8009d72 <sin+0x62>
 8009d58:	2802      	cmp	r0, #2
 8009d5a:	d011      	beq.n	8009d80 <sin+0x70>
 8009d5c:	b9f0      	cbnz	r0, 8009d9c <sin+0x8c>
 8009d5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d62:	ed9d 0b00 	vldr	d0, [sp]
 8009d66:	2001      	movs	r0, #1
 8009d68:	f000 fed6 	bl	800ab18 <__kernel_sin>
 8009d6c:	ec51 0b10 	vmov	r0, r1, d0
 8009d70:	e7e6      	b.n	8009d40 <sin+0x30>
 8009d72:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d76:	ed9d 0b00 	vldr	d0, [sp]
 8009d7a:	f000 fab5 	bl	800a2e8 <__kernel_cos>
 8009d7e:	e7f5      	b.n	8009d6c <sin+0x5c>
 8009d80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d84:	ed9d 0b00 	vldr	d0, [sp]
 8009d88:	2001      	movs	r0, #1
 8009d8a:	f000 fec5 	bl	800ab18 <__kernel_sin>
 8009d8e:	ec53 2b10 	vmov	r2, r3, d0
 8009d92:	ee10 0a10 	vmov	r0, s0
 8009d96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009d9a:	e7d1      	b.n	8009d40 <sin+0x30>
 8009d9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009da0:	ed9d 0b00 	vldr	d0, [sp]
 8009da4:	f000 faa0 	bl	800a2e8 <__kernel_cos>
 8009da8:	e7f1      	b.n	8009d8e <sin+0x7e>
 8009daa:	bf00      	nop
 8009dac:	f3af 8000 	nop.w
	...
 8009db8:	3fe921fb 	.word	0x3fe921fb
 8009dbc:	7fefffff 	.word	0x7fefffff

08009dc0 <tanh>:
 8009dc0:	b5d0      	push	{r4, r6, r7, lr}
 8009dc2:	ec57 6b10 	vmov	r6, r7, d0
 8009dc6:	4a3d      	ldr	r2, [pc, #244]	; (8009ebc <tanh+0xfc>)
 8009dc8:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	463c      	mov	r4, r7
 8009dd0:	dd13      	ble.n	8009dfa <tanh+0x3a>
 8009dd2:	ee10 2a10 	vmov	r2, s0
 8009dd6:	463b      	mov	r3, r7
 8009dd8:	4939      	ldr	r1, [pc, #228]	; (8009ec0 <tanh+0x100>)
 8009dda:	2000      	movs	r0, #0
 8009ddc:	f7f6 fd3e 	bl	800085c <__aeabi_ddiv>
 8009de0:	2f00      	cmp	r7, #0
 8009de2:	4b37      	ldr	r3, [pc, #220]	; (8009ec0 <tanh+0x100>)
 8009de4:	f04f 0200 	mov.w	r2, #0
 8009de8:	db04      	blt.n	8009df4 <tanh+0x34>
 8009dea:	f7f6 fa57 	bl	800029c <__adddf3>
 8009dee:	ec41 0b10 	vmov	d0, r0, r1
 8009df2:	bdd0      	pop	{r4, r6, r7, pc}
 8009df4:	f7f6 fa50 	bl	8000298 <__aeabi_dsub>
 8009df8:	e7f9      	b.n	8009dee <tanh+0x2e>
 8009dfa:	4a32      	ldr	r2, [pc, #200]	; (8009ec4 <tanh+0x104>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	dc59      	bgt.n	8009eb4 <tanh+0xf4>
 8009e00:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 8009e04:	da0b      	bge.n	8009e1e <tanh+0x5e>
 8009e06:	4b2e      	ldr	r3, [pc, #184]	; (8009ec0 <tanh+0x100>)
 8009e08:	ee10 0a10 	vmov	r0, s0
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	4639      	mov	r1, r7
 8009e10:	f7f6 fa44 	bl	800029c <__adddf3>
 8009e14:	4632      	mov	r2, r6
 8009e16:	463b      	mov	r3, r7
 8009e18:	f7f6 fbf6 	bl	8000608 <__aeabi_dmul>
 8009e1c:	e7e7      	b.n	8009dee <tanh+0x2e>
 8009e1e:	4a2a      	ldr	r2, [pc, #168]	; (8009ec8 <tanh+0x108>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	dd28      	ble.n	8009e76 <tanh+0xb6>
 8009e24:	f001 f954 	bl	800b0d0 <fabs>
 8009e28:	ec53 2b10 	vmov	r2, r3, d0
 8009e2c:	ee10 0a10 	vmov	r0, s0
 8009e30:	4619      	mov	r1, r3
 8009e32:	f7f6 fa33 	bl	800029c <__adddf3>
 8009e36:	ec41 0b10 	vmov	d0, r0, r1
 8009e3a:	f000 ff2d 	bl	800ac98 <expm1>
 8009e3e:	2200      	movs	r2, #0
 8009e40:	ec51 0b10 	vmov	r0, r1, d0
 8009e44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e48:	f7f6 fa28 	bl	800029c <__adddf3>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	2000      	movs	r0, #0
 8009e52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009e56:	f7f6 fd01 	bl	800085c <__aeabi_ddiv>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	2000      	movs	r0, #0
 8009e60:	4917      	ldr	r1, [pc, #92]	; (8009ec0 <tanh+0x100>)
 8009e62:	f7f6 fa19 	bl	8000298 <__aeabi_dsub>
 8009e66:	2c00      	cmp	r4, #0
 8009e68:	bfbf      	itttt	lt
 8009e6a:	4602      	movlt	r2, r0
 8009e6c:	f101 4300 	addlt.w	r3, r1, #2147483648	; 0x80000000
 8009e70:	4610      	movlt	r0, r2
 8009e72:	4619      	movlt	r1, r3
 8009e74:	e7bb      	b.n	8009dee <tanh+0x2e>
 8009e76:	f001 f92b 	bl	800b0d0 <fabs>
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8009e80:	ec51 0b10 	vmov	r0, r1, d0
 8009e84:	f7f6 fbc0 	bl	8000608 <__aeabi_dmul>
 8009e88:	ec41 0b10 	vmov	d0, r0, r1
 8009e8c:	f000 ff04 	bl	800ac98 <expm1>
 8009e90:	ec51 0b10 	vmov	r0, r1, d0
 8009e94:	2200      	movs	r2, #0
 8009e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e9a:	ee10 6a10 	vmov	r6, s0
 8009e9e:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
 8009ea2:	f7f6 f9fb 	bl	800029c <__adddf3>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4630      	mov	r0, r6
 8009eac:	4639      	mov	r1, r7
 8009eae:	f7f6 fcd5 	bl	800085c <__aeabi_ddiv>
 8009eb2:	e7d8      	b.n	8009e66 <tanh+0xa6>
 8009eb4:	4902      	ldr	r1, [pc, #8]	; (8009ec0 <tanh+0x100>)
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	e7d5      	b.n	8009e66 <tanh+0xa6>
 8009eba:	bf00      	nop
 8009ebc:	7fefffff 	.word	0x7fefffff
 8009ec0:	3ff00000 	.word	0x3ff00000
 8009ec4:	4035ffff 	.word	0x4035ffff
 8009ec8:	3fefffff 	.word	0x3fefffff
 8009ecc:	00000000 	.word	0x00000000

08009ed0 <__ieee754_rem_pio2>:
 8009ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	ed2d 8b02 	vpush	{d8}
 8009ed8:	ec55 4b10 	vmov	r4, r5, d0
 8009edc:	4bca      	ldr	r3, [pc, #808]	; (800a208 <__ieee754_rem_pio2+0x338>)
 8009ede:	b08b      	sub	sp, #44	; 0x2c
 8009ee0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009ee4:	4598      	cmp	r8, r3
 8009ee6:	4682      	mov	sl, r0
 8009ee8:	9502      	str	r5, [sp, #8]
 8009eea:	dc08      	bgt.n	8009efe <__ieee754_rem_pio2+0x2e>
 8009eec:	2200      	movs	r2, #0
 8009eee:	2300      	movs	r3, #0
 8009ef0:	ed80 0b00 	vstr	d0, [r0]
 8009ef4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009ef8:	f04f 0b00 	mov.w	fp, #0
 8009efc:	e028      	b.n	8009f50 <__ieee754_rem_pio2+0x80>
 8009efe:	4bc3      	ldr	r3, [pc, #780]	; (800a20c <__ieee754_rem_pio2+0x33c>)
 8009f00:	4598      	cmp	r8, r3
 8009f02:	dc78      	bgt.n	8009ff6 <__ieee754_rem_pio2+0x126>
 8009f04:	9b02      	ldr	r3, [sp, #8]
 8009f06:	4ec2      	ldr	r6, [pc, #776]	; (800a210 <__ieee754_rem_pio2+0x340>)
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	ee10 0a10 	vmov	r0, s0
 8009f0e:	a3b0      	add	r3, pc, #704	; (adr r3, 800a1d0 <__ieee754_rem_pio2+0x300>)
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	4629      	mov	r1, r5
 8009f16:	dd39      	ble.n	8009f8c <__ieee754_rem_pio2+0xbc>
 8009f18:	f7f6 f9be 	bl	8000298 <__aeabi_dsub>
 8009f1c:	45b0      	cmp	r8, r6
 8009f1e:	4604      	mov	r4, r0
 8009f20:	460d      	mov	r5, r1
 8009f22:	d01b      	beq.n	8009f5c <__ieee754_rem_pio2+0x8c>
 8009f24:	a3ac      	add	r3, pc, #688	; (adr r3, 800a1d8 <__ieee754_rem_pio2+0x308>)
 8009f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2a:	f7f6 f9b5 	bl	8000298 <__aeabi_dsub>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	460b      	mov	r3, r1
 8009f32:	e9ca 2300 	strd	r2, r3, [sl]
 8009f36:	4620      	mov	r0, r4
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7f6 f9ad 	bl	8000298 <__aeabi_dsub>
 8009f3e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a1d8 <__ieee754_rem_pio2+0x308>)
 8009f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f44:	f7f6 f9a8 	bl	8000298 <__aeabi_dsub>
 8009f48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f4c:	f04f 0b01 	mov.w	fp, #1
 8009f50:	4658      	mov	r0, fp
 8009f52:	b00b      	add	sp, #44	; 0x2c
 8009f54:	ecbd 8b02 	vpop	{d8}
 8009f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5c:	a3a0      	add	r3, pc, #640	; (adr r3, 800a1e0 <__ieee754_rem_pio2+0x310>)
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	f7f6 f999 	bl	8000298 <__aeabi_dsub>
 8009f66:	a3a0      	add	r3, pc, #640	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x318>)
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	460d      	mov	r5, r1
 8009f70:	f7f6 f992 	bl	8000298 <__aeabi_dsub>
 8009f74:	4602      	mov	r2, r0
 8009f76:	460b      	mov	r3, r1
 8009f78:	e9ca 2300 	strd	r2, r3, [sl]
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	4629      	mov	r1, r5
 8009f80:	f7f6 f98a 	bl	8000298 <__aeabi_dsub>
 8009f84:	a398      	add	r3, pc, #608	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x318>)
 8009f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8a:	e7db      	b.n	8009f44 <__ieee754_rem_pio2+0x74>
 8009f8c:	f7f6 f986 	bl	800029c <__adddf3>
 8009f90:	45b0      	cmp	r8, r6
 8009f92:	4604      	mov	r4, r0
 8009f94:	460d      	mov	r5, r1
 8009f96:	d016      	beq.n	8009fc6 <__ieee754_rem_pio2+0xf6>
 8009f98:	a38f      	add	r3, pc, #572	; (adr r3, 800a1d8 <__ieee754_rem_pio2+0x308>)
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f7f6 f97d 	bl	800029c <__adddf3>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	e9ca 2300 	strd	r2, r3, [sl]
 8009faa:	4620      	mov	r0, r4
 8009fac:	4629      	mov	r1, r5
 8009fae:	f7f6 f973 	bl	8000298 <__aeabi_dsub>
 8009fb2:	a389      	add	r3, pc, #548	; (adr r3, 800a1d8 <__ieee754_rem_pio2+0x308>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f7f6 f970 	bl	800029c <__adddf3>
 8009fbc:	f04f 3bff 	mov.w	fp, #4294967295
 8009fc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009fc4:	e7c4      	b.n	8009f50 <__ieee754_rem_pio2+0x80>
 8009fc6:	a386      	add	r3, pc, #536	; (adr r3, 800a1e0 <__ieee754_rem_pio2+0x310>)
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	f7f6 f966 	bl	800029c <__adddf3>
 8009fd0:	a385      	add	r3, pc, #532	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x318>)
 8009fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	460d      	mov	r5, r1
 8009fda:	f7f6 f95f 	bl	800029c <__adddf3>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	e9ca 2300 	strd	r2, r3, [sl]
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7f6 f955 	bl	8000298 <__aeabi_dsub>
 8009fee:	a37e      	add	r3, pc, #504	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x318>)
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	e7e0      	b.n	8009fb8 <__ieee754_rem_pio2+0xe8>
 8009ff6:	4b87      	ldr	r3, [pc, #540]	; (800a214 <__ieee754_rem_pio2+0x344>)
 8009ff8:	4598      	cmp	r8, r3
 8009ffa:	f300 80d9 	bgt.w	800a1b0 <__ieee754_rem_pio2+0x2e0>
 8009ffe:	f001 f867 	bl	800b0d0 <fabs>
 800a002:	ec55 4b10 	vmov	r4, r5, d0
 800a006:	ee10 0a10 	vmov	r0, s0
 800a00a:	a379      	add	r3, pc, #484	; (adr r3, 800a1f0 <__ieee754_rem_pio2+0x320>)
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	4629      	mov	r1, r5
 800a012:	f7f6 faf9 	bl	8000608 <__aeabi_dmul>
 800a016:	4b80      	ldr	r3, [pc, #512]	; (800a218 <__ieee754_rem_pio2+0x348>)
 800a018:	2200      	movs	r2, #0
 800a01a:	f7f6 f93f 	bl	800029c <__adddf3>
 800a01e:	f7f6 fda3 	bl	8000b68 <__aeabi_d2iz>
 800a022:	4683      	mov	fp, r0
 800a024:	f7f6 fa86 	bl	8000534 <__aeabi_i2d>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	ec43 2b18 	vmov	d8, r2, r3
 800a030:	a367      	add	r3, pc, #412	; (adr r3, 800a1d0 <__ieee754_rem_pio2+0x300>)
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f7f6 fae7 	bl	8000608 <__aeabi_dmul>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	4620      	mov	r0, r4
 800a040:	4629      	mov	r1, r5
 800a042:	f7f6 f929 	bl	8000298 <__aeabi_dsub>
 800a046:	a364      	add	r3, pc, #400	; (adr r3, 800a1d8 <__ieee754_rem_pio2+0x308>)
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	4606      	mov	r6, r0
 800a04e:	460f      	mov	r7, r1
 800a050:	ec51 0b18 	vmov	r0, r1, d8
 800a054:	f7f6 fad8 	bl	8000608 <__aeabi_dmul>
 800a058:	f1bb 0f1f 	cmp.w	fp, #31
 800a05c:	4604      	mov	r4, r0
 800a05e:	460d      	mov	r5, r1
 800a060:	dc0d      	bgt.n	800a07e <__ieee754_rem_pio2+0x1ae>
 800a062:	4b6e      	ldr	r3, [pc, #440]	; (800a21c <__ieee754_rem_pio2+0x34c>)
 800a064:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a06c:	4543      	cmp	r3, r8
 800a06e:	d006      	beq.n	800a07e <__ieee754_rem_pio2+0x1ae>
 800a070:	4622      	mov	r2, r4
 800a072:	462b      	mov	r3, r5
 800a074:	4630      	mov	r0, r6
 800a076:	4639      	mov	r1, r7
 800a078:	f7f6 f90e 	bl	8000298 <__aeabi_dsub>
 800a07c:	e00f      	b.n	800a09e <__ieee754_rem_pio2+0x1ce>
 800a07e:	462b      	mov	r3, r5
 800a080:	4622      	mov	r2, r4
 800a082:	4630      	mov	r0, r6
 800a084:	4639      	mov	r1, r7
 800a086:	f7f6 f907 	bl	8000298 <__aeabi_dsub>
 800a08a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a08e:	9303      	str	r3, [sp, #12]
 800a090:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a094:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a098:	f1b8 0f10 	cmp.w	r8, #16
 800a09c:	dc02      	bgt.n	800a0a4 <__ieee754_rem_pio2+0x1d4>
 800a09e:	e9ca 0100 	strd	r0, r1, [sl]
 800a0a2:	e039      	b.n	800a118 <__ieee754_rem_pio2+0x248>
 800a0a4:	a34e      	add	r3, pc, #312	; (adr r3, 800a1e0 <__ieee754_rem_pio2+0x310>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	ec51 0b18 	vmov	r0, r1, d8
 800a0ae:	f7f6 faab 	bl	8000608 <__aeabi_dmul>
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	460d      	mov	r5, r1
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	4639      	mov	r1, r7
 800a0be:	f7f6 f8eb 	bl	8000298 <__aeabi_dsub>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	4680      	mov	r8, r0
 800a0c8:	4689      	mov	r9, r1
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	f7f6 f8e3 	bl	8000298 <__aeabi_dsub>
 800a0d2:	4622      	mov	r2, r4
 800a0d4:	462b      	mov	r3, r5
 800a0d6:	f7f6 f8df 	bl	8000298 <__aeabi_dsub>
 800a0da:	a343      	add	r3, pc, #268	; (adr r3, 800a1e8 <__ieee754_rem_pio2+0x318>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	460d      	mov	r5, r1
 800a0e4:	ec51 0b18 	vmov	r0, r1, d8
 800a0e8:	f7f6 fa8e 	bl	8000608 <__aeabi_dmul>
 800a0ec:	4622      	mov	r2, r4
 800a0ee:	462b      	mov	r3, r5
 800a0f0:	f7f6 f8d2 	bl	8000298 <__aeabi_dsub>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	460d      	mov	r5, r1
 800a0fc:	4640      	mov	r0, r8
 800a0fe:	4649      	mov	r1, r9
 800a100:	f7f6 f8ca 	bl	8000298 <__aeabi_dsub>
 800a104:	9a03      	ldr	r2, [sp, #12]
 800a106:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	2b31      	cmp	r3, #49	; 0x31
 800a10e:	dc24      	bgt.n	800a15a <__ieee754_rem_pio2+0x28a>
 800a110:	e9ca 0100 	strd	r0, r1, [sl]
 800a114:	4646      	mov	r6, r8
 800a116:	464f      	mov	r7, r9
 800a118:	e9da 8900 	ldrd	r8, r9, [sl]
 800a11c:	4630      	mov	r0, r6
 800a11e:	4642      	mov	r2, r8
 800a120:	464b      	mov	r3, r9
 800a122:	4639      	mov	r1, r7
 800a124:	f7f6 f8b8 	bl	8000298 <__aeabi_dsub>
 800a128:	462b      	mov	r3, r5
 800a12a:	4622      	mov	r2, r4
 800a12c:	f7f6 f8b4 	bl	8000298 <__aeabi_dsub>
 800a130:	9b02      	ldr	r3, [sp, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a138:	f6bf af0a 	bge.w	8009f50 <__ieee754_rem_pio2+0x80>
 800a13c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a140:	f8ca 3004 	str.w	r3, [sl, #4]
 800a144:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a148:	f8ca 8000 	str.w	r8, [sl]
 800a14c:	f8ca 0008 	str.w	r0, [sl, #8]
 800a150:	f8ca 300c 	str.w	r3, [sl, #12]
 800a154:	f1cb 0b00 	rsb	fp, fp, #0
 800a158:	e6fa      	b.n	8009f50 <__ieee754_rem_pio2+0x80>
 800a15a:	a327      	add	r3, pc, #156	; (adr r3, 800a1f8 <__ieee754_rem_pio2+0x328>)
 800a15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a160:	ec51 0b18 	vmov	r0, r1, d8
 800a164:	f7f6 fa50 	bl	8000608 <__aeabi_dmul>
 800a168:	4604      	mov	r4, r0
 800a16a:	460d      	mov	r5, r1
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	4640      	mov	r0, r8
 800a172:	4649      	mov	r1, r9
 800a174:	f7f6 f890 	bl	8000298 <__aeabi_dsub>
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	4606      	mov	r6, r0
 800a17e:	460f      	mov	r7, r1
 800a180:	4640      	mov	r0, r8
 800a182:	4649      	mov	r1, r9
 800a184:	f7f6 f888 	bl	8000298 <__aeabi_dsub>
 800a188:	4622      	mov	r2, r4
 800a18a:	462b      	mov	r3, r5
 800a18c:	f7f6 f884 	bl	8000298 <__aeabi_dsub>
 800a190:	a31b      	add	r3, pc, #108	; (adr r3, 800a200 <__ieee754_rem_pio2+0x330>)
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	4604      	mov	r4, r0
 800a198:	460d      	mov	r5, r1
 800a19a:	ec51 0b18 	vmov	r0, r1, d8
 800a19e:	f7f6 fa33 	bl	8000608 <__aeabi_dmul>
 800a1a2:	4622      	mov	r2, r4
 800a1a4:	462b      	mov	r3, r5
 800a1a6:	f7f6 f877 	bl	8000298 <__aeabi_dsub>
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	460d      	mov	r5, r1
 800a1ae:	e75f      	b.n	800a070 <__ieee754_rem_pio2+0x1a0>
 800a1b0:	4b1b      	ldr	r3, [pc, #108]	; (800a220 <__ieee754_rem_pio2+0x350>)
 800a1b2:	4598      	cmp	r8, r3
 800a1b4:	dd36      	ble.n	800a224 <__ieee754_rem_pio2+0x354>
 800a1b6:	ee10 2a10 	vmov	r2, s0
 800a1ba:	462b      	mov	r3, r5
 800a1bc:	4620      	mov	r0, r4
 800a1be:	4629      	mov	r1, r5
 800a1c0:	f7f6 f86a 	bl	8000298 <__aeabi_dsub>
 800a1c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a1c8:	e9ca 0100 	strd	r0, r1, [sl]
 800a1cc:	e694      	b.n	8009ef8 <__ieee754_rem_pio2+0x28>
 800a1ce:	bf00      	nop
 800a1d0:	54400000 	.word	0x54400000
 800a1d4:	3ff921fb 	.word	0x3ff921fb
 800a1d8:	1a626331 	.word	0x1a626331
 800a1dc:	3dd0b461 	.word	0x3dd0b461
 800a1e0:	1a600000 	.word	0x1a600000
 800a1e4:	3dd0b461 	.word	0x3dd0b461
 800a1e8:	2e037073 	.word	0x2e037073
 800a1ec:	3ba3198a 	.word	0x3ba3198a
 800a1f0:	6dc9c883 	.word	0x6dc9c883
 800a1f4:	3fe45f30 	.word	0x3fe45f30
 800a1f8:	2e000000 	.word	0x2e000000
 800a1fc:	3ba3198a 	.word	0x3ba3198a
 800a200:	252049c1 	.word	0x252049c1
 800a204:	397b839a 	.word	0x397b839a
 800a208:	3fe921fb 	.word	0x3fe921fb
 800a20c:	4002d97b 	.word	0x4002d97b
 800a210:	3ff921fb 	.word	0x3ff921fb
 800a214:	413921fb 	.word	0x413921fb
 800a218:	3fe00000 	.word	0x3fe00000
 800a21c:	0800dea4 	.word	0x0800dea4
 800a220:	7fefffff 	.word	0x7fefffff
 800a224:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a228:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a22c:	ee10 0a10 	vmov	r0, s0
 800a230:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a234:	ee10 6a10 	vmov	r6, s0
 800a238:	460f      	mov	r7, r1
 800a23a:	f7f6 fc95 	bl	8000b68 <__aeabi_d2iz>
 800a23e:	f7f6 f979 	bl	8000534 <__aeabi_i2d>
 800a242:	4602      	mov	r2, r0
 800a244:	460b      	mov	r3, r1
 800a246:	4630      	mov	r0, r6
 800a248:	4639      	mov	r1, r7
 800a24a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a24e:	f7f6 f823 	bl	8000298 <__aeabi_dsub>
 800a252:	4b23      	ldr	r3, [pc, #140]	; (800a2e0 <__ieee754_rem_pio2+0x410>)
 800a254:	2200      	movs	r2, #0
 800a256:	f7f6 f9d7 	bl	8000608 <__aeabi_dmul>
 800a25a:	460f      	mov	r7, r1
 800a25c:	4606      	mov	r6, r0
 800a25e:	f7f6 fc83 	bl	8000b68 <__aeabi_d2iz>
 800a262:	f7f6 f967 	bl	8000534 <__aeabi_i2d>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4630      	mov	r0, r6
 800a26c:	4639      	mov	r1, r7
 800a26e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a272:	f7f6 f811 	bl	8000298 <__aeabi_dsub>
 800a276:	4b1a      	ldr	r3, [pc, #104]	; (800a2e0 <__ieee754_rem_pio2+0x410>)
 800a278:	2200      	movs	r2, #0
 800a27a:	f7f6 f9c5 	bl	8000608 <__aeabi_dmul>
 800a27e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a282:	ad04      	add	r5, sp, #16
 800a284:	f04f 0803 	mov.w	r8, #3
 800a288:	46a9      	mov	r9, r5
 800a28a:	2600      	movs	r6, #0
 800a28c:	2700      	movs	r7, #0
 800a28e:	4632      	mov	r2, r6
 800a290:	463b      	mov	r3, r7
 800a292:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a296:	46c3      	mov	fp, r8
 800a298:	3d08      	subs	r5, #8
 800a29a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a29e:	f7f6 fc1b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d1f3      	bne.n	800a28e <__ieee754_rem_pio2+0x3be>
 800a2a6:	4b0f      	ldr	r3, [pc, #60]	; (800a2e4 <__ieee754_rem_pio2+0x414>)
 800a2a8:	9301      	str	r3, [sp, #4]
 800a2aa:	2302      	movs	r3, #2
 800a2ac:	9300      	str	r3, [sp, #0]
 800a2ae:	4622      	mov	r2, r4
 800a2b0:	465b      	mov	r3, fp
 800a2b2:	4651      	mov	r1, sl
 800a2b4:	4648      	mov	r0, r9
 800a2b6:	f000 f8df 	bl	800a478 <__kernel_rem_pio2>
 800a2ba:	9b02      	ldr	r3, [sp, #8]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	4683      	mov	fp, r0
 800a2c0:	f6bf ae46 	bge.w	8009f50 <__ieee754_rem_pio2+0x80>
 800a2c4:	e9da 2100 	ldrd	r2, r1, [sl]
 800a2c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2cc:	e9ca 2300 	strd	r2, r3, [sl]
 800a2d0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a2d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2d8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a2dc:	e73a      	b.n	800a154 <__ieee754_rem_pio2+0x284>
 800a2de:	bf00      	nop
 800a2e0:	41700000 	.word	0x41700000
 800a2e4:	0800df24 	.word	0x0800df24

0800a2e8 <__kernel_cos>:
 800a2e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	ec57 6b10 	vmov	r6, r7, d0
 800a2f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a2f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a2f8:	ed8d 1b00 	vstr	d1, [sp]
 800a2fc:	da07      	bge.n	800a30e <__kernel_cos+0x26>
 800a2fe:	ee10 0a10 	vmov	r0, s0
 800a302:	4639      	mov	r1, r7
 800a304:	f7f6 fc30 	bl	8000b68 <__aeabi_d2iz>
 800a308:	2800      	cmp	r0, #0
 800a30a:	f000 8088 	beq.w	800a41e <__kernel_cos+0x136>
 800a30e:	4632      	mov	r2, r6
 800a310:	463b      	mov	r3, r7
 800a312:	4630      	mov	r0, r6
 800a314:	4639      	mov	r1, r7
 800a316:	f7f6 f977 	bl	8000608 <__aeabi_dmul>
 800a31a:	4b51      	ldr	r3, [pc, #324]	; (800a460 <__kernel_cos+0x178>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	4604      	mov	r4, r0
 800a320:	460d      	mov	r5, r1
 800a322:	f7f6 f971 	bl	8000608 <__aeabi_dmul>
 800a326:	a340      	add	r3, pc, #256	; (adr r3, 800a428 <__kernel_cos+0x140>)
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	4682      	mov	sl, r0
 800a32e:	468b      	mov	fp, r1
 800a330:	4620      	mov	r0, r4
 800a332:	4629      	mov	r1, r5
 800a334:	f7f6 f968 	bl	8000608 <__aeabi_dmul>
 800a338:	a33d      	add	r3, pc, #244	; (adr r3, 800a430 <__kernel_cos+0x148>)
 800a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33e:	f7f5 ffad 	bl	800029c <__adddf3>
 800a342:	4622      	mov	r2, r4
 800a344:	462b      	mov	r3, r5
 800a346:	f7f6 f95f 	bl	8000608 <__aeabi_dmul>
 800a34a:	a33b      	add	r3, pc, #236	; (adr r3, 800a438 <__kernel_cos+0x150>)
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f7f5 ffa2 	bl	8000298 <__aeabi_dsub>
 800a354:	4622      	mov	r2, r4
 800a356:	462b      	mov	r3, r5
 800a358:	f7f6 f956 	bl	8000608 <__aeabi_dmul>
 800a35c:	a338      	add	r3, pc, #224	; (adr r3, 800a440 <__kernel_cos+0x158>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f5 ff9b 	bl	800029c <__adddf3>
 800a366:	4622      	mov	r2, r4
 800a368:	462b      	mov	r3, r5
 800a36a:	f7f6 f94d 	bl	8000608 <__aeabi_dmul>
 800a36e:	a336      	add	r3, pc, #216	; (adr r3, 800a448 <__kernel_cos+0x160>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f7f5 ff90 	bl	8000298 <__aeabi_dsub>
 800a378:	4622      	mov	r2, r4
 800a37a:	462b      	mov	r3, r5
 800a37c:	f7f6 f944 	bl	8000608 <__aeabi_dmul>
 800a380:	a333      	add	r3, pc, #204	; (adr r3, 800a450 <__kernel_cos+0x168>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f5 ff89 	bl	800029c <__adddf3>
 800a38a:	4622      	mov	r2, r4
 800a38c:	462b      	mov	r3, r5
 800a38e:	f7f6 f93b 	bl	8000608 <__aeabi_dmul>
 800a392:	4622      	mov	r2, r4
 800a394:	462b      	mov	r3, r5
 800a396:	f7f6 f937 	bl	8000608 <__aeabi_dmul>
 800a39a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a39e:	4604      	mov	r4, r0
 800a3a0:	460d      	mov	r5, r1
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	f7f6 f92f 	bl	8000608 <__aeabi_dmul>
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f7f5 ff71 	bl	8000298 <__aeabi_dsub>
 800a3b6:	4b2b      	ldr	r3, [pc, #172]	; (800a464 <__kernel_cos+0x17c>)
 800a3b8:	4598      	cmp	r8, r3
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	460f      	mov	r7, r1
 800a3be:	dc10      	bgt.n	800a3e2 <__kernel_cos+0xfa>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4650      	mov	r0, sl
 800a3c6:	4659      	mov	r1, fp
 800a3c8:	f7f5 ff66 	bl	8000298 <__aeabi_dsub>
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4926      	ldr	r1, [pc, #152]	; (800a468 <__kernel_cos+0x180>)
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	f7f5 ff60 	bl	8000298 <__aeabi_dsub>
 800a3d8:	ec41 0b10 	vmov	d0, r0, r1
 800a3dc:	b003      	add	sp, #12
 800a3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e2:	4b22      	ldr	r3, [pc, #136]	; (800a46c <__kernel_cos+0x184>)
 800a3e4:	4920      	ldr	r1, [pc, #128]	; (800a468 <__kernel_cos+0x180>)
 800a3e6:	4598      	cmp	r8, r3
 800a3e8:	bfcc      	ite	gt
 800a3ea:	4d21      	ldrgt	r5, [pc, #132]	; (800a470 <__kernel_cos+0x188>)
 800a3ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a3f0:	2400      	movs	r4, #0
 800a3f2:	4622      	mov	r2, r4
 800a3f4:	462b      	mov	r3, r5
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	f7f5 ff4e 	bl	8000298 <__aeabi_dsub>
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	4680      	mov	r8, r0
 800a400:	4689      	mov	r9, r1
 800a402:	462b      	mov	r3, r5
 800a404:	4650      	mov	r0, sl
 800a406:	4659      	mov	r1, fp
 800a408:	f7f5 ff46 	bl	8000298 <__aeabi_dsub>
 800a40c:	4632      	mov	r2, r6
 800a40e:	463b      	mov	r3, r7
 800a410:	f7f5 ff42 	bl	8000298 <__aeabi_dsub>
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	4640      	mov	r0, r8
 800a41a:	4649      	mov	r1, r9
 800a41c:	e7da      	b.n	800a3d4 <__kernel_cos+0xec>
 800a41e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a458 <__kernel_cos+0x170>
 800a422:	e7db      	b.n	800a3dc <__kernel_cos+0xf4>
 800a424:	f3af 8000 	nop.w
 800a428:	be8838d4 	.word	0xbe8838d4
 800a42c:	bda8fae9 	.word	0xbda8fae9
 800a430:	bdb4b1c4 	.word	0xbdb4b1c4
 800a434:	3e21ee9e 	.word	0x3e21ee9e
 800a438:	809c52ad 	.word	0x809c52ad
 800a43c:	3e927e4f 	.word	0x3e927e4f
 800a440:	19cb1590 	.word	0x19cb1590
 800a444:	3efa01a0 	.word	0x3efa01a0
 800a448:	16c15177 	.word	0x16c15177
 800a44c:	3f56c16c 	.word	0x3f56c16c
 800a450:	5555554c 	.word	0x5555554c
 800a454:	3fa55555 	.word	0x3fa55555
 800a458:	00000000 	.word	0x00000000
 800a45c:	3ff00000 	.word	0x3ff00000
 800a460:	3fe00000 	.word	0x3fe00000
 800a464:	3fd33332 	.word	0x3fd33332
 800a468:	3ff00000 	.word	0x3ff00000
 800a46c:	3fe90000 	.word	0x3fe90000
 800a470:	3fd20000 	.word	0x3fd20000
 800a474:	00000000 	.word	0x00000000

0800a478 <__kernel_rem_pio2>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	ed2d 8b02 	vpush	{d8}
 800a480:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a484:	f112 0f14 	cmn.w	r2, #20
 800a488:	9308      	str	r3, [sp, #32]
 800a48a:	9101      	str	r1, [sp, #4]
 800a48c:	4bc4      	ldr	r3, [pc, #784]	; (800a7a0 <__kernel_rem_pio2+0x328>)
 800a48e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a490:	900b      	str	r0, [sp, #44]	; 0x2c
 800a492:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a496:	9302      	str	r3, [sp, #8]
 800a498:	9b08      	ldr	r3, [sp, #32]
 800a49a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a49e:	bfa8      	it	ge
 800a4a0:	1ed4      	subge	r4, r2, #3
 800a4a2:	9306      	str	r3, [sp, #24]
 800a4a4:	bfb2      	itee	lt
 800a4a6:	2400      	movlt	r4, #0
 800a4a8:	2318      	movge	r3, #24
 800a4aa:	fb94 f4f3 	sdivge	r4, r4, r3
 800a4ae:	f06f 0317 	mvn.w	r3, #23
 800a4b2:	fb04 3303 	mla	r3, r4, r3, r3
 800a4b6:	eb03 0a02 	add.w	sl, r3, r2
 800a4ba:	9b02      	ldr	r3, [sp, #8]
 800a4bc:	9a06      	ldr	r2, [sp, #24]
 800a4be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a790 <__kernel_rem_pio2+0x318>
 800a4c2:	eb03 0802 	add.w	r8, r3, r2
 800a4c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a4c8:	1aa7      	subs	r7, r4, r2
 800a4ca:	ae22      	add	r6, sp, #136	; 0x88
 800a4cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a4d0:	2500      	movs	r5, #0
 800a4d2:	4545      	cmp	r5, r8
 800a4d4:	dd13      	ble.n	800a4fe <__kernel_rem_pio2+0x86>
 800a4d6:	9b08      	ldr	r3, [sp, #32]
 800a4d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a790 <__kernel_rem_pio2+0x318>
 800a4dc:	aa22      	add	r2, sp, #136	; 0x88
 800a4de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a4e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a4e6:	f04f 0800 	mov.w	r8, #0
 800a4ea:	9b02      	ldr	r3, [sp, #8]
 800a4ec:	4598      	cmp	r8, r3
 800a4ee:	dc2f      	bgt.n	800a550 <__kernel_rem_pio2+0xd8>
 800a4f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a4f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a4f8:	462f      	mov	r7, r5
 800a4fa:	2600      	movs	r6, #0
 800a4fc:	e01b      	b.n	800a536 <__kernel_rem_pio2+0xbe>
 800a4fe:	42ef      	cmn	r7, r5
 800a500:	d407      	bmi.n	800a512 <__kernel_rem_pio2+0x9a>
 800a502:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a506:	f7f6 f815 	bl	8000534 <__aeabi_i2d>
 800a50a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a50e:	3501      	adds	r5, #1
 800a510:	e7df      	b.n	800a4d2 <__kernel_rem_pio2+0x5a>
 800a512:	ec51 0b18 	vmov	r0, r1, d8
 800a516:	e7f8      	b.n	800a50a <__kernel_rem_pio2+0x92>
 800a518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a51c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a520:	f7f6 f872 	bl	8000608 <__aeabi_dmul>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a52c:	f7f5 feb6 	bl	800029c <__adddf3>
 800a530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a534:	3601      	adds	r6, #1
 800a536:	9b06      	ldr	r3, [sp, #24]
 800a538:	429e      	cmp	r6, r3
 800a53a:	f1a7 0708 	sub.w	r7, r7, #8
 800a53e:	ddeb      	ble.n	800a518 <__kernel_rem_pio2+0xa0>
 800a540:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a544:	f108 0801 	add.w	r8, r8, #1
 800a548:	ecab 7b02 	vstmia	fp!, {d7}
 800a54c:	3508      	adds	r5, #8
 800a54e:	e7cc      	b.n	800a4ea <__kernel_rem_pio2+0x72>
 800a550:	9b02      	ldr	r3, [sp, #8]
 800a552:	aa0e      	add	r2, sp, #56	; 0x38
 800a554:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a558:	930d      	str	r3, [sp, #52]	; 0x34
 800a55a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a55c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a560:	9c02      	ldr	r4, [sp, #8]
 800a562:	930c      	str	r3, [sp, #48]	; 0x30
 800a564:	00e3      	lsls	r3, r4, #3
 800a566:	930a      	str	r3, [sp, #40]	; 0x28
 800a568:	ab9a      	add	r3, sp, #616	; 0x268
 800a56a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a56e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a572:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a576:	ab72      	add	r3, sp, #456	; 0x1c8
 800a578:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a57c:	46c3      	mov	fp, r8
 800a57e:	46a1      	mov	r9, r4
 800a580:	f1b9 0f00 	cmp.w	r9, #0
 800a584:	f1a5 0508 	sub.w	r5, r5, #8
 800a588:	dc77      	bgt.n	800a67a <__kernel_rem_pio2+0x202>
 800a58a:	ec47 6b10 	vmov	d0, r6, r7
 800a58e:	4650      	mov	r0, sl
 800a590:	f000 fe2a 	bl	800b1e8 <scalbn>
 800a594:	ec57 6b10 	vmov	r6, r7, d0
 800a598:	2200      	movs	r2, #0
 800a59a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a59e:	ee10 0a10 	vmov	r0, s0
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	f7f6 f830 	bl	8000608 <__aeabi_dmul>
 800a5a8:	ec41 0b10 	vmov	d0, r0, r1
 800a5ac:	f000 fd9c 	bl	800b0e8 <floor>
 800a5b0:	4b7c      	ldr	r3, [pc, #496]	; (800a7a4 <__kernel_rem_pio2+0x32c>)
 800a5b2:	ec51 0b10 	vmov	r0, r1, d0
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f7f6 f826 	bl	8000608 <__aeabi_dmul>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7f5 fe68 	bl	8000298 <__aeabi_dsub>
 800a5c8:	460f      	mov	r7, r1
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	f7f6 facc 	bl	8000b68 <__aeabi_d2iz>
 800a5d0:	9004      	str	r0, [sp, #16]
 800a5d2:	f7f5 ffaf 	bl	8000534 <__aeabi_i2d>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4630      	mov	r0, r6
 800a5dc:	4639      	mov	r1, r7
 800a5de:	f7f5 fe5b 	bl	8000298 <__aeabi_dsub>
 800a5e2:	f1ba 0f00 	cmp.w	sl, #0
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	460f      	mov	r7, r1
 800a5ea:	dd6d      	ble.n	800a6c8 <__kernel_rem_pio2+0x250>
 800a5ec:	1e62      	subs	r2, r4, #1
 800a5ee:	ab0e      	add	r3, sp, #56	; 0x38
 800a5f0:	9d04      	ldr	r5, [sp, #16]
 800a5f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a5f6:	f1ca 0118 	rsb	r1, sl, #24
 800a5fa:	fa40 f301 	asr.w	r3, r0, r1
 800a5fe:	441d      	add	r5, r3
 800a600:	408b      	lsls	r3, r1
 800a602:	1ac0      	subs	r0, r0, r3
 800a604:	ab0e      	add	r3, sp, #56	; 0x38
 800a606:	9504      	str	r5, [sp, #16]
 800a608:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a60c:	f1ca 0317 	rsb	r3, sl, #23
 800a610:	fa40 fb03 	asr.w	fp, r0, r3
 800a614:	f1bb 0f00 	cmp.w	fp, #0
 800a618:	dd65      	ble.n	800a6e6 <__kernel_rem_pio2+0x26e>
 800a61a:	9b04      	ldr	r3, [sp, #16]
 800a61c:	2200      	movs	r2, #0
 800a61e:	3301      	adds	r3, #1
 800a620:	9304      	str	r3, [sp, #16]
 800a622:	4615      	mov	r5, r2
 800a624:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a628:	4294      	cmp	r4, r2
 800a62a:	f300 809c 	bgt.w	800a766 <__kernel_rem_pio2+0x2ee>
 800a62e:	f1ba 0f00 	cmp.w	sl, #0
 800a632:	dd07      	ble.n	800a644 <__kernel_rem_pio2+0x1cc>
 800a634:	f1ba 0f01 	cmp.w	sl, #1
 800a638:	f000 80c0 	beq.w	800a7bc <__kernel_rem_pio2+0x344>
 800a63c:	f1ba 0f02 	cmp.w	sl, #2
 800a640:	f000 80c6 	beq.w	800a7d0 <__kernel_rem_pio2+0x358>
 800a644:	f1bb 0f02 	cmp.w	fp, #2
 800a648:	d14d      	bne.n	800a6e6 <__kernel_rem_pio2+0x26e>
 800a64a:	4632      	mov	r2, r6
 800a64c:	463b      	mov	r3, r7
 800a64e:	4956      	ldr	r1, [pc, #344]	; (800a7a8 <__kernel_rem_pio2+0x330>)
 800a650:	2000      	movs	r0, #0
 800a652:	f7f5 fe21 	bl	8000298 <__aeabi_dsub>
 800a656:	4606      	mov	r6, r0
 800a658:	460f      	mov	r7, r1
 800a65a:	2d00      	cmp	r5, #0
 800a65c:	d043      	beq.n	800a6e6 <__kernel_rem_pio2+0x26e>
 800a65e:	4650      	mov	r0, sl
 800a660:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a798 <__kernel_rem_pio2+0x320>
 800a664:	f000 fdc0 	bl	800b1e8 <scalbn>
 800a668:	4630      	mov	r0, r6
 800a66a:	4639      	mov	r1, r7
 800a66c:	ec53 2b10 	vmov	r2, r3, d0
 800a670:	f7f5 fe12 	bl	8000298 <__aeabi_dsub>
 800a674:	4606      	mov	r6, r0
 800a676:	460f      	mov	r7, r1
 800a678:	e035      	b.n	800a6e6 <__kernel_rem_pio2+0x26e>
 800a67a:	4b4c      	ldr	r3, [pc, #304]	; (800a7ac <__kernel_rem_pio2+0x334>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	4630      	mov	r0, r6
 800a680:	4639      	mov	r1, r7
 800a682:	f7f5 ffc1 	bl	8000608 <__aeabi_dmul>
 800a686:	f7f6 fa6f 	bl	8000b68 <__aeabi_d2iz>
 800a68a:	f7f5 ff53 	bl	8000534 <__aeabi_i2d>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	ec43 2b18 	vmov	d8, r2, r3
 800a696:	4b46      	ldr	r3, [pc, #280]	; (800a7b0 <__kernel_rem_pio2+0x338>)
 800a698:	2200      	movs	r2, #0
 800a69a:	f7f5 ffb5 	bl	8000608 <__aeabi_dmul>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	f7f5 fdf7 	bl	8000298 <__aeabi_dsub>
 800a6aa:	f7f6 fa5d 	bl	8000b68 <__aeabi_d2iz>
 800a6ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6b2:	f84b 0b04 	str.w	r0, [fp], #4
 800a6b6:	ec51 0b18 	vmov	r0, r1, d8
 800a6ba:	f7f5 fdef 	bl	800029c <__adddf3>
 800a6be:	f109 39ff 	add.w	r9, r9, #4294967295
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	460f      	mov	r7, r1
 800a6c6:	e75b      	b.n	800a580 <__kernel_rem_pio2+0x108>
 800a6c8:	d106      	bne.n	800a6d8 <__kernel_rem_pio2+0x260>
 800a6ca:	1e63      	subs	r3, r4, #1
 800a6cc:	aa0e      	add	r2, sp, #56	; 0x38
 800a6ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a6d2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a6d6:	e79d      	b.n	800a614 <__kernel_rem_pio2+0x19c>
 800a6d8:	4b36      	ldr	r3, [pc, #216]	; (800a7b4 <__kernel_rem_pio2+0x33c>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f7f6 fa1a 	bl	8000b14 <__aeabi_dcmpge>
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d13d      	bne.n	800a760 <__kernel_rem_pio2+0x2e8>
 800a6e4:	4683      	mov	fp, r0
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	4639      	mov	r1, r7
 800a6ee:	f7f6 f9f3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	f000 80c0 	beq.w	800a878 <__kernel_rem_pio2+0x400>
 800a6f8:	1e65      	subs	r5, r4, #1
 800a6fa:	462b      	mov	r3, r5
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	9902      	ldr	r1, [sp, #8]
 800a700:	428b      	cmp	r3, r1
 800a702:	da6c      	bge.n	800a7de <__kernel_rem_pio2+0x366>
 800a704:	2a00      	cmp	r2, #0
 800a706:	f000 8089 	beq.w	800a81c <__kernel_rem_pio2+0x3a4>
 800a70a:	ab0e      	add	r3, sp, #56	; 0x38
 800a70c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a710:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 80ad 	beq.w	800a874 <__kernel_rem_pio2+0x3fc>
 800a71a:	4650      	mov	r0, sl
 800a71c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a798 <__kernel_rem_pio2+0x320>
 800a720:	f000 fd62 	bl	800b1e8 <scalbn>
 800a724:	ab9a      	add	r3, sp, #616	; 0x268
 800a726:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a72a:	ec57 6b10 	vmov	r6, r7, d0
 800a72e:	00ec      	lsls	r4, r5, #3
 800a730:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a734:	46aa      	mov	sl, r5
 800a736:	f1ba 0f00 	cmp.w	sl, #0
 800a73a:	f280 80d6 	bge.w	800a8ea <__kernel_rem_pio2+0x472>
 800a73e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a790 <__kernel_rem_pio2+0x318>
 800a742:	462e      	mov	r6, r5
 800a744:	2e00      	cmp	r6, #0
 800a746:	f2c0 8104 	blt.w	800a952 <__kernel_rem_pio2+0x4da>
 800a74a:	ab72      	add	r3, sp, #456	; 0x1c8
 800a74c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a750:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a7b8 <__kernel_rem_pio2+0x340>
 800a754:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a758:	f04f 0800 	mov.w	r8, #0
 800a75c:	1baf      	subs	r7, r5, r6
 800a75e:	e0ea      	b.n	800a936 <__kernel_rem_pio2+0x4be>
 800a760:	f04f 0b02 	mov.w	fp, #2
 800a764:	e759      	b.n	800a61a <__kernel_rem_pio2+0x1a2>
 800a766:	f8d8 3000 	ldr.w	r3, [r8]
 800a76a:	b955      	cbnz	r5, 800a782 <__kernel_rem_pio2+0x30a>
 800a76c:	b123      	cbz	r3, 800a778 <__kernel_rem_pio2+0x300>
 800a76e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a772:	f8c8 3000 	str.w	r3, [r8]
 800a776:	2301      	movs	r3, #1
 800a778:	3201      	adds	r2, #1
 800a77a:	f108 0804 	add.w	r8, r8, #4
 800a77e:	461d      	mov	r5, r3
 800a780:	e752      	b.n	800a628 <__kernel_rem_pio2+0x1b0>
 800a782:	1acb      	subs	r3, r1, r3
 800a784:	f8c8 3000 	str.w	r3, [r8]
 800a788:	462b      	mov	r3, r5
 800a78a:	e7f5      	b.n	800a778 <__kernel_rem_pio2+0x300>
 800a78c:	f3af 8000 	nop.w
	...
 800a79c:	3ff00000 	.word	0x3ff00000
 800a7a0:	0800e070 	.word	0x0800e070
 800a7a4:	40200000 	.word	0x40200000
 800a7a8:	3ff00000 	.word	0x3ff00000
 800a7ac:	3e700000 	.word	0x3e700000
 800a7b0:	41700000 	.word	0x41700000
 800a7b4:	3fe00000 	.word	0x3fe00000
 800a7b8:	0800e030 	.word	0x0800e030
 800a7bc:	1e62      	subs	r2, r4, #1
 800a7be:	ab0e      	add	r3, sp, #56	; 0x38
 800a7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a7c8:	a90e      	add	r1, sp, #56	; 0x38
 800a7ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a7ce:	e739      	b.n	800a644 <__kernel_rem_pio2+0x1cc>
 800a7d0:	1e62      	subs	r2, r4, #1
 800a7d2:	ab0e      	add	r3, sp, #56	; 0x38
 800a7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a7dc:	e7f4      	b.n	800a7c8 <__kernel_rem_pio2+0x350>
 800a7de:	a90e      	add	r1, sp, #56	; 0x38
 800a7e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	e789      	b.n	800a6fe <__kernel_rem_pio2+0x286>
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a7f0:	2900      	cmp	r1, #0
 800a7f2:	d0fa      	beq.n	800a7ea <__kernel_rem_pio2+0x372>
 800a7f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7f6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a7fa:	446a      	add	r2, sp
 800a7fc:	3a98      	subs	r2, #152	; 0x98
 800a7fe:	920a      	str	r2, [sp, #40]	; 0x28
 800a800:	9a08      	ldr	r2, [sp, #32]
 800a802:	18e3      	adds	r3, r4, r3
 800a804:	18a5      	adds	r5, r4, r2
 800a806:	aa22      	add	r2, sp, #136	; 0x88
 800a808:	f104 0801 	add.w	r8, r4, #1
 800a80c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a810:	9304      	str	r3, [sp, #16]
 800a812:	9b04      	ldr	r3, [sp, #16]
 800a814:	4543      	cmp	r3, r8
 800a816:	da04      	bge.n	800a822 <__kernel_rem_pio2+0x3aa>
 800a818:	461c      	mov	r4, r3
 800a81a:	e6a3      	b.n	800a564 <__kernel_rem_pio2+0xec>
 800a81c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a81e:	2301      	movs	r3, #1
 800a820:	e7e4      	b.n	800a7ec <__kernel_rem_pio2+0x374>
 800a822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a824:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a828:	f7f5 fe84 	bl	8000534 <__aeabi_i2d>
 800a82c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a832:	46ab      	mov	fp, r5
 800a834:	461c      	mov	r4, r3
 800a836:	f04f 0900 	mov.w	r9, #0
 800a83a:	2600      	movs	r6, #0
 800a83c:	2700      	movs	r7, #0
 800a83e:	9b06      	ldr	r3, [sp, #24]
 800a840:	4599      	cmp	r9, r3
 800a842:	dd06      	ble.n	800a852 <__kernel_rem_pio2+0x3da>
 800a844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a846:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a84a:	f108 0801 	add.w	r8, r8, #1
 800a84e:	930a      	str	r3, [sp, #40]	; 0x28
 800a850:	e7df      	b.n	800a812 <__kernel_rem_pio2+0x39a>
 800a852:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a856:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a85a:	f7f5 fed5 	bl	8000608 <__aeabi_dmul>
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	4630      	mov	r0, r6
 800a864:	4639      	mov	r1, r7
 800a866:	f7f5 fd19 	bl	800029c <__adddf3>
 800a86a:	f109 0901 	add.w	r9, r9, #1
 800a86e:	4606      	mov	r6, r0
 800a870:	460f      	mov	r7, r1
 800a872:	e7e4      	b.n	800a83e <__kernel_rem_pio2+0x3c6>
 800a874:	3d01      	subs	r5, #1
 800a876:	e748      	b.n	800a70a <__kernel_rem_pio2+0x292>
 800a878:	ec47 6b10 	vmov	d0, r6, r7
 800a87c:	f1ca 0000 	rsb	r0, sl, #0
 800a880:	f000 fcb2 	bl	800b1e8 <scalbn>
 800a884:	ec57 6b10 	vmov	r6, r7, d0
 800a888:	4ba0      	ldr	r3, [pc, #640]	; (800ab0c <__kernel_rem_pio2+0x694>)
 800a88a:	ee10 0a10 	vmov	r0, s0
 800a88e:	2200      	movs	r2, #0
 800a890:	4639      	mov	r1, r7
 800a892:	f7f6 f93f 	bl	8000b14 <__aeabi_dcmpge>
 800a896:	b1f8      	cbz	r0, 800a8d8 <__kernel_rem_pio2+0x460>
 800a898:	4b9d      	ldr	r3, [pc, #628]	; (800ab10 <__kernel_rem_pio2+0x698>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f7f5 feb2 	bl	8000608 <__aeabi_dmul>
 800a8a4:	f7f6 f960 	bl	8000b68 <__aeabi_d2iz>
 800a8a8:	4680      	mov	r8, r0
 800a8aa:	f7f5 fe43 	bl	8000534 <__aeabi_i2d>
 800a8ae:	4b97      	ldr	r3, [pc, #604]	; (800ab0c <__kernel_rem_pio2+0x694>)
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f7f5 fea9 	bl	8000608 <__aeabi_dmul>
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7f5 fceb 	bl	8000298 <__aeabi_dsub>
 800a8c2:	f7f6 f951 	bl	8000b68 <__aeabi_d2iz>
 800a8c6:	1c65      	adds	r5, r4, #1
 800a8c8:	ab0e      	add	r3, sp, #56	; 0x38
 800a8ca:	f10a 0a18 	add.w	sl, sl, #24
 800a8ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a8d2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a8d6:	e720      	b.n	800a71a <__kernel_rem_pio2+0x2a2>
 800a8d8:	4630      	mov	r0, r6
 800a8da:	4639      	mov	r1, r7
 800a8dc:	f7f6 f944 	bl	8000b68 <__aeabi_d2iz>
 800a8e0:	ab0e      	add	r3, sp, #56	; 0x38
 800a8e2:	4625      	mov	r5, r4
 800a8e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a8e8:	e717      	b.n	800a71a <__kernel_rem_pio2+0x2a2>
 800a8ea:	ab0e      	add	r3, sp, #56	; 0x38
 800a8ec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a8f0:	f7f5 fe20 	bl	8000534 <__aeabi_i2d>
 800a8f4:	4632      	mov	r2, r6
 800a8f6:	463b      	mov	r3, r7
 800a8f8:	f7f5 fe86 	bl	8000608 <__aeabi_dmul>
 800a8fc:	4b84      	ldr	r3, [pc, #528]	; (800ab10 <__kernel_rem_pio2+0x698>)
 800a8fe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a902:	2200      	movs	r2, #0
 800a904:	4630      	mov	r0, r6
 800a906:	4639      	mov	r1, r7
 800a908:	f7f5 fe7e 	bl	8000608 <__aeabi_dmul>
 800a90c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a910:	4606      	mov	r6, r0
 800a912:	460f      	mov	r7, r1
 800a914:	e70f      	b.n	800a736 <__kernel_rem_pio2+0x2be>
 800a916:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a91a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a91e:	f7f5 fe73 	bl	8000608 <__aeabi_dmul>
 800a922:	4602      	mov	r2, r0
 800a924:	460b      	mov	r3, r1
 800a926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a92a:	f7f5 fcb7 	bl	800029c <__adddf3>
 800a92e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a932:	f108 0801 	add.w	r8, r8, #1
 800a936:	9b02      	ldr	r3, [sp, #8]
 800a938:	4598      	cmp	r8, r3
 800a93a:	dc01      	bgt.n	800a940 <__kernel_rem_pio2+0x4c8>
 800a93c:	45b8      	cmp	r8, r7
 800a93e:	ddea      	ble.n	800a916 <__kernel_rem_pio2+0x49e>
 800a940:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a944:	ab4a      	add	r3, sp, #296	; 0x128
 800a946:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a94a:	ed87 7b00 	vstr	d7, [r7]
 800a94e:	3e01      	subs	r6, #1
 800a950:	e6f8      	b.n	800a744 <__kernel_rem_pio2+0x2cc>
 800a952:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a954:	2b02      	cmp	r3, #2
 800a956:	dc0b      	bgt.n	800a970 <__kernel_rem_pio2+0x4f8>
 800a958:	2b00      	cmp	r3, #0
 800a95a:	dc35      	bgt.n	800a9c8 <__kernel_rem_pio2+0x550>
 800a95c:	d059      	beq.n	800aa12 <__kernel_rem_pio2+0x59a>
 800a95e:	9b04      	ldr	r3, [sp, #16]
 800a960:	f003 0007 	and.w	r0, r3, #7
 800a964:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a968:	ecbd 8b02 	vpop	{d8}
 800a96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a970:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a972:	2b03      	cmp	r3, #3
 800a974:	d1f3      	bne.n	800a95e <__kernel_rem_pio2+0x4e6>
 800a976:	ab4a      	add	r3, sp, #296	; 0x128
 800a978:	4423      	add	r3, r4
 800a97a:	9306      	str	r3, [sp, #24]
 800a97c:	461c      	mov	r4, r3
 800a97e:	469a      	mov	sl, r3
 800a980:	9502      	str	r5, [sp, #8]
 800a982:	9b02      	ldr	r3, [sp, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f1aa 0a08 	sub.w	sl, sl, #8
 800a98a:	dc6b      	bgt.n	800aa64 <__kernel_rem_pio2+0x5ec>
 800a98c:	46aa      	mov	sl, r5
 800a98e:	f1ba 0f01 	cmp.w	sl, #1
 800a992:	f1a4 0408 	sub.w	r4, r4, #8
 800a996:	f300 8085 	bgt.w	800aaa4 <__kernel_rem_pio2+0x62c>
 800a99a:	9c06      	ldr	r4, [sp, #24]
 800a99c:	2000      	movs	r0, #0
 800a99e:	3408      	adds	r4, #8
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	2d01      	cmp	r5, #1
 800a9a4:	f300 809d 	bgt.w	800aae2 <__kernel_rem_pio2+0x66a>
 800a9a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a9ac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a9b0:	f1bb 0f00 	cmp.w	fp, #0
 800a9b4:	f040 809b 	bne.w	800aaee <__kernel_rem_pio2+0x676>
 800a9b8:	9b01      	ldr	r3, [sp, #4]
 800a9ba:	e9c3 5600 	strd	r5, r6, [r3]
 800a9be:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a9c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a9c6:	e7ca      	b.n	800a95e <__kernel_rem_pio2+0x4e6>
 800a9c8:	3408      	adds	r4, #8
 800a9ca:	ab4a      	add	r3, sp, #296	; 0x128
 800a9cc:	441c      	add	r4, r3
 800a9ce:	462e      	mov	r6, r5
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	2e00      	cmp	r6, #0
 800a9d6:	da36      	bge.n	800aa46 <__kernel_rem_pio2+0x5ce>
 800a9d8:	f1bb 0f00 	cmp.w	fp, #0
 800a9dc:	d039      	beq.n	800aa52 <__kernel_rem_pio2+0x5da>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9e4:	9c01      	ldr	r4, [sp, #4]
 800a9e6:	e9c4 2300 	strd	r2, r3, [r4]
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a9f2:	f7f5 fc51 	bl	8000298 <__aeabi_dsub>
 800a9f6:	ae4c      	add	r6, sp, #304	; 0x130
 800a9f8:	2401      	movs	r4, #1
 800a9fa:	42a5      	cmp	r5, r4
 800a9fc:	da2c      	bge.n	800aa58 <__kernel_rem_pio2+0x5e0>
 800a9fe:	f1bb 0f00 	cmp.w	fp, #0
 800aa02:	d002      	beq.n	800aa0a <__kernel_rem_pio2+0x592>
 800aa04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa08:	4619      	mov	r1, r3
 800aa0a:	9b01      	ldr	r3, [sp, #4]
 800aa0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aa10:	e7a5      	b.n	800a95e <__kernel_rem_pio2+0x4e6>
 800aa12:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800aa16:	eb0d 0403 	add.w	r4, sp, r3
 800aa1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800aa1e:	2000      	movs	r0, #0
 800aa20:	2100      	movs	r1, #0
 800aa22:	2d00      	cmp	r5, #0
 800aa24:	da09      	bge.n	800aa3a <__kernel_rem_pio2+0x5c2>
 800aa26:	f1bb 0f00 	cmp.w	fp, #0
 800aa2a:	d002      	beq.n	800aa32 <__kernel_rem_pio2+0x5ba>
 800aa2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa30:	4619      	mov	r1, r3
 800aa32:	9b01      	ldr	r3, [sp, #4]
 800aa34:	e9c3 0100 	strd	r0, r1, [r3]
 800aa38:	e791      	b.n	800a95e <__kernel_rem_pio2+0x4e6>
 800aa3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa3e:	f7f5 fc2d 	bl	800029c <__adddf3>
 800aa42:	3d01      	subs	r5, #1
 800aa44:	e7ed      	b.n	800aa22 <__kernel_rem_pio2+0x5aa>
 800aa46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa4a:	f7f5 fc27 	bl	800029c <__adddf3>
 800aa4e:	3e01      	subs	r6, #1
 800aa50:	e7c0      	b.n	800a9d4 <__kernel_rem_pio2+0x55c>
 800aa52:	4602      	mov	r2, r0
 800aa54:	460b      	mov	r3, r1
 800aa56:	e7c5      	b.n	800a9e4 <__kernel_rem_pio2+0x56c>
 800aa58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800aa5c:	f7f5 fc1e 	bl	800029c <__adddf3>
 800aa60:	3401      	adds	r4, #1
 800aa62:	e7ca      	b.n	800a9fa <__kernel_rem_pio2+0x582>
 800aa64:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800aa6c:	9b02      	ldr	r3, [sp, #8]
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	9302      	str	r3, [sp, #8]
 800aa72:	4632      	mov	r2, r6
 800aa74:	463b      	mov	r3, r7
 800aa76:	4640      	mov	r0, r8
 800aa78:	4649      	mov	r1, r9
 800aa7a:	f7f5 fc0f 	bl	800029c <__adddf3>
 800aa7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4640      	mov	r0, r8
 800aa88:	4649      	mov	r1, r9
 800aa8a:	f7f5 fc05 	bl	8000298 <__aeabi_dsub>
 800aa8e:	4632      	mov	r2, r6
 800aa90:	463b      	mov	r3, r7
 800aa92:	f7f5 fc03 	bl	800029c <__adddf3>
 800aa96:	ed9d 7b08 	vldr	d7, [sp, #32]
 800aa9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa9e:	ed8a 7b00 	vstr	d7, [sl]
 800aaa2:	e76e      	b.n	800a982 <__kernel_rem_pio2+0x50a>
 800aaa4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aaa8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800aaac:	4640      	mov	r0, r8
 800aaae:	4632      	mov	r2, r6
 800aab0:	463b      	mov	r3, r7
 800aab2:	4649      	mov	r1, r9
 800aab4:	f7f5 fbf2 	bl	800029c <__adddf3>
 800aab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	4640      	mov	r0, r8
 800aac2:	4649      	mov	r1, r9
 800aac4:	f7f5 fbe8 	bl	8000298 <__aeabi_dsub>
 800aac8:	4632      	mov	r2, r6
 800aaca:	463b      	mov	r3, r7
 800aacc:	f7f5 fbe6 	bl	800029c <__adddf3>
 800aad0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aad4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aad8:	ed84 7b00 	vstr	d7, [r4]
 800aadc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aae0:	e755      	b.n	800a98e <__kernel_rem_pio2+0x516>
 800aae2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aae6:	f7f5 fbd9 	bl	800029c <__adddf3>
 800aaea:	3d01      	subs	r5, #1
 800aaec:	e759      	b.n	800a9a2 <__kernel_rem_pio2+0x52a>
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	9a01      	ldr	r2, [sp, #4]
 800aaf2:	601d      	str	r5, [r3, #0]
 800aaf4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800aaf8:	605c      	str	r4, [r3, #4]
 800aafa:	609f      	str	r7, [r3, #8]
 800aafc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ab00:	60d3      	str	r3, [r2, #12]
 800ab02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab06:	6110      	str	r0, [r2, #16]
 800ab08:	6153      	str	r3, [r2, #20]
 800ab0a:	e728      	b.n	800a95e <__kernel_rem_pio2+0x4e6>
 800ab0c:	41700000 	.word	0x41700000
 800ab10:	3e700000 	.word	0x3e700000
 800ab14:	00000000 	.word	0x00000000

0800ab18 <__kernel_sin>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	ed2d 8b04 	vpush	{d8-d9}
 800ab20:	eeb0 8a41 	vmov.f32	s16, s2
 800ab24:	eef0 8a61 	vmov.f32	s17, s3
 800ab28:	ec55 4b10 	vmov	r4, r5, d0
 800ab2c:	b083      	sub	sp, #12
 800ab2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ab32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ab36:	9001      	str	r0, [sp, #4]
 800ab38:	da06      	bge.n	800ab48 <__kernel_sin+0x30>
 800ab3a:	ee10 0a10 	vmov	r0, s0
 800ab3e:	4629      	mov	r1, r5
 800ab40:	f7f6 f812 	bl	8000b68 <__aeabi_d2iz>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d051      	beq.n	800abec <__kernel_sin+0xd4>
 800ab48:	4622      	mov	r2, r4
 800ab4a:	462b      	mov	r3, r5
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	4629      	mov	r1, r5
 800ab50:	f7f5 fd5a 	bl	8000608 <__aeabi_dmul>
 800ab54:	4682      	mov	sl, r0
 800ab56:	468b      	mov	fp, r1
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	4629      	mov	r1, r5
 800ab60:	f7f5 fd52 	bl	8000608 <__aeabi_dmul>
 800ab64:	a341      	add	r3, pc, #260	; (adr r3, 800ac6c <__kernel_sin+0x154>)
 800ab66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6a:	4680      	mov	r8, r0
 800ab6c:	4689      	mov	r9, r1
 800ab6e:	4650      	mov	r0, sl
 800ab70:	4659      	mov	r1, fp
 800ab72:	f7f5 fd49 	bl	8000608 <__aeabi_dmul>
 800ab76:	a33f      	add	r3, pc, #252	; (adr r3, 800ac74 <__kernel_sin+0x15c>)
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f7f5 fb8c 	bl	8000298 <__aeabi_dsub>
 800ab80:	4652      	mov	r2, sl
 800ab82:	465b      	mov	r3, fp
 800ab84:	f7f5 fd40 	bl	8000608 <__aeabi_dmul>
 800ab88:	a33c      	add	r3, pc, #240	; (adr r3, 800ac7c <__kernel_sin+0x164>)
 800ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8e:	f7f5 fb85 	bl	800029c <__adddf3>
 800ab92:	4652      	mov	r2, sl
 800ab94:	465b      	mov	r3, fp
 800ab96:	f7f5 fd37 	bl	8000608 <__aeabi_dmul>
 800ab9a:	a33a      	add	r3, pc, #232	; (adr r3, 800ac84 <__kernel_sin+0x16c>)
 800ab9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba0:	f7f5 fb7a 	bl	8000298 <__aeabi_dsub>
 800aba4:	4652      	mov	r2, sl
 800aba6:	465b      	mov	r3, fp
 800aba8:	f7f5 fd2e 	bl	8000608 <__aeabi_dmul>
 800abac:	a337      	add	r3, pc, #220	; (adr r3, 800ac8c <__kernel_sin+0x174>)
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f7f5 fb73 	bl	800029c <__adddf3>
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	4606      	mov	r6, r0
 800abba:	460f      	mov	r7, r1
 800abbc:	b9eb      	cbnz	r3, 800abfa <__kernel_sin+0xe2>
 800abbe:	4602      	mov	r2, r0
 800abc0:	460b      	mov	r3, r1
 800abc2:	4650      	mov	r0, sl
 800abc4:	4659      	mov	r1, fp
 800abc6:	f7f5 fd1f 	bl	8000608 <__aeabi_dmul>
 800abca:	a325      	add	r3, pc, #148	; (adr r3, 800ac60 <__kernel_sin+0x148>)
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	f7f5 fb62 	bl	8000298 <__aeabi_dsub>
 800abd4:	4642      	mov	r2, r8
 800abd6:	464b      	mov	r3, r9
 800abd8:	f7f5 fd16 	bl	8000608 <__aeabi_dmul>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	4620      	mov	r0, r4
 800abe2:	4629      	mov	r1, r5
 800abe4:	f7f5 fb5a 	bl	800029c <__adddf3>
 800abe8:	4604      	mov	r4, r0
 800abea:	460d      	mov	r5, r1
 800abec:	ec45 4b10 	vmov	d0, r4, r5
 800abf0:	b003      	add	sp, #12
 800abf2:	ecbd 8b04 	vpop	{d8-d9}
 800abf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfa:	4b1b      	ldr	r3, [pc, #108]	; (800ac68 <__kernel_sin+0x150>)
 800abfc:	ec51 0b18 	vmov	r0, r1, d8
 800ac00:	2200      	movs	r2, #0
 800ac02:	f7f5 fd01 	bl	8000608 <__aeabi_dmul>
 800ac06:	4632      	mov	r2, r6
 800ac08:	ec41 0b19 	vmov	d9, r0, r1
 800ac0c:	463b      	mov	r3, r7
 800ac0e:	4640      	mov	r0, r8
 800ac10:	4649      	mov	r1, r9
 800ac12:	f7f5 fcf9 	bl	8000608 <__aeabi_dmul>
 800ac16:	4602      	mov	r2, r0
 800ac18:	460b      	mov	r3, r1
 800ac1a:	ec51 0b19 	vmov	r0, r1, d9
 800ac1e:	f7f5 fb3b 	bl	8000298 <__aeabi_dsub>
 800ac22:	4652      	mov	r2, sl
 800ac24:	465b      	mov	r3, fp
 800ac26:	f7f5 fcef 	bl	8000608 <__aeabi_dmul>
 800ac2a:	ec53 2b18 	vmov	r2, r3, d8
 800ac2e:	f7f5 fb33 	bl	8000298 <__aeabi_dsub>
 800ac32:	a30b      	add	r3, pc, #44	; (adr r3, 800ac60 <__kernel_sin+0x148>)
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	4606      	mov	r6, r0
 800ac3a:	460f      	mov	r7, r1
 800ac3c:	4640      	mov	r0, r8
 800ac3e:	4649      	mov	r1, r9
 800ac40:	f7f5 fce2 	bl	8000608 <__aeabi_dmul>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4630      	mov	r0, r6
 800ac4a:	4639      	mov	r1, r7
 800ac4c:	f7f5 fb26 	bl	800029c <__adddf3>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	4620      	mov	r0, r4
 800ac56:	4629      	mov	r1, r5
 800ac58:	f7f5 fb1e 	bl	8000298 <__aeabi_dsub>
 800ac5c:	e7c4      	b.n	800abe8 <__kernel_sin+0xd0>
 800ac5e:	bf00      	nop
 800ac60:	55555549 	.word	0x55555549
 800ac64:	3fc55555 	.word	0x3fc55555
 800ac68:	3fe00000 	.word	0x3fe00000
 800ac6c:	5acfd57c 	.word	0x5acfd57c
 800ac70:	3de5d93a 	.word	0x3de5d93a
 800ac74:	8a2b9ceb 	.word	0x8a2b9ceb
 800ac78:	3e5ae5e6 	.word	0x3e5ae5e6
 800ac7c:	57b1fe7d 	.word	0x57b1fe7d
 800ac80:	3ec71de3 	.word	0x3ec71de3
 800ac84:	19c161d5 	.word	0x19c161d5
 800ac88:	3f2a01a0 	.word	0x3f2a01a0
 800ac8c:	1110f8a6 	.word	0x1110f8a6
 800ac90:	3f811111 	.word	0x3f811111
 800ac94:	00000000 	.word	0x00000000

0800ac98 <expm1>:
 800ac98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac9c:	ec55 4b10 	vmov	r4, r5, d0
 800aca0:	4ad5      	ldr	r2, [pc, #852]	; (800aff8 <expm1+0x360>)
 800aca2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aca6:	4293      	cmp	r3, r2
 800aca8:	ed2d 8b04 	vpush	{d8-d9}
 800acac:	462e      	mov	r6, r5
 800acae:	d962      	bls.n	800ad76 <expm1+0xde>
 800acb0:	4ad2      	ldr	r2, [pc, #840]	; (800affc <expm1+0x364>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d924      	bls.n	800ad00 <expm1+0x68>
 800acb6:	4ad2      	ldr	r2, [pc, #840]	; (800b000 <expm1+0x368>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d911      	bls.n	800ace0 <expm1+0x48>
 800acbc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800acc0:	4323      	orrs	r3, r4
 800acc2:	ee10 2a10 	vmov	r2, s0
 800acc6:	d005      	beq.n	800acd4 <expm1+0x3c>
 800acc8:	462b      	mov	r3, r5
 800acca:	4620      	mov	r0, r4
 800accc:	4629      	mov	r1, r5
 800acce:	f7f5 fae5 	bl	800029c <__adddf3>
 800acd2:	e157      	b.n	800af84 <expm1+0x2ec>
 800acd4:	2d00      	cmp	r5, #0
 800acd6:	f280 8157 	bge.w	800af88 <expm1+0x2f0>
 800acda:	4dca      	ldr	r5, [pc, #808]	; (800b004 <expm1+0x36c>)
 800acdc:	2400      	movs	r4, #0
 800acde:	e153      	b.n	800af88 <expm1+0x2f0>
 800ace0:	a3ad      	add	r3, pc, #692	; (adr r3, 800af98 <expm1+0x300>)
 800ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace6:	ee10 0a10 	vmov	r0, s0
 800acea:	4629      	mov	r1, r5
 800acec:	f7f5 ff1c 	bl	8000b28 <__aeabi_dcmpgt>
 800acf0:	b130      	cbz	r0, 800ad00 <expm1+0x68>
 800acf2:	ecbd 8b04 	vpop	{d8-d9}
 800acf6:	2000      	movs	r0, #0
 800acf8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acfc:	f000 bb18 	b.w	800b330 <__math_oflow>
 800ad00:	2e00      	cmp	r6, #0
 800ad02:	da0c      	bge.n	800ad1e <expm1+0x86>
 800ad04:	a3a6      	add	r3, pc, #664	; (adr r3, 800afa0 <expm1+0x308>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	f7f5 fac5 	bl	800029c <__adddf3>
 800ad12:	2200      	movs	r2, #0
 800ad14:	2300      	movs	r3, #0
 800ad16:	f7f5 fee9 	bl	8000aec <__aeabi_dcmplt>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d1dd      	bne.n	800acda <expm1+0x42>
 800ad1e:	a3a2      	add	r3, pc, #648	; (adr r3, 800afa8 <expm1+0x310>)
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	4620      	mov	r0, r4
 800ad26:	4629      	mov	r1, r5
 800ad28:	f7f5 fc6e 	bl	8000608 <__aeabi_dmul>
 800ad2c:	2e00      	cmp	r6, #0
 800ad2e:	bfb4      	ite	lt
 800ad30:	4bb5      	ldrlt	r3, [pc, #724]	; (800b008 <expm1+0x370>)
 800ad32:	4bb6      	ldrge	r3, [pc, #728]	; (800b00c <expm1+0x374>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	f7f5 fab1 	bl	800029c <__adddf3>
 800ad3a:	f7f5 ff15 	bl	8000b68 <__aeabi_d2iz>
 800ad3e:	4682      	mov	sl, r0
 800ad40:	f7f5 fbf8 	bl	8000534 <__aeabi_i2d>
 800ad44:	a39a      	add	r3, pc, #616	; (adr r3, 800afb0 <expm1+0x318>)
 800ad46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4a:	4680      	mov	r8, r0
 800ad4c:	4689      	mov	r9, r1
 800ad4e:	f7f5 fc5b 	bl	8000608 <__aeabi_dmul>
 800ad52:	4602      	mov	r2, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	4620      	mov	r0, r4
 800ad58:	4629      	mov	r1, r5
 800ad5a:	f7f5 fa9d 	bl	8000298 <__aeabi_dsub>
 800ad5e:	a396      	add	r3, pc, #600	; (adr r3, 800afb8 <expm1+0x320>)
 800ad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad64:	4606      	mov	r6, r0
 800ad66:	460f      	mov	r7, r1
 800ad68:	4640      	mov	r0, r8
 800ad6a:	4649      	mov	r1, r9
 800ad6c:	f7f5 fc4c 	bl	8000608 <__aeabi_dmul>
 800ad70:	4680      	mov	r8, r0
 800ad72:	4689      	mov	r9, r1
 800ad74:	e019      	b.n	800adaa <expm1+0x112>
 800ad76:	4aa6      	ldr	r2, [pc, #664]	; (800b010 <expm1+0x378>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	f240 80ac 	bls.w	800aed6 <expm1+0x23e>
 800ad7e:	4aa5      	ldr	r2, [pc, #660]	; (800b014 <expm1+0x37c>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d8cc      	bhi.n	800ad1e <expm1+0x86>
 800ad84:	2d00      	cmp	r5, #0
 800ad86:	a38a      	add	r3, pc, #552	; (adr r3, 800afb0 <expm1+0x318>)
 800ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8c:	ee10 0a10 	vmov	r0, s0
 800ad90:	4629      	mov	r1, r5
 800ad92:	f2c0 8095 	blt.w	800aec0 <expm1+0x228>
 800ad96:	f7f5 fa7f 	bl	8000298 <__aeabi_dsub>
 800ad9a:	f20f 291c 	addw	r9, pc, #540	; 0x21c
 800ad9e:	e9d9 8900 	ldrd	r8, r9, [r9]
 800ada2:	4606      	mov	r6, r0
 800ada4:	460f      	mov	r7, r1
 800ada6:	f04f 0a01 	mov.w	sl, #1
 800adaa:	4642      	mov	r2, r8
 800adac:	464b      	mov	r3, r9
 800adae:	4630      	mov	r0, r6
 800adb0:	4639      	mov	r1, r7
 800adb2:	f7f5 fa71 	bl	8000298 <__aeabi_dsub>
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	4604      	mov	r4, r0
 800adbc:	460d      	mov	r5, r1
 800adbe:	4630      	mov	r0, r6
 800adc0:	4639      	mov	r1, r7
 800adc2:	f7f5 fa69 	bl	8000298 <__aeabi_dsub>
 800adc6:	4642      	mov	r2, r8
 800adc8:	464b      	mov	r3, r9
 800adca:	f7f5 fa65 	bl	8000298 <__aeabi_dsub>
 800adce:	ec41 0b18 	vmov	d8, r0, r1
 800add2:	4b8e      	ldr	r3, [pc, #568]	; (800b00c <expm1+0x374>)
 800add4:	2200      	movs	r2, #0
 800add6:	4620      	mov	r0, r4
 800add8:	4629      	mov	r1, r5
 800adda:	f7f5 fc15 	bl	8000608 <__aeabi_dmul>
 800adde:	4606      	mov	r6, r0
 800ade0:	460f      	mov	r7, r1
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	4620      	mov	r0, r4
 800ade8:	4629      	mov	r1, r5
 800adea:	f7f5 fc0d 	bl	8000608 <__aeabi_dmul>
 800adee:	a374      	add	r3, pc, #464	; (adr r3, 800afc0 <expm1+0x328>)
 800adf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf4:	4680      	mov	r8, r0
 800adf6:	4689      	mov	r9, r1
 800adf8:	f7f5 fc06 	bl	8000608 <__aeabi_dmul>
 800adfc:	a372      	add	r3, pc, #456	; (adr r3, 800afc8 <expm1+0x330>)
 800adfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae02:	f7f5 fa4b 	bl	800029c <__adddf3>
 800ae06:	4642      	mov	r2, r8
 800ae08:	464b      	mov	r3, r9
 800ae0a:	f7f5 fbfd 	bl	8000608 <__aeabi_dmul>
 800ae0e:	a370      	add	r3, pc, #448	; (adr r3, 800afd0 <expm1+0x338>)
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	f7f5 fa40 	bl	8000298 <__aeabi_dsub>
 800ae18:	4642      	mov	r2, r8
 800ae1a:	464b      	mov	r3, r9
 800ae1c:	f7f5 fbf4 	bl	8000608 <__aeabi_dmul>
 800ae20:	a36d      	add	r3, pc, #436	; (adr r3, 800afd8 <expm1+0x340>)
 800ae22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae26:	f7f5 fa39 	bl	800029c <__adddf3>
 800ae2a:	4642      	mov	r2, r8
 800ae2c:	464b      	mov	r3, r9
 800ae2e:	f7f5 fbeb 	bl	8000608 <__aeabi_dmul>
 800ae32:	a36b      	add	r3, pc, #428	; (adr r3, 800afe0 <expm1+0x348>)
 800ae34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae38:	f7f5 fa2e 	bl	8000298 <__aeabi_dsub>
 800ae3c:	4642      	mov	r2, r8
 800ae3e:	464b      	mov	r3, r9
 800ae40:	f7f5 fbe2 	bl	8000608 <__aeabi_dmul>
 800ae44:	4b74      	ldr	r3, [pc, #464]	; (800b018 <expm1+0x380>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	f7f5 fa28 	bl	800029c <__adddf3>
 800ae4c:	ec41 0b19 	vmov	d9, r0, r1
 800ae50:	4602      	mov	r2, r0
 800ae52:	460b      	mov	r3, r1
 800ae54:	4630      	mov	r0, r6
 800ae56:	4639      	mov	r1, r7
 800ae58:	f7f5 fbd6 	bl	8000608 <__aeabi_dmul>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	460b      	mov	r3, r1
 800ae60:	2000      	movs	r0, #0
 800ae62:	496e      	ldr	r1, [pc, #440]	; (800b01c <expm1+0x384>)
 800ae64:	f7f5 fa18 	bl	8000298 <__aeabi_dsub>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	460f      	mov	r7, r1
 800ae70:	ec51 0b19 	vmov	r0, r1, d9
 800ae74:	f7f5 fa10 	bl	8000298 <__aeabi_dsub>
 800ae78:	4632      	mov	r2, r6
 800ae7a:	ec41 0b19 	vmov	d9, r0, r1
 800ae7e:	463b      	mov	r3, r7
 800ae80:	4620      	mov	r0, r4
 800ae82:	4629      	mov	r1, r5
 800ae84:	f7f5 fbc0 	bl	8000608 <__aeabi_dmul>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	4964      	ldr	r1, [pc, #400]	; (800b020 <expm1+0x388>)
 800ae90:	f7f5 fa02 	bl	8000298 <__aeabi_dsub>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	ec51 0b19 	vmov	r0, r1, d9
 800ae9c:	f7f5 fcde 	bl	800085c <__aeabi_ddiv>
 800aea0:	4642      	mov	r2, r8
 800aea2:	464b      	mov	r3, r9
 800aea4:	f7f5 fbb0 	bl	8000608 <__aeabi_dmul>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	f1ba 0f00 	cmp.w	sl, #0
 800aeb0:	d12a      	bne.n	800af08 <expm1+0x270>
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	f7f5 fba7 	bl	8000608 <__aeabi_dmul>
 800aeba:	4642      	mov	r2, r8
 800aebc:	464b      	mov	r3, r9
 800aebe:	e017      	b.n	800aef0 <expm1+0x258>
 800aec0:	f7f5 f9ec 	bl	800029c <__adddf3>
 800aec4:	f20f 1920 	addw	r9, pc, #288	; 0x120
 800aec8:	e9d9 8900 	ldrd	r8, r9, [r9]
 800aecc:	4606      	mov	r6, r0
 800aece:	460f      	mov	r7, r1
 800aed0:	f04f 3aff 	mov.w	sl, #4294967295
 800aed4:	e769      	b.n	800adaa <expm1+0x112>
 800aed6:	4a53      	ldr	r2, [pc, #332]	; (800b024 <expm1+0x38c>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d812      	bhi.n	800af02 <expm1+0x26a>
 800aedc:	a344      	add	r3, pc, #272	; (adr r3, 800aff0 <expm1+0x358>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	ee10 0a10 	vmov	r0, s0
 800aee6:	4629      	mov	r1, r5
 800aee8:	f7f5 f9d8 	bl	800029c <__adddf3>
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	f7f5 f9d2 	bl	8000298 <__aeabi_dsub>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	4620      	mov	r0, r4
 800aefa:	4629      	mov	r1, r5
 800aefc:	f7f5 f9cc 	bl	8000298 <__aeabi_dsub>
 800af00:	e040      	b.n	800af84 <expm1+0x2ec>
 800af02:	f04f 0a00 	mov.w	sl, #0
 800af06:	e764      	b.n	800add2 <expm1+0x13a>
 800af08:	ec53 2b18 	vmov	r2, r3, d8
 800af0c:	f7f5 f9c4 	bl	8000298 <__aeabi_dsub>
 800af10:	4622      	mov	r2, r4
 800af12:	462b      	mov	r3, r5
 800af14:	f7f5 fb78 	bl	8000608 <__aeabi_dmul>
 800af18:	ec53 2b18 	vmov	r2, r3, d8
 800af1c:	f7f5 f9bc 	bl	8000298 <__aeabi_dsub>
 800af20:	4642      	mov	r2, r8
 800af22:	464b      	mov	r3, r9
 800af24:	f7f5 f9b8 	bl	8000298 <__aeabi_dsub>
 800af28:	f1ba 3fff 	cmp.w	sl, #4294967295
 800af2c:	4606      	mov	r6, r0
 800af2e:	460f      	mov	r7, r1
 800af30:	d10c      	bne.n	800af4c <expm1+0x2b4>
 800af32:	4602      	mov	r2, r0
 800af34:	460b      	mov	r3, r1
 800af36:	4620      	mov	r0, r4
 800af38:	4629      	mov	r1, r5
 800af3a:	f7f5 f9ad 	bl	8000298 <__aeabi_dsub>
 800af3e:	4b33      	ldr	r3, [pc, #204]	; (800b00c <expm1+0x374>)
 800af40:	2200      	movs	r2, #0
 800af42:	f7f5 fb61 	bl	8000608 <__aeabi_dmul>
 800af46:	4b31      	ldr	r3, [pc, #196]	; (800b00c <expm1+0x374>)
 800af48:	2200      	movs	r2, #0
 800af4a:	e7d7      	b.n	800aefc <expm1+0x264>
 800af4c:	f1ba 0f01 	cmp.w	sl, #1
 800af50:	d179      	bne.n	800b046 <expm1+0x3ae>
 800af52:	4b35      	ldr	r3, [pc, #212]	; (800b028 <expm1+0x390>)
 800af54:	2200      	movs	r2, #0
 800af56:	4620      	mov	r0, r4
 800af58:	4629      	mov	r1, r5
 800af5a:	f7f5 fdc7 	bl	8000aec <__aeabi_dcmplt>
 800af5e:	2800      	cmp	r0, #0
 800af60:	d064      	beq.n	800b02c <expm1+0x394>
 800af62:	4b2a      	ldr	r3, [pc, #168]	; (800b00c <expm1+0x374>)
 800af64:	2200      	movs	r2, #0
 800af66:	4620      	mov	r0, r4
 800af68:	4629      	mov	r1, r5
 800af6a:	f7f5 f997 	bl	800029c <__adddf3>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	4630      	mov	r0, r6
 800af74:	4639      	mov	r1, r7
 800af76:	f7f5 f98f 	bl	8000298 <__aeabi_dsub>
 800af7a:	2200      	movs	r2, #0
 800af7c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800af80:	f7f5 fb42 	bl	8000608 <__aeabi_dmul>
 800af84:	4604      	mov	r4, r0
 800af86:	460d      	mov	r5, r1
 800af88:	ecbd 8b04 	vpop	{d8-d9}
 800af8c:	ec45 4b10 	vmov	d0, r4, r5
 800af90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af94:	f3af 8000 	nop.w
 800af98:	fefa39ef 	.word	0xfefa39ef
 800af9c:	40862e42 	.word	0x40862e42
 800afa0:	c2f8f359 	.word	0xc2f8f359
 800afa4:	01a56e1f 	.word	0x01a56e1f
 800afa8:	652b82fe 	.word	0x652b82fe
 800afac:	3ff71547 	.word	0x3ff71547
 800afb0:	fee00000 	.word	0xfee00000
 800afb4:	3fe62e42 	.word	0x3fe62e42
 800afb8:	35793c76 	.word	0x35793c76
 800afbc:	3dea39ef 	.word	0x3dea39ef
 800afc0:	6e09c32d 	.word	0x6e09c32d
 800afc4:	be8afdb7 	.word	0xbe8afdb7
 800afc8:	86e65239 	.word	0x86e65239
 800afcc:	3ed0cfca 	.word	0x3ed0cfca
 800afd0:	9eaadbb7 	.word	0x9eaadbb7
 800afd4:	3f14ce19 	.word	0x3f14ce19
 800afd8:	19fe5585 	.word	0x19fe5585
 800afdc:	3f5a01a0 	.word	0x3f5a01a0
 800afe0:	111110f4 	.word	0x111110f4
 800afe4:	3fa11111 	.word	0x3fa11111
 800afe8:	35793c76 	.word	0x35793c76
 800afec:	bdea39ef 	.word	0xbdea39ef
 800aff0:	8800759c 	.word	0x8800759c
 800aff4:	7e37e43c 	.word	0x7e37e43c
 800aff8:	40436879 	.word	0x40436879
 800affc:	40862e41 	.word	0x40862e41
 800b000:	7fefffff 	.word	0x7fefffff
 800b004:	bff00000 	.word	0xbff00000
 800b008:	bfe00000 	.word	0xbfe00000
 800b00c:	3fe00000 	.word	0x3fe00000
 800b010:	3fd62e42 	.word	0x3fd62e42
 800b014:	3ff0a2b1 	.word	0x3ff0a2b1
 800b018:	3ff00000 	.word	0x3ff00000
 800b01c:	40080000 	.word	0x40080000
 800b020:	40180000 	.word	0x40180000
 800b024:	3c8fffff 	.word	0x3c8fffff
 800b028:	bfd00000 	.word	0xbfd00000
 800b02c:	4632      	mov	r2, r6
 800b02e:	463b      	mov	r3, r7
 800b030:	4620      	mov	r0, r4
 800b032:	4629      	mov	r1, r5
 800b034:	f7f5 f930 	bl	8000298 <__aeabi_dsub>
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	f7f5 f92e 	bl	800029c <__adddf3>
 800b040:	4b22      	ldr	r3, [pc, #136]	; (800b0cc <expm1+0x434>)
 800b042:	2200      	movs	r2, #0
 800b044:	e643      	b.n	800acce <expm1+0x36>
 800b046:	f10a 0301 	add.w	r3, sl, #1
 800b04a:	2b39      	cmp	r3, #57	; 0x39
 800b04c:	ea4f 560a 	mov.w	r6, sl, lsl #20
 800b050:	d90d      	bls.n	800b06e <expm1+0x3d6>
 800b052:	4622      	mov	r2, r4
 800b054:	462b      	mov	r3, r5
 800b056:	f7f5 f91f 	bl	8000298 <__aeabi_dsub>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	2000      	movs	r0, #0
 800b060:	491a      	ldr	r1, [pc, #104]	; (800b0cc <expm1+0x434>)
 800b062:	f7f5 f919 	bl	8000298 <__aeabi_dsub>
 800b066:	4b19      	ldr	r3, [pc, #100]	; (800b0cc <expm1+0x434>)
 800b068:	1871      	adds	r1, r6, r1
 800b06a:	2200      	movs	r2, #0
 800b06c:	e746      	b.n	800aefc <expm1+0x264>
 800b06e:	f1ba 0f13 	cmp.w	sl, #19
 800b072:	dc16      	bgt.n	800b0a2 <expm1+0x40a>
 800b074:	4622      	mov	r2, r4
 800b076:	462b      	mov	r3, r5
 800b078:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 800b07c:	f7f5 f90c 	bl	8000298 <__aeabi_dsub>
 800b080:	fa47 fa0a 	asr.w	sl, r7, sl
 800b084:	f1ca 597f 	rsb	r9, sl, #1069547520	; 0x3fc00000
 800b088:	f04f 0800 	mov.w	r8, #0
 800b08c:	f509 1940 	add.w	r9, r9, #3145728	; 0x300000
 800b090:	4602      	mov	r2, r0
 800b092:	460b      	mov	r3, r1
 800b094:	4640      	mov	r0, r8
 800b096:	4649      	mov	r1, r9
 800b098:	f7f5 f8fe 	bl	8000298 <__aeabi_dsub>
 800b09c:	4604      	mov	r4, r0
 800b09e:	1875      	adds	r5, r6, r1
 800b0a0:	e772      	b.n	800af88 <expm1+0x2f0>
 800b0a2:	f5ca 7a7f 	rsb	sl, sl, #1020	; 0x3fc
 800b0a6:	f10a 0a03 	add.w	sl, sl, #3
 800b0aa:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f7f5 f8f4 	bl	800029c <__adddf3>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	f7f5 f8ec 	bl	8000298 <__aeabi_dsub>
 800b0c0:	4b02      	ldr	r3, [pc, #8]	; (800b0cc <expm1+0x434>)
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f7f5 f8ea 	bl	800029c <__adddf3>
 800b0c8:	e7e8      	b.n	800b09c <expm1+0x404>
 800b0ca:	bf00      	nop
 800b0cc:	3ff00000 	.word	0x3ff00000

0800b0d0 <fabs>:
 800b0d0:	ec51 0b10 	vmov	r0, r1, d0
 800b0d4:	ee10 2a10 	vmov	r2, s0
 800b0d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b0dc:	ec43 2b10 	vmov	d0, r2, r3
 800b0e0:	4770      	bx	lr
 800b0e2:	0000      	movs	r0, r0
 800b0e4:	0000      	movs	r0, r0
	...

0800b0e8 <floor>:
 800b0e8:	ec51 0b10 	vmov	r0, r1, d0
 800b0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b0f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b0f8:	2e13      	cmp	r6, #19
 800b0fa:	ee10 5a10 	vmov	r5, s0
 800b0fe:	ee10 8a10 	vmov	r8, s0
 800b102:	460c      	mov	r4, r1
 800b104:	dc32      	bgt.n	800b16c <floor+0x84>
 800b106:	2e00      	cmp	r6, #0
 800b108:	da14      	bge.n	800b134 <floor+0x4c>
 800b10a:	a333      	add	r3, pc, #204	; (adr r3, 800b1d8 <floor+0xf0>)
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	f7f5 f8c4 	bl	800029c <__adddf3>
 800b114:	2200      	movs	r2, #0
 800b116:	2300      	movs	r3, #0
 800b118:	f7f5 fd06 	bl	8000b28 <__aeabi_dcmpgt>
 800b11c:	b138      	cbz	r0, 800b12e <floor+0x46>
 800b11e:	2c00      	cmp	r4, #0
 800b120:	da57      	bge.n	800b1d2 <floor+0xea>
 800b122:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b126:	431d      	orrs	r5, r3
 800b128:	d001      	beq.n	800b12e <floor+0x46>
 800b12a:	4c2d      	ldr	r4, [pc, #180]	; (800b1e0 <floor+0xf8>)
 800b12c:	2500      	movs	r5, #0
 800b12e:	4621      	mov	r1, r4
 800b130:	4628      	mov	r0, r5
 800b132:	e025      	b.n	800b180 <floor+0x98>
 800b134:	4f2b      	ldr	r7, [pc, #172]	; (800b1e4 <floor+0xfc>)
 800b136:	4137      	asrs	r7, r6
 800b138:	ea01 0307 	and.w	r3, r1, r7
 800b13c:	4303      	orrs	r3, r0
 800b13e:	d01f      	beq.n	800b180 <floor+0x98>
 800b140:	a325      	add	r3, pc, #148	; (adr r3, 800b1d8 <floor+0xf0>)
 800b142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b146:	f7f5 f8a9 	bl	800029c <__adddf3>
 800b14a:	2200      	movs	r2, #0
 800b14c:	2300      	movs	r3, #0
 800b14e:	f7f5 fceb 	bl	8000b28 <__aeabi_dcmpgt>
 800b152:	2800      	cmp	r0, #0
 800b154:	d0eb      	beq.n	800b12e <floor+0x46>
 800b156:	2c00      	cmp	r4, #0
 800b158:	bfbe      	ittt	lt
 800b15a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b15e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b162:	19a4      	addlt	r4, r4, r6
 800b164:	ea24 0407 	bic.w	r4, r4, r7
 800b168:	2500      	movs	r5, #0
 800b16a:	e7e0      	b.n	800b12e <floor+0x46>
 800b16c:	2e33      	cmp	r6, #51	; 0x33
 800b16e:	dd0b      	ble.n	800b188 <floor+0xa0>
 800b170:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b174:	d104      	bne.n	800b180 <floor+0x98>
 800b176:	ee10 2a10 	vmov	r2, s0
 800b17a:	460b      	mov	r3, r1
 800b17c:	f7f5 f88e 	bl	800029c <__adddf3>
 800b180:	ec41 0b10 	vmov	d0, r0, r1
 800b184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b188:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b18c:	f04f 33ff 	mov.w	r3, #4294967295
 800b190:	fa23 f707 	lsr.w	r7, r3, r7
 800b194:	4207      	tst	r7, r0
 800b196:	d0f3      	beq.n	800b180 <floor+0x98>
 800b198:	a30f      	add	r3, pc, #60	; (adr r3, 800b1d8 <floor+0xf0>)
 800b19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19e:	f7f5 f87d 	bl	800029c <__adddf3>
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	f7f5 fcbf 	bl	8000b28 <__aeabi_dcmpgt>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d0bf      	beq.n	800b12e <floor+0x46>
 800b1ae:	2c00      	cmp	r4, #0
 800b1b0:	da02      	bge.n	800b1b8 <floor+0xd0>
 800b1b2:	2e14      	cmp	r6, #20
 800b1b4:	d103      	bne.n	800b1be <floor+0xd6>
 800b1b6:	3401      	adds	r4, #1
 800b1b8:	ea25 0507 	bic.w	r5, r5, r7
 800b1bc:	e7b7      	b.n	800b12e <floor+0x46>
 800b1be:	2301      	movs	r3, #1
 800b1c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b1c4:	fa03 f606 	lsl.w	r6, r3, r6
 800b1c8:	4435      	add	r5, r6
 800b1ca:	4545      	cmp	r5, r8
 800b1cc:	bf38      	it	cc
 800b1ce:	18e4      	addcc	r4, r4, r3
 800b1d0:	e7f2      	b.n	800b1b8 <floor+0xd0>
 800b1d2:	2500      	movs	r5, #0
 800b1d4:	462c      	mov	r4, r5
 800b1d6:	e7aa      	b.n	800b12e <floor+0x46>
 800b1d8:	8800759c 	.word	0x8800759c
 800b1dc:	7e37e43c 	.word	0x7e37e43c
 800b1e0:	bff00000 	.word	0xbff00000
 800b1e4:	000fffff 	.word	0x000fffff

0800b1e8 <scalbn>:
 800b1e8:	b570      	push	{r4, r5, r6, lr}
 800b1ea:	ec55 4b10 	vmov	r4, r5, d0
 800b1ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	462b      	mov	r3, r5
 800b1f6:	b99a      	cbnz	r2, 800b220 <scalbn+0x38>
 800b1f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b1fc:	4323      	orrs	r3, r4
 800b1fe:	d036      	beq.n	800b26e <scalbn+0x86>
 800b200:	4b39      	ldr	r3, [pc, #228]	; (800b2e8 <scalbn+0x100>)
 800b202:	4629      	mov	r1, r5
 800b204:	ee10 0a10 	vmov	r0, s0
 800b208:	2200      	movs	r2, #0
 800b20a:	f7f5 f9fd 	bl	8000608 <__aeabi_dmul>
 800b20e:	4b37      	ldr	r3, [pc, #220]	; (800b2ec <scalbn+0x104>)
 800b210:	429e      	cmp	r6, r3
 800b212:	4604      	mov	r4, r0
 800b214:	460d      	mov	r5, r1
 800b216:	da10      	bge.n	800b23a <scalbn+0x52>
 800b218:	a32b      	add	r3, pc, #172	; (adr r3, 800b2c8 <scalbn+0xe0>)
 800b21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21e:	e03a      	b.n	800b296 <scalbn+0xae>
 800b220:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b224:	428a      	cmp	r2, r1
 800b226:	d10c      	bne.n	800b242 <scalbn+0x5a>
 800b228:	ee10 2a10 	vmov	r2, s0
 800b22c:	4620      	mov	r0, r4
 800b22e:	4629      	mov	r1, r5
 800b230:	f7f5 f834 	bl	800029c <__adddf3>
 800b234:	4604      	mov	r4, r0
 800b236:	460d      	mov	r5, r1
 800b238:	e019      	b.n	800b26e <scalbn+0x86>
 800b23a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b23e:	460b      	mov	r3, r1
 800b240:	3a36      	subs	r2, #54	; 0x36
 800b242:	4432      	add	r2, r6
 800b244:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b248:	428a      	cmp	r2, r1
 800b24a:	dd08      	ble.n	800b25e <scalbn+0x76>
 800b24c:	2d00      	cmp	r5, #0
 800b24e:	a120      	add	r1, pc, #128	; (adr r1, 800b2d0 <scalbn+0xe8>)
 800b250:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b254:	da1c      	bge.n	800b290 <scalbn+0xa8>
 800b256:	a120      	add	r1, pc, #128	; (adr r1, 800b2d8 <scalbn+0xf0>)
 800b258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b25c:	e018      	b.n	800b290 <scalbn+0xa8>
 800b25e:	2a00      	cmp	r2, #0
 800b260:	dd08      	ble.n	800b274 <scalbn+0x8c>
 800b262:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b266:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b26a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b26e:	ec45 4b10 	vmov	d0, r4, r5
 800b272:	bd70      	pop	{r4, r5, r6, pc}
 800b274:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b278:	da19      	bge.n	800b2ae <scalbn+0xc6>
 800b27a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b27e:	429e      	cmp	r6, r3
 800b280:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b284:	dd0a      	ble.n	800b29c <scalbn+0xb4>
 800b286:	a112      	add	r1, pc, #72	; (adr r1, 800b2d0 <scalbn+0xe8>)
 800b288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1e2      	bne.n	800b256 <scalbn+0x6e>
 800b290:	a30f      	add	r3, pc, #60	; (adr r3, 800b2d0 <scalbn+0xe8>)
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	f7f5 f9b7 	bl	8000608 <__aeabi_dmul>
 800b29a:	e7cb      	b.n	800b234 <scalbn+0x4c>
 800b29c:	a10a      	add	r1, pc, #40	; (adr r1, 800b2c8 <scalbn+0xe0>)
 800b29e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d0b8      	beq.n	800b218 <scalbn+0x30>
 800b2a6:	a10e      	add	r1, pc, #56	; (adr r1, 800b2e0 <scalbn+0xf8>)
 800b2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2ac:	e7b4      	b.n	800b218 <scalbn+0x30>
 800b2ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b2b2:	3236      	adds	r2, #54	; 0x36
 800b2b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b2b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b2bc:	4620      	mov	r0, r4
 800b2be:	4b0c      	ldr	r3, [pc, #48]	; (800b2f0 <scalbn+0x108>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	e7e8      	b.n	800b296 <scalbn+0xae>
 800b2c4:	f3af 8000 	nop.w
 800b2c8:	c2f8f359 	.word	0xc2f8f359
 800b2cc:	01a56e1f 	.word	0x01a56e1f
 800b2d0:	8800759c 	.word	0x8800759c
 800b2d4:	7e37e43c 	.word	0x7e37e43c
 800b2d8:	8800759c 	.word	0x8800759c
 800b2dc:	fe37e43c 	.word	0xfe37e43c
 800b2e0:	c2f8f359 	.word	0xc2f8f359
 800b2e4:	81a56e1f 	.word	0x81a56e1f
 800b2e8:	43500000 	.word	0x43500000
 800b2ec:	ffff3cb0 	.word	0xffff3cb0
 800b2f0:	3c900000 	.word	0x3c900000

0800b2f4 <with_errno>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	460d      	mov	r5, r1
 800b2fa:	4616      	mov	r6, r2
 800b2fc:	f000 f828 	bl	800b350 <__errno>
 800b300:	4629      	mov	r1, r5
 800b302:	6006      	str	r6, [r0, #0]
 800b304:	4620      	mov	r0, r4
 800b306:	bd70      	pop	{r4, r5, r6, pc}

0800b308 <xflow>:
 800b308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b30a:	4614      	mov	r4, r2
 800b30c:	461d      	mov	r5, r3
 800b30e:	b108      	cbz	r0, 800b314 <xflow+0xc>
 800b310:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b314:	e9cd 2300 	strd	r2, r3, [sp]
 800b318:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b31c:	4620      	mov	r0, r4
 800b31e:	4629      	mov	r1, r5
 800b320:	f7f5 f972 	bl	8000608 <__aeabi_dmul>
 800b324:	2222      	movs	r2, #34	; 0x22
 800b326:	b003      	add	sp, #12
 800b328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b32c:	f7ff bfe2 	b.w	800b2f4 <with_errno>

0800b330 <__math_oflow>:
 800b330:	b508      	push	{r3, lr}
 800b332:	2200      	movs	r2, #0
 800b334:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b338:	f7ff ffe6 	bl	800b308 <xflow>
 800b33c:	ec41 0b10 	vmov	d0, r0, r1
 800b340:	bd08      	pop	{r3, pc}

0800b342 <abort>:
 800b342:	b508      	push	{r3, lr}
 800b344:	2006      	movs	r0, #6
 800b346:	f000 fdef 	bl	800bf28 <raise>
 800b34a:	2001      	movs	r0, #1
 800b34c:	f7f9 fa36 	bl	80047bc <_exit>

0800b350 <__errno>:
 800b350:	4b01      	ldr	r3, [pc, #4]	; (800b358 <__errno+0x8>)
 800b352:	6818      	ldr	r0, [r3, #0]
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	20000010 	.word	0x20000010

0800b35c <__libc_init_array>:
 800b35c:	b570      	push	{r4, r5, r6, lr}
 800b35e:	4d0d      	ldr	r5, [pc, #52]	; (800b394 <__libc_init_array+0x38>)
 800b360:	4c0d      	ldr	r4, [pc, #52]	; (800b398 <__libc_init_array+0x3c>)
 800b362:	1b64      	subs	r4, r4, r5
 800b364:	10a4      	asrs	r4, r4, #2
 800b366:	2600      	movs	r6, #0
 800b368:	42a6      	cmp	r6, r4
 800b36a:	d109      	bne.n	800b380 <__libc_init_array+0x24>
 800b36c:	4d0b      	ldr	r5, [pc, #44]	; (800b39c <__libc_init_array+0x40>)
 800b36e:	4c0c      	ldr	r4, [pc, #48]	; (800b3a0 <__libc_init_array+0x44>)
 800b370:	f002 fd4e 	bl	800de10 <_init>
 800b374:	1b64      	subs	r4, r4, r5
 800b376:	10a4      	asrs	r4, r4, #2
 800b378:	2600      	movs	r6, #0
 800b37a:	42a6      	cmp	r6, r4
 800b37c:	d105      	bne.n	800b38a <__libc_init_array+0x2e>
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
 800b380:	f855 3b04 	ldr.w	r3, [r5], #4
 800b384:	4798      	blx	r3
 800b386:	3601      	adds	r6, #1
 800b388:	e7ee      	b.n	800b368 <__libc_init_array+0xc>
 800b38a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b38e:	4798      	blx	r3
 800b390:	3601      	adds	r6, #1
 800b392:	e7f2      	b.n	800b37a <__libc_init_array+0x1e>
 800b394:	0800e464 	.word	0x0800e464
 800b398:	0800e464 	.word	0x0800e464
 800b39c:	0800e464 	.word	0x0800e464
 800b3a0:	0800e46c 	.word	0x0800e46c

0800b3a4 <malloc>:
 800b3a4:	4b02      	ldr	r3, [pc, #8]	; (800b3b0 <malloc+0xc>)
 800b3a6:	4601      	mov	r1, r0
 800b3a8:	6818      	ldr	r0, [r3, #0]
 800b3aa:	f000 b8a7 	b.w	800b4fc <_malloc_r>
 800b3ae:	bf00      	nop
 800b3b0:	20000010 	.word	0x20000010

0800b3b4 <free>:
 800b3b4:	4b02      	ldr	r3, [pc, #8]	; (800b3c0 <free+0xc>)
 800b3b6:	4601      	mov	r1, r0
 800b3b8:	6818      	ldr	r0, [r3, #0]
 800b3ba:	f000 b833 	b.w	800b424 <_free_r>
 800b3be:	bf00      	nop
 800b3c0:	20000010 	.word	0x20000010

0800b3c4 <memcpy>:
 800b3c4:	440a      	add	r2, r1
 800b3c6:	4291      	cmp	r1, r2
 800b3c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3cc:	d100      	bne.n	800b3d0 <memcpy+0xc>
 800b3ce:	4770      	bx	lr
 800b3d0:	b510      	push	{r4, lr}
 800b3d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3da:	4291      	cmp	r1, r2
 800b3dc:	d1f9      	bne.n	800b3d2 <memcpy+0xe>
 800b3de:	bd10      	pop	{r4, pc}

0800b3e0 <memmove>:
 800b3e0:	4288      	cmp	r0, r1
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	eb01 0402 	add.w	r4, r1, r2
 800b3e8:	d902      	bls.n	800b3f0 <memmove+0x10>
 800b3ea:	4284      	cmp	r4, r0
 800b3ec:	4623      	mov	r3, r4
 800b3ee:	d807      	bhi.n	800b400 <memmove+0x20>
 800b3f0:	1e43      	subs	r3, r0, #1
 800b3f2:	42a1      	cmp	r1, r4
 800b3f4:	d008      	beq.n	800b408 <memmove+0x28>
 800b3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3fe:	e7f8      	b.n	800b3f2 <memmove+0x12>
 800b400:	4402      	add	r2, r0
 800b402:	4601      	mov	r1, r0
 800b404:	428a      	cmp	r2, r1
 800b406:	d100      	bne.n	800b40a <memmove+0x2a>
 800b408:	bd10      	pop	{r4, pc}
 800b40a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b40e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b412:	e7f7      	b.n	800b404 <memmove+0x24>

0800b414 <memset>:
 800b414:	4402      	add	r2, r0
 800b416:	4603      	mov	r3, r0
 800b418:	4293      	cmp	r3, r2
 800b41a:	d100      	bne.n	800b41e <memset+0xa>
 800b41c:	4770      	bx	lr
 800b41e:	f803 1b01 	strb.w	r1, [r3], #1
 800b422:	e7f9      	b.n	800b418 <memset+0x4>

0800b424 <_free_r>:
 800b424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b426:	2900      	cmp	r1, #0
 800b428:	d044      	beq.n	800b4b4 <_free_r+0x90>
 800b42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b42e:	9001      	str	r0, [sp, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	f1a1 0404 	sub.w	r4, r1, #4
 800b436:	bfb8      	it	lt
 800b438:	18e4      	addlt	r4, r4, r3
 800b43a:	f001 fc0f 	bl	800cc5c <__malloc_lock>
 800b43e:	4a1e      	ldr	r2, [pc, #120]	; (800b4b8 <_free_r+0x94>)
 800b440:	9801      	ldr	r0, [sp, #4]
 800b442:	6813      	ldr	r3, [r2, #0]
 800b444:	b933      	cbnz	r3, 800b454 <_free_r+0x30>
 800b446:	6063      	str	r3, [r4, #4]
 800b448:	6014      	str	r4, [r2, #0]
 800b44a:	b003      	add	sp, #12
 800b44c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b450:	f001 bc0a 	b.w	800cc68 <__malloc_unlock>
 800b454:	42a3      	cmp	r3, r4
 800b456:	d908      	bls.n	800b46a <_free_r+0x46>
 800b458:	6825      	ldr	r5, [r4, #0]
 800b45a:	1961      	adds	r1, r4, r5
 800b45c:	428b      	cmp	r3, r1
 800b45e:	bf01      	itttt	eq
 800b460:	6819      	ldreq	r1, [r3, #0]
 800b462:	685b      	ldreq	r3, [r3, #4]
 800b464:	1949      	addeq	r1, r1, r5
 800b466:	6021      	streq	r1, [r4, #0]
 800b468:	e7ed      	b.n	800b446 <_free_r+0x22>
 800b46a:	461a      	mov	r2, r3
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	b10b      	cbz	r3, 800b474 <_free_r+0x50>
 800b470:	42a3      	cmp	r3, r4
 800b472:	d9fa      	bls.n	800b46a <_free_r+0x46>
 800b474:	6811      	ldr	r1, [r2, #0]
 800b476:	1855      	adds	r5, r2, r1
 800b478:	42a5      	cmp	r5, r4
 800b47a:	d10b      	bne.n	800b494 <_free_r+0x70>
 800b47c:	6824      	ldr	r4, [r4, #0]
 800b47e:	4421      	add	r1, r4
 800b480:	1854      	adds	r4, r2, r1
 800b482:	42a3      	cmp	r3, r4
 800b484:	6011      	str	r1, [r2, #0]
 800b486:	d1e0      	bne.n	800b44a <_free_r+0x26>
 800b488:	681c      	ldr	r4, [r3, #0]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	6053      	str	r3, [r2, #4]
 800b48e:	4421      	add	r1, r4
 800b490:	6011      	str	r1, [r2, #0]
 800b492:	e7da      	b.n	800b44a <_free_r+0x26>
 800b494:	d902      	bls.n	800b49c <_free_r+0x78>
 800b496:	230c      	movs	r3, #12
 800b498:	6003      	str	r3, [r0, #0]
 800b49a:	e7d6      	b.n	800b44a <_free_r+0x26>
 800b49c:	6825      	ldr	r5, [r4, #0]
 800b49e:	1961      	adds	r1, r4, r5
 800b4a0:	428b      	cmp	r3, r1
 800b4a2:	bf04      	itt	eq
 800b4a4:	6819      	ldreq	r1, [r3, #0]
 800b4a6:	685b      	ldreq	r3, [r3, #4]
 800b4a8:	6063      	str	r3, [r4, #4]
 800b4aa:	bf04      	itt	eq
 800b4ac:	1949      	addeq	r1, r1, r5
 800b4ae:	6021      	streq	r1, [r4, #0]
 800b4b0:	6054      	str	r4, [r2, #4]
 800b4b2:	e7ca      	b.n	800b44a <_free_r+0x26>
 800b4b4:	b003      	add	sp, #12
 800b4b6:	bd30      	pop	{r4, r5, pc}
 800b4b8:	20000ac4 	.word	0x20000ac4

0800b4bc <sbrk_aligned>:
 800b4bc:	b570      	push	{r4, r5, r6, lr}
 800b4be:	4e0e      	ldr	r6, [pc, #56]	; (800b4f8 <sbrk_aligned+0x3c>)
 800b4c0:	460c      	mov	r4, r1
 800b4c2:	6831      	ldr	r1, [r6, #0]
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	b911      	cbnz	r1, 800b4ce <sbrk_aligned+0x12>
 800b4c8:	f000 fcf6 	bl	800beb8 <_sbrk_r>
 800b4cc:	6030      	str	r0, [r6, #0]
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	f000 fcf1 	bl	800beb8 <_sbrk_r>
 800b4d6:	1c43      	adds	r3, r0, #1
 800b4d8:	d00a      	beq.n	800b4f0 <sbrk_aligned+0x34>
 800b4da:	1cc4      	adds	r4, r0, #3
 800b4dc:	f024 0403 	bic.w	r4, r4, #3
 800b4e0:	42a0      	cmp	r0, r4
 800b4e2:	d007      	beq.n	800b4f4 <sbrk_aligned+0x38>
 800b4e4:	1a21      	subs	r1, r4, r0
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f000 fce6 	bl	800beb8 <_sbrk_r>
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	d101      	bne.n	800b4f4 <sbrk_aligned+0x38>
 800b4f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	bd70      	pop	{r4, r5, r6, pc}
 800b4f8:	20000ac8 	.word	0x20000ac8

0800b4fc <_malloc_r>:
 800b4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b500:	1ccd      	adds	r5, r1, #3
 800b502:	f025 0503 	bic.w	r5, r5, #3
 800b506:	3508      	adds	r5, #8
 800b508:	2d0c      	cmp	r5, #12
 800b50a:	bf38      	it	cc
 800b50c:	250c      	movcc	r5, #12
 800b50e:	2d00      	cmp	r5, #0
 800b510:	4607      	mov	r7, r0
 800b512:	db01      	blt.n	800b518 <_malloc_r+0x1c>
 800b514:	42a9      	cmp	r1, r5
 800b516:	d905      	bls.n	800b524 <_malloc_r+0x28>
 800b518:	230c      	movs	r3, #12
 800b51a:	603b      	str	r3, [r7, #0]
 800b51c:	2600      	movs	r6, #0
 800b51e:	4630      	mov	r0, r6
 800b520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b524:	4e2e      	ldr	r6, [pc, #184]	; (800b5e0 <_malloc_r+0xe4>)
 800b526:	f001 fb99 	bl	800cc5c <__malloc_lock>
 800b52a:	6833      	ldr	r3, [r6, #0]
 800b52c:	461c      	mov	r4, r3
 800b52e:	bb34      	cbnz	r4, 800b57e <_malloc_r+0x82>
 800b530:	4629      	mov	r1, r5
 800b532:	4638      	mov	r0, r7
 800b534:	f7ff ffc2 	bl	800b4bc <sbrk_aligned>
 800b538:	1c43      	adds	r3, r0, #1
 800b53a:	4604      	mov	r4, r0
 800b53c:	d14d      	bne.n	800b5da <_malloc_r+0xde>
 800b53e:	6834      	ldr	r4, [r6, #0]
 800b540:	4626      	mov	r6, r4
 800b542:	2e00      	cmp	r6, #0
 800b544:	d140      	bne.n	800b5c8 <_malloc_r+0xcc>
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	4631      	mov	r1, r6
 800b54a:	4638      	mov	r0, r7
 800b54c:	eb04 0803 	add.w	r8, r4, r3
 800b550:	f000 fcb2 	bl	800beb8 <_sbrk_r>
 800b554:	4580      	cmp	r8, r0
 800b556:	d13a      	bne.n	800b5ce <_malloc_r+0xd2>
 800b558:	6821      	ldr	r1, [r4, #0]
 800b55a:	3503      	adds	r5, #3
 800b55c:	1a6d      	subs	r5, r5, r1
 800b55e:	f025 0503 	bic.w	r5, r5, #3
 800b562:	3508      	adds	r5, #8
 800b564:	2d0c      	cmp	r5, #12
 800b566:	bf38      	it	cc
 800b568:	250c      	movcc	r5, #12
 800b56a:	4629      	mov	r1, r5
 800b56c:	4638      	mov	r0, r7
 800b56e:	f7ff ffa5 	bl	800b4bc <sbrk_aligned>
 800b572:	3001      	adds	r0, #1
 800b574:	d02b      	beq.n	800b5ce <_malloc_r+0xd2>
 800b576:	6823      	ldr	r3, [r4, #0]
 800b578:	442b      	add	r3, r5
 800b57a:	6023      	str	r3, [r4, #0]
 800b57c:	e00e      	b.n	800b59c <_malloc_r+0xa0>
 800b57e:	6822      	ldr	r2, [r4, #0]
 800b580:	1b52      	subs	r2, r2, r5
 800b582:	d41e      	bmi.n	800b5c2 <_malloc_r+0xc6>
 800b584:	2a0b      	cmp	r2, #11
 800b586:	d916      	bls.n	800b5b6 <_malloc_r+0xba>
 800b588:	1961      	adds	r1, r4, r5
 800b58a:	42a3      	cmp	r3, r4
 800b58c:	6025      	str	r5, [r4, #0]
 800b58e:	bf18      	it	ne
 800b590:	6059      	strne	r1, [r3, #4]
 800b592:	6863      	ldr	r3, [r4, #4]
 800b594:	bf08      	it	eq
 800b596:	6031      	streq	r1, [r6, #0]
 800b598:	5162      	str	r2, [r4, r5]
 800b59a:	604b      	str	r3, [r1, #4]
 800b59c:	4638      	mov	r0, r7
 800b59e:	f104 060b 	add.w	r6, r4, #11
 800b5a2:	f001 fb61 	bl	800cc68 <__malloc_unlock>
 800b5a6:	f026 0607 	bic.w	r6, r6, #7
 800b5aa:	1d23      	adds	r3, r4, #4
 800b5ac:	1af2      	subs	r2, r6, r3
 800b5ae:	d0b6      	beq.n	800b51e <_malloc_r+0x22>
 800b5b0:	1b9b      	subs	r3, r3, r6
 800b5b2:	50a3      	str	r3, [r4, r2]
 800b5b4:	e7b3      	b.n	800b51e <_malloc_r+0x22>
 800b5b6:	6862      	ldr	r2, [r4, #4]
 800b5b8:	42a3      	cmp	r3, r4
 800b5ba:	bf0c      	ite	eq
 800b5bc:	6032      	streq	r2, [r6, #0]
 800b5be:	605a      	strne	r2, [r3, #4]
 800b5c0:	e7ec      	b.n	800b59c <_malloc_r+0xa0>
 800b5c2:	4623      	mov	r3, r4
 800b5c4:	6864      	ldr	r4, [r4, #4]
 800b5c6:	e7b2      	b.n	800b52e <_malloc_r+0x32>
 800b5c8:	4634      	mov	r4, r6
 800b5ca:	6876      	ldr	r6, [r6, #4]
 800b5cc:	e7b9      	b.n	800b542 <_malloc_r+0x46>
 800b5ce:	230c      	movs	r3, #12
 800b5d0:	603b      	str	r3, [r7, #0]
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	f001 fb48 	bl	800cc68 <__malloc_unlock>
 800b5d8:	e7a1      	b.n	800b51e <_malloc_r+0x22>
 800b5da:	6025      	str	r5, [r4, #0]
 800b5dc:	e7de      	b.n	800b59c <_malloc_r+0xa0>
 800b5de:	bf00      	nop
 800b5e0:	20000ac4 	.word	0x20000ac4

0800b5e4 <__cvt>:
 800b5e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e8:	ec55 4b10 	vmov	r4, r5, d0
 800b5ec:	2d00      	cmp	r5, #0
 800b5ee:	460e      	mov	r6, r1
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	462b      	mov	r3, r5
 800b5f4:	bfbb      	ittet	lt
 800b5f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b5fa:	461d      	movlt	r5, r3
 800b5fc:	2300      	movge	r3, #0
 800b5fe:	232d      	movlt	r3, #45	; 0x2d
 800b600:	700b      	strb	r3, [r1, #0]
 800b602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b604:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b608:	4691      	mov	r9, r2
 800b60a:	f023 0820 	bic.w	r8, r3, #32
 800b60e:	bfbc      	itt	lt
 800b610:	4622      	movlt	r2, r4
 800b612:	4614      	movlt	r4, r2
 800b614:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b618:	d005      	beq.n	800b626 <__cvt+0x42>
 800b61a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b61e:	d100      	bne.n	800b622 <__cvt+0x3e>
 800b620:	3601      	adds	r6, #1
 800b622:	2102      	movs	r1, #2
 800b624:	e000      	b.n	800b628 <__cvt+0x44>
 800b626:	2103      	movs	r1, #3
 800b628:	ab03      	add	r3, sp, #12
 800b62a:	9301      	str	r3, [sp, #4]
 800b62c:	ab02      	add	r3, sp, #8
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	ec45 4b10 	vmov	d0, r4, r5
 800b634:	4653      	mov	r3, sl
 800b636:	4632      	mov	r2, r6
 800b638:	f000 fd1e 	bl	800c078 <_dtoa_r>
 800b63c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b640:	4607      	mov	r7, r0
 800b642:	d102      	bne.n	800b64a <__cvt+0x66>
 800b644:	f019 0f01 	tst.w	r9, #1
 800b648:	d022      	beq.n	800b690 <__cvt+0xac>
 800b64a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b64e:	eb07 0906 	add.w	r9, r7, r6
 800b652:	d110      	bne.n	800b676 <__cvt+0x92>
 800b654:	783b      	ldrb	r3, [r7, #0]
 800b656:	2b30      	cmp	r3, #48	; 0x30
 800b658:	d10a      	bne.n	800b670 <__cvt+0x8c>
 800b65a:	2200      	movs	r2, #0
 800b65c:	2300      	movs	r3, #0
 800b65e:	4620      	mov	r0, r4
 800b660:	4629      	mov	r1, r5
 800b662:	f7f5 fa39 	bl	8000ad8 <__aeabi_dcmpeq>
 800b666:	b918      	cbnz	r0, 800b670 <__cvt+0x8c>
 800b668:	f1c6 0601 	rsb	r6, r6, #1
 800b66c:	f8ca 6000 	str.w	r6, [sl]
 800b670:	f8da 3000 	ldr.w	r3, [sl]
 800b674:	4499      	add	r9, r3
 800b676:	2200      	movs	r2, #0
 800b678:	2300      	movs	r3, #0
 800b67a:	4620      	mov	r0, r4
 800b67c:	4629      	mov	r1, r5
 800b67e:	f7f5 fa2b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b682:	b108      	cbz	r0, 800b688 <__cvt+0xa4>
 800b684:	f8cd 900c 	str.w	r9, [sp, #12]
 800b688:	2230      	movs	r2, #48	; 0x30
 800b68a:	9b03      	ldr	r3, [sp, #12]
 800b68c:	454b      	cmp	r3, r9
 800b68e:	d307      	bcc.n	800b6a0 <__cvt+0xbc>
 800b690:	9b03      	ldr	r3, [sp, #12]
 800b692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b694:	1bdb      	subs	r3, r3, r7
 800b696:	4638      	mov	r0, r7
 800b698:	6013      	str	r3, [r2, #0]
 800b69a:	b004      	add	sp, #16
 800b69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a0:	1c59      	adds	r1, r3, #1
 800b6a2:	9103      	str	r1, [sp, #12]
 800b6a4:	701a      	strb	r2, [r3, #0]
 800b6a6:	e7f0      	b.n	800b68a <__cvt+0xa6>

0800b6a8 <__exponent>:
 800b6a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2900      	cmp	r1, #0
 800b6ae:	bfb8      	it	lt
 800b6b0:	4249      	neglt	r1, r1
 800b6b2:	f803 2b02 	strb.w	r2, [r3], #2
 800b6b6:	bfb4      	ite	lt
 800b6b8:	222d      	movlt	r2, #45	; 0x2d
 800b6ba:	222b      	movge	r2, #43	; 0x2b
 800b6bc:	2909      	cmp	r1, #9
 800b6be:	7042      	strb	r2, [r0, #1]
 800b6c0:	dd2a      	ble.n	800b718 <__exponent+0x70>
 800b6c2:	f10d 0407 	add.w	r4, sp, #7
 800b6c6:	46a4      	mov	ip, r4
 800b6c8:	270a      	movs	r7, #10
 800b6ca:	46a6      	mov	lr, r4
 800b6cc:	460a      	mov	r2, r1
 800b6ce:	fb91 f6f7 	sdiv	r6, r1, r7
 800b6d2:	fb07 1516 	mls	r5, r7, r6, r1
 800b6d6:	3530      	adds	r5, #48	; 0x30
 800b6d8:	2a63      	cmp	r2, #99	; 0x63
 800b6da:	f104 34ff 	add.w	r4, r4, #4294967295
 800b6de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b6e2:	4631      	mov	r1, r6
 800b6e4:	dcf1      	bgt.n	800b6ca <__exponent+0x22>
 800b6e6:	3130      	adds	r1, #48	; 0x30
 800b6e8:	f1ae 0502 	sub.w	r5, lr, #2
 800b6ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b6f0:	1c44      	adds	r4, r0, #1
 800b6f2:	4629      	mov	r1, r5
 800b6f4:	4561      	cmp	r1, ip
 800b6f6:	d30a      	bcc.n	800b70e <__exponent+0x66>
 800b6f8:	f10d 0209 	add.w	r2, sp, #9
 800b6fc:	eba2 020e 	sub.w	r2, r2, lr
 800b700:	4565      	cmp	r5, ip
 800b702:	bf88      	it	hi
 800b704:	2200      	movhi	r2, #0
 800b706:	4413      	add	r3, r2
 800b708:	1a18      	subs	r0, r3, r0
 800b70a:	b003      	add	sp, #12
 800b70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b70e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b712:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b716:	e7ed      	b.n	800b6f4 <__exponent+0x4c>
 800b718:	2330      	movs	r3, #48	; 0x30
 800b71a:	3130      	adds	r1, #48	; 0x30
 800b71c:	7083      	strb	r3, [r0, #2]
 800b71e:	70c1      	strb	r1, [r0, #3]
 800b720:	1d03      	adds	r3, r0, #4
 800b722:	e7f1      	b.n	800b708 <__exponent+0x60>

0800b724 <_printf_float>:
 800b724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b728:	ed2d 8b02 	vpush	{d8}
 800b72c:	b08d      	sub	sp, #52	; 0x34
 800b72e:	460c      	mov	r4, r1
 800b730:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b734:	4616      	mov	r6, r2
 800b736:	461f      	mov	r7, r3
 800b738:	4605      	mov	r5, r0
 800b73a:	f001 fa8b 	bl	800cc54 <_localeconv_r>
 800b73e:	f8d0 a000 	ldr.w	sl, [r0]
 800b742:	4650      	mov	r0, sl
 800b744:	f7f4 fd4c 	bl	80001e0 <strlen>
 800b748:	2300      	movs	r3, #0
 800b74a:	930a      	str	r3, [sp, #40]	; 0x28
 800b74c:	6823      	ldr	r3, [r4, #0]
 800b74e:	9305      	str	r3, [sp, #20]
 800b750:	f8d8 3000 	ldr.w	r3, [r8]
 800b754:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b758:	3307      	adds	r3, #7
 800b75a:	f023 0307 	bic.w	r3, r3, #7
 800b75e:	f103 0208 	add.w	r2, r3, #8
 800b762:	f8c8 2000 	str.w	r2, [r8]
 800b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b76e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b772:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b776:	9307      	str	r3, [sp, #28]
 800b778:	f8cd 8018 	str.w	r8, [sp, #24]
 800b77c:	ee08 0a10 	vmov	s16, r0
 800b780:	4b9f      	ldr	r3, [pc, #636]	; (800ba00 <_printf_float+0x2dc>)
 800b782:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b786:	f04f 32ff 	mov.w	r2, #4294967295
 800b78a:	f7f5 f9d7 	bl	8000b3c <__aeabi_dcmpun>
 800b78e:	bb88      	cbnz	r0, 800b7f4 <_printf_float+0xd0>
 800b790:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b794:	4b9a      	ldr	r3, [pc, #616]	; (800ba00 <_printf_float+0x2dc>)
 800b796:	f04f 32ff 	mov.w	r2, #4294967295
 800b79a:	f7f5 f9b1 	bl	8000b00 <__aeabi_dcmple>
 800b79e:	bb48      	cbnz	r0, 800b7f4 <_printf_float+0xd0>
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	4649      	mov	r1, r9
 800b7a8:	f7f5 f9a0 	bl	8000aec <__aeabi_dcmplt>
 800b7ac:	b110      	cbz	r0, 800b7b4 <_printf_float+0x90>
 800b7ae:	232d      	movs	r3, #45	; 0x2d
 800b7b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7b4:	4b93      	ldr	r3, [pc, #588]	; (800ba04 <_printf_float+0x2e0>)
 800b7b6:	4894      	ldr	r0, [pc, #592]	; (800ba08 <_printf_float+0x2e4>)
 800b7b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b7bc:	bf94      	ite	ls
 800b7be:	4698      	movls	r8, r3
 800b7c0:	4680      	movhi	r8, r0
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	6123      	str	r3, [r4, #16]
 800b7c6:	9b05      	ldr	r3, [sp, #20]
 800b7c8:	f023 0204 	bic.w	r2, r3, #4
 800b7cc:	6022      	str	r2, [r4, #0]
 800b7ce:	f04f 0900 	mov.w	r9, #0
 800b7d2:	9700      	str	r7, [sp, #0]
 800b7d4:	4633      	mov	r3, r6
 800b7d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b7d8:	4621      	mov	r1, r4
 800b7da:	4628      	mov	r0, r5
 800b7dc:	f000 f9d8 	bl	800bb90 <_printf_common>
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	f040 8090 	bne.w	800b906 <_printf_float+0x1e2>
 800b7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ea:	b00d      	add	sp, #52	; 0x34
 800b7ec:	ecbd 8b02 	vpop	{d8}
 800b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f4:	4642      	mov	r2, r8
 800b7f6:	464b      	mov	r3, r9
 800b7f8:	4640      	mov	r0, r8
 800b7fa:	4649      	mov	r1, r9
 800b7fc:	f7f5 f99e 	bl	8000b3c <__aeabi_dcmpun>
 800b800:	b140      	cbz	r0, 800b814 <_printf_float+0xf0>
 800b802:	464b      	mov	r3, r9
 800b804:	2b00      	cmp	r3, #0
 800b806:	bfbc      	itt	lt
 800b808:	232d      	movlt	r3, #45	; 0x2d
 800b80a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b80e:	487f      	ldr	r0, [pc, #508]	; (800ba0c <_printf_float+0x2e8>)
 800b810:	4b7f      	ldr	r3, [pc, #508]	; (800ba10 <_printf_float+0x2ec>)
 800b812:	e7d1      	b.n	800b7b8 <_printf_float+0x94>
 800b814:	6863      	ldr	r3, [r4, #4]
 800b816:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b81a:	9206      	str	r2, [sp, #24]
 800b81c:	1c5a      	adds	r2, r3, #1
 800b81e:	d13f      	bne.n	800b8a0 <_printf_float+0x17c>
 800b820:	2306      	movs	r3, #6
 800b822:	6063      	str	r3, [r4, #4]
 800b824:	9b05      	ldr	r3, [sp, #20]
 800b826:	6861      	ldr	r1, [r4, #4]
 800b828:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b82c:	2300      	movs	r3, #0
 800b82e:	9303      	str	r3, [sp, #12]
 800b830:	ab0a      	add	r3, sp, #40	; 0x28
 800b832:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b836:	ab09      	add	r3, sp, #36	; 0x24
 800b838:	ec49 8b10 	vmov	d0, r8, r9
 800b83c:	9300      	str	r3, [sp, #0]
 800b83e:	6022      	str	r2, [r4, #0]
 800b840:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b844:	4628      	mov	r0, r5
 800b846:	f7ff fecd 	bl	800b5e4 <__cvt>
 800b84a:	9b06      	ldr	r3, [sp, #24]
 800b84c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b84e:	2b47      	cmp	r3, #71	; 0x47
 800b850:	4680      	mov	r8, r0
 800b852:	d108      	bne.n	800b866 <_printf_float+0x142>
 800b854:	1cc8      	adds	r0, r1, #3
 800b856:	db02      	blt.n	800b85e <_printf_float+0x13a>
 800b858:	6863      	ldr	r3, [r4, #4]
 800b85a:	4299      	cmp	r1, r3
 800b85c:	dd41      	ble.n	800b8e2 <_printf_float+0x1be>
 800b85e:	f1ab 0b02 	sub.w	fp, fp, #2
 800b862:	fa5f fb8b 	uxtb.w	fp, fp
 800b866:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b86a:	d820      	bhi.n	800b8ae <_printf_float+0x18a>
 800b86c:	3901      	subs	r1, #1
 800b86e:	465a      	mov	r2, fp
 800b870:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b874:	9109      	str	r1, [sp, #36]	; 0x24
 800b876:	f7ff ff17 	bl	800b6a8 <__exponent>
 800b87a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b87c:	1813      	adds	r3, r2, r0
 800b87e:	2a01      	cmp	r2, #1
 800b880:	4681      	mov	r9, r0
 800b882:	6123      	str	r3, [r4, #16]
 800b884:	dc02      	bgt.n	800b88c <_printf_float+0x168>
 800b886:	6822      	ldr	r2, [r4, #0]
 800b888:	07d2      	lsls	r2, r2, #31
 800b88a:	d501      	bpl.n	800b890 <_printf_float+0x16c>
 800b88c:	3301      	adds	r3, #1
 800b88e:	6123      	str	r3, [r4, #16]
 800b890:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b894:	2b00      	cmp	r3, #0
 800b896:	d09c      	beq.n	800b7d2 <_printf_float+0xae>
 800b898:	232d      	movs	r3, #45	; 0x2d
 800b89a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b89e:	e798      	b.n	800b7d2 <_printf_float+0xae>
 800b8a0:	9a06      	ldr	r2, [sp, #24]
 800b8a2:	2a47      	cmp	r2, #71	; 0x47
 800b8a4:	d1be      	bne.n	800b824 <_printf_float+0x100>
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1bc      	bne.n	800b824 <_printf_float+0x100>
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e7b9      	b.n	800b822 <_printf_float+0xfe>
 800b8ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b8b2:	d118      	bne.n	800b8e6 <_printf_float+0x1c2>
 800b8b4:	2900      	cmp	r1, #0
 800b8b6:	6863      	ldr	r3, [r4, #4]
 800b8b8:	dd0b      	ble.n	800b8d2 <_printf_float+0x1ae>
 800b8ba:	6121      	str	r1, [r4, #16]
 800b8bc:	b913      	cbnz	r3, 800b8c4 <_printf_float+0x1a0>
 800b8be:	6822      	ldr	r2, [r4, #0]
 800b8c0:	07d0      	lsls	r0, r2, #31
 800b8c2:	d502      	bpl.n	800b8ca <_printf_float+0x1a6>
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	440b      	add	r3, r1
 800b8c8:	6123      	str	r3, [r4, #16]
 800b8ca:	65a1      	str	r1, [r4, #88]	; 0x58
 800b8cc:	f04f 0900 	mov.w	r9, #0
 800b8d0:	e7de      	b.n	800b890 <_printf_float+0x16c>
 800b8d2:	b913      	cbnz	r3, 800b8da <_printf_float+0x1b6>
 800b8d4:	6822      	ldr	r2, [r4, #0]
 800b8d6:	07d2      	lsls	r2, r2, #31
 800b8d8:	d501      	bpl.n	800b8de <_printf_float+0x1ba>
 800b8da:	3302      	adds	r3, #2
 800b8dc:	e7f4      	b.n	800b8c8 <_printf_float+0x1a4>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e7f2      	b.n	800b8c8 <_printf_float+0x1a4>
 800b8e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8e8:	4299      	cmp	r1, r3
 800b8ea:	db05      	blt.n	800b8f8 <_printf_float+0x1d4>
 800b8ec:	6823      	ldr	r3, [r4, #0]
 800b8ee:	6121      	str	r1, [r4, #16]
 800b8f0:	07d8      	lsls	r0, r3, #31
 800b8f2:	d5ea      	bpl.n	800b8ca <_printf_float+0x1a6>
 800b8f4:	1c4b      	adds	r3, r1, #1
 800b8f6:	e7e7      	b.n	800b8c8 <_printf_float+0x1a4>
 800b8f8:	2900      	cmp	r1, #0
 800b8fa:	bfd4      	ite	le
 800b8fc:	f1c1 0202 	rsble	r2, r1, #2
 800b900:	2201      	movgt	r2, #1
 800b902:	4413      	add	r3, r2
 800b904:	e7e0      	b.n	800b8c8 <_printf_float+0x1a4>
 800b906:	6823      	ldr	r3, [r4, #0]
 800b908:	055a      	lsls	r2, r3, #21
 800b90a:	d407      	bmi.n	800b91c <_printf_float+0x1f8>
 800b90c:	6923      	ldr	r3, [r4, #16]
 800b90e:	4642      	mov	r2, r8
 800b910:	4631      	mov	r1, r6
 800b912:	4628      	mov	r0, r5
 800b914:	47b8      	blx	r7
 800b916:	3001      	adds	r0, #1
 800b918:	d12c      	bne.n	800b974 <_printf_float+0x250>
 800b91a:	e764      	b.n	800b7e6 <_printf_float+0xc2>
 800b91c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b920:	f240 80e0 	bls.w	800bae4 <_printf_float+0x3c0>
 800b924:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b928:	2200      	movs	r2, #0
 800b92a:	2300      	movs	r3, #0
 800b92c:	f7f5 f8d4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b930:	2800      	cmp	r0, #0
 800b932:	d034      	beq.n	800b99e <_printf_float+0x27a>
 800b934:	4a37      	ldr	r2, [pc, #220]	; (800ba14 <_printf_float+0x2f0>)
 800b936:	2301      	movs	r3, #1
 800b938:	4631      	mov	r1, r6
 800b93a:	4628      	mov	r0, r5
 800b93c:	47b8      	blx	r7
 800b93e:	3001      	adds	r0, #1
 800b940:	f43f af51 	beq.w	800b7e6 <_printf_float+0xc2>
 800b944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b948:	429a      	cmp	r2, r3
 800b94a:	db02      	blt.n	800b952 <_printf_float+0x22e>
 800b94c:	6823      	ldr	r3, [r4, #0]
 800b94e:	07d8      	lsls	r0, r3, #31
 800b950:	d510      	bpl.n	800b974 <_printf_float+0x250>
 800b952:	ee18 3a10 	vmov	r3, s16
 800b956:	4652      	mov	r2, sl
 800b958:	4631      	mov	r1, r6
 800b95a:	4628      	mov	r0, r5
 800b95c:	47b8      	blx	r7
 800b95e:	3001      	adds	r0, #1
 800b960:	f43f af41 	beq.w	800b7e6 <_printf_float+0xc2>
 800b964:	f04f 0800 	mov.w	r8, #0
 800b968:	f104 091a 	add.w	r9, r4, #26
 800b96c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b96e:	3b01      	subs	r3, #1
 800b970:	4543      	cmp	r3, r8
 800b972:	dc09      	bgt.n	800b988 <_printf_float+0x264>
 800b974:	6823      	ldr	r3, [r4, #0]
 800b976:	079b      	lsls	r3, r3, #30
 800b978:	f100 8105 	bmi.w	800bb86 <_printf_float+0x462>
 800b97c:	68e0      	ldr	r0, [r4, #12]
 800b97e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b980:	4298      	cmp	r0, r3
 800b982:	bfb8      	it	lt
 800b984:	4618      	movlt	r0, r3
 800b986:	e730      	b.n	800b7ea <_printf_float+0xc6>
 800b988:	2301      	movs	r3, #1
 800b98a:	464a      	mov	r2, r9
 800b98c:	4631      	mov	r1, r6
 800b98e:	4628      	mov	r0, r5
 800b990:	47b8      	blx	r7
 800b992:	3001      	adds	r0, #1
 800b994:	f43f af27 	beq.w	800b7e6 <_printf_float+0xc2>
 800b998:	f108 0801 	add.w	r8, r8, #1
 800b99c:	e7e6      	b.n	800b96c <_printf_float+0x248>
 800b99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	dc39      	bgt.n	800ba18 <_printf_float+0x2f4>
 800b9a4:	4a1b      	ldr	r2, [pc, #108]	; (800ba14 <_printf_float+0x2f0>)
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	4631      	mov	r1, r6
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	47b8      	blx	r7
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	f43f af19 	beq.w	800b7e6 <_printf_float+0xc2>
 800b9b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	d102      	bne.n	800b9c2 <_printf_float+0x29e>
 800b9bc:	6823      	ldr	r3, [r4, #0]
 800b9be:	07d9      	lsls	r1, r3, #31
 800b9c0:	d5d8      	bpl.n	800b974 <_printf_float+0x250>
 800b9c2:	ee18 3a10 	vmov	r3, s16
 800b9c6:	4652      	mov	r2, sl
 800b9c8:	4631      	mov	r1, r6
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	47b8      	blx	r7
 800b9ce:	3001      	adds	r0, #1
 800b9d0:	f43f af09 	beq.w	800b7e6 <_printf_float+0xc2>
 800b9d4:	f04f 0900 	mov.w	r9, #0
 800b9d8:	f104 0a1a 	add.w	sl, r4, #26
 800b9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9de:	425b      	negs	r3, r3
 800b9e0:	454b      	cmp	r3, r9
 800b9e2:	dc01      	bgt.n	800b9e8 <_printf_float+0x2c4>
 800b9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9e6:	e792      	b.n	800b90e <_printf_float+0x1ea>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	4652      	mov	r2, sl
 800b9ec:	4631      	mov	r1, r6
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	47b8      	blx	r7
 800b9f2:	3001      	adds	r0, #1
 800b9f4:	f43f aef7 	beq.w	800b7e6 <_printf_float+0xc2>
 800b9f8:	f109 0901 	add.w	r9, r9, #1
 800b9fc:	e7ee      	b.n	800b9dc <_printf_float+0x2b8>
 800b9fe:	bf00      	nop
 800ba00:	7fefffff 	.word	0x7fefffff
 800ba04:	0800e084 	.word	0x0800e084
 800ba08:	0800e088 	.word	0x0800e088
 800ba0c:	0800e090 	.word	0x0800e090
 800ba10:	0800e08c 	.word	0x0800e08c
 800ba14:	0800e094 	.word	0x0800e094
 800ba18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	bfa8      	it	ge
 800ba20:	461a      	movge	r2, r3
 800ba22:	2a00      	cmp	r2, #0
 800ba24:	4691      	mov	r9, r2
 800ba26:	dc37      	bgt.n	800ba98 <_printf_float+0x374>
 800ba28:	f04f 0b00 	mov.w	fp, #0
 800ba2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba30:	f104 021a 	add.w	r2, r4, #26
 800ba34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba36:	9305      	str	r3, [sp, #20]
 800ba38:	eba3 0309 	sub.w	r3, r3, r9
 800ba3c:	455b      	cmp	r3, fp
 800ba3e:	dc33      	bgt.n	800baa8 <_printf_float+0x384>
 800ba40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba44:	429a      	cmp	r2, r3
 800ba46:	db3b      	blt.n	800bac0 <_printf_float+0x39c>
 800ba48:	6823      	ldr	r3, [r4, #0]
 800ba4a:	07da      	lsls	r2, r3, #31
 800ba4c:	d438      	bmi.n	800bac0 <_printf_float+0x39c>
 800ba4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba50:	9a05      	ldr	r2, [sp, #20]
 800ba52:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba54:	1a9a      	subs	r2, r3, r2
 800ba56:	eba3 0901 	sub.w	r9, r3, r1
 800ba5a:	4591      	cmp	r9, r2
 800ba5c:	bfa8      	it	ge
 800ba5e:	4691      	movge	r9, r2
 800ba60:	f1b9 0f00 	cmp.w	r9, #0
 800ba64:	dc35      	bgt.n	800bad2 <_printf_float+0x3ae>
 800ba66:	f04f 0800 	mov.w	r8, #0
 800ba6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba6e:	f104 0a1a 	add.w	sl, r4, #26
 800ba72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba76:	1a9b      	subs	r3, r3, r2
 800ba78:	eba3 0309 	sub.w	r3, r3, r9
 800ba7c:	4543      	cmp	r3, r8
 800ba7e:	f77f af79 	ble.w	800b974 <_printf_float+0x250>
 800ba82:	2301      	movs	r3, #1
 800ba84:	4652      	mov	r2, sl
 800ba86:	4631      	mov	r1, r6
 800ba88:	4628      	mov	r0, r5
 800ba8a:	47b8      	blx	r7
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	f43f aeaa 	beq.w	800b7e6 <_printf_float+0xc2>
 800ba92:	f108 0801 	add.w	r8, r8, #1
 800ba96:	e7ec      	b.n	800ba72 <_printf_float+0x34e>
 800ba98:	4613      	mov	r3, r2
 800ba9a:	4631      	mov	r1, r6
 800ba9c:	4642      	mov	r2, r8
 800ba9e:	4628      	mov	r0, r5
 800baa0:	47b8      	blx	r7
 800baa2:	3001      	adds	r0, #1
 800baa4:	d1c0      	bne.n	800ba28 <_printf_float+0x304>
 800baa6:	e69e      	b.n	800b7e6 <_printf_float+0xc2>
 800baa8:	2301      	movs	r3, #1
 800baaa:	4631      	mov	r1, r6
 800baac:	4628      	mov	r0, r5
 800baae:	9205      	str	r2, [sp, #20]
 800bab0:	47b8      	blx	r7
 800bab2:	3001      	adds	r0, #1
 800bab4:	f43f ae97 	beq.w	800b7e6 <_printf_float+0xc2>
 800bab8:	9a05      	ldr	r2, [sp, #20]
 800baba:	f10b 0b01 	add.w	fp, fp, #1
 800babe:	e7b9      	b.n	800ba34 <_printf_float+0x310>
 800bac0:	ee18 3a10 	vmov	r3, s16
 800bac4:	4652      	mov	r2, sl
 800bac6:	4631      	mov	r1, r6
 800bac8:	4628      	mov	r0, r5
 800baca:	47b8      	blx	r7
 800bacc:	3001      	adds	r0, #1
 800bace:	d1be      	bne.n	800ba4e <_printf_float+0x32a>
 800bad0:	e689      	b.n	800b7e6 <_printf_float+0xc2>
 800bad2:	9a05      	ldr	r2, [sp, #20]
 800bad4:	464b      	mov	r3, r9
 800bad6:	4442      	add	r2, r8
 800bad8:	4631      	mov	r1, r6
 800bada:	4628      	mov	r0, r5
 800badc:	47b8      	blx	r7
 800bade:	3001      	adds	r0, #1
 800bae0:	d1c1      	bne.n	800ba66 <_printf_float+0x342>
 800bae2:	e680      	b.n	800b7e6 <_printf_float+0xc2>
 800bae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bae6:	2a01      	cmp	r2, #1
 800bae8:	dc01      	bgt.n	800baee <_printf_float+0x3ca>
 800baea:	07db      	lsls	r3, r3, #31
 800baec:	d538      	bpl.n	800bb60 <_printf_float+0x43c>
 800baee:	2301      	movs	r3, #1
 800baf0:	4642      	mov	r2, r8
 800baf2:	4631      	mov	r1, r6
 800baf4:	4628      	mov	r0, r5
 800baf6:	47b8      	blx	r7
 800baf8:	3001      	adds	r0, #1
 800bafa:	f43f ae74 	beq.w	800b7e6 <_printf_float+0xc2>
 800bafe:	ee18 3a10 	vmov	r3, s16
 800bb02:	4652      	mov	r2, sl
 800bb04:	4631      	mov	r1, r6
 800bb06:	4628      	mov	r0, r5
 800bb08:	47b8      	blx	r7
 800bb0a:	3001      	adds	r0, #1
 800bb0c:	f43f ae6b 	beq.w	800b7e6 <_printf_float+0xc2>
 800bb10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb14:	2200      	movs	r2, #0
 800bb16:	2300      	movs	r3, #0
 800bb18:	f7f4 ffde 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb1c:	b9d8      	cbnz	r0, 800bb56 <_printf_float+0x432>
 800bb1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb20:	f108 0201 	add.w	r2, r8, #1
 800bb24:	3b01      	subs	r3, #1
 800bb26:	4631      	mov	r1, r6
 800bb28:	4628      	mov	r0, r5
 800bb2a:	47b8      	blx	r7
 800bb2c:	3001      	adds	r0, #1
 800bb2e:	d10e      	bne.n	800bb4e <_printf_float+0x42a>
 800bb30:	e659      	b.n	800b7e6 <_printf_float+0xc2>
 800bb32:	2301      	movs	r3, #1
 800bb34:	4652      	mov	r2, sl
 800bb36:	4631      	mov	r1, r6
 800bb38:	4628      	mov	r0, r5
 800bb3a:	47b8      	blx	r7
 800bb3c:	3001      	adds	r0, #1
 800bb3e:	f43f ae52 	beq.w	800b7e6 <_printf_float+0xc2>
 800bb42:	f108 0801 	add.w	r8, r8, #1
 800bb46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	4543      	cmp	r3, r8
 800bb4c:	dcf1      	bgt.n	800bb32 <_printf_float+0x40e>
 800bb4e:	464b      	mov	r3, r9
 800bb50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bb54:	e6dc      	b.n	800b910 <_printf_float+0x1ec>
 800bb56:	f04f 0800 	mov.w	r8, #0
 800bb5a:	f104 0a1a 	add.w	sl, r4, #26
 800bb5e:	e7f2      	b.n	800bb46 <_printf_float+0x422>
 800bb60:	2301      	movs	r3, #1
 800bb62:	4642      	mov	r2, r8
 800bb64:	e7df      	b.n	800bb26 <_printf_float+0x402>
 800bb66:	2301      	movs	r3, #1
 800bb68:	464a      	mov	r2, r9
 800bb6a:	4631      	mov	r1, r6
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	47b8      	blx	r7
 800bb70:	3001      	adds	r0, #1
 800bb72:	f43f ae38 	beq.w	800b7e6 <_printf_float+0xc2>
 800bb76:	f108 0801 	add.w	r8, r8, #1
 800bb7a:	68e3      	ldr	r3, [r4, #12]
 800bb7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb7e:	1a5b      	subs	r3, r3, r1
 800bb80:	4543      	cmp	r3, r8
 800bb82:	dcf0      	bgt.n	800bb66 <_printf_float+0x442>
 800bb84:	e6fa      	b.n	800b97c <_printf_float+0x258>
 800bb86:	f04f 0800 	mov.w	r8, #0
 800bb8a:	f104 0919 	add.w	r9, r4, #25
 800bb8e:	e7f4      	b.n	800bb7a <_printf_float+0x456>

0800bb90 <_printf_common>:
 800bb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb94:	4616      	mov	r6, r2
 800bb96:	4699      	mov	r9, r3
 800bb98:	688a      	ldr	r2, [r1, #8]
 800bb9a:	690b      	ldr	r3, [r1, #16]
 800bb9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bba0:	4293      	cmp	r3, r2
 800bba2:	bfb8      	it	lt
 800bba4:	4613      	movlt	r3, r2
 800bba6:	6033      	str	r3, [r6, #0]
 800bba8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bbac:	4607      	mov	r7, r0
 800bbae:	460c      	mov	r4, r1
 800bbb0:	b10a      	cbz	r2, 800bbb6 <_printf_common+0x26>
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	6033      	str	r3, [r6, #0]
 800bbb6:	6823      	ldr	r3, [r4, #0]
 800bbb8:	0699      	lsls	r1, r3, #26
 800bbba:	bf42      	ittt	mi
 800bbbc:	6833      	ldrmi	r3, [r6, #0]
 800bbbe:	3302      	addmi	r3, #2
 800bbc0:	6033      	strmi	r3, [r6, #0]
 800bbc2:	6825      	ldr	r5, [r4, #0]
 800bbc4:	f015 0506 	ands.w	r5, r5, #6
 800bbc8:	d106      	bne.n	800bbd8 <_printf_common+0x48>
 800bbca:	f104 0a19 	add.w	sl, r4, #25
 800bbce:	68e3      	ldr	r3, [r4, #12]
 800bbd0:	6832      	ldr	r2, [r6, #0]
 800bbd2:	1a9b      	subs	r3, r3, r2
 800bbd4:	42ab      	cmp	r3, r5
 800bbd6:	dc26      	bgt.n	800bc26 <_printf_common+0x96>
 800bbd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bbdc:	1e13      	subs	r3, r2, #0
 800bbde:	6822      	ldr	r2, [r4, #0]
 800bbe0:	bf18      	it	ne
 800bbe2:	2301      	movne	r3, #1
 800bbe4:	0692      	lsls	r2, r2, #26
 800bbe6:	d42b      	bmi.n	800bc40 <_printf_common+0xb0>
 800bbe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbec:	4649      	mov	r1, r9
 800bbee:	4638      	mov	r0, r7
 800bbf0:	47c0      	blx	r8
 800bbf2:	3001      	adds	r0, #1
 800bbf4:	d01e      	beq.n	800bc34 <_printf_common+0xa4>
 800bbf6:	6823      	ldr	r3, [r4, #0]
 800bbf8:	68e5      	ldr	r5, [r4, #12]
 800bbfa:	6832      	ldr	r2, [r6, #0]
 800bbfc:	f003 0306 	and.w	r3, r3, #6
 800bc00:	2b04      	cmp	r3, #4
 800bc02:	bf08      	it	eq
 800bc04:	1aad      	subeq	r5, r5, r2
 800bc06:	68a3      	ldr	r3, [r4, #8]
 800bc08:	6922      	ldr	r2, [r4, #16]
 800bc0a:	bf0c      	ite	eq
 800bc0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc10:	2500      	movne	r5, #0
 800bc12:	4293      	cmp	r3, r2
 800bc14:	bfc4      	itt	gt
 800bc16:	1a9b      	subgt	r3, r3, r2
 800bc18:	18ed      	addgt	r5, r5, r3
 800bc1a:	2600      	movs	r6, #0
 800bc1c:	341a      	adds	r4, #26
 800bc1e:	42b5      	cmp	r5, r6
 800bc20:	d11a      	bne.n	800bc58 <_printf_common+0xc8>
 800bc22:	2000      	movs	r0, #0
 800bc24:	e008      	b.n	800bc38 <_printf_common+0xa8>
 800bc26:	2301      	movs	r3, #1
 800bc28:	4652      	mov	r2, sl
 800bc2a:	4649      	mov	r1, r9
 800bc2c:	4638      	mov	r0, r7
 800bc2e:	47c0      	blx	r8
 800bc30:	3001      	adds	r0, #1
 800bc32:	d103      	bne.n	800bc3c <_printf_common+0xac>
 800bc34:	f04f 30ff 	mov.w	r0, #4294967295
 800bc38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc3c:	3501      	adds	r5, #1
 800bc3e:	e7c6      	b.n	800bbce <_printf_common+0x3e>
 800bc40:	18e1      	adds	r1, r4, r3
 800bc42:	1c5a      	adds	r2, r3, #1
 800bc44:	2030      	movs	r0, #48	; 0x30
 800bc46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc4a:	4422      	add	r2, r4
 800bc4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc54:	3302      	adds	r3, #2
 800bc56:	e7c7      	b.n	800bbe8 <_printf_common+0x58>
 800bc58:	2301      	movs	r3, #1
 800bc5a:	4622      	mov	r2, r4
 800bc5c:	4649      	mov	r1, r9
 800bc5e:	4638      	mov	r0, r7
 800bc60:	47c0      	blx	r8
 800bc62:	3001      	adds	r0, #1
 800bc64:	d0e6      	beq.n	800bc34 <_printf_common+0xa4>
 800bc66:	3601      	adds	r6, #1
 800bc68:	e7d9      	b.n	800bc1e <_printf_common+0x8e>
	...

0800bc6c <_printf_i>:
 800bc6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc70:	7e0f      	ldrb	r7, [r1, #24]
 800bc72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc74:	2f78      	cmp	r7, #120	; 0x78
 800bc76:	4691      	mov	r9, r2
 800bc78:	4680      	mov	r8, r0
 800bc7a:	460c      	mov	r4, r1
 800bc7c:	469a      	mov	sl, r3
 800bc7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc82:	d807      	bhi.n	800bc94 <_printf_i+0x28>
 800bc84:	2f62      	cmp	r7, #98	; 0x62
 800bc86:	d80a      	bhi.n	800bc9e <_printf_i+0x32>
 800bc88:	2f00      	cmp	r7, #0
 800bc8a:	f000 80d8 	beq.w	800be3e <_printf_i+0x1d2>
 800bc8e:	2f58      	cmp	r7, #88	; 0x58
 800bc90:	f000 80a3 	beq.w	800bdda <_printf_i+0x16e>
 800bc94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc9c:	e03a      	b.n	800bd14 <_printf_i+0xa8>
 800bc9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bca2:	2b15      	cmp	r3, #21
 800bca4:	d8f6      	bhi.n	800bc94 <_printf_i+0x28>
 800bca6:	a101      	add	r1, pc, #4	; (adr r1, 800bcac <_printf_i+0x40>)
 800bca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bcac:	0800bd05 	.word	0x0800bd05
 800bcb0:	0800bd19 	.word	0x0800bd19
 800bcb4:	0800bc95 	.word	0x0800bc95
 800bcb8:	0800bc95 	.word	0x0800bc95
 800bcbc:	0800bc95 	.word	0x0800bc95
 800bcc0:	0800bc95 	.word	0x0800bc95
 800bcc4:	0800bd19 	.word	0x0800bd19
 800bcc8:	0800bc95 	.word	0x0800bc95
 800bccc:	0800bc95 	.word	0x0800bc95
 800bcd0:	0800bc95 	.word	0x0800bc95
 800bcd4:	0800bc95 	.word	0x0800bc95
 800bcd8:	0800be25 	.word	0x0800be25
 800bcdc:	0800bd49 	.word	0x0800bd49
 800bce0:	0800be07 	.word	0x0800be07
 800bce4:	0800bc95 	.word	0x0800bc95
 800bce8:	0800bc95 	.word	0x0800bc95
 800bcec:	0800be47 	.word	0x0800be47
 800bcf0:	0800bc95 	.word	0x0800bc95
 800bcf4:	0800bd49 	.word	0x0800bd49
 800bcf8:	0800bc95 	.word	0x0800bc95
 800bcfc:	0800bc95 	.word	0x0800bc95
 800bd00:	0800be0f 	.word	0x0800be0f
 800bd04:	682b      	ldr	r3, [r5, #0]
 800bd06:	1d1a      	adds	r2, r3, #4
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	602a      	str	r2, [r5, #0]
 800bd0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd14:	2301      	movs	r3, #1
 800bd16:	e0a3      	b.n	800be60 <_printf_i+0x1f4>
 800bd18:	6820      	ldr	r0, [r4, #0]
 800bd1a:	6829      	ldr	r1, [r5, #0]
 800bd1c:	0606      	lsls	r6, r0, #24
 800bd1e:	f101 0304 	add.w	r3, r1, #4
 800bd22:	d50a      	bpl.n	800bd3a <_printf_i+0xce>
 800bd24:	680e      	ldr	r6, [r1, #0]
 800bd26:	602b      	str	r3, [r5, #0]
 800bd28:	2e00      	cmp	r6, #0
 800bd2a:	da03      	bge.n	800bd34 <_printf_i+0xc8>
 800bd2c:	232d      	movs	r3, #45	; 0x2d
 800bd2e:	4276      	negs	r6, r6
 800bd30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd34:	485e      	ldr	r0, [pc, #376]	; (800beb0 <_printf_i+0x244>)
 800bd36:	230a      	movs	r3, #10
 800bd38:	e019      	b.n	800bd6e <_printf_i+0x102>
 800bd3a:	680e      	ldr	r6, [r1, #0]
 800bd3c:	602b      	str	r3, [r5, #0]
 800bd3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd42:	bf18      	it	ne
 800bd44:	b236      	sxthne	r6, r6
 800bd46:	e7ef      	b.n	800bd28 <_printf_i+0xbc>
 800bd48:	682b      	ldr	r3, [r5, #0]
 800bd4a:	6820      	ldr	r0, [r4, #0]
 800bd4c:	1d19      	adds	r1, r3, #4
 800bd4e:	6029      	str	r1, [r5, #0]
 800bd50:	0601      	lsls	r1, r0, #24
 800bd52:	d501      	bpl.n	800bd58 <_printf_i+0xec>
 800bd54:	681e      	ldr	r6, [r3, #0]
 800bd56:	e002      	b.n	800bd5e <_printf_i+0xf2>
 800bd58:	0646      	lsls	r6, r0, #25
 800bd5a:	d5fb      	bpl.n	800bd54 <_printf_i+0xe8>
 800bd5c:	881e      	ldrh	r6, [r3, #0]
 800bd5e:	4854      	ldr	r0, [pc, #336]	; (800beb0 <_printf_i+0x244>)
 800bd60:	2f6f      	cmp	r7, #111	; 0x6f
 800bd62:	bf0c      	ite	eq
 800bd64:	2308      	moveq	r3, #8
 800bd66:	230a      	movne	r3, #10
 800bd68:	2100      	movs	r1, #0
 800bd6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd6e:	6865      	ldr	r5, [r4, #4]
 800bd70:	60a5      	str	r5, [r4, #8]
 800bd72:	2d00      	cmp	r5, #0
 800bd74:	bfa2      	ittt	ge
 800bd76:	6821      	ldrge	r1, [r4, #0]
 800bd78:	f021 0104 	bicge.w	r1, r1, #4
 800bd7c:	6021      	strge	r1, [r4, #0]
 800bd7e:	b90e      	cbnz	r6, 800bd84 <_printf_i+0x118>
 800bd80:	2d00      	cmp	r5, #0
 800bd82:	d04d      	beq.n	800be20 <_printf_i+0x1b4>
 800bd84:	4615      	mov	r5, r2
 800bd86:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd8a:	fb03 6711 	mls	r7, r3, r1, r6
 800bd8e:	5dc7      	ldrb	r7, [r0, r7]
 800bd90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd94:	4637      	mov	r7, r6
 800bd96:	42bb      	cmp	r3, r7
 800bd98:	460e      	mov	r6, r1
 800bd9a:	d9f4      	bls.n	800bd86 <_printf_i+0x11a>
 800bd9c:	2b08      	cmp	r3, #8
 800bd9e:	d10b      	bne.n	800bdb8 <_printf_i+0x14c>
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	07de      	lsls	r6, r3, #31
 800bda4:	d508      	bpl.n	800bdb8 <_printf_i+0x14c>
 800bda6:	6923      	ldr	r3, [r4, #16]
 800bda8:	6861      	ldr	r1, [r4, #4]
 800bdaa:	4299      	cmp	r1, r3
 800bdac:	bfde      	ittt	le
 800bdae:	2330      	movle	r3, #48	; 0x30
 800bdb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bdb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bdb8:	1b52      	subs	r2, r2, r5
 800bdba:	6122      	str	r2, [r4, #16]
 800bdbc:	f8cd a000 	str.w	sl, [sp]
 800bdc0:	464b      	mov	r3, r9
 800bdc2:	aa03      	add	r2, sp, #12
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	4640      	mov	r0, r8
 800bdc8:	f7ff fee2 	bl	800bb90 <_printf_common>
 800bdcc:	3001      	adds	r0, #1
 800bdce:	d14c      	bne.n	800be6a <_printf_i+0x1fe>
 800bdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd4:	b004      	add	sp, #16
 800bdd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdda:	4835      	ldr	r0, [pc, #212]	; (800beb0 <_printf_i+0x244>)
 800bddc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bde0:	6829      	ldr	r1, [r5, #0]
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bde8:	6029      	str	r1, [r5, #0]
 800bdea:	061d      	lsls	r5, r3, #24
 800bdec:	d514      	bpl.n	800be18 <_printf_i+0x1ac>
 800bdee:	07df      	lsls	r7, r3, #31
 800bdf0:	bf44      	itt	mi
 800bdf2:	f043 0320 	orrmi.w	r3, r3, #32
 800bdf6:	6023      	strmi	r3, [r4, #0]
 800bdf8:	b91e      	cbnz	r6, 800be02 <_printf_i+0x196>
 800bdfa:	6823      	ldr	r3, [r4, #0]
 800bdfc:	f023 0320 	bic.w	r3, r3, #32
 800be00:	6023      	str	r3, [r4, #0]
 800be02:	2310      	movs	r3, #16
 800be04:	e7b0      	b.n	800bd68 <_printf_i+0xfc>
 800be06:	6823      	ldr	r3, [r4, #0]
 800be08:	f043 0320 	orr.w	r3, r3, #32
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	2378      	movs	r3, #120	; 0x78
 800be10:	4828      	ldr	r0, [pc, #160]	; (800beb4 <_printf_i+0x248>)
 800be12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be16:	e7e3      	b.n	800bde0 <_printf_i+0x174>
 800be18:	0659      	lsls	r1, r3, #25
 800be1a:	bf48      	it	mi
 800be1c:	b2b6      	uxthmi	r6, r6
 800be1e:	e7e6      	b.n	800bdee <_printf_i+0x182>
 800be20:	4615      	mov	r5, r2
 800be22:	e7bb      	b.n	800bd9c <_printf_i+0x130>
 800be24:	682b      	ldr	r3, [r5, #0]
 800be26:	6826      	ldr	r6, [r4, #0]
 800be28:	6961      	ldr	r1, [r4, #20]
 800be2a:	1d18      	adds	r0, r3, #4
 800be2c:	6028      	str	r0, [r5, #0]
 800be2e:	0635      	lsls	r5, r6, #24
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	d501      	bpl.n	800be38 <_printf_i+0x1cc>
 800be34:	6019      	str	r1, [r3, #0]
 800be36:	e002      	b.n	800be3e <_printf_i+0x1d2>
 800be38:	0670      	lsls	r0, r6, #25
 800be3a:	d5fb      	bpl.n	800be34 <_printf_i+0x1c8>
 800be3c:	8019      	strh	r1, [r3, #0]
 800be3e:	2300      	movs	r3, #0
 800be40:	6123      	str	r3, [r4, #16]
 800be42:	4615      	mov	r5, r2
 800be44:	e7ba      	b.n	800bdbc <_printf_i+0x150>
 800be46:	682b      	ldr	r3, [r5, #0]
 800be48:	1d1a      	adds	r2, r3, #4
 800be4a:	602a      	str	r2, [r5, #0]
 800be4c:	681d      	ldr	r5, [r3, #0]
 800be4e:	6862      	ldr	r2, [r4, #4]
 800be50:	2100      	movs	r1, #0
 800be52:	4628      	mov	r0, r5
 800be54:	f7f4 f9cc 	bl	80001f0 <memchr>
 800be58:	b108      	cbz	r0, 800be5e <_printf_i+0x1f2>
 800be5a:	1b40      	subs	r0, r0, r5
 800be5c:	6060      	str	r0, [r4, #4]
 800be5e:	6863      	ldr	r3, [r4, #4]
 800be60:	6123      	str	r3, [r4, #16]
 800be62:	2300      	movs	r3, #0
 800be64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be68:	e7a8      	b.n	800bdbc <_printf_i+0x150>
 800be6a:	6923      	ldr	r3, [r4, #16]
 800be6c:	462a      	mov	r2, r5
 800be6e:	4649      	mov	r1, r9
 800be70:	4640      	mov	r0, r8
 800be72:	47d0      	blx	sl
 800be74:	3001      	adds	r0, #1
 800be76:	d0ab      	beq.n	800bdd0 <_printf_i+0x164>
 800be78:	6823      	ldr	r3, [r4, #0]
 800be7a:	079b      	lsls	r3, r3, #30
 800be7c:	d413      	bmi.n	800bea6 <_printf_i+0x23a>
 800be7e:	68e0      	ldr	r0, [r4, #12]
 800be80:	9b03      	ldr	r3, [sp, #12]
 800be82:	4298      	cmp	r0, r3
 800be84:	bfb8      	it	lt
 800be86:	4618      	movlt	r0, r3
 800be88:	e7a4      	b.n	800bdd4 <_printf_i+0x168>
 800be8a:	2301      	movs	r3, #1
 800be8c:	4632      	mov	r2, r6
 800be8e:	4649      	mov	r1, r9
 800be90:	4640      	mov	r0, r8
 800be92:	47d0      	blx	sl
 800be94:	3001      	adds	r0, #1
 800be96:	d09b      	beq.n	800bdd0 <_printf_i+0x164>
 800be98:	3501      	adds	r5, #1
 800be9a:	68e3      	ldr	r3, [r4, #12]
 800be9c:	9903      	ldr	r1, [sp, #12]
 800be9e:	1a5b      	subs	r3, r3, r1
 800bea0:	42ab      	cmp	r3, r5
 800bea2:	dcf2      	bgt.n	800be8a <_printf_i+0x21e>
 800bea4:	e7eb      	b.n	800be7e <_printf_i+0x212>
 800bea6:	2500      	movs	r5, #0
 800bea8:	f104 0619 	add.w	r6, r4, #25
 800beac:	e7f5      	b.n	800be9a <_printf_i+0x22e>
 800beae:	bf00      	nop
 800beb0:	0800e096 	.word	0x0800e096
 800beb4:	0800e0a7 	.word	0x0800e0a7

0800beb8 <_sbrk_r>:
 800beb8:	b538      	push	{r3, r4, r5, lr}
 800beba:	4d06      	ldr	r5, [pc, #24]	; (800bed4 <_sbrk_r+0x1c>)
 800bebc:	2300      	movs	r3, #0
 800bebe:	4604      	mov	r4, r0
 800bec0:	4608      	mov	r0, r1
 800bec2:	602b      	str	r3, [r5, #0]
 800bec4:	f7f8 fcf2 	bl	80048ac <_sbrk>
 800bec8:	1c43      	adds	r3, r0, #1
 800beca:	d102      	bne.n	800bed2 <_sbrk_r+0x1a>
 800becc:	682b      	ldr	r3, [r5, #0]
 800bece:	b103      	cbz	r3, 800bed2 <_sbrk_r+0x1a>
 800bed0:	6023      	str	r3, [r4, #0]
 800bed2:	bd38      	pop	{r3, r4, r5, pc}
 800bed4:	20000acc 	.word	0x20000acc

0800bed8 <_raise_r>:
 800bed8:	291f      	cmp	r1, #31
 800beda:	b538      	push	{r3, r4, r5, lr}
 800bedc:	4604      	mov	r4, r0
 800bede:	460d      	mov	r5, r1
 800bee0:	d904      	bls.n	800beec <_raise_r+0x14>
 800bee2:	2316      	movs	r3, #22
 800bee4:	6003      	str	r3, [r0, #0]
 800bee6:	f04f 30ff 	mov.w	r0, #4294967295
 800beea:	bd38      	pop	{r3, r4, r5, pc}
 800beec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800beee:	b112      	cbz	r2, 800bef6 <_raise_r+0x1e>
 800bef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bef4:	b94b      	cbnz	r3, 800bf0a <_raise_r+0x32>
 800bef6:	4620      	mov	r0, r4
 800bef8:	f000 f830 	bl	800bf5c <_getpid_r>
 800befc:	462a      	mov	r2, r5
 800befe:	4601      	mov	r1, r0
 800bf00:	4620      	mov	r0, r4
 800bf02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf06:	f000 b817 	b.w	800bf38 <_kill_r>
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d00a      	beq.n	800bf24 <_raise_r+0x4c>
 800bf0e:	1c59      	adds	r1, r3, #1
 800bf10:	d103      	bne.n	800bf1a <_raise_r+0x42>
 800bf12:	2316      	movs	r3, #22
 800bf14:	6003      	str	r3, [r0, #0]
 800bf16:	2001      	movs	r0, #1
 800bf18:	e7e7      	b.n	800beea <_raise_r+0x12>
 800bf1a:	2400      	movs	r4, #0
 800bf1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf20:	4628      	mov	r0, r5
 800bf22:	4798      	blx	r3
 800bf24:	2000      	movs	r0, #0
 800bf26:	e7e0      	b.n	800beea <_raise_r+0x12>

0800bf28 <raise>:
 800bf28:	4b02      	ldr	r3, [pc, #8]	; (800bf34 <raise+0xc>)
 800bf2a:	4601      	mov	r1, r0
 800bf2c:	6818      	ldr	r0, [r3, #0]
 800bf2e:	f7ff bfd3 	b.w	800bed8 <_raise_r>
 800bf32:	bf00      	nop
 800bf34:	20000010 	.word	0x20000010

0800bf38 <_kill_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	4d07      	ldr	r5, [pc, #28]	; (800bf58 <_kill_r+0x20>)
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	4604      	mov	r4, r0
 800bf40:	4608      	mov	r0, r1
 800bf42:	4611      	mov	r1, r2
 800bf44:	602b      	str	r3, [r5, #0]
 800bf46:	f7f8 fc29 	bl	800479c <_kill>
 800bf4a:	1c43      	adds	r3, r0, #1
 800bf4c:	d102      	bne.n	800bf54 <_kill_r+0x1c>
 800bf4e:	682b      	ldr	r3, [r5, #0]
 800bf50:	b103      	cbz	r3, 800bf54 <_kill_r+0x1c>
 800bf52:	6023      	str	r3, [r4, #0]
 800bf54:	bd38      	pop	{r3, r4, r5, pc}
 800bf56:	bf00      	nop
 800bf58:	20000acc 	.word	0x20000acc

0800bf5c <_getpid_r>:
 800bf5c:	f7f8 bc16 	b.w	800478c <_getpid>

0800bf60 <quorem>:
 800bf60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf64:	6903      	ldr	r3, [r0, #16]
 800bf66:	690c      	ldr	r4, [r1, #16]
 800bf68:	42a3      	cmp	r3, r4
 800bf6a:	4607      	mov	r7, r0
 800bf6c:	f2c0 8081 	blt.w	800c072 <quorem+0x112>
 800bf70:	3c01      	subs	r4, #1
 800bf72:	f101 0814 	add.w	r8, r1, #20
 800bf76:	f100 0514 	add.w	r5, r0, #20
 800bf7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf7e:	9301      	str	r3, [sp, #4]
 800bf80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf94:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf98:	d331      	bcc.n	800bffe <quorem+0x9e>
 800bf9a:	f04f 0e00 	mov.w	lr, #0
 800bf9e:	4640      	mov	r0, r8
 800bfa0:	46ac      	mov	ip, r5
 800bfa2:	46f2      	mov	sl, lr
 800bfa4:	f850 2b04 	ldr.w	r2, [r0], #4
 800bfa8:	b293      	uxth	r3, r2
 800bfaa:	fb06 e303 	mla	r3, r6, r3, lr
 800bfae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	ebaa 0303 	sub.w	r3, sl, r3
 800bfb8:	f8dc a000 	ldr.w	sl, [ip]
 800bfbc:	0c12      	lsrs	r2, r2, #16
 800bfbe:	fa13 f38a 	uxtah	r3, r3, sl
 800bfc2:	fb06 e202 	mla	r2, r6, r2, lr
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	9b00      	ldr	r3, [sp, #0]
 800bfca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bfce:	b292      	uxth	r2, r2
 800bfd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bfd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfd8:	f8bd 3000 	ldrh.w	r3, [sp]
 800bfdc:	4581      	cmp	r9, r0
 800bfde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfe2:	f84c 3b04 	str.w	r3, [ip], #4
 800bfe6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bfea:	d2db      	bcs.n	800bfa4 <quorem+0x44>
 800bfec:	f855 300b 	ldr.w	r3, [r5, fp]
 800bff0:	b92b      	cbnz	r3, 800bffe <quorem+0x9e>
 800bff2:	9b01      	ldr	r3, [sp, #4]
 800bff4:	3b04      	subs	r3, #4
 800bff6:	429d      	cmp	r5, r3
 800bff8:	461a      	mov	r2, r3
 800bffa:	d32e      	bcc.n	800c05a <quorem+0xfa>
 800bffc:	613c      	str	r4, [r7, #16]
 800bffe:	4638      	mov	r0, r7
 800c000:	f001 f8ba 	bl	800d178 <__mcmp>
 800c004:	2800      	cmp	r0, #0
 800c006:	db24      	blt.n	800c052 <quorem+0xf2>
 800c008:	3601      	adds	r6, #1
 800c00a:	4628      	mov	r0, r5
 800c00c:	f04f 0c00 	mov.w	ip, #0
 800c010:	f858 2b04 	ldr.w	r2, [r8], #4
 800c014:	f8d0 e000 	ldr.w	lr, [r0]
 800c018:	b293      	uxth	r3, r2
 800c01a:	ebac 0303 	sub.w	r3, ip, r3
 800c01e:	0c12      	lsrs	r2, r2, #16
 800c020:	fa13 f38e 	uxtah	r3, r3, lr
 800c024:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c028:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c032:	45c1      	cmp	r9, r8
 800c034:	f840 3b04 	str.w	r3, [r0], #4
 800c038:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c03c:	d2e8      	bcs.n	800c010 <quorem+0xb0>
 800c03e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c046:	b922      	cbnz	r2, 800c052 <quorem+0xf2>
 800c048:	3b04      	subs	r3, #4
 800c04a:	429d      	cmp	r5, r3
 800c04c:	461a      	mov	r2, r3
 800c04e:	d30a      	bcc.n	800c066 <quorem+0x106>
 800c050:	613c      	str	r4, [r7, #16]
 800c052:	4630      	mov	r0, r6
 800c054:	b003      	add	sp, #12
 800c056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c05a:	6812      	ldr	r2, [r2, #0]
 800c05c:	3b04      	subs	r3, #4
 800c05e:	2a00      	cmp	r2, #0
 800c060:	d1cc      	bne.n	800bffc <quorem+0x9c>
 800c062:	3c01      	subs	r4, #1
 800c064:	e7c7      	b.n	800bff6 <quorem+0x96>
 800c066:	6812      	ldr	r2, [r2, #0]
 800c068:	3b04      	subs	r3, #4
 800c06a:	2a00      	cmp	r2, #0
 800c06c:	d1f0      	bne.n	800c050 <quorem+0xf0>
 800c06e:	3c01      	subs	r4, #1
 800c070:	e7eb      	b.n	800c04a <quorem+0xea>
 800c072:	2000      	movs	r0, #0
 800c074:	e7ee      	b.n	800c054 <quorem+0xf4>
	...

0800c078 <_dtoa_r>:
 800c078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07c:	ed2d 8b04 	vpush	{d8-d9}
 800c080:	ec57 6b10 	vmov	r6, r7, d0
 800c084:	b093      	sub	sp, #76	; 0x4c
 800c086:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c088:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c08c:	9106      	str	r1, [sp, #24]
 800c08e:	ee10 aa10 	vmov	sl, s0
 800c092:	4604      	mov	r4, r0
 800c094:	9209      	str	r2, [sp, #36]	; 0x24
 800c096:	930c      	str	r3, [sp, #48]	; 0x30
 800c098:	46bb      	mov	fp, r7
 800c09a:	b975      	cbnz	r5, 800c0ba <_dtoa_r+0x42>
 800c09c:	2010      	movs	r0, #16
 800c09e:	f7ff f981 	bl	800b3a4 <malloc>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	6260      	str	r0, [r4, #36]	; 0x24
 800c0a6:	b920      	cbnz	r0, 800c0b2 <_dtoa_r+0x3a>
 800c0a8:	4ba7      	ldr	r3, [pc, #668]	; (800c348 <_dtoa_r+0x2d0>)
 800c0aa:	21ea      	movs	r1, #234	; 0xea
 800c0ac:	48a7      	ldr	r0, [pc, #668]	; (800c34c <_dtoa_r+0x2d4>)
 800c0ae:	f001 f97b 	bl	800d3a8 <__assert_func>
 800c0b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c0b6:	6005      	str	r5, [r0, #0]
 800c0b8:	60c5      	str	r5, [r0, #12]
 800c0ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0bc:	6819      	ldr	r1, [r3, #0]
 800c0be:	b151      	cbz	r1, 800c0d6 <_dtoa_r+0x5e>
 800c0c0:	685a      	ldr	r2, [r3, #4]
 800c0c2:	604a      	str	r2, [r1, #4]
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	4093      	lsls	r3, r2
 800c0c8:	608b      	str	r3, [r1, #8]
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f000 fe12 	bl	800ccf4 <_Bfree>
 800c0d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	601a      	str	r2, [r3, #0]
 800c0d6:	1e3b      	subs	r3, r7, #0
 800c0d8:	bfaa      	itet	ge
 800c0da:	2300      	movge	r3, #0
 800c0dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c0e0:	f8c8 3000 	strge.w	r3, [r8]
 800c0e4:	4b9a      	ldr	r3, [pc, #616]	; (800c350 <_dtoa_r+0x2d8>)
 800c0e6:	bfbc      	itt	lt
 800c0e8:	2201      	movlt	r2, #1
 800c0ea:	f8c8 2000 	strlt.w	r2, [r8]
 800c0ee:	ea33 030b 	bics.w	r3, r3, fp
 800c0f2:	d11b      	bne.n	800c12c <_dtoa_r+0xb4>
 800c0f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c0fa:	6013      	str	r3, [r2, #0]
 800c0fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c100:	4333      	orrs	r3, r6
 800c102:	f000 8592 	beq.w	800cc2a <_dtoa_r+0xbb2>
 800c106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c108:	b963      	cbnz	r3, 800c124 <_dtoa_r+0xac>
 800c10a:	4b92      	ldr	r3, [pc, #584]	; (800c354 <_dtoa_r+0x2dc>)
 800c10c:	e022      	b.n	800c154 <_dtoa_r+0xdc>
 800c10e:	4b92      	ldr	r3, [pc, #584]	; (800c358 <_dtoa_r+0x2e0>)
 800c110:	9301      	str	r3, [sp, #4]
 800c112:	3308      	adds	r3, #8
 800c114:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c116:	6013      	str	r3, [r2, #0]
 800c118:	9801      	ldr	r0, [sp, #4]
 800c11a:	b013      	add	sp, #76	; 0x4c
 800c11c:	ecbd 8b04 	vpop	{d8-d9}
 800c120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c124:	4b8b      	ldr	r3, [pc, #556]	; (800c354 <_dtoa_r+0x2dc>)
 800c126:	9301      	str	r3, [sp, #4]
 800c128:	3303      	adds	r3, #3
 800c12a:	e7f3      	b.n	800c114 <_dtoa_r+0x9c>
 800c12c:	2200      	movs	r2, #0
 800c12e:	2300      	movs	r3, #0
 800c130:	4650      	mov	r0, sl
 800c132:	4659      	mov	r1, fp
 800c134:	f7f4 fcd0 	bl	8000ad8 <__aeabi_dcmpeq>
 800c138:	ec4b ab19 	vmov	d9, sl, fp
 800c13c:	4680      	mov	r8, r0
 800c13e:	b158      	cbz	r0, 800c158 <_dtoa_r+0xe0>
 800c140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c142:	2301      	movs	r3, #1
 800c144:	6013      	str	r3, [r2, #0]
 800c146:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f000 856b 	beq.w	800cc24 <_dtoa_r+0xbac>
 800c14e:	4883      	ldr	r0, [pc, #524]	; (800c35c <_dtoa_r+0x2e4>)
 800c150:	6018      	str	r0, [r3, #0]
 800c152:	1e43      	subs	r3, r0, #1
 800c154:	9301      	str	r3, [sp, #4]
 800c156:	e7df      	b.n	800c118 <_dtoa_r+0xa0>
 800c158:	ec4b ab10 	vmov	d0, sl, fp
 800c15c:	aa10      	add	r2, sp, #64	; 0x40
 800c15e:	a911      	add	r1, sp, #68	; 0x44
 800c160:	4620      	mov	r0, r4
 800c162:	f001 f8af 	bl	800d2c4 <__d2b>
 800c166:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c16a:	ee08 0a10 	vmov	s16, r0
 800c16e:	2d00      	cmp	r5, #0
 800c170:	f000 8084 	beq.w	800c27c <_dtoa_r+0x204>
 800c174:	ee19 3a90 	vmov	r3, s19
 800c178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c17c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c180:	4656      	mov	r6, sl
 800c182:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c186:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c18a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c18e:	4b74      	ldr	r3, [pc, #464]	; (800c360 <_dtoa_r+0x2e8>)
 800c190:	2200      	movs	r2, #0
 800c192:	4630      	mov	r0, r6
 800c194:	4639      	mov	r1, r7
 800c196:	f7f4 f87f 	bl	8000298 <__aeabi_dsub>
 800c19a:	a365      	add	r3, pc, #404	; (adr r3, 800c330 <_dtoa_r+0x2b8>)
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	f7f4 fa32 	bl	8000608 <__aeabi_dmul>
 800c1a4:	a364      	add	r3, pc, #400	; (adr r3, 800c338 <_dtoa_r+0x2c0>)
 800c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1aa:	f7f4 f877 	bl	800029c <__adddf3>
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	460f      	mov	r7, r1
 800c1b4:	f7f4 f9be 	bl	8000534 <__aeabi_i2d>
 800c1b8:	a361      	add	r3, pc, #388	; (adr r3, 800c340 <_dtoa_r+0x2c8>)
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	f7f4 fa23 	bl	8000608 <__aeabi_dmul>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	4639      	mov	r1, r7
 800c1ca:	f7f4 f867 	bl	800029c <__adddf3>
 800c1ce:	4606      	mov	r6, r0
 800c1d0:	460f      	mov	r7, r1
 800c1d2:	f7f4 fcc9 	bl	8000b68 <__aeabi_d2iz>
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	9000      	str	r0, [sp, #0]
 800c1da:	2300      	movs	r3, #0
 800c1dc:	4630      	mov	r0, r6
 800c1de:	4639      	mov	r1, r7
 800c1e0:	f7f4 fc84 	bl	8000aec <__aeabi_dcmplt>
 800c1e4:	b150      	cbz	r0, 800c1fc <_dtoa_r+0x184>
 800c1e6:	9800      	ldr	r0, [sp, #0]
 800c1e8:	f7f4 f9a4 	bl	8000534 <__aeabi_i2d>
 800c1ec:	4632      	mov	r2, r6
 800c1ee:	463b      	mov	r3, r7
 800c1f0:	f7f4 fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 800c1f4:	b910      	cbnz	r0, 800c1fc <_dtoa_r+0x184>
 800c1f6:	9b00      	ldr	r3, [sp, #0]
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	9300      	str	r3, [sp, #0]
 800c1fc:	9b00      	ldr	r3, [sp, #0]
 800c1fe:	2b16      	cmp	r3, #22
 800c200:	d85a      	bhi.n	800c2b8 <_dtoa_r+0x240>
 800c202:	9a00      	ldr	r2, [sp, #0]
 800c204:	4b57      	ldr	r3, [pc, #348]	; (800c364 <_dtoa_r+0x2ec>)
 800c206:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	ec51 0b19 	vmov	r0, r1, d9
 800c212:	f7f4 fc6b 	bl	8000aec <__aeabi_dcmplt>
 800c216:	2800      	cmp	r0, #0
 800c218:	d050      	beq.n	800c2bc <_dtoa_r+0x244>
 800c21a:	9b00      	ldr	r3, [sp, #0]
 800c21c:	3b01      	subs	r3, #1
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	2300      	movs	r3, #0
 800c222:	930b      	str	r3, [sp, #44]	; 0x2c
 800c224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c226:	1b5d      	subs	r5, r3, r5
 800c228:	1e6b      	subs	r3, r5, #1
 800c22a:	9305      	str	r3, [sp, #20]
 800c22c:	bf45      	ittet	mi
 800c22e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c232:	9304      	strmi	r3, [sp, #16]
 800c234:	2300      	movpl	r3, #0
 800c236:	2300      	movmi	r3, #0
 800c238:	bf4c      	ite	mi
 800c23a:	9305      	strmi	r3, [sp, #20]
 800c23c:	9304      	strpl	r3, [sp, #16]
 800c23e:	9b00      	ldr	r3, [sp, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	db3d      	blt.n	800c2c0 <_dtoa_r+0x248>
 800c244:	9b05      	ldr	r3, [sp, #20]
 800c246:	9a00      	ldr	r2, [sp, #0]
 800c248:	920a      	str	r2, [sp, #40]	; 0x28
 800c24a:	4413      	add	r3, r2
 800c24c:	9305      	str	r3, [sp, #20]
 800c24e:	2300      	movs	r3, #0
 800c250:	9307      	str	r3, [sp, #28]
 800c252:	9b06      	ldr	r3, [sp, #24]
 800c254:	2b09      	cmp	r3, #9
 800c256:	f200 8089 	bhi.w	800c36c <_dtoa_r+0x2f4>
 800c25a:	2b05      	cmp	r3, #5
 800c25c:	bfc4      	itt	gt
 800c25e:	3b04      	subgt	r3, #4
 800c260:	9306      	strgt	r3, [sp, #24]
 800c262:	9b06      	ldr	r3, [sp, #24]
 800c264:	f1a3 0302 	sub.w	r3, r3, #2
 800c268:	bfcc      	ite	gt
 800c26a:	2500      	movgt	r5, #0
 800c26c:	2501      	movle	r5, #1
 800c26e:	2b03      	cmp	r3, #3
 800c270:	f200 8087 	bhi.w	800c382 <_dtoa_r+0x30a>
 800c274:	e8df f003 	tbb	[pc, r3]
 800c278:	59383a2d 	.word	0x59383a2d
 800c27c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c280:	441d      	add	r5, r3
 800c282:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c286:	2b20      	cmp	r3, #32
 800c288:	bfc1      	itttt	gt
 800c28a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c28e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c292:	fa0b f303 	lslgt.w	r3, fp, r3
 800c296:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c29a:	bfda      	itte	le
 800c29c:	f1c3 0320 	rsble	r3, r3, #32
 800c2a0:	fa06 f003 	lslle.w	r0, r6, r3
 800c2a4:	4318      	orrgt	r0, r3
 800c2a6:	f7f4 f935 	bl	8000514 <__aeabi_ui2d>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	4606      	mov	r6, r0
 800c2ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c2b2:	3d01      	subs	r5, #1
 800c2b4:	930e      	str	r3, [sp, #56]	; 0x38
 800c2b6:	e76a      	b.n	800c18e <_dtoa_r+0x116>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e7b2      	b.n	800c222 <_dtoa_r+0x1aa>
 800c2bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800c2be:	e7b1      	b.n	800c224 <_dtoa_r+0x1ac>
 800c2c0:	9b04      	ldr	r3, [sp, #16]
 800c2c2:	9a00      	ldr	r2, [sp, #0]
 800c2c4:	1a9b      	subs	r3, r3, r2
 800c2c6:	9304      	str	r3, [sp, #16]
 800c2c8:	4253      	negs	r3, r2
 800c2ca:	9307      	str	r3, [sp, #28]
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c2d0:	e7bf      	b.n	800c252 <_dtoa_r+0x1da>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	9308      	str	r3, [sp, #32]
 800c2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	dc55      	bgt.n	800c388 <_dtoa_r+0x310>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c2e6:	e00c      	b.n	800c302 <_dtoa_r+0x28a>
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e7f3      	b.n	800c2d4 <_dtoa_r+0x25c>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2f0:	9308      	str	r3, [sp, #32]
 800c2f2:	9b00      	ldr	r3, [sp, #0]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	9302      	str	r3, [sp, #8]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	9303      	str	r3, [sp, #12]
 800c2fe:	bfb8      	it	lt
 800c300:	2301      	movlt	r3, #1
 800c302:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c304:	2200      	movs	r2, #0
 800c306:	6042      	str	r2, [r0, #4]
 800c308:	2204      	movs	r2, #4
 800c30a:	f102 0614 	add.w	r6, r2, #20
 800c30e:	429e      	cmp	r6, r3
 800c310:	6841      	ldr	r1, [r0, #4]
 800c312:	d93d      	bls.n	800c390 <_dtoa_r+0x318>
 800c314:	4620      	mov	r0, r4
 800c316:	f000 fcad 	bl	800cc74 <_Balloc>
 800c31a:	9001      	str	r0, [sp, #4]
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d13b      	bne.n	800c398 <_dtoa_r+0x320>
 800c320:	4b11      	ldr	r3, [pc, #68]	; (800c368 <_dtoa_r+0x2f0>)
 800c322:	4602      	mov	r2, r0
 800c324:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c328:	e6c0      	b.n	800c0ac <_dtoa_r+0x34>
 800c32a:	2301      	movs	r3, #1
 800c32c:	e7df      	b.n	800c2ee <_dtoa_r+0x276>
 800c32e:	bf00      	nop
 800c330:	636f4361 	.word	0x636f4361
 800c334:	3fd287a7 	.word	0x3fd287a7
 800c338:	8b60c8b3 	.word	0x8b60c8b3
 800c33c:	3fc68a28 	.word	0x3fc68a28
 800c340:	509f79fb 	.word	0x509f79fb
 800c344:	3fd34413 	.word	0x3fd34413
 800c348:	0800e0c5 	.word	0x0800e0c5
 800c34c:	0800e0dc 	.word	0x0800e0dc
 800c350:	7ff00000 	.word	0x7ff00000
 800c354:	0800e0c1 	.word	0x0800e0c1
 800c358:	0800e0b8 	.word	0x0800e0b8
 800c35c:	0800e095 	.word	0x0800e095
 800c360:	3ff80000 	.word	0x3ff80000
 800c364:	0800e1d0 	.word	0x0800e1d0
 800c368:	0800e137 	.word	0x0800e137
 800c36c:	2501      	movs	r5, #1
 800c36e:	2300      	movs	r3, #0
 800c370:	9306      	str	r3, [sp, #24]
 800c372:	9508      	str	r5, [sp, #32]
 800c374:	f04f 33ff 	mov.w	r3, #4294967295
 800c378:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c37c:	2200      	movs	r2, #0
 800c37e:	2312      	movs	r3, #18
 800c380:	e7b0      	b.n	800c2e4 <_dtoa_r+0x26c>
 800c382:	2301      	movs	r3, #1
 800c384:	9308      	str	r3, [sp, #32]
 800c386:	e7f5      	b.n	800c374 <_dtoa_r+0x2fc>
 800c388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c38a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c38e:	e7b8      	b.n	800c302 <_dtoa_r+0x28a>
 800c390:	3101      	adds	r1, #1
 800c392:	6041      	str	r1, [r0, #4]
 800c394:	0052      	lsls	r2, r2, #1
 800c396:	e7b8      	b.n	800c30a <_dtoa_r+0x292>
 800c398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c39a:	9a01      	ldr	r2, [sp, #4]
 800c39c:	601a      	str	r2, [r3, #0]
 800c39e:	9b03      	ldr	r3, [sp, #12]
 800c3a0:	2b0e      	cmp	r3, #14
 800c3a2:	f200 809d 	bhi.w	800c4e0 <_dtoa_r+0x468>
 800c3a6:	2d00      	cmp	r5, #0
 800c3a8:	f000 809a 	beq.w	800c4e0 <_dtoa_r+0x468>
 800c3ac:	9b00      	ldr	r3, [sp, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	dd32      	ble.n	800c418 <_dtoa_r+0x3a0>
 800c3b2:	4ab7      	ldr	r2, [pc, #732]	; (800c690 <_dtoa_r+0x618>)
 800c3b4:	f003 030f 	and.w	r3, r3, #15
 800c3b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c3bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3c0:	9b00      	ldr	r3, [sp, #0]
 800c3c2:	05d8      	lsls	r0, r3, #23
 800c3c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c3c8:	d516      	bpl.n	800c3f8 <_dtoa_r+0x380>
 800c3ca:	4bb2      	ldr	r3, [pc, #712]	; (800c694 <_dtoa_r+0x61c>)
 800c3cc:	ec51 0b19 	vmov	r0, r1, d9
 800c3d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c3d4:	f7f4 fa42 	bl	800085c <__aeabi_ddiv>
 800c3d8:	f007 070f 	and.w	r7, r7, #15
 800c3dc:	4682      	mov	sl, r0
 800c3de:	468b      	mov	fp, r1
 800c3e0:	2503      	movs	r5, #3
 800c3e2:	4eac      	ldr	r6, [pc, #688]	; (800c694 <_dtoa_r+0x61c>)
 800c3e4:	b957      	cbnz	r7, 800c3fc <_dtoa_r+0x384>
 800c3e6:	4642      	mov	r2, r8
 800c3e8:	464b      	mov	r3, r9
 800c3ea:	4650      	mov	r0, sl
 800c3ec:	4659      	mov	r1, fp
 800c3ee:	f7f4 fa35 	bl	800085c <__aeabi_ddiv>
 800c3f2:	4682      	mov	sl, r0
 800c3f4:	468b      	mov	fp, r1
 800c3f6:	e028      	b.n	800c44a <_dtoa_r+0x3d2>
 800c3f8:	2502      	movs	r5, #2
 800c3fa:	e7f2      	b.n	800c3e2 <_dtoa_r+0x36a>
 800c3fc:	07f9      	lsls	r1, r7, #31
 800c3fe:	d508      	bpl.n	800c412 <_dtoa_r+0x39a>
 800c400:	4640      	mov	r0, r8
 800c402:	4649      	mov	r1, r9
 800c404:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c408:	f7f4 f8fe 	bl	8000608 <__aeabi_dmul>
 800c40c:	3501      	adds	r5, #1
 800c40e:	4680      	mov	r8, r0
 800c410:	4689      	mov	r9, r1
 800c412:	107f      	asrs	r7, r7, #1
 800c414:	3608      	adds	r6, #8
 800c416:	e7e5      	b.n	800c3e4 <_dtoa_r+0x36c>
 800c418:	f000 809b 	beq.w	800c552 <_dtoa_r+0x4da>
 800c41c:	9b00      	ldr	r3, [sp, #0]
 800c41e:	4f9d      	ldr	r7, [pc, #628]	; (800c694 <_dtoa_r+0x61c>)
 800c420:	425e      	negs	r6, r3
 800c422:	4b9b      	ldr	r3, [pc, #620]	; (800c690 <_dtoa_r+0x618>)
 800c424:	f006 020f 	and.w	r2, r6, #15
 800c428:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	ec51 0b19 	vmov	r0, r1, d9
 800c434:	f7f4 f8e8 	bl	8000608 <__aeabi_dmul>
 800c438:	1136      	asrs	r6, r6, #4
 800c43a:	4682      	mov	sl, r0
 800c43c:	468b      	mov	fp, r1
 800c43e:	2300      	movs	r3, #0
 800c440:	2502      	movs	r5, #2
 800c442:	2e00      	cmp	r6, #0
 800c444:	d17a      	bne.n	800c53c <_dtoa_r+0x4c4>
 800c446:	2b00      	cmp	r3, #0
 800c448:	d1d3      	bne.n	800c3f2 <_dtoa_r+0x37a>
 800c44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f000 8082 	beq.w	800c556 <_dtoa_r+0x4de>
 800c452:	4b91      	ldr	r3, [pc, #580]	; (800c698 <_dtoa_r+0x620>)
 800c454:	2200      	movs	r2, #0
 800c456:	4650      	mov	r0, sl
 800c458:	4659      	mov	r1, fp
 800c45a:	f7f4 fb47 	bl	8000aec <__aeabi_dcmplt>
 800c45e:	2800      	cmp	r0, #0
 800c460:	d079      	beq.n	800c556 <_dtoa_r+0x4de>
 800c462:	9b03      	ldr	r3, [sp, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d076      	beq.n	800c556 <_dtoa_r+0x4de>
 800c468:	9b02      	ldr	r3, [sp, #8]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	dd36      	ble.n	800c4dc <_dtoa_r+0x464>
 800c46e:	9b00      	ldr	r3, [sp, #0]
 800c470:	4650      	mov	r0, sl
 800c472:	4659      	mov	r1, fp
 800c474:	1e5f      	subs	r7, r3, #1
 800c476:	2200      	movs	r2, #0
 800c478:	4b88      	ldr	r3, [pc, #544]	; (800c69c <_dtoa_r+0x624>)
 800c47a:	f7f4 f8c5 	bl	8000608 <__aeabi_dmul>
 800c47e:	9e02      	ldr	r6, [sp, #8]
 800c480:	4682      	mov	sl, r0
 800c482:	468b      	mov	fp, r1
 800c484:	3501      	adds	r5, #1
 800c486:	4628      	mov	r0, r5
 800c488:	f7f4 f854 	bl	8000534 <__aeabi_i2d>
 800c48c:	4652      	mov	r2, sl
 800c48e:	465b      	mov	r3, fp
 800c490:	f7f4 f8ba 	bl	8000608 <__aeabi_dmul>
 800c494:	4b82      	ldr	r3, [pc, #520]	; (800c6a0 <_dtoa_r+0x628>)
 800c496:	2200      	movs	r2, #0
 800c498:	f7f3 ff00 	bl	800029c <__adddf3>
 800c49c:	46d0      	mov	r8, sl
 800c49e:	46d9      	mov	r9, fp
 800c4a0:	4682      	mov	sl, r0
 800c4a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c4a6:	2e00      	cmp	r6, #0
 800c4a8:	d158      	bne.n	800c55c <_dtoa_r+0x4e4>
 800c4aa:	4b7e      	ldr	r3, [pc, #504]	; (800c6a4 <_dtoa_r+0x62c>)
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	4640      	mov	r0, r8
 800c4b0:	4649      	mov	r1, r9
 800c4b2:	f7f3 fef1 	bl	8000298 <__aeabi_dsub>
 800c4b6:	4652      	mov	r2, sl
 800c4b8:	465b      	mov	r3, fp
 800c4ba:	4680      	mov	r8, r0
 800c4bc:	4689      	mov	r9, r1
 800c4be:	f7f4 fb33 	bl	8000b28 <__aeabi_dcmpgt>
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	f040 8295 	bne.w	800c9f2 <_dtoa_r+0x97a>
 800c4c8:	4652      	mov	r2, sl
 800c4ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c4ce:	4640      	mov	r0, r8
 800c4d0:	4649      	mov	r1, r9
 800c4d2:	f7f4 fb0b 	bl	8000aec <__aeabi_dcmplt>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	f040 8289 	bne.w	800c9ee <_dtoa_r+0x976>
 800c4dc:	ec5b ab19 	vmov	sl, fp, d9
 800c4e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	f2c0 8148 	blt.w	800c778 <_dtoa_r+0x700>
 800c4e8:	9a00      	ldr	r2, [sp, #0]
 800c4ea:	2a0e      	cmp	r2, #14
 800c4ec:	f300 8144 	bgt.w	800c778 <_dtoa_r+0x700>
 800c4f0:	4b67      	ldr	r3, [pc, #412]	; (800c690 <_dtoa_r+0x618>)
 800c4f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f280 80d5 	bge.w	800c6ac <_dtoa_r+0x634>
 800c502:	9b03      	ldr	r3, [sp, #12]
 800c504:	2b00      	cmp	r3, #0
 800c506:	f300 80d1 	bgt.w	800c6ac <_dtoa_r+0x634>
 800c50a:	f040 826f 	bne.w	800c9ec <_dtoa_r+0x974>
 800c50e:	4b65      	ldr	r3, [pc, #404]	; (800c6a4 <_dtoa_r+0x62c>)
 800c510:	2200      	movs	r2, #0
 800c512:	4640      	mov	r0, r8
 800c514:	4649      	mov	r1, r9
 800c516:	f7f4 f877 	bl	8000608 <__aeabi_dmul>
 800c51a:	4652      	mov	r2, sl
 800c51c:	465b      	mov	r3, fp
 800c51e:	f7f4 faf9 	bl	8000b14 <__aeabi_dcmpge>
 800c522:	9e03      	ldr	r6, [sp, #12]
 800c524:	4637      	mov	r7, r6
 800c526:	2800      	cmp	r0, #0
 800c528:	f040 8245 	bne.w	800c9b6 <_dtoa_r+0x93e>
 800c52c:	9d01      	ldr	r5, [sp, #4]
 800c52e:	2331      	movs	r3, #49	; 0x31
 800c530:	f805 3b01 	strb.w	r3, [r5], #1
 800c534:	9b00      	ldr	r3, [sp, #0]
 800c536:	3301      	adds	r3, #1
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	e240      	b.n	800c9be <_dtoa_r+0x946>
 800c53c:	07f2      	lsls	r2, r6, #31
 800c53e:	d505      	bpl.n	800c54c <_dtoa_r+0x4d4>
 800c540:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c544:	f7f4 f860 	bl	8000608 <__aeabi_dmul>
 800c548:	3501      	adds	r5, #1
 800c54a:	2301      	movs	r3, #1
 800c54c:	1076      	asrs	r6, r6, #1
 800c54e:	3708      	adds	r7, #8
 800c550:	e777      	b.n	800c442 <_dtoa_r+0x3ca>
 800c552:	2502      	movs	r5, #2
 800c554:	e779      	b.n	800c44a <_dtoa_r+0x3d2>
 800c556:	9f00      	ldr	r7, [sp, #0]
 800c558:	9e03      	ldr	r6, [sp, #12]
 800c55a:	e794      	b.n	800c486 <_dtoa_r+0x40e>
 800c55c:	9901      	ldr	r1, [sp, #4]
 800c55e:	4b4c      	ldr	r3, [pc, #304]	; (800c690 <_dtoa_r+0x618>)
 800c560:	4431      	add	r1, r6
 800c562:	910d      	str	r1, [sp, #52]	; 0x34
 800c564:	9908      	ldr	r1, [sp, #32]
 800c566:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c56a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c56e:	2900      	cmp	r1, #0
 800c570:	d043      	beq.n	800c5fa <_dtoa_r+0x582>
 800c572:	494d      	ldr	r1, [pc, #308]	; (800c6a8 <_dtoa_r+0x630>)
 800c574:	2000      	movs	r0, #0
 800c576:	f7f4 f971 	bl	800085c <__aeabi_ddiv>
 800c57a:	4652      	mov	r2, sl
 800c57c:	465b      	mov	r3, fp
 800c57e:	f7f3 fe8b 	bl	8000298 <__aeabi_dsub>
 800c582:	9d01      	ldr	r5, [sp, #4]
 800c584:	4682      	mov	sl, r0
 800c586:	468b      	mov	fp, r1
 800c588:	4649      	mov	r1, r9
 800c58a:	4640      	mov	r0, r8
 800c58c:	f7f4 faec 	bl	8000b68 <__aeabi_d2iz>
 800c590:	4606      	mov	r6, r0
 800c592:	f7f3 ffcf 	bl	8000534 <__aeabi_i2d>
 800c596:	4602      	mov	r2, r0
 800c598:	460b      	mov	r3, r1
 800c59a:	4640      	mov	r0, r8
 800c59c:	4649      	mov	r1, r9
 800c59e:	f7f3 fe7b 	bl	8000298 <__aeabi_dsub>
 800c5a2:	3630      	adds	r6, #48	; 0x30
 800c5a4:	f805 6b01 	strb.w	r6, [r5], #1
 800c5a8:	4652      	mov	r2, sl
 800c5aa:	465b      	mov	r3, fp
 800c5ac:	4680      	mov	r8, r0
 800c5ae:	4689      	mov	r9, r1
 800c5b0:	f7f4 fa9c 	bl	8000aec <__aeabi_dcmplt>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d163      	bne.n	800c680 <_dtoa_r+0x608>
 800c5b8:	4642      	mov	r2, r8
 800c5ba:	464b      	mov	r3, r9
 800c5bc:	4936      	ldr	r1, [pc, #216]	; (800c698 <_dtoa_r+0x620>)
 800c5be:	2000      	movs	r0, #0
 800c5c0:	f7f3 fe6a 	bl	8000298 <__aeabi_dsub>
 800c5c4:	4652      	mov	r2, sl
 800c5c6:	465b      	mov	r3, fp
 800c5c8:	f7f4 fa90 	bl	8000aec <__aeabi_dcmplt>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	f040 80b5 	bne.w	800c73c <_dtoa_r+0x6c4>
 800c5d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5d4:	429d      	cmp	r5, r3
 800c5d6:	d081      	beq.n	800c4dc <_dtoa_r+0x464>
 800c5d8:	4b30      	ldr	r3, [pc, #192]	; (800c69c <_dtoa_r+0x624>)
 800c5da:	2200      	movs	r2, #0
 800c5dc:	4650      	mov	r0, sl
 800c5de:	4659      	mov	r1, fp
 800c5e0:	f7f4 f812 	bl	8000608 <__aeabi_dmul>
 800c5e4:	4b2d      	ldr	r3, [pc, #180]	; (800c69c <_dtoa_r+0x624>)
 800c5e6:	4682      	mov	sl, r0
 800c5e8:	468b      	mov	fp, r1
 800c5ea:	4640      	mov	r0, r8
 800c5ec:	4649      	mov	r1, r9
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f7f4 f80a 	bl	8000608 <__aeabi_dmul>
 800c5f4:	4680      	mov	r8, r0
 800c5f6:	4689      	mov	r9, r1
 800c5f8:	e7c6      	b.n	800c588 <_dtoa_r+0x510>
 800c5fa:	4650      	mov	r0, sl
 800c5fc:	4659      	mov	r1, fp
 800c5fe:	f7f4 f803 	bl	8000608 <__aeabi_dmul>
 800c602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c604:	9d01      	ldr	r5, [sp, #4]
 800c606:	930f      	str	r3, [sp, #60]	; 0x3c
 800c608:	4682      	mov	sl, r0
 800c60a:	468b      	mov	fp, r1
 800c60c:	4649      	mov	r1, r9
 800c60e:	4640      	mov	r0, r8
 800c610:	f7f4 faaa 	bl	8000b68 <__aeabi_d2iz>
 800c614:	4606      	mov	r6, r0
 800c616:	f7f3 ff8d 	bl	8000534 <__aeabi_i2d>
 800c61a:	3630      	adds	r6, #48	; 0x30
 800c61c:	4602      	mov	r2, r0
 800c61e:	460b      	mov	r3, r1
 800c620:	4640      	mov	r0, r8
 800c622:	4649      	mov	r1, r9
 800c624:	f7f3 fe38 	bl	8000298 <__aeabi_dsub>
 800c628:	f805 6b01 	strb.w	r6, [r5], #1
 800c62c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c62e:	429d      	cmp	r5, r3
 800c630:	4680      	mov	r8, r0
 800c632:	4689      	mov	r9, r1
 800c634:	f04f 0200 	mov.w	r2, #0
 800c638:	d124      	bne.n	800c684 <_dtoa_r+0x60c>
 800c63a:	4b1b      	ldr	r3, [pc, #108]	; (800c6a8 <_dtoa_r+0x630>)
 800c63c:	4650      	mov	r0, sl
 800c63e:	4659      	mov	r1, fp
 800c640:	f7f3 fe2c 	bl	800029c <__adddf3>
 800c644:	4602      	mov	r2, r0
 800c646:	460b      	mov	r3, r1
 800c648:	4640      	mov	r0, r8
 800c64a:	4649      	mov	r1, r9
 800c64c:	f7f4 fa6c 	bl	8000b28 <__aeabi_dcmpgt>
 800c650:	2800      	cmp	r0, #0
 800c652:	d173      	bne.n	800c73c <_dtoa_r+0x6c4>
 800c654:	4652      	mov	r2, sl
 800c656:	465b      	mov	r3, fp
 800c658:	4913      	ldr	r1, [pc, #76]	; (800c6a8 <_dtoa_r+0x630>)
 800c65a:	2000      	movs	r0, #0
 800c65c:	f7f3 fe1c 	bl	8000298 <__aeabi_dsub>
 800c660:	4602      	mov	r2, r0
 800c662:	460b      	mov	r3, r1
 800c664:	4640      	mov	r0, r8
 800c666:	4649      	mov	r1, r9
 800c668:	f7f4 fa40 	bl	8000aec <__aeabi_dcmplt>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	f43f af35 	beq.w	800c4dc <_dtoa_r+0x464>
 800c672:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c674:	1e6b      	subs	r3, r5, #1
 800c676:	930f      	str	r3, [sp, #60]	; 0x3c
 800c678:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c67c:	2b30      	cmp	r3, #48	; 0x30
 800c67e:	d0f8      	beq.n	800c672 <_dtoa_r+0x5fa>
 800c680:	9700      	str	r7, [sp, #0]
 800c682:	e049      	b.n	800c718 <_dtoa_r+0x6a0>
 800c684:	4b05      	ldr	r3, [pc, #20]	; (800c69c <_dtoa_r+0x624>)
 800c686:	f7f3 ffbf 	bl	8000608 <__aeabi_dmul>
 800c68a:	4680      	mov	r8, r0
 800c68c:	4689      	mov	r9, r1
 800c68e:	e7bd      	b.n	800c60c <_dtoa_r+0x594>
 800c690:	0800e1d0 	.word	0x0800e1d0
 800c694:	0800e1a8 	.word	0x0800e1a8
 800c698:	3ff00000 	.word	0x3ff00000
 800c69c:	40240000 	.word	0x40240000
 800c6a0:	401c0000 	.word	0x401c0000
 800c6a4:	40140000 	.word	0x40140000
 800c6a8:	3fe00000 	.word	0x3fe00000
 800c6ac:	9d01      	ldr	r5, [sp, #4]
 800c6ae:	4656      	mov	r6, sl
 800c6b0:	465f      	mov	r7, fp
 800c6b2:	4642      	mov	r2, r8
 800c6b4:	464b      	mov	r3, r9
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	4639      	mov	r1, r7
 800c6ba:	f7f4 f8cf 	bl	800085c <__aeabi_ddiv>
 800c6be:	f7f4 fa53 	bl	8000b68 <__aeabi_d2iz>
 800c6c2:	4682      	mov	sl, r0
 800c6c4:	f7f3 ff36 	bl	8000534 <__aeabi_i2d>
 800c6c8:	4642      	mov	r2, r8
 800c6ca:	464b      	mov	r3, r9
 800c6cc:	f7f3 ff9c 	bl	8000608 <__aeabi_dmul>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	4639      	mov	r1, r7
 800c6d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c6dc:	f7f3 fddc 	bl	8000298 <__aeabi_dsub>
 800c6e0:	f805 6b01 	strb.w	r6, [r5], #1
 800c6e4:	9e01      	ldr	r6, [sp, #4]
 800c6e6:	9f03      	ldr	r7, [sp, #12]
 800c6e8:	1bae      	subs	r6, r5, r6
 800c6ea:	42b7      	cmp	r7, r6
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	d135      	bne.n	800c75e <_dtoa_r+0x6e6>
 800c6f2:	f7f3 fdd3 	bl	800029c <__adddf3>
 800c6f6:	4642      	mov	r2, r8
 800c6f8:	464b      	mov	r3, r9
 800c6fa:	4606      	mov	r6, r0
 800c6fc:	460f      	mov	r7, r1
 800c6fe:	f7f4 fa13 	bl	8000b28 <__aeabi_dcmpgt>
 800c702:	b9d0      	cbnz	r0, 800c73a <_dtoa_r+0x6c2>
 800c704:	4642      	mov	r2, r8
 800c706:	464b      	mov	r3, r9
 800c708:	4630      	mov	r0, r6
 800c70a:	4639      	mov	r1, r7
 800c70c:	f7f4 f9e4 	bl	8000ad8 <__aeabi_dcmpeq>
 800c710:	b110      	cbz	r0, 800c718 <_dtoa_r+0x6a0>
 800c712:	f01a 0f01 	tst.w	sl, #1
 800c716:	d110      	bne.n	800c73a <_dtoa_r+0x6c2>
 800c718:	4620      	mov	r0, r4
 800c71a:	ee18 1a10 	vmov	r1, s16
 800c71e:	f000 fae9 	bl	800ccf4 <_Bfree>
 800c722:	2300      	movs	r3, #0
 800c724:	9800      	ldr	r0, [sp, #0]
 800c726:	702b      	strb	r3, [r5, #0]
 800c728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c72a:	3001      	adds	r0, #1
 800c72c:	6018      	str	r0, [r3, #0]
 800c72e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c730:	2b00      	cmp	r3, #0
 800c732:	f43f acf1 	beq.w	800c118 <_dtoa_r+0xa0>
 800c736:	601d      	str	r5, [r3, #0]
 800c738:	e4ee      	b.n	800c118 <_dtoa_r+0xa0>
 800c73a:	9f00      	ldr	r7, [sp, #0]
 800c73c:	462b      	mov	r3, r5
 800c73e:	461d      	mov	r5, r3
 800c740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c744:	2a39      	cmp	r2, #57	; 0x39
 800c746:	d106      	bne.n	800c756 <_dtoa_r+0x6de>
 800c748:	9a01      	ldr	r2, [sp, #4]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d1f7      	bne.n	800c73e <_dtoa_r+0x6c6>
 800c74e:	9901      	ldr	r1, [sp, #4]
 800c750:	2230      	movs	r2, #48	; 0x30
 800c752:	3701      	adds	r7, #1
 800c754:	700a      	strb	r2, [r1, #0]
 800c756:	781a      	ldrb	r2, [r3, #0]
 800c758:	3201      	adds	r2, #1
 800c75a:	701a      	strb	r2, [r3, #0]
 800c75c:	e790      	b.n	800c680 <_dtoa_r+0x608>
 800c75e:	4ba6      	ldr	r3, [pc, #664]	; (800c9f8 <_dtoa_r+0x980>)
 800c760:	2200      	movs	r2, #0
 800c762:	f7f3 ff51 	bl	8000608 <__aeabi_dmul>
 800c766:	2200      	movs	r2, #0
 800c768:	2300      	movs	r3, #0
 800c76a:	4606      	mov	r6, r0
 800c76c:	460f      	mov	r7, r1
 800c76e:	f7f4 f9b3 	bl	8000ad8 <__aeabi_dcmpeq>
 800c772:	2800      	cmp	r0, #0
 800c774:	d09d      	beq.n	800c6b2 <_dtoa_r+0x63a>
 800c776:	e7cf      	b.n	800c718 <_dtoa_r+0x6a0>
 800c778:	9a08      	ldr	r2, [sp, #32]
 800c77a:	2a00      	cmp	r2, #0
 800c77c:	f000 80d7 	beq.w	800c92e <_dtoa_r+0x8b6>
 800c780:	9a06      	ldr	r2, [sp, #24]
 800c782:	2a01      	cmp	r2, #1
 800c784:	f300 80ba 	bgt.w	800c8fc <_dtoa_r+0x884>
 800c788:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c78a:	2a00      	cmp	r2, #0
 800c78c:	f000 80b2 	beq.w	800c8f4 <_dtoa_r+0x87c>
 800c790:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c794:	9e07      	ldr	r6, [sp, #28]
 800c796:	9d04      	ldr	r5, [sp, #16]
 800c798:	9a04      	ldr	r2, [sp, #16]
 800c79a:	441a      	add	r2, r3
 800c79c:	9204      	str	r2, [sp, #16]
 800c79e:	9a05      	ldr	r2, [sp, #20]
 800c7a0:	2101      	movs	r1, #1
 800c7a2:	441a      	add	r2, r3
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	9205      	str	r2, [sp, #20]
 800c7a8:	f000 fb5c 	bl	800ce64 <__i2b>
 800c7ac:	4607      	mov	r7, r0
 800c7ae:	2d00      	cmp	r5, #0
 800c7b0:	dd0c      	ble.n	800c7cc <_dtoa_r+0x754>
 800c7b2:	9b05      	ldr	r3, [sp, #20]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	dd09      	ble.n	800c7cc <_dtoa_r+0x754>
 800c7b8:	42ab      	cmp	r3, r5
 800c7ba:	9a04      	ldr	r2, [sp, #16]
 800c7bc:	bfa8      	it	ge
 800c7be:	462b      	movge	r3, r5
 800c7c0:	1ad2      	subs	r2, r2, r3
 800c7c2:	9204      	str	r2, [sp, #16]
 800c7c4:	9a05      	ldr	r2, [sp, #20]
 800c7c6:	1aed      	subs	r5, r5, r3
 800c7c8:	1ad3      	subs	r3, r2, r3
 800c7ca:	9305      	str	r3, [sp, #20]
 800c7cc:	9b07      	ldr	r3, [sp, #28]
 800c7ce:	b31b      	cbz	r3, 800c818 <_dtoa_r+0x7a0>
 800c7d0:	9b08      	ldr	r3, [sp, #32]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f000 80af 	beq.w	800c936 <_dtoa_r+0x8be>
 800c7d8:	2e00      	cmp	r6, #0
 800c7da:	dd13      	ble.n	800c804 <_dtoa_r+0x78c>
 800c7dc:	4639      	mov	r1, r7
 800c7de:	4632      	mov	r2, r6
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f000 fbff 	bl	800cfe4 <__pow5mult>
 800c7e6:	ee18 2a10 	vmov	r2, s16
 800c7ea:	4601      	mov	r1, r0
 800c7ec:	4607      	mov	r7, r0
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	f000 fb4e 	bl	800ce90 <__multiply>
 800c7f4:	ee18 1a10 	vmov	r1, s16
 800c7f8:	4680      	mov	r8, r0
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f000 fa7a 	bl	800ccf4 <_Bfree>
 800c800:	ee08 8a10 	vmov	s16, r8
 800c804:	9b07      	ldr	r3, [sp, #28]
 800c806:	1b9a      	subs	r2, r3, r6
 800c808:	d006      	beq.n	800c818 <_dtoa_r+0x7a0>
 800c80a:	ee18 1a10 	vmov	r1, s16
 800c80e:	4620      	mov	r0, r4
 800c810:	f000 fbe8 	bl	800cfe4 <__pow5mult>
 800c814:	ee08 0a10 	vmov	s16, r0
 800c818:	2101      	movs	r1, #1
 800c81a:	4620      	mov	r0, r4
 800c81c:	f000 fb22 	bl	800ce64 <__i2b>
 800c820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c822:	2b00      	cmp	r3, #0
 800c824:	4606      	mov	r6, r0
 800c826:	f340 8088 	ble.w	800c93a <_dtoa_r+0x8c2>
 800c82a:	461a      	mov	r2, r3
 800c82c:	4601      	mov	r1, r0
 800c82e:	4620      	mov	r0, r4
 800c830:	f000 fbd8 	bl	800cfe4 <__pow5mult>
 800c834:	9b06      	ldr	r3, [sp, #24]
 800c836:	2b01      	cmp	r3, #1
 800c838:	4606      	mov	r6, r0
 800c83a:	f340 8081 	ble.w	800c940 <_dtoa_r+0x8c8>
 800c83e:	f04f 0800 	mov.w	r8, #0
 800c842:	6933      	ldr	r3, [r6, #16]
 800c844:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c848:	6918      	ldr	r0, [r3, #16]
 800c84a:	f000 fabb 	bl	800cdc4 <__hi0bits>
 800c84e:	f1c0 0020 	rsb	r0, r0, #32
 800c852:	9b05      	ldr	r3, [sp, #20]
 800c854:	4418      	add	r0, r3
 800c856:	f010 001f 	ands.w	r0, r0, #31
 800c85a:	f000 8092 	beq.w	800c982 <_dtoa_r+0x90a>
 800c85e:	f1c0 0320 	rsb	r3, r0, #32
 800c862:	2b04      	cmp	r3, #4
 800c864:	f340 808a 	ble.w	800c97c <_dtoa_r+0x904>
 800c868:	f1c0 001c 	rsb	r0, r0, #28
 800c86c:	9b04      	ldr	r3, [sp, #16]
 800c86e:	4403      	add	r3, r0
 800c870:	9304      	str	r3, [sp, #16]
 800c872:	9b05      	ldr	r3, [sp, #20]
 800c874:	4403      	add	r3, r0
 800c876:	4405      	add	r5, r0
 800c878:	9305      	str	r3, [sp, #20]
 800c87a:	9b04      	ldr	r3, [sp, #16]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	dd07      	ble.n	800c890 <_dtoa_r+0x818>
 800c880:	ee18 1a10 	vmov	r1, s16
 800c884:	461a      	mov	r2, r3
 800c886:	4620      	mov	r0, r4
 800c888:	f000 fc06 	bl	800d098 <__lshift>
 800c88c:	ee08 0a10 	vmov	s16, r0
 800c890:	9b05      	ldr	r3, [sp, #20]
 800c892:	2b00      	cmp	r3, #0
 800c894:	dd05      	ble.n	800c8a2 <_dtoa_r+0x82a>
 800c896:	4631      	mov	r1, r6
 800c898:	461a      	mov	r2, r3
 800c89a:	4620      	mov	r0, r4
 800c89c:	f000 fbfc 	bl	800d098 <__lshift>
 800c8a0:	4606      	mov	r6, r0
 800c8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d06e      	beq.n	800c986 <_dtoa_r+0x90e>
 800c8a8:	ee18 0a10 	vmov	r0, s16
 800c8ac:	4631      	mov	r1, r6
 800c8ae:	f000 fc63 	bl	800d178 <__mcmp>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	da67      	bge.n	800c986 <_dtoa_r+0x90e>
 800c8b6:	9b00      	ldr	r3, [sp, #0]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	ee18 1a10 	vmov	r1, s16
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	220a      	movs	r2, #10
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f000 fa37 	bl	800cd38 <__multadd>
 800c8ca:	9b08      	ldr	r3, [sp, #32]
 800c8cc:	ee08 0a10 	vmov	s16, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f000 81b1 	beq.w	800cc38 <_dtoa_r+0xbc0>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	4639      	mov	r1, r7
 800c8da:	220a      	movs	r2, #10
 800c8dc:	4620      	mov	r0, r4
 800c8de:	f000 fa2b 	bl	800cd38 <__multadd>
 800c8e2:	9b02      	ldr	r3, [sp, #8]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	4607      	mov	r7, r0
 800c8e8:	f300 808e 	bgt.w	800ca08 <_dtoa_r+0x990>
 800c8ec:	9b06      	ldr	r3, [sp, #24]
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	dc51      	bgt.n	800c996 <_dtoa_r+0x91e>
 800c8f2:	e089      	b.n	800ca08 <_dtoa_r+0x990>
 800c8f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c8fa:	e74b      	b.n	800c794 <_dtoa_r+0x71c>
 800c8fc:	9b03      	ldr	r3, [sp, #12]
 800c8fe:	1e5e      	subs	r6, r3, #1
 800c900:	9b07      	ldr	r3, [sp, #28]
 800c902:	42b3      	cmp	r3, r6
 800c904:	bfbf      	itttt	lt
 800c906:	9b07      	ldrlt	r3, [sp, #28]
 800c908:	9607      	strlt	r6, [sp, #28]
 800c90a:	1af2      	sublt	r2, r6, r3
 800c90c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c90e:	bfb6      	itet	lt
 800c910:	189b      	addlt	r3, r3, r2
 800c912:	1b9e      	subge	r6, r3, r6
 800c914:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c916:	9b03      	ldr	r3, [sp, #12]
 800c918:	bfb8      	it	lt
 800c91a:	2600      	movlt	r6, #0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	bfb7      	itett	lt
 800c920:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c924:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c928:	1a9d      	sublt	r5, r3, r2
 800c92a:	2300      	movlt	r3, #0
 800c92c:	e734      	b.n	800c798 <_dtoa_r+0x720>
 800c92e:	9e07      	ldr	r6, [sp, #28]
 800c930:	9d04      	ldr	r5, [sp, #16]
 800c932:	9f08      	ldr	r7, [sp, #32]
 800c934:	e73b      	b.n	800c7ae <_dtoa_r+0x736>
 800c936:	9a07      	ldr	r2, [sp, #28]
 800c938:	e767      	b.n	800c80a <_dtoa_r+0x792>
 800c93a:	9b06      	ldr	r3, [sp, #24]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	dc18      	bgt.n	800c972 <_dtoa_r+0x8fa>
 800c940:	f1ba 0f00 	cmp.w	sl, #0
 800c944:	d115      	bne.n	800c972 <_dtoa_r+0x8fa>
 800c946:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c94a:	b993      	cbnz	r3, 800c972 <_dtoa_r+0x8fa>
 800c94c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c950:	0d1b      	lsrs	r3, r3, #20
 800c952:	051b      	lsls	r3, r3, #20
 800c954:	b183      	cbz	r3, 800c978 <_dtoa_r+0x900>
 800c956:	9b04      	ldr	r3, [sp, #16]
 800c958:	3301      	adds	r3, #1
 800c95a:	9304      	str	r3, [sp, #16]
 800c95c:	9b05      	ldr	r3, [sp, #20]
 800c95e:	3301      	adds	r3, #1
 800c960:	9305      	str	r3, [sp, #20]
 800c962:	f04f 0801 	mov.w	r8, #1
 800c966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c968:	2b00      	cmp	r3, #0
 800c96a:	f47f af6a 	bne.w	800c842 <_dtoa_r+0x7ca>
 800c96e:	2001      	movs	r0, #1
 800c970:	e76f      	b.n	800c852 <_dtoa_r+0x7da>
 800c972:	f04f 0800 	mov.w	r8, #0
 800c976:	e7f6      	b.n	800c966 <_dtoa_r+0x8ee>
 800c978:	4698      	mov	r8, r3
 800c97a:	e7f4      	b.n	800c966 <_dtoa_r+0x8ee>
 800c97c:	f43f af7d 	beq.w	800c87a <_dtoa_r+0x802>
 800c980:	4618      	mov	r0, r3
 800c982:	301c      	adds	r0, #28
 800c984:	e772      	b.n	800c86c <_dtoa_r+0x7f4>
 800c986:	9b03      	ldr	r3, [sp, #12]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	dc37      	bgt.n	800c9fc <_dtoa_r+0x984>
 800c98c:	9b06      	ldr	r3, [sp, #24]
 800c98e:	2b02      	cmp	r3, #2
 800c990:	dd34      	ble.n	800c9fc <_dtoa_r+0x984>
 800c992:	9b03      	ldr	r3, [sp, #12]
 800c994:	9302      	str	r3, [sp, #8]
 800c996:	9b02      	ldr	r3, [sp, #8]
 800c998:	b96b      	cbnz	r3, 800c9b6 <_dtoa_r+0x93e>
 800c99a:	4631      	mov	r1, r6
 800c99c:	2205      	movs	r2, #5
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f000 f9ca 	bl	800cd38 <__multadd>
 800c9a4:	4601      	mov	r1, r0
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	ee18 0a10 	vmov	r0, s16
 800c9ac:	f000 fbe4 	bl	800d178 <__mcmp>
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	f73f adbb 	bgt.w	800c52c <_dtoa_r+0x4b4>
 800c9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b8:	9d01      	ldr	r5, [sp, #4]
 800c9ba:	43db      	mvns	r3, r3
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	f04f 0800 	mov.w	r8, #0
 800c9c2:	4631      	mov	r1, r6
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f000 f995 	bl	800ccf4 <_Bfree>
 800c9ca:	2f00      	cmp	r7, #0
 800c9cc:	f43f aea4 	beq.w	800c718 <_dtoa_r+0x6a0>
 800c9d0:	f1b8 0f00 	cmp.w	r8, #0
 800c9d4:	d005      	beq.n	800c9e2 <_dtoa_r+0x96a>
 800c9d6:	45b8      	cmp	r8, r7
 800c9d8:	d003      	beq.n	800c9e2 <_dtoa_r+0x96a>
 800c9da:	4641      	mov	r1, r8
 800c9dc:	4620      	mov	r0, r4
 800c9de:	f000 f989 	bl	800ccf4 <_Bfree>
 800c9e2:	4639      	mov	r1, r7
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	f000 f985 	bl	800ccf4 <_Bfree>
 800c9ea:	e695      	b.n	800c718 <_dtoa_r+0x6a0>
 800c9ec:	2600      	movs	r6, #0
 800c9ee:	4637      	mov	r7, r6
 800c9f0:	e7e1      	b.n	800c9b6 <_dtoa_r+0x93e>
 800c9f2:	9700      	str	r7, [sp, #0]
 800c9f4:	4637      	mov	r7, r6
 800c9f6:	e599      	b.n	800c52c <_dtoa_r+0x4b4>
 800c9f8:	40240000 	.word	0x40240000
 800c9fc:	9b08      	ldr	r3, [sp, #32]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f000 80ca 	beq.w	800cb98 <_dtoa_r+0xb20>
 800ca04:	9b03      	ldr	r3, [sp, #12]
 800ca06:	9302      	str	r3, [sp, #8]
 800ca08:	2d00      	cmp	r5, #0
 800ca0a:	dd05      	ble.n	800ca18 <_dtoa_r+0x9a0>
 800ca0c:	4639      	mov	r1, r7
 800ca0e:	462a      	mov	r2, r5
 800ca10:	4620      	mov	r0, r4
 800ca12:	f000 fb41 	bl	800d098 <__lshift>
 800ca16:	4607      	mov	r7, r0
 800ca18:	f1b8 0f00 	cmp.w	r8, #0
 800ca1c:	d05b      	beq.n	800cad6 <_dtoa_r+0xa5e>
 800ca1e:	6879      	ldr	r1, [r7, #4]
 800ca20:	4620      	mov	r0, r4
 800ca22:	f000 f927 	bl	800cc74 <_Balloc>
 800ca26:	4605      	mov	r5, r0
 800ca28:	b928      	cbnz	r0, 800ca36 <_dtoa_r+0x9be>
 800ca2a:	4b87      	ldr	r3, [pc, #540]	; (800cc48 <_dtoa_r+0xbd0>)
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ca32:	f7ff bb3b 	b.w	800c0ac <_dtoa_r+0x34>
 800ca36:	693a      	ldr	r2, [r7, #16]
 800ca38:	3202      	adds	r2, #2
 800ca3a:	0092      	lsls	r2, r2, #2
 800ca3c:	f107 010c 	add.w	r1, r7, #12
 800ca40:	300c      	adds	r0, #12
 800ca42:	f7fe fcbf 	bl	800b3c4 <memcpy>
 800ca46:	2201      	movs	r2, #1
 800ca48:	4629      	mov	r1, r5
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f000 fb24 	bl	800d098 <__lshift>
 800ca50:	9b01      	ldr	r3, [sp, #4]
 800ca52:	f103 0901 	add.w	r9, r3, #1
 800ca56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ca5a:	4413      	add	r3, r2
 800ca5c:	9305      	str	r3, [sp, #20]
 800ca5e:	f00a 0301 	and.w	r3, sl, #1
 800ca62:	46b8      	mov	r8, r7
 800ca64:	9304      	str	r3, [sp, #16]
 800ca66:	4607      	mov	r7, r0
 800ca68:	4631      	mov	r1, r6
 800ca6a:	ee18 0a10 	vmov	r0, s16
 800ca6e:	f7ff fa77 	bl	800bf60 <quorem>
 800ca72:	4641      	mov	r1, r8
 800ca74:	9002      	str	r0, [sp, #8]
 800ca76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ca7a:	ee18 0a10 	vmov	r0, s16
 800ca7e:	f000 fb7b 	bl	800d178 <__mcmp>
 800ca82:	463a      	mov	r2, r7
 800ca84:	9003      	str	r0, [sp, #12]
 800ca86:	4631      	mov	r1, r6
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f000 fb91 	bl	800d1b0 <__mdiff>
 800ca8e:	68c2      	ldr	r2, [r0, #12]
 800ca90:	f109 3bff 	add.w	fp, r9, #4294967295
 800ca94:	4605      	mov	r5, r0
 800ca96:	bb02      	cbnz	r2, 800cada <_dtoa_r+0xa62>
 800ca98:	4601      	mov	r1, r0
 800ca9a:	ee18 0a10 	vmov	r0, s16
 800ca9e:	f000 fb6b 	bl	800d178 <__mcmp>
 800caa2:	4602      	mov	r2, r0
 800caa4:	4629      	mov	r1, r5
 800caa6:	4620      	mov	r0, r4
 800caa8:	9207      	str	r2, [sp, #28]
 800caaa:	f000 f923 	bl	800ccf4 <_Bfree>
 800caae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cab2:	ea43 0102 	orr.w	r1, r3, r2
 800cab6:	9b04      	ldr	r3, [sp, #16]
 800cab8:	430b      	orrs	r3, r1
 800caba:	464d      	mov	r5, r9
 800cabc:	d10f      	bne.n	800cade <_dtoa_r+0xa66>
 800cabe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cac2:	d02a      	beq.n	800cb1a <_dtoa_r+0xaa2>
 800cac4:	9b03      	ldr	r3, [sp, #12]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	dd02      	ble.n	800cad0 <_dtoa_r+0xa58>
 800caca:	9b02      	ldr	r3, [sp, #8]
 800cacc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cad0:	f88b a000 	strb.w	sl, [fp]
 800cad4:	e775      	b.n	800c9c2 <_dtoa_r+0x94a>
 800cad6:	4638      	mov	r0, r7
 800cad8:	e7ba      	b.n	800ca50 <_dtoa_r+0x9d8>
 800cada:	2201      	movs	r2, #1
 800cadc:	e7e2      	b.n	800caa4 <_dtoa_r+0xa2c>
 800cade:	9b03      	ldr	r3, [sp, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	db04      	blt.n	800caee <_dtoa_r+0xa76>
 800cae4:	9906      	ldr	r1, [sp, #24]
 800cae6:	430b      	orrs	r3, r1
 800cae8:	9904      	ldr	r1, [sp, #16]
 800caea:	430b      	orrs	r3, r1
 800caec:	d122      	bne.n	800cb34 <_dtoa_r+0xabc>
 800caee:	2a00      	cmp	r2, #0
 800caf0:	ddee      	ble.n	800cad0 <_dtoa_r+0xa58>
 800caf2:	ee18 1a10 	vmov	r1, s16
 800caf6:	2201      	movs	r2, #1
 800caf8:	4620      	mov	r0, r4
 800cafa:	f000 facd 	bl	800d098 <__lshift>
 800cafe:	4631      	mov	r1, r6
 800cb00:	ee08 0a10 	vmov	s16, r0
 800cb04:	f000 fb38 	bl	800d178 <__mcmp>
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	dc03      	bgt.n	800cb14 <_dtoa_r+0xa9c>
 800cb0c:	d1e0      	bne.n	800cad0 <_dtoa_r+0xa58>
 800cb0e:	f01a 0f01 	tst.w	sl, #1
 800cb12:	d0dd      	beq.n	800cad0 <_dtoa_r+0xa58>
 800cb14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb18:	d1d7      	bne.n	800caca <_dtoa_r+0xa52>
 800cb1a:	2339      	movs	r3, #57	; 0x39
 800cb1c:	f88b 3000 	strb.w	r3, [fp]
 800cb20:	462b      	mov	r3, r5
 800cb22:	461d      	mov	r5, r3
 800cb24:	3b01      	subs	r3, #1
 800cb26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cb2a:	2a39      	cmp	r2, #57	; 0x39
 800cb2c:	d071      	beq.n	800cc12 <_dtoa_r+0xb9a>
 800cb2e:	3201      	adds	r2, #1
 800cb30:	701a      	strb	r2, [r3, #0]
 800cb32:	e746      	b.n	800c9c2 <_dtoa_r+0x94a>
 800cb34:	2a00      	cmp	r2, #0
 800cb36:	dd07      	ble.n	800cb48 <_dtoa_r+0xad0>
 800cb38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb3c:	d0ed      	beq.n	800cb1a <_dtoa_r+0xaa2>
 800cb3e:	f10a 0301 	add.w	r3, sl, #1
 800cb42:	f88b 3000 	strb.w	r3, [fp]
 800cb46:	e73c      	b.n	800c9c2 <_dtoa_r+0x94a>
 800cb48:	9b05      	ldr	r3, [sp, #20]
 800cb4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cb4e:	4599      	cmp	r9, r3
 800cb50:	d047      	beq.n	800cbe2 <_dtoa_r+0xb6a>
 800cb52:	ee18 1a10 	vmov	r1, s16
 800cb56:	2300      	movs	r3, #0
 800cb58:	220a      	movs	r2, #10
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f000 f8ec 	bl	800cd38 <__multadd>
 800cb60:	45b8      	cmp	r8, r7
 800cb62:	ee08 0a10 	vmov	s16, r0
 800cb66:	f04f 0300 	mov.w	r3, #0
 800cb6a:	f04f 020a 	mov.w	r2, #10
 800cb6e:	4641      	mov	r1, r8
 800cb70:	4620      	mov	r0, r4
 800cb72:	d106      	bne.n	800cb82 <_dtoa_r+0xb0a>
 800cb74:	f000 f8e0 	bl	800cd38 <__multadd>
 800cb78:	4680      	mov	r8, r0
 800cb7a:	4607      	mov	r7, r0
 800cb7c:	f109 0901 	add.w	r9, r9, #1
 800cb80:	e772      	b.n	800ca68 <_dtoa_r+0x9f0>
 800cb82:	f000 f8d9 	bl	800cd38 <__multadd>
 800cb86:	4639      	mov	r1, r7
 800cb88:	4680      	mov	r8, r0
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	220a      	movs	r2, #10
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f000 f8d2 	bl	800cd38 <__multadd>
 800cb94:	4607      	mov	r7, r0
 800cb96:	e7f1      	b.n	800cb7c <_dtoa_r+0xb04>
 800cb98:	9b03      	ldr	r3, [sp, #12]
 800cb9a:	9302      	str	r3, [sp, #8]
 800cb9c:	9d01      	ldr	r5, [sp, #4]
 800cb9e:	ee18 0a10 	vmov	r0, s16
 800cba2:	4631      	mov	r1, r6
 800cba4:	f7ff f9dc 	bl	800bf60 <quorem>
 800cba8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cbac:	9b01      	ldr	r3, [sp, #4]
 800cbae:	f805 ab01 	strb.w	sl, [r5], #1
 800cbb2:	1aea      	subs	r2, r5, r3
 800cbb4:	9b02      	ldr	r3, [sp, #8]
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	dd09      	ble.n	800cbce <_dtoa_r+0xb56>
 800cbba:	ee18 1a10 	vmov	r1, s16
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	220a      	movs	r2, #10
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	f000 f8b8 	bl	800cd38 <__multadd>
 800cbc8:	ee08 0a10 	vmov	s16, r0
 800cbcc:	e7e7      	b.n	800cb9e <_dtoa_r+0xb26>
 800cbce:	9b02      	ldr	r3, [sp, #8]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	bfc8      	it	gt
 800cbd4:	461d      	movgt	r5, r3
 800cbd6:	9b01      	ldr	r3, [sp, #4]
 800cbd8:	bfd8      	it	le
 800cbda:	2501      	movle	r5, #1
 800cbdc:	441d      	add	r5, r3
 800cbde:	f04f 0800 	mov.w	r8, #0
 800cbe2:	ee18 1a10 	vmov	r1, s16
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f000 fa55 	bl	800d098 <__lshift>
 800cbee:	4631      	mov	r1, r6
 800cbf0:	ee08 0a10 	vmov	s16, r0
 800cbf4:	f000 fac0 	bl	800d178 <__mcmp>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	dc91      	bgt.n	800cb20 <_dtoa_r+0xaa8>
 800cbfc:	d102      	bne.n	800cc04 <_dtoa_r+0xb8c>
 800cbfe:	f01a 0f01 	tst.w	sl, #1
 800cc02:	d18d      	bne.n	800cb20 <_dtoa_r+0xaa8>
 800cc04:	462b      	mov	r3, r5
 800cc06:	461d      	mov	r5, r3
 800cc08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc0c:	2a30      	cmp	r2, #48	; 0x30
 800cc0e:	d0fa      	beq.n	800cc06 <_dtoa_r+0xb8e>
 800cc10:	e6d7      	b.n	800c9c2 <_dtoa_r+0x94a>
 800cc12:	9a01      	ldr	r2, [sp, #4]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d184      	bne.n	800cb22 <_dtoa_r+0xaaa>
 800cc18:	9b00      	ldr	r3, [sp, #0]
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	2331      	movs	r3, #49	; 0x31
 800cc20:	7013      	strb	r3, [r2, #0]
 800cc22:	e6ce      	b.n	800c9c2 <_dtoa_r+0x94a>
 800cc24:	4b09      	ldr	r3, [pc, #36]	; (800cc4c <_dtoa_r+0xbd4>)
 800cc26:	f7ff ba95 	b.w	800c154 <_dtoa_r+0xdc>
 800cc2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	f47f aa6e 	bne.w	800c10e <_dtoa_r+0x96>
 800cc32:	4b07      	ldr	r3, [pc, #28]	; (800cc50 <_dtoa_r+0xbd8>)
 800cc34:	f7ff ba8e 	b.w	800c154 <_dtoa_r+0xdc>
 800cc38:	9b02      	ldr	r3, [sp, #8]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	dcae      	bgt.n	800cb9c <_dtoa_r+0xb24>
 800cc3e:	9b06      	ldr	r3, [sp, #24]
 800cc40:	2b02      	cmp	r3, #2
 800cc42:	f73f aea8 	bgt.w	800c996 <_dtoa_r+0x91e>
 800cc46:	e7a9      	b.n	800cb9c <_dtoa_r+0xb24>
 800cc48:	0800e137 	.word	0x0800e137
 800cc4c:	0800e094 	.word	0x0800e094
 800cc50:	0800e0b8 	.word	0x0800e0b8

0800cc54 <_localeconv_r>:
 800cc54:	4800      	ldr	r0, [pc, #0]	; (800cc58 <_localeconv_r+0x4>)
 800cc56:	4770      	bx	lr
 800cc58:	20000164 	.word	0x20000164

0800cc5c <__malloc_lock>:
 800cc5c:	4801      	ldr	r0, [pc, #4]	; (800cc64 <__malloc_lock+0x8>)
 800cc5e:	f000 bbd4 	b.w	800d40a <__retarget_lock_acquire_recursive>
 800cc62:	bf00      	nop
 800cc64:	20000ad0 	.word	0x20000ad0

0800cc68 <__malloc_unlock>:
 800cc68:	4801      	ldr	r0, [pc, #4]	; (800cc70 <__malloc_unlock+0x8>)
 800cc6a:	f000 bbcf 	b.w	800d40c <__retarget_lock_release_recursive>
 800cc6e:	bf00      	nop
 800cc70:	20000ad0 	.word	0x20000ad0

0800cc74 <_Balloc>:
 800cc74:	b570      	push	{r4, r5, r6, lr}
 800cc76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc78:	4604      	mov	r4, r0
 800cc7a:	460d      	mov	r5, r1
 800cc7c:	b976      	cbnz	r6, 800cc9c <_Balloc+0x28>
 800cc7e:	2010      	movs	r0, #16
 800cc80:	f7fe fb90 	bl	800b3a4 <malloc>
 800cc84:	4602      	mov	r2, r0
 800cc86:	6260      	str	r0, [r4, #36]	; 0x24
 800cc88:	b920      	cbnz	r0, 800cc94 <_Balloc+0x20>
 800cc8a:	4b18      	ldr	r3, [pc, #96]	; (800ccec <_Balloc+0x78>)
 800cc8c:	4818      	ldr	r0, [pc, #96]	; (800ccf0 <_Balloc+0x7c>)
 800cc8e:	2166      	movs	r1, #102	; 0x66
 800cc90:	f000 fb8a 	bl	800d3a8 <__assert_func>
 800cc94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc98:	6006      	str	r6, [r0, #0]
 800cc9a:	60c6      	str	r6, [r0, #12]
 800cc9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc9e:	68f3      	ldr	r3, [r6, #12]
 800cca0:	b183      	cbz	r3, 800ccc4 <_Balloc+0x50>
 800cca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ccaa:	b9b8      	cbnz	r0, 800ccdc <_Balloc+0x68>
 800ccac:	2101      	movs	r1, #1
 800ccae:	fa01 f605 	lsl.w	r6, r1, r5
 800ccb2:	1d72      	adds	r2, r6, #5
 800ccb4:	0092      	lsls	r2, r2, #2
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f000 fb60 	bl	800d37c <_calloc_r>
 800ccbc:	b160      	cbz	r0, 800ccd8 <_Balloc+0x64>
 800ccbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccc2:	e00e      	b.n	800cce2 <_Balloc+0x6e>
 800ccc4:	2221      	movs	r2, #33	; 0x21
 800ccc6:	2104      	movs	r1, #4
 800ccc8:	4620      	mov	r0, r4
 800ccca:	f000 fb57 	bl	800d37c <_calloc_r>
 800ccce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccd0:	60f0      	str	r0, [r6, #12]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1e4      	bne.n	800cca2 <_Balloc+0x2e>
 800ccd8:	2000      	movs	r0, #0
 800ccda:	bd70      	pop	{r4, r5, r6, pc}
 800ccdc:	6802      	ldr	r2, [r0, #0]
 800ccde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cce2:	2300      	movs	r3, #0
 800cce4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cce8:	e7f7      	b.n	800ccda <_Balloc+0x66>
 800ccea:	bf00      	nop
 800ccec:	0800e0c5 	.word	0x0800e0c5
 800ccf0:	0800e148 	.word	0x0800e148

0800ccf4 <_Bfree>:
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ccf8:	4605      	mov	r5, r0
 800ccfa:	460c      	mov	r4, r1
 800ccfc:	b976      	cbnz	r6, 800cd1c <_Bfree+0x28>
 800ccfe:	2010      	movs	r0, #16
 800cd00:	f7fe fb50 	bl	800b3a4 <malloc>
 800cd04:	4602      	mov	r2, r0
 800cd06:	6268      	str	r0, [r5, #36]	; 0x24
 800cd08:	b920      	cbnz	r0, 800cd14 <_Bfree+0x20>
 800cd0a:	4b09      	ldr	r3, [pc, #36]	; (800cd30 <_Bfree+0x3c>)
 800cd0c:	4809      	ldr	r0, [pc, #36]	; (800cd34 <_Bfree+0x40>)
 800cd0e:	218a      	movs	r1, #138	; 0x8a
 800cd10:	f000 fb4a 	bl	800d3a8 <__assert_func>
 800cd14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd18:	6006      	str	r6, [r0, #0]
 800cd1a:	60c6      	str	r6, [r0, #12]
 800cd1c:	b13c      	cbz	r4, 800cd2e <_Bfree+0x3a>
 800cd1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd20:	6862      	ldr	r2, [r4, #4]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd28:	6021      	str	r1, [r4, #0]
 800cd2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd2e:	bd70      	pop	{r4, r5, r6, pc}
 800cd30:	0800e0c5 	.word	0x0800e0c5
 800cd34:	0800e148 	.word	0x0800e148

0800cd38 <__multadd>:
 800cd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd3c:	690d      	ldr	r5, [r1, #16]
 800cd3e:	4607      	mov	r7, r0
 800cd40:	460c      	mov	r4, r1
 800cd42:	461e      	mov	r6, r3
 800cd44:	f101 0c14 	add.w	ip, r1, #20
 800cd48:	2000      	movs	r0, #0
 800cd4a:	f8dc 3000 	ldr.w	r3, [ip]
 800cd4e:	b299      	uxth	r1, r3
 800cd50:	fb02 6101 	mla	r1, r2, r1, r6
 800cd54:	0c1e      	lsrs	r6, r3, #16
 800cd56:	0c0b      	lsrs	r3, r1, #16
 800cd58:	fb02 3306 	mla	r3, r2, r6, r3
 800cd5c:	b289      	uxth	r1, r1
 800cd5e:	3001      	adds	r0, #1
 800cd60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd64:	4285      	cmp	r5, r0
 800cd66:	f84c 1b04 	str.w	r1, [ip], #4
 800cd6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd6e:	dcec      	bgt.n	800cd4a <__multadd+0x12>
 800cd70:	b30e      	cbz	r6, 800cdb6 <__multadd+0x7e>
 800cd72:	68a3      	ldr	r3, [r4, #8]
 800cd74:	42ab      	cmp	r3, r5
 800cd76:	dc19      	bgt.n	800cdac <__multadd+0x74>
 800cd78:	6861      	ldr	r1, [r4, #4]
 800cd7a:	4638      	mov	r0, r7
 800cd7c:	3101      	adds	r1, #1
 800cd7e:	f7ff ff79 	bl	800cc74 <_Balloc>
 800cd82:	4680      	mov	r8, r0
 800cd84:	b928      	cbnz	r0, 800cd92 <__multadd+0x5a>
 800cd86:	4602      	mov	r2, r0
 800cd88:	4b0c      	ldr	r3, [pc, #48]	; (800cdbc <__multadd+0x84>)
 800cd8a:	480d      	ldr	r0, [pc, #52]	; (800cdc0 <__multadd+0x88>)
 800cd8c:	21b5      	movs	r1, #181	; 0xb5
 800cd8e:	f000 fb0b 	bl	800d3a8 <__assert_func>
 800cd92:	6922      	ldr	r2, [r4, #16]
 800cd94:	3202      	adds	r2, #2
 800cd96:	f104 010c 	add.w	r1, r4, #12
 800cd9a:	0092      	lsls	r2, r2, #2
 800cd9c:	300c      	adds	r0, #12
 800cd9e:	f7fe fb11 	bl	800b3c4 <memcpy>
 800cda2:	4621      	mov	r1, r4
 800cda4:	4638      	mov	r0, r7
 800cda6:	f7ff ffa5 	bl	800ccf4 <_Bfree>
 800cdaa:	4644      	mov	r4, r8
 800cdac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cdb0:	3501      	adds	r5, #1
 800cdb2:	615e      	str	r6, [r3, #20]
 800cdb4:	6125      	str	r5, [r4, #16]
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdbc:	0800e137 	.word	0x0800e137
 800cdc0:	0800e148 	.word	0x0800e148

0800cdc4 <__hi0bits>:
 800cdc4:	0c03      	lsrs	r3, r0, #16
 800cdc6:	041b      	lsls	r3, r3, #16
 800cdc8:	b9d3      	cbnz	r3, 800ce00 <__hi0bits+0x3c>
 800cdca:	0400      	lsls	r0, r0, #16
 800cdcc:	2310      	movs	r3, #16
 800cdce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cdd2:	bf04      	itt	eq
 800cdd4:	0200      	lsleq	r0, r0, #8
 800cdd6:	3308      	addeq	r3, #8
 800cdd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cddc:	bf04      	itt	eq
 800cdde:	0100      	lsleq	r0, r0, #4
 800cde0:	3304      	addeq	r3, #4
 800cde2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cde6:	bf04      	itt	eq
 800cde8:	0080      	lsleq	r0, r0, #2
 800cdea:	3302      	addeq	r3, #2
 800cdec:	2800      	cmp	r0, #0
 800cdee:	db05      	blt.n	800cdfc <__hi0bits+0x38>
 800cdf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cdf4:	f103 0301 	add.w	r3, r3, #1
 800cdf8:	bf08      	it	eq
 800cdfa:	2320      	moveq	r3, #32
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	4770      	bx	lr
 800ce00:	2300      	movs	r3, #0
 800ce02:	e7e4      	b.n	800cdce <__hi0bits+0xa>

0800ce04 <__lo0bits>:
 800ce04:	6803      	ldr	r3, [r0, #0]
 800ce06:	f013 0207 	ands.w	r2, r3, #7
 800ce0a:	4601      	mov	r1, r0
 800ce0c:	d00b      	beq.n	800ce26 <__lo0bits+0x22>
 800ce0e:	07da      	lsls	r2, r3, #31
 800ce10:	d423      	bmi.n	800ce5a <__lo0bits+0x56>
 800ce12:	0798      	lsls	r0, r3, #30
 800ce14:	bf49      	itett	mi
 800ce16:	085b      	lsrmi	r3, r3, #1
 800ce18:	089b      	lsrpl	r3, r3, #2
 800ce1a:	2001      	movmi	r0, #1
 800ce1c:	600b      	strmi	r3, [r1, #0]
 800ce1e:	bf5c      	itt	pl
 800ce20:	600b      	strpl	r3, [r1, #0]
 800ce22:	2002      	movpl	r0, #2
 800ce24:	4770      	bx	lr
 800ce26:	b298      	uxth	r0, r3
 800ce28:	b9a8      	cbnz	r0, 800ce56 <__lo0bits+0x52>
 800ce2a:	0c1b      	lsrs	r3, r3, #16
 800ce2c:	2010      	movs	r0, #16
 800ce2e:	b2da      	uxtb	r2, r3
 800ce30:	b90a      	cbnz	r2, 800ce36 <__lo0bits+0x32>
 800ce32:	3008      	adds	r0, #8
 800ce34:	0a1b      	lsrs	r3, r3, #8
 800ce36:	071a      	lsls	r2, r3, #28
 800ce38:	bf04      	itt	eq
 800ce3a:	091b      	lsreq	r3, r3, #4
 800ce3c:	3004      	addeq	r0, #4
 800ce3e:	079a      	lsls	r2, r3, #30
 800ce40:	bf04      	itt	eq
 800ce42:	089b      	lsreq	r3, r3, #2
 800ce44:	3002      	addeq	r0, #2
 800ce46:	07da      	lsls	r2, r3, #31
 800ce48:	d403      	bmi.n	800ce52 <__lo0bits+0x4e>
 800ce4a:	085b      	lsrs	r3, r3, #1
 800ce4c:	f100 0001 	add.w	r0, r0, #1
 800ce50:	d005      	beq.n	800ce5e <__lo0bits+0x5a>
 800ce52:	600b      	str	r3, [r1, #0]
 800ce54:	4770      	bx	lr
 800ce56:	4610      	mov	r0, r2
 800ce58:	e7e9      	b.n	800ce2e <__lo0bits+0x2a>
 800ce5a:	2000      	movs	r0, #0
 800ce5c:	4770      	bx	lr
 800ce5e:	2020      	movs	r0, #32
 800ce60:	4770      	bx	lr
	...

0800ce64 <__i2b>:
 800ce64:	b510      	push	{r4, lr}
 800ce66:	460c      	mov	r4, r1
 800ce68:	2101      	movs	r1, #1
 800ce6a:	f7ff ff03 	bl	800cc74 <_Balloc>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	b928      	cbnz	r0, 800ce7e <__i2b+0x1a>
 800ce72:	4b05      	ldr	r3, [pc, #20]	; (800ce88 <__i2b+0x24>)
 800ce74:	4805      	ldr	r0, [pc, #20]	; (800ce8c <__i2b+0x28>)
 800ce76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ce7a:	f000 fa95 	bl	800d3a8 <__assert_func>
 800ce7e:	2301      	movs	r3, #1
 800ce80:	6144      	str	r4, [r0, #20]
 800ce82:	6103      	str	r3, [r0, #16]
 800ce84:	bd10      	pop	{r4, pc}
 800ce86:	bf00      	nop
 800ce88:	0800e137 	.word	0x0800e137
 800ce8c:	0800e148 	.word	0x0800e148

0800ce90 <__multiply>:
 800ce90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce94:	4691      	mov	r9, r2
 800ce96:	690a      	ldr	r2, [r1, #16]
 800ce98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	bfb8      	it	lt
 800cea0:	460b      	movlt	r3, r1
 800cea2:	460c      	mov	r4, r1
 800cea4:	bfbc      	itt	lt
 800cea6:	464c      	movlt	r4, r9
 800cea8:	4699      	movlt	r9, r3
 800ceaa:	6927      	ldr	r7, [r4, #16]
 800ceac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ceb0:	68a3      	ldr	r3, [r4, #8]
 800ceb2:	6861      	ldr	r1, [r4, #4]
 800ceb4:	eb07 060a 	add.w	r6, r7, sl
 800ceb8:	42b3      	cmp	r3, r6
 800ceba:	b085      	sub	sp, #20
 800cebc:	bfb8      	it	lt
 800cebe:	3101      	addlt	r1, #1
 800cec0:	f7ff fed8 	bl	800cc74 <_Balloc>
 800cec4:	b930      	cbnz	r0, 800ced4 <__multiply+0x44>
 800cec6:	4602      	mov	r2, r0
 800cec8:	4b44      	ldr	r3, [pc, #272]	; (800cfdc <__multiply+0x14c>)
 800ceca:	4845      	ldr	r0, [pc, #276]	; (800cfe0 <__multiply+0x150>)
 800cecc:	f240 115d 	movw	r1, #349	; 0x15d
 800ced0:	f000 fa6a 	bl	800d3a8 <__assert_func>
 800ced4:	f100 0514 	add.w	r5, r0, #20
 800ced8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cedc:	462b      	mov	r3, r5
 800cede:	2200      	movs	r2, #0
 800cee0:	4543      	cmp	r3, r8
 800cee2:	d321      	bcc.n	800cf28 <__multiply+0x98>
 800cee4:	f104 0314 	add.w	r3, r4, #20
 800cee8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ceec:	f109 0314 	add.w	r3, r9, #20
 800cef0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cef4:	9202      	str	r2, [sp, #8]
 800cef6:	1b3a      	subs	r2, r7, r4
 800cef8:	3a15      	subs	r2, #21
 800cefa:	f022 0203 	bic.w	r2, r2, #3
 800cefe:	3204      	adds	r2, #4
 800cf00:	f104 0115 	add.w	r1, r4, #21
 800cf04:	428f      	cmp	r7, r1
 800cf06:	bf38      	it	cc
 800cf08:	2204      	movcc	r2, #4
 800cf0a:	9201      	str	r2, [sp, #4]
 800cf0c:	9a02      	ldr	r2, [sp, #8]
 800cf0e:	9303      	str	r3, [sp, #12]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d80c      	bhi.n	800cf2e <__multiply+0x9e>
 800cf14:	2e00      	cmp	r6, #0
 800cf16:	dd03      	ble.n	800cf20 <__multiply+0x90>
 800cf18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d05a      	beq.n	800cfd6 <__multiply+0x146>
 800cf20:	6106      	str	r6, [r0, #16]
 800cf22:	b005      	add	sp, #20
 800cf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf28:	f843 2b04 	str.w	r2, [r3], #4
 800cf2c:	e7d8      	b.n	800cee0 <__multiply+0x50>
 800cf2e:	f8b3 a000 	ldrh.w	sl, [r3]
 800cf32:	f1ba 0f00 	cmp.w	sl, #0
 800cf36:	d024      	beq.n	800cf82 <__multiply+0xf2>
 800cf38:	f104 0e14 	add.w	lr, r4, #20
 800cf3c:	46a9      	mov	r9, r5
 800cf3e:	f04f 0c00 	mov.w	ip, #0
 800cf42:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cf46:	f8d9 1000 	ldr.w	r1, [r9]
 800cf4a:	fa1f fb82 	uxth.w	fp, r2
 800cf4e:	b289      	uxth	r1, r1
 800cf50:	fb0a 110b 	mla	r1, sl, fp, r1
 800cf54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cf58:	f8d9 2000 	ldr.w	r2, [r9]
 800cf5c:	4461      	add	r1, ip
 800cf5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf62:	fb0a c20b 	mla	r2, sl, fp, ip
 800cf66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cf6a:	b289      	uxth	r1, r1
 800cf6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cf70:	4577      	cmp	r7, lr
 800cf72:	f849 1b04 	str.w	r1, [r9], #4
 800cf76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf7a:	d8e2      	bhi.n	800cf42 <__multiply+0xb2>
 800cf7c:	9a01      	ldr	r2, [sp, #4]
 800cf7e:	f845 c002 	str.w	ip, [r5, r2]
 800cf82:	9a03      	ldr	r2, [sp, #12]
 800cf84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cf88:	3304      	adds	r3, #4
 800cf8a:	f1b9 0f00 	cmp.w	r9, #0
 800cf8e:	d020      	beq.n	800cfd2 <__multiply+0x142>
 800cf90:	6829      	ldr	r1, [r5, #0]
 800cf92:	f104 0c14 	add.w	ip, r4, #20
 800cf96:	46ae      	mov	lr, r5
 800cf98:	f04f 0a00 	mov.w	sl, #0
 800cf9c:	f8bc b000 	ldrh.w	fp, [ip]
 800cfa0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cfa4:	fb09 220b 	mla	r2, r9, fp, r2
 800cfa8:	4492      	add	sl, r2
 800cfaa:	b289      	uxth	r1, r1
 800cfac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cfb0:	f84e 1b04 	str.w	r1, [lr], #4
 800cfb4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cfb8:	f8be 1000 	ldrh.w	r1, [lr]
 800cfbc:	0c12      	lsrs	r2, r2, #16
 800cfbe:	fb09 1102 	mla	r1, r9, r2, r1
 800cfc2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cfc6:	4567      	cmp	r7, ip
 800cfc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cfcc:	d8e6      	bhi.n	800cf9c <__multiply+0x10c>
 800cfce:	9a01      	ldr	r2, [sp, #4]
 800cfd0:	50a9      	str	r1, [r5, r2]
 800cfd2:	3504      	adds	r5, #4
 800cfd4:	e79a      	b.n	800cf0c <__multiply+0x7c>
 800cfd6:	3e01      	subs	r6, #1
 800cfd8:	e79c      	b.n	800cf14 <__multiply+0x84>
 800cfda:	bf00      	nop
 800cfdc:	0800e137 	.word	0x0800e137
 800cfe0:	0800e148 	.word	0x0800e148

0800cfe4 <__pow5mult>:
 800cfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfe8:	4615      	mov	r5, r2
 800cfea:	f012 0203 	ands.w	r2, r2, #3
 800cfee:	4606      	mov	r6, r0
 800cff0:	460f      	mov	r7, r1
 800cff2:	d007      	beq.n	800d004 <__pow5mult+0x20>
 800cff4:	4c25      	ldr	r4, [pc, #148]	; (800d08c <__pow5mult+0xa8>)
 800cff6:	3a01      	subs	r2, #1
 800cff8:	2300      	movs	r3, #0
 800cffa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cffe:	f7ff fe9b 	bl	800cd38 <__multadd>
 800d002:	4607      	mov	r7, r0
 800d004:	10ad      	asrs	r5, r5, #2
 800d006:	d03d      	beq.n	800d084 <__pow5mult+0xa0>
 800d008:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d00a:	b97c      	cbnz	r4, 800d02c <__pow5mult+0x48>
 800d00c:	2010      	movs	r0, #16
 800d00e:	f7fe f9c9 	bl	800b3a4 <malloc>
 800d012:	4602      	mov	r2, r0
 800d014:	6270      	str	r0, [r6, #36]	; 0x24
 800d016:	b928      	cbnz	r0, 800d024 <__pow5mult+0x40>
 800d018:	4b1d      	ldr	r3, [pc, #116]	; (800d090 <__pow5mult+0xac>)
 800d01a:	481e      	ldr	r0, [pc, #120]	; (800d094 <__pow5mult+0xb0>)
 800d01c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d020:	f000 f9c2 	bl	800d3a8 <__assert_func>
 800d024:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d028:	6004      	str	r4, [r0, #0]
 800d02a:	60c4      	str	r4, [r0, #12]
 800d02c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d030:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d034:	b94c      	cbnz	r4, 800d04a <__pow5mult+0x66>
 800d036:	f240 2171 	movw	r1, #625	; 0x271
 800d03a:	4630      	mov	r0, r6
 800d03c:	f7ff ff12 	bl	800ce64 <__i2b>
 800d040:	2300      	movs	r3, #0
 800d042:	f8c8 0008 	str.w	r0, [r8, #8]
 800d046:	4604      	mov	r4, r0
 800d048:	6003      	str	r3, [r0, #0]
 800d04a:	f04f 0900 	mov.w	r9, #0
 800d04e:	07eb      	lsls	r3, r5, #31
 800d050:	d50a      	bpl.n	800d068 <__pow5mult+0x84>
 800d052:	4639      	mov	r1, r7
 800d054:	4622      	mov	r2, r4
 800d056:	4630      	mov	r0, r6
 800d058:	f7ff ff1a 	bl	800ce90 <__multiply>
 800d05c:	4639      	mov	r1, r7
 800d05e:	4680      	mov	r8, r0
 800d060:	4630      	mov	r0, r6
 800d062:	f7ff fe47 	bl	800ccf4 <_Bfree>
 800d066:	4647      	mov	r7, r8
 800d068:	106d      	asrs	r5, r5, #1
 800d06a:	d00b      	beq.n	800d084 <__pow5mult+0xa0>
 800d06c:	6820      	ldr	r0, [r4, #0]
 800d06e:	b938      	cbnz	r0, 800d080 <__pow5mult+0x9c>
 800d070:	4622      	mov	r2, r4
 800d072:	4621      	mov	r1, r4
 800d074:	4630      	mov	r0, r6
 800d076:	f7ff ff0b 	bl	800ce90 <__multiply>
 800d07a:	6020      	str	r0, [r4, #0]
 800d07c:	f8c0 9000 	str.w	r9, [r0]
 800d080:	4604      	mov	r4, r0
 800d082:	e7e4      	b.n	800d04e <__pow5mult+0x6a>
 800d084:	4638      	mov	r0, r7
 800d086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d08a:	bf00      	nop
 800d08c:	0800e298 	.word	0x0800e298
 800d090:	0800e0c5 	.word	0x0800e0c5
 800d094:	0800e148 	.word	0x0800e148

0800d098 <__lshift>:
 800d098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d09c:	460c      	mov	r4, r1
 800d09e:	6849      	ldr	r1, [r1, #4]
 800d0a0:	6923      	ldr	r3, [r4, #16]
 800d0a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d0a6:	68a3      	ldr	r3, [r4, #8]
 800d0a8:	4607      	mov	r7, r0
 800d0aa:	4691      	mov	r9, r2
 800d0ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d0b0:	f108 0601 	add.w	r6, r8, #1
 800d0b4:	42b3      	cmp	r3, r6
 800d0b6:	db0b      	blt.n	800d0d0 <__lshift+0x38>
 800d0b8:	4638      	mov	r0, r7
 800d0ba:	f7ff fddb 	bl	800cc74 <_Balloc>
 800d0be:	4605      	mov	r5, r0
 800d0c0:	b948      	cbnz	r0, 800d0d6 <__lshift+0x3e>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	4b2a      	ldr	r3, [pc, #168]	; (800d170 <__lshift+0xd8>)
 800d0c6:	482b      	ldr	r0, [pc, #172]	; (800d174 <__lshift+0xdc>)
 800d0c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d0cc:	f000 f96c 	bl	800d3a8 <__assert_func>
 800d0d0:	3101      	adds	r1, #1
 800d0d2:	005b      	lsls	r3, r3, #1
 800d0d4:	e7ee      	b.n	800d0b4 <__lshift+0x1c>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f100 0114 	add.w	r1, r0, #20
 800d0dc:	f100 0210 	add.w	r2, r0, #16
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	4553      	cmp	r3, sl
 800d0e4:	db37      	blt.n	800d156 <__lshift+0xbe>
 800d0e6:	6920      	ldr	r0, [r4, #16]
 800d0e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0ec:	f104 0314 	add.w	r3, r4, #20
 800d0f0:	f019 091f 	ands.w	r9, r9, #31
 800d0f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d0fc:	d02f      	beq.n	800d15e <__lshift+0xc6>
 800d0fe:	f1c9 0e20 	rsb	lr, r9, #32
 800d102:	468a      	mov	sl, r1
 800d104:	f04f 0c00 	mov.w	ip, #0
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	fa02 f209 	lsl.w	r2, r2, r9
 800d10e:	ea42 020c 	orr.w	r2, r2, ip
 800d112:	f84a 2b04 	str.w	r2, [sl], #4
 800d116:	f853 2b04 	ldr.w	r2, [r3], #4
 800d11a:	4298      	cmp	r0, r3
 800d11c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d120:	d8f2      	bhi.n	800d108 <__lshift+0x70>
 800d122:	1b03      	subs	r3, r0, r4
 800d124:	3b15      	subs	r3, #21
 800d126:	f023 0303 	bic.w	r3, r3, #3
 800d12a:	3304      	adds	r3, #4
 800d12c:	f104 0215 	add.w	r2, r4, #21
 800d130:	4290      	cmp	r0, r2
 800d132:	bf38      	it	cc
 800d134:	2304      	movcc	r3, #4
 800d136:	f841 c003 	str.w	ip, [r1, r3]
 800d13a:	f1bc 0f00 	cmp.w	ip, #0
 800d13e:	d001      	beq.n	800d144 <__lshift+0xac>
 800d140:	f108 0602 	add.w	r6, r8, #2
 800d144:	3e01      	subs	r6, #1
 800d146:	4638      	mov	r0, r7
 800d148:	612e      	str	r6, [r5, #16]
 800d14a:	4621      	mov	r1, r4
 800d14c:	f7ff fdd2 	bl	800ccf4 <_Bfree>
 800d150:	4628      	mov	r0, r5
 800d152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d156:	f842 0f04 	str.w	r0, [r2, #4]!
 800d15a:	3301      	adds	r3, #1
 800d15c:	e7c1      	b.n	800d0e2 <__lshift+0x4a>
 800d15e:	3904      	subs	r1, #4
 800d160:	f853 2b04 	ldr.w	r2, [r3], #4
 800d164:	f841 2f04 	str.w	r2, [r1, #4]!
 800d168:	4298      	cmp	r0, r3
 800d16a:	d8f9      	bhi.n	800d160 <__lshift+0xc8>
 800d16c:	e7ea      	b.n	800d144 <__lshift+0xac>
 800d16e:	bf00      	nop
 800d170:	0800e137 	.word	0x0800e137
 800d174:	0800e148 	.word	0x0800e148

0800d178 <__mcmp>:
 800d178:	b530      	push	{r4, r5, lr}
 800d17a:	6902      	ldr	r2, [r0, #16]
 800d17c:	690c      	ldr	r4, [r1, #16]
 800d17e:	1b12      	subs	r2, r2, r4
 800d180:	d10e      	bne.n	800d1a0 <__mcmp+0x28>
 800d182:	f100 0314 	add.w	r3, r0, #20
 800d186:	3114      	adds	r1, #20
 800d188:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d18c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d190:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d194:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d198:	42a5      	cmp	r5, r4
 800d19a:	d003      	beq.n	800d1a4 <__mcmp+0x2c>
 800d19c:	d305      	bcc.n	800d1aa <__mcmp+0x32>
 800d19e:	2201      	movs	r2, #1
 800d1a0:	4610      	mov	r0, r2
 800d1a2:	bd30      	pop	{r4, r5, pc}
 800d1a4:	4283      	cmp	r3, r0
 800d1a6:	d3f3      	bcc.n	800d190 <__mcmp+0x18>
 800d1a8:	e7fa      	b.n	800d1a0 <__mcmp+0x28>
 800d1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ae:	e7f7      	b.n	800d1a0 <__mcmp+0x28>

0800d1b0 <__mdiff>:
 800d1b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b4:	460c      	mov	r4, r1
 800d1b6:	4606      	mov	r6, r0
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	4690      	mov	r8, r2
 800d1be:	f7ff ffdb 	bl	800d178 <__mcmp>
 800d1c2:	1e05      	subs	r5, r0, #0
 800d1c4:	d110      	bne.n	800d1e8 <__mdiff+0x38>
 800d1c6:	4629      	mov	r1, r5
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	f7ff fd53 	bl	800cc74 <_Balloc>
 800d1ce:	b930      	cbnz	r0, 800d1de <__mdiff+0x2e>
 800d1d0:	4b3a      	ldr	r3, [pc, #232]	; (800d2bc <__mdiff+0x10c>)
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	f240 2132 	movw	r1, #562	; 0x232
 800d1d8:	4839      	ldr	r0, [pc, #228]	; (800d2c0 <__mdiff+0x110>)
 800d1da:	f000 f8e5 	bl	800d3a8 <__assert_func>
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d1e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e8:	bfa4      	itt	ge
 800d1ea:	4643      	movge	r3, r8
 800d1ec:	46a0      	movge	r8, r4
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d1f4:	bfa6      	itte	ge
 800d1f6:	461c      	movge	r4, r3
 800d1f8:	2500      	movge	r5, #0
 800d1fa:	2501      	movlt	r5, #1
 800d1fc:	f7ff fd3a 	bl	800cc74 <_Balloc>
 800d200:	b920      	cbnz	r0, 800d20c <__mdiff+0x5c>
 800d202:	4b2e      	ldr	r3, [pc, #184]	; (800d2bc <__mdiff+0x10c>)
 800d204:	4602      	mov	r2, r0
 800d206:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d20a:	e7e5      	b.n	800d1d8 <__mdiff+0x28>
 800d20c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d210:	6926      	ldr	r6, [r4, #16]
 800d212:	60c5      	str	r5, [r0, #12]
 800d214:	f104 0914 	add.w	r9, r4, #20
 800d218:	f108 0514 	add.w	r5, r8, #20
 800d21c:	f100 0e14 	add.w	lr, r0, #20
 800d220:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d224:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d228:	f108 0210 	add.w	r2, r8, #16
 800d22c:	46f2      	mov	sl, lr
 800d22e:	2100      	movs	r1, #0
 800d230:	f859 3b04 	ldr.w	r3, [r9], #4
 800d234:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d238:	fa1f f883 	uxth.w	r8, r3
 800d23c:	fa11 f18b 	uxtah	r1, r1, fp
 800d240:	0c1b      	lsrs	r3, r3, #16
 800d242:	eba1 0808 	sub.w	r8, r1, r8
 800d246:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d24a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d24e:	fa1f f888 	uxth.w	r8, r8
 800d252:	1419      	asrs	r1, r3, #16
 800d254:	454e      	cmp	r6, r9
 800d256:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d25a:	f84a 3b04 	str.w	r3, [sl], #4
 800d25e:	d8e7      	bhi.n	800d230 <__mdiff+0x80>
 800d260:	1b33      	subs	r3, r6, r4
 800d262:	3b15      	subs	r3, #21
 800d264:	f023 0303 	bic.w	r3, r3, #3
 800d268:	3304      	adds	r3, #4
 800d26a:	3415      	adds	r4, #21
 800d26c:	42a6      	cmp	r6, r4
 800d26e:	bf38      	it	cc
 800d270:	2304      	movcc	r3, #4
 800d272:	441d      	add	r5, r3
 800d274:	4473      	add	r3, lr
 800d276:	469e      	mov	lr, r3
 800d278:	462e      	mov	r6, r5
 800d27a:	4566      	cmp	r6, ip
 800d27c:	d30e      	bcc.n	800d29c <__mdiff+0xec>
 800d27e:	f10c 0203 	add.w	r2, ip, #3
 800d282:	1b52      	subs	r2, r2, r5
 800d284:	f022 0203 	bic.w	r2, r2, #3
 800d288:	3d03      	subs	r5, #3
 800d28a:	45ac      	cmp	ip, r5
 800d28c:	bf38      	it	cc
 800d28e:	2200      	movcc	r2, #0
 800d290:	441a      	add	r2, r3
 800d292:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d296:	b17b      	cbz	r3, 800d2b8 <__mdiff+0x108>
 800d298:	6107      	str	r7, [r0, #16]
 800d29a:	e7a3      	b.n	800d1e4 <__mdiff+0x34>
 800d29c:	f856 8b04 	ldr.w	r8, [r6], #4
 800d2a0:	fa11 f288 	uxtah	r2, r1, r8
 800d2a4:	1414      	asrs	r4, r2, #16
 800d2a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d2aa:	b292      	uxth	r2, r2
 800d2ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d2b0:	f84e 2b04 	str.w	r2, [lr], #4
 800d2b4:	1421      	asrs	r1, r4, #16
 800d2b6:	e7e0      	b.n	800d27a <__mdiff+0xca>
 800d2b8:	3f01      	subs	r7, #1
 800d2ba:	e7ea      	b.n	800d292 <__mdiff+0xe2>
 800d2bc:	0800e137 	.word	0x0800e137
 800d2c0:	0800e148 	.word	0x0800e148

0800d2c4 <__d2b>:
 800d2c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2c8:	4689      	mov	r9, r1
 800d2ca:	2101      	movs	r1, #1
 800d2cc:	ec57 6b10 	vmov	r6, r7, d0
 800d2d0:	4690      	mov	r8, r2
 800d2d2:	f7ff fccf 	bl	800cc74 <_Balloc>
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	b930      	cbnz	r0, 800d2e8 <__d2b+0x24>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	4b25      	ldr	r3, [pc, #148]	; (800d374 <__d2b+0xb0>)
 800d2de:	4826      	ldr	r0, [pc, #152]	; (800d378 <__d2b+0xb4>)
 800d2e0:	f240 310a 	movw	r1, #778	; 0x30a
 800d2e4:	f000 f860 	bl	800d3a8 <__assert_func>
 800d2e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d2ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d2f0:	bb35      	cbnz	r5, 800d340 <__d2b+0x7c>
 800d2f2:	2e00      	cmp	r6, #0
 800d2f4:	9301      	str	r3, [sp, #4]
 800d2f6:	d028      	beq.n	800d34a <__d2b+0x86>
 800d2f8:	4668      	mov	r0, sp
 800d2fa:	9600      	str	r6, [sp, #0]
 800d2fc:	f7ff fd82 	bl	800ce04 <__lo0bits>
 800d300:	9900      	ldr	r1, [sp, #0]
 800d302:	b300      	cbz	r0, 800d346 <__d2b+0x82>
 800d304:	9a01      	ldr	r2, [sp, #4]
 800d306:	f1c0 0320 	rsb	r3, r0, #32
 800d30a:	fa02 f303 	lsl.w	r3, r2, r3
 800d30e:	430b      	orrs	r3, r1
 800d310:	40c2      	lsrs	r2, r0
 800d312:	6163      	str	r3, [r4, #20]
 800d314:	9201      	str	r2, [sp, #4]
 800d316:	9b01      	ldr	r3, [sp, #4]
 800d318:	61a3      	str	r3, [r4, #24]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	bf14      	ite	ne
 800d31e:	2202      	movne	r2, #2
 800d320:	2201      	moveq	r2, #1
 800d322:	6122      	str	r2, [r4, #16]
 800d324:	b1d5      	cbz	r5, 800d35c <__d2b+0x98>
 800d326:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d32a:	4405      	add	r5, r0
 800d32c:	f8c9 5000 	str.w	r5, [r9]
 800d330:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d334:	f8c8 0000 	str.w	r0, [r8]
 800d338:	4620      	mov	r0, r4
 800d33a:	b003      	add	sp, #12
 800d33c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d344:	e7d5      	b.n	800d2f2 <__d2b+0x2e>
 800d346:	6161      	str	r1, [r4, #20]
 800d348:	e7e5      	b.n	800d316 <__d2b+0x52>
 800d34a:	a801      	add	r0, sp, #4
 800d34c:	f7ff fd5a 	bl	800ce04 <__lo0bits>
 800d350:	9b01      	ldr	r3, [sp, #4]
 800d352:	6163      	str	r3, [r4, #20]
 800d354:	2201      	movs	r2, #1
 800d356:	6122      	str	r2, [r4, #16]
 800d358:	3020      	adds	r0, #32
 800d35a:	e7e3      	b.n	800d324 <__d2b+0x60>
 800d35c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d360:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d364:	f8c9 0000 	str.w	r0, [r9]
 800d368:	6918      	ldr	r0, [r3, #16]
 800d36a:	f7ff fd2b 	bl	800cdc4 <__hi0bits>
 800d36e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d372:	e7df      	b.n	800d334 <__d2b+0x70>
 800d374:	0800e137 	.word	0x0800e137
 800d378:	0800e148 	.word	0x0800e148

0800d37c <_calloc_r>:
 800d37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d37e:	fba1 2402 	umull	r2, r4, r1, r2
 800d382:	b94c      	cbnz	r4, 800d398 <_calloc_r+0x1c>
 800d384:	4611      	mov	r1, r2
 800d386:	9201      	str	r2, [sp, #4]
 800d388:	f7fe f8b8 	bl	800b4fc <_malloc_r>
 800d38c:	9a01      	ldr	r2, [sp, #4]
 800d38e:	4605      	mov	r5, r0
 800d390:	b930      	cbnz	r0, 800d3a0 <_calloc_r+0x24>
 800d392:	4628      	mov	r0, r5
 800d394:	b003      	add	sp, #12
 800d396:	bd30      	pop	{r4, r5, pc}
 800d398:	220c      	movs	r2, #12
 800d39a:	6002      	str	r2, [r0, #0]
 800d39c:	2500      	movs	r5, #0
 800d39e:	e7f8      	b.n	800d392 <_calloc_r+0x16>
 800d3a0:	4621      	mov	r1, r4
 800d3a2:	f7fe f837 	bl	800b414 <memset>
 800d3a6:	e7f4      	b.n	800d392 <_calloc_r+0x16>

0800d3a8 <__assert_func>:
 800d3a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3aa:	4614      	mov	r4, r2
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	4b09      	ldr	r3, [pc, #36]	; (800d3d4 <__assert_func+0x2c>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4605      	mov	r5, r0
 800d3b4:	68d8      	ldr	r0, [r3, #12]
 800d3b6:	b14c      	cbz	r4, 800d3cc <__assert_func+0x24>
 800d3b8:	4b07      	ldr	r3, [pc, #28]	; (800d3d8 <__assert_func+0x30>)
 800d3ba:	9100      	str	r1, [sp, #0]
 800d3bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3c0:	4906      	ldr	r1, [pc, #24]	; (800d3dc <__assert_func+0x34>)
 800d3c2:	462b      	mov	r3, r5
 800d3c4:	f000 f80e 	bl	800d3e4 <fiprintf>
 800d3c8:	f7fd ffbb 	bl	800b342 <abort>
 800d3cc:	4b04      	ldr	r3, [pc, #16]	; (800d3e0 <__assert_func+0x38>)
 800d3ce:	461c      	mov	r4, r3
 800d3d0:	e7f3      	b.n	800d3ba <__assert_func+0x12>
 800d3d2:	bf00      	nop
 800d3d4:	20000010 	.word	0x20000010
 800d3d8:	0800e2a4 	.word	0x0800e2a4
 800d3dc:	0800e2b1 	.word	0x0800e2b1
 800d3e0:	0800e2df 	.word	0x0800e2df

0800d3e4 <fiprintf>:
 800d3e4:	b40e      	push	{r1, r2, r3}
 800d3e6:	b503      	push	{r0, r1, lr}
 800d3e8:	4601      	mov	r1, r0
 800d3ea:	ab03      	add	r3, sp, #12
 800d3ec:	4805      	ldr	r0, [pc, #20]	; (800d404 <fiprintf+0x20>)
 800d3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3f2:	6800      	ldr	r0, [r0, #0]
 800d3f4:	9301      	str	r3, [sp, #4]
 800d3f6:	f000 f845 	bl	800d484 <_vfiprintf_r>
 800d3fa:	b002      	add	sp, #8
 800d3fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d400:	b003      	add	sp, #12
 800d402:	4770      	bx	lr
 800d404:	20000010 	.word	0x20000010

0800d408 <__retarget_lock_init_recursive>:
 800d408:	4770      	bx	lr

0800d40a <__retarget_lock_acquire_recursive>:
 800d40a:	4770      	bx	lr

0800d40c <__retarget_lock_release_recursive>:
 800d40c:	4770      	bx	lr

0800d40e <__ascii_mbtowc>:
 800d40e:	b082      	sub	sp, #8
 800d410:	b901      	cbnz	r1, 800d414 <__ascii_mbtowc+0x6>
 800d412:	a901      	add	r1, sp, #4
 800d414:	b142      	cbz	r2, 800d428 <__ascii_mbtowc+0x1a>
 800d416:	b14b      	cbz	r3, 800d42c <__ascii_mbtowc+0x1e>
 800d418:	7813      	ldrb	r3, [r2, #0]
 800d41a:	600b      	str	r3, [r1, #0]
 800d41c:	7812      	ldrb	r2, [r2, #0]
 800d41e:	1e10      	subs	r0, r2, #0
 800d420:	bf18      	it	ne
 800d422:	2001      	movne	r0, #1
 800d424:	b002      	add	sp, #8
 800d426:	4770      	bx	lr
 800d428:	4610      	mov	r0, r2
 800d42a:	e7fb      	b.n	800d424 <__ascii_mbtowc+0x16>
 800d42c:	f06f 0001 	mvn.w	r0, #1
 800d430:	e7f8      	b.n	800d424 <__ascii_mbtowc+0x16>

0800d432 <__sfputc_r>:
 800d432:	6893      	ldr	r3, [r2, #8]
 800d434:	3b01      	subs	r3, #1
 800d436:	2b00      	cmp	r3, #0
 800d438:	b410      	push	{r4}
 800d43a:	6093      	str	r3, [r2, #8]
 800d43c:	da08      	bge.n	800d450 <__sfputc_r+0x1e>
 800d43e:	6994      	ldr	r4, [r2, #24]
 800d440:	42a3      	cmp	r3, r4
 800d442:	db01      	blt.n	800d448 <__sfputc_r+0x16>
 800d444:	290a      	cmp	r1, #10
 800d446:	d103      	bne.n	800d450 <__sfputc_r+0x1e>
 800d448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d44c:	f000 b94a 	b.w	800d6e4 <__swbuf_r>
 800d450:	6813      	ldr	r3, [r2, #0]
 800d452:	1c58      	adds	r0, r3, #1
 800d454:	6010      	str	r0, [r2, #0]
 800d456:	7019      	strb	r1, [r3, #0]
 800d458:	4608      	mov	r0, r1
 800d45a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <__sfputs_r>:
 800d460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d462:	4606      	mov	r6, r0
 800d464:	460f      	mov	r7, r1
 800d466:	4614      	mov	r4, r2
 800d468:	18d5      	adds	r5, r2, r3
 800d46a:	42ac      	cmp	r4, r5
 800d46c:	d101      	bne.n	800d472 <__sfputs_r+0x12>
 800d46e:	2000      	movs	r0, #0
 800d470:	e007      	b.n	800d482 <__sfputs_r+0x22>
 800d472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d476:	463a      	mov	r2, r7
 800d478:	4630      	mov	r0, r6
 800d47a:	f7ff ffda 	bl	800d432 <__sfputc_r>
 800d47e:	1c43      	adds	r3, r0, #1
 800d480:	d1f3      	bne.n	800d46a <__sfputs_r+0xa>
 800d482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d484 <_vfiprintf_r>:
 800d484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d488:	460d      	mov	r5, r1
 800d48a:	b09d      	sub	sp, #116	; 0x74
 800d48c:	4614      	mov	r4, r2
 800d48e:	4698      	mov	r8, r3
 800d490:	4606      	mov	r6, r0
 800d492:	b118      	cbz	r0, 800d49c <_vfiprintf_r+0x18>
 800d494:	6983      	ldr	r3, [r0, #24]
 800d496:	b90b      	cbnz	r3, 800d49c <_vfiprintf_r+0x18>
 800d498:	f000 fb0c 	bl	800dab4 <__sinit>
 800d49c:	4b89      	ldr	r3, [pc, #548]	; (800d6c4 <_vfiprintf_r+0x240>)
 800d49e:	429d      	cmp	r5, r3
 800d4a0:	d11b      	bne.n	800d4da <_vfiprintf_r+0x56>
 800d4a2:	6875      	ldr	r5, [r6, #4]
 800d4a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4a6:	07d9      	lsls	r1, r3, #31
 800d4a8:	d405      	bmi.n	800d4b6 <_vfiprintf_r+0x32>
 800d4aa:	89ab      	ldrh	r3, [r5, #12]
 800d4ac:	059a      	lsls	r2, r3, #22
 800d4ae:	d402      	bmi.n	800d4b6 <_vfiprintf_r+0x32>
 800d4b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4b2:	f7ff ffaa 	bl	800d40a <__retarget_lock_acquire_recursive>
 800d4b6:	89ab      	ldrh	r3, [r5, #12]
 800d4b8:	071b      	lsls	r3, r3, #28
 800d4ba:	d501      	bpl.n	800d4c0 <_vfiprintf_r+0x3c>
 800d4bc:	692b      	ldr	r3, [r5, #16]
 800d4be:	b9eb      	cbnz	r3, 800d4fc <_vfiprintf_r+0x78>
 800d4c0:	4629      	mov	r1, r5
 800d4c2:	4630      	mov	r0, r6
 800d4c4:	f000 f96e 	bl	800d7a4 <__swsetup_r>
 800d4c8:	b1c0      	cbz	r0, 800d4fc <_vfiprintf_r+0x78>
 800d4ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4cc:	07dc      	lsls	r4, r3, #31
 800d4ce:	d50e      	bpl.n	800d4ee <_vfiprintf_r+0x6a>
 800d4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d4:	b01d      	add	sp, #116	; 0x74
 800d4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4da:	4b7b      	ldr	r3, [pc, #492]	; (800d6c8 <_vfiprintf_r+0x244>)
 800d4dc:	429d      	cmp	r5, r3
 800d4de:	d101      	bne.n	800d4e4 <_vfiprintf_r+0x60>
 800d4e0:	68b5      	ldr	r5, [r6, #8]
 800d4e2:	e7df      	b.n	800d4a4 <_vfiprintf_r+0x20>
 800d4e4:	4b79      	ldr	r3, [pc, #484]	; (800d6cc <_vfiprintf_r+0x248>)
 800d4e6:	429d      	cmp	r5, r3
 800d4e8:	bf08      	it	eq
 800d4ea:	68f5      	ldreq	r5, [r6, #12]
 800d4ec:	e7da      	b.n	800d4a4 <_vfiprintf_r+0x20>
 800d4ee:	89ab      	ldrh	r3, [r5, #12]
 800d4f0:	0598      	lsls	r0, r3, #22
 800d4f2:	d4ed      	bmi.n	800d4d0 <_vfiprintf_r+0x4c>
 800d4f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4f6:	f7ff ff89 	bl	800d40c <__retarget_lock_release_recursive>
 800d4fa:	e7e9      	b.n	800d4d0 <_vfiprintf_r+0x4c>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d500:	2320      	movs	r3, #32
 800d502:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d506:	f8cd 800c 	str.w	r8, [sp, #12]
 800d50a:	2330      	movs	r3, #48	; 0x30
 800d50c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d6d0 <_vfiprintf_r+0x24c>
 800d510:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d514:	f04f 0901 	mov.w	r9, #1
 800d518:	4623      	mov	r3, r4
 800d51a:	469a      	mov	sl, r3
 800d51c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d520:	b10a      	cbz	r2, 800d526 <_vfiprintf_r+0xa2>
 800d522:	2a25      	cmp	r2, #37	; 0x25
 800d524:	d1f9      	bne.n	800d51a <_vfiprintf_r+0x96>
 800d526:	ebba 0b04 	subs.w	fp, sl, r4
 800d52a:	d00b      	beq.n	800d544 <_vfiprintf_r+0xc0>
 800d52c:	465b      	mov	r3, fp
 800d52e:	4622      	mov	r2, r4
 800d530:	4629      	mov	r1, r5
 800d532:	4630      	mov	r0, r6
 800d534:	f7ff ff94 	bl	800d460 <__sfputs_r>
 800d538:	3001      	adds	r0, #1
 800d53a:	f000 80aa 	beq.w	800d692 <_vfiprintf_r+0x20e>
 800d53e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d540:	445a      	add	r2, fp
 800d542:	9209      	str	r2, [sp, #36]	; 0x24
 800d544:	f89a 3000 	ldrb.w	r3, [sl]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f000 80a2 	beq.w	800d692 <_vfiprintf_r+0x20e>
 800d54e:	2300      	movs	r3, #0
 800d550:	f04f 32ff 	mov.w	r2, #4294967295
 800d554:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d558:	f10a 0a01 	add.w	sl, sl, #1
 800d55c:	9304      	str	r3, [sp, #16]
 800d55e:	9307      	str	r3, [sp, #28]
 800d560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d564:	931a      	str	r3, [sp, #104]	; 0x68
 800d566:	4654      	mov	r4, sl
 800d568:	2205      	movs	r2, #5
 800d56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d56e:	4858      	ldr	r0, [pc, #352]	; (800d6d0 <_vfiprintf_r+0x24c>)
 800d570:	f7f2 fe3e 	bl	80001f0 <memchr>
 800d574:	9a04      	ldr	r2, [sp, #16]
 800d576:	b9d8      	cbnz	r0, 800d5b0 <_vfiprintf_r+0x12c>
 800d578:	06d1      	lsls	r1, r2, #27
 800d57a:	bf44      	itt	mi
 800d57c:	2320      	movmi	r3, #32
 800d57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d582:	0713      	lsls	r3, r2, #28
 800d584:	bf44      	itt	mi
 800d586:	232b      	movmi	r3, #43	; 0x2b
 800d588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d58c:	f89a 3000 	ldrb.w	r3, [sl]
 800d590:	2b2a      	cmp	r3, #42	; 0x2a
 800d592:	d015      	beq.n	800d5c0 <_vfiprintf_r+0x13c>
 800d594:	9a07      	ldr	r2, [sp, #28]
 800d596:	4654      	mov	r4, sl
 800d598:	2000      	movs	r0, #0
 800d59a:	f04f 0c0a 	mov.w	ip, #10
 800d59e:	4621      	mov	r1, r4
 800d5a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5a4:	3b30      	subs	r3, #48	; 0x30
 800d5a6:	2b09      	cmp	r3, #9
 800d5a8:	d94e      	bls.n	800d648 <_vfiprintf_r+0x1c4>
 800d5aa:	b1b0      	cbz	r0, 800d5da <_vfiprintf_r+0x156>
 800d5ac:	9207      	str	r2, [sp, #28]
 800d5ae:	e014      	b.n	800d5da <_vfiprintf_r+0x156>
 800d5b0:	eba0 0308 	sub.w	r3, r0, r8
 800d5b4:	fa09 f303 	lsl.w	r3, r9, r3
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	9304      	str	r3, [sp, #16]
 800d5bc:	46a2      	mov	sl, r4
 800d5be:	e7d2      	b.n	800d566 <_vfiprintf_r+0xe2>
 800d5c0:	9b03      	ldr	r3, [sp, #12]
 800d5c2:	1d19      	adds	r1, r3, #4
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	9103      	str	r1, [sp, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	bfbb      	ittet	lt
 800d5cc:	425b      	neglt	r3, r3
 800d5ce:	f042 0202 	orrlt.w	r2, r2, #2
 800d5d2:	9307      	strge	r3, [sp, #28]
 800d5d4:	9307      	strlt	r3, [sp, #28]
 800d5d6:	bfb8      	it	lt
 800d5d8:	9204      	strlt	r2, [sp, #16]
 800d5da:	7823      	ldrb	r3, [r4, #0]
 800d5dc:	2b2e      	cmp	r3, #46	; 0x2e
 800d5de:	d10c      	bne.n	800d5fa <_vfiprintf_r+0x176>
 800d5e0:	7863      	ldrb	r3, [r4, #1]
 800d5e2:	2b2a      	cmp	r3, #42	; 0x2a
 800d5e4:	d135      	bne.n	800d652 <_vfiprintf_r+0x1ce>
 800d5e6:	9b03      	ldr	r3, [sp, #12]
 800d5e8:	1d1a      	adds	r2, r3, #4
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	9203      	str	r2, [sp, #12]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	bfb8      	it	lt
 800d5f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5f6:	3402      	adds	r4, #2
 800d5f8:	9305      	str	r3, [sp, #20]
 800d5fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d6e0 <_vfiprintf_r+0x25c>
 800d5fe:	7821      	ldrb	r1, [r4, #0]
 800d600:	2203      	movs	r2, #3
 800d602:	4650      	mov	r0, sl
 800d604:	f7f2 fdf4 	bl	80001f0 <memchr>
 800d608:	b140      	cbz	r0, 800d61c <_vfiprintf_r+0x198>
 800d60a:	2340      	movs	r3, #64	; 0x40
 800d60c:	eba0 000a 	sub.w	r0, r0, sl
 800d610:	fa03 f000 	lsl.w	r0, r3, r0
 800d614:	9b04      	ldr	r3, [sp, #16]
 800d616:	4303      	orrs	r3, r0
 800d618:	3401      	adds	r4, #1
 800d61a:	9304      	str	r3, [sp, #16]
 800d61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d620:	482c      	ldr	r0, [pc, #176]	; (800d6d4 <_vfiprintf_r+0x250>)
 800d622:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d626:	2206      	movs	r2, #6
 800d628:	f7f2 fde2 	bl	80001f0 <memchr>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d03f      	beq.n	800d6b0 <_vfiprintf_r+0x22c>
 800d630:	4b29      	ldr	r3, [pc, #164]	; (800d6d8 <_vfiprintf_r+0x254>)
 800d632:	bb1b      	cbnz	r3, 800d67c <_vfiprintf_r+0x1f8>
 800d634:	9b03      	ldr	r3, [sp, #12]
 800d636:	3307      	adds	r3, #7
 800d638:	f023 0307 	bic.w	r3, r3, #7
 800d63c:	3308      	adds	r3, #8
 800d63e:	9303      	str	r3, [sp, #12]
 800d640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d642:	443b      	add	r3, r7
 800d644:	9309      	str	r3, [sp, #36]	; 0x24
 800d646:	e767      	b.n	800d518 <_vfiprintf_r+0x94>
 800d648:	fb0c 3202 	mla	r2, ip, r2, r3
 800d64c:	460c      	mov	r4, r1
 800d64e:	2001      	movs	r0, #1
 800d650:	e7a5      	b.n	800d59e <_vfiprintf_r+0x11a>
 800d652:	2300      	movs	r3, #0
 800d654:	3401      	adds	r4, #1
 800d656:	9305      	str	r3, [sp, #20]
 800d658:	4619      	mov	r1, r3
 800d65a:	f04f 0c0a 	mov.w	ip, #10
 800d65e:	4620      	mov	r0, r4
 800d660:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d664:	3a30      	subs	r2, #48	; 0x30
 800d666:	2a09      	cmp	r2, #9
 800d668:	d903      	bls.n	800d672 <_vfiprintf_r+0x1ee>
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d0c5      	beq.n	800d5fa <_vfiprintf_r+0x176>
 800d66e:	9105      	str	r1, [sp, #20]
 800d670:	e7c3      	b.n	800d5fa <_vfiprintf_r+0x176>
 800d672:	fb0c 2101 	mla	r1, ip, r1, r2
 800d676:	4604      	mov	r4, r0
 800d678:	2301      	movs	r3, #1
 800d67a:	e7f0      	b.n	800d65e <_vfiprintf_r+0x1da>
 800d67c:	ab03      	add	r3, sp, #12
 800d67e:	9300      	str	r3, [sp, #0]
 800d680:	462a      	mov	r2, r5
 800d682:	4b16      	ldr	r3, [pc, #88]	; (800d6dc <_vfiprintf_r+0x258>)
 800d684:	a904      	add	r1, sp, #16
 800d686:	4630      	mov	r0, r6
 800d688:	f7fe f84c 	bl	800b724 <_printf_float>
 800d68c:	4607      	mov	r7, r0
 800d68e:	1c78      	adds	r0, r7, #1
 800d690:	d1d6      	bne.n	800d640 <_vfiprintf_r+0x1bc>
 800d692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d694:	07d9      	lsls	r1, r3, #31
 800d696:	d405      	bmi.n	800d6a4 <_vfiprintf_r+0x220>
 800d698:	89ab      	ldrh	r3, [r5, #12]
 800d69a:	059a      	lsls	r2, r3, #22
 800d69c:	d402      	bmi.n	800d6a4 <_vfiprintf_r+0x220>
 800d69e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6a0:	f7ff feb4 	bl	800d40c <__retarget_lock_release_recursive>
 800d6a4:	89ab      	ldrh	r3, [r5, #12]
 800d6a6:	065b      	lsls	r3, r3, #25
 800d6a8:	f53f af12 	bmi.w	800d4d0 <_vfiprintf_r+0x4c>
 800d6ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6ae:	e711      	b.n	800d4d4 <_vfiprintf_r+0x50>
 800d6b0:	ab03      	add	r3, sp, #12
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	462a      	mov	r2, r5
 800d6b6:	4b09      	ldr	r3, [pc, #36]	; (800d6dc <_vfiprintf_r+0x258>)
 800d6b8:	a904      	add	r1, sp, #16
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f7fe fad6 	bl	800bc6c <_printf_i>
 800d6c0:	e7e4      	b.n	800d68c <_vfiprintf_r+0x208>
 800d6c2:	bf00      	nop
 800d6c4:	0800e41c 	.word	0x0800e41c
 800d6c8:	0800e43c 	.word	0x0800e43c
 800d6cc:	0800e3fc 	.word	0x0800e3fc
 800d6d0:	0800e2ea 	.word	0x0800e2ea
 800d6d4:	0800e2f4 	.word	0x0800e2f4
 800d6d8:	0800b725 	.word	0x0800b725
 800d6dc:	0800d461 	.word	0x0800d461
 800d6e0:	0800e2f0 	.word	0x0800e2f0

0800d6e4 <__swbuf_r>:
 800d6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e6:	460e      	mov	r6, r1
 800d6e8:	4614      	mov	r4, r2
 800d6ea:	4605      	mov	r5, r0
 800d6ec:	b118      	cbz	r0, 800d6f6 <__swbuf_r+0x12>
 800d6ee:	6983      	ldr	r3, [r0, #24]
 800d6f0:	b90b      	cbnz	r3, 800d6f6 <__swbuf_r+0x12>
 800d6f2:	f000 f9df 	bl	800dab4 <__sinit>
 800d6f6:	4b21      	ldr	r3, [pc, #132]	; (800d77c <__swbuf_r+0x98>)
 800d6f8:	429c      	cmp	r4, r3
 800d6fa:	d12b      	bne.n	800d754 <__swbuf_r+0x70>
 800d6fc:	686c      	ldr	r4, [r5, #4]
 800d6fe:	69a3      	ldr	r3, [r4, #24]
 800d700:	60a3      	str	r3, [r4, #8]
 800d702:	89a3      	ldrh	r3, [r4, #12]
 800d704:	071a      	lsls	r2, r3, #28
 800d706:	d52f      	bpl.n	800d768 <__swbuf_r+0x84>
 800d708:	6923      	ldr	r3, [r4, #16]
 800d70a:	b36b      	cbz	r3, 800d768 <__swbuf_r+0x84>
 800d70c:	6923      	ldr	r3, [r4, #16]
 800d70e:	6820      	ldr	r0, [r4, #0]
 800d710:	1ac0      	subs	r0, r0, r3
 800d712:	6963      	ldr	r3, [r4, #20]
 800d714:	b2f6      	uxtb	r6, r6
 800d716:	4283      	cmp	r3, r0
 800d718:	4637      	mov	r7, r6
 800d71a:	dc04      	bgt.n	800d726 <__swbuf_r+0x42>
 800d71c:	4621      	mov	r1, r4
 800d71e:	4628      	mov	r0, r5
 800d720:	f000 f934 	bl	800d98c <_fflush_r>
 800d724:	bb30      	cbnz	r0, 800d774 <__swbuf_r+0x90>
 800d726:	68a3      	ldr	r3, [r4, #8]
 800d728:	3b01      	subs	r3, #1
 800d72a:	60a3      	str	r3, [r4, #8]
 800d72c:	6823      	ldr	r3, [r4, #0]
 800d72e:	1c5a      	adds	r2, r3, #1
 800d730:	6022      	str	r2, [r4, #0]
 800d732:	701e      	strb	r6, [r3, #0]
 800d734:	6963      	ldr	r3, [r4, #20]
 800d736:	3001      	adds	r0, #1
 800d738:	4283      	cmp	r3, r0
 800d73a:	d004      	beq.n	800d746 <__swbuf_r+0x62>
 800d73c:	89a3      	ldrh	r3, [r4, #12]
 800d73e:	07db      	lsls	r3, r3, #31
 800d740:	d506      	bpl.n	800d750 <__swbuf_r+0x6c>
 800d742:	2e0a      	cmp	r6, #10
 800d744:	d104      	bne.n	800d750 <__swbuf_r+0x6c>
 800d746:	4621      	mov	r1, r4
 800d748:	4628      	mov	r0, r5
 800d74a:	f000 f91f 	bl	800d98c <_fflush_r>
 800d74e:	b988      	cbnz	r0, 800d774 <__swbuf_r+0x90>
 800d750:	4638      	mov	r0, r7
 800d752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d754:	4b0a      	ldr	r3, [pc, #40]	; (800d780 <__swbuf_r+0x9c>)
 800d756:	429c      	cmp	r4, r3
 800d758:	d101      	bne.n	800d75e <__swbuf_r+0x7a>
 800d75a:	68ac      	ldr	r4, [r5, #8]
 800d75c:	e7cf      	b.n	800d6fe <__swbuf_r+0x1a>
 800d75e:	4b09      	ldr	r3, [pc, #36]	; (800d784 <__swbuf_r+0xa0>)
 800d760:	429c      	cmp	r4, r3
 800d762:	bf08      	it	eq
 800d764:	68ec      	ldreq	r4, [r5, #12]
 800d766:	e7ca      	b.n	800d6fe <__swbuf_r+0x1a>
 800d768:	4621      	mov	r1, r4
 800d76a:	4628      	mov	r0, r5
 800d76c:	f000 f81a 	bl	800d7a4 <__swsetup_r>
 800d770:	2800      	cmp	r0, #0
 800d772:	d0cb      	beq.n	800d70c <__swbuf_r+0x28>
 800d774:	f04f 37ff 	mov.w	r7, #4294967295
 800d778:	e7ea      	b.n	800d750 <__swbuf_r+0x6c>
 800d77a:	bf00      	nop
 800d77c:	0800e41c 	.word	0x0800e41c
 800d780:	0800e43c 	.word	0x0800e43c
 800d784:	0800e3fc 	.word	0x0800e3fc

0800d788 <__ascii_wctomb>:
 800d788:	b149      	cbz	r1, 800d79e <__ascii_wctomb+0x16>
 800d78a:	2aff      	cmp	r2, #255	; 0xff
 800d78c:	bf85      	ittet	hi
 800d78e:	238a      	movhi	r3, #138	; 0x8a
 800d790:	6003      	strhi	r3, [r0, #0]
 800d792:	700a      	strbls	r2, [r1, #0]
 800d794:	f04f 30ff 	movhi.w	r0, #4294967295
 800d798:	bf98      	it	ls
 800d79a:	2001      	movls	r0, #1
 800d79c:	4770      	bx	lr
 800d79e:	4608      	mov	r0, r1
 800d7a0:	4770      	bx	lr
	...

0800d7a4 <__swsetup_r>:
 800d7a4:	4b32      	ldr	r3, [pc, #200]	; (800d870 <__swsetup_r+0xcc>)
 800d7a6:	b570      	push	{r4, r5, r6, lr}
 800d7a8:	681d      	ldr	r5, [r3, #0]
 800d7aa:	4606      	mov	r6, r0
 800d7ac:	460c      	mov	r4, r1
 800d7ae:	b125      	cbz	r5, 800d7ba <__swsetup_r+0x16>
 800d7b0:	69ab      	ldr	r3, [r5, #24]
 800d7b2:	b913      	cbnz	r3, 800d7ba <__swsetup_r+0x16>
 800d7b4:	4628      	mov	r0, r5
 800d7b6:	f000 f97d 	bl	800dab4 <__sinit>
 800d7ba:	4b2e      	ldr	r3, [pc, #184]	; (800d874 <__swsetup_r+0xd0>)
 800d7bc:	429c      	cmp	r4, r3
 800d7be:	d10f      	bne.n	800d7e0 <__swsetup_r+0x3c>
 800d7c0:	686c      	ldr	r4, [r5, #4]
 800d7c2:	89a3      	ldrh	r3, [r4, #12]
 800d7c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7c8:	0719      	lsls	r1, r3, #28
 800d7ca:	d42c      	bmi.n	800d826 <__swsetup_r+0x82>
 800d7cc:	06dd      	lsls	r5, r3, #27
 800d7ce:	d411      	bmi.n	800d7f4 <__swsetup_r+0x50>
 800d7d0:	2309      	movs	r3, #9
 800d7d2:	6033      	str	r3, [r6, #0]
 800d7d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d7d8:	81a3      	strh	r3, [r4, #12]
 800d7da:	f04f 30ff 	mov.w	r0, #4294967295
 800d7de:	e03e      	b.n	800d85e <__swsetup_r+0xba>
 800d7e0:	4b25      	ldr	r3, [pc, #148]	; (800d878 <__swsetup_r+0xd4>)
 800d7e2:	429c      	cmp	r4, r3
 800d7e4:	d101      	bne.n	800d7ea <__swsetup_r+0x46>
 800d7e6:	68ac      	ldr	r4, [r5, #8]
 800d7e8:	e7eb      	b.n	800d7c2 <__swsetup_r+0x1e>
 800d7ea:	4b24      	ldr	r3, [pc, #144]	; (800d87c <__swsetup_r+0xd8>)
 800d7ec:	429c      	cmp	r4, r3
 800d7ee:	bf08      	it	eq
 800d7f0:	68ec      	ldreq	r4, [r5, #12]
 800d7f2:	e7e6      	b.n	800d7c2 <__swsetup_r+0x1e>
 800d7f4:	0758      	lsls	r0, r3, #29
 800d7f6:	d512      	bpl.n	800d81e <__swsetup_r+0x7a>
 800d7f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7fa:	b141      	cbz	r1, 800d80e <__swsetup_r+0x6a>
 800d7fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d800:	4299      	cmp	r1, r3
 800d802:	d002      	beq.n	800d80a <__swsetup_r+0x66>
 800d804:	4630      	mov	r0, r6
 800d806:	f7fd fe0d 	bl	800b424 <_free_r>
 800d80a:	2300      	movs	r3, #0
 800d80c:	6363      	str	r3, [r4, #52]	; 0x34
 800d80e:	89a3      	ldrh	r3, [r4, #12]
 800d810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d814:	81a3      	strh	r3, [r4, #12]
 800d816:	2300      	movs	r3, #0
 800d818:	6063      	str	r3, [r4, #4]
 800d81a:	6923      	ldr	r3, [r4, #16]
 800d81c:	6023      	str	r3, [r4, #0]
 800d81e:	89a3      	ldrh	r3, [r4, #12]
 800d820:	f043 0308 	orr.w	r3, r3, #8
 800d824:	81a3      	strh	r3, [r4, #12]
 800d826:	6923      	ldr	r3, [r4, #16]
 800d828:	b94b      	cbnz	r3, 800d83e <__swsetup_r+0x9a>
 800d82a:	89a3      	ldrh	r3, [r4, #12]
 800d82c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d834:	d003      	beq.n	800d83e <__swsetup_r+0x9a>
 800d836:	4621      	mov	r1, r4
 800d838:	4630      	mov	r0, r6
 800d83a:	f000 f9fd 	bl	800dc38 <__smakebuf_r>
 800d83e:	89a0      	ldrh	r0, [r4, #12]
 800d840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d844:	f010 0301 	ands.w	r3, r0, #1
 800d848:	d00a      	beq.n	800d860 <__swsetup_r+0xbc>
 800d84a:	2300      	movs	r3, #0
 800d84c:	60a3      	str	r3, [r4, #8]
 800d84e:	6963      	ldr	r3, [r4, #20]
 800d850:	425b      	negs	r3, r3
 800d852:	61a3      	str	r3, [r4, #24]
 800d854:	6923      	ldr	r3, [r4, #16]
 800d856:	b943      	cbnz	r3, 800d86a <__swsetup_r+0xc6>
 800d858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d85c:	d1ba      	bne.n	800d7d4 <__swsetup_r+0x30>
 800d85e:	bd70      	pop	{r4, r5, r6, pc}
 800d860:	0781      	lsls	r1, r0, #30
 800d862:	bf58      	it	pl
 800d864:	6963      	ldrpl	r3, [r4, #20]
 800d866:	60a3      	str	r3, [r4, #8]
 800d868:	e7f4      	b.n	800d854 <__swsetup_r+0xb0>
 800d86a:	2000      	movs	r0, #0
 800d86c:	e7f7      	b.n	800d85e <__swsetup_r+0xba>
 800d86e:	bf00      	nop
 800d870:	20000010 	.word	0x20000010
 800d874:	0800e41c 	.word	0x0800e41c
 800d878:	0800e43c 	.word	0x0800e43c
 800d87c:	0800e3fc 	.word	0x0800e3fc

0800d880 <__sflush_r>:
 800d880:	898a      	ldrh	r2, [r1, #12]
 800d882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d886:	4605      	mov	r5, r0
 800d888:	0710      	lsls	r0, r2, #28
 800d88a:	460c      	mov	r4, r1
 800d88c:	d458      	bmi.n	800d940 <__sflush_r+0xc0>
 800d88e:	684b      	ldr	r3, [r1, #4]
 800d890:	2b00      	cmp	r3, #0
 800d892:	dc05      	bgt.n	800d8a0 <__sflush_r+0x20>
 800d894:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d896:	2b00      	cmp	r3, #0
 800d898:	dc02      	bgt.n	800d8a0 <__sflush_r+0x20>
 800d89a:	2000      	movs	r0, #0
 800d89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8a2:	2e00      	cmp	r6, #0
 800d8a4:	d0f9      	beq.n	800d89a <__sflush_r+0x1a>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d8ac:	682f      	ldr	r7, [r5, #0]
 800d8ae:	602b      	str	r3, [r5, #0]
 800d8b0:	d032      	beq.n	800d918 <__sflush_r+0x98>
 800d8b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d8b4:	89a3      	ldrh	r3, [r4, #12]
 800d8b6:	075a      	lsls	r2, r3, #29
 800d8b8:	d505      	bpl.n	800d8c6 <__sflush_r+0x46>
 800d8ba:	6863      	ldr	r3, [r4, #4]
 800d8bc:	1ac0      	subs	r0, r0, r3
 800d8be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d8c0:	b10b      	cbz	r3, 800d8c6 <__sflush_r+0x46>
 800d8c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d8c4:	1ac0      	subs	r0, r0, r3
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8cc:	6a21      	ldr	r1, [r4, #32]
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	47b0      	blx	r6
 800d8d2:	1c43      	adds	r3, r0, #1
 800d8d4:	89a3      	ldrh	r3, [r4, #12]
 800d8d6:	d106      	bne.n	800d8e6 <__sflush_r+0x66>
 800d8d8:	6829      	ldr	r1, [r5, #0]
 800d8da:	291d      	cmp	r1, #29
 800d8dc:	d82c      	bhi.n	800d938 <__sflush_r+0xb8>
 800d8de:	4a2a      	ldr	r2, [pc, #168]	; (800d988 <__sflush_r+0x108>)
 800d8e0:	40ca      	lsrs	r2, r1
 800d8e2:	07d6      	lsls	r6, r2, #31
 800d8e4:	d528      	bpl.n	800d938 <__sflush_r+0xb8>
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	6062      	str	r2, [r4, #4]
 800d8ea:	04d9      	lsls	r1, r3, #19
 800d8ec:	6922      	ldr	r2, [r4, #16]
 800d8ee:	6022      	str	r2, [r4, #0]
 800d8f0:	d504      	bpl.n	800d8fc <__sflush_r+0x7c>
 800d8f2:	1c42      	adds	r2, r0, #1
 800d8f4:	d101      	bne.n	800d8fa <__sflush_r+0x7a>
 800d8f6:	682b      	ldr	r3, [r5, #0]
 800d8f8:	b903      	cbnz	r3, 800d8fc <__sflush_r+0x7c>
 800d8fa:	6560      	str	r0, [r4, #84]	; 0x54
 800d8fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8fe:	602f      	str	r7, [r5, #0]
 800d900:	2900      	cmp	r1, #0
 800d902:	d0ca      	beq.n	800d89a <__sflush_r+0x1a>
 800d904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d908:	4299      	cmp	r1, r3
 800d90a:	d002      	beq.n	800d912 <__sflush_r+0x92>
 800d90c:	4628      	mov	r0, r5
 800d90e:	f7fd fd89 	bl	800b424 <_free_r>
 800d912:	2000      	movs	r0, #0
 800d914:	6360      	str	r0, [r4, #52]	; 0x34
 800d916:	e7c1      	b.n	800d89c <__sflush_r+0x1c>
 800d918:	6a21      	ldr	r1, [r4, #32]
 800d91a:	2301      	movs	r3, #1
 800d91c:	4628      	mov	r0, r5
 800d91e:	47b0      	blx	r6
 800d920:	1c41      	adds	r1, r0, #1
 800d922:	d1c7      	bne.n	800d8b4 <__sflush_r+0x34>
 800d924:	682b      	ldr	r3, [r5, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d0c4      	beq.n	800d8b4 <__sflush_r+0x34>
 800d92a:	2b1d      	cmp	r3, #29
 800d92c:	d001      	beq.n	800d932 <__sflush_r+0xb2>
 800d92e:	2b16      	cmp	r3, #22
 800d930:	d101      	bne.n	800d936 <__sflush_r+0xb6>
 800d932:	602f      	str	r7, [r5, #0]
 800d934:	e7b1      	b.n	800d89a <__sflush_r+0x1a>
 800d936:	89a3      	ldrh	r3, [r4, #12]
 800d938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d93c:	81a3      	strh	r3, [r4, #12]
 800d93e:	e7ad      	b.n	800d89c <__sflush_r+0x1c>
 800d940:	690f      	ldr	r7, [r1, #16]
 800d942:	2f00      	cmp	r7, #0
 800d944:	d0a9      	beq.n	800d89a <__sflush_r+0x1a>
 800d946:	0793      	lsls	r3, r2, #30
 800d948:	680e      	ldr	r6, [r1, #0]
 800d94a:	bf08      	it	eq
 800d94c:	694b      	ldreq	r3, [r1, #20]
 800d94e:	600f      	str	r7, [r1, #0]
 800d950:	bf18      	it	ne
 800d952:	2300      	movne	r3, #0
 800d954:	eba6 0807 	sub.w	r8, r6, r7
 800d958:	608b      	str	r3, [r1, #8]
 800d95a:	f1b8 0f00 	cmp.w	r8, #0
 800d95e:	dd9c      	ble.n	800d89a <__sflush_r+0x1a>
 800d960:	6a21      	ldr	r1, [r4, #32]
 800d962:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d964:	4643      	mov	r3, r8
 800d966:	463a      	mov	r2, r7
 800d968:	4628      	mov	r0, r5
 800d96a:	47b0      	blx	r6
 800d96c:	2800      	cmp	r0, #0
 800d96e:	dc06      	bgt.n	800d97e <__sflush_r+0xfe>
 800d970:	89a3      	ldrh	r3, [r4, #12]
 800d972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d976:	81a3      	strh	r3, [r4, #12]
 800d978:	f04f 30ff 	mov.w	r0, #4294967295
 800d97c:	e78e      	b.n	800d89c <__sflush_r+0x1c>
 800d97e:	4407      	add	r7, r0
 800d980:	eba8 0800 	sub.w	r8, r8, r0
 800d984:	e7e9      	b.n	800d95a <__sflush_r+0xda>
 800d986:	bf00      	nop
 800d988:	20400001 	.word	0x20400001

0800d98c <_fflush_r>:
 800d98c:	b538      	push	{r3, r4, r5, lr}
 800d98e:	690b      	ldr	r3, [r1, #16]
 800d990:	4605      	mov	r5, r0
 800d992:	460c      	mov	r4, r1
 800d994:	b913      	cbnz	r3, 800d99c <_fflush_r+0x10>
 800d996:	2500      	movs	r5, #0
 800d998:	4628      	mov	r0, r5
 800d99a:	bd38      	pop	{r3, r4, r5, pc}
 800d99c:	b118      	cbz	r0, 800d9a6 <_fflush_r+0x1a>
 800d99e:	6983      	ldr	r3, [r0, #24]
 800d9a0:	b90b      	cbnz	r3, 800d9a6 <_fflush_r+0x1a>
 800d9a2:	f000 f887 	bl	800dab4 <__sinit>
 800d9a6:	4b14      	ldr	r3, [pc, #80]	; (800d9f8 <_fflush_r+0x6c>)
 800d9a8:	429c      	cmp	r4, r3
 800d9aa:	d11b      	bne.n	800d9e4 <_fflush_r+0x58>
 800d9ac:	686c      	ldr	r4, [r5, #4]
 800d9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d0ef      	beq.n	800d996 <_fflush_r+0xa>
 800d9b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d9b8:	07d0      	lsls	r0, r2, #31
 800d9ba:	d404      	bmi.n	800d9c6 <_fflush_r+0x3a>
 800d9bc:	0599      	lsls	r1, r3, #22
 800d9be:	d402      	bmi.n	800d9c6 <_fflush_r+0x3a>
 800d9c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9c2:	f7ff fd22 	bl	800d40a <__retarget_lock_acquire_recursive>
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	4621      	mov	r1, r4
 800d9ca:	f7ff ff59 	bl	800d880 <__sflush_r>
 800d9ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9d0:	07da      	lsls	r2, r3, #31
 800d9d2:	4605      	mov	r5, r0
 800d9d4:	d4e0      	bmi.n	800d998 <_fflush_r+0xc>
 800d9d6:	89a3      	ldrh	r3, [r4, #12]
 800d9d8:	059b      	lsls	r3, r3, #22
 800d9da:	d4dd      	bmi.n	800d998 <_fflush_r+0xc>
 800d9dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9de:	f7ff fd15 	bl	800d40c <__retarget_lock_release_recursive>
 800d9e2:	e7d9      	b.n	800d998 <_fflush_r+0xc>
 800d9e4:	4b05      	ldr	r3, [pc, #20]	; (800d9fc <_fflush_r+0x70>)
 800d9e6:	429c      	cmp	r4, r3
 800d9e8:	d101      	bne.n	800d9ee <_fflush_r+0x62>
 800d9ea:	68ac      	ldr	r4, [r5, #8]
 800d9ec:	e7df      	b.n	800d9ae <_fflush_r+0x22>
 800d9ee:	4b04      	ldr	r3, [pc, #16]	; (800da00 <_fflush_r+0x74>)
 800d9f0:	429c      	cmp	r4, r3
 800d9f2:	bf08      	it	eq
 800d9f4:	68ec      	ldreq	r4, [r5, #12]
 800d9f6:	e7da      	b.n	800d9ae <_fflush_r+0x22>
 800d9f8:	0800e41c 	.word	0x0800e41c
 800d9fc:	0800e43c 	.word	0x0800e43c
 800da00:	0800e3fc 	.word	0x0800e3fc

0800da04 <std>:
 800da04:	2300      	movs	r3, #0
 800da06:	b510      	push	{r4, lr}
 800da08:	4604      	mov	r4, r0
 800da0a:	e9c0 3300 	strd	r3, r3, [r0]
 800da0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da12:	6083      	str	r3, [r0, #8]
 800da14:	8181      	strh	r1, [r0, #12]
 800da16:	6643      	str	r3, [r0, #100]	; 0x64
 800da18:	81c2      	strh	r2, [r0, #14]
 800da1a:	6183      	str	r3, [r0, #24]
 800da1c:	4619      	mov	r1, r3
 800da1e:	2208      	movs	r2, #8
 800da20:	305c      	adds	r0, #92	; 0x5c
 800da22:	f7fd fcf7 	bl	800b414 <memset>
 800da26:	4b05      	ldr	r3, [pc, #20]	; (800da3c <std+0x38>)
 800da28:	6263      	str	r3, [r4, #36]	; 0x24
 800da2a:	4b05      	ldr	r3, [pc, #20]	; (800da40 <std+0x3c>)
 800da2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800da2e:	4b05      	ldr	r3, [pc, #20]	; (800da44 <std+0x40>)
 800da30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da32:	4b05      	ldr	r3, [pc, #20]	; (800da48 <std+0x44>)
 800da34:	6224      	str	r4, [r4, #32]
 800da36:	6323      	str	r3, [r4, #48]	; 0x30
 800da38:	bd10      	pop	{r4, pc}
 800da3a:	bf00      	nop
 800da3c:	0800dcb9 	.word	0x0800dcb9
 800da40:	0800dcdb 	.word	0x0800dcdb
 800da44:	0800dd13 	.word	0x0800dd13
 800da48:	0800dd37 	.word	0x0800dd37

0800da4c <_cleanup_r>:
 800da4c:	4901      	ldr	r1, [pc, #4]	; (800da54 <_cleanup_r+0x8>)
 800da4e:	f000 b8af 	b.w	800dbb0 <_fwalk_reent>
 800da52:	bf00      	nop
 800da54:	0800d98d 	.word	0x0800d98d

0800da58 <__sfmoreglue>:
 800da58:	b570      	push	{r4, r5, r6, lr}
 800da5a:	2268      	movs	r2, #104	; 0x68
 800da5c:	1e4d      	subs	r5, r1, #1
 800da5e:	4355      	muls	r5, r2
 800da60:	460e      	mov	r6, r1
 800da62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800da66:	f7fd fd49 	bl	800b4fc <_malloc_r>
 800da6a:	4604      	mov	r4, r0
 800da6c:	b140      	cbz	r0, 800da80 <__sfmoreglue+0x28>
 800da6e:	2100      	movs	r1, #0
 800da70:	e9c0 1600 	strd	r1, r6, [r0]
 800da74:	300c      	adds	r0, #12
 800da76:	60a0      	str	r0, [r4, #8]
 800da78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800da7c:	f7fd fcca 	bl	800b414 <memset>
 800da80:	4620      	mov	r0, r4
 800da82:	bd70      	pop	{r4, r5, r6, pc}

0800da84 <__sfp_lock_acquire>:
 800da84:	4801      	ldr	r0, [pc, #4]	; (800da8c <__sfp_lock_acquire+0x8>)
 800da86:	f7ff bcc0 	b.w	800d40a <__retarget_lock_acquire_recursive>
 800da8a:	bf00      	nop
 800da8c:	20000ad1 	.word	0x20000ad1

0800da90 <__sfp_lock_release>:
 800da90:	4801      	ldr	r0, [pc, #4]	; (800da98 <__sfp_lock_release+0x8>)
 800da92:	f7ff bcbb 	b.w	800d40c <__retarget_lock_release_recursive>
 800da96:	bf00      	nop
 800da98:	20000ad1 	.word	0x20000ad1

0800da9c <__sinit_lock_acquire>:
 800da9c:	4801      	ldr	r0, [pc, #4]	; (800daa4 <__sinit_lock_acquire+0x8>)
 800da9e:	f7ff bcb4 	b.w	800d40a <__retarget_lock_acquire_recursive>
 800daa2:	bf00      	nop
 800daa4:	20000ad2 	.word	0x20000ad2

0800daa8 <__sinit_lock_release>:
 800daa8:	4801      	ldr	r0, [pc, #4]	; (800dab0 <__sinit_lock_release+0x8>)
 800daaa:	f7ff bcaf 	b.w	800d40c <__retarget_lock_release_recursive>
 800daae:	bf00      	nop
 800dab0:	20000ad2 	.word	0x20000ad2

0800dab4 <__sinit>:
 800dab4:	b510      	push	{r4, lr}
 800dab6:	4604      	mov	r4, r0
 800dab8:	f7ff fff0 	bl	800da9c <__sinit_lock_acquire>
 800dabc:	69a3      	ldr	r3, [r4, #24]
 800dabe:	b11b      	cbz	r3, 800dac8 <__sinit+0x14>
 800dac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dac4:	f7ff bff0 	b.w	800daa8 <__sinit_lock_release>
 800dac8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dacc:	6523      	str	r3, [r4, #80]	; 0x50
 800dace:	4b13      	ldr	r3, [pc, #76]	; (800db1c <__sinit+0x68>)
 800dad0:	4a13      	ldr	r2, [pc, #76]	; (800db20 <__sinit+0x6c>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	62a2      	str	r2, [r4, #40]	; 0x28
 800dad6:	42a3      	cmp	r3, r4
 800dad8:	bf04      	itt	eq
 800dada:	2301      	moveq	r3, #1
 800dadc:	61a3      	streq	r3, [r4, #24]
 800dade:	4620      	mov	r0, r4
 800dae0:	f000 f820 	bl	800db24 <__sfp>
 800dae4:	6060      	str	r0, [r4, #4]
 800dae6:	4620      	mov	r0, r4
 800dae8:	f000 f81c 	bl	800db24 <__sfp>
 800daec:	60a0      	str	r0, [r4, #8]
 800daee:	4620      	mov	r0, r4
 800daf0:	f000 f818 	bl	800db24 <__sfp>
 800daf4:	2200      	movs	r2, #0
 800daf6:	60e0      	str	r0, [r4, #12]
 800daf8:	2104      	movs	r1, #4
 800dafa:	6860      	ldr	r0, [r4, #4]
 800dafc:	f7ff ff82 	bl	800da04 <std>
 800db00:	68a0      	ldr	r0, [r4, #8]
 800db02:	2201      	movs	r2, #1
 800db04:	2109      	movs	r1, #9
 800db06:	f7ff ff7d 	bl	800da04 <std>
 800db0a:	68e0      	ldr	r0, [r4, #12]
 800db0c:	2202      	movs	r2, #2
 800db0e:	2112      	movs	r1, #18
 800db10:	f7ff ff78 	bl	800da04 <std>
 800db14:	2301      	movs	r3, #1
 800db16:	61a3      	str	r3, [r4, #24]
 800db18:	e7d2      	b.n	800dac0 <__sinit+0xc>
 800db1a:	bf00      	nop
 800db1c:	0800e080 	.word	0x0800e080
 800db20:	0800da4d 	.word	0x0800da4d

0800db24 <__sfp>:
 800db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db26:	4607      	mov	r7, r0
 800db28:	f7ff ffac 	bl	800da84 <__sfp_lock_acquire>
 800db2c:	4b1e      	ldr	r3, [pc, #120]	; (800dba8 <__sfp+0x84>)
 800db2e:	681e      	ldr	r6, [r3, #0]
 800db30:	69b3      	ldr	r3, [r6, #24]
 800db32:	b913      	cbnz	r3, 800db3a <__sfp+0x16>
 800db34:	4630      	mov	r0, r6
 800db36:	f7ff ffbd 	bl	800dab4 <__sinit>
 800db3a:	3648      	adds	r6, #72	; 0x48
 800db3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800db40:	3b01      	subs	r3, #1
 800db42:	d503      	bpl.n	800db4c <__sfp+0x28>
 800db44:	6833      	ldr	r3, [r6, #0]
 800db46:	b30b      	cbz	r3, 800db8c <__sfp+0x68>
 800db48:	6836      	ldr	r6, [r6, #0]
 800db4a:	e7f7      	b.n	800db3c <__sfp+0x18>
 800db4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800db50:	b9d5      	cbnz	r5, 800db88 <__sfp+0x64>
 800db52:	4b16      	ldr	r3, [pc, #88]	; (800dbac <__sfp+0x88>)
 800db54:	60e3      	str	r3, [r4, #12]
 800db56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800db5a:	6665      	str	r5, [r4, #100]	; 0x64
 800db5c:	f7ff fc54 	bl	800d408 <__retarget_lock_init_recursive>
 800db60:	f7ff ff96 	bl	800da90 <__sfp_lock_release>
 800db64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800db68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800db6c:	6025      	str	r5, [r4, #0]
 800db6e:	61a5      	str	r5, [r4, #24]
 800db70:	2208      	movs	r2, #8
 800db72:	4629      	mov	r1, r5
 800db74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800db78:	f7fd fc4c 	bl	800b414 <memset>
 800db7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800db80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800db84:	4620      	mov	r0, r4
 800db86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db88:	3468      	adds	r4, #104	; 0x68
 800db8a:	e7d9      	b.n	800db40 <__sfp+0x1c>
 800db8c:	2104      	movs	r1, #4
 800db8e:	4638      	mov	r0, r7
 800db90:	f7ff ff62 	bl	800da58 <__sfmoreglue>
 800db94:	4604      	mov	r4, r0
 800db96:	6030      	str	r0, [r6, #0]
 800db98:	2800      	cmp	r0, #0
 800db9a:	d1d5      	bne.n	800db48 <__sfp+0x24>
 800db9c:	f7ff ff78 	bl	800da90 <__sfp_lock_release>
 800dba0:	230c      	movs	r3, #12
 800dba2:	603b      	str	r3, [r7, #0]
 800dba4:	e7ee      	b.n	800db84 <__sfp+0x60>
 800dba6:	bf00      	nop
 800dba8:	0800e080 	.word	0x0800e080
 800dbac:	ffff0001 	.word	0xffff0001

0800dbb0 <_fwalk_reent>:
 800dbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbb4:	4606      	mov	r6, r0
 800dbb6:	4688      	mov	r8, r1
 800dbb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dbbc:	2700      	movs	r7, #0
 800dbbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dbc2:	f1b9 0901 	subs.w	r9, r9, #1
 800dbc6:	d505      	bpl.n	800dbd4 <_fwalk_reent+0x24>
 800dbc8:	6824      	ldr	r4, [r4, #0]
 800dbca:	2c00      	cmp	r4, #0
 800dbcc:	d1f7      	bne.n	800dbbe <_fwalk_reent+0xe>
 800dbce:	4638      	mov	r0, r7
 800dbd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbd4:	89ab      	ldrh	r3, [r5, #12]
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d907      	bls.n	800dbea <_fwalk_reent+0x3a>
 800dbda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	d003      	beq.n	800dbea <_fwalk_reent+0x3a>
 800dbe2:	4629      	mov	r1, r5
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	47c0      	blx	r8
 800dbe8:	4307      	orrs	r7, r0
 800dbea:	3568      	adds	r5, #104	; 0x68
 800dbec:	e7e9      	b.n	800dbc2 <_fwalk_reent+0x12>

0800dbee <__swhatbuf_r>:
 800dbee:	b570      	push	{r4, r5, r6, lr}
 800dbf0:	460e      	mov	r6, r1
 800dbf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbf6:	2900      	cmp	r1, #0
 800dbf8:	b096      	sub	sp, #88	; 0x58
 800dbfa:	4614      	mov	r4, r2
 800dbfc:	461d      	mov	r5, r3
 800dbfe:	da08      	bge.n	800dc12 <__swhatbuf_r+0x24>
 800dc00:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dc04:	2200      	movs	r2, #0
 800dc06:	602a      	str	r2, [r5, #0]
 800dc08:	061a      	lsls	r2, r3, #24
 800dc0a:	d410      	bmi.n	800dc2e <__swhatbuf_r+0x40>
 800dc0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc10:	e00e      	b.n	800dc30 <__swhatbuf_r+0x42>
 800dc12:	466a      	mov	r2, sp
 800dc14:	f000 f8b6 	bl	800dd84 <_fstat_r>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	dbf1      	blt.n	800dc00 <__swhatbuf_r+0x12>
 800dc1c:	9a01      	ldr	r2, [sp, #4]
 800dc1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dc22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dc26:	425a      	negs	r2, r3
 800dc28:	415a      	adcs	r2, r3
 800dc2a:	602a      	str	r2, [r5, #0]
 800dc2c:	e7ee      	b.n	800dc0c <__swhatbuf_r+0x1e>
 800dc2e:	2340      	movs	r3, #64	; 0x40
 800dc30:	2000      	movs	r0, #0
 800dc32:	6023      	str	r3, [r4, #0]
 800dc34:	b016      	add	sp, #88	; 0x58
 800dc36:	bd70      	pop	{r4, r5, r6, pc}

0800dc38 <__smakebuf_r>:
 800dc38:	898b      	ldrh	r3, [r1, #12]
 800dc3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc3c:	079d      	lsls	r5, r3, #30
 800dc3e:	4606      	mov	r6, r0
 800dc40:	460c      	mov	r4, r1
 800dc42:	d507      	bpl.n	800dc54 <__smakebuf_r+0x1c>
 800dc44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc48:	6023      	str	r3, [r4, #0]
 800dc4a:	6123      	str	r3, [r4, #16]
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	6163      	str	r3, [r4, #20]
 800dc50:	b002      	add	sp, #8
 800dc52:	bd70      	pop	{r4, r5, r6, pc}
 800dc54:	ab01      	add	r3, sp, #4
 800dc56:	466a      	mov	r2, sp
 800dc58:	f7ff ffc9 	bl	800dbee <__swhatbuf_r>
 800dc5c:	9900      	ldr	r1, [sp, #0]
 800dc5e:	4605      	mov	r5, r0
 800dc60:	4630      	mov	r0, r6
 800dc62:	f7fd fc4b 	bl	800b4fc <_malloc_r>
 800dc66:	b948      	cbnz	r0, 800dc7c <__smakebuf_r+0x44>
 800dc68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc6c:	059a      	lsls	r2, r3, #22
 800dc6e:	d4ef      	bmi.n	800dc50 <__smakebuf_r+0x18>
 800dc70:	f023 0303 	bic.w	r3, r3, #3
 800dc74:	f043 0302 	orr.w	r3, r3, #2
 800dc78:	81a3      	strh	r3, [r4, #12]
 800dc7a:	e7e3      	b.n	800dc44 <__smakebuf_r+0xc>
 800dc7c:	4b0d      	ldr	r3, [pc, #52]	; (800dcb4 <__smakebuf_r+0x7c>)
 800dc7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	6020      	str	r0, [r4, #0]
 800dc84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc88:	81a3      	strh	r3, [r4, #12]
 800dc8a:	9b00      	ldr	r3, [sp, #0]
 800dc8c:	6163      	str	r3, [r4, #20]
 800dc8e:	9b01      	ldr	r3, [sp, #4]
 800dc90:	6120      	str	r0, [r4, #16]
 800dc92:	b15b      	cbz	r3, 800dcac <__smakebuf_r+0x74>
 800dc94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc98:	4630      	mov	r0, r6
 800dc9a:	f000 f885 	bl	800dda8 <_isatty_r>
 800dc9e:	b128      	cbz	r0, 800dcac <__smakebuf_r+0x74>
 800dca0:	89a3      	ldrh	r3, [r4, #12]
 800dca2:	f023 0303 	bic.w	r3, r3, #3
 800dca6:	f043 0301 	orr.w	r3, r3, #1
 800dcaa:	81a3      	strh	r3, [r4, #12]
 800dcac:	89a0      	ldrh	r0, [r4, #12]
 800dcae:	4305      	orrs	r5, r0
 800dcb0:	81a5      	strh	r5, [r4, #12]
 800dcb2:	e7cd      	b.n	800dc50 <__smakebuf_r+0x18>
 800dcb4:	0800da4d 	.word	0x0800da4d

0800dcb8 <__sread>:
 800dcb8:	b510      	push	{r4, lr}
 800dcba:	460c      	mov	r4, r1
 800dcbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcc0:	f000 f894 	bl	800ddec <_read_r>
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	bfab      	itete	ge
 800dcc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dcca:	89a3      	ldrhlt	r3, [r4, #12]
 800dccc:	181b      	addge	r3, r3, r0
 800dcce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dcd2:	bfac      	ite	ge
 800dcd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dcd6:	81a3      	strhlt	r3, [r4, #12]
 800dcd8:	bd10      	pop	{r4, pc}

0800dcda <__swrite>:
 800dcda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcde:	461f      	mov	r7, r3
 800dce0:	898b      	ldrh	r3, [r1, #12]
 800dce2:	05db      	lsls	r3, r3, #23
 800dce4:	4605      	mov	r5, r0
 800dce6:	460c      	mov	r4, r1
 800dce8:	4616      	mov	r6, r2
 800dcea:	d505      	bpl.n	800dcf8 <__swrite+0x1e>
 800dcec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcf0:	2302      	movs	r3, #2
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	f000 f868 	bl	800ddc8 <_lseek_r>
 800dcf8:	89a3      	ldrh	r3, [r4, #12]
 800dcfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd02:	81a3      	strh	r3, [r4, #12]
 800dd04:	4632      	mov	r2, r6
 800dd06:	463b      	mov	r3, r7
 800dd08:	4628      	mov	r0, r5
 800dd0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0e:	f000 b817 	b.w	800dd40 <_write_r>

0800dd12 <__sseek>:
 800dd12:	b510      	push	{r4, lr}
 800dd14:	460c      	mov	r4, r1
 800dd16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd1a:	f000 f855 	bl	800ddc8 <_lseek_r>
 800dd1e:	1c43      	adds	r3, r0, #1
 800dd20:	89a3      	ldrh	r3, [r4, #12]
 800dd22:	bf15      	itete	ne
 800dd24:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd2e:	81a3      	strheq	r3, [r4, #12]
 800dd30:	bf18      	it	ne
 800dd32:	81a3      	strhne	r3, [r4, #12]
 800dd34:	bd10      	pop	{r4, pc}

0800dd36 <__sclose>:
 800dd36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd3a:	f000 b813 	b.w	800dd64 <_close_r>
	...

0800dd40 <_write_r>:
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	4d07      	ldr	r5, [pc, #28]	; (800dd60 <_write_r+0x20>)
 800dd44:	4604      	mov	r4, r0
 800dd46:	4608      	mov	r0, r1
 800dd48:	4611      	mov	r1, r2
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	602a      	str	r2, [r5, #0]
 800dd4e:	461a      	mov	r2, r3
 800dd50:	f7f6 fd5b 	bl	800480a <_write>
 800dd54:	1c43      	adds	r3, r0, #1
 800dd56:	d102      	bne.n	800dd5e <_write_r+0x1e>
 800dd58:	682b      	ldr	r3, [r5, #0]
 800dd5a:	b103      	cbz	r3, 800dd5e <_write_r+0x1e>
 800dd5c:	6023      	str	r3, [r4, #0]
 800dd5e:	bd38      	pop	{r3, r4, r5, pc}
 800dd60:	20000acc 	.word	0x20000acc

0800dd64 <_close_r>:
 800dd64:	b538      	push	{r3, r4, r5, lr}
 800dd66:	4d06      	ldr	r5, [pc, #24]	; (800dd80 <_close_r+0x1c>)
 800dd68:	2300      	movs	r3, #0
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	4608      	mov	r0, r1
 800dd6e:	602b      	str	r3, [r5, #0]
 800dd70:	f7f6 fd67 	bl	8004842 <_close>
 800dd74:	1c43      	adds	r3, r0, #1
 800dd76:	d102      	bne.n	800dd7e <_close_r+0x1a>
 800dd78:	682b      	ldr	r3, [r5, #0]
 800dd7a:	b103      	cbz	r3, 800dd7e <_close_r+0x1a>
 800dd7c:	6023      	str	r3, [r4, #0]
 800dd7e:	bd38      	pop	{r3, r4, r5, pc}
 800dd80:	20000acc 	.word	0x20000acc

0800dd84 <_fstat_r>:
 800dd84:	b538      	push	{r3, r4, r5, lr}
 800dd86:	4d07      	ldr	r5, [pc, #28]	; (800dda4 <_fstat_r+0x20>)
 800dd88:	2300      	movs	r3, #0
 800dd8a:	4604      	mov	r4, r0
 800dd8c:	4608      	mov	r0, r1
 800dd8e:	4611      	mov	r1, r2
 800dd90:	602b      	str	r3, [r5, #0]
 800dd92:	f7f6 fd62 	bl	800485a <_fstat>
 800dd96:	1c43      	adds	r3, r0, #1
 800dd98:	d102      	bne.n	800dda0 <_fstat_r+0x1c>
 800dd9a:	682b      	ldr	r3, [r5, #0]
 800dd9c:	b103      	cbz	r3, 800dda0 <_fstat_r+0x1c>
 800dd9e:	6023      	str	r3, [r4, #0]
 800dda0:	bd38      	pop	{r3, r4, r5, pc}
 800dda2:	bf00      	nop
 800dda4:	20000acc 	.word	0x20000acc

0800dda8 <_isatty_r>:
 800dda8:	b538      	push	{r3, r4, r5, lr}
 800ddaa:	4d06      	ldr	r5, [pc, #24]	; (800ddc4 <_isatty_r+0x1c>)
 800ddac:	2300      	movs	r3, #0
 800ddae:	4604      	mov	r4, r0
 800ddb0:	4608      	mov	r0, r1
 800ddb2:	602b      	str	r3, [r5, #0]
 800ddb4:	f7f6 fd61 	bl	800487a <_isatty>
 800ddb8:	1c43      	adds	r3, r0, #1
 800ddba:	d102      	bne.n	800ddc2 <_isatty_r+0x1a>
 800ddbc:	682b      	ldr	r3, [r5, #0]
 800ddbe:	b103      	cbz	r3, 800ddc2 <_isatty_r+0x1a>
 800ddc0:	6023      	str	r3, [r4, #0]
 800ddc2:	bd38      	pop	{r3, r4, r5, pc}
 800ddc4:	20000acc 	.word	0x20000acc

0800ddc8 <_lseek_r>:
 800ddc8:	b538      	push	{r3, r4, r5, lr}
 800ddca:	4d07      	ldr	r5, [pc, #28]	; (800dde8 <_lseek_r+0x20>)
 800ddcc:	4604      	mov	r4, r0
 800ddce:	4608      	mov	r0, r1
 800ddd0:	4611      	mov	r1, r2
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	602a      	str	r2, [r5, #0]
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	f7f6 fd5a 	bl	8004890 <_lseek>
 800dddc:	1c43      	adds	r3, r0, #1
 800ddde:	d102      	bne.n	800dde6 <_lseek_r+0x1e>
 800dde0:	682b      	ldr	r3, [r5, #0]
 800dde2:	b103      	cbz	r3, 800dde6 <_lseek_r+0x1e>
 800dde4:	6023      	str	r3, [r4, #0]
 800dde6:	bd38      	pop	{r3, r4, r5, pc}
 800dde8:	20000acc 	.word	0x20000acc

0800ddec <_read_r>:
 800ddec:	b538      	push	{r3, r4, r5, lr}
 800ddee:	4d07      	ldr	r5, [pc, #28]	; (800de0c <_read_r+0x20>)
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	4608      	mov	r0, r1
 800ddf4:	4611      	mov	r1, r2
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	602a      	str	r2, [r5, #0]
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	f7f6 fce8 	bl	80047d0 <_read>
 800de00:	1c43      	adds	r3, r0, #1
 800de02:	d102      	bne.n	800de0a <_read_r+0x1e>
 800de04:	682b      	ldr	r3, [r5, #0]
 800de06:	b103      	cbz	r3, 800de0a <_read_r+0x1e>
 800de08:	6023      	str	r3, [r4, #0]
 800de0a:	bd38      	pop	{r3, r4, r5, pc}
 800de0c:	20000acc 	.word	0x20000acc

0800de10 <_init>:
 800de10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de12:	bf00      	nop
 800de14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de16:	bc08      	pop	{r3}
 800de18:	469e      	mov	lr, r3
 800de1a:	4770      	bx	lr

0800de1c <_fini>:
 800de1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de1e:	bf00      	nop
 800de20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de22:	bc08      	pop	{r3}
 800de24:	469e      	mov	lr, r3
 800de26:	4770      	bx	lr
