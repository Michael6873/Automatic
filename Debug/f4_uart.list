
f4_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f060  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800f200  0800f200  0001f200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f694  0800f694  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f694  0800f694  0001f694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f69c  0800f69c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f69c  0800f69c  0001f69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f6a4  0800f6a4  0001f6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800f6ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f14  200001dc  0800f888  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010f0  0800f888  000210f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4e4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002edc  00000000  00000000  0003d6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  000405d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e0  00000000  00000000  00041d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b293  00000000  00000000  00043438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e03  00000000  00000000  0005e6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2bf0  00000000  00000000  000744ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001170be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cec  00000000  00000000  00117110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f1e8 	.word	0x0800f1e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800f1e8 	.word	0x0800f1e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <_ZN7RPLidar3endEv>:
extern UART_HandleTypeDef huart2; // Дескриптор UART1
extern uint8_t uart_rx_buffer[RX_BUFFER_SIZE];
static bool uart1_is_open = false;

// Закрытие UART1
void RPLidar::end() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    if (isOpen()) {
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f811 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <_ZN7RPLidar3endEv+0x20>
        HAL_UART_DeInit(&huart2); // Деинициализация UART1
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <_ZN7RPLidar3endEv+0x28>)
 8000f72:	f009 fbfa 	bl	800a76a <HAL_UART_DeInit>
        uart1_is_open = false;    // Отмечаем UART как закрытый
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <_ZN7RPLidar3endEv+0x2c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
    }
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000374 	.word	0x20000374
 8000f88:	200001f8 	.word	0x200001f8

08000f8c <_ZN7RPLidar6isOpenEv>:

// Проверка состояния UART1 (открыт или закрыт)
bool RPLidar::isOpen() {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
    return uart1_is_open; // Возвращаем текущее состояние UART1
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <_ZN7RPLidar6isOpenEv+0x18>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	200001f8 	.word	0x200001f8

08000fa8 <_ZN7RPLidarC1Ev>:

RPLidar::RPLidar() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

	clearArray(distances);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	330c      	adds	r3, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f9a9 	bl	800130e <_ZN7RPLidar10clearArrayEPf>
	clearArray(minDist);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 f9a2 	bl	800130e <_ZN7RPLidar10clearArrayEPf>
    _currentMeasurement.distance = 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
    _currentMeasurement.angle = 0;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
    _currentMeasurement.quality = 0;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	721a      	strb	r2, [r3, #8]
    _currentMeasurement.startBit = 0;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	725a      	strb	r2, [r3, #9]
}
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_ZN7RPLidarD1Ev>:


RPLidar::~RPLidar()
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
{
    end();
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffaf 	bl	8000f5c <_ZN7RPLidar3endEv>
}
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <_ZN7RPLidar5beginEv>:


// Инициализация UART1 для работы с RPLIDAR
bool RPLidar::begin() {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    // Если UART уже открыт, завершаем его работу
    if (isOpen()) {
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ffbb 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
   // huart2.Init.Mode = UART_MODE_TX_RX;
   // huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   // huart2.Init.OverSampling = UART_OVERSAMPLING_16;

    // Инициализация UART1
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001016:	480a      	ldr	r0, [pc, #40]	; (8001040 <_ZN7RPLidar5beginEv+0x38>)
 8001018:	f009 fb5a 	bl	800a6d0 <HAL_UART_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf14      	ite	ne
 8001022:	2301      	movne	r3, #1
 8001024:	2300      	moveq	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <_ZN7RPLidar5beginEv+0x28>
        return false; // Если инициализация не удалась
 800102c:	2300      	movs	r3, #0
 800102e:	e003      	b.n	8001038 <_ZN7RPLidar5beginEv+0x30>
    }

    // Отмечаем UART как открытый
    uart1_is_open = true;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <_ZN7RPLidar5beginEv+0x3c>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
    return true;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000374 	.word	0x20000374
 8001044:	200001f8 	.word	0x200001f8

08001048 <_ZN7RPLidar12_sendCommandEhPKvj>:

uint32_t RPLidar::_sendCommand(uint8_t cmd, const void *payload, size_t payloadsize) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	460b      	mov	r3, r1
 8001056:	72fb      	strb	r3, [r7, #11]
    rplidar_cmd_packet_t pkt_header;
    uint8_t checksum = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	75fb      	strb	r3, [r7, #23]
    HAL_StatusTypeDef status;

    // Проверяем наличие полезной нагрузки
    if (payloadsize && payload) {
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <_ZN7RPLidar12_sendCommandEhPKvj+0x28>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <_ZN7RPLidar12_sendCommandEhPKvj+0x28>
        cmd |= RPLIDAR_CMDFLAG_HAS_PAYLOAD;
 8001068:	7afb      	ldrb	r3, [r7, #11]
 800106a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800106e:	72fb      	strb	r3, [r7, #11]
    }

    // Формируем заголовок команды
    pkt_header.syncByte = RPLIDAR_CMD_SYNC_BYTE;
 8001070:	23a5      	movs	r3, #165	; 0xa5
 8001072:	763b      	strb	r3, [r7, #24]
    pkt_header.cmd_flag = cmd;
 8001074:	7afb      	ldrb	r3, [r7, #11]
 8001076:	767b      	strb	r3, [r7, #25]

    // Отправляем заголовок (2 байта)
    status = HAL_UART_Transmit(&huart2, (uint8_t *)&pkt_header, sizeof(pkt_header), HAL_MAX_DELAY);
 8001078:	f107 0118 	add.w	r1, r7, #24
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	2203      	movs	r2, #3
 8001082:	4833      	ldr	r0, [pc, #204]	; (8001150 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 8001084:	f009 fba0 	bl	800a7c8 <HAL_UART_Transmit>
 8001088:	4603      	mov	r3, r0
 800108a:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) {
 800108c:	7efb      	ldrb	r3, [r7, #27]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <_ZN7RPLidar12_sendCommandEhPKvj+0x4e>
        return RESULT_OPERATION_FAIL; // Если произошла ошибка при передаче, возвращаем ошибку
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001094:	e057      	b.n	8001146 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
    }

    // Если есть полезная нагрузка
    if (cmd & RPLIDAR_CMDFLAG_HAS_PAYLOAD) {
 8001096:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800109a:	2b00      	cmp	r3, #0
 800109c:	da52      	bge.n	8001144 <_ZN7RPLidar12_sendCommandEhPKvj+0xfc>
        // Инициализируем контрольную сумму
        checksum ^= RPLIDAR_CMD_SYNC_BYTE;
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	f083 035a 	eor.w	r3, r3, #90	; 0x5a
 80010a4:	43db      	mvns	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	75fb      	strb	r3, [r7, #23]
        checksum ^= cmd;
 80010aa:	7dfa      	ldrb	r2, [r7, #23]
 80010ac:	7afb      	ldrb	r3, [r7, #11]
 80010ae:	4053      	eors	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	75fb      	strb	r3, [r7, #23]
        checksum ^= (payloadsize & 0xFF);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	4053      	eors	r3, r2
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	75fb      	strb	r3, [r7, #23]

        // Вычисляем контрольную сумму для полезной нагрузки
        for (size_t pos = 0; pos < payloadsize; ++pos) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d20b      	bcs.n	80010e4 <_ZN7RPLidar12_sendCommandEhPKvj+0x9c>
            checksum ^= ((uint8_t *)payload)[pos];
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	4413      	add	r3, r2
 80010d2:	781a      	ldrb	r2, [r3, #0]
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	4053      	eors	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	75fb      	strb	r3, [r7, #23]
        for (size_t pos = 0; pos < payloadsize; ++pos) {
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	3301      	adds	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	e7ef      	b.n	80010c4 <_ZN7RPLidar12_sendCommandEhPKvj+0x7c>
        }

        // Отправляем размер полезной нагрузки (1 байт)
        uint8_t sizebyte = (uint8_t)payloadsize;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	75bb      	strb	r3, [r7, #22]
        status = HAL_UART_Transmit(&huart2, &sizebyte, 1, HAL_MAX_DELAY);
 80010ea:	f107 0116 	add.w	r1, r7, #22
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	2201      	movs	r2, #1
 80010f4:	4816      	ldr	r0, [pc, #88]	; (8001150 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 80010f6:	f009 fb67 	bl	800a7c8 <HAL_UART_Transmit>
 80010fa:	4603      	mov	r3, r0
 80010fc:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 80010fe:	7efb      	ldrb	r3, [r7, #27]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <_ZN7RPLidar12_sendCommandEhPKvj+0xc0>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001106:	e01e      	b.n	8001146 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }

        // Отправляем полезную нагрузку
        status = HAL_UART_Transmit(&huart2, (uint8_t *)payload, payloadsize, HAL_MAX_DELAY);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b29a      	uxth	r2, r3
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	480f      	ldr	r0, [pc, #60]	; (8001150 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 8001114:	f009 fb58 	bl	800a7c8 <HAL_UART_Transmit>
 8001118:	4603      	mov	r3, r0
 800111a:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 800111c:	7efb      	ldrb	r3, [r7, #27]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <_ZN7RPLidar12_sendCommandEhPKvj+0xde>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001124:	e00f      	b.n	8001146 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }

        // Отправляем контрольную сумму (1 байт)
        status = HAL_UART_Transmit(&huart2, &checksum, 1, HAL_MAX_DELAY);
 8001126:	f107 0117 	add.w	r1, r7, #23
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	2201      	movs	r2, #1
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 8001132:	f009 fb49 	bl	800a7c8 <HAL_UART_Transmit>
 8001136:	4603      	mov	r3, r0
 8001138:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 800113a:	7efb      	ldrb	r3, [r7, #27]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <_ZN7RPLidar12_sendCommandEhPKvj+0xfc>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001142:	e000      	b.n	8001146 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }
    }

    return RESULT_OK; // Если все данные успешно отправлены
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000374 	.word	0x20000374
 8001154:	80008001 	.word	0x80008001

08001158 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>:


uint32_t RPLidar::_waitResponseHeader(rplidar_ans_header_t *header, uint32_t timeout) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
    uint32_t startTick = HAL_GetTick(); // Запоминаем начальное время
 8001164:	f004 fb9c 	bl	80058a0 <HAL_GetTick>
 8001168:	61b8      	str	r0, [r7, #24]
    uint8_t recvPos = 0; // Текущая позиция приёмного буфера
 800116a:	2300      	movs	r3, #0
 800116c:	77fb      	strb	r3, [r7, #31]
    uint8_t *headerbuf = (uint8_t *)header; // Преобразуем указатель на заголовок к массиву байтов
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	617b      	str	r3, [r7, #20]
    uint8_t currentByte;

    while ((HAL_GetTick() - startTick) < timeout) { // Пока не истёк таймаут
 8001172:	f004 fb95 	bl	80058a0 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	bf8c      	ite	hi
 8001182:	2301      	movhi	r3, #1
 8001184:	2300      	movls	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d039      	beq.n	8001200 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa8>
        // Считываем один байт через UART
        HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, &currentByte, 1, timeout - (HAL_GetTick() - startTick));
 800118c:	f004 fb88 	bl	80058a0 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	1a9a      	subs	r2, r3, r2
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	f107 0112 	add.w	r1, r7, #18
 800119e:	2201      	movs	r2, #1
 80011a0:	481a      	ldr	r0, [pc, #104]	; (800120c <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb4>)
 80011a2:	f009 fba3 	bl	800a8ec <HAL_UART_Receive>
 80011a6:	4603      	mov	r3, r0
 80011a8:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK) { // Если байт успешно прочитан
 80011aa:	7cfb      	ldrb	r3, [r7, #19]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d11f      	bne.n	80011f0 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x98>
            switch (recvPos) {
 80011b0:	7ffb      	ldrb	r3, [r7, #31]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x64>
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d004      	beq.n	80011c4 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x6c>
 80011ba:	e00c      	b.n	80011d6 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7e>
                case 0:
                    // Проверяем первый синхронизирующий байт
                    if (currentByte != RPLIDAR_ANS_SYNC_BYTE1) {
 80011bc:	7cbb      	ldrb	r3, [r7, #18]
 80011be:	2ba5      	cmp	r3, #165	; 0xa5
 80011c0:	d006      	beq.n	80011d0 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x78>
                        continue; // Если не совпадает, игнорируем байт и продолжаем
 80011c2:	e01c      	b.n	80011fe <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa6>
                    }
                    break;
                case 1:
                    // Проверяем второй синхронизирующий байт
                    if (currentByte != RPLIDAR_ANS_SYNC_BYTE2) {
 80011c4:	7cbb      	ldrb	r3, [r7, #18]
 80011c6:	2b5a      	cmp	r3, #90	; 0x5a
 80011c8:	d004      	beq.n	80011d4 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7c>
                        recvPos = 0; // Если не совпадает, сбрасываем позицию
 80011ca:	2300      	movs	r3, #0
 80011cc:	77fb      	strb	r3, [r7, #31]
                        continue;
 80011ce:	e016      	b.n	80011fe <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa6>
                    break;
 80011d0:	bf00      	nop
 80011d2:	e000      	b.n	80011d6 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7e>
                    }
                    break;
 80011d4:	bf00      	nop
            }
            // Записываем байт в буфер заголовка
            headerbuf[recvPos++] = currentByte;
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	77fa      	strb	r2, [r7, #31]
 80011dc:	461a      	mov	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	4413      	add	r3, r2
 80011e2:	7cba      	ldrb	r2, [r7, #18]
 80011e4:	701a      	strb	r2, [r3, #0]

            // Если заголовок полностью считан
            if (recvPos == sizeof(rplidar_ans_header_t)) return RESULT_OK; // Возвращаем успешный результат
 80011e6:	7ffb      	ldrb	r3, [r7, #31]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	d1c2      	bne.n	8001172 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x1a>
 80011ec:	2300      	movs	r3, #0
 80011ee:	e008      	b.n	8001202 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
        }
        else if (status == HAL_TIMEOUT) return RESULT_OPERATION_TIMEOUT; // Если истёк таймаут
 80011f0:	7cfb      	ldrb	r3, [r7, #19]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d101      	bne.n	80011fa <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa2>
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb8>)
 80011f8:	e003      	b.n	8001202 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
        else return RESULT_OPERATION_FAIL; // Если произошла ошибка
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xbc>)
 80011fc:	e001      	b.n	8001202 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
    while ((HAL_GetTick() - startTick) < timeout) { // Пока не истёк таймаут
 80011fe:	e7b8      	b.n	8001172 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x1a>
    }

    return RESULT_OPERATION_TIMEOUT; // Если цикл завершился без успешного завершения
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb8>)
}
 8001202:	4618      	mov	r0, r3
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000374 	.word	0x20000374
 8001210:	80008002 	.word	0x80008002
 8001214:	80008001 	.word	0x80008001

08001218 <_ZN7RPLidar4stopEv>:
    // Если время ожидания истекло
    return RESULT_OPERATION_TIMEOUT;
}

uint32_t RPLidar::stop()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    if (!isOpen()) return RESULT_OPERATION_FAIL;
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff feb3 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 8001226:	4603      	mov	r3, r0
 8001228:	f083 0301 	eor.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <_ZN7RPLidar4stopEv+0x1e>
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <_ZN7RPLidar4stopEv+0x38>)
 8001234:	e007      	b.n	8001246 <_ZN7RPLidar4stopEv+0x2e>
    uint32_t ans = _sendCommand(RPLIDAR_CMD_STOP,NULL,0);
 8001236:	2300      	movs	r3, #0
 8001238:	2200      	movs	r2, #0
 800123a:	2125      	movs	r1, #37	; 0x25
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff03 	bl	8001048 <_ZN7RPLidar12_sendCommandEhPKvj>
 8001242:	60f8      	str	r0, [r7, #12]
    return ans;
 8001244:	68fb      	ldr	r3, [r7, #12]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	80008001 	.word	0x80008001

08001254 <_ZN7RPLidar9startScanEbm>:

uint32_t RPLidar::startScan(bool force, uint32_t timeout) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	460b      	mov	r3, r1
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	72fb      	strb	r3, [r7, #11]
    uint32_t ans;

    // Проверяем, открыт ли UART
    if (!isOpen()) return RESULT_OPERATION_FAIL;
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f7ff fe92 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 8001268:	4603      	mov	r3, r0
 800126a:	f083 0301 	eor.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <_ZN7RPLidar9startScanEbm+0x24>
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <_ZN7RPLidar9startScanEbm+0x9c>)
 8001276:	e036      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>

    // Останавливаем предыдущую операцию
    stop();
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff ffcd 	bl	8001218 <_ZN7RPLidar4stopEv>

    // Отправляем команду на сканирование

        uint8_t command = force ? RPLIDAR_CMD_FORCE_SCAN : RPLIDAR_CMD_SCAN;
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <_ZN7RPLidar9startScanEbm+0x34>
 8001284:	2321      	movs	r3, #33	; 0x21
 8001286:	e000      	b.n	800128a <_ZN7RPLidar9startScanEbm+0x36>
 8001288:	2320      	movs	r3, #32
 800128a:	77fb      	strb	r3, [r7, #31]
        ans = _sendCommand(command, NULL, 0);
 800128c:	7ff9      	ldrb	r1, [r7, #31]
 800128e:	2300      	movs	r3, #0
 8001290:	2200      	movs	r2, #0
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff fed8 	bl	8001048 <_ZN7RPLidar12_sendCommandEhPKvj>
 8001298:	61b8      	str	r0, [r7, #24]
        if (IS_FAIL(ans)) return ans;
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b00      	cmp	r3, #0
 800129e:	da01      	bge.n	80012a4 <_ZN7RPLidar9startScanEbm+0x50>
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	e020      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>

        // Ожидание заголовка подтверждения
        rplidar_ans_header_t response_header;
        if (IS_FAIL(ans = _waitResponseHeader(&response_header, timeout))) return ans;
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	4619      	mov	r1, r3
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f7ff ff53 	bl	8001158 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>
 80012b2:	61b8      	str	r0, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	0fdb      	lsrs	r3, r3, #31
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <_ZN7RPLidar9startScanEbm+0x6e>
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	e011      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>

        // Проверяем тип заголовка
        if (response_header.type != RPLIDAR_ANS_TYPE_MEASUREMENT) return RESULT_INVALID_DATA;
 80012c2:	7dbb      	ldrb	r3, [r7, #22]
 80012c4:	2b81      	cmp	r3, #129	; 0x81
 80012c6:	d002      	beq.n	80012ce <_ZN7RPLidar9startScanEbm+0x7a>
 80012c8:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80012cc:	e00b      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>

        // Проверяем размер заголовка
        if (response_header.size < sizeof(rplidar_response_measurement_node_t)) return RESULT_INVALID_DATA;
 80012ce:	8a7b      	ldrh	r3, [r7, #18]
 80012d0:	8aba      	ldrh	r2, [r7, #20]
 80012d2:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80012d6:	0412      	lsls	r2, r2, #16
 80012d8:	4313      	orrs	r3, r2
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d802      	bhi.n	80012e4 <_ZN7RPLidar9startScanEbm+0x90>
 80012de:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80012e2:	e000      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>


    return RESULT_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	80008001 	.word	0x80008001

080012f4 <_ZN7RPLidar7getDistEv>:
float* RPLidar::getDist() {  // Аргумент по умолчанию здесь не указывается
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    return minDist;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_ZN7RPLidar10clearArrayEPf>:

void RPLidar::setDist(uint32_t i, float value){
	minDist[i] = value;
}

void RPLidar::clearArray( float array[361]){
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < sizeof(array) / sizeof(array[0]); ++i) {
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10a      	bne.n	8001338 <_ZN7RPLidar10clearArrayEPf+0x2a>
    	array[i] = 0.0f;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	4413      	add	r3, r2
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(array) / sizeof(array[0]); ++i) {
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3301      	adds	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e7f1      	b.n	800131c <_ZN7RPLidar10clearArrayEPf+0xe>
    }
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_ZN7RPLidar9constrainElll>:


float RPLidar::getDist(int i) {  // Аргумент по умолчанию здесь не указывается
    return minDist[i];
}
float RPLidar::constrain(int32_t value,int32_t num1,int32_t num2){
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
	if (value>num2) value = num2;
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	dd01      	ble.n	800135e <_ZN7RPLidar9constrainElll+0x1a>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	60bb      	str	r3, [r7, #8]
	if (value<num1) value = num1;
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	429a      	cmp	r2, r3
 8001364:	da01      	bge.n	800136a <_ZN7RPLidar9constrainElll+0x26>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	60bb      	str	r3, [r7, #8]
	return value;
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001374:	eeb0 0a67 	vmov.f32	s0, s15
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <_ZN7RPLidar11reWriteDistEv>:


void RPLidar::reWriteDist(){
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    for (int angle = 0; angle < 360; angle += 9) { // Шаг изменения угла 9 градусов
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001396:	da56      	bge.n	8001446 <_ZN7RPLidar11reWriteDistEv+0xc2>
        float minDistance = 20000.0f; // Инициализируем минимальное расстояние текущим значением
 8001398:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <_ZN7RPLidar11reWriteDistEv+0xd0>)
 800139a:	61bb      	str	r3, [r7, #24]

        // Определяем диапазон для поиска минимального расстояния
        int startAngle = angle - 4;
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	3b04      	subs	r3, #4
 80013a0:	60fb      	str	r3, [r7, #12]
        int endAngle = angle + 4;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	60bb      	str	r3, [r7, #8]

        // Проверяем значения в диапазоне
        for (int currentAngle = startAngle; currentAngle <= endAngle; ++currentAngle) {
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dc33      	bgt.n	800141c <_ZN7RPLidar11reWriteDistEv+0x98>
            // Обрабатываем циклический характер углов
            int wrappedAngle = currentAngle;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
            if (wrappedAngle < 0) {
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da04      	bge.n	80013c8 <_ZN7RPLidar11reWriteDistEv+0x44>
                wrappedAngle += 360; // Если угол отрицательный, добавляем 360
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	e007      	b.n	80013d8 <_ZN7RPLidar11reWriteDistEv+0x54>
            }
            else if (wrappedAngle > 360) {
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80013ce:	dd03      	ble.n	80013d8 <_ZN7RPLidar11reWriteDistEv+0x54>
                wrappedAngle -= 360; // Если угол больше 360, вычитаем 360
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80013d6:	613b      	str	r3, [r7, #16]
            }

            // Проверяем, чтобы угол не выходил за пределы массива
            if (wrappedAngle >= 0 && wrappedAngle < 360) {
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db1a      	blt.n	8001414 <_ZN7RPLidar11reWriteDistEv+0x90>
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80013e4:	da16      	bge.n	8001414 <_ZN7RPLidar11reWriteDistEv+0x90>
                if (distances[wrappedAngle] < minDistance) {
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	3302      	adds	r3, #2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	3304      	adds	r3, #4
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	ed97 7a06 	vldr	s14, [r7, #24]
 80013fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	dd07      	ble.n	8001414 <_ZN7RPLidar11reWriteDistEv+0x90>
                    minDistance = distances[wrappedAngle];
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	3302      	adds	r3, #2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	3304      	adds	r3, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	61bb      	str	r3, [r7, #24]
        for (int currentAngle = startAngle; currentAngle <= endAngle; ++currentAngle) {
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3301      	adds	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e7c7      	b.n	80013ac <_ZN7RPLidar11reWriteDistEv+0x28>
                }
            }
        }

        // Записываем минимальное расстояние в новый массив
        if (minDistance != 20000.0f) {
 800141c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001420:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001458 <_ZN7RPLidar11reWriteDistEv+0xd4>
 8001424:	eef4 7a47 	vcmp.f32	s15, s14
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	d007      	beq.n	800143e <_ZN7RPLidar11reWriteDistEv+0xba>
            minDist[angle] = minDistance;
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	601a      	str	r2, [r3, #0]
    for (int angle = 0; angle < 360; angle += 9) { // Шаг изменения угла 9 градусов
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3309      	adds	r3, #9
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	e7a4      	b.n	8001390 <_ZN7RPLidar11reWriteDistEv+0xc>
        }
    }
}
 8001446:	bf00      	nop
 8001448:	3724      	adds	r7, #36	; 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	469c4000 	.word	0x469c4000
 8001458:	469c4000 	.word	0x469c4000

0800145c <_ZN7RPLidar9waitPointEm>:

uint32_t RPLidar::waitPoint(uint32_t timeout) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	; 0x30
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
    uint32_t currentTs = HAL_GetTick(); // Получаем текущее время
 8001466:	f004 fa1b 	bl	80058a0 <HAL_GetTick>
 800146a:	62b8      	str	r0, [r7, #40]	; 0x28
    uint32_t remainingtime;
    rplidar_response_measurement_node_t node;
    uint8_t *nodebuf = (uint8_t *)&node;
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t recvPos = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    while ((remainingtime = HAL_GetTick() - currentTs) <= timeout) {
 8001478:	f004 fa12 	bl	80058a0 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	623b      	str	r3, [r7, #32]
 8001484:	6a3a      	ldr	r2, [r7, #32]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	bf94      	ite	ls
 800148c:	2301      	movls	r3, #1
 800148e:	2300      	movhi	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80bd 	beq.w	8001612 <_ZN7RPLidar9waitPointEm+0x1b6>
        uint8_t currentbyte;
        HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, &currentbyte, 1, timeout);
 8001498:	f107 010b 	add.w	r1, r7, #11
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2201      	movs	r2, #1
 80014a0:	485e      	ldr	r0, [pc, #376]	; (800161c <_ZN7RPLidar9waitPointEm+0x1c0>)
 80014a2:	f009 fa23 	bl	800a8ec <HAL_UART_Receive>
 80014a6:	4603      	mov	r3, r0
 80014a8:	77fb      	strb	r3, [r7, #31]

        // Проверяем, успешно ли получен байт
        if (status != HAL_OK) continue; // Пропускаем итерацию, если байт не был получен
 80014aa:	7ffb      	ldrb	r3, [r7, #31]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f040 80ae 	bne.w	800160e <_ZN7RPLidar9waitPointEm+0x1b2>

        switch (recvPos) {
 80014b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <_ZN7RPLidar9waitPointEm+0x64>
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d00c      	beq.n	80014d8 <_ZN7RPLidar9waitPointEm+0x7c>
 80014be:	e017      	b.n	80014f0 <_ZN7RPLidar9waitPointEm+0x94>
            case 0: // Ожидаем бит синхронизации и его инверсии
                {
                    uint8_t tmp = (currentbyte >> 1);
 80014c0:	7afb      	ldrb	r3, [r7, #11]
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	77bb      	strb	r3, [r7, #30]
                    if ((tmp ^ currentbyte) & 0x1){} // Проходит проверку
 80014c6:	7afa      	ldrb	r2, [r7, #11]
 80014c8:	7fbb      	ldrb	r3, [r7, #30]
 80014ca:	4053      	eors	r3, r2
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d109      	bne.n	80014ea <_ZN7RPLidar9waitPointEm+0x8e>
                    else continue; // Если проверка не прошла, ждём следующий байт
 80014d6:	e09b      	b.n	8001610 <_ZN7RPLidar9waitPointEm+0x1b4>
                }
                break;

            case 1: // Ожидаем, что самый старший бит равен 1
                {
                    if (currentbyte & RPLIDAR_RESP_MEASUREMENT_CHECKBIT) {} // Проходит проверку
 80014d8:	7afb      	ldrb	r3, [r7, #11]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d105      	bne.n	80014ee <_ZN7RPLidar9waitPointEm+0x92>
                    else {
                        recvPos = 0; // Сбрасываем позицию и начинаем заново
 80014e2:	2300      	movs	r3, #0
 80014e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        continue;
 80014e8:	e092      	b.n	8001610 <_ZN7RPLidar9waitPointEm+0x1b4>
                break;
 80014ea:	bf00      	nop
 80014ec:	e000      	b.n	80014f0 <_ZN7RPLidar9waitPointEm+0x94>
                    }
                }
                break;
 80014ee:	bf00      	nop
        }

        // Сохраняем текущий байт
        nodebuf[recvPos++] = currentbyte;
 80014f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80014fa:	461a      	mov	r2, r3
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	4413      	add	r3, r2
 8001500:	7afa      	ldrb	r2, [r7, #11]
 8001502:	701a      	strb	r2, [r3, #0]

        // Если все байты структуры считаны
        if (recvPos == sizeof(rplidar_response_measurement_node_t)) {
 8001504:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001508:	2b05      	cmp	r3, #5
 800150a:	d1b5      	bne.n	8001478 <_ZN7RPLidar9waitPointEm+0x1c>
            // Вычисляем значения измерений
            _currentMeasurement.distance = node.distance_q2 / 4.0f;
 800150c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8001510:	b29b      	uxth	r3, r3
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800151a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800151e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	edc3 7a00 	vstr	s15, [r3]
            _currentMeasurement.angle = constrain((node.angle_q6_checkbit >> RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT) / 64.0f,0,360);
 8001528:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800152c:	b29b      	uxth	r3, r3
 800152e:	085b      	lsrs	r3, r3, #1
 8001530:	b29b      	uxth	r3, r3
 8001532:	ee07 3a90 	vmov	s15, r3
 8001536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001620 <_ZN7RPLidar9waitPointEm+0x1c4>
 800153e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001546:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800154a:	2200      	movs	r2, #0
 800154c:	ee17 1a90 	vmov	r1, s15
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fef7 	bl	8001344 <_ZN7RPLidar9constrainElll>
 8001556:	eef0 7a40 	vmov.f32	s15, s0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	edc3 7a01 	vstr	s15, [r3, #4]
            _currentMeasurement.quality = (node.sync_quality >> RPLIDAR_RESP_MEASUREMENT_QUALITY_SHIFT);
 8001560:	7b3b      	ldrb	r3, [r7, #12]
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	b2da      	uxtb	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	721a      	strb	r2, [r3, #8]
            _currentMeasurement.startBit = (node.sync_quality & RPLIDAR_RESP_MEASUREMENT_SYNCBIT);
 800156a:	7b3b      	ldrb	r3, [r7, #12]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf14      	ite	ne
 8001574:	2301      	movne	r3, #1
 8001576:	2300      	moveq	r3, #0
 8001578:	b2da      	uxtb	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	725a      	strb	r2, [r3, #9]

            // Сохраняем минимальное расстояние для каждого угла (от 0 до 360 градусов)
            float newAngle = _currentMeasurement.angle;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
            float newDistance = _currentMeasurement.distance;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	617b      	str	r3, [r7, #20]

				if (newAngle>=0&&newAngle<=360){
 800158a:	edd7 7a06 	vldr	s15, [r7, #24]
 800158e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001596:	db35      	blt.n	8001604 <_ZN7RPLidar9waitPointEm+0x1a8>
 8001598:	edd7 7a06 	vldr	s15, [r7, #24]
 800159c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001624 <_ZN7RPLidar9waitPointEm+0x1c8>
 80015a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	d82c      	bhi.n	8001604 <_ZN7RPLidar9waitPointEm+0x1a8>
					if (newDistance>MIN_RANGE_LID&&newDistance<MAX_RANGE_LID)
 80015aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ae:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001628 <_ZN7RPLidar9waitPointEm+0x1cc>
 80015b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ba:	dd16      	ble.n	80015ea <_ZN7RPLidar9waitPointEm+0x18e>
 80015bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800162c <_ZN7RPLidar9waitPointEm+0x1d0>
 80015c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015cc:	d50d      	bpl.n	80015ea <_ZN7RPLidar9waitPointEm+0x18e>
						distances[(int)newAngle] = newDistance; // Сохраняем  расстояние
 80015ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80015d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d6:	ee17 3a90 	vmov	r3, s15
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	3302      	adds	r3, #2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	3304      	adds	r3, #4
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	e00c      	b.n	8001604 <_ZN7RPLidar9waitPointEm+0x1a8>
					else distances[(int)newAngle] = 15000.0f;
 80015ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f2:	ee17 3a90 	vmov	r3, s15
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	3302      	adds	r3, #2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	3304      	adds	r3, #4
 8001600:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <_ZN7RPLidar9waitPointEm+0x1d4>)
 8001602:	601a      	str	r2, [r3, #0]
				}

            reWriteDist();
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff febd 	bl	8001384 <_ZN7RPLidar11reWriteDistEv>
            return RESULT_OK; // Успешное завершение
 800160a:	2300      	movs	r3, #0
 800160c:	e002      	b.n	8001614 <_ZN7RPLidar9waitPointEm+0x1b8>
        if (status != HAL_OK) continue; // Пропускаем итерацию, если байт не был получен
 800160e:	bf00      	nop
    while ((remainingtime = HAL_GetTick() - currentTs) <= timeout) {
 8001610:	e732      	b.n	8001478 <_ZN7RPLidar9waitPointEm+0x1c>
        }
    }

    // Если таймаут истёк
    return RESULT_OPERATION_TIMEOUT;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <_ZN7RPLidar9waitPointEm+0x1d8>)
}
 8001614:	4618      	mov	r0, r3
 8001616:	3730      	adds	r7, #48	; 0x30
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000374 	.word	0x20000374
 8001620:	42800000 	.word	0x42800000
 8001624:	43b40000 	.word	0x43b40000
 8001628:	43480000 	.word	0x43480000
 800162c:	43520000 	.word	0x43520000
 8001630:	466a6000 	.word	0x466a6000
 8001634:	80008002 	.word	0x80008002

08001638 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	bfb8      	it	lt
 8001646:	425b      	neglt	r3, r3
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	ed87 0a01 	vstr	s0, [r7, #4]
 800165e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001662:	eef0 7ae7 	vabs.f32	s15, s15
 8001666:	eeb0 0a67 	vmov.f32	s0, s15
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_ZN9ColorSensC1Ev>:
extern I2C_HandleTypeDef hi2c1;

class ColorSens {

public:
	ColorSens(){}
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <_ZN9ColorSens4initEv>:

	void init(){
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af04      	add	r7, sp, #16
 8001692:	6078      	str	r0, [r7, #4]
		uint8_t K = PON;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
	  	HAL_I2C_Mem_Write(&hi2c1, TCS3472_ADDR, (ENABLE_ADDR|COMAND_BIT), 1, &K, 1,1000);
 8001698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	2301      	movs	r3, #1
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	f107 030f 	add.w	r3, r7, #15
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	2280      	movs	r2, #128	; 0x80
 80016ac:	2152      	movs	r1, #82	; 0x52
 80016ae:	4818      	ldr	r0, [pc, #96]	; (8001710 <_ZN9ColorSens4initEv+0x84>)
 80016b0:	f005 fa18 	bl	8006ae4 <HAL_I2C_Mem_Write>
	  	HAL_Delay(100);
 80016b4:	2064      	movs	r0, #100	; 0x64
 80016b6:	f004 f8ff 	bl	80058b8 <HAL_Delay>
	    K = (PON|AEN);
 80016ba:	2303      	movs	r3, #3
 80016bc:	73fb      	strb	r3, [r7, #15]
	    HAL_I2C_Mem_Write(&hi2c1, TCS3472_ADDR, (ENABLE_ADDR|COMAND_BIT), 1, &K, 1,1000);
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	9302      	str	r3, [sp, #8]
 80016c4:	2301      	movs	r3, #1
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	f107 030f 	add.w	r3, r7, #15
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2301      	movs	r3, #1
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	2152      	movs	r1, #82	; 0x52
 80016d4:	480e      	ldr	r0, [pc, #56]	; (8001710 <_ZN9ColorSens4initEv+0x84>)
 80016d6:	f005 fa05 	bl	8006ae4 <HAL_I2C_Mem_Write>
	    HAL_Delay(100);
 80016da:	2064      	movs	r0, #100	; 0x64
 80016dc:	f004 f8ec 	bl	80058b8 <HAL_Delay>
	    K = A_TIM_VALUE154;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
	    HAL_I2C_Mem_Write(&hi2c1, TCS3472_ADDR, (A_TIM_ADDR|COMAND_BIT), 1, &K, 1,1000);
 80016e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e8:	9302      	str	r3, [sp, #8]
 80016ea:	2301      	movs	r3, #1
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	f107 030f 	add.w	r3, r7, #15
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	2281      	movs	r2, #129	; 0x81
 80016f8:	2152      	movs	r1, #82	; 0x52
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <_ZN9ColorSens4initEv+0x84>)
 80016fc:	f005 f9f2 	bl	8006ae4 <HAL_I2C_Mem_Write>
	    HAL_Delay(100);
 8001700:	2064      	movs	r0, #100	; 0x64
 8001702:	f004 f8d9 	bl	80058b8 <HAL_Delay>
	}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000200 	.word	0x20000200

08001714 <_ZN9ColorSens11getColorRedEv>:

	uint16_t getColorRed(){
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af02      	add	r7, sp, #8
 800171a:	6078      	str	r0, [r7, #4]
	      HAL_I2C_Mem_Read_IT(&hi2c1, TCS3472_ADDR, RED_COLOR_ADDR|COMAND_BIT_INC , 1, RxBufferRed, 2);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	9201      	str	r2, [sp, #4]
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2301      	movs	r3, #1
 8001726:	22b6      	movs	r2, #182	; 0xb6
 8001728:	2152      	movs	r1, #82	; 0x52
 800172a:	4808      	ldr	r0, [pc, #32]	; (800174c <_ZN9ColorSens11getColorRedEv+0x38>)
 800172c:	f005 fad4 	bl	8006cd8 <HAL_I2C_Mem_Read_IT>
	      return (((uint16_t)(RxBufferRed[1]<<8))|(uint16_t)RxBufferRed[0]);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	785b      	ldrb	r3, [r3, #1]
 8001734:	b29b      	uxth	r3, r3
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	b29a      	uxth	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	b29b      	uxth	r3, r3
 8001740:	4313      	orrs	r3, r2
 8001742:	b29b      	uxth	r3, r3
	}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000200 	.word	0x20000200

08001750 <_ZN9ColorSens13getColorGreenEv>:
	uint16_t getColorGreen(){
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af02      	add	r7, sp, #8
 8001756:	6078      	str	r0, [r7, #4]
	      HAL_I2C_Mem_Read_IT(&hi2c1, TCS3472_ADDR, GREEN_COLOR_ADDR|COMAND_BIT_INC , 1, RxBufferGreen, 2);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3302      	adds	r3, #2
 800175c:	2202      	movs	r2, #2
 800175e:	9201      	str	r2, [sp, #4]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	22b8      	movs	r2, #184	; 0xb8
 8001766:	2152      	movs	r1, #82	; 0x52
 8001768:	4808      	ldr	r0, [pc, #32]	; (800178c <_ZN9ColorSens13getColorGreenEv+0x3c>)
 800176a:	f005 fab5 	bl	8006cd8 <HAL_I2C_Mem_Read_IT>
	      return (((uint16_t)(RxBufferGreen[1]<<8))|(uint16_t)RxBufferGreen[0]);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	78db      	ldrb	r3, [r3, #3]
 8001772:	b29b      	uxth	r3, r3
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	b29a      	uxth	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	789b      	ldrb	r3, [r3, #2]
 800177c:	b29b      	uxth	r3, r3
 800177e:	4313      	orrs	r3, r2
 8001780:	b29b      	uxth	r3, r3
	}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000200 	.word	0x20000200

08001790 <_ZN9ColorSens12getColorBlueEv>:
	uint16_t getColorBlue(){
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af02      	add	r7, sp, #8
 8001796:	6078      	str	r0, [r7, #4]
	      HAL_I2C_Mem_Read_IT(&hi2c1, TCS3472_ADDR, BLUE_COLOR_ADDR|COMAND_BIT_INC , 1, RxBufferBlue, 2);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3304      	adds	r3, #4
 800179c:	2202      	movs	r2, #2
 800179e:	9201      	str	r2, [sp, #4]
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2301      	movs	r3, #1
 80017a4:	22ba      	movs	r2, #186	; 0xba
 80017a6:	2152      	movs	r1, #82	; 0x52
 80017a8:	4808      	ldr	r0, [pc, #32]	; (80017cc <_ZN9ColorSens12getColorBlueEv+0x3c>)
 80017aa:	f005 fa95 	bl	8006cd8 <HAL_I2C_Mem_Read_IT>
	      return (((uint16_t)(RxBufferBlue[1]<<8))|(uint16_t)RxBufferBlue[0]);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	795b      	ldrb	r3, [r3, #5]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	791b      	ldrb	r3, [r3, #4]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4313      	orrs	r3, r2
 80017c0:	b29b      	uxth	r3, r3
	}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000200 	.word	0x20000200

080017d0 <_ZN9ColorSens13getColorWhiteEv>:
	uint16_t getColorWhite(){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	6078      	str	r0, [r7, #4]
	      HAL_I2C_Mem_Read_IT(&hi2c1, TCS3472_ADDR, WHITE_COLOR_ADDR|COMAND_BIT_INC , 1, RxBufferWhite, 2);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3306      	adds	r3, #6
 80017dc:	2202      	movs	r2, #2
 80017de:	9201      	str	r2, [sp, #4]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2301      	movs	r3, #1
 80017e4:	22b4      	movs	r2, #180	; 0xb4
 80017e6:	2152      	movs	r1, #82	; 0x52
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <_ZN9ColorSens13getColorWhiteEv+0x3c>)
 80017ea:	f005 fa75 	bl	8006cd8 <HAL_I2C_Mem_Read_IT>
	      return (((uint16_t)(RxBufferWhite[1]<<8))|(uint16_t)RxBufferWhite[0]);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	79db      	ldrb	r3, [r3, #7]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	799b      	ldrb	r3, [r3, #6]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4313      	orrs	r3, r2
 8001800:	b29b      	uxth	r3, r3
	}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000200 	.word	0x20000200

08001810 <_ZN12LineDetectorC1Ev>:

#include "TCS3472.h"

class LineDetector {
public:
	LineDetector()	{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2205      	movs	r2, #5
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	711a      	strb	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3305      	adds	r3, #5
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff23 	bl	8001674 <_ZN9ColorSensC1Ev>
 800182e:	f004 f837 	bl	80058a0 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	611a      	str	r2, [r3, #16]
	};
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_ZN12LineDetector4initEv>:
	void init(){
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
		sens.init();
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3305      	adds	r3, #5
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff1c 	bl	800168c <_ZN9ColorSens4initEv>
	}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZN12LineDetector7handlerEv>:
	void handler() {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
		if (HAL_GetTick() - lastMs > delayMs) {
 8001864:	f004 f81c 	bl	80058a0 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	1ad2      	subs	r2, r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	bf8c      	ite	hi
 8001878:	2301      	movhi	r3, #1
 800187a:	2300      	movls	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d031      	beq.n	80018e6 <_ZN12LineDetector7handlerEv+0x8a>
				if ((sens.getColorWhite() < whiteTh) && (sens.getColorRed() < redTh) && (sens.getColorGreen() < greenTh) && (sens.getColorBlue() < blueTh)) {
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3305      	adds	r3, #5
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ffa2 	bl	80017d0 <_ZN9ColorSens13getColorWhiteEv>
 800188c:	4603      	mov	r3, r0
 800188e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8001892:	d219      	bcs.n	80018c8 <_ZN12LineDetector7handlerEv+0x6c>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3305      	adds	r3, #5
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff3b 	bl	8001714 <_ZN9ColorSens11getColorRedEv>
 800189e:	4603      	mov	r3, r0
 80018a0:	2bc7      	cmp	r3, #199	; 0xc7
 80018a2:	d811      	bhi.n	80018c8 <_ZN12LineDetector7handlerEv+0x6c>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3305      	adds	r3, #5
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff51 	bl	8001750 <_ZN9ColorSens13getColorGreenEv>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2bc7      	cmp	r3, #199	; 0xc7
 80018b2:	d809      	bhi.n	80018c8 <_ZN12LineDetector7handlerEv+0x6c>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3305      	adds	r3, #5
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff69 	bl	8001790 <_ZN9ColorSens12getColorBlueEv>
 80018be:	4603      	mov	r3, r0
 80018c0:	2bc7      	cmp	r3, #199	; 0xc7
 80018c2:	d801      	bhi.n	80018c8 <_ZN12LineDetector7handlerEv+0x6c>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <_ZN12LineDetector7handlerEv+0x6e>
 80018c8:	2300      	movs	r3, #0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <_ZN12LineDetector7handlerEv+0x7a>
					lineIsCrosed = true;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	711a      	strb	r2, [r3, #4]
 80018d4:	e002      	b.n	80018dc <_ZN12LineDetector7handlerEv+0x80>
				}
				else {
					lineIsCrosed = false;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	711a      	strb	r2, [r3, #4]
				}
				lastMs = HAL_GetTick();
 80018dc:	f003 ffe0 	bl	80058a0 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	611a      	str	r2, [r3, #16]
			}
		}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001914:	d205      	bcs.n	8001922 <_ZSt16__deque_buf_sizej+0x1c>
 8001916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001920:	e000      	b.n	8001924 <_ZSt16__deque_buf_sizej+0x1e>
 8001922:	2301      	movs	r3, #1
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_ZN7EncoderC1EP17TIM_HandleTypeDef>:
#include  <cmath>

class Encoder
{
public:
	Encoder(TIM_HandleTypeDef* _encTim)
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
		:encTim(_encTim)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	609a      	str	r2, [r3, #8]
	{
		//HAL_TIM_Encoder_Start(_encTim, TIM_CHANNEL_1);
	};
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_ZN7Encoder7handlerEv>:

	void handler() {
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
		encoderValue = (int16_t)__HAL_TIM_GET_COUNTER(encTim);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	b21a      	sxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(encTim, 0);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2200      	movs	r2, #0
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
	}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_ZN7Encoder15getEncoderValueEv>:

	int16_t getEncoderValue(){
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
		return encoderValue;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f9b3 3000 	ldrsh.w	r3, [r3]
	}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f001 fe48 	bl	8003632 <_ZNSaIfED1Ev>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_ZN7BFilterC1ESt6vectorIfSaIfEE>:
        // Инициализация коэффициентов фильтра нулями
        //coefs = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
        initializeStates();
    }
    // Конструктор с заданными коэффициентами
    BFilter(const std::vector<float> _coefs)
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
    	:coefs(_coefs)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6839      	ldr	r1, [r7, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 fe79 	bl	80036b2 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
        } else {
            // Если коэффициенты заданы неверно, инициализируем нулями
            coefs = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
        }
        */
        initializeStates();
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f86f 	bl	8001aa4 <_ZN7BFilter16initializeStatesEv>
    }
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_ZN7BFilter4calcEf>:
    // Метод для вычисления отфильтрованного значения
    float calc(float inData) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	ed2d 8b02 	vpush	{d8}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	ed87 0a00 	vstr	s0, [r7]
        // Вычисление выходного значения по разностному уравнению
        float y = coefs[2] * inData + coefs[3] * x1 + coefs[4] * x2 - coefs[0] * y1 - coefs[1] * y2;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2102      	movs	r1, #2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f001 fea1 	bl	800372c <_ZNSt6vectorIfSaIfEEixEj>
 80019ea:	4603      	mov	r3, r0
 80019ec:	ed93 7a00 	vldr	s14, [r3]
 80019f0:	edd7 7a00 	vldr	s15, [r7]
 80019f4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2103      	movs	r1, #3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 fe95 	bl	800372c <_ZNSt6vectorIfSaIfEEixEj>
 8001a02:	4603      	mov	r3, r0
 8001a04:	ed93 7a00 	vldr	s14, [r3]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a12:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2104      	movs	r1, #4
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 fe86 	bl	800372c <_ZNSt6vectorIfSaIfEEixEj>
 8001a20:	4603      	mov	r3, r0
 8001a22:	ed93 7a00 	vldr	s14, [r3]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a30:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f001 fe77 	bl	800372c <_ZNSt6vectorIfSaIfEEixEj>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	ed93 7a00 	vldr	s14, [r3]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2101      	movs	r1, #1
 8001a56:	4618      	mov	r0, r3
 8001a58:	f001 fe68 	bl	800372c <_ZNSt6vectorIfSaIfEEixEj>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	ed93 7a00 	vldr	s14, [r3]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001a70:	edc7 7a03 	vstr	s15, [r7, #12]

        // Обновление состояний фильтра
        x2 = x1;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	611a      	str	r2, [r3, #16]
        x1 = inData;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	60da      	str	r2, [r3, #12]
        y2 = y1;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	619a      	str	r2, [r3, #24]
        y1 = y;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	615a      	str	r2, [r3, #20]

        return y;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	ee07 3a90 	vmov	s15, r3
    }
 8001a96:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	ecbd 8b02 	vpop	{d8}
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_ZN7BFilter16initializeStatesEv>:
    // Метод для инициализации состояний фильтра
    void initializeStates() {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
        x1 = 0.0f;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
        x2 = 0.0f;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
        y1 = 0.0f;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
        y2 = 0.0f;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
    }
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	ed87 0b00 	vstr	d0, [r7]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f7fe fd25 	bl	8000534 <__aeabi_i2d>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	ed97 1b00 	vldr	d1, [r7]
 8001af2:	ec43 2b10 	vmov	d0, r2, r3
 8001af6:	f009 fef3 	bl	800b8e0 <pow>
 8001afa:	eeb0 7a40 	vmov.f32	s14, s0
 8001afe:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001b02:	eeb0 0a47 	vmov.f32	s0, s14
 8001b06:	eef0 0a67 	vmov.f32	s1, s15
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <_ZN7BFilter15CalcSecondOrderEff>:
		float a1 = (omegaC - 2 / T) / a0;
		float b0 = omegaC / a0;
		std::vector<float> buf = {a1, 0, b0, b0, 0};
		return buf;
	};
	static std::vector<float> CalcSecondOrder(float freq, float sampleRate) {
 8001b10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b14:	b094      	sub	sp, #80	; 0x50
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b1e:	edc7 0a01 	vstr	s1, [r7, #4]
		float T = 1 / sampleRate;
 8001b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b26:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b2e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		float omegaC = 2 * M_PI * freq;
 8001b32:	68b8      	ldr	r0, [r7, #8]
 8001b34:	f7fe fd10 	bl	8000558 <__aeabi_f2d>
 8001b38:	a3ad      	add	r3, pc, #692	; (adr r3, 8001df0 <_ZN7BFilter15CalcSecondOrderEff+0x2e0>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd63 	bl	8000608 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff f835 	bl	8000bb8 <__aeabi_d2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	64bb      	str	r3, [r7, #72]	; 0x48
		float a0 = pow(omegaC, 2) + 2 * pow(2, 0.5) * omegaC / T + 4 / pow(T, 2);
 8001b52:	2002      	movs	r0, #2
 8001b54:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001b58:	f001 fe19 	bl	800378e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b5c:	ec59 8b10 	vmov	r8, r9, d0
 8001b60:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 8001de0 <_ZN7BFilter15CalcSecondOrderEff+0x2d0>
 8001b64:	2002      	movs	r0, #2
 8001b66:	f7ff ffb7 	bl	8001ad8 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b6a:	ec51 0b10 	vmov	r0, r1, d0
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	f7fe fb93 	bl	800029c <__adddf3>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4614      	mov	r4, r2
 8001b7c:	461d      	mov	r5, r3
 8001b7e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b80:	f7fe fcea 	bl	8000558 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4620      	mov	r0, r4
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	f7fe fd3c 	bl	8000608 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4614      	mov	r4, r2
 8001b96:	461d      	mov	r5, r3
 8001b98:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b9a:	f7fe fcdd 	bl	8000558 <__aeabi_f2d>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	f7fe fe59 	bl	800085c <__aeabi_ddiv>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4640      	mov	r0, r8
 8001bb0:	4649      	mov	r1, r9
 8001bb2:	f7fe fb73 	bl	800029c <__adddf3>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4614      	mov	r4, r2
 8001bbc:	461d      	mov	r5, r3
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001bc4:	f001 fde3 	bl	800378e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001bc8:	ec53 2b10 	vmov	r2, r3, d0
 8001bcc:	f04f 0000 	mov.w	r0, #0
 8001bd0:	4985      	ldr	r1, [pc, #532]	; (8001de8 <_ZN7BFilter15CalcSecondOrderEff+0x2d8>)
 8001bd2:	f7fe fe43 	bl	800085c <__aeabi_ddiv>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fb5d 	bl	800029c <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f7fe ffe5 	bl	8000bb8 <__aeabi_d2f>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	647b      	str	r3, [r7, #68]	; 0x44
		float a1 = (2 * pow(omegaC, 2) - 8 / pow(T, 2)) / a0;
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001bf8:	f001 fdc9 	bl	800378e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001bfc:	ec51 0b10 	vmov	r0, r1, d0
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	f7fe fb4a 	bl	800029c <__adddf3>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	461d      	mov	r5, r3
 8001c10:	2002      	movs	r0, #2
 8001c12:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001c16:	f001 fdba 	bl	800378e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c1a:	ec53 2b10 	vmov	r2, r3, d0
 8001c1e:	f04f 0000 	mov.w	r0, #0
 8001c22:	4972      	ldr	r1, [pc, #456]	; (8001dec <_ZN7BFilter15CalcSecondOrderEff+0x2dc>)
 8001c24:	f7fe fe1a 	bl	800085c <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f7fe fb32 	bl	8000298 <__aeabi_dsub>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4614      	mov	r4, r2
 8001c3a:	461d      	mov	r5, r3
 8001c3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c3e:	f7fe fc8b 	bl	8000558 <__aeabi_f2d>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4620      	mov	r0, r4
 8001c48:	4629      	mov	r1, r5
 8001c4a:	f7fe fe07 	bl	800085c <__aeabi_ddiv>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7fe ffaf 	bl	8000bb8 <__aeabi_d2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	643b      	str	r3, [r7, #64]	; 0x40
		float a2 = (pow(omegaC, 2) - 2 * pow(2, 0.5) * omegaC / T + 4 / pow(T, 2)) / a0;
 8001c5e:	2002      	movs	r0, #2
 8001c60:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001c64:	f001 fd93 	bl	800378e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c68:	ec59 8b10 	vmov	r8, r9, d0
 8001c6c:	ed9f 0b5c 	vldr	d0, [pc, #368]	; 8001de0 <_ZN7BFilter15CalcSecondOrderEff+0x2d0>
 8001c70:	2002      	movs	r0, #2
 8001c72:	f7ff ff31 	bl	8001ad8 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c76:	ec51 0b10 	vmov	r0, r1, d0
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	f7fe fb0d 	bl	800029c <__adddf3>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4614      	mov	r4, r2
 8001c88:	461d      	mov	r5, r3
 8001c8a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c8c:	f7fe fc64 	bl	8000558 <__aeabi_f2d>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4620      	mov	r0, r4
 8001c96:	4629      	mov	r1, r5
 8001c98:	f7fe fcb6 	bl	8000608 <__aeabi_dmul>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4614      	mov	r4, r2
 8001ca2:	461d      	mov	r5, r3
 8001ca4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ca6:	f7fe fc57 	bl	8000558 <__aeabi_f2d>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4620      	mov	r0, r4
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	f7fe fdd3 	bl	800085c <__aeabi_ddiv>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4640      	mov	r0, r8
 8001cbc:	4649      	mov	r1, r9
 8001cbe:	f7fe faeb 	bl	8000298 <__aeabi_dsub>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4614      	mov	r4, r2
 8001cc8:	461d      	mov	r5, r3
 8001cca:	2002      	movs	r0, #2
 8001ccc:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001cd0:	f001 fd5d 	bl	800378e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001cd4:	ec53 2b10 	vmov	r2, r3, d0
 8001cd8:	f04f 0000 	mov.w	r0, #0
 8001cdc:	4942      	ldr	r1, [pc, #264]	; (8001de8 <_ZN7BFilter15CalcSecondOrderEff+0x2d8>)
 8001cde:	f7fe fdbd 	bl	800085c <__aeabi_ddiv>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	4629      	mov	r1, r5
 8001cea:	f7fe fad7 	bl	800029c <__adddf3>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4614      	mov	r4, r2
 8001cf4:	461d      	mov	r5, r3
 8001cf6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001cf8:	f7fe fc2e 	bl	8000558 <__aeabi_f2d>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4620      	mov	r0, r4
 8001d02:	4629      	mov	r1, r5
 8001d04:	f7fe fdaa 	bl	800085c <__aeabi_ddiv>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe ff52 	bl	8000bb8 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	63fb      	str	r3, [r7, #60]	; 0x3c
		float b0 = pow(omegaC, 2) / a0;
 8001d18:	2002      	movs	r0, #2
 8001d1a:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001d1e:	f001 fd36 	bl	800378e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d22:	ec55 4b10 	vmov	r4, r5, d0
 8001d26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001d28:	f7fe fc16 	bl	8000558 <__aeabi_f2d>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4620      	mov	r0, r4
 8001d32:	4629      	mov	r1, r5
 8001d34:	f7fe fd92 	bl	800085c <__aeabi_ddiv>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe ff3a 	bl	8000bb8 <__aeabi_d2f>
 8001d44:	4603      	mov	r3, r0
 8001d46:	63bb      	str	r3, [r7, #56]	; 0x38
		float b1 = 2 * pow(omegaC, 2) / a0;
 8001d48:	2002      	movs	r0, #2
 8001d4a:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001d4e:	f001 fd1e 	bl	800378e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d52:	ec51 0b10 	vmov	r0, r1, d0
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	f7fe fa9f 	bl	800029c <__adddf3>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4614      	mov	r4, r2
 8001d64:	461d      	mov	r5, r3
 8001d66:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001d68:	f7fe fbf6 	bl	8000558 <__aeabi_f2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4620      	mov	r0, r4
 8001d72:	4629      	mov	r1, r5
 8001d74:	f7fe fd72 	bl	800085c <__aeabi_ddiv>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe ff1a 	bl	8000bb8 <__aeabi_d2f>
 8001d84:	4603      	mov	r3, r0
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
		float b2 = b0;
 8001d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
		//float buf[5] = {a1, a2, b0, b1, b2};
		std::vector<float> buf = {a1, a2, b0, b1, b2};
 8001d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d96:	623b      	str	r3, [r7, #32]
 8001d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001da0:	f107 0318 	add.w	r3, r7, #24
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	2305      	movs	r3, #5
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 fc33 	bl	800361a <_ZNSaIfEC1Ev>
 8001db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db8:	f107 0210 	add.w	r2, r7, #16
 8001dbc:	ca06      	ldmia	r2, {r1, r2}
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f001 fcc4 	bl	800374c <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8001dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f001 fc32 	bl	8003632 <_ZNSaIfED1Ev>

		return buf;
 8001dce:	bf00      	nop
	};
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	3750      	adds	r7, #80	; 0x50
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dda:	bf00      	nop
 8001ddc:	f3af 8000 	nop.w
 8001de0:	00000000 	.word	0x00000000
 8001de4:	3fe00000 	.word	0x3fe00000
 8001de8:	40100000 	.word	0x40100000
 8001dec:	40200000 	.word	0x40200000
 8001df0:	54442d18 	.word	0x54442d18
 8001df4:	401921fb 	.word	0x401921fb

08001df8 <_ZN3PIDC1Efff>:


class PID {
public:
    PID(float kp, float ki, float kd)
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e04:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e08:	ed87 1a00 	vstr	s2, [r7]
        : kp(kp), ki(ki), kd(kd), prevError(0), integral(0) {
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
    }
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <_ZN3PID9calculateEff>:

    // Метод для расчета управляющего воздействия
    float calculate(float target, float current) {
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e48:	edc7 0a01 	vstr	s1, [r7, #4]
    	float error = target - current;
 8001e4c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e58:	edc7 7a05 	vstr	s15, [r7, #20]
        integral += error; // Накопление интегральной ошибки
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e62:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	edc3 7a04 	vstr	s15, [r3, #16]
        float derivative = error - prevError; // Разница ошибок
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e76:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7e:	edc7 7a04 	vstr	s15, [r7, #16]
        prevError = error;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	60da      	str	r2, [r3, #12]

        return kp * error + ki * integral + kd * derivative;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	ed93 7a00 	vldr	s14, [r3]
 8001e8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	edd3 6a02 	vldr	s13, [r3, #8]
 8001eb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8001ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	0000      	movs	r0, r0
 8001ecc:	0000      	movs	r0, r0
	...

08001ed0 <_ZN3PID18updateCoefficientsEd>:
    	prevError = 0;
    	integral = 0;
    }

    // Метод для обновления коэффициентов по формулам
    void updateCoefficients(double targetSpeed) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b092      	sub	sp, #72	; 0x48
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	ed87 0b00 	vstr	d0, [r7]
        // Коэффициенты для низких скоростей (до 50 об/мин)
        double kp_low = 20;
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <_ZN3PID18updateCoefficientsEd+0x1d0>)
 8001ee2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
        double ki_low = 0.05;
 8001ee6:	a368      	add	r3, pc, #416	; (adr r3, 8002088 <_ZN3PID18updateCoefficientsEd+0x1b8>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        double kd_low = 7;
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	4b6b      	ldr	r3, [pc, #428]	; (80020a4 <_ZN3PID18updateCoefficientsEd+0x1d4>)
 8001ef6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

        // Коэффициенты для высоких скоростей (свыше 150 об/мин)
        double kp_high = 16;
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <_ZN3PID18updateCoefficientsEd+0x1d8>)
 8001f00:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        double ki_high = 0.1;
 8001f04:	a362      	add	r3, pc, #392	; (adr r3, 8002090 <_ZN3PID18updateCoefficientsEd+0x1c0>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        double kd_high = 6;
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	4b66      	ldr	r3, [pc, #408]	; (80020ac <_ZN3PID18updateCoefficientsEd+0x1dc>)
 8001f14:	e9c7 2306 	strd	r2, r3, [r7, #24]

        // Линейная интерполяция коэффициентов
        if (targetSpeed <= 50) {
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b64      	ldr	r3, [pc, #400]	; (80020b0 <_ZN3PID18updateCoefficientsEd+0x1e0>)
 8001f1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f22:	f7fe fded 	bl	8000b00 <__aeabi_dcmple>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d015      	beq.n	8001f58 <_ZN3PID18updateCoefficientsEd+0x88>
            // Если скорость <= 50, используем коэффициенты для низких скоростей
            kp = kp_low;
 8001f2c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001f30:	f7fe fe42 	bl	8000bb8 <__aeabi_d2f>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	601a      	str	r2, [r3, #0]
            ki = ki_low;
 8001f3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f3e:	f7fe fe3b 	bl	8000bb8 <__aeabi_d2f>
 8001f42:	4602      	mov	r2, r0
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	605a      	str	r2, [r3, #4]
            kd = kd_low;
 8001f48:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001f4c:	f7fe fe34 	bl	8000bb8 <__aeabi_d2f>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	609a      	str	r2, [r3, #8]
            double t = (targetSpeed - 50) / (150 - 50); // Нормализация скорости в диапазоне [0, 1]
            kp = kp_low + t * (kp_high - kp_low);
            ki = ki_low + t * (ki_high - ki_low);
            kd = kd_low + t * (kd_high - kd_low);
        }
    }
 8001f56:	e090      	b.n	800207a <_ZN3PID18updateCoefficientsEd+0x1aa>
        } else if (targetSpeed >= 150) {
 8001f58:	a34f      	add	r3, pc, #316	; (adr r3, 8002098 <_ZN3PID18updateCoefficientsEd+0x1c8>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f62:	f7fe fdd7 	bl	8000b14 <__aeabi_dcmpge>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d015      	beq.n	8001f98 <_ZN3PID18updateCoefficientsEd+0xc8>
            kp = kp_high;
 8001f6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f70:	f7fe fe22 	bl	8000bb8 <__aeabi_d2f>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	601a      	str	r2, [r3, #0]
            ki = ki_high;
 8001f7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f7e:	f7fe fe1b 	bl	8000bb8 <__aeabi_d2f>
 8001f82:	4602      	mov	r2, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
            kd = kd_high;
 8001f88:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f8c:	f7fe fe14 	bl	8000bb8 <__aeabi_d2f>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	609a      	str	r2, [r3, #8]
    }
 8001f96:	e070      	b.n	800207a <_ZN3PID18updateCoefficientsEd+0x1aa>
            double t = (targetSpeed - 50) / (150 - 50); // Нормализация скорости в диапазоне [0, 1]
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	4b44      	ldr	r3, [pc, #272]	; (80020b0 <_ZN3PID18updateCoefficientsEd+0x1e0>)
 8001f9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fa2:	f7fe f979 	bl	8000298 <__aeabi_dsub>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4610      	mov	r0, r2
 8001fac:	4619      	mov	r1, r3
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	4b40      	ldr	r3, [pc, #256]	; (80020b4 <_ZN3PID18updateCoefficientsEd+0x1e4>)
 8001fb4:	f7fe fc52 	bl	800085c <__aeabi_ddiv>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
            kp = kp_low + t * (kp_high - kp_low);
 8001fc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fc4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fc8:	f7fe f966 	bl	8000298 <__aeabi_dsub>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fd8:	f7fe fb16 	bl	8000608 <__aeabi_dmul>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fe8:	f7fe f958 	bl	800029c <__adddf3>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f7fe fde0 	bl	8000bb8 <__aeabi_d2f>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	601a      	str	r2, [r3, #0]
            ki = ki_low + t * (ki_high - ki_low);
 8001ffe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002002:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002006:	f7fe f947 	bl	8000298 <__aeabi_dsub>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002016:	f7fe faf7 	bl	8000608 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002026:	f7fe f939 	bl	800029c <__adddf3>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f7fe fdc1 	bl	8000bb8 <__aeabi_d2f>
 8002036:	4602      	mov	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	605a      	str	r2, [r3, #4]
            kd = kd_low + t * (kd_high - kd_low);
 800203c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002040:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002044:	f7fe f928 	bl	8000298 <__aeabi_dsub>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002054:	f7fe fad8 	bl	8000608 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002064:	f7fe f91a 	bl	800029c <__adddf3>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	f7fe fda2 	bl	8000bb8 <__aeabi_d2f>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	609a      	str	r2, [r3, #8]
    }
 800207a:	bf00      	nop
 800207c:	3748      	adds	r7, #72	; 0x48
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	f3af 8000 	nop.w
 8002088:	9999999a 	.word	0x9999999a
 800208c:	3fa99999 	.word	0x3fa99999
 8002090:	9999999a 	.word	0x9999999a
 8002094:	3fb99999 	.word	0x3fb99999
 8002098:	00000000 	.word	0x00000000
 800209c:	4062c000 	.word	0x4062c000
 80020a0:	40340000 	.word	0x40340000
 80020a4:	401c0000 	.word	0x401c0000
 80020a8:	40300000 	.word	0x40300000
 80020ac:	40180000 	.word	0x40180000
 80020b0:	40490000 	.word	0x40490000
 80020b4:	40590000 	.word	0x40590000

080020b8 <_Z9constrainlll>:
#include  <cmath>

#ifndef INC_MOTOR_H_
#define INC_MOTOR_H_

	int32_t constrain(int32_t value,int32_t num1,int32_t num2){
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
		if (value>num2) value = num2;
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	dd01      	ble.n	80020d0 <_Z9constrainlll+0x18>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	60fb      	str	r3, [r7, #12]
		if (value<num1) value = num1;
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	da01      	bge.n	80020dc <_Z9constrainlll+0x24>
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60fb      	str	r3, [r7, #12]
		return value;
 80020dc:	68fb      	ldr	r3, [r7, #12]
	}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <_Z10constrainffff>:

	float constrainf(float value,float num1,float num2){
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	ed87 0a03 	vstr	s0, [r7, #12]
 80020f4:	edc7 0a02 	vstr	s1, [r7, #8]
 80020f8:	ed87 1a01 	vstr	s2, [r7, #4]
		if (value>num2) value = num2;
 80020fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002100:	edd7 7a01 	vldr	s15, [r7, #4]
 8002104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	dd01      	ble.n	8002112 <_Z10constrainffff+0x28>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	60fb      	str	r3, [r7, #12]
		if (value<num1) value = num1;
 8002112:	ed97 7a03 	vldr	s14, [r7, #12]
 8002116:	edd7 7a02 	vldr	s15, [r7, #8]
 800211a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800211e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002122:	d501      	bpl.n	8002128 <_Z10constrainffff+0x3e>
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	60fb      	str	r3, [r7, #12]
		return value;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	ee07 3a90 	vmov	s15, r3
	}
 800212e:	eeb0 0a67 	vmov.f32	s0, s15
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <_ZN7BFilterD1Ev>:
class BFilter {
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4618      	mov	r0, r3
 8002148:	f001 fa7f 	bl	800364a <_ZNSt6vectorIfSaIfEED1Ev>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>:

class Motor{

public:

	Motor(TIM_HandleTypeDef* _encTim,TIM_HandleTypeDef* _ctrlTim, uint8_t _ctrlTimCh):
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	70fb      	strb	r3, [r7, #3]
		ctrlTim(_ctrlTim),ctrlTimCh(_ctrlTimCh),enc(_encTim),pid(20,0.05,7)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fbe0 	bl	8001930 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	330c      	adds	r3, #12
 8002174:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8002178:	eddf 0a1e 	vldr	s1, [pc, #120]	; 80021f4 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h+0x9c>
 800217c:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fe39 	bl	8001df8 <_ZN3PIDC1Efff>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f103 0420 	add.w	r4, r3, #32
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	eddf 0a19 	vldr	s1, [pc, #100]	; 80021f8 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h+0xa0>
 8002194:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fcb9 	bl	8001b10 <_ZN7BFilter15CalcSecondOrderEff>
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	4619      	mov	r1, r3
 80021a4:	4620      	mov	r0, r4
 80021a6:	f7ff fc01 	bl	80019ac <_ZN7BFilterC1ESt6vectorIfSaIfEE>
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 fa4b 	bl	800364a <_ZNSt6vectorIfSaIfEED1Ev>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	641a      	str	r2, [r3, #64]	; 0x40
	{
		__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_1, ZERO);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_2, ZERO);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2200      	movs	r2, #0
 80021d2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, ZERO);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2200      	movs	r2, #0
 80021dc:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, ZERO);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2200      	movs	r2, #0
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40

	};
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd90      	pop	{r4, r7, pc}
 80021f2:	bf00      	nop
 80021f4:	3d4ccccd 	.word	0x3d4ccccd
 80021f8:	447a0000 	.word	0x447a0000

080021fc <_ZN5Motor14setTargetSpeedEf>:
	}

	int16_t getEncoderValue(){
		return enc.getEncoderValue();
	}
	void setTargetSpeed(float speed){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	ed87 0a00 	vstr	s0, [r7]
		targetSpeed = speed;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	651a      	str	r2, [r3, #80]	; 0x50
		targetSpeed = constrainf(targetSpeed,-MAX_MOT_SPEED,MAX_MOT_SPEED);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002214:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8002238 <_ZN5Motor14setTargetSpeedEf+0x3c>
 8002218:	eddf 0a08 	vldr	s1, [pc, #32]	; 800223c <_ZN5Motor14setTargetSpeedEf+0x40>
 800221c:	eeb0 0a67 	vmov.f32	s0, s15
 8002220:	f7ff ff63 	bl	80020ea <_Z10constrainffff>
 8002224:	eef0 7a40 	vmov.f32	s15, s0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	42c80000 	.word	0x42c80000
 800223c:	c2c80000 	.word	0xc2c80000

08002240 <_ZN5Motor7handlerEv>:
	void handler(){
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
		calcCurSpeedMotor();
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f83d 	bl	80022c8 <_ZN5Motor17calcCurSpeedMotorEv>
		pid.updateCoefficients(targetSpeed);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f103 040c 	add.w	r4, r3, #12
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f97d 	bl	8000558 <__aeabi_f2d>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	ec43 2b10 	vmov	d0, r2, r3
 8002266:	4620      	mov	r0, r4
 8002268:	f7ff fe32 	bl	8001ed0 <_ZN3PID18updateCoefficientsEd>
		helpPWM = pid.calculate(targetSpeed, currentSpeed);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f103 020c 	add.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800227e:	eef0 0a47 	vmov.f32	s1, s14
 8002282:	eeb0 0a67 	vmov.f32	s0, s15
 8002286:	4610      	mov	r0, r2
 8002288:	f7ff fdd8 	bl	8001e3c <_ZN3PID9calculateEff>
 800228c:	eef0 7a40 	vmov.f32	s15, s0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		setMotorPWM(constrain((int32_t)helpPWM,-MAX_MOT_PWM,MAX_MOT_PWM));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800229c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80022a4:	4906      	ldr	r1, [pc, #24]	; (80022c0 <_ZN5Motor7handlerEv+0x80>)
 80022a6:	ee17 0a90 	vmov	r0, s15
 80022aa:	f7ff ff05 	bl	80020b8 <_Z9constrainlll>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4619      	mov	r1, r3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f84e 	bl	8002354 <_ZN5Motor11setMotorPWMEl>
	}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}
 80022c0:	ffffd8f0 	.word	0xffffd8f0
 80022c4:	00000000 	.word	0x00000000

080022c8 <_ZN5Motor17calcCurSpeedMotorEv>:

private:

	void calcCurSpeedMotor(){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
				enc.handler();
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fb3b 	bl	800194e <_ZN7Encoder7handlerEv>
				currentSpeed = (((float)enc.getEncoderValue())*60.0)/(ENC_MAX*FAST_CYCLE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fb4d 	bl	800197a <_ZN7Encoder15getEncoderValueEv>
 80022e0:	4603      	mov	r3, r0
 80022e2:	ee07 3a90 	vmov	s15, r3
 80022e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ea:	ee17 0a90 	vmov	r0, s15
 80022ee:	f7fe f933 	bl	8000558 <__aeabi_f2d>
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <_ZN5Motor17calcCurSpeedMotorEv+0x88>)
 80022f8:	f7fe f986 	bl	8000608 <__aeabi_dmul>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	a310      	add	r3, pc, #64	; (adr r3, 8002348 <_ZN5Motor17calcCurSpeedMotorEv+0x80>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe faa7 	bl	800085c <__aeabi_ddiv>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	f7fe fc4f 	bl	8000bb8 <__aeabi_d2f>
 800231a:	4602      	mov	r2, r0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	64da      	str	r2, [r3, #76]	; 0x4c
				currentSpeed = filt.calc(currentSpeed);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f103 0220 	add.w	r2, r3, #32
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800232c:	eeb0 0a67 	vmov.f32	s0, s15
 8002330:	4610      	mov	r0, r2
 8002332:	f7ff fb4d 	bl	80019d0 <_ZN7BFilter4calcEf>
 8002336:	eef0 7a40 	vmov.f32	s15, s0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	cccccccd 	.word	0xcccccccd
 800234c:	3ffccccc 	.word	0x3ffccccc
 8002350:	404e0000 	.word	0x404e0000

08002354 <_ZN5Motor11setMotorPWMEl>:
	void setMotorPWM(int32_t PWM){
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]


		if (ctrlTimCh == CHANNEL1||ctrlTimCh == CHANNEL2){
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	2b01      	cmp	r3, #1
 8002364:	d003      	beq.n	800236e <_ZN5Motor11setMotorPWMEl+0x1a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b02      	cmp	r3, #2
 800236c:	d11e      	bne.n	80023ac <_ZN5Motor11setMotorPWMEl+0x58>
			if (PWM>0){
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	dd0a      	ble.n	800238a <_ZN5Motor11setMotorPWMEl+0x36>
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_1, ZERO);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2200      	movs	r2, #0
 800237c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_2, PWM);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	639a      	str	r2, [r3, #56]	; 0x38
 8002388:	e010      	b.n	80023ac <_ZN5Motor11setMotorPWMEl+0x58>
			}

			else if (PWM<0){
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	da0d      	bge.n	80023ac <_ZN5Motor11setMotorPWMEl+0x58>
				PWM = abs(PWM);
 8002390:	6838      	ldr	r0, [r7, #0]
 8002392:	f7ff f951 	bl	8001638 <_ZSt3absl>
 8002396:	6038      	str	r0, [r7, #0]
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_2, ZERO);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2200      	movs	r2, #0
 80023a0:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_1, PWM);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}

		if (ctrlTimCh == CHANNEL3||ctrlTimCh == CHANNEL4){
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d003      	beq.n	80023bc <_ZN5Motor11setMotorPWMEl+0x68>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d11e      	bne.n	80023fa <_ZN5Motor11setMotorPWMEl+0xa6>
			if (PWM>0){
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	dd0a      	ble.n	80023d8 <_ZN5Motor11setMotorPWMEl+0x84>
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, ZERO);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2200      	movs	r2, #0
 80023ca:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, PWM);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
				PWM = abs(PWM);
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, ZERO);
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, PWM);
			}
		}
	}
 80023d6:	e010      	b.n	80023fa <_ZN5Motor11setMotorPWMEl+0xa6>
			else if (PWM<0){
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	da0d      	bge.n	80023fa <_ZN5Motor11setMotorPWMEl+0xa6>
				PWM = abs(PWM);
 80023de:	6838      	ldr	r0, [r7, #0]
 80023e0:	f7ff f92a 	bl	8001638 <_ZSt3absl>
 80023e4:	6038      	str	r0, [r7, #0]
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, ZERO);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2200      	movs	r2, #0
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, PWM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <_ZN5MotorD1Ev>:
class Motor{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3320      	adds	r3, #32
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fe94 	bl	800213c <_ZN7BFilterD1Ev>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <_ZN6TelegaC1Ev>:

class Telega{

public:

	Telega():
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
		leftMotor(ENC_LEFT_TIM,MOT_L_PWM_TIM,CHANNEL3),
		rightMotor(ENC_RIGHT_TIM,MOT_R_PWM_TIM,CHANNEL1)
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	2303      	movs	r3, #3
 800242c:	4a08      	ldr	r2, [pc, #32]	; (8002450 <_ZN6TelegaC1Ev+0x30>)
 800242e:	4909      	ldr	r1, [pc, #36]	; (8002454 <_ZN6TelegaC1Ev+0x34>)
 8002430:	f7ff fe92 	bl	8002158 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800243a:	2301      	movs	r3, #1
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <_ZN6TelegaC1Ev+0x30>)
 800243e:	4906      	ldr	r1, [pc, #24]	; (8002458 <_ZN6TelegaC1Ev+0x38>)
 8002440:	f7ff fe8a 	bl	8002158 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>
	{};
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200002e4 	.word	0x200002e4
 8002454:	2000029c 	.word	0x2000029c
 8002458:	2000032c 	.word	0x2000032c

0800245c <_ZN6Telega7handlerEv>:

	void handler(){
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
			leftMotor.handler();
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff feea 	bl	8002240 <_ZN5Motor7handlerEv>
			rightMotor.handler();
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3354      	adds	r3, #84	; 0x54
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fee5 	bl	8002240 <_ZN5Motor7handlerEv>
	}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <_ZN6Telega13setRobotSpeedEff>:
	void setRobotSpeed(float linSpeed, float angSpeed){
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	ed87 0a02 	vstr	s0, [r7, #8]
 800248a:	edc7 0a01 	vstr	s1, [r7, #4]
		setMotorSpeed(linSpeed-angSpeed,linSpeed+angSpeed);
 800248e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002492:	edd7 7a01 	vldr	s15, [r7, #4]
 8002496:	ee77 6a67 	vsub.f32	s13, s14, s15
 800249a:	ed97 7a02 	vldr	s14, [r7, #8]
 800249e:	edd7 7a01 	vldr	s15, [r7, #4]
 80024a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a6:	eef0 0a67 	vmov.f32	s1, s15
 80024aa:	eeb0 0a66 	vmov.f32	s0, s13
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f804 	bl	80024bc <_ZN6Telega13setMotorSpeedEff>
	}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_ZN6Telega13setMotorSpeedEff>:
	}


private:

	void setMotorSpeed(float lSpd, float rSpd){
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80024c8:	edc7 0a01 	vstr	s1, [r7, #4]
			leftMotor.setTargetSpeed(-lSpd);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80024d2:	eef1 7a67 	vneg.f32	s15, s15
 80024d6:	eeb0 0a67 	vmov.f32	s0, s15
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fe8e 	bl	80021fc <_ZN5Motor14setTargetSpeedEf>
			rightMotor.setTargetSpeed(rSpd);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3354      	adds	r3, #84	; 0x54
 80024e4:	ed97 0a01 	vldr	s0, [r7, #4]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fe87 	bl	80021fc <_ZN5Motor14setTargetSpeedEf>
	}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <_ZN10TanControl13getErrorAngleEPf>:
	        spd.ang = K_ANG * ang + spd.lin * sin(ang) / dist;
	    }
	    return spd;
	}

	int32_t getErrorAngle(float *distances){
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
		int32_t errorAngle = 1000;
 8002502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002506:	617b      	str	r3, [r7, #20]
		float minDistance = 20000.0f;
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <_ZN10TanControl13getErrorAngleEPf+0x78>)
 800250a:	613b      	str	r3, [r7, #16]
		for (int32_t i = 0; i < 360; i += 9) {
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002516:	da23      	bge.n	8002560 <_ZN10TanControl13getErrorAngleEPf+0x68>

			  if(distances[i]<minDistance&&distances[i]!=0){
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	4413      	add	r3, r2
 8002520:	edd3 7a00 	vldr	s15, [r3]
 8002524:	ed97 7a04 	vldr	s14, [r7, #16]
 8002528:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002530:	dd12      	ble.n	8002558 <_ZN10TanControl13getErrorAngleEPf+0x60>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	4413      	add	r3, r2
 800253a:	edd3 7a00 	vldr	s15, [r3]
 800253e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002546:	d007      	beq.n	8002558 <_ZN10TanControl13getErrorAngleEPf+0x60>
				  minDistance = distances[i];
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4413      	add	r3, r2
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	613b      	str	r3, [r7, #16]
				  errorAngle = i;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	617b      	str	r3, [r7, #20]
		for (int32_t i = 0; i < 360; i += 9) {
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3309      	adds	r3, #9
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	e7d7      	b.n	8002510 <_ZN10TanControl13getErrorAngleEPf+0x18>
			  }
		  }
		  return (int32_t)errorAngle;
 8002560:	697b      	ldr	r3, [r7, #20]
	}
 8002562:	4618      	mov	r0, r3
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	469c4000 	.word	0x469c4000

08002574 <_ZN10TanControl8getEnemyEPf>:

	bool getEnemy(float *distances){
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
		flagEnemy = false;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
		for (int32_t i = 0; i < 360; i ++) {
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800258e:	da20      	bge.n	80025d2 <_ZN10TanControl8getEnemyEPf+0x5e>
			if(distances[i]>MIN_RANGE_LID&&distances[i]<MAX_RANGE_LID) flagEnemy = true;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	4413      	add	r3, r2
 8002598:	edd3 7a00 	vldr	s15, [r3]
 800259c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80025e4 <_ZN10TanControl8getEnemyEPf+0x70>
 80025a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	dd0f      	ble.n	80025ca <_ZN10TanControl8getEnemyEPf+0x56>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	edd3 7a00 	vldr	s15, [r3]
 80025b6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80025e8 <_ZN10TanControl8getEnemyEPf+0x74>
 80025ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c2:	d502      	bpl.n	80025ca <_ZN10TanControl8getEnemyEPf+0x56>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
		for (int32_t i = 0; i < 360; i ++) {
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3301      	adds	r3, #1
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	e7da      	b.n	8002588 <_ZN10TanControl8getEnemyEPf+0x14>
		}

		return flagEnemy;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	781b      	ldrb	r3, [r3, #0]
	}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	43480000 	.word	0x43480000
 80025e8:	43520000 	.word	0x43520000

080025ec <_ZN10TanControl8limitAngEl>:
	int32_t limitAng(int32_t ang){
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
		int32_t inAng = ang;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
		while (inAng >= HALF_CIRCLE) {
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2bb3      	cmp	r3, #179	; 0xb3
 80025fe:	dd04      	ble.n	800260a <_ZN10TanControl8limitAngEl+0x1e>
			inAng -= 2 * HALF_CIRCLE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002606:	60fb      	str	r3, [r7, #12]
		while (inAng >= HALF_CIRCLE) {
 8002608:	e7f7      	b.n	80025fa <_ZN10TanControl8limitAngEl+0xe>
		}
		while (inAng <= -HALF_CIRCLE) {
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 8002610:	da04      	bge.n	800261c <_ZN10TanControl8limitAngEl+0x30>
			inAng += 2 * HALF_CIRCLE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002618:	60fb      	str	r3, [r7, #12]
		while (inAng <= -HALF_CIRCLE) {
 800261a:	e7f6      	b.n	800260a <_ZN10TanControl8limitAngEl+0x1e>
		}
		return inAng;
 800261c:	68fb      	ldr	r3, [r7, #12]
	}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4618      	mov	r0, r3
 8002636:	f001 f8ec 	bl	8003812 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <_ZN6TelegaD1Ev>:
class Telega{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3354      	adds	r3, #84	; 0x54
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fed6 	bl	8002402 <_ZN5MotorD1Ev>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fed2 	bl	8002402 <_ZN5MotorD1Ev>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4618      	mov	r0, r3
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_ZN10TanControlC1Ev>:
class TanControl{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <_ZN12ActionsQueueC1Ev>:

class ActionsQueue
{
public:
	
	ActionsQueue(){
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	f001 f8ab 	bl	80037ea <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3328      	adds	r3, #40	; 0x28
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe fc85 	bl	8000fa8 <_ZN7RPLidarC1Ev>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff febb 	bl	8002420 <_ZN6TelegaC1Ev>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ffd9 	bl	8002668 <_ZN10TanControlC1Ev>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8c3 2c3c 	str.w	r2, [r3, #3132]	; 0xc3c
	};
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <_ZN12ActionsQueue4initEv>:
	void init(){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
		lid.begin();
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3328      	adds	r3, #40	; 0x28
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fc93 	bl	8001008 <_ZN7RPLidar5beginEv>
		lid.startScan();
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3328      	adds	r3, #40	; 0x28
 80026e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fe fdb1 	bl	8001254 <_ZN7RPLidar9startScanEbm>
	}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_ZN12ActionsQueue4pushE7ACTIONS>:

	void push(ACTIONS action) {
 80026fa:	b590      	push	{r4, r7, lr}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	460b      	mov	r3, r1
 8002704:	70fb      	strb	r3, [r7, #3]
		rQueue.push(RobotInstruction(action));
 8002706:	687c      	ldr	r4, [r7, #4]
 8002708:	78fa      	ldrb	r2, [r7, #3]
 800270a:	f107 0308 	add.w	r3, r7, #8
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fa09 	bl	8002b28 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>
 8002716:	f107 0308 	add.w	r3, r7, #8
 800271a:	4619      	mov	r1, r3
 800271c:	4620      	mov	r0, r4
 800271e:	f001 f89d 	bl	800385c <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>
	};
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bd90      	pop	{r4, r7, pc}

0800272a <_ZN12ActionsQueue4pushE7ACTIONSf>:
	void push(ACTIONS action, float value) {
 800272a:	b590      	push	{r4, r7, lr}
 800272c:	b087      	sub	sp, #28
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	460b      	mov	r3, r1
 8002734:	ed87 0a01 	vstr	s0, [r7, #4]
 8002738:	72fb      	strb	r3, [r7, #11]
		rQueue.push(RobotInstruction(action, value));
 800273a:	68fc      	ldr	r4, [r7, #12]
 800273c:	7afa      	ldrb	r2, [r7, #11]
 800273e:	f107 0310 	add.w	r3, r7, #16
 8002742:	ed97 0a01 	vldr	s0, [r7, #4]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fa07 	bl	8002b5c <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONSf>
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	4619      	mov	r1, r3
 8002754:	4620      	mov	r0, r4
 8002756:	f001 f881 	bl	800385c <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>
	};
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd90      	pop	{r4, r7, pc}

08002762 <_ZN12ActionsQueue5clearEv>:

	int getSize() {
		return rQueue.size();
	}

	void clear() {
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
		while (!rQueue.empty()) {
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4618      	mov	r0, r3
 800276e:	f001 f894 	bl	800389a <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5emptyEv>
 8002772:	4603      	mov	r3, r0
 8002774:	f083 0301 	eor.w	r3, r3, #1
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d004      	beq.n	8002788 <_ZN12ActionsQueue5clearEv+0x26>
			rQueue.pop();
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4618      	mov	r0, r3
 8002782:	f001 f897 	bl	80038b4 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
		while (!rQueue.empty()) {
 8002786:	e7f0      	b.n	800276a <_ZN12ActionsQueue5clearEv+0x8>
		}
		delayInit = false;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38
	}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <_ZN12ActionsQueue7isClearEv>:
	bool isClear() {
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
		if (rQueue.size() == 0) {
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 f86c 	bl	8003880 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf0c      	ite	eq
 80027ae:	2301      	moveq	r3, #1
 80027b0:	2300      	movne	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <_ZN12ActionsQueue7isClearEv+0x24>
			return true;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e00f      	b.n	80027dc <_ZN12ActionsQueue7isClearEv+0x44>
		}
		else if (rQueue.front().robotAction == ACTIONS::IDLE) {
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4618      	mov	r0, r3
 80027c0:	f001 f884 	bl	80038cc <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 80027c4:	4603      	mov	r3, r0
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <_ZN12ActionsQueue7isClearEv+0x42>
			return true;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <_ZN12ActionsQueue7isClearEv+0x44>
		}
		else {
			return false;
 80027da:	2300      	movs	r3, #0
		};
	}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <_ZN12ActionsQueue7handlerEv>:

	void handler(){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
		telega.handler();
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fe32 	bl	800245c <_ZN6Telega7handlerEv>
	}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_ZN12ActionsQueue10checkEnemyEv>:

	void onReceive(uint8_t byte){
		lid.onReceive(byte);
	}

	int32_t checkEnemy(){
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
		ang  = tan.getErrorAngle(lid.getDist());
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f603 4424 	addw	r4, r3, #3108	; 0xc24
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3328      	adds	r3, #40	; 0x28
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fd6e 	bl	80012f4 <_ZN7RPLidar7getDistEv>
 8002818:	4603      	mov	r3, r0
 800281a:	4619      	mov	r1, r3
 800281c:	4620      	mov	r0, r4
 800281e:	f7ff fe6b 	bl	80024f8 <_ZN10TanControl13getErrorAngleEPf>
 8002822:	4602      	mov	r2, r0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8c3 2c3c 	str.w	r2, [r3, #3132]	; 0xc3c
		int32_t angLimit = 1000;
 800282a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282e:	60fb      	str	r3, [r7, #12]
		if (ang<361)angLimit = tan.limitAng(ang);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8d3 3c3c 	ldr.w	r3, [r3, #3132]	; 0xc3c
 8002836:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800283a:	dc0a      	bgt.n	8002852 <_ZN12ActionsQueue10checkEnemyEv+0x52>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f603 4224 	addw	r2, r3, #3108	; 0xc24
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8d3 3c3c 	ldr.w	r3, [r3, #3132]	; 0xc3c
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f7ff fece 	bl	80025ec <_ZN10TanControl8limitAngEl>
 8002850:	60f8      	str	r0, [r7, #12]
		return angLimit;
 8002852:	68fb      	ldr	r3, [r7, #12]
	}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	bd90      	pop	{r4, r7, pc}

0800285c <_ZN12ActionsQueue8getEnemyEv>:

	bool getEnemy(){
 800285c:	b590      	push	{r4, r7, lr}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
		return tan.getEnemy(lid.getDist());
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f603 4424 	addw	r4, r3, #3108	; 0xc24
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3328      	adds	r3, #40	; 0x28
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fd40 	bl	80012f4 <_ZN7RPLidar7getDistEv>
 8002874:	4603      	mov	r3, r0
 8002876:	4619      	mov	r1, r3
 8002878:	4620      	mov	r0, r4
 800287a:	f7ff fe7b 	bl	8002574 <_ZN10TanControl8getEnemyEPf>
 800287e:	4603      	mov	r3, r0
	}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}

08002888 <_ZN12ActionsQueue9fastCycleEv>:
	void fastCycle() {
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	ed2d 8b02 	vpush	{d8}
 800288e:	b089      	sub	sp, #36	; 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

		if(!IS_OK(lid.waitPoint())){
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3328      	adds	r3, #40	; 0x28
 8002898:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fddd 	bl	800145c <_ZN7RPLidar9waitPointEm>
 80028a2:	4603      	mov	r3, r0
 80028a4:	0fdb      	lsrs	r3, r3, #31
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <_ZN12ActionsQueue9fastCycleEv+0x34>
			lid.startScan(false, 500);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3328      	adds	r3, #40	; 0x28
 80028b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fccc 	bl	8001254 <_ZN7RPLidar9startScanEbm>
		}
		int32_t angLimit = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
		if (rQueue.empty()) {
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 ffe9 	bl	800389a <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5emptyEv>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00d      	beq.n	80028ea <_ZN12ActionsQueue9fastCycleEv+0x62>
			rQueue.push(RobotInstruction(IDLE));
 80028ce:	687c      	ldr	r4, [r7, #4]
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f926 	bl	8002b28 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	4619      	mov	r1, r3
 80028e2:	4620      	mov	r0, r4
 80028e4:	f000 ffba 	bl	800385c <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>
				break;
			default:
				break;
			}
		}
	};
 80028e8:	e109      	b.n	8002afe <_ZN12ActionsQueue9fastCycleEv+0x276>
		else if ((rQueue.size() > 1) && (rQueue.front().robotAction == IDLE)) {
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 ffc7 	bl	8003880 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d909      	bls.n	800290c <_ZN12ActionsQueue9fastCycleEv+0x84>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 ffe6 	bl	80038cc <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 8002900:	4603      	mov	r3, r0
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <_ZN12ActionsQueue9fastCycleEv+0x84>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <_ZN12ActionsQueue9fastCycleEv+0x86>
 800290c:	2300      	movs	r3, #0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d004      	beq.n	800291c <_ZN12ActionsQueue9fastCycleEv+0x94>
			rQueue.pop();
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 ffcd 	bl	80038b4 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
	};
 800291a:	e0f0      	b.n	8002afe <_ZN12ActionsQueue9fastCycleEv+0x276>
			RobotInstruction _curInstr = rQueue.front();
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4618      	mov	r0, r3
 8002920:	f000 ffd4 	bl	80038cc <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 8002924:	4602      	mov	r2, r0
 8002926:	f107 030c 	add.w	r3, r7, #12
 800292a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800292e:	e883 0003 	stmia.w	r3, {r0, r1}
			switch (_curInstr.robotAction)
 8002932:	7b3b      	ldrb	r3, [r7, #12]
 8002934:	2b08      	cmp	r3, #8
 8002936:	f200 80dd 	bhi.w	8002af4 <_ZN12ActionsQueue9fastCycleEv+0x26c>
 800293a:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <_ZN12ActionsQueue9fastCycleEv+0xb8>)
 800293c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002940:	08002af5 	.word	0x08002af5
 8002944:	08002965 	.word	0x08002965
 8002948:	08002983 	.word	0x08002983
 800294c:	080029a1 	.word	0x080029a1
 8002950:	080029bf 	.word	0x080029bf
 8002954:	080029fb 	.word	0x080029fb
 8002958:	08002a19 	.word	0x08002a19
 800295c:	08002a97 	.word	0x08002a97
 8002960:	080029dd 	.word	0x080029dd
				telega.setRobotSpeed(0,0);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 800296a:	eddf 0a68 	vldr	s1, [pc, #416]	; 8002b0c <_ZN12ActionsQueue9fastCycleEv+0x284>
 800296e:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8002b0c <_ZN12ActionsQueue9fastCycleEv+0x284>
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fd83 	bl	800247e <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4618      	mov	r0, r3
 800297c:	f000 ff9a 	bl	80038b4 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002980:	e0bd      	b.n	8002afe <_ZN12ActionsQueue9fastCycleEv+0x276>
				telega.setRobotSpeed(0,TURN_SPEED);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 8002988:	eddf 0a61 	vldr	s1, [pc, #388]	; 8002b10 <_ZN12ActionsQueue9fastCycleEv+0x288>
 800298c:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8002b0c <_ZN12ActionsQueue9fastCycleEv+0x284>
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fd74 	bl	800247e <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4618      	mov	r0, r3
 800299a:	f000 ff8b 	bl	80038b4 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 800299e:	e0ae      	b.n	8002afe <_ZN12ActionsQueue9fastCycleEv+0x276>
				telega.setRobotSpeed(0,-TURN_SPEED);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 80029a6:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8002b14 <_ZN12ActionsQueue9fastCycleEv+0x28c>
 80029aa:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8002b0c <_ZN12ActionsQueue9fastCycleEv+0x284>
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fd65 	bl	800247e <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 ff7c 	bl	80038b4 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 80029bc:	e09f      	b.n	8002afe <_ZN12ActionsQueue9fastCycleEv+0x276>
				telega.setRobotSpeed(MAX_MOT_SPEED*0.7,0);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 80029c4:	eddf 0a51 	vldr	s1, [pc, #324]	; 8002b0c <_ZN12ActionsQueue9fastCycleEv+0x284>
 80029c8:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8002b18 <_ZN12ActionsQueue9fastCycleEv+0x290>
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fd56 	bl	800247e <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 ff6d 	bl	80038b4 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 80029da:	e090      	b.n	8002afe <_ZN12ActionsQueue9fastCycleEv+0x276>
				telega.setRobotSpeed(MAX_MOT_SPEED,0);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 80029e2:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8002b0c <_ZN12ActionsQueue9fastCycleEv+0x284>
 80029e6:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8002b1c <_ZN12ActionsQueue9fastCycleEv+0x294>
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fd47 	bl	800247e <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 ff5e 	bl	80038b4 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 80029f8:	e081      	b.n	8002afe <_ZN12ActionsQueue9fastCycleEv+0x276>
				telega.setRobotSpeed(-MAX_MOT_SPEED*0.7, 0);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 8002a00:	eddf 0a42 	vldr	s1, [pc, #264]	; 8002b0c <_ZN12ActionsQueue9fastCycleEv+0x284>
 8002a04:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8002b20 <_ZN12ActionsQueue9fastCycleEv+0x298>
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fd38 	bl	800247e <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 ff4f 	bl	80038b4 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002a16:	e072      	b.n	8002afe <_ZN12ActionsQueue9fastCycleEv+0x276>
			        angLimit = checkEnemy(); // Ограничение угла [-180, 180]
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fef1 	bl	8002800 <_ZN12ActionsQueue10checkEnemyEv>
 8002a1e:	61f8      	str	r0, [r7, #28]
			        if(angLimit<360){
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002a26:	da67      	bge.n	8002af8 <_ZN12ActionsQueue9fastCycleEv+0x270>
						spd.lin = 0.0f;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
						spd.ang = TURN_SPEED*angLimit/fabs((float)angLimit); // Только угловое движение
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2232      	movs	r2, #50	; 0x32
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	ee07 3a90 	vmov	s15, r3
 8002a40:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a52:	f7fe fdff 	bl	8001654 <_ZSt4fabsf>
 8002a56:	eeb0 7a40 	vmov.f32	s14, s0
 8002a5a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8002a64:	edc3 7a00 	vstr	s15, [r3]
						telega.setRobotSpeed(spd.lin, -spd.ang); // Угловая скорость инвертирована
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f603 327c 	addw	r2, r3, #2940	; 0xb7c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8002a74:	ed93 7a00 	vldr	s14, [r3]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f603 4334 	addw	r3, r3, #3124	; 0xc34
 8002a7e:	edd3 7a00 	vldr	s15, [r3]
 8002a82:	eef1 7a67 	vneg.f32	s15, s15
 8002a86:	eef0 0a67 	vmov.f32	s1, s15
 8002a8a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a8e:	4610      	mov	r0, r2
 8002a90:	f7ff fcf5 	bl	800247e <_ZN6Telega13setRobotSpeedEff>
				break;
 8002a94:	e030      	b.n	8002af8 <_ZN12ActionsQueue9fastCycleEv+0x270>
				if (!delayInit) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3c38 	ldrb.w	r3, [r3, #3128]	; 0xc38
 8002a9c:	f083 0301 	eor.w	r3, r3, #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <_ZN12ActionsQueue9fastCycleEv+0x232>
					delayInit = true;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38
					delayBegin = HAL_GetTick();
 8002aae:	f002 fef7 	bl	80058a0 <HAL_GetTick>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <_ZN12ActionsQueue9fastCycleEv+0x29c>)
 8002ab6:	6013      	str	r3, [r2, #0]
				break;
 8002ab8:	e020      	b.n	8002afc <_ZN12ActionsQueue9fastCycleEv+0x274>
				else if (HAL_GetTick() - delayBegin >= (uint16_t)_curInstr.parametr) {
 8002aba:	f002 fef1 	bl	80058a0 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <_ZN12ActionsQueue9fastCycleEv+0x29c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ace:	ee17 2a90 	vmov	r2, s15
 8002ad2:	b292      	uxth	r2, r2
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	bf2c      	ite	cs
 8002ad8:	2301      	movcs	r3, #1
 8002ada:	2300      	movcc	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <_ZN12ActionsQueue9fastCycleEv+0x274>
					rQueue.pop();
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fee5 	bl	80038b4 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
					delayInit = false;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2c38 	strb.w	r2, [r3, #3128]	; 0xc38
				break;
 8002af2:	e003      	b.n	8002afc <_ZN12ActionsQueue9fastCycleEv+0x274>
				break;
 8002af4:	bf00      	nop
 8002af6:	e002      	b.n	8002afe <_ZN12ActionsQueue9fastCycleEv+0x276>
				break;
 8002af8:	bf00      	nop
 8002afa:	e000      	b.n	8002afe <_ZN12ActionsQueue9fastCycleEv+0x276>
				break;
 8002afc:	bf00      	nop
	};
 8002afe:	bf00      	nop
 8002b00:	3724      	adds	r7, #36	; 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	ecbd 8b02 	vpop	{d8}
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	00000000 	.word	0x00000000
 8002b10:	42480000 	.word	0x42480000
 8002b14:	c2480000 	.word	0xc2480000
 8002b18:	428c0000 	.word	0x428c0000
 8002b1c:	42c80000 	.word	0x42c80000
 8002b20:	c28c0000 	.word	0xc28c0000
 8002b24:	200001fc 	.word	0x200001fc

08002b28 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>:
		bool paramAvalible = false;
		bool pointAvalible = false;
		float parametr = 0;

		RobotInstruction() {};
		RobotInstruction(ACTIONS _action)
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
			: robotAction(_action) {};
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	705a      	strb	r2, [r3, #1]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	709a      	strb	r2, [r3, #2]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONSf>:

		RobotInstruction(ACTIONS _action, float _param)
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	460b      	mov	r3, r1
 8002b66:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b6a:	72fb      	strb	r3, [r7, #11]
			: robotAction(_action), paramAvalible(true), parametr(_param), pointAvalible(false) {};
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	7afa      	ldrb	r2, [r7, #11]
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	705a      	strb	r2, [r3, #1]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	709a      	strb	r2, [r3, #2]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <_ZN12ActionsQueueD1Ev>:
class ActionsQueue
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f603 337c 	addw	r3, r3, #2940	; 0xb7c
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fd4f 	bl	8002644 <_ZN6TelegaD1Ev>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3328      	adds	r3, #40	; 0x28
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fa20 	bl	8000ff0 <_ZN7RPLidarD1Ev>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fd39 	bl	800262a <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEED1Ev>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_ZN9AutoPilotC1Ev>:
#include <LineDetector.h>
#include <ActionsQueue.h>

class AutoPilot {
public:
	AutoPilot()
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
	{
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fd59 	bl	8002684 <_ZN12ActionsQueueC1Ev>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe fe19 	bl	8001810 <_ZN12LineDetectorC1Ev>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2c58 	strb.w	r2, [r3, #3160]	; 0xc58
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2c59 	strb.w	r2, [r3, #3161]	; 0xc59
	};
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_ZN9AutoPilot7handlerEv>:
		ENEMY_LOST,
		AVOID_LINE,
	};


	void handler() {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
		line.handler();
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fe24 	bl	800185c <_ZN12LineDetector7handlerEv>
		aQueue.handler();
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fde4 	bl	80027e4 <_ZN12ActionsQueue7handlerEv>
	}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <_ZN9AutoPilot9fastCycleEv>:
	void reset() {
		aQueue.clear();
		curState = AutoPilot::SEARCH;
	}

	void fastCycle(){
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
		//			if (line.isCrossed()) {
		//				curState = AVOID_LINE;
		//			}
		//		}

				ang = aQueue.checkEnemy();
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fde6 	bl	8002800 <_ZN12ActionsQueue10checkEnemyEv>
 8002c34:	4602      	mov	r2, r0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
				switch (curState)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3c59 	ldrb.w	r3, [r3, #3161]	; 0xc59
 8002c42:	3b01      	subs	r3, #1
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	f200 8105 	bhi.w	8002e54 <_ZN9AutoPilot9fastCycleEv+0x230>
 8002c4a:	a201      	add	r2, pc, #4	; (adr r2, 8002c50 <_ZN9AutoPilot9fastCycleEv+0x2c>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002c65 	.word	0x08002c65
 8002c54:	08002cc7 	.word	0x08002cc7
 8002c58:	08002d6d 	.word	0x08002d6d
 8002c5c:	08002e55 	.word	0x08002e55
 8002c60:	08002ddf 	.word	0x08002ddf
				{

				case AutoPilot::SEARCH:
					if (lastState != SEARCH) {
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3c58 	ldrb.w	r3, [r3, #3160]	; 0xc58
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d007      	beq.n	8002c7e <_ZN9AutoPilot9fastCycleEv+0x5a>
						lastState = SEARCH;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2c58 	strb.w	r2, [r3, #3160]	; 0xc58
						aQueue.clear();
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fd72 	bl	8002762 <_ZN12ActionsQueue5clearEv>
					}

					if (aQueue.isClear()) {
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fd89 	bl	8002798 <_ZN12ActionsQueue7isClearEv>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d017      	beq.n	8002cbc <_ZN9AutoPilot9fastCycleEv+0x98>
						aQueue.push(GO_FORWARD);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2104      	movs	r1, #4
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fd32 	bl	80026fa <_ZN12ActionsQueue4pushE7ACTIONS>
						aQueue.push(DELAY,500);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8002e64 <_ZN9AutoPilot9fastCycleEv+0x240>
 8002c9c:	2107      	movs	r1, #7
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fd43 	bl	800272a <_ZN12ActionsQueue4pushE7ACTIONSf>
						aQueue.push(STOP);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fd26 	bl	80026fa <_ZN12ActionsQueue4pushE7ACTIONS>
						aQueue.push(DELAY,3000);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8002e68 <_ZN9AutoPilot9fastCycleEv+0x244>
 8002cb4:	2107      	movs	r1, #7
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fd37 	bl	800272a <_ZN12ActionsQueue4pushE7ACTIONSf>
					}

					if (aQueue.getEnemy()) {
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fdcc 	bl	800285c <_ZN12ActionsQueue8getEnemyEv>
					//	curState = ATACK;
					}
					break;
 8002cc4:	e0c6      	b.n	8002e54 <_ZN9AutoPilot9fastCycleEv+0x230>

				case AutoPilot::ATACK:
					if (lastState != ATACK) {
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3c58 	ldrb.w	r3, [r3, #3160]	; 0xc58
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d007      	beq.n	8002ce0 <_ZN9AutoPilot9fastCycleEv+0xbc>
						lastState = ATACK;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 2c58 	strb.w	r2, [r3, #3160]	; 0xc58
						aQueue.clear();
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fd41 	bl	8002762 <_ZN12ActionsQueue5clearEv>
					}
					if(abs(ang)>30&&abs(ang)<361){
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe fca6 	bl	8001638 <_ZSt3absl>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b1e      	cmp	r3, #30
 8002cf0:	dd0b      	ble.n	8002d0a <_ZN9AutoPilot9fastCycleEv+0xe6>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe fc9d 	bl	8001638 <_ZSt3absl>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002d04:	dc01      	bgt.n	8002d0a <_ZN9AutoPilot9fastCycleEv+0xe6>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <_ZN9AutoPilot9fastCycleEv+0xe8>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00c      	beq.n	8002d2a <_ZN9AutoPilot9fastCycleEv+0x106>
						if (aQueue.isClear()){
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fd40 	bl	8002798 <_ZN12ActionsQueue7isClearEv>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d017      	beq.n	8002d4e <_ZN9AutoPilot9fastCycleEv+0x12a>
							aQueue.push(ACTIONS::SET_SPEED_TURN);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2106      	movs	r1, #6
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fce9 	bl	80026fa <_ZN12ActionsQueue4pushE7ACTIONS>
 8002d28:	e011      	b.n	8002d4e <_ZN9AutoPilot9fastCycleEv+0x12a>
						}
					}
					else if (abs(ang)<30){
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe fc81 	bl	8001638 <_ZSt3absl>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b1d      	cmp	r3, #29
 8002d3a:	bfd4      	ite	le
 8002d3c:	2301      	movle	r3, #1
 8002d3e:	2300      	movgt	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <_ZN9AutoPilot9fastCycleEv+0x12a>
						curState = FIN_ATACK;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	f883 2c59 	strb.w	r2, [r3, #3161]	; 0xc59
					}
					if (!aQueue.getEnemy()) {
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fd83 	bl	800285c <_ZN12ActionsQueue8getEnemyEv>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f083 0301 	eor.w	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d073      	beq.n	8002e4a <_ZN9AutoPilot9fastCycleEv+0x226>
						curState = SEARCH;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2c59 	strb.w	r2, [r3, #3161]	; 0xc59
					}

					break;
 8002d6a:	e06e      	b.n	8002e4a <_ZN9AutoPilot9fastCycleEv+0x226>
				case AutoPilot::FIN_ATACK:
					if (lastState != FIN_ATACK) {
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3c58 	ldrb.w	r3, [r3, #3160]	; 0xc58
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d007      	beq.n	8002d86 <_ZN9AutoPilot9fastCycleEv+0x162>
						lastState = FIN_ATACK;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2203      	movs	r2, #3
 8002d7a:	f883 2c58 	strb.w	r2, [r3, #3160]	; 0xc58
						aQueue.clear();
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fcee 	bl	8002762 <_ZN12ActionsQueue5clearEv>
					}
						aQueue.push(GO_FORWARD_MAX);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2108      	movs	r1, #8
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fcb5 	bl	80026fa <_ZN12ActionsQueue4pushE7ACTIONS>

						if (abs(ang)>30&&abs(ang)<361||!aQueue.getEnemy()){
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fc4e 	bl	8001638 <_ZSt3absl>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b1e      	cmp	r3, #30
 8002da0:	dd09      	ble.n	8002db6 <_ZN9AutoPilot9fastCycleEv+0x192>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe fc45 	bl	8001638 <_ZSt3absl>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002db4:	dd09      	ble.n	8002dca <_ZN9AutoPilot9fastCycleEv+0x1a6>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fd4f 	bl	800285c <_ZN12ActionsQueue8getEnemyEv>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f083 0301 	eor.w	r3, r3, #1
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <_ZN9AutoPilot9fastCycleEv+0x1aa>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <_ZN9AutoPilot9fastCycleEv+0x1ac>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d03c      	beq.n	8002e4e <_ZN9AutoPilot9fastCycleEv+0x22a>
							curState = SEARCH;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2c59 	strb.w	r2, [r3, #3161]	; 0xc59
						}

					break;
 8002ddc:	e037      	b.n	8002e4e <_ZN9AutoPilot9fastCycleEv+0x22a>
				case AutoPilot::AVOID_LINE:
					if (lastState != AVOID_LINE) {
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3c58 	ldrb.w	r3, [r3, #3160]	; 0xc58
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d007      	beq.n	8002df8 <_ZN9AutoPilot9fastCycleEv+0x1d4>
						lastState = AVOID_LINE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2205      	movs	r2, #5
 8002dec:	f883 2c58 	strb.w	r2, [r3, #3160]	; 0xc58
						aQueue.clear();
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fcb5 	bl	8002762 <_ZN12ActionsQueue5clearEv>
					}
						aQueue.push(ACTIONS::GO_BACKWARD);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2105      	movs	r1, #5
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fc7c 	bl	80026fa <_ZN12ActionsQueue4pushE7ACTIONS>
						aQueue.push(DELAY, 1000);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8002e6c <_ZN9AutoPilot9fastCycleEv+0x248>
 8002e08:	2107      	movs	r1, #7
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fc8d 	bl	800272a <_ZN12ActionsQueue4pushE7ACTIONSf>
						aQueue.push(ACTIONS::TURN_LEFT);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2102      	movs	r1, #2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fc70 	bl	80026fa <_ZN12ActionsQueue4pushE7ACTIONS>
						aQueue.push(DELAY, 500);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8002e64 <_ZN9AutoPilot9fastCycleEv+0x240>
 8002e20:	2107      	movs	r1, #7
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fc81 	bl	800272a <_ZN12ActionsQueue4pushE7ACTIONSf>
						aQueue.push(ACTIONS::GO_FORWARD);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2104      	movs	r1, #4
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fc64 	bl	80026fa <_ZN12ActionsQueue4pushE7ACTIONS>
					if (aQueue.isClear()) {
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fcaf 	bl	8002798 <_ZN12ActionsQueue7isClearEv>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <_ZN9AutoPilot9fastCycleEv+0x22e>
						curState = SEARCH;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2c59 	strb.w	r2, [r3, #3161]	; 0xc59
					}
					break;
 8002e48:	e003      	b.n	8002e52 <_ZN9AutoPilot9fastCycleEv+0x22e>
					break;
 8002e4a:	bf00      	nop
 8002e4c:	e002      	b.n	8002e54 <_ZN9AutoPilot9fastCycleEv+0x230>
					break;
 8002e4e:	bf00      	nop
 8002e50:	e000      	b.n	8002e54 <_ZN9AutoPilot9fastCycleEv+0x230>
					break;
 8002e52:	bf00      	nop
				}

		aQueue.fastCycle();
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fd16 	bl	8002888 <_ZN12ActionsQueue9fastCycleEv>
	}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	43fa0000 	.word	0x43fa0000
 8002e68:	453b8000 	.word	0x453b8000
 8002e6c:	447a0000 	.word	0x447a0000

08002e70 <_ZN9AutoPilot4initEv>:

	void init(){
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
		aQueue.init();
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fc28 	bl	80026d0 <_ZN12ActionsQueue4initEv>
		HAL_Delay(100);
 8002e80:	2064      	movs	r0, #100	; 0x64
 8002e82:	f002 fd19 	bl	80058b8 <HAL_Delay>
		line.init();
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe fcd8 	bl	8001842 <_ZN12LineDetector4initEv>
	}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

AutoPilot pilot;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) // Проверяем, что прерывание от TIM3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d102      	bne.n	8002eb4 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        // Действия при срабатывании прерывания
    	 pilot.handler();
 8002eae:	4804      	ldr	r0, [pc, #16]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002eb0:	f7ff fea6 	bl	8002c00 <_ZN9AutoPilot7handlerEv>

    }
}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40010000 	.word	0x40010000
 8002ec0:	20000478 	.word	0x20000478

08002ec4 <_Z4initv>:

void init(){
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
	  //питание для левого энкодера
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ece:	4818      	ldr	r0, [pc, #96]	; (8002f30 <_Z4initv+0x6c>)
 8002ed0:	f003 fcaa 	bl	8006828 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002eda:	4815      	ldr	r0, [pc, #84]	; (8002f30 <_Z4initv+0x6c>)
 8002edc:	f003 fca4 	bl	8006828 <HAL_GPIO_WritePin>

	  //питание для правого энкодера
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2110      	movs	r1, #16
 8002ee4:	4813      	ldr	r0, [pc, #76]	; (8002f34 <_Z4initv+0x70>)
 8002ee6:	f003 fc9f 	bl	8006828 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002eea:	2201      	movs	r2, #1
 8002eec:	2120      	movs	r1, #32
 8002eee:	4811      	ldr	r0, [pc, #68]	; (8002f34 <_Z4initv+0x70>)
 8002ef0:	f003 fc9a 	bl	8006828 <HAL_GPIO_WritePin>

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4810      	ldr	r0, [pc, #64]	; (8002f38 <_Z4initv+0x74>)
 8002ef8:	f006 fbfe 	bl	80096f8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002efc:	2104      	movs	r1, #4
 8002efe:	480e      	ldr	r0, [pc, #56]	; (8002f38 <_Z4initv+0x74>)
 8002f00:	f006 fbfa 	bl	80096f8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002f04:	2108      	movs	r1, #8
 8002f06:	480c      	ldr	r0, [pc, #48]	; (8002f38 <_Z4initv+0x74>)
 8002f08:	f006 fbf6 	bl	80096f8 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002f0c:	210c      	movs	r1, #12
 8002f0e:	480a      	ldr	r0, [pc, #40]	; (8002f38 <_Z4initv+0x74>)
 8002f10:	f006 fbf2 	bl	80096f8 <HAL_TIM_PWM_Start>

	  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8002f14:	2100      	movs	r1, #0
 8002f16:	4809      	ldr	r0, [pc, #36]	; (8002f3c <_Z4initv+0x78>)
 8002f18:	f006 fd44 	bl	80099a4 <HAL_TIM_Encoder_Start>

	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4808      	ldr	r0, [pc, #32]	; (8002f40 <_Z4initv+0x7c>)
 8002f20:	f006 fd40 	bl	80099a4 <HAL_TIM_Encoder_Start>

	  HAL_TIM_Base_Start_IT(&htim1);
 8002f24:	4807      	ldr	r0, [pc, #28]	; (8002f44 <_Z4initv+0x80>)
 8002f26:	f006 fb35 	bl	8009594 <HAL_TIM_Base_Start_IT>

}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40020000 	.word	0x40020000
 8002f34:	40020400 	.word	0x40020400
 8002f38:	200002e4 	.word	0x200002e4
 8002f3c:	2000029c 	.word	0x2000029c
 8002f40:	2000032c 	.word	0x2000032c
 8002f44:	20000254 	.word	0x20000254

08002f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f4c:	f002 fc42 	bl	80057d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f50:	f000 f822 	bl	8002f98 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f54:	f000 fad0 	bl	80034f8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002f58:	f000 faa6 	bl	80034a8 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8002f5c:	f000 fa76 	bl	800344c <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8002f60:	f000 f88c 	bl	800307c <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8002f64:	f000 f91e 	bl	80031a4 <_ZL12MX_TIM2_Initv>
  MX_TIM4_Init();
 8002f68:	f000 fa12 	bl	8003390 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 8002f6c:	f000 f978 	bl	8003260 <_ZL12MX_TIM3_Initv>
  MX_TIM1_Init();
 8002f70:	f000 f8b8 	bl	80030e4 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8002f74:	2064      	movs	r0, #100	; 0x64
 8002f76:	f002 fc9f 	bl	80058b8 <HAL_Delay>
  init();
 8002f7a:	f7ff ffa3 	bl	8002ec4 <_Z4initv>

  pilot.init();
 8002f7e:	4805      	ldr	r0, [pc, #20]	; (8002f94 <main+0x4c>)
 8002f80:	f7ff ff76 	bl	8002e70 <_ZN9AutoPilot4initEv>
  //RPLidar lid;
  //lid.begin();
  //lid.startScan();
  HAL_Delay(100);
 8002f84:	2064      	movs	r0, #100	; 0x64
 8002f86:	f002 fc97 	bl	80058b8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // if(IS_OK(lid.waitPoint())) ;
	pilot.fastCycle();
 8002f8a:	4802      	ldr	r0, [pc, #8]	; (8002f94 <main+0x4c>)
 8002f8c:	f7ff fe4a 	bl	8002c24 <_ZN9AutoPilot9fastCycleEv>
 8002f90:	e7fb      	b.n	8002f8a <main+0x42>
 8002f92:	bf00      	nop
 8002f94:	20000478 	.word	0x20000478

08002f98 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b094      	sub	sp, #80	; 0x50
 8002f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f9e:	f107 0320 	add.w	r3, r7, #32
 8002fa2:	2230      	movs	r2, #48	; 0x30
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f009 fc1e 	bl	800c7e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fac:	f107 030c 	add.w	r3, r7, #12
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <_Z18SystemClock_Configv+0xdc>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	4a2b      	ldr	r2, [pc, #172]	; (8003074 <_Z18SystemClock_Configv+0xdc>)
 8002fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fca:	6413      	str	r3, [r2, #64]	; 0x40
 8002fcc:	4b29      	ldr	r3, [pc, #164]	; (8003074 <_Z18SystemClock_Configv+0xdc>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fd8:	2300      	movs	r3, #0
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	4b26      	ldr	r3, [pc, #152]	; (8003078 <_Z18SystemClock_Configv+0xe0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a25      	ldr	r2, [pc, #148]	; (8003078 <_Z18SystemClock_Configv+0xe0>)
 8002fe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b23      	ldr	r3, [pc, #140]	; (8003078 <_Z18SystemClock_Configv+0xe0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ffe:	2302      	movs	r3, #2
 8003000:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003002:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003006:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003008:	230c      	movs	r3, #12
 800300a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800300c:	2360      	movs	r3, #96	; 0x60
 800300e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003010:	2302      	movs	r3, #2
 8003012:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003014:	2304      	movs	r3, #4
 8003016:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003018:	f107 0320 	add.w	r3, r7, #32
 800301c:	4618      	mov	r0, r3
 800301e:	f005 fe11 	bl	8008c44 <HAL_RCC_OscConfig>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8003032:	f000 faed 	bl	8003610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003036:	230f      	movs	r3, #15
 8003038:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800303a:	2302      	movs	r3, #2
 800303c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003046:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800304c:	f107 030c 	add.w	r3, r7, #12
 8003050:	2103      	movs	r1, #3
 8003052:	4618      	mov	r0, r3
 8003054:	f006 f86e 	bl	8009134 <HAL_RCC_ClockConfig>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8003068:	f000 fad2 	bl	8003610 <Error_Handler>
  }
}
 800306c:	bf00      	nop
 800306e:	3750      	adds	r7, #80	; 0x50
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40023800 	.word	0x40023800
 8003078:	40007000 	.word	0x40007000

0800307c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003080:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <_ZL12MX_I2C1_Initv+0x5c>)
 8003082:	4a16      	ldr	r2, [pc, #88]	; (80030dc <_ZL12MX_I2C1_Initv+0x60>)
 8003084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <_ZL12MX_I2C1_Initv+0x5c>)
 8003088:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <_ZL12MX_I2C1_Initv+0x64>)
 800308a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800308c:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <_ZL12MX_I2C1_Initv+0x5c>)
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003092:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <_ZL12MX_I2C1_Initv+0x5c>)
 8003094:	2200      	movs	r2, #0
 8003096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003098:	4b0f      	ldr	r3, [pc, #60]	; (80030d8 <_ZL12MX_I2C1_Initv+0x5c>)
 800309a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800309e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030a0:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80030a6:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030ac:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030b8:	4807      	ldr	r0, [pc, #28]	; (80030d8 <_ZL12MX_I2C1_Initv+0x5c>)
 80030ba:	f003 fbcf 	bl	800685c <HAL_I2C_Init>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80030ce:	f000 fa9f 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000200 	.word	0x20000200
 80030dc:	40005400 	.word	0x40005400
 80030e0:	000186a0 	.word	0x000186a0

080030e4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ea:	f107 0308 	add.w	r3, r7, #8
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f8:	463b      	mov	r3, r7
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003100:	4b26      	ldr	r3, [pc, #152]	; (800319c <_ZL12MX_TIM1_Initv+0xb8>)
 8003102:	4a27      	ldr	r2, [pc, #156]	; (80031a0 <_ZL12MX_TIM1_Initv+0xbc>)
 8003104:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8003106:	4b25      	ldr	r3, [pc, #148]	; (800319c <_ZL12MX_TIM1_Initv+0xb8>)
 8003108:	2263      	movs	r2, #99	; 0x63
 800310a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310c:	4b23      	ldr	r3, [pc, #140]	; (800319c <_ZL12MX_TIM1_Initv+0xb8>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <_ZL12MX_TIM1_Initv+0xb8>)
 8003114:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003118:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <_ZL12MX_TIM1_Initv+0xb8>)
 800311c:	2200      	movs	r2, #0
 800311e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003120:	4b1e      	ldr	r3, [pc, #120]	; (800319c <_ZL12MX_TIM1_Initv+0xb8>)
 8003122:	2200      	movs	r2, #0
 8003124:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003126:	4b1d      	ldr	r3, [pc, #116]	; (800319c <_ZL12MX_TIM1_Initv+0xb8>)
 8003128:	2200      	movs	r2, #0
 800312a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800312c:	481b      	ldr	r0, [pc, #108]	; (800319c <_ZL12MX_TIM1_Initv+0xb8>)
 800312e:	f006 f9e1 	bl	80094f4 <HAL_TIM_Base_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8003142:	f000 fa65 	bl	8003610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800314a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800314c:	f107 0308 	add.w	r3, r7, #8
 8003150:	4619      	mov	r1, r3
 8003152:	4812      	ldr	r0, [pc, #72]	; (800319c <_ZL12MX_TIM1_Initv+0xb8>)
 8003154:	f006 fe7e 	bl	8009e54 <HAL_TIM_ConfigClockSource>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8003168:	f000 fa52 	bl	8003610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800316c:	2300      	movs	r3, #0
 800316e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003170:	2300      	movs	r3, #0
 8003172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003174:	463b      	mov	r3, r7
 8003176:	4619      	mov	r1, r3
 8003178:	4808      	ldr	r0, [pc, #32]	; (800319c <_ZL12MX_TIM1_Initv+0xb8>)
 800317a:	f007 fa27 	bl	800a5cc <HAL_TIMEx_MasterConfigSynchronization>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf14      	ite	ne
 8003184:	2301      	movne	r3, #1
 8003186:	2300      	moveq	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 800318e:	f000 fa3f 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003192:	bf00      	nop
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000254 	.word	0x20000254
 80031a0:	40010000 	.word	0x40010000

080031a4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	; 0x30
 80031a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031aa:	f107 030c 	add.w	r3, r7, #12
 80031ae:	2224      	movs	r2, #36	; 0x24
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f009 fb18 	bl	800c7e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b8:	1d3b      	adds	r3, r7, #4
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031c0:	4b26      	ldr	r3, [pc, #152]	; (800325c <_ZL12MX_TIM2_Initv+0xb8>)
 80031c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80031c8:	4b24      	ldr	r3, [pc, #144]	; (800325c <_ZL12MX_TIM2_Initv+0xb8>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ce:	4b23      	ldr	r3, [pc, #140]	; (800325c <_ZL12MX_TIM2_Initv+0xb8>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80031d4:	4b21      	ldr	r3, [pc, #132]	; (800325c <_ZL12MX_TIM2_Initv+0xb8>)
 80031d6:	f04f 32ff 	mov.w	r2, #4294967295
 80031da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031dc:	4b1f      	ldr	r3, [pc, #124]	; (800325c <_ZL12MX_TIM2_Initv+0xb8>)
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e2:	4b1e      	ldr	r3, [pc, #120]	; (800325c <_ZL12MX_TIM2_Initv+0xb8>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80031e8:	2301      	movs	r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031f0:	2301      	movs	r3, #1
 80031f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80031fc:	2300      	movs	r3, #0
 80031fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003200:	2301      	movs	r3, #1
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003204:	2300      	movs	r3, #0
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800320c:	f107 030c 	add.w	r3, r7, #12
 8003210:	4619      	mov	r1, r3
 8003212:	4812      	ldr	r0, [pc, #72]	; (800325c <_ZL12MX_TIM2_Initv+0xb8>)
 8003214:	f006 fb20 	bl	8009858 <HAL_TIM_Encoder_Init>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf14      	ite	ne
 800321e:	2301      	movne	r3, #1
 8003220:	2300      	moveq	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8003228:	f000 f9f2 	bl	8003610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800322c:	2300      	movs	r3, #0
 800322e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	4619      	mov	r1, r3
 8003238:	4808      	ldr	r0, [pc, #32]	; (800325c <_ZL12MX_TIM2_Initv+0xb8>)
 800323a:	f007 f9c7 	bl	800a5cc <HAL_TIMEx_MasterConfigSynchronization>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 800324e:	f000 f9df 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003252:	bf00      	nop
 8003254:	3730      	adds	r7, #48	; 0x30
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	2000029c 	.word	0x2000029c

08003260 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	; 0x28
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003266:	f107 0320 	add.w	r3, r7, #32
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	60da      	str	r2, [r3, #12]
 800327c:	611a      	str	r2, [r3, #16]
 800327e:	615a      	str	r2, [r3, #20]
 8003280:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003282:	4b41      	ldr	r3, [pc, #260]	; (8003388 <_ZL12MX_TIM3_Initv+0x128>)
 8003284:	4a41      	ldr	r2, [pc, #260]	; (800338c <_ZL12MX_TIM3_Initv+0x12c>)
 8003286:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003288:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <_ZL12MX_TIM3_Initv+0x128>)
 800328a:	2200      	movs	r2, #0
 800328c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328e:	4b3e      	ldr	r3, [pc, #248]	; (8003388 <_ZL12MX_TIM3_Initv+0x128>)
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8003294:	4b3c      	ldr	r3, [pc, #240]	; (8003388 <_ZL12MX_TIM3_Initv+0x128>)
 8003296:	f242 720f 	movw	r2, #9999	; 0x270f
 800329a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800329c:	4b3a      	ldr	r3, [pc, #232]	; (8003388 <_ZL12MX_TIM3_Initv+0x128>)
 800329e:	2200      	movs	r2, #0
 80032a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a2:	4b39      	ldr	r3, [pc, #228]	; (8003388 <_ZL12MX_TIM3_Initv+0x128>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80032a8:	4837      	ldr	r0, [pc, #220]	; (8003388 <_ZL12MX_TIM3_Initv+0x128>)
 80032aa:	f006 f9d5 	bl	8009658 <HAL_TIM_PWM_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80032be:	f000 f9a7 	bl	8003610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032ca:	f107 0320 	add.w	r3, r7, #32
 80032ce:	4619      	mov	r1, r3
 80032d0:	482d      	ldr	r0, [pc, #180]	; (8003388 <_ZL12MX_TIM3_Initv+0x128>)
 80032d2:	f007 f97b 	bl	800a5cc <HAL_TIMEx_MasterConfigSynchronization>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf14      	ite	ne
 80032dc:	2301      	movne	r3, #1
 80032de:	2300      	moveq	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80032e6:	f000 f993 	bl	8003610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032ea:	2360      	movs	r3, #96	; 0x60
 80032ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	2200      	movs	r2, #0
 80032fe:	4619      	mov	r1, r3
 8003300:	4821      	ldr	r0, [pc, #132]	; (8003388 <_ZL12MX_TIM3_Initv+0x128>)
 8003302:	f006 fce5 	bl	8009cd0 <HAL_TIM_PWM_ConfigChannel>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf14      	ite	ne
 800330c:	2301      	movne	r3, #1
 800330e:	2300      	moveq	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8003316:	f000 f97b 	bl	8003610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800331a:	1d3b      	adds	r3, r7, #4
 800331c:	2204      	movs	r2, #4
 800331e:	4619      	mov	r1, r3
 8003320:	4819      	ldr	r0, [pc, #100]	; (8003388 <_ZL12MX_TIM3_Initv+0x128>)
 8003322:	f006 fcd5 	bl	8009cd0 <HAL_TIM_PWM_ConfigChannel>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8003336:	f000 f96b 	bl	8003610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800333a:	1d3b      	adds	r3, r7, #4
 800333c:	2208      	movs	r2, #8
 800333e:	4619      	mov	r1, r3
 8003340:	4811      	ldr	r0, [pc, #68]	; (8003388 <_ZL12MX_TIM3_Initv+0x128>)
 8003342:	f006 fcc5 	bl	8009cd0 <HAL_TIM_PWM_ConfigChannel>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf14      	ite	ne
 800334c:	2301      	movne	r3, #1
 800334e:	2300      	moveq	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 8003356:	f000 f95b 	bl	8003610 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	220c      	movs	r2, #12
 800335e:	4619      	mov	r1, r3
 8003360:	4809      	ldr	r0, [pc, #36]	; (8003388 <_ZL12MX_TIM3_Initv+0x128>)
 8003362:	f006 fcb5 	bl	8009cd0 <HAL_TIM_PWM_ConfigChannel>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf14      	ite	ne
 800336c:	2301      	movne	r3, #1
 800336e:	2300      	moveq	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 8003376:	f000 f94b 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800337a:	4803      	ldr	r0, [pc, #12]	; (8003388 <_ZL12MX_TIM3_Initv+0x128>)
 800337c:	f001 ff60 	bl	8005240 <HAL_TIM_MspPostInit>

}
 8003380:	bf00      	nop
 8003382:	3728      	adds	r7, #40	; 0x28
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	200002e4 	.word	0x200002e4
 800338c:	40000400 	.word	0x40000400

08003390 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08c      	sub	sp, #48	; 0x30
 8003394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003396:	f107 030c 	add.w	r3, r7, #12
 800339a:	2224      	movs	r2, #36	; 0x24
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f009 fa22 	bl	800c7e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <_ZL12MX_TIM4_Initv+0xb4>)
 80033ae:	4a26      	ldr	r2, [pc, #152]	; (8003448 <_ZL12MX_TIM4_Initv+0xb8>)
 80033b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80033b2:	4b24      	ldr	r3, [pc, #144]	; (8003444 <_ZL12MX_TIM4_Initv+0xb4>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b8:	4b22      	ldr	r3, [pc, #136]	; (8003444 <_ZL12MX_TIM4_Initv+0xb4>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80033be:	4b21      	ldr	r3, [pc, #132]	; (8003444 <_ZL12MX_TIM4_Initv+0xb4>)
 80033c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033c6:	4b1f      	ldr	r3, [pc, #124]	; (8003444 <_ZL12MX_TIM4_Initv+0xb4>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033cc:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <_ZL12MX_TIM4_Initv+0xb4>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80033d2:	2301      	movs	r3, #1
 80033d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033da:	2301      	movs	r3, #1
 80033dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033ea:	2301      	movs	r3, #1
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033ee:	2300      	movs	r3, #0
 80033f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80033f6:	f107 030c 	add.w	r3, r7, #12
 80033fa:	4619      	mov	r1, r3
 80033fc:	4811      	ldr	r0, [pc, #68]	; (8003444 <_ZL12MX_TIM4_Initv+0xb4>)
 80033fe:	f006 fa2b 	bl	8009858 <HAL_TIM_Encoder_Init>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf14      	ite	ne
 8003408:	2301      	movne	r3, #1
 800340a:	2300      	moveq	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8003412:	f000 f8fd 	bl	8003610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	4619      	mov	r1, r3
 8003422:	4808      	ldr	r0, [pc, #32]	; (8003444 <_ZL12MX_TIM4_Initv+0xb4>)
 8003424:	f007 f8d2 	bl	800a5cc <HAL_TIMEx_MasterConfigSynchronization>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	bf14      	ite	ne
 800342e:	2301      	movne	r3, #1
 8003430:	2300      	moveq	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8003438:	f000 f8ea 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800343c:	bf00      	nop
 800343e:	3730      	adds	r7, #48	; 0x30
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	2000032c 	.word	0x2000032c
 8003448:	40000800 	.word	0x40000800

0800344c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003450:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003452:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8003454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003456:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800345c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800345e:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003460:	2200      	movs	r2, #0
 8003462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003464:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003466:	2200      	movs	r2, #0
 8003468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800346c:	2200      	movs	r2, #0
 800346e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003472:	220c      	movs	r2, #12
 8003474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003476:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800347c:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800347e:	2200      	movs	r2, #0
 8003480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003482:	4807      	ldr	r0, [pc, #28]	; (80034a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003484:	f007 f924 	bl	800a6d0 <HAL_UART_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	bf14      	ite	ne
 800348e:	2301      	movne	r3, #1
 8003490:	2300      	moveq	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8003498:	f000 f8ba 	bl	8003610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800349c:	bf00      	nop
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000374 	.word	0x20000374
 80034a4:	40004400 	.word	0x40004400

080034a8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <_ZL11MX_DMA_Initv+0x4c>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4a0f      	ldr	r2, [pc, #60]	; (80034f4 <_ZL11MX_DMA_Initv+0x4c>)
 80034b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <_ZL11MX_DMA_Initv+0x4c>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c6:	607b      	str	r3, [r7, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80034ca:	2200      	movs	r2, #0
 80034cc:	2100      	movs	r1, #0
 80034ce:	2010      	movs	r0, #16
 80034d0:	f002 fb15 	bl	8005afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80034d4:	2010      	movs	r0, #16
 80034d6:	f002 fb2e 	bl	8005b36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80034da:	2200      	movs	r2, #0
 80034dc:	2100      	movs	r1, #0
 80034de:	2011      	movs	r0, #17
 80034e0:	f002 fb0d 	bl	8005afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80034e4:	2011      	movs	r0, #17
 80034e6:	f002 fb26 	bl	8005b36 <HAL_NVIC_EnableIRQ>

}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800

080034f8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	; 0x28
 80034fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <_ZL12MX_GPIO_Initv+0x108>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a3a      	ldr	r2, [pc, #232]	; (8003600 <_ZL12MX_GPIO_Initv+0x108>)
 8003518:	f043 0304 	orr.w	r3, r3, #4
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	4b38      	ldr	r3, [pc, #224]	; (8003600 <_ZL12MX_GPIO_Initv+0x108>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	4b34      	ldr	r3, [pc, #208]	; (8003600 <_ZL12MX_GPIO_Initv+0x108>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	4a33      	ldr	r2, [pc, #204]	; (8003600 <_ZL12MX_GPIO_Initv+0x108>)
 8003534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003538:	6313      	str	r3, [r2, #48]	; 0x30
 800353a:	4b31      	ldr	r3, [pc, #196]	; (8003600 <_ZL12MX_GPIO_Initv+0x108>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <_ZL12MX_GPIO_Initv+0x108>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	4a2c      	ldr	r2, [pc, #176]	; (8003600 <_ZL12MX_GPIO_Initv+0x108>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6313      	str	r3, [r2, #48]	; 0x30
 8003556:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <_ZL12MX_GPIO_Initv+0x108>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	60bb      	str	r3, [r7, #8]
 8003560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	4b26      	ldr	r3, [pc, #152]	; (8003600 <_ZL12MX_GPIO_Initv+0x108>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a25      	ldr	r2, [pc, #148]	; (8003600 <_ZL12MX_GPIO_Initv+0x108>)
 800356c:	f043 0302 	orr.w	r3, r3, #2
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b23      	ldr	r3, [pc, #140]	; (8003600 <_ZL12MX_GPIO_Initv+0x108>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800357e:	2200      	movs	r2, #0
 8003580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003584:	481f      	ldr	r0, [pc, #124]	; (8003604 <_ZL12MX_GPIO_Initv+0x10c>)
 8003586:	f003 f94f 	bl	8006828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800358a:	2200      	movs	r2, #0
 800358c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003590:	481d      	ldr	r0, [pc, #116]	; (8003608 <_ZL12MX_GPIO_Initv+0x110>)
 8003592:	f003 f949 	bl	8006828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003596:	2200      	movs	r2, #0
 8003598:	2130      	movs	r1, #48	; 0x30
 800359a:	481c      	ldr	r0, [pc, #112]	; (800360c <_ZL12MX_GPIO_Initv+0x114>)
 800359c:	f003 f944 	bl	8006828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80035a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a6:	2301      	movs	r3, #1
 80035a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ae:	2300      	movs	r3, #0
 80035b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b2:	f107 0314 	add.w	r3, r7, #20
 80035b6:	4619      	mov	r1, r3
 80035b8:	4812      	ldr	r0, [pc, #72]	; (8003604 <_ZL12MX_GPIO_Initv+0x10c>)
 80035ba:	f002 fecd 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80035be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80035c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035c4:	2301      	movs	r3, #1
 80035c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035cc:	2300      	movs	r3, #0
 80035ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d0:	f107 0314 	add.w	r3, r7, #20
 80035d4:	4619      	mov	r1, r3
 80035d6:	480c      	ldr	r0, [pc, #48]	; (8003608 <_ZL12MX_GPIO_Initv+0x110>)
 80035d8:	f002 febe 	bl	8006358 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80035dc:	2330      	movs	r3, #48	; 0x30
 80035de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e0:	2301      	movs	r3, #1
 80035e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e8:	2300      	movs	r3, #0
 80035ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	4619      	mov	r1, r3
 80035f2:	4806      	ldr	r0, [pc, #24]	; (800360c <_ZL12MX_GPIO_Initv+0x114>)
 80035f4:	f002 feb0 	bl	8006358 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80035f8:	bf00      	nop
 80035fa:	3728      	adds	r7, #40	; 0x28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40023800 	.word	0x40023800
 8003604:	40020800 	.word	0x40020800
 8003608:	40020000 	.word	0x40020000
 800360c:	40020400 	.word	0x40020400

08003610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003614:	b672      	cpsid	i
}
 8003616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003618:	e7fe      	b.n	8003618 <Error_Handler+0x8>

0800361a <_ZNSaIfEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f95f 	bl	80038e6 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8003632:	b580      	push	{r7, lr}
 8003634:	b082      	sub	sp, #8
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f95e 	bl	80038fc <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800364a:	b5b0      	push	{r4, r5, r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681c      	ldr	r4, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4618      	mov	r0, r3
 800365e:	f000 f995 	bl	800398c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003662:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003664:	461a      	mov	r2, r3
 8003666:	4629      	mov	r1, r5
 8003668:	4620      	mov	r0, r4
 800366a:	f000 f99a 	bl	80039a2 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f805 	bl	8003680 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bdb0      	pop	{r4, r5, r7, pc}

08003680 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8003698:	461a      	mov	r2, r3
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f99d 	bl	80039da <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe f976 	bl	8001994 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 80036b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80036bc:	687c      	ldr	r4, [r7, #4]
 80036be:	6838      	ldr	r0, [r7, #0]
 80036c0:	f000 f99e 	bl	8003a00 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80036c4:	4605      	mov	r5, r0
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 f9b7 	bl	8003a3c <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80036ce:	4602      	mov	r2, r0
 80036d0:	f107 030c 	add.w	r3, r7, #12
 80036d4:	4611      	mov	r1, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f9a2 	bl	8003a20 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 80036dc:	f107 030c 	add.w	r3, r7, #12
 80036e0:	461a      	mov	r2, r3
 80036e2:	4629      	mov	r1, r5
 80036e4:	4620      	mov	r0, r4
 80036e6:	f000 f93d 	bl	8003964 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 80036ea:	f107 030c 	add.w	r3, r7, #12
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff ff9f 	bl	8003632 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80036f4:	6838      	ldr	r0, [r7, #0]
 80036f6:	f000 f9ac 	bl	8003a52 <_ZNKSt6vectorIfSaIfEE5beginEv>
 80036fa:	4605      	mov	r5, r0
 80036fc:	6838      	ldr	r0, [r7, #0]
 80036fe:	f000 f9b8 	bl	8003a72 <_ZNKSt6vectorIfSaIfEE3endEv>
 8003702:	4606      	mov	r6, r0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4618      	mov	r0, r3
 800370c:	f000 f93e 	bl	800398c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003710:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8003712:	4622      	mov	r2, r4
 8003714:	4631      	mov	r1, r6
 8003716:	4628      	mov	r0, r5
 8003718:	f000 f9bc 	bl	8003a94 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 800371c:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	605a      	str	r2, [r3, #4]
      }
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800372c <_ZNSt6vectorIfSaIfEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
      }
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>:
      vector(initializer_list<value_type> __l,
 800374c:	b5b0      	push	{r4, r5, r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	1d38      	adds	r0, r7, #4
 8003756:	e880 0006 	stmia.w	r0, {r1, r2}
 800375a:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6839      	ldr	r1, [r7, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 f9a8 	bl	8003ab6 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f9b3 	bl	8003ad4 <_ZNKSt16initializer_listIfE5beginEv>
 800376e:	4604      	mov	r4, r0
 8003770:	1d3b      	adds	r3, r7, #4
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f9ba 	bl	8003aec <_ZNKSt16initializer_listIfE3endEv>
 8003778:	4602      	mov	r2, r0
 800377a:	462b      	mov	r3, r5
 800377c:	4621      	mov	r1, r4
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f9c6 	bl	8003b10 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>
      }
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bdb0      	pop	{r4, r5, r7, pc}

0800378e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800378e:	b5b0      	push	{r4, r5, r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	ed87 0a01 	vstr	s0, [r7, #4]
 8003798:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fc fedc 	bl	8000558 <__aeabi_f2d>
 80037a0:	4604      	mov	r4, r0
 80037a2:	460d      	mov	r5, r1
 80037a4:	6838      	ldr	r0, [r7, #0]
 80037a6:	f7fc fec5 	bl	8000534 <__aeabi_i2d>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	ec43 2b11 	vmov	d1, r2, r3
 80037b2:	ec45 4b10 	vmov	d0, r4, r5
 80037b6:	f008 f893 	bl	800b8e0 <pow>
 80037ba:	eeb0 7a40 	vmov.f32	s14, s0
 80037be:	eef0 7a60 	vmov.f32	s15, s1
    }
 80037c2:	eeb0 0a47 	vmov.f32	s0, s14
 80037c6:	eef0 0a67 	vmov.f32	s1, s15
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bdb0      	pop	{r4, r5, r7, pc}

080037d0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f9dd 	bl	8003b9a <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
	: c() { }
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4618      	mov	r0, r3
 80037f6:	2328      	movs	r3, #40	; 0x28
 80037f8:	461a      	mov	r2, r3
 80037fa:	2100      	movs	r1, #0
 80037fc:	f008 fff4 	bl	800c7e8 <memset>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff ffe4 	bl	80037d0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8003812:	b580      	push	{r7, lr}
 8003814:	b08a      	sub	sp, #40	; 0x28
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 800381a:	f107 0308 	add.w	r3, r7, #8
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4618      	mov	r0, r3
 8003822:	f000 f9ed 	bl	8003c00 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>
 8003826:	f107 0318 	add.w	r3, r7, #24
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 f9f6 	bl	8003c1e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE3endEv>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fa01 	bl	8003c3c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 800383a:	4603      	mov	r3, r0
 800383c:	f107 0218 	add.w	r2, r7, #24
 8003840:	f107 0108 	add.w	r1, r7, #8
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fa20 	bl	8003c8a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4618      	mov	r0, r3
 800384e:	f000 f9b5 	bl	8003bbc <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4618      	mov	r0, r3
 8003856:	3728      	adds	r7, #40	; 0x28
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>:
      push(const value_type& __x)
      { c.push_back(__x); }

#if __cplusplus >= 201103L
      void
      push(value_type&& __x)
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8003866:	687c      	ldr	r4, [r7, #4]
 8003868:	6838      	ldr	r0, [r7, #0]
 800386a:	f000 fa1b 	bl	8003ca4 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>
 800386e:	4603      	mov	r3, r0
 8003870:	4619      	mov	r1, r3
 8003872:	4620      	mov	r0, r4
 8003874:	f000 fa21 	bl	8003cba <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9push_backEOS1_>
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bd90      	pop	{r4, r7, pc}

08003880 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>:
      size() const
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fa26 	bl	8003cdc <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>
 8003890:	4603      	mov	r3, r0
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5emptyEv>:
      empty() const
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fa2b 	bl	8003d00 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5emptyEv>
 80038aa:	4603      	mov	r3, r0
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fa30 	bl	8003d24 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv>
      }
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>:
      front()
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	return c.front();
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fa48 	bl	8003d6c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5frontEv>
 80038dc:	4603      	mov	r3, r0
      }
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800391e:	f107 030c 	add.w	r3, r7, #12
 8003922:	6839      	ldr	r1, [r7, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f000 f84a 	bl	80039be <_ZNSaIfEC1ERKS_>
 800392a:	f107 030c 	add.w	r3, r7, #12
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fa30 	bl	8003d94 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8003934:	4602      	mov	r2, r0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4293      	cmp	r3, r2
 800393a:	bf8c      	ite	hi
 800393c:	2301      	movhi	r3, #1
 800393e:	2300      	movls	r3, #0
 8003940:	b2dc      	uxtb	r4, r3
 8003942:	f107 030c 	add.w	r3, r7, #12
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fe73 	bl	8003632 <_ZNSaIfED1Ev>
 800394c:	2c00      	cmp	r4, #0
 800394e:	d002      	beq.n	8003956 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8003950:	4803      	ldr	r0, [pc, #12]	; (8003960 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x4c>)
 8003952:	f007 ffb7 	bl	800b8c4 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8003956:	687b      	ldr	r3, [r7, #4]
      }
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	bd90      	pop	{r4, r7, pc}
 8003960:	0800f200 	.word	0x0800f200

08003964 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fa27 	bl	8003dc8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fa35 	bl	8003dec <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fa36 	bl	8003e22 <_ZSt8_DestroyIPfEvT_S1_>
    }
 80039b6:	bf00      	nop
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fa36 	bl	8003e3c <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
	if (__p)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fa2e 	bl	8003e54 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	109b      	asrs	r3, r3, #2
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6839      	ldr	r1, [r7, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fa1f 	bl	8003e72 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	f107 030c 	add.w	r3, r7, #12
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fa12 	bl	8003e8c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	1d1a      	adds	r2, r3, #4
 8003a7e:	f107 030c 	add.w	r3, r7, #12
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fa01 	bl	8003e8c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fa00 	bl	8003eac <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003aac:	4603      	mov	r3, r0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6839      	ldr	r1, [r7, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 f97f 	bl	8003dc8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8003aec:	b590      	push	{r4, r7, lr}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ffed 	bl	8003ad4 <_ZNKSt16initializer_listIfE5beginEv>
 8003afa:	4604      	mov	r4, r0
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f9e7 	bl	8003ed0 <_ZNKSt16initializer_listIfE4sizeEv>
 8003b02:	4603      	mov	r3, r0
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4423      	add	r3, r4
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd90      	pop	{r4, r7, pc}

08003b10 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	68b8      	ldr	r0, [r7, #8]
 8003b22:	f000 f9e1 	bl	8003ee8 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8003b26:	4603      	mov	r3, r0
 8003b28:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8003b2a:	68fc      	ldr	r4, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff ff2c 	bl	800398c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4619      	mov	r1, r3
 8003b38:	6978      	ldr	r0, [r7, #20]
 8003b3a:	f7ff feeb 	bl	8003914 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4619      	mov	r1, r3
 8003b42:	4620      	mov	r0, r4
 8003b44:	f000 f9e4 	bl	8003f10 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	441a      	add	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff ff12 	bl	800398c <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003b68:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	68b8      	ldr	r0, [r7, #8]
 8003b70:	f000 f9e2 	bl	8003f38 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
 8003b74:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	605a      	str	r2, [r3, #4]
	}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd90      	pop	{r4, r7, pc}

08003b82 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f9f5 	bl	8003f7a <_ZNSaIN12ActionsQueue16RobotInstructionEED1Ev>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>:
      _Deque_base()
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b082      	sub	sp, #8
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 f9d8 	bl	8003f5a <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8003baa:	2100      	movs	r1, #0
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f9f0 	bl	8003f92 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_initialize_mapEj>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d010      	beq.n	8003bee <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fa3d 	bl	8004058 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	461a      	mov	r2, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fa4f 	bl	800408c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ffc6 	bl	8003b82 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implD1Ev>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f81e 	bl	8003c52 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	3318      	adds	r3, #24
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f80f 	bl	8003c52 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	60da      	str	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8003c8a:	b480      	push	{r7}
 8003c8c:	b08d      	sub	sp, #52	; 0x34
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8003c98:	bf00      	nop
 8003c9a:	3734      	adds	r7, #52	; 0x34
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8003cc4:	6838      	ldr	r0, [r7, #0]
 8003cc6:	f7ff ffed 	bl	8003ca4 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4619      	mov	r1, r3
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f9f8 	bl	80040c4 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8003cd4:	bf00      	nop
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f103 0218 	add.w	r2, r3, #24
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3308      	adds	r3, #8
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	f000 fa12 	bl	800411a <_ZStmiRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f103 0218 	add.w	r2, r3, #24
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3308      	adds	r3, #8
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f000 fa24 	bl	8004162 <_ZSteqRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	3b08      	subs	r3, #8
	if (this->_M_impl._M_start._M_cur
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d011      	beq.n	8003d5e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ff7d 	bl	8003c3c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8003d42:	4602      	mov	r2, r0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f000 fa1d 	bl	800418a <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f103 0208 	add.w	r2, r3, #8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
      }
 8003d5c:	e002      	b.n	8003d64 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fa20 	bl	80041a4 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_pop_front_auxEv>
      }
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
	return *begin();
 8003d74:	f107 0308 	add.w	r3, r7, #8
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff ff40 	bl	8003c00 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>
 8003d80:	f107 0308 	add.w	r3, r7, #8
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fa35 	bl	80041f4 <_ZNKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EdeEv>
 8003d8a:	4603      	mov	r3, r0
      }
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8003d9c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8003da0:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa32 	bl	800420c <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8003da8:	4603      	mov	r3, r0
 8003daa:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003dac:	f107 0208 	add.w	r2, r7, #8
 8003db0:	f107 030c 	add.w	r3, r7, #12
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fa34 	bl	8004224 <_ZSt3minIjERKT_S2_S2_>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	681b      	ldr	r3, [r3, #0]
      }
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8003dd2:	6839      	ldr	r1, [r7, #0]
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff fdf2 	bl	80039be <_ZNSaIfEC1ERKS_>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fa35 	bl	800424c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8003df6:	6839      	ldr	r1, [r7, #0]
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f889 	bl	8003f10 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	441a      	add	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	609a      	str	r2, [r3, #8]
      }
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8003e2c:	6839      	ldr	r1, [r7, #0]
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa20 	bl	8004274 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fa10 	bl	800428a <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8003e7c:	6839      	ldr	r1, [r7, #0]
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff fd9d 	bl	80039be <_ZNSaIfEC1ERKS_>
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f9f2 	bl	80042aa <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8003ec6:	4603      	mov	r3, r0
    }
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8003ee8:	b5b0      	push	{r4, r5, r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8003ef2:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8003ef4:	1d3b      	adds	r3, r7, #4
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f9e7 	bl	80042ca <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8003efc:	462a      	mov	r2, r5
 8003efe:	6839      	ldr	r1, [r7, #0]
 8003f00:	4620      	mov	r0, r4
 8003f02:	f000 f9ed 	bl	80042e0 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8003f06:	4603      	mov	r3, r0
    }
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bdb0      	pop	{r4, r5, r7, pc}

08003f10 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d006      	beq.n	8003f2e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6839      	ldr	r1, [r7, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 f9eb 	bl	8004300 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	e000      	b.n	8003f30 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8003f2e:	2300      	movs	r3, #0
      }
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f9e7 	bl	800431e <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>
 8003f50:	4603      	mov	r3, r0
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f9ed 	bl	8004342 <_ZNSaIN12ActionsQueue16RobotInstructionEEC1Ev>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f9f5 	bl	800435a <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <_ZNSaIN12ActionsQueue16RobotInstructionEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fa02 	bl	800438c <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEED1Ev>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003f92:	b590      	push	{r4, r7, lr}
 8003f94:	b089      	sub	sp, #36	; 0x24
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003f9c:	2008      	movs	r0, #8
 8003f9e:	f7fd fcb2 	bl	8001906 <_ZSt16__deque_buf_sizej>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003faa:	3301      	adds	r3, #1
 8003fac:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003fae:	2308      	movs	r3, #8
 8003fb0:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	f107 0210 	add.w	r2, r7, #16
 8003fbc:	f107 030c 	add.w	r3, r7, #12
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f9ed 	bl	80043a2 <_ZSt3maxIjERKT_S2_S2_>
 8003fc8:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f9f7 	bl	80043ca <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6859      	ldr	r1, [r3, #4]
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	1acb      	subs	r3, r1, r3
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003ff2:	4413      	add	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	69b9      	ldr	r1, [r7, #24]
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f9fd 	bl	8004404 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3308      	adds	r3, #8
 800400e:	69b9      	ldr	r1, [r7, #24]
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fa11 	bl	8004438 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f103 0218 	add.w	r2, r3, #24
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	3b04      	subs	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f000 fa08 	bl	8004438 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8004034:	2008      	movs	r0, #8
 8004036:	f7fd fc66 	bl	8001906 <_ZSt16__deque_buf_sizej>
 800403a:	4602      	mov	r2, r0
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004042:	fb01 f202 	mul.w	r2, r1, r2
 8004046:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	619a      	str	r2, [r3, #24]
    }
 8004050:	bf00      	nop
 8004052:	3724      	adds	r7, #36	; 0x24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd90      	pop	{r4, r7, pc}

08004058 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	429a      	cmp	r2, r3
 800406e:	d209      	bcs.n	8004084 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f9f7 	bl	800446a <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	3304      	adds	r3, #4
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	e7f1      	b.n	8004068 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8004084:	bf00      	nop
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8004098:	f107 0314 	add.w	r3, r7, #20
 800409c:	68f9      	ldr	r1, [r7, #12]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 f9f6 	bl	8004490 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80040a4:	f107 0314 	add.w	r3, r7, #20
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fa0c 	bl	80044ca <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80040b2:	f107 0314 	add.w	r3, r7, #20
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 f9fb 	bl	80044b2 <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>
      }
 80040bc:	bf00      	nop
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 80040c4:	b5b0      	push	{r4, r5, r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	3b08      	subs	r3, #8
	if (this->_M_impl._M_finish._M_cur
 80040d8:	429a      	cmp	r2, r3
 80040da:	d012      	beq.n	8004102 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 80040dc:	687c      	ldr	r4, [r7, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699d      	ldr	r5, [r3, #24]
 80040e2:	6838      	ldr	r0, [r7, #0]
 80040e4:	f000 fa00 	bl	80044e8 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 80040e8:	4603      	mov	r3, r0
 80040ea:	461a      	mov	r2, r3
 80040ec:	4629      	mov	r1, r5
 80040ee:	4620      	mov	r0, r4
 80040f0:	f000 fa05 	bl	80044fe <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f103 0208 	add.w	r2, r3, #8
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8004100:	e007      	b.n	8004112 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8004102:	6838      	ldr	r0, [r7, #0]
 8004104:	f000 f9f0 	bl	80044e8 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004108:	4603      	mov	r3, r0
 800410a:	4619      	mov	r1, r3
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fa09 	bl	8004524 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>
      }
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bdb0      	pop	{r4, r5, r7, pc}

0800411a <_ZStmiRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8004124:	f000 fa42 	bl	80045ac <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>
 8004128:	4603      	mov	r3, r0
 800412a:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	109b      	asrs	r3, r3, #2
 8004138:	3b01      	subs	r3, #1
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6811      	ldr	r1, [r2, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6852      	ldr	r2, [r2, #4]
 8004146:	1a8a      	subs	r2, r1, r2
 8004148:	10d2      	asrs	r2, r2, #3
 800414a:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	6891      	ldr	r1, [r2, #8]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	1a8a      	subs	r2, r1, r2
 8004156:	10d2      	asrs	r2, r2, #3
 8004158:	4413      	add	r3, r2
      }
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <_ZSteqRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8004194:	6839      	ldr	r1, [r7, #0]
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa10 	bl	80045bc <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE7destroyIS2_EEvPT_>
	}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fd44 	bl	8003c3c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 80041b4:	4602      	mov	r2, r0
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	4619      	mov	r1, r3
 80041bc:	4610      	mov	r0, r2
 80041be:	f7ff ffe4 	bl	800418a <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4619      	mov	r1, r3
 80041ca:	4610      	mov	r0, r2
 80041cc:	f000 f94d 	bl	800446a <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f103 0208 	add.w	r2, r3, #8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	3304      	adds	r3, #4
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f000 f92a 	bl	8004438 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	609a      	str	r2, [r3, #8]
    }
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <_ZNKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f9dc 	bl	80045d2 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 800421a:	4603      	mov	r3, r0
      }
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d201      	bcs.n	800423e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	e000      	b.n	8004240 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800423e:	687b      	ldr	r3, [r7, #4]
    }
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	605a      	str	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
	{ }
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4618      	mov	r0, r3
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4619      	mov	r1, r3
 800429c:	68b8      	ldr	r0, [r7, #8]
 800429e:	f007 fafb 	bl	800b898 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f995 	bl	80045ea <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 80042c0:	4603      	mov	r3, r0
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80042d2:	bf00      	nop
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	109b      	asrs	r3, r3, #2
    }
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800430a:	2200      	movs	r2, #0
 800430c:	6839      	ldr	r1, [r7, #0]
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f983 	bl	800461a <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8004314:	4603      	mov	r3, r0
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800431e:	b580      	push	{r7, lr}
 8004320:	b086      	sub	sp, #24
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800432a:	2301      	movs	r3, #1
 800432c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68b9      	ldr	r1, [r7, #8]
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f98f 	bl	8004656 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>
 8004338:	4603      	mov	r3, r0
    }
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <_ZNSaIN12ActionsQueue16RobotInstructionEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f993 	bl	8004676 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEEC1Ev>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3308      	adds	r3, #8
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f98a 	bl	800468c <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3318      	adds	r3, #24
 800437c:	4618      	mov	r0, r3
 800437e:	f000 f985 	bl	800468c <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>
	{ }
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4618      	mov	r0, r3
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d201      	bcs.n	80043bc <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	e000      	b.n	80043be <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80043bc:	687b      	ldr	r3, [r7, #4]
    }
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80043ca:	b590      	push	{r4, r7, lr}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80043d4:	f107 030c 	add.w	r3, r7, #12
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f858 	bl	8004490 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80043e0:	f107 030c 	add.w	r3, r7, #12
 80043e4:	6839      	ldr	r1, [r7, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f967 	bl	80046ba <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE8allocateERS3_j>
 80043ec:	4604      	mov	r4, r0
 80043ee:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80043f0:	f107 030c 	add.w	r3, r7, #12
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 f85c 	bl	80044b2 <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80043fa:	4623      	mov	r3, r4
      }
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	bd90      	pop	{r4, r7, pc}

08004404 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	429a      	cmp	r2, r3
 800441a:	d209      	bcs.n	8004430 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f95b 	bl	80046d8 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>
 8004422:	4602      	mov	r2, r0
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	3304      	adds	r3, #4
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e7f1      	b.n	8004414 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8004430:	bf00      	nop
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685c      	ldr	r4, [r3, #4]
 8004454:	f000 f8aa 	bl	80045ac <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>
 8004458:	4603      	mov	r3, r0
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	18e2      	adds	r2, r4, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	609a      	str	r2, [r3, #8]
      }
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bd90      	pop	{r4, r7, pc}

0800446a <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 800446a:	b590      	push	{r4, r7, lr}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8004474:	687c      	ldr	r4, [r7, #4]
 8004476:	2008      	movs	r0, #8
 8004478:	f7fd fa45 	bl	8001906 <_ZSt16__deque_buf_sizej>
 800447c:	4603      	mov	r3, r0
 800447e:	461a      	mov	r2, r3
 8004480:	6839      	ldr	r1, [r7, #0]
 8004482:	4620      	mov	r0, r4
 8004484:	f000 f93a 	bl	80046fc <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE10deallocateERS2_PS1_j>
      }
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	bd90      	pop	{r4, r7, pc}

08004490 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800449a:	6838      	ldr	r0, [r7, #0]
 800449c:	f000 f93d 	bl	800471a <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 80044a0:	4603      	mov	r3, r0
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f943 	bl	8004730 <_ZNSaIPN12ActionsQueue16RobotInstructionEEC1IS0_EERKSaIT_E>
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f945 	bl	800474a <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEED1Ev>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f940 	bl	8004760 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE10deallocateEPS3_j>
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff ffec 	bl	80044e8 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004510:	4603      	mov	r3, r0
 8004512:	461a      	mov	r2, r3
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f932 	bl	8004780 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8004524:	b5b0      	push	{r4, r5, r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff fbd4 	bl	8003cdc <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>
 8004534:	4604      	mov	r4, r0
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f93b 	bl	80047b2 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE8max_sizeEv>
 800453c:	4603      	mov	r3, r0
 800453e:	429c      	cmp	r4, r3
 8004540:	bf0c      	ite	eq
 8004542:	2301      	moveq	r3, #1
 8004544:	2300      	movne	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 800454c:	4816      	ldr	r0, [pc, #88]	; (80045a8 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x84>)
 800454e:	f007 f9b9 	bl	800b8c4 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8004552:	2101      	movs	r1, #1
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f93d 	bl	80047d4 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	1d1c      	adds	r4, r3, #4
 8004562:	4610      	mov	r0, r2
 8004564:	f000 f8b8 	bl	80046d8 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>
 8004568:	4603      	mov	r3, r0
 800456a:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 800456c:	687c      	ldr	r4, [r7, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699d      	ldr	r5, [r3, #24]
 8004572:	6838      	ldr	r0, [r7, #0]
 8004574:	f7ff ffb8 	bl	80044e8 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004578:	4603      	mov	r3, r0
 800457a:	461a      	mov	r2, r3
 800457c:	4629      	mov	r1, r5
 800457e:	4620      	mov	r0, r4
 8004580:	f7ff ffbd 	bl	80044fe <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f103 0218 	add.w	r2, r3, #24
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	3304      	adds	r3, #4
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f7ff ff50 	bl	8004438 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	619a      	str	r2, [r3, #24]
      }
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bdb0      	pop	{r4, r5, r7, pc}
 80045a8:	0800f234 	.word	0x0800f234

080045ac <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80045b0:	2008      	movs	r0, #8
 80045b2:	f7fd f9a8 	bl	8001906 <_ZSt16__deque_buf_sizej>
 80045b6:	4603      	mov	r3, r0
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}

080045bc <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE7destroyIS2_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f915 	bl	800480a <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 80045e0:	4603      	mov	r3, r0
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80045ea:	b590      	push	{r4, r7, lr}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 f913 	bl	8004822 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 80045fc:	4604      	mov	r4, r0
 80045fe:	68b8      	ldr	r0, [r7, #8]
 8004600:	f000 f90f 	bl	8004822 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8004604:	4603      	mov	r3, r0
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4619      	mov	r1, r3
 800460a:	4620      	mov	r0, r4
 800460c:	f000 f914 	bl	8004838 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8004610:	4603      	mov	r3, r0
    }
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	bd90      	pop	{r4, r7, pc}

0800461a <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f8ef 	bl	800480a <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 800462c:	4602      	mov	r2, r0
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4293      	cmp	r3, r2
 8004632:	bf8c      	ite	hi
 8004634:	2301      	movhi	r3, #1
 8004636:	2300      	movls	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800463e:	f007 f93e 	bl	800b8be <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4618      	mov	r0, r3
 8004648:	f007 f928 	bl	800b89c <_Znwj>
 800464c:	4603      	mov	r3, r0
      }
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f909 	bl	800487e <_ZSt4copyIPKfPfET0_T_S4_S3_>
 800466c:	4603      	mov	r3, r0
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	605a      	str	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	609a      	str	r2, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	60da      	str	r2, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4618      	mov	r0, r3
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80046c4:	2200      	movs	r2, #0
 80046c6:	6839      	ldr	r1, [r7, #0]
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f8f0 	bl	80048ae <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv>
 80046ce:	4603      	mov	r3, r0
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80046d8:	b590      	push	{r4, r7, lr}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80046e0:	687c      	ldr	r4, [r7, #4]
 80046e2:	2008      	movs	r0, #8
 80046e4:	f7fd f90f 	bl	8001906 <_ZSt16__deque_buf_sizej>
 80046e8:	4603      	mov	r3, r0
 80046ea:	4619      	mov	r1, r3
 80046ec:	4620      	mov	r0, r4
 80046ee:	f000 f8fc 	bl	80048ea <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8allocateERS2_j>
 80046f2:	4603      	mov	r3, r0
      }
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd90      	pop	{r4, r7, pc}

080046fc <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f8fb 	bl	8004908 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE10deallocateEPS2_j>
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <_ZNSaIPN12ActionsQueue16RobotInstructionEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8f4 	bl	8004928 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEEC1Ev>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4619      	mov	r1, r3
 8004772:	68b8      	ldr	r0, [r7, #8]
 8004774:	f007 f890 	bl	800b898 <_ZdlPvj>
      }
 8004778:	bf00      	nop
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004780:	b590      	push	{r4, r7, lr}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff feab 	bl	80044e8 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004792:	4604      	mov	r4, r0
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4619      	mov	r1, r3
 8004798:	2008      	movs	r0, #8
 800479a:	f7fd f8a8 	bl	80018ee <_ZnwjPv>
 800479e:	4603      	mov	r3, r0
 80047a0:	4622      	mov	r2, r4
 80047a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80047aa:	bf00      	nop
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd90      	pop	{r4, r7, pc}

080047b2 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff ffac 	bl	800471a <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 80047c2:	4603      	mov	r3, r0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 f8ba 	bl	800493e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE11_S_max_sizeERKS2_>
 80047ca:	4603      	mov	r3, r0
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	6809      	ldr	r1, [r1, #0]
 80047ee:	1a41      	subs	r1, r0, r1
 80047f0:	1089      	asrs	r1, r1, #2
 80047f2:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d904      	bls.n	8004802 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80047f8:	2200      	movs	r2, #0
 80047fa:	6839      	ldr	r1, [r7, #0]
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f8b8 	bl	8004972 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb>
      }
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004812:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
    { return __it; }
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004838:	b5b0      	push	{r4, r5, r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f92e 	bl	8004aa6 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800484a:	4604      	mov	r4, r0
 800484c:	68b8      	ldr	r0, [r7, #8]
 800484e:	f000 f92a 	bl	8004aa6 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004852:	4605      	mov	r5, r0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f933 	bl	8004ac2 <_ZSt12__niter_baseIPfET_S1_>
 800485c:	4603      	mov	r3, r0
 800485e:	461a      	mov	r2, r3
 8004860:	4629      	mov	r1, r5
 8004862:	4620      	mov	r0, r4
 8004864:	f000 f938 	bl	8004ad8 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 8004868:	4602      	mov	r2, r0
 800486a:	1d3b      	adds	r3, r7, #4
 800486c:	4611      	mov	r1, r2
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f942 	bl	8004af8 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8004874:	4603      	mov	r3, r0
    }
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bdb0      	pop	{r4, r5, r7, pc}

0800487e <_ZSt4copyIPKfPfET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800487e:	b590      	push	{r4, r7, lr}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f940 	bl	8004b10 <_ZSt12__miter_baseIPKfET_S2_>
 8004890:	4604      	mov	r4, r0
 8004892:	68b8      	ldr	r0, [r7, #8]
 8004894:	f000 f93c 	bl	8004b10 <_ZSt12__miter_baseIPKfET_S2_>
 8004898:	4603      	mov	r3, r0
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	4619      	mov	r1, r3
 800489e:	4620      	mov	r0, r4
 80048a0:	f000 f941 	bl	8004b26 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 80048a4:	4603      	mov	r3, r0
    }
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd90      	pop	{r4, r7, pc}

080048ae <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	60f8      	str	r0, [r7, #12]
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f956 	bl	8004b6c <_ZNK9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 80048c0:	4602      	mov	r2, r0
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4293      	cmp	r3, r2
 80048c6:	bf8c      	ite	hi
 80048c8:	2301      	movhi	r3, #1
 80048ca:	2300      	movls	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80048d2:	f006 fff4 	bl	800b8be <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4618      	mov	r0, r3
 80048dc:	f006 ffde 	bl	800b89c <_Znwj>
 80048e0:	4603      	mov	r3, r0
      }
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80048f4:	2200      	movs	r2, #0
 80048f6:	6839      	ldr	r1, [r7, #0]
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f943 	bl	8004b84 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv>
 80048fe:	4603      	mov	r3, r0
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4619      	mov	r1, r3
 800491a:	68b8      	ldr	r0, [r7, #8]
 800491c:	f006 ffbc 	bl	800b898 <_ZdlPvj>
      }
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8004946:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800494a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f937 	bl	8004bc0 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8max_sizeERKS2_>
 8004952:	4603      	mov	r3, r0
 8004954:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004956:	f107 0208 	add.w	r2, r7, #8
 800495a:	f107 030c 	add.w	r3, r7, #12
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fc5f 	bl	8004224 <_ZSt3minIjERKT_S2_S2_>
 8004966:	4603      	mov	r3, r0
 8004968:	681b      	ldr	r3, [r3, #0]
      }
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8004972:	b590      	push	{r4, r7, lr}
 8004974:	b08b      	sub	sp, #44	; 0x2c
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	4613      	mov	r3, r2
 800497e:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	109b      	asrs	r3, r3, #2
 800498c:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800498e:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	6a3a      	ldr	r2, [r7, #32]
 8004994:	4413      	add	r3, r2
 8004996:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d92d      	bls.n	8004a00 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	1acb      	subs	r3, r1, r3
 80049b0:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80049b2:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	e000      	b.n	80049c2 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x50>
 80049c0:	2300      	movs	r3, #0
 80049c2:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80049c4:	4413      	add	r3, r2
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d209      	bcs.n	80049e6 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80049da:	3304      	adds	r3, #4
 80049dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049de:	4619      	mov	r1, r3
 80049e0:	f000 f8fa 	bl	8004bd8 <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
 80049e4:	e048      	b.n	8004a78 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80049ee:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80049f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f6:	4413      	add	r3, r2
 80049f8:	461a      	mov	r2, r3
 80049fa:	f000 f905 	bl	8004c08 <_ZSt13copy_backwardIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
 80049fe:	e03b      	b.n	8004a78 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3304      	adds	r3, #4
 8004a08:	f107 0208 	add.w	r2, r7, #8
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fcc7 	bl	80043a2 <_ZSt3maxIjERKT_S2_S2_>
 8004a14:	4603      	mov	r3, r0
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	69b9      	ldr	r1, [r7, #24]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fcd1 	bl	80043ca <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>
 8004a28:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	085b      	lsrs	r3, r3, #1
 8004a32:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0xce>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	e000      	b.n	8004a42 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 8004a40:	2300      	movs	r3, #0
 8004a42:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4413      	add	r3, r2
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8004a52:	3304      	adds	r3, #4
 8004a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a56:	4619      	mov	r1, r3
 8004a58:	f000 f8be 	bl	8004bd8 <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6819      	ldr	r1, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f7ff fb10 	bl	800408c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fcda 	bl	8004438 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f103 0018 	add.w	r0, r3, #24
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a90:	3b01      	subs	r3, #1
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a96:	4413      	add	r3, r2
 8004a98:	4619      	mov	r1, r3
 8004a9a:	f7ff fccd 	bl	8004438 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
    }
 8004a9e:	bf00      	nop
 8004aa0:	372c      	adds	r7, #44	; 0x2c
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd90      	pop	{r4, r7, pc}

08004aa6 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8004aae:	1d3b      	adds	r3, r7, #4
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 f8c1 	bl	8004c38 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f8b0 	bl	8004c4e <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8004aee:	4603      	mov	r3, r0
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
    { return __res; }
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <_ZSt12__miter_baseIPKfET_S2_>:
    __miter_base(_Iterator __it)
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004b26:	b5b0      	push	{r4, r5, r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f89b 	bl	8004c6e <_ZSt12__niter_baseIPKfET_S2_>
 8004b38:	4604      	mov	r4, r0
 8004b3a:	68b8      	ldr	r0, [r7, #8]
 8004b3c:	f000 f897 	bl	8004c6e <_ZSt12__niter_baseIPKfET_S2_>
 8004b40:	4605      	mov	r5, r0
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ffbc 	bl	8004ac2 <_ZSt12__niter_baseIPfET_S1_>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4629      	mov	r1, r5
 8004b50:	4620      	mov	r0, r4
 8004b52:	f7ff ffc1 	bl	8004ad8 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 8004b56:	4602      	mov	r2, r0
 8004b58:	1d3b      	adds	r3, r7, #4
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff ffcb 	bl	8004af8 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8004b62:	4603      	mov	r3, r0
    }
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bdb0      	pop	{r4, r5, r7, pc}

08004b6c <_ZNK9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004b74:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f877 	bl	8004c84 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 8004b96:	4602      	mov	r2, r0
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	bf8c      	ite	hi
 8004b9e:	2301      	movhi	r3, #1
 8004ba0:	2300      	movls	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004ba8:	f006 fe89 	bl	800b8be <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f006 fe73 	bl	800b89c <_Znwj>
 8004bb6:	4603      	mov	r3, r0
      }
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f867 	bl	8004c9c <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8max_sizeEv>
 8004bce:	4603      	mov	r3, r0
      }
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f865 	bl	8004cb4 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004bea:	4604      	mov	r4, r0
 8004bec:	68b8      	ldr	r0, [r7, #8]
 8004bee:	f000 f861 	bl	8004cb4 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f000 f866 	bl	8004cca <_ZSt13__copy_move_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004bfe:	4603      	mov	r3, r0
    }
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd90      	pop	{r4, r7, pc}

08004c08 <_ZSt13copy_backwardIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f84d 	bl	8004cb4 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	68b8      	ldr	r0, [r7, #8]
 8004c1e:	f000 f849 	bl	8004cb4 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004c22:	4603      	mov	r3, r0
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	4619      	mov	r1, r3
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f000 f871 	bl	8004d10 <_ZSt22__copy_move_backward_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004c2e:	4603      	mov	r3, r0
    }
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd90      	pop	{r4, r7, pc}

08004c38 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f879 	bl	8004d56 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004c64:	4603      	mov	r3, r0
    }
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004c8c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff ffed 	bl	8004c84 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 8004caa:	4603      	mov	r3, r0
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>:
    __miter_base(_Iterator __it)
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <_ZSt13__copy_move_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004cca:	b5b0      	push	{r4, r5, r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f85a 	bl	8004d90 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004cdc:	4604      	mov	r4, r0
 8004cde:	68b8      	ldr	r0, [r7, #8]
 8004ce0:	f000 f856 	bl	8004d90 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 f851 	bl	8004d90 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f000 f856 	bl	8004da6 <_ZSt14__copy_move_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	1d3b      	adds	r3, r7, #4
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 f860 	bl	8004dc6 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>
 8004d06:	4603      	mov	r3, r0
    }
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bdb0      	pop	{r4, r5, r7, pc}

08004d10 <_ZSt22__copy_move_backward_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8004d10:	b5b0      	push	{r4, r5, r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f837 	bl	8004d90 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004d22:	4604      	mov	r4, r0
 8004d24:	68b8      	ldr	r0, [r7, #8]
 8004d26:	f000 f833 	bl	8004d90 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 f82e 	bl	8004d90 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004d34:	4603      	mov	r3, r0
 8004d36:	461a      	mov	r2, r3
 8004d38:	4629      	mov	r1, r5
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f000 f84f 	bl	8004dde <_ZSt23__copy_move_backward_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004d40:	4602      	mov	r2, r0
 8004d42:	1d3b      	adds	r3, r7, #4
 8004d44:	4611      	mov	r1, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f83d 	bl	8004dc6 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>
 8004d4c:	4603      	mov	r3, r0
    }
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bdb0      	pop	{r4, r5, r7, pc}

08004d56 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b086      	sub	sp, #24
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	109b      	asrs	r3, r3, #2
 8004d6a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d006      	beq.n	8004d80 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	461a      	mov	r2, r3
 8004d78:	68f9      	ldr	r1, [r7, #12]
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f007 fd1a 	bl	800c7b4 <memmove>
	  return __result + _Num;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	4413      	add	r3, r2
	}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3718      	adds	r7, #24
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>:
    __niter_base(_Iterator __it)
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <_ZSt14__copy_move_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f821 	bl	8004dfe <_ZSt14__copy_move_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
    { return __res; }
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <_ZSt23__copy_move_backward_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f815 	bl	8004e1e <_ZSt23__copy_move_backward_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <_ZSt14__copy_move_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b084      	sub	sp, #16
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	68b9      	ldr	r1, [r7, #8]
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f815 	bl	8004e3e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>
 8004e14:	4603      	mov	r3, r0
    }
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <_ZSt23__copy_move_backward_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f822 	bl	8004e78 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>
 8004e34:	4603      	mov	r3, r0
    }
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b086      	sub	sp, #24
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	109b      	asrs	r3, r3, #2
 8004e52:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d006      	beq.n	8004e68 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68f9      	ldr	r1, [r7, #12]
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f007 fca6 	bl	800c7b4 <memmove>
	  return __result + _Num;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	4413      	add	r3, r2
	}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	109b      	asrs	r3, r3, #2
 8004e8c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	425b      	negs	r3, r3
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	18d0      	adds	r0, r2, r3
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68f9      	ldr	r1, [r7, #12]
 8004ea6:	f007 fc85 	bl	800c7b4 <memmove>
	  return __result - _Num;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	425b      	negs	r3, r3
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	4413      	add	r3, r2
	}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <_ZN9AutoPilotD1Ev>:
class AutoPilot {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fd fe63 	bl	8002b92 <_ZN12ActionsQueueD1Ev>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d107      	bne.n	8004ef8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d102      	bne.n	8004ef8 <_Z41__static_initialization_and_destruction_0ii+0x20>
AutoPilot pilot;
 8004ef2:	4809      	ldr	r0, [pc, #36]	; (8004f18 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004ef4:	f7fd fe65 	bl	8002bc2 <_ZN9AutoPilotC1Ev>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d107      	bne.n	8004f0e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d102      	bne.n	8004f0e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004f08:	4803      	ldr	r0, [pc, #12]	; (8004f18 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004f0a:	f7ff ffd7 	bl	8004ebc <_ZN9AutoPilotD1Ev>
}
 8004f0e:	bf00      	nop
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000478 	.word	0x20000478

08004f1c <_GLOBAL__sub_I__Z9constrainlll>:
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f24:	2001      	movs	r0, #1
 8004f26:	f7ff ffd7 	bl	8004ed8 <_Z41__static_initialization_and_destruction_0ii>
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <_GLOBAL__sub_D__Z9constrainlll>:
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f34:	2000      	movs	r0, #0
 8004f36:	f7ff ffcf 	bl	8004ed8 <_Z41__static_initialization_and_destruction_0ii>
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_MspInit>:
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	2300      	movs	r3, #0
 8004f44:	607b      	str	r3, [r7, #4]
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <HAL_MspInit+0x4c>)
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4a:	4a0f      	ldr	r2, [pc, #60]	; (8004f88 <HAL_MspInit+0x4c>)
 8004f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f50:	6453      	str	r3, [r2, #68]	; 0x44
 8004f52:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <HAL_MspInit+0x4c>)
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f5a:	607b      	str	r3, [r7, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	603b      	str	r3, [r7, #0]
 8004f62:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <HAL_MspInit+0x4c>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	4a08      	ldr	r2, [pc, #32]	; (8004f88 <HAL_MspInit+0x4c>)
 8004f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f6e:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <HAL_MspInit+0x4c>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800

08004f8c <HAL_I2C_MspInit>:
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08a      	sub	sp, #40	; 0x28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	f107 0314 	add.w	r3, r7, #20
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	605a      	str	r2, [r3, #4]
 8004f9e:	609a      	str	r2, [r3, #8]
 8004fa0:	60da      	str	r2, [r3, #12]
 8004fa2:	611a      	str	r2, [r3, #16]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a21      	ldr	r2, [pc, #132]	; (8005030 <HAL_I2C_MspInit+0xa4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d13c      	bne.n	8005028 <HAL_I2C_MspInit+0x9c>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	613b      	str	r3, [r7, #16]
 8004fb2:	4b20      	ldr	r3, [pc, #128]	; (8005034 <HAL_I2C_MspInit+0xa8>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	4a1f      	ldr	r2, [pc, #124]	; (8005034 <HAL_I2C_MspInit+0xa8>)
 8004fb8:	f043 0302 	orr.w	r3, r3, #2
 8004fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004fbe:	4b1d      	ldr	r3, [pc, #116]	; (8005034 <HAL_I2C_MspInit+0xa8>)
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	2312      	movs	r3, #18
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61fb      	str	r3, [r7, #28]
 8004fd8:	2303      	movs	r3, #3
 8004fda:	623b      	str	r3, [r7, #32]
 8004fdc:	2304      	movs	r3, #4
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe0:	f107 0314 	add.w	r3, r7, #20
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4814      	ldr	r0, [pc, #80]	; (8005038 <HAL_I2C_MspInit+0xac>)
 8004fe8:	f001 f9b6 	bl	8006358 <HAL_GPIO_Init>
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	4b10      	ldr	r3, [pc, #64]	; (8005034 <HAL_I2C_MspInit+0xa8>)
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	4a0f      	ldr	r2, [pc, #60]	; (8005034 <HAL_I2C_MspInit+0xa8>)
 8004ff6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <HAL_I2C_MspInit+0xa8>)
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	2100      	movs	r1, #0
 800500c:	201f      	movs	r0, #31
 800500e:	f000 fd76 	bl	8005afe <HAL_NVIC_SetPriority>
 8005012:	201f      	movs	r0, #31
 8005014:	f000 fd8f 	bl	8005b36 <HAL_NVIC_EnableIRQ>
 8005018:	2200      	movs	r2, #0
 800501a:	2100      	movs	r1, #0
 800501c:	2020      	movs	r0, #32
 800501e:	f000 fd6e 	bl	8005afe <HAL_NVIC_SetPriority>
 8005022:	2020      	movs	r0, #32
 8005024:	f000 fd87 	bl	8005b36 <HAL_NVIC_EnableIRQ>
 8005028:	bf00      	nop
 800502a:	3728      	adds	r7, #40	; 0x28
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40005400 	.word	0x40005400
 8005034:	40023800 	.word	0x40023800
 8005038:	40020400 	.word	0x40020400

0800503c <HAL_TIM_Base_MspInit>:
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1a      	ldr	r2, [pc, #104]	; (80050b4 <HAL_TIM_Base_MspInit+0x78>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d12d      	bne.n	80050aa <HAL_TIM_Base_MspInit+0x6e>
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <HAL_TIM_Base_MspInit+0x7c>)
 8005054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005056:	4a18      	ldr	r2, [pc, #96]	; (80050b8 <HAL_TIM_Base_MspInit+0x7c>)
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	6453      	str	r3, [r2, #68]	; 0x44
 800505e:	4b16      	ldr	r3, [pc, #88]	; (80050b8 <HAL_TIM_Base_MspInit+0x7c>)
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	2100      	movs	r1, #0
 800506e:	2018      	movs	r0, #24
 8005070:	f000 fd45 	bl	8005afe <HAL_NVIC_SetPriority>
 8005074:	2018      	movs	r0, #24
 8005076:	f000 fd5e 	bl	8005b36 <HAL_NVIC_EnableIRQ>
 800507a:	2200      	movs	r2, #0
 800507c:	2100      	movs	r1, #0
 800507e:	2019      	movs	r0, #25
 8005080:	f000 fd3d 	bl	8005afe <HAL_NVIC_SetPriority>
 8005084:	2019      	movs	r0, #25
 8005086:	f000 fd56 	bl	8005b36 <HAL_NVIC_EnableIRQ>
 800508a:	2200      	movs	r2, #0
 800508c:	2100      	movs	r1, #0
 800508e:	201a      	movs	r0, #26
 8005090:	f000 fd35 	bl	8005afe <HAL_NVIC_SetPriority>
 8005094:	201a      	movs	r0, #26
 8005096:	f000 fd4e 	bl	8005b36 <HAL_NVIC_EnableIRQ>
 800509a:	2200      	movs	r2, #0
 800509c:	2100      	movs	r1, #0
 800509e:	201b      	movs	r0, #27
 80050a0:	f000 fd2d 	bl	8005afe <HAL_NVIC_SetPriority>
 80050a4:	201b      	movs	r0, #27
 80050a6:	f000 fd46 	bl	8005b36 <HAL_NVIC_EnableIRQ>
 80050aa:	bf00      	nop
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40023800 	.word	0x40023800

080050bc <HAL_TIM_Encoder_MspInit>:
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08c      	sub	sp, #48	; 0x30
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	f107 031c 	add.w	r3, r7, #28
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	605a      	str	r2, [r3, #4]
 80050ce:	609a      	str	r2, [r3, #8]
 80050d0:	60da      	str	r2, [r3, #12]
 80050d2:	611a      	str	r2, [r3, #16]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050dc:	d14b      	bne.n	8005176 <HAL_TIM_Encoder_MspInit+0xba>
 80050de:	2300      	movs	r3, #0
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	4b3f      	ldr	r3, [pc, #252]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	4a3e      	ldr	r2, [pc, #248]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	6413      	str	r3, [r2, #64]	; 0x40
 80050ee:	4b3c      	ldr	r3, [pc, #240]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	4b38      	ldr	r3, [pc, #224]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	4a37      	ldr	r2, [pc, #220]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	6313      	str	r3, [r2, #48]	; 0x30
 800510a:	4b35      	ldr	r3, [pc, #212]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2300      	movs	r3, #0
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	4b31      	ldr	r3, [pc, #196]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	4a30      	ldr	r2, [pc, #192]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 8005120:	f043 0302 	orr.w	r3, r3, #2
 8005124:	6313      	str	r3, [r2, #48]	; 0x30
 8005126:	4b2e      	ldr	r3, [pc, #184]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	2302      	movs	r3, #2
 800513a:	623b      	str	r3, [r7, #32]
 800513c:	2300      	movs	r3, #0
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
 8005140:	2300      	movs	r3, #0
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28
 8005144:	2301      	movs	r3, #1
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005148:	f107 031c 	add.w	r3, r7, #28
 800514c:	4619      	mov	r1, r3
 800514e:	4825      	ldr	r0, [pc, #148]	; (80051e4 <HAL_TIM_Encoder_MspInit+0x128>)
 8005150:	f001 f902 	bl	8006358 <HAL_GPIO_Init>
 8005154:	2308      	movs	r3, #8
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	2302      	movs	r3, #2
 800515a:	623b      	str	r3, [r7, #32]
 800515c:	2300      	movs	r3, #0
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
 8005160:	2300      	movs	r3, #0
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
 8005164:	2301      	movs	r3, #1
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005168:	f107 031c 	add.w	r3, r7, #28
 800516c:	4619      	mov	r1, r3
 800516e:	481e      	ldr	r0, [pc, #120]	; (80051e8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8005170:	f001 f8f2 	bl	8006358 <HAL_GPIO_Init>
 8005174:	e030      	b.n	80051d8 <HAL_TIM_Encoder_MspInit+0x11c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <HAL_TIM_Encoder_MspInit+0x130>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d12b      	bne.n	80051d8 <HAL_TIM_Encoder_MspInit+0x11c>
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 800518a:	f043 0304 	orr.w	r3, r3, #4
 800518e:	6413      	str	r3, [r2, #64]	; 0x40
 8005190:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 8005192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2300      	movs	r3, #0
 800519e:	60bb      	str	r3, [r7, #8]
 80051a0:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 80051a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a4:	4a0e      	ldr	r2, [pc, #56]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 80051a6:	f043 0302 	orr.w	r3, r3, #2
 80051aa:	6313      	str	r3, [r2, #48]	; 0x30
 80051ac:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <HAL_TIM_Encoder_MspInit+0x124>)
 80051ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	23c0      	movs	r3, #192	; 0xc0
 80051ba:	61fb      	str	r3, [r7, #28]
 80051bc:	2302      	movs	r3, #2
 80051be:	623b      	str	r3, [r7, #32]
 80051c0:	2300      	movs	r3, #0
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
 80051c4:	2300      	movs	r3, #0
 80051c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051c8:	2302      	movs	r3, #2
 80051ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051cc:	f107 031c 	add.w	r3, r7, #28
 80051d0:	4619      	mov	r1, r3
 80051d2:	4805      	ldr	r0, [pc, #20]	; (80051e8 <HAL_TIM_Encoder_MspInit+0x12c>)
 80051d4:	f001 f8c0 	bl	8006358 <HAL_GPIO_Init>
 80051d8:	bf00      	nop
 80051da:	3730      	adds	r7, #48	; 0x30
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40020000 	.word	0x40020000
 80051e8:	40020400 	.word	0x40020400
 80051ec:	40000800 	.word	0x40000800

080051f0 <HAL_TIM_PWM_MspInit>:
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a0e      	ldr	r2, [pc, #56]	; (8005238 <HAL_TIM_PWM_MspInit+0x48>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d115      	bne.n	800522e <HAL_TIM_PWM_MspInit+0x3e>
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	4b0d      	ldr	r3, [pc, #52]	; (800523c <HAL_TIM_PWM_MspInit+0x4c>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	4a0c      	ldr	r2, [pc, #48]	; (800523c <HAL_TIM_PWM_MspInit+0x4c>)
 800520c:	f043 0302 	orr.w	r3, r3, #2
 8005210:	6413      	str	r3, [r2, #64]	; 0x40
 8005212:	4b0a      	ldr	r3, [pc, #40]	; (800523c <HAL_TIM_PWM_MspInit+0x4c>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	2100      	movs	r1, #0
 8005222:	201d      	movs	r0, #29
 8005224:	f000 fc6b 	bl	8005afe <HAL_NVIC_SetPriority>
 8005228:	201d      	movs	r0, #29
 800522a:	f000 fc84 	bl	8005b36 <HAL_NVIC_EnableIRQ>
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40000400 	.word	0x40000400
 800523c:	40023800 	.word	0x40023800

08005240 <HAL_TIM_MspPostInit>:
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	; 0x28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	f107 0314 	add.w	r3, r7, #20
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	609a      	str	r2, [r3, #8]
 8005254:	60da      	str	r2, [r3, #12]
 8005256:	611a      	str	r2, [r3, #16]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a21      	ldr	r2, [pc, #132]	; (80052e4 <HAL_TIM_MspPostInit+0xa4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d13b      	bne.n	80052da <HAL_TIM_MspPostInit+0x9a>
 8005262:	2300      	movs	r3, #0
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	4b20      	ldr	r3, [pc, #128]	; (80052e8 <HAL_TIM_MspPostInit+0xa8>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	4a1f      	ldr	r2, [pc, #124]	; (80052e8 <HAL_TIM_MspPostInit+0xa8>)
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	6313      	str	r3, [r2, #48]	; 0x30
 8005272:	4b1d      	ldr	r3, [pc, #116]	; (80052e8 <HAL_TIM_MspPostInit+0xa8>)
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <HAL_TIM_MspPostInit+0xa8>)
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <HAL_TIM_MspPostInit+0xa8>)
 8005288:	f043 0302 	orr.w	r3, r3, #2
 800528c:	6313      	str	r3, [r2, #48]	; 0x30
 800528e:	4b16      	ldr	r3, [pc, #88]	; (80052e8 <HAL_TIM_MspPostInit+0xa8>)
 8005290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	23c0      	movs	r3, #192	; 0xc0
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	2302      	movs	r3, #2
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
 80052a6:	2300      	movs	r3, #0
 80052a8:	623b      	str	r3, [r7, #32]
 80052aa:	2302      	movs	r3, #2
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
 80052ae:	f107 0314 	add.w	r3, r7, #20
 80052b2:	4619      	mov	r1, r3
 80052b4:	480d      	ldr	r0, [pc, #52]	; (80052ec <HAL_TIM_MspPostInit+0xac>)
 80052b6:	f001 f84f 	bl	8006358 <HAL_GPIO_Init>
 80052ba:	2303      	movs	r3, #3
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	2302      	movs	r3, #2
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	2300      	movs	r3, #0
 80052c8:	623b      	str	r3, [r7, #32]
 80052ca:	2302      	movs	r3, #2
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
 80052ce:	f107 0314 	add.w	r3, r7, #20
 80052d2:	4619      	mov	r1, r3
 80052d4:	4806      	ldr	r0, [pc, #24]	; (80052f0 <HAL_TIM_MspPostInit+0xb0>)
 80052d6:	f001 f83f 	bl	8006358 <HAL_GPIO_Init>
 80052da:	bf00      	nop
 80052dc:	3728      	adds	r7, #40	; 0x28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40023800 	.word	0x40023800
 80052ec:	40020000 	.word	0x40020000
 80052f0:	40020400 	.word	0x40020400

080052f4 <HAL_UART_MspInit>:
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	; 0x28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	f107 0314 	add.w	r3, r7, #20
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	609a      	str	r2, [r3, #8]
 8005308:	60da      	str	r2, [r3, #12]
 800530a:	611a      	str	r2, [r3, #16]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a4c      	ldr	r2, [pc, #304]	; (8005444 <HAL_UART_MspInit+0x150>)
 8005312:	4293      	cmp	r3, r2
 8005314:	f040 8092 	bne.w	800543c <HAL_UART_MspInit+0x148>
 8005318:	2300      	movs	r3, #0
 800531a:	613b      	str	r3, [r7, #16]
 800531c:	4b4a      	ldr	r3, [pc, #296]	; (8005448 <HAL_UART_MspInit+0x154>)
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	4a49      	ldr	r2, [pc, #292]	; (8005448 <HAL_UART_MspInit+0x154>)
 8005322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005326:	6413      	str	r3, [r2, #64]	; 0x40
 8005328:	4b47      	ldr	r3, [pc, #284]	; (8005448 <HAL_UART_MspInit+0x154>)
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	4b43      	ldr	r3, [pc, #268]	; (8005448 <HAL_UART_MspInit+0x154>)
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	4a42      	ldr	r2, [pc, #264]	; (8005448 <HAL_UART_MspInit+0x154>)
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	6313      	str	r3, [r2, #48]	; 0x30
 8005344:	4b40      	ldr	r3, [pc, #256]	; (8005448 <HAL_UART_MspInit+0x154>)
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	230c      	movs	r3, #12
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	2302      	movs	r3, #2
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	2300      	movs	r3, #0
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	2303      	movs	r3, #3
 800535e:	623b      	str	r3, [r7, #32]
 8005360:	2307      	movs	r3, #7
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
 8005364:	f107 0314 	add.w	r3, r7, #20
 8005368:	4619      	mov	r1, r3
 800536a:	4838      	ldr	r0, [pc, #224]	; (800544c <HAL_UART_MspInit+0x158>)
 800536c:	f000 fff4 	bl	8006358 <HAL_GPIO_Init>
 8005370:	4b37      	ldr	r3, [pc, #220]	; (8005450 <HAL_UART_MspInit+0x15c>)
 8005372:	4a38      	ldr	r2, [pc, #224]	; (8005454 <HAL_UART_MspInit+0x160>)
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	4b36      	ldr	r3, [pc, #216]	; (8005450 <HAL_UART_MspInit+0x15c>)
 8005378:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800537c:	605a      	str	r2, [r3, #4]
 800537e:	4b34      	ldr	r3, [pc, #208]	; (8005450 <HAL_UART_MspInit+0x15c>)
 8005380:	2200      	movs	r2, #0
 8005382:	609a      	str	r2, [r3, #8]
 8005384:	4b32      	ldr	r3, [pc, #200]	; (8005450 <HAL_UART_MspInit+0x15c>)
 8005386:	2200      	movs	r2, #0
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	4b31      	ldr	r3, [pc, #196]	; (8005450 <HAL_UART_MspInit+0x15c>)
 800538c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005390:	611a      	str	r2, [r3, #16]
 8005392:	4b2f      	ldr	r3, [pc, #188]	; (8005450 <HAL_UART_MspInit+0x15c>)
 8005394:	2200      	movs	r2, #0
 8005396:	615a      	str	r2, [r3, #20]
 8005398:	4b2d      	ldr	r3, [pc, #180]	; (8005450 <HAL_UART_MspInit+0x15c>)
 800539a:	2200      	movs	r2, #0
 800539c:	619a      	str	r2, [r3, #24]
 800539e:	4b2c      	ldr	r3, [pc, #176]	; (8005450 <HAL_UART_MspInit+0x15c>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	61da      	str	r2, [r3, #28]
 80053a4:	4b2a      	ldr	r3, [pc, #168]	; (8005450 <HAL_UART_MspInit+0x15c>)
 80053a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053aa:	621a      	str	r2, [r3, #32]
 80053ac:	4b28      	ldr	r3, [pc, #160]	; (8005450 <HAL_UART_MspInit+0x15c>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	625a      	str	r2, [r3, #36]	; 0x24
 80053b2:	4827      	ldr	r0, [pc, #156]	; (8005450 <HAL_UART_MspInit+0x15c>)
 80053b4:	f000 fbe8 	bl	8005b88 <HAL_DMA_Init>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_UART_MspInit+0xce>
 80053be:	f7fe f927 	bl	8003610 <Error_Handler>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a22      	ldr	r2, [pc, #136]	; (8005450 <HAL_UART_MspInit+0x15c>)
 80053c6:	639a      	str	r2, [r3, #56]	; 0x38
 80053c8:	4a21      	ldr	r2, [pc, #132]	; (8005450 <HAL_UART_MspInit+0x15c>)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6393      	str	r3, [r2, #56]	; 0x38
 80053ce:	4b22      	ldr	r3, [pc, #136]	; (8005458 <HAL_UART_MspInit+0x164>)
 80053d0:	4a22      	ldr	r2, [pc, #136]	; (800545c <HAL_UART_MspInit+0x168>)
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	4b20      	ldr	r3, [pc, #128]	; (8005458 <HAL_UART_MspInit+0x164>)
 80053d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053da:	605a      	str	r2, [r3, #4]
 80053dc:	4b1e      	ldr	r3, [pc, #120]	; (8005458 <HAL_UART_MspInit+0x164>)
 80053de:	2240      	movs	r2, #64	; 0x40
 80053e0:	609a      	str	r2, [r3, #8]
 80053e2:	4b1d      	ldr	r3, [pc, #116]	; (8005458 <HAL_UART_MspInit+0x164>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	60da      	str	r2, [r3, #12]
 80053e8:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <HAL_UART_MspInit+0x164>)
 80053ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053ee:	611a      	str	r2, [r3, #16]
 80053f0:	4b19      	ldr	r3, [pc, #100]	; (8005458 <HAL_UART_MspInit+0x164>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	615a      	str	r2, [r3, #20]
 80053f6:	4b18      	ldr	r3, [pc, #96]	; (8005458 <HAL_UART_MspInit+0x164>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	619a      	str	r2, [r3, #24]
 80053fc:	4b16      	ldr	r3, [pc, #88]	; (8005458 <HAL_UART_MspInit+0x164>)
 80053fe:	2200      	movs	r2, #0
 8005400:	61da      	str	r2, [r3, #28]
 8005402:	4b15      	ldr	r3, [pc, #84]	; (8005458 <HAL_UART_MspInit+0x164>)
 8005404:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005408:	621a      	str	r2, [r3, #32]
 800540a:	4b13      	ldr	r3, [pc, #76]	; (8005458 <HAL_UART_MspInit+0x164>)
 800540c:	2200      	movs	r2, #0
 800540e:	625a      	str	r2, [r3, #36]	; 0x24
 8005410:	4811      	ldr	r0, [pc, #68]	; (8005458 <HAL_UART_MspInit+0x164>)
 8005412:	f000 fbb9 	bl	8005b88 <HAL_DMA_Init>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_UART_MspInit+0x12c>
 800541c:	f7fe f8f8 	bl	8003610 <Error_Handler>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a0d      	ldr	r2, [pc, #52]	; (8005458 <HAL_UART_MspInit+0x164>)
 8005424:	635a      	str	r2, [r3, #52]	; 0x34
 8005426:	4a0c      	ldr	r2, [pc, #48]	; (8005458 <HAL_UART_MspInit+0x164>)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6393      	str	r3, [r2, #56]	; 0x38
 800542c:	2200      	movs	r2, #0
 800542e:	2100      	movs	r1, #0
 8005430:	2026      	movs	r0, #38	; 0x26
 8005432:	f000 fb64 	bl	8005afe <HAL_NVIC_SetPriority>
 8005436:	2026      	movs	r0, #38	; 0x26
 8005438:	f000 fb7d 	bl	8005b36 <HAL_NVIC_EnableIRQ>
 800543c:	bf00      	nop
 800543e:	3728      	adds	r7, #40	; 0x28
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40004400 	.word	0x40004400
 8005448:	40023800 	.word	0x40023800
 800544c:	40020000 	.word	0x40020000
 8005450:	200003b8 	.word	0x200003b8
 8005454:	40026088 	.word	0x40026088
 8005458:	20000418 	.word	0x20000418
 800545c:	400260a0 	.word	0x400260a0

08005460 <HAL_UART_MspDeInit>:
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a0e      	ldr	r2, [pc, #56]	; (80054a8 <HAL_UART_MspDeInit+0x48>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d116      	bne.n	80054a0 <HAL_UART_MspDeInit+0x40>
 8005472:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <HAL_UART_MspDeInit+0x4c>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	4a0d      	ldr	r2, [pc, #52]	; (80054ac <HAL_UART_MspDeInit+0x4c>)
 8005478:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800547c:	6413      	str	r3, [r2, #64]	; 0x40
 800547e:	210c      	movs	r1, #12
 8005480:	480b      	ldr	r0, [pc, #44]	; (80054b0 <HAL_UART_MspDeInit+0x50>)
 8005482:	f001 f8ed 	bl	8006660 <HAL_GPIO_DeInit>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fc2a 	bl	8005ce4 <HAL_DMA_DeInit>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005494:	4618      	mov	r0, r3
 8005496:	f000 fc25 	bl	8005ce4 <HAL_DMA_DeInit>
 800549a:	2026      	movs	r0, #38	; 0x26
 800549c:	f000 fb59 	bl	8005b52 <HAL_NVIC_DisableIRQ>
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40004400 	.word	0x40004400
 80054ac:	40023800 	.word	0x40023800
 80054b0:	40020000 	.word	0x40020000

080054b4 <NMI_Handler>:
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	e7fe      	b.n	80054b8 <NMI_Handler+0x4>

080054ba <HardFault_Handler>:
 80054ba:	b480      	push	{r7}
 80054bc:	af00      	add	r7, sp, #0
 80054be:	e7fe      	b.n	80054be <HardFault_Handler+0x4>

080054c0 <MemManage_Handler>:
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	e7fe      	b.n	80054c4 <MemManage_Handler+0x4>

080054c6 <BusFault_Handler>:
 80054c6:	b480      	push	{r7}
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	e7fe      	b.n	80054ca <BusFault_Handler+0x4>

080054cc <UsageFault_Handler>:
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	e7fe      	b.n	80054d0 <UsageFault_Handler+0x4>

080054d2 <SVC_Handler>:
 80054d2:	b480      	push	{r7}
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	bf00      	nop
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <DebugMon_Handler>:
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	bf00      	nop
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <PendSV_Handler>:
 80054ee:	b480      	push	{r7}
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	bf00      	nop
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <SysTick_Handler>:
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
 8005500:	f000 f9ba 	bl	8005878 <HAL_IncTick>
 8005504:	bf00      	nop
 8005506:	bd80      	pop	{r7, pc}

08005508 <DMA1_Stream5_IRQHandler>:
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
 800550c:	4802      	ldr	r0, [pc, #8]	; (8005518 <DMA1_Stream5_IRQHandler+0x10>)
 800550e:	f000 fcd9 	bl	8005ec4 <HAL_DMA_IRQHandler>
 8005512:	bf00      	nop
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	200003b8 	.word	0x200003b8

0800551c <DMA1_Stream6_IRQHandler>:
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
 8005520:	4802      	ldr	r0, [pc, #8]	; (800552c <DMA1_Stream6_IRQHandler+0x10>)
 8005522:	f000 fccf 	bl	8005ec4 <HAL_DMA_IRQHandler>
 8005526:	bf00      	nop
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000418 	.word	0x20000418

08005530 <TIM1_BRK_TIM9_IRQHandler>:
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
 8005534:	4802      	ldr	r0, [pc, #8]	; (8005540 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8005536:	f004 fac3 	bl	8009ac0 <HAL_TIM_IRQHandler>
 800553a:	bf00      	nop
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000254 	.word	0x20000254

08005544 <TIM1_UP_TIM10_IRQHandler>:
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
 8005548:	4802      	ldr	r0, [pc, #8]	; (8005554 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800554a:	f004 fab9 	bl	8009ac0 <HAL_TIM_IRQHandler>
 800554e:	bf00      	nop
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000254 	.word	0x20000254

08005558 <TIM1_TRG_COM_TIM11_IRQHandler>:
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
 800555c:	4802      	ldr	r0, [pc, #8]	; (8005568 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800555e:	f004 faaf 	bl	8009ac0 <HAL_TIM_IRQHandler>
 8005562:	bf00      	nop
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000254 	.word	0x20000254

0800556c <TIM1_CC_IRQHandler>:
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
 8005570:	4802      	ldr	r0, [pc, #8]	; (800557c <TIM1_CC_IRQHandler+0x10>)
 8005572:	f004 faa5 	bl	8009ac0 <HAL_TIM_IRQHandler>
 8005576:	bf00      	nop
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000254 	.word	0x20000254

08005580 <TIM3_IRQHandler>:
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
 8005584:	4802      	ldr	r0, [pc, #8]	; (8005590 <TIM3_IRQHandler+0x10>)
 8005586:	f004 fa9b 	bl	8009ac0 <HAL_TIM_IRQHandler>
 800558a:	bf00      	nop
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	200002e4 	.word	0x200002e4

08005594 <I2C1_EV_IRQHandler>:
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
 8005598:	4802      	ldr	r0, [pc, #8]	; (80055a4 <I2C1_EV_IRQHandler+0x10>)
 800559a:	f001 fc5b 	bl	8006e54 <HAL_I2C_EV_IRQHandler>
 800559e:	bf00      	nop
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000200 	.word	0x20000200

080055a8 <I2C1_ER_IRQHandler>:
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	4802      	ldr	r0, [pc, #8]	; (80055b8 <I2C1_ER_IRQHandler+0x10>)
 80055ae:	f001 fdc2 	bl	8007136 <HAL_I2C_ER_IRQHandler>
 80055b2:	bf00      	nop
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000200 	.word	0x20000200

080055bc <USART2_IRQHandler>:
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
 80055c0:	4802      	ldr	r0, [pc, #8]	; (80055cc <USART2_IRQHandler+0x10>)
 80055c2:	f005 fa35 	bl	800aa30 <HAL_UART_IRQHandler>
 80055c6:	bf00      	nop
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000374 	.word	0x20000374

080055d0 <_getpid>:
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	2301      	movs	r3, #1
 80055d6:	4618      	mov	r0, r3
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <_kill>:
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
 80055ea:	f007 f89b 	bl	800c724 <__errno>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2216      	movs	r2, #22
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <_exit>:
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	f04f 31ff 	mov.w	r1, #4294967295
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff ffe7 	bl	80055e0 <_kill>
 8005612:	e7fe      	b.n	8005612 <_exit+0x12>

08005614 <_read>:
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	e00a      	b.n	800563c <_read+0x28>
 8005626:	f3af 8000 	nop.w
 800562a:	4601      	mov	r1, r0
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	60ba      	str	r2, [r7, #8]
 8005632:	b2ca      	uxtb	r2, r1
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	3301      	adds	r3, #1
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	dbf0      	blt.n	8005626 <_read+0x12>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_write>:
 800564e:	b580      	push	{r7, lr}
 8005650:	b086      	sub	sp, #24
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	e009      	b.n	8005674 <_write+0x26>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	60ba      	str	r2, [r7, #8]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f3af 8000 	nop.w
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	3301      	adds	r3, #1
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	429a      	cmp	r2, r3
 800567a:	dbf1      	blt.n	8005660 <_write+0x12>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <_close>:
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	f04f 33ff 	mov.w	r3, #4294967295
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <_fstat>:
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056ae:	605a      	str	r2, [r3, #4]
 80056b0:	2300      	movs	r3, #0
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <_isatty>:
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	2301      	movs	r3, #1
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <_lseek>:
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	2300      	movs	r3, #0
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
	...

080056f0 <_sbrk>:
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	4a14      	ldr	r2, [pc, #80]	; (800574c <_sbrk+0x5c>)
 80056fa:	4b15      	ldr	r3, [pc, #84]	; (8005750 <_sbrk+0x60>)
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	4b13      	ldr	r3, [pc, #76]	; (8005754 <_sbrk+0x64>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d102      	bne.n	8005712 <_sbrk+0x22>
 800570c:	4b11      	ldr	r3, [pc, #68]	; (8005754 <_sbrk+0x64>)
 800570e:	4a12      	ldr	r2, [pc, #72]	; (8005758 <_sbrk+0x68>)
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	4b10      	ldr	r3, [pc, #64]	; (8005754 <_sbrk+0x64>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	429a      	cmp	r2, r3
 800571e:	d207      	bcs.n	8005730 <_sbrk+0x40>
 8005720:	f007 f800 	bl	800c724 <__errno>
 8005724:	4603      	mov	r3, r0
 8005726:	220c      	movs	r2, #12
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	f04f 33ff 	mov.w	r3, #4294967295
 800572e:	e009      	b.n	8005744 <_sbrk+0x54>
 8005730:	4b08      	ldr	r3, [pc, #32]	; (8005754 <_sbrk+0x64>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	4b07      	ldr	r3, [pc, #28]	; (8005754 <_sbrk+0x64>)
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4413      	add	r3, r2
 800573e:	4a05      	ldr	r2, [pc, #20]	; (8005754 <_sbrk+0x64>)
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20020000 	.word	0x20020000
 8005750:	00000400 	.word	0x00000400
 8005754:	200010d4 	.word	0x200010d4
 8005758:	200010f0 	.word	0x200010f0

0800575c <SystemInit>:
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
 8005760:	4b06      	ldr	r3, [pc, #24]	; (800577c <SystemInit+0x20>)
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005766:	4a05      	ldr	r2, [pc, #20]	; (800577c <SystemInit+0x20>)
 8005768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800576c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005770:	bf00      	nop
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	e000ed00 	.word	0xe000ed00

08005780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005784:	480d      	ldr	r0, [pc, #52]	; (80057bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005786:	490e      	ldr	r1, [pc, #56]	; (80057c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005788:	4a0e      	ldr	r2, [pc, #56]	; (80057c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800578a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800578c:	e002      	b.n	8005794 <LoopCopyDataInit>

0800578e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800578e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005792:	3304      	adds	r3, #4

08005794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005798:	d3f9      	bcc.n	800578e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800579a:	4a0b      	ldr	r2, [pc, #44]	; (80057c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800579c:	4c0b      	ldr	r4, [pc, #44]	; (80057cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800579e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057a0:	e001      	b.n	80057a6 <LoopFillZerobss>

080057a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057a4:	3204      	adds	r2, #4

080057a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057a8:	d3fb      	bcc.n	80057a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80057aa:	f7ff ffd7 	bl	800575c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057ae:	f006 ffbf 	bl	800c730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057b2:	f7fd fbc9 	bl	8002f48 <main>
  bx  lr    
 80057b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80057b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80057bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057c0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80057c4:	0800f6ac 	.word	0x0800f6ac
  ldr r2, =_sbss
 80057c8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80057cc:	200010f0 	.word	0x200010f0

080057d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057d0:	e7fe      	b.n	80057d0 <ADC_IRQHandler>
	...

080057d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057d8:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <HAL_Init+0x40>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a0d      	ldr	r2, [pc, #52]	; (8005814 <HAL_Init+0x40>)
 80057de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057e4:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <HAL_Init+0x40>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a0a      	ldr	r2, [pc, #40]	; (8005814 <HAL_Init+0x40>)
 80057ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057f0:	4b08      	ldr	r3, [pc, #32]	; (8005814 <HAL_Init+0x40>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a07      	ldr	r2, [pc, #28]	; (8005814 <HAL_Init+0x40>)
 80057f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057fc:	2003      	movs	r0, #3
 80057fe:	f000 f973 	bl	8005ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005802:	200f      	movs	r0, #15
 8005804:	f000 f808 	bl	8005818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005808:	f7ff fb98 	bl	8004f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	40023c00 	.word	0x40023c00

08005818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005820:	4b12      	ldr	r3, [pc, #72]	; (800586c <HAL_InitTick+0x54>)
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	4b12      	ldr	r3, [pc, #72]	; (8005870 <HAL_InitTick+0x58>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	4619      	mov	r1, r3
 800582a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800582e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005832:	fbb2 f3f3 	udiv	r3, r2, r3
 8005836:	4618      	mov	r0, r3
 8005838:	f000 f999 	bl	8005b6e <HAL_SYSTICK_Config>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e00e      	b.n	8005864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b0f      	cmp	r3, #15
 800584a:	d80a      	bhi.n	8005862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800584c:	2200      	movs	r2, #0
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	f04f 30ff 	mov.w	r0, #4294967295
 8005854:	f000 f953 	bl	8005afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005858:	4a06      	ldr	r2, [pc, #24]	; (8005874 <HAL_InitTick+0x5c>)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	e000      	b.n	8005864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
}
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20000000 	.word	0x20000000
 8005870:	20000008 	.word	0x20000008
 8005874:	20000004 	.word	0x20000004

08005878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <HAL_IncTick+0x20>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	4b06      	ldr	r3, [pc, #24]	; (800589c <HAL_IncTick+0x24>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4413      	add	r3, r2
 8005888:	4a04      	ldr	r2, [pc, #16]	; (800589c <HAL_IncTick+0x24>)
 800588a:	6013      	str	r3, [r2, #0]
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	20000008 	.word	0x20000008
 800589c:	200010d8 	.word	0x200010d8

080058a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  return uwTick;
 80058a4:	4b03      	ldr	r3, [pc, #12]	; (80058b4 <HAL_GetTick+0x14>)
 80058a6:	681b      	ldr	r3, [r3, #0]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	200010d8 	.word	0x200010d8

080058b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058c0:	f7ff ffee 	bl	80058a0 <HAL_GetTick>
 80058c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d005      	beq.n	80058de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058d2:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <HAL_Delay+0x44>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4413      	add	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058de:	bf00      	nop
 80058e0:	f7ff ffde 	bl	80058a0 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d8f7      	bhi.n	80058e0 <HAL_Delay+0x28>
  {
  }
}
 80058f0:	bf00      	nop
 80058f2:	bf00      	nop
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000008 	.word	0x20000008

08005900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <__NVIC_SetPriorityGrouping+0x44>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800591c:	4013      	ands	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800592c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005932:	4a04      	ldr	r2, [pc, #16]	; (8005944 <__NVIC_SetPriorityGrouping+0x44>)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	60d3      	str	r3, [r2, #12]
}
 8005938:	bf00      	nop
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	e000ed00 	.word	0xe000ed00

08005948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800594c:	4b04      	ldr	r3, [pc, #16]	; (8005960 <__NVIC_GetPriorityGrouping+0x18>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	f003 0307 	and.w	r3, r3, #7
}
 8005956:	4618      	mov	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	e000ed00 	.word	0xe000ed00

08005964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800596e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005972:	2b00      	cmp	r3, #0
 8005974:	db0b      	blt.n	800598e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	f003 021f 	and.w	r2, r3, #31
 800597c:	4907      	ldr	r1, [pc, #28]	; (800599c <__NVIC_EnableIRQ+0x38>)
 800597e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2001      	movs	r0, #1
 8005986:	fa00 f202 	lsl.w	r2, r0, r2
 800598a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	e000e100 	.word	0xe000e100

080059a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	db12      	blt.n	80059d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	f003 021f 	and.w	r2, r3, #31
 80059b8:	490a      	ldr	r1, [pc, #40]	; (80059e4 <__NVIC_DisableIRQ+0x44>)
 80059ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	2001      	movs	r0, #1
 80059c2:	fa00 f202 	lsl.w	r2, r0, r2
 80059c6:	3320      	adds	r3, #32
 80059c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80059cc:	f3bf 8f4f 	dsb	sy
}
 80059d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80059d2:	f3bf 8f6f 	isb	sy
}
 80059d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	e000e100 	.word	0xe000e100

080059e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	6039      	str	r1, [r7, #0]
 80059f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	db0a      	blt.n	8005a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	490c      	ldr	r1, [pc, #48]	; (8005a34 <__NVIC_SetPriority+0x4c>)
 8005a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a06:	0112      	lsls	r2, r2, #4
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a10:	e00a      	b.n	8005a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	4908      	ldr	r1, [pc, #32]	; (8005a38 <__NVIC_SetPriority+0x50>)
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	3b04      	subs	r3, #4
 8005a20:	0112      	lsls	r2, r2, #4
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	440b      	add	r3, r1
 8005a26:	761a      	strb	r2, [r3, #24]
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	e000e100 	.word	0xe000e100
 8005a38:	e000ed00 	.word	0xe000ed00

08005a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b089      	sub	sp, #36	; 0x24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f1c3 0307 	rsb	r3, r3, #7
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	bf28      	it	cs
 8005a5a:	2304      	movcs	r3, #4
 8005a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	3304      	adds	r3, #4
 8005a62:	2b06      	cmp	r3, #6
 8005a64:	d902      	bls.n	8005a6c <NVIC_EncodePriority+0x30>
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	3b03      	subs	r3, #3
 8005a6a:	e000      	b.n	8005a6e <NVIC_EncodePriority+0x32>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a70:	f04f 32ff 	mov.w	r2, #4294967295
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	43da      	mvns	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	401a      	ands	r2, r3
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a84:	f04f 31ff 	mov.w	r1, #4294967295
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8e:	43d9      	mvns	r1, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a94:	4313      	orrs	r3, r2
         );
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3724      	adds	r7, #36	; 0x24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ab4:	d301      	bcc.n	8005aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e00f      	b.n	8005ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005aba:	4a0a      	ldr	r2, [pc, #40]	; (8005ae4 <SysTick_Config+0x40>)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ac2:	210f      	movs	r1, #15
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	f7ff ff8e 	bl	80059e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <SysTick_Config+0x40>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ad2:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <SysTick_Config+0x40>)
 8005ad4:	2207      	movs	r2, #7
 8005ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	e000e010 	.word	0xe000e010

08005ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff ff05 	bl	8005900 <__NVIC_SetPriorityGrouping>
}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b086      	sub	sp, #24
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	4603      	mov	r3, r0
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	607a      	str	r2, [r7, #4]
 8005b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b10:	f7ff ff1a 	bl	8005948 <__NVIC_GetPriorityGrouping>
 8005b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	6978      	ldr	r0, [r7, #20]
 8005b1c:	f7ff ff8e 	bl	8005a3c <NVIC_EncodePriority>
 8005b20:	4602      	mov	r2, r0
 8005b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff ff5d 	bl	80059e8 <__NVIC_SetPriority>
}
 8005b2e:	bf00      	nop
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff ff0d 	bl	8005964 <__NVIC_EnableIRQ>
}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	4603      	mov	r3, r0
 8005b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff ff1d 	bl	80059a0 <__NVIC_DisableIRQ>
}
 8005b66:	bf00      	nop
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff ff94 	bl	8005aa4 <SysTick_Config>
 8005b7c:	4603      	mov	r3, r0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b94:	f7ff fe84 	bl	80058a0 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e099      	b.n	8005cd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0201 	bic.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bc4:	e00f      	b.n	8005be6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bc6:	f7ff fe6b 	bl	80058a0 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b05      	cmp	r3, #5
 8005bd2:	d908      	bls.n	8005be6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2203      	movs	r2, #3
 8005bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e078      	b.n	8005cd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e8      	bne.n	8005bc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4b38      	ldr	r3, [pc, #224]	; (8005ce0 <HAL_DMA_Init+0x158>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d107      	bne.n	8005c50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f023 0307 	bic.w	r3, r3, #7
 8005c66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d117      	bne.n	8005caa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00e      	beq.n	8005caa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fae7 	bl	8006260 <DMA_CheckFifoParam>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d008      	beq.n	8005caa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2240      	movs	r2, #64	; 0x40
 8005c9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e016      	b.n	8005cd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fa9e 	bl	80061f4 <DMA_CalcBaseAndBitshift>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc0:	223f      	movs	r2, #63	; 0x3f
 8005cc2:	409a      	lsls	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3718      	adds	r7, #24
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	f010803f 	.word	0xf010803f

08005ce4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e050      	b.n	8005d98 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d101      	bne.n	8005d06 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005d02:	2302      	movs	r3, #2
 8005d04:	e048      	b.n	8005d98 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0201 	bic.w	r2, r2, #1
 8005d14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2200      	movs	r2, #0
 8005d24:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2200      	movs	r2, #0
 8005d34:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2221      	movs	r2, #33	; 0x21
 8005d44:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fa54 	bl	80061f4 <DMA_CalcBaseAndBitshift>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d78:	223f      	movs	r2, #63	; 0x3f
 8005d7a:	409a      	lsls	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005dae:	f7ff fd77 	bl	80058a0 <HAL_GetTick>
 8005db2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d008      	beq.n	8005dd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2280      	movs	r2, #128	; 0x80
 8005dc4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e052      	b.n	8005e78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0216 	bic.w	r2, r2, #22
 8005de0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695a      	ldr	r2, [r3, #20]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005df0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d103      	bne.n	8005e02 <HAL_DMA_Abort+0x62>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0208 	bic.w	r2, r2, #8
 8005e10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e22:	e013      	b.n	8005e4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e24:	f7ff fd3c 	bl	80058a0 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b05      	cmp	r3, #5
 8005e30:	d90c      	bls.n	8005e4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e015      	b.n	8005e78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1e4      	bne.n	8005e24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e5e:	223f      	movs	r2, #63	; 0x3f
 8005e60:	409a      	lsls	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d004      	beq.n	8005e9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2280      	movs	r2, #128	; 0x80
 8005e98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e00c      	b.n	8005eb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2205      	movs	r2, #5
 8005ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ed0:	4b8e      	ldr	r3, [pc, #568]	; (800610c <HAL_DMA_IRQHandler+0x248>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a8e      	ldr	r2, [pc, #568]	; (8006110 <HAL_DMA_IRQHandler+0x24c>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	0a9b      	lsrs	r3, r3, #10
 8005edc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eee:	2208      	movs	r2, #8
 8005ef0:	409a      	lsls	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01a      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d013      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0204 	bic.w	r2, r2, #4
 8005f16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f28:	f043 0201 	orr.w	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f34:	2201      	movs	r2, #1
 8005f36:	409a      	lsls	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d012      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f52:	2201      	movs	r2, #1
 8005f54:	409a      	lsls	r2, r3
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5e:	f043 0202 	orr.w	r2, r3, #2
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	409a      	lsls	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4013      	ands	r3, r2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d012      	beq.n	8005f9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f88:	2204      	movs	r2, #4
 8005f8a:	409a      	lsls	r2, r3
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f94:	f043 0204 	orr.w	r2, r3, #4
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa0:	2210      	movs	r2, #16
 8005fa2:	409a      	lsls	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d043      	beq.n	8006034 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d03c      	beq.n	8006034 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fbe:	2210      	movs	r2, #16
 8005fc0:	409a      	lsls	r2, r3
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d018      	beq.n	8006006 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d108      	bne.n	8005ff4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d024      	beq.n	8006034 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	4798      	blx	r3
 8005ff2:	e01f      	b.n	8006034 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01b      	beq.n	8006034 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	4798      	blx	r3
 8006004:	e016      	b.n	8006034 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006010:	2b00      	cmp	r3, #0
 8006012:	d107      	bne.n	8006024 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0208 	bic.w	r2, r2, #8
 8006022:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006038:	2220      	movs	r2, #32
 800603a:	409a      	lsls	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4013      	ands	r3, r2
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 808f 	beq.w	8006164 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 8087 	beq.w	8006164 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605a:	2220      	movs	r2, #32
 800605c:	409a      	lsls	r2, r3
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b05      	cmp	r3, #5
 800606c:	d136      	bne.n	80060dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0216 	bic.w	r2, r2, #22
 800607c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695a      	ldr	r2, [r3, #20]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800608c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	2b00      	cmp	r3, #0
 8006094:	d103      	bne.n	800609e <HAL_DMA_IRQHandler+0x1da>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0208 	bic.w	r2, r2, #8
 80060ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b2:	223f      	movs	r2, #63	; 0x3f
 80060b4:	409a      	lsls	r2, r3
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d07e      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	4798      	blx	r3
        }
        return;
 80060da:	e079      	b.n	80061d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01d      	beq.n	8006126 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10d      	bne.n	8006114 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d031      	beq.n	8006164 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	4798      	blx	r3
 8006108:	e02c      	b.n	8006164 <HAL_DMA_IRQHandler+0x2a0>
 800610a:	bf00      	nop
 800610c:	20000000 	.word	0x20000000
 8006110:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d023      	beq.n	8006164 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
 8006124:	e01e      	b.n	8006164 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10f      	bne.n	8006154 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0210 	bic.w	r2, r2, #16
 8006142:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006168:	2b00      	cmp	r3, #0
 800616a:	d032      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d022      	beq.n	80061be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2205      	movs	r2, #5
 800617c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0201 	bic.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	3301      	adds	r3, #1
 8006194:	60bb      	str	r3, [r7, #8]
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	429a      	cmp	r2, r3
 800619a:	d307      	bcc.n	80061ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f2      	bne.n	8006190 <HAL_DMA_IRQHandler+0x2cc>
 80061aa:	e000      	b.n	80061ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80061ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
 80061ce:	e000      	b.n	80061d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80061d0:	bf00      	nop
    }
  }
}
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061e6:	b2db      	uxtb	r3, r3
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	3b10      	subs	r3, #16
 8006204:	4a14      	ldr	r2, [pc, #80]	; (8006258 <DMA_CalcBaseAndBitshift+0x64>)
 8006206:	fba2 2303 	umull	r2, r3, r2, r3
 800620a:	091b      	lsrs	r3, r3, #4
 800620c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800620e:	4a13      	ldr	r2, [pc, #76]	; (800625c <DMA_CalcBaseAndBitshift+0x68>)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4413      	add	r3, r2
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b03      	cmp	r3, #3
 8006220:	d909      	bls.n	8006236 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800622a:	f023 0303 	bic.w	r3, r3, #3
 800622e:	1d1a      	adds	r2, r3, #4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	659a      	str	r2, [r3, #88]	; 0x58
 8006234:	e007      	b.n	8006246 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800623e:	f023 0303 	bic.w	r3, r3, #3
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	aaaaaaab 	.word	0xaaaaaaab
 800625c:	0800f27c 	.word	0x0800f27c

08006260 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d11f      	bne.n	80062ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b03      	cmp	r3, #3
 800627e:	d856      	bhi.n	800632e <DMA_CheckFifoParam+0xce>
 8006280:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <DMA_CheckFifoParam+0x28>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	08006299 	.word	0x08006299
 800628c:	080062ab 	.word	0x080062ab
 8006290:	08006299 	.word	0x08006299
 8006294:	0800632f 	.word	0x0800632f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d046      	beq.n	8006332 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062a8:	e043      	b.n	8006332 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062b2:	d140      	bne.n	8006336 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062b8:	e03d      	b.n	8006336 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c2:	d121      	bne.n	8006308 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d837      	bhi.n	800633a <DMA_CheckFifoParam+0xda>
 80062ca:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <DMA_CheckFifoParam+0x70>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	080062e1 	.word	0x080062e1
 80062d4:	080062e7 	.word	0x080062e7
 80062d8:	080062e1 	.word	0x080062e1
 80062dc:	080062f9 	.word	0x080062f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
      break;
 80062e4:	e030      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d025      	beq.n	800633e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062f6:	e022      	b.n	800633e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006300:	d11f      	bne.n	8006342 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006306:	e01c      	b.n	8006342 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d903      	bls.n	8006316 <DMA_CheckFifoParam+0xb6>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b03      	cmp	r3, #3
 8006312:	d003      	beq.n	800631c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006314:	e018      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	73fb      	strb	r3, [r7, #15]
      break;
 800631a:	e015      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00e      	beq.n	8006346 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
      break;
 800632c:	e00b      	b.n	8006346 <DMA_CheckFifoParam+0xe6>
      break;
 800632e:	bf00      	nop
 8006330:	e00a      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      break;
 8006332:	bf00      	nop
 8006334:	e008      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      break;
 8006336:	bf00      	nop
 8006338:	e006      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      break;
 800633a:	bf00      	nop
 800633c:	e004      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      break;
 800633e:	bf00      	nop
 8006340:	e002      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      break;   
 8006342:	bf00      	nop
 8006344:	e000      	b.n	8006348 <DMA_CheckFifoParam+0xe8>
      break;
 8006346:	bf00      	nop
    }
  } 
  
  return status; 
 8006348:	7bfb      	ldrb	r3, [r7, #15]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop

08006358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006358:	b480      	push	{r7}
 800635a:	b089      	sub	sp, #36	; 0x24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006366:	2300      	movs	r3, #0
 8006368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800636a:	2300      	movs	r3, #0
 800636c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800636e:	2300      	movs	r3, #0
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	e159      	b.n	8006628 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006374:	2201      	movs	r2, #1
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4013      	ands	r3, r2
 8006386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	429a      	cmp	r2, r3
 800638e:	f040 8148 	bne.w	8006622 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	2b01      	cmp	r3, #1
 800639c:	d005      	beq.n	80063aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d130      	bne.n	800640c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	2203      	movs	r2, #3
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	43db      	mvns	r3, r3
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	4013      	ands	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	fa02 f303 	lsl.w	r3, r2, r3
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063e0:	2201      	movs	r2, #1
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	43db      	mvns	r3, r3
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	4013      	ands	r3, r2
 80063ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	091b      	lsrs	r3, r3, #4
 80063f6:	f003 0201 	and.w	r2, r3, #1
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	4313      	orrs	r3, r2
 8006404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	2b03      	cmp	r3, #3
 8006416:	d017      	beq.n	8006448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	2203      	movs	r2, #3
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	43db      	mvns	r3, r3
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	4013      	ands	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	4313      	orrs	r3, r2
 8006440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f003 0303 	and.w	r3, r3, #3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d123      	bne.n	800649c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	08da      	lsrs	r2, r3, #3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3208      	adds	r2, #8
 800645c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	220f      	movs	r2, #15
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	43db      	mvns	r3, r3
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	4013      	ands	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	4313      	orrs	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	08da      	lsrs	r2, r3, #3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3208      	adds	r2, #8
 8006496:	69b9      	ldr	r1, [r7, #24]
 8006498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	2203      	movs	r2, #3
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	43db      	mvns	r3, r3
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	4013      	ands	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f003 0203 	and.w	r2, r3, #3
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80a2 	beq.w	8006622 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	4b57      	ldr	r3, [pc, #348]	; (8006640 <HAL_GPIO_Init+0x2e8>)
 80064e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e6:	4a56      	ldr	r2, [pc, #344]	; (8006640 <HAL_GPIO_Init+0x2e8>)
 80064e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064ec:	6453      	str	r3, [r2, #68]	; 0x44
 80064ee:	4b54      	ldr	r3, [pc, #336]	; (8006640 <HAL_GPIO_Init+0x2e8>)
 80064f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064fa:	4a52      	ldr	r2, [pc, #328]	; (8006644 <HAL_GPIO_Init+0x2ec>)
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	089b      	lsrs	r3, r3, #2
 8006500:	3302      	adds	r3, #2
 8006502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	220f      	movs	r2, #15
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	43db      	mvns	r3, r3
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	4013      	ands	r3, r2
 800651c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a49      	ldr	r2, [pc, #292]	; (8006648 <HAL_GPIO_Init+0x2f0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d019      	beq.n	800655a <HAL_GPIO_Init+0x202>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a48      	ldr	r2, [pc, #288]	; (800664c <HAL_GPIO_Init+0x2f4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <HAL_GPIO_Init+0x1fe>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a47      	ldr	r2, [pc, #284]	; (8006650 <HAL_GPIO_Init+0x2f8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00d      	beq.n	8006552 <HAL_GPIO_Init+0x1fa>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a46      	ldr	r2, [pc, #280]	; (8006654 <HAL_GPIO_Init+0x2fc>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d007      	beq.n	800654e <HAL_GPIO_Init+0x1f6>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a45      	ldr	r2, [pc, #276]	; (8006658 <HAL_GPIO_Init+0x300>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d101      	bne.n	800654a <HAL_GPIO_Init+0x1f2>
 8006546:	2304      	movs	r3, #4
 8006548:	e008      	b.n	800655c <HAL_GPIO_Init+0x204>
 800654a:	2307      	movs	r3, #7
 800654c:	e006      	b.n	800655c <HAL_GPIO_Init+0x204>
 800654e:	2303      	movs	r3, #3
 8006550:	e004      	b.n	800655c <HAL_GPIO_Init+0x204>
 8006552:	2302      	movs	r3, #2
 8006554:	e002      	b.n	800655c <HAL_GPIO_Init+0x204>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <HAL_GPIO_Init+0x204>
 800655a:	2300      	movs	r3, #0
 800655c:	69fa      	ldr	r2, [r7, #28]
 800655e:	f002 0203 	and.w	r2, r2, #3
 8006562:	0092      	lsls	r2, r2, #2
 8006564:	4093      	lsls	r3, r2
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	4313      	orrs	r3, r2
 800656a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800656c:	4935      	ldr	r1, [pc, #212]	; (8006644 <HAL_GPIO_Init+0x2ec>)
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	089b      	lsrs	r3, r3, #2
 8006572:	3302      	adds	r3, #2
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800657a:	4b38      	ldr	r3, [pc, #224]	; (800665c <HAL_GPIO_Init+0x304>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	43db      	mvns	r3, r3
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	4013      	ands	r3, r2
 8006588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800659e:	4a2f      	ldr	r2, [pc, #188]	; (800665c <HAL_GPIO_Init+0x304>)
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065a4:	4b2d      	ldr	r3, [pc, #180]	; (800665c <HAL_GPIO_Init+0x304>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	43db      	mvns	r3, r3
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	4013      	ands	r3, r2
 80065b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065c8:	4a24      	ldr	r2, [pc, #144]	; (800665c <HAL_GPIO_Init+0x304>)
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065ce:	4b23      	ldr	r3, [pc, #140]	; (800665c <HAL_GPIO_Init+0x304>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	43db      	mvns	r3, r3
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	4013      	ands	r3, r2
 80065dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065f2:	4a1a      	ldr	r2, [pc, #104]	; (800665c <HAL_GPIO_Init+0x304>)
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065f8:	4b18      	ldr	r3, [pc, #96]	; (800665c <HAL_GPIO_Init+0x304>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	43db      	mvns	r3, r3
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	4013      	ands	r3, r2
 8006606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800661c:	4a0f      	ldr	r2, [pc, #60]	; (800665c <HAL_GPIO_Init+0x304>)
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	3301      	adds	r3, #1
 8006626:	61fb      	str	r3, [r7, #28]
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	2b0f      	cmp	r3, #15
 800662c:	f67f aea2 	bls.w	8006374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006630:	bf00      	nop
 8006632:	bf00      	nop
 8006634:	3724      	adds	r7, #36	; 0x24
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40023800 	.word	0x40023800
 8006644:	40013800 	.word	0x40013800
 8006648:	40020000 	.word	0x40020000
 800664c:	40020400 	.word	0x40020400
 8006650:	40020800 	.word	0x40020800
 8006654:	40020c00 	.word	0x40020c00
 8006658:	40021000 	.word	0x40021000
 800665c:	40013c00 	.word	0x40013c00

08006660 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800666a:	2300      	movs	r3, #0
 800666c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006672:	2300      	movs	r3, #0
 8006674:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	e0bb      	b.n	80067f4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800667c:	2201      	movs	r2, #1
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	fa02 f303 	lsl.w	r3, r2, r3
 8006684:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	4013      	ands	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	429a      	cmp	r2, r3
 8006694:	f040 80ab 	bne.w	80067ee <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006698:	4a5c      	ldr	r2, [pc, #368]	; (800680c <HAL_GPIO_DeInit+0x1ac>)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	089b      	lsrs	r3, r3, #2
 800669e:	3302      	adds	r3, #2
 80066a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f003 0303 	and.w	r3, r3, #3
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	220f      	movs	r2, #15
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	4013      	ands	r3, r2
 80066b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a54      	ldr	r2, [pc, #336]	; (8006810 <HAL_GPIO_DeInit+0x1b0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d019      	beq.n	80066f6 <HAL_GPIO_DeInit+0x96>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a53      	ldr	r2, [pc, #332]	; (8006814 <HAL_GPIO_DeInit+0x1b4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_GPIO_DeInit+0x92>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a52      	ldr	r2, [pc, #328]	; (8006818 <HAL_GPIO_DeInit+0x1b8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00d      	beq.n	80066ee <HAL_GPIO_DeInit+0x8e>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a51      	ldr	r2, [pc, #324]	; (800681c <HAL_GPIO_DeInit+0x1bc>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d007      	beq.n	80066ea <HAL_GPIO_DeInit+0x8a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a50      	ldr	r2, [pc, #320]	; (8006820 <HAL_GPIO_DeInit+0x1c0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d101      	bne.n	80066e6 <HAL_GPIO_DeInit+0x86>
 80066e2:	2304      	movs	r3, #4
 80066e4:	e008      	b.n	80066f8 <HAL_GPIO_DeInit+0x98>
 80066e6:	2307      	movs	r3, #7
 80066e8:	e006      	b.n	80066f8 <HAL_GPIO_DeInit+0x98>
 80066ea:	2303      	movs	r3, #3
 80066ec:	e004      	b.n	80066f8 <HAL_GPIO_DeInit+0x98>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e002      	b.n	80066f8 <HAL_GPIO_DeInit+0x98>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <HAL_GPIO_DeInit+0x98>
 80066f6:	2300      	movs	r3, #0
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	f002 0203 	and.w	r2, r2, #3
 80066fe:	0092      	lsls	r2, r2, #2
 8006700:	4093      	lsls	r3, r2
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	429a      	cmp	r2, r3
 8006706:	d132      	bne.n	800676e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006708:	4b46      	ldr	r3, [pc, #280]	; (8006824 <HAL_GPIO_DeInit+0x1c4>)
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	43db      	mvns	r3, r3
 8006710:	4944      	ldr	r1, [pc, #272]	; (8006824 <HAL_GPIO_DeInit+0x1c4>)
 8006712:	4013      	ands	r3, r2
 8006714:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006716:	4b43      	ldr	r3, [pc, #268]	; (8006824 <HAL_GPIO_DeInit+0x1c4>)
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	43db      	mvns	r3, r3
 800671e:	4941      	ldr	r1, [pc, #260]	; (8006824 <HAL_GPIO_DeInit+0x1c4>)
 8006720:	4013      	ands	r3, r2
 8006722:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006724:	4b3f      	ldr	r3, [pc, #252]	; (8006824 <HAL_GPIO_DeInit+0x1c4>)
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	43db      	mvns	r3, r3
 800672c:	493d      	ldr	r1, [pc, #244]	; (8006824 <HAL_GPIO_DeInit+0x1c4>)
 800672e:	4013      	ands	r3, r2
 8006730:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006732:	4b3c      	ldr	r3, [pc, #240]	; (8006824 <HAL_GPIO_DeInit+0x1c4>)
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	43db      	mvns	r3, r3
 800673a:	493a      	ldr	r1, [pc, #232]	; (8006824 <HAL_GPIO_DeInit+0x1c4>)
 800673c:	4013      	ands	r3, r2
 800673e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	220f      	movs	r2, #15
 800674a:	fa02 f303 	lsl.w	r3, r2, r3
 800674e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006750:	4a2e      	ldr	r2, [pc, #184]	; (800680c <HAL_GPIO_DeInit+0x1ac>)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	089b      	lsrs	r3, r3, #2
 8006756:	3302      	adds	r3, #2
 8006758:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	43da      	mvns	r2, r3
 8006760:	482a      	ldr	r0, [pc, #168]	; (800680c <HAL_GPIO_DeInit+0x1ac>)
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	089b      	lsrs	r3, r3, #2
 8006766:	400a      	ands	r2, r1
 8006768:	3302      	adds	r3, #2
 800676a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	2103      	movs	r1, #3
 8006778:	fa01 f303 	lsl.w	r3, r1, r3
 800677c:	43db      	mvns	r3, r3
 800677e:	401a      	ands	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	08da      	lsrs	r2, r3, #3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3208      	adds	r2, #8
 800678c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	220f      	movs	r2, #15
 800679a:	fa02 f303 	lsl.w	r3, r2, r3
 800679e:	43db      	mvns	r3, r3
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	08d2      	lsrs	r2, r2, #3
 80067a4:	4019      	ands	r1, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3208      	adds	r2, #8
 80067aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	2103      	movs	r1, #3
 80067b8:	fa01 f303 	lsl.w	r3, r1, r3
 80067bc:	43db      	mvns	r3, r3
 80067be:	401a      	ands	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	2101      	movs	r1, #1
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	fa01 f303 	lsl.w	r3, r1, r3
 80067d0:	43db      	mvns	r3, r3
 80067d2:	401a      	ands	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	2103      	movs	r1, #3
 80067e2:	fa01 f303 	lsl.w	r3, r1, r3
 80067e6:	43db      	mvns	r3, r3
 80067e8:	401a      	ands	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	3301      	adds	r3, #1
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2b0f      	cmp	r3, #15
 80067f8:	f67f af40 	bls.w	800667c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40013800 	.word	0x40013800
 8006810:	40020000 	.word	0x40020000
 8006814:	40020400 	.word	0x40020400
 8006818:	40020800 	.word	0x40020800
 800681c:	40020c00 	.word	0x40020c00
 8006820:	40021000 	.word	0x40021000
 8006824:	40013c00 	.word	0x40013c00

08006828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	807b      	strh	r3, [r7, #2]
 8006834:	4613      	mov	r3, r2
 8006836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006838:	787b      	ldrb	r3, [r7, #1]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800683e:	887a      	ldrh	r2, [r7, #2]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006844:	e003      	b.n	800684e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006846:	887b      	ldrh	r3, [r7, #2]
 8006848:	041a      	lsls	r2, r3, #16
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	619a      	str	r2, [r3, #24]
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
	...

0800685c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e12b      	b.n	8006ac6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fe fb82 	bl	8004f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2224      	movs	r2, #36	; 0x24
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0201 	bic.w	r2, r2, #1
 800689e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068c0:	f002 fdf0 	bl	80094a4 <HAL_RCC_GetPCLK1Freq>
 80068c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	4a81      	ldr	r2, [pc, #516]	; (8006ad0 <HAL_I2C_Init+0x274>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d807      	bhi.n	80068e0 <HAL_I2C_Init+0x84>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4a80      	ldr	r2, [pc, #512]	; (8006ad4 <HAL_I2C_Init+0x278>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	bf94      	ite	ls
 80068d8:	2301      	movls	r3, #1
 80068da:	2300      	movhi	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	e006      	b.n	80068ee <HAL_I2C_Init+0x92>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4a7d      	ldr	r2, [pc, #500]	; (8006ad8 <HAL_I2C_Init+0x27c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	bf94      	ite	ls
 80068e8:	2301      	movls	r3, #1
 80068ea:	2300      	movhi	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e0e7      	b.n	8006ac6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4a78      	ldr	r2, [pc, #480]	; (8006adc <HAL_I2C_Init+0x280>)
 80068fa:	fba2 2303 	umull	r2, r3, r2, r3
 80068fe:	0c9b      	lsrs	r3, r3, #18
 8006900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	430a      	orrs	r2, r1
 8006914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4a6a      	ldr	r2, [pc, #424]	; (8006ad0 <HAL_I2C_Init+0x274>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d802      	bhi.n	8006930 <HAL_I2C_Init+0xd4>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	3301      	adds	r3, #1
 800692e:	e009      	b.n	8006944 <HAL_I2C_Init+0xe8>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006936:	fb02 f303 	mul.w	r3, r2, r3
 800693a:	4a69      	ldr	r2, [pc, #420]	; (8006ae0 <HAL_I2C_Init+0x284>)
 800693c:	fba2 2303 	umull	r2, r3, r2, r3
 8006940:	099b      	lsrs	r3, r3, #6
 8006942:	3301      	adds	r3, #1
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	430b      	orrs	r3, r1
 800694a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006956:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	495c      	ldr	r1, [pc, #368]	; (8006ad0 <HAL_I2C_Init+0x274>)
 8006960:	428b      	cmp	r3, r1
 8006962:	d819      	bhi.n	8006998 <HAL_I2C_Init+0x13c>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	1e59      	subs	r1, r3, #1
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006972:	1c59      	adds	r1, r3, #1
 8006974:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006978:	400b      	ands	r3, r1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <HAL_I2C_Init+0x138>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1e59      	subs	r1, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	fbb1 f3f3 	udiv	r3, r1, r3
 800698c:	3301      	adds	r3, #1
 800698e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006992:	e051      	b.n	8006a38 <HAL_I2C_Init+0x1dc>
 8006994:	2304      	movs	r3, #4
 8006996:	e04f      	b.n	8006a38 <HAL_I2C_Init+0x1dc>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d111      	bne.n	80069c4 <HAL_I2C_Init+0x168>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	1e58      	subs	r0, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6859      	ldr	r1, [r3, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	005b      	lsls	r3, r3, #1
 80069ac:	440b      	add	r3, r1
 80069ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80069b2:	3301      	adds	r3, #1
 80069b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	bf0c      	ite	eq
 80069bc:	2301      	moveq	r3, #1
 80069be:	2300      	movne	r3, #0
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	e012      	b.n	80069ea <HAL_I2C_Init+0x18e>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	1e58      	subs	r0, r3, #1
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6859      	ldr	r1, [r3, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	440b      	add	r3, r1
 80069d2:	0099      	lsls	r1, r3, #2
 80069d4:	440b      	add	r3, r1
 80069d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80069da:	3301      	adds	r3, #1
 80069dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	bf0c      	ite	eq
 80069e4:	2301      	moveq	r3, #1
 80069e6:	2300      	movne	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <HAL_I2C_Init+0x196>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e022      	b.n	8006a38 <HAL_I2C_Init+0x1dc>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10e      	bne.n	8006a18 <HAL_I2C_Init+0x1bc>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	1e58      	subs	r0, r3, #1
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6859      	ldr	r1, [r3, #4]
 8006a02:	460b      	mov	r3, r1
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	440b      	add	r3, r1
 8006a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a16:	e00f      	b.n	8006a38 <HAL_I2C_Init+0x1dc>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	1e58      	subs	r0, r3, #1
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6859      	ldr	r1, [r3, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	440b      	add	r3, r1
 8006a26:	0099      	lsls	r1, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a2e:	3301      	adds	r3, #1
 8006a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	6809      	ldr	r1, [r1, #0]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69da      	ldr	r2, [r3, #28]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6911      	ldr	r1, [r2, #16]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	68d2      	ldr	r2, [r2, #12]
 8006a72:	4311      	orrs	r1, r2
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6812      	ldr	r2, [r2, #0]
 8006a78:	430b      	orrs	r3, r1
 8006a7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695a      	ldr	r2, [r3, #20]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	000186a0 	.word	0x000186a0
 8006ad4:	001e847f 	.word	0x001e847f
 8006ad8:	003d08ff 	.word	0x003d08ff
 8006adc:	431bde83 	.word	0x431bde83
 8006ae0:	10624dd3 	.word	0x10624dd3

08006ae4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af02      	add	r7, sp, #8
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	4608      	mov	r0, r1
 8006aee:	4611      	mov	r1, r2
 8006af0:	461a      	mov	r2, r3
 8006af2:	4603      	mov	r3, r0
 8006af4:	817b      	strh	r3, [r7, #10]
 8006af6:	460b      	mov	r3, r1
 8006af8:	813b      	strh	r3, [r7, #8]
 8006afa:	4613      	mov	r3, r2
 8006afc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006afe:	f7fe fecf 	bl	80058a0 <HAL_GetTick>
 8006b02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	f040 80d9 	bne.w	8006cc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	2319      	movs	r3, #25
 8006b18:	2201      	movs	r2, #1
 8006b1a:	496d      	ldr	r1, [pc, #436]	; (8006cd0 <HAL_I2C_Mem_Write+0x1ec>)
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f001 febd 	bl	800889c <I2C_WaitOnFlagUntilTimeout>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e0cc      	b.n	8006cc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_I2C_Mem_Write+0x56>
 8006b36:	2302      	movs	r3, #2
 8006b38:	e0c5      	b.n	8006cc6 <HAL_I2C_Mem_Write+0x1e2>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d007      	beq.n	8006b60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2221      	movs	r2, #33	; 0x21
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2240      	movs	r2, #64	; 0x40
 8006b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a3a      	ldr	r2, [r7, #32]
 8006b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4a4d      	ldr	r2, [pc, #308]	; (8006cd4 <HAL_I2C_Mem_Write+0x1f0>)
 8006ba0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ba2:	88f8      	ldrh	r0, [r7, #6]
 8006ba4:	893a      	ldrh	r2, [r7, #8]
 8006ba6:	8979      	ldrh	r1, [r7, #10]
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	9301      	str	r3, [sp, #4]
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f001 fd34 	bl	8008620 <I2C_RequestMemoryWrite>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d052      	beq.n	8006c64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e081      	b.n	8006cc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f001 ff3e 	bl	8008a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00d      	beq.n	8006bee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d107      	bne.n	8006bea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e06b      	b.n	8006cc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	781a      	ldrb	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d11b      	bne.n	8006c64 <HAL_I2C_Mem_Write+0x180>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d017      	beq.n	8006c64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	781a      	ldrb	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1aa      	bne.n	8006bc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f001 ff2a 	bl	8008aca <I2C_WaitOnBTFFlagUntilTimeout>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00d      	beq.n	8006c98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d107      	bne.n	8006c94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e016      	b.n	8006cc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e000      	b.n	8006cc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006cc4:	2302      	movs	r3, #2
  }
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	00100002 	.word	0x00100002
 8006cd4:	ffff0000 	.word	0xffff0000

08006cd8 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	4608      	mov	r0, r1
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	817b      	strh	r3, [r7, #10]
 8006cea:	460b      	mov	r3, r1
 8006cec:	813b      	strh	r3, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	f040 809a 	bne.w	8006e38 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d04:	4b50      	ldr	r3, [pc, #320]	; (8006e48 <HAL_I2C_Mem_Read_IT+0x170>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	08db      	lsrs	r3, r3, #3
 8006d0a:	4a50      	ldr	r2, [pc, #320]	; (8006e4c <HAL_I2C_Mem_Read_IT+0x174>)
 8006d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d10:	0a1a      	lsrs	r2, r3, #8
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	009a      	lsls	r2, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	3b01      	subs	r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d116      	bne.n	8006d58 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	f043 0220 	orr.w	r2, r3, #32
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e070      	b.n	8006e3a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d0db      	beq.n	8006d1e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_I2C_Mem_Read_IT+0x9c>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e062      	b.n	8006e3a <HAL_I2C_Mem_Read_IT+0x162>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d007      	beq.n	8006d9a <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f042 0201 	orr.w	r2, r2, #1
 8006d98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006da8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2222      	movs	r2, #34	; 0x22
 8006dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2240      	movs	r2, #64	; 0x40
 8006db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a3a      	ldr	r2, [r7, #32]
 8006dc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4a1d      	ldr	r2, [pc, #116]	; (8006e50 <HAL_I2C_Mem_Read_IT+0x178>)
 8006dda:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006ddc:	897a      	ldrh	r2, [r7, #10]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8006de2:	893a      	ldrh	r2, [r7, #8]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006de8:	88fa      	ldrh	r2, [r7, #6]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e02:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e12:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d007      	beq.n	8006e34 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006e32:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	e000      	b.n	8006e3a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8006e38:	2302      	movs	r3, #2
  }
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	20000000 	.word	0x20000000
 8006e4c:	14f8b589 	.word	0x14f8b589
 8006e50:	ffff0000 	.word	0xffff0000

08006e54 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e74:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	2b10      	cmp	r3, #16
 8006e82:	d003      	beq.n	8006e8c <HAL_I2C_EV_IRQHandler+0x38>
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	2b40      	cmp	r3, #64	; 0x40
 8006e88:	f040 80c1 	bne.w	800700e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10d      	bne.n	8006ec2 <HAL_I2C_EV_IRQHandler+0x6e>
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006eac:	d003      	beq.n	8006eb6 <HAL_I2C_EV_IRQHandler+0x62>
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006eb4:	d101      	bne.n	8006eba <HAL_I2C_EV_IRQHandler+0x66>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <HAL_I2C_EV_IRQHandler+0x68>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	f000 8132 	beq.w	8007126 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00c      	beq.n	8006ee6 <HAL_I2C_EV_IRQHandler+0x92>
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	0a5b      	lsrs	r3, r3, #9
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d006      	beq.n	8006ee6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f001 fe98 	bl	8008c0e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fd83 	bl	80079ea <I2C_Master_SB>
 8006ee4:	e092      	b.n	800700c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	08db      	lsrs	r3, r3, #3
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d009      	beq.n	8006f06 <HAL_I2C_EV_IRQHandler+0xb2>
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	0a5b      	lsrs	r3, r3, #9
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fdf9 	bl	8007af6 <I2C_Master_ADD10>
 8006f04:	e082      	b.n	800700c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	085b      	lsrs	r3, r3, #1
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d009      	beq.n	8006f26 <HAL_I2C_EV_IRQHandler+0xd2>
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	0a5b      	lsrs	r3, r3, #9
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fe13 	bl	8007b4a <I2C_Master_ADDR>
 8006f24:	e072      	b.n	800700c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	089b      	lsrs	r3, r3, #2
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d03b      	beq.n	8006faa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f40:	f000 80f3 	beq.w	800712a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	09db      	lsrs	r3, r3, #7
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00f      	beq.n	8006f70 <HAL_I2C_EV_IRQHandler+0x11c>
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	0a9b      	lsrs	r3, r3, #10
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d009      	beq.n	8006f70 <HAL_I2C_EV_IRQHandler+0x11c>
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	089b      	lsrs	r3, r3, #2
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d103      	bne.n	8006f70 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f9f3 	bl	8007354 <I2C_MasterTransmit_TXE>
 8006f6e:	e04d      	b.n	800700c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	089b      	lsrs	r3, r3, #2
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 80d6 	beq.w	800712a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	0a5b      	lsrs	r3, r3, #9
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 80cf 	beq.w	800712a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	2b21      	cmp	r3, #33	; 0x21
 8006f90:	d103      	bne.n	8006f9a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa7a 	bl	800748c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f98:	e0c7      	b.n	800712a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	2b40      	cmp	r3, #64	; 0x40
 8006f9e:	f040 80c4 	bne.w	800712a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fae8 	bl	8007578 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fa8:	e0bf      	b.n	800712a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fb8:	f000 80b7 	beq.w	800712a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	099b      	lsrs	r3, r3, #6
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00f      	beq.n	8006fe8 <HAL_I2C_EV_IRQHandler+0x194>
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	0a9b      	lsrs	r3, r3, #10
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d009      	beq.n	8006fe8 <HAL_I2C_EV_IRQHandler+0x194>
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	089b      	lsrs	r3, r3, #2
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d103      	bne.n	8006fe8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fb5d 	bl	80076a0 <I2C_MasterReceive_RXNE>
 8006fe6:	e011      	b.n	800700c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	089b      	lsrs	r3, r3, #2
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 809a 	beq.w	800712a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	0a5b      	lsrs	r3, r3, #9
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 8093 	beq.w	800712a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fc06 	bl	8007816 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800700a:	e08e      	b.n	800712a <HAL_I2C_EV_IRQHandler+0x2d6>
 800700c:	e08d      	b.n	800712a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	61fb      	str	r3, [r7, #28]
 800701e:	e007      	b.n	8007030 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d012      	beq.n	8007062 <HAL_I2C_EV_IRQHandler+0x20e>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	0a5b      	lsrs	r3, r3, #9
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00c      	beq.n	8007062 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007058:	69b9      	ldr	r1, [r7, #24]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 ffc4 	bl	8007fe8 <I2C_Slave_ADDR>
 8007060:	e066      	b.n	8007130 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	091b      	lsrs	r3, r3, #4
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <HAL_I2C_EV_IRQHandler+0x22e>
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	0a5b      	lsrs	r3, r3, #9
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fffe 	bl	800807c <I2C_Slave_STOPF>
 8007080:	e056      	b.n	8007130 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	2b21      	cmp	r3, #33	; 0x21
 8007086:	d002      	beq.n	800708e <HAL_I2C_EV_IRQHandler+0x23a>
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	2b29      	cmp	r3, #41	; 0x29
 800708c:	d125      	bne.n	80070da <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	09db      	lsrs	r3, r3, #7
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00f      	beq.n	80070ba <HAL_I2C_EV_IRQHandler+0x266>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	0a9b      	lsrs	r3, r3, #10
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d009      	beq.n	80070ba <HAL_I2C_EV_IRQHandler+0x266>
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	089b      	lsrs	r3, r3, #2
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d103      	bne.n	80070ba <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 feda 	bl	8007e6c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070b8:	e039      	b.n	800712e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	089b      	lsrs	r3, r3, #2
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d033      	beq.n	800712e <HAL_I2C_EV_IRQHandler+0x2da>
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	0a5b      	lsrs	r3, r3, #9
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d02d      	beq.n	800712e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 ff07 	bl	8007ee6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070d8:	e029      	b.n	800712e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	099b      	lsrs	r3, r3, #6
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00f      	beq.n	8007106 <HAL_I2C_EV_IRQHandler+0x2b2>
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	0a9b      	lsrs	r3, r3, #10
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d009      	beq.n	8007106 <HAL_I2C_EV_IRQHandler+0x2b2>
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	089b      	lsrs	r3, r3, #2
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d103      	bne.n	8007106 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 ff12 	bl	8007f28 <I2C_SlaveReceive_RXNE>
 8007104:	e014      	b.n	8007130 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	089b      	lsrs	r3, r3, #2
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00e      	beq.n	8007130 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	0a5b      	lsrs	r3, r3, #9
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d008      	beq.n	8007130 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 ff40 	bl	8007fa4 <I2C_SlaveReceive_BTF>
 8007124:	e004      	b.n	8007130 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007126:	bf00      	nop
 8007128:	e002      	b.n	8007130 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800712a:	bf00      	nop
 800712c:	e000      	b.n	8007130 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800712e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007130:	3720      	adds	r7, #32
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b08a      	sub	sp, #40	; 0x28
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800714e:	2300      	movs	r3, #0
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007158:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	0a1b      	lsrs	r3, r3, #8
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00e      	beq.n	8007184 <HAL_I2C_ER_IRQHandler+0x4e>
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	0a1b      	lsrs	r3, r3, #8
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d008      	beq.n	8007184 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	f043 0301 	orr.w	r3, r3, #1
 8007178:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007182:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007184:	6a3b      	ldr	r3, [r7, #32]
 8007186:	0a5b      	lsrs	r3, r3, #9
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00e      	beq.n	80071ae <HAL_I2C_ER_IRQHandler+0x78>
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	0a1b      	lsrs	r3, r3, #8
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d008      	beq.n	80071ae <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	f043 0302 	orr.w	r3, r3, #2
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80071ac:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	0a9b      	lsrs	r3, r3, #10
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d03f      	beq.n	800723a <HAL_I2C_ER_IRQHandler+0x104>
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	0a1b      	lsrs	r3, r3, #8
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d039      	beq.n	800723a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80071c6:	7efb      	ldrb	r3, [r7, #27]
 80071c8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071de:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80071e0:	7ebb      	ldrb	r3, [r7, #26]
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	d112      	bne.n	800720c <HAL_I2C_ER_IRQHandler+0xd6>
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10f      	bne.n	800720c <HAL_I2C_ER_IRQHandler+0xd6>
 80071ec:	7cfb      	ldrb	r3, [r7, #19]
 80071ee:	2b21      	cmp	r3, #33	; 0x21
 80071f0:	d008      	beq.n	8007204 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80071f2:	7cfb      	ldrb	r3, [r7, #19]
 80071f4:	2b29      	cmp	r3, #41	; 0x29
 80071f6:	d005      	beq.n	8007204 <HAL_I2C_ER_IRQHandler+0xce>
 80071f8:	7cfb      	ldrb	r3, [r7, #19]
 80071fa:	2b28      	cmp	r3, #40	; 0x28
 80071fc:	d106      	bne.n	800720c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b21      	cmp	r3, #33	; 0x21
 8007202:	d103      	bne.n	800720c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 f869 	bl	80082dc <I2C_Slave_AF>
 800720a:	e016      	b.n	800723a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007214:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	f043 0304 	orr.w	r3, r3, #4
 800721c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800721e:	7efb      	ldrb	r3, [r7, #27]
 8007220:	2b10      	cmp	r3, #16
 8007222:	d002      	beq.n	800722a <HAL_I2C_ER_IRQHandler+0xf4>
 8007224:	7efb      	ldrb	r3, [r7, #27]
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	d107      	bne.n	800723a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007238:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	0adb      	lsrs	r3, r3, #11
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00e      	beq.n	8007264 <HAL_I2C_ER_IRQHandler+0x12e>
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	0a1b      	lsrs	r3, r3, #8
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d008      	beq.n	8007264 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	f043 0308 	orr.w	r3, r3, #8
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007262:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	2b00      	cmp	r3, #0
 8007268:	d008      	beq.n	800727c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	431a      	orrs	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f001 f8a0 	bl	80083bc <I2C_ITError>
  }
}
 800727c:	bf00      	nop
 800727e:	3728      	adds	r7, #40	; 0x28
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	70fb      	strb	r3, [r7, #3]
 80072e0:	4613      	mov	r3, r2
 80072e2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007362:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800736a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007376:	2b00      	cmp	r3, #0
 8007378:	d150      	bne.n	800741c <I2C_MasterTransmit_TXE+0xc8>
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	2b21      	cmp	r3, #33	; 0x21
 800737e:	d14d      	bne.n	800741c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b08      	cmp	r3, #8
 8007384:	d01d      	beq.n	80073c2 <I2C_MasterTransmit_TXE+0x6e>
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b20      	cmp	r3, #32
 800738a:	d01a      	beq.n	80073c2 <I2C_MasterTransmit_TXE+0x6e>
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007392:	d016      	beq.n	80073c2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073a2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2211      	movs	r2, #17
 80073a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7ff ff62 	bl	8007284 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073c0:	e060      	b.n	8007484 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073d0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073e0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b40      	cmp	r3, #64	; 0x40
 80073fa:	d107      	bne.n	800740c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff ff7d 	bl	8007304 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800740a:	e03b      	b.n	8007484 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7ff ff35 	bl	8007284 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800741a:	e033      	b.n	8007484 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	2b21      	cmp	r3, #33	; 0x21
 8007420:	d005      	beq.n	800742e <I2C_MasterTransmit_TXE+0xda>
 8007422:	7bbb      	ldrb	r3, [r7, #14]
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	d12d      	bne.n	8007484 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	2b22      	cmp	r3, #34	; 0x22
 800742c:	d12a      	bne.n	8007484 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007432:	b29b      	uxth	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d108      	bne.n	800744a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007446:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007448:	e01c      	b.n	8007484 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b40      	cmp	r3, #64	; 0x40
 8007454:	d103      	bne.n	800745e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f88e 	bl	8007578 <I2C_MemoryTransmit_TXE_BTF>
}
 800745c:	e012      	b.n	8007484 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	781a      	ldrb	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007478:	b29b      	uxth	r3, r3
 800747a:	3b01      	subs	r3, #1
 800747c:	b29a      	uxth	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007482:	e7ff      	b.n	8007484 <I2C_MasterTransmit_TXE+0x130>
 8007484:	bf00      	nop
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b21      	cmp	r3, #33	; 0x21
 80074a4:	d164      	bne.n	8007570 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d012      	beq.n	80074d6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	781a      	ldrb	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80074d4:	e04c      	b.n	8007570 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b08      	cmp	r3, #8
 80074da:	d01d      	beq.n	8007518 <I2C_MasterTransmit_BTF+0x8c>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d01a      	beq.n	8007518 <I2C_MasterTransmit_BTF+0x8c>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074e8:	d016      	beq.n	8007518 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074f8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2211      	movs	r2, #17
 80074fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2220      	movs	r2, #32
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff feb7 	bl	8007284 <HAL_I2C_MasterTxCpltCallback>
}
 8007516:	e02b      	b.n	8007570 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	685a      	ldr	r2, [r3, #4]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007526:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007536:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2220      	movs	r2, #32
 8007542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b40      	cmp	r3, #64	; 0x40
 8007550:	d107      	bne.n	8007562 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff fed2 	bl	8007304 <HAL_I2C_MemTxCpltCallback>
}
 8007560:	e006      	b.n	8007570 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7ff fe8a 	bl	8007284 <HAL_I2C_MasterTxCpltCallback>
}
 8007570:	bf00      	nop
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007586:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758c:	2b00      	cmp	r3, #0
 800758e:	d11d      	bne.n	80075cc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007594:	2b01      	cmp	r3, #1
 8007596:	d10b      	bne.n	80075b0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800759c:	b2da      	uxtb	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a8:	1c9a      	adds	r2, r3, #2
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80075ae:	e073      	b.n	8007698 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	121b      	asrs	r3, r3, #8
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80075ca:	e065      	b.n	8007698 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d10b      	bne.n	80075ec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80075ea:	e055      	b.n	8007698 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d151      	bne.n	8007698 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	2b22      	cmp	r3, #34	; 0x22
 80075f8:	d10d      	bne.n	8007616 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007608:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007614:	e040      	b.n	8007698 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761a:	b29b      	uxth	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d015      	beq.n	800764c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	2b21      	cmp	r3, #33	; 0x21
 8007624:	d112      	bne.n	800764c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	781a      	ldrb	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800764a:	e025      	b.n	8007698 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007650:	b29b      	uxth	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d120      	bne.n	8007698 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	2b21      	cmp	r3, #33	; 0x21
 800765a:	d11d      	bne.n	8007698 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800766a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800767a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff fe36 	bl	8007304 <HAL_I2C_MemTxCpltCallback>
}
 8007698:	bf00      	nop
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b22      	cmp	r3, #34	; 0x22
 80076b2:	f040 80ac 	bne.w	800780e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d921      	bls.n	8007708 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	691a      	ldr	r2, [r3, #16]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	3b01      	subs	r3, #1
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	f040 808c 	bne.w	800780e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007704:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007706:	e082      	b.n	800780e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770c:	2b02      	cmp	r3, #2
 800770e:	d075      	beq.n	80077fc <I2C_MasterReceive_RXNE+0x15c>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d002      	beq.n	800771c <I2C_MasterReceive_RXNE+0x7c>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d16f      	bne.n	80077fc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f001 fa15 	bl	8008b4c <I2C_WaitOnSTOPRequestThroughIT>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d142      	bne.n	80077ae <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007736:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007746:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	691a      	ldr	r2, [r3, #16]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007764:	b29b      	uxth	r3, r3
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	d10a      	bne.n	8007798 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff fdc1 	bl	8007318 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007796:	e03a      	b.n	800780e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2212      	movs	r2, #18
 80077a4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff fd76 	bl	8007298 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80077ac:	e02f      	b.n	800780e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	b2d2      	uxtb	r2, r2
 80077ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077da:	b29b      	uxth	r3, r3
 80077dc:	3b01      	subs	r3, #1
 80077de:	b29a      	uxth	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff fd99 	bl	800732c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80077fa:	e008      	b.n	800780e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800780a:	605a      	str	r2, [r3, #4]
}
 800780c:	e7ff      	b.n	800780e <I2C_MasterReceive_RXNE+0x16e>
 800780e:	bf00      	nop
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007822:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007828:	b29b      	uxth	r3, r3
 800782a:	2b04      	cmp	r3, #4
 800782c:	d11b      	bne.n	8007866 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800783c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	691a      	ldr	r2, [r3, #16]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	b2d2      	uxtb	r2, r2
 800784a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007864:	e0bd      	b.n	80079e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786a:	b29b      	uxth	r3, r3
 800786c:	2b03      	cmp	r3, #3
 800786e:	d129      	bne.n	80078c4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800787e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b04      	cmp	r3, #4
 8007884:	d00a      	beq.n	800789c <I2C_MasterReceive_BTF+0x86>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b02      	cmp	r3, #2
 800788a:	d007      	beq.n	800789c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800789a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	691a      	ldr	r2, [r3, #16]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	3b01      	subs	r3, #1
 80078bc:	b29a      	uxth	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80078c2:	e08e      	b.n	80079e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d176      	bne.n	80079bc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d002      	beq.n	80078da <I2C_MasterReceive_BTF+0xc4>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b10      	cmp	r3, #16
 80078d8:	d108      	bne.n	80078ec <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	e019      	b.n	8007920 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d002      	beq.n	80078f8 <I2C_MasterReceive_BTF+0xe2>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d108      	bne.n	800790a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	e00a      	b.n	8007920 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2b10      	cmp	r3, #16
 800790e:	d007      	beq.n	8007920 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800791e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691a      	ldr	r2, [r3, #16]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793c:	b29b      	uxth	r3, r3
 800793e:	3b01      	subs	r3, #1
 8007940:	b29a      	uxth	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	691a      	ldr	r2, [r3, #16]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	b2d2      	uxtb	r2, r2
 8007952:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007962:	b29b      	uxth	r3, r3
 8007964:	3b01      	subs	r3, #1
 8007966:	b29a      	uxth	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800797a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b40      	cmp	r3, #64	; 0x40
 800798e:	d10a      	bne.n	80079a6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7ff fcba 	bl	8007318 <HAL_I2C_MemRxCpltCallback>
}
 80079a4:	e01d      	b.n	80079e2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2212      	movs	r2, #18
 80079b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff fc6f 	bl	8007298 <HAL_I2C_MasterRxCpltCallback>
}
 80079ba:	e012      	b.n	80079e2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691a      	ldr	r2, [r3, #16]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80079e2:	bf00      	nop
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b40      	cmp	r3, #64	; 0x40
 80079fc:	d117      	bne.n	8007a2e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d109      	bne.n	8007a1a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a16:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007a18:	e067      	b.n	8007aea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	f043 0301 	orr.w	r3, r3, #1
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	611a      	str	r2, [r3, #16]
}
 8007a2c:	e05d      	b.n	8007aea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a36:	d133      	bne.n	8007aa0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b21      	cmp	r3, #33	; 0x21
 8007a42:	d109      	bne.n	8007a58 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a54:	611a      	str	r2, [r3, #16]
 8007a56:	e008      	b.n	8007a6a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	f043 0301 	orr.w	r3, r3, #1
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d004      	beq.n	8007a7c <I2C_Master_SB+0x92>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d108      	bne.n	8007a8e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d032      	beq.n	8007aea <I2C_Master_SB+0x100>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d02d      	beq.n	8007aea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a9c:	605a      	str	r2, [r3, #4]
}
 8007a9e:	e024      	b.n	8007aea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10e      	bne.n	8007ac6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	11db      	asrs	r3, r3, #7
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	f003 0306 	and.w	r3, r3, #6
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f063 030f 	orn	r3, r3, #15
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	611a      	str	r2, [r3, #16]
}
 8007ac4:	e011      	b.n	8007aea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d10d      	bne.n	8007aea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	11db      	asrs	r3, r3, #7
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	f003 0306 	and.w	r3, r3, #6
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	f063 030e 	orn	r3, r3, #14
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	611a      	str	r2, [r3, #16]
}
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b083      	sub	sp, #12
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d004      	beq.n	8007b1c <I2C_Master_ADD10+0x26>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d108      	bne.n	8007b2e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00c      	beq.n	8007b3e <I2C_Master_ADD10+0x48>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b3c:	605a      	str	r2, [r3, #4]
  }
}
 8007b3e:	bf00      	nop
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b091      	sub	sp, #68	; 0x44
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b66:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b22      	cmp	r3, #34	; 0x22
 8007b72:	f040 8169 	bne.w	8007e48 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10f      	bne.n	8007b9e <I2C_Master_ADDR+0x54>
 8007b7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b82:	2b40      	cmp	r3, #64	; 0x40
 8007b84:	d10b      	bne.n	8007b9e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b86:	2300      	movs	r3, #0
 8007b88:	633b      	str	r3, [r7, #48]	; 0x30
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	633b      	str	r3, [r7, #48]	; 0x30
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	633b      	str	r3, [r7, #48]	; 0x30
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	e160      	b.n	8007e60 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d11d      	bne.n	8007be2 <I2C_Master_ADDR+0x98>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007bae:	d118      	bne.n	8007be2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bd4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	651a      	str	r2, [r3, #80]	; 0x50
 8007be0:	e13e      	b.n	8007e60 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d113      	bne.n	8007c14 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bec:	2300      	movs	r3, #0
 8007bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c00:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	e115      	b.n	8007e40 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	f040 808a 	bne.w	8007d34 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c26:	d137      	bne.n	8007c98 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c36:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c46:	d113      	bne.n	8007c70 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c56:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c58:	2300      	movs	r3, #0
 8007c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	e0e7      	b.n	8007e40 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c70:	2300      	movs	r3, #0
 8007c72:	623b      	str	r3, [r7, #32]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	623b      	str	r3, [r7, #32]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	623b      	str	r3, [r7, #32]
 8007c84:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	e0d3      	b.n	8007e40 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	2b08      	cmp	r3, #8
 8007c9c:	d02e      	beq.n	8007cfc <I2C_Master_ADDR+0x1b2>
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	d02b      	beq.n	8007cfc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca6:	2b12      	cmp	r3, #18
 8007ca8:	d102      	bne.n	8007cb0 <I2C_Master_ADDR+0x166>
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d125      	bne.n	8007cfc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	2b04      	cmp	r3, #4
 8007cb4:	d00e      	beq.n	8007cd4 <I2C_Master_ADDR+0x18a>
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d00b      	beq.n	8007cd4 <I2C_Master_ADDR+0x18a>
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	2b10      	cmp	r3, #16
 8007cc0:	d008      	beq.n	8007cd4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	e007      	b.n	8007ce4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ce2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61fb      	str	r3, [r7, #28]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	61fb      	str	r3, [r7, #28]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	61fb      	str	r3, [r7, #28]
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	e0a1      	b.n	8007e40 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d0a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	61bb      	str	r3, [r7, #24]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	61bb      	str	r3, [r7, #24]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	61bb      	str	r3, [r7, #24]
 8007d20:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	e085      	b.n	8007e40 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d14d      	bne.n	8007dda <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d016      	beq.n	8007d72 <I2C_Master_ADDR+0x228>
 8007d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d013      	beq.n	8007d72 <I2C_Master_ADDR+0x228>
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4c:	2b10      	cmp	r3, #16
 8007d4e:	d010      	beq.n	8007d72 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d5e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d6e:	601a      	str	r2, [r3, #0]
 8007d70:	e007      	b.n	8007d82 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d80:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d90:	d117      	bne.n	8007dc2 <I2C_Master_ADDR+0x278>
 8007d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d98:	d00b      	beq.n	8007db2 <I2C_Master_ADDR+0x268>
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d008      	beq.n	8007db2 <I2C_Master_ADDR+0x268>
 8007da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da2:	2b08      	cmp	r3, #8
 8007da4:	d005      	beq.n	8007db2 <I2C_Master_ADDR+0x268>
 8007da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	d002      	beq.n	8007db2 <I2C_Master_ADDR+0x268>
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	d107      	bne.n	8007dc2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dc0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	617b      	str	r3, [r7, #20]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	617b      	str	r3, [r7, #20]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	699b      	ldr	r3, [r3, #24]
 8007dd4:	617b      	str	r3, [r7, #20]
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	e032      	b.n	8007e40 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007de8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df8:	d117      	bne.n	8007e2a <I2C_Master_ADDR+0x2e0>
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e00:	d00b      	beq.n	8007e1a <I2C_Master_ADDR+0x2d0>
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d008      	beq.n	8007e1a <I2C_Master_ADDR+0x2d0>
 8007e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	d005      	beq.n	8007e1a <I2C_Master_ADDR+0x2d0>
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	2b10      	cmp	r3, #16
 8007e12:	d002      	beq.n	8007e1a <I2C_Master_ADDR+0x2d0>
 8007e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e16:	2b20      	cmp	r3, #32
 8007e18:	d107      	bne.n	8007e2a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e28:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	613b      	str	r3, [r7, #16]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	613b      	str	r3, [r7, #16]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	613b      	str	r3, [r7, #16]
 8007e3e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007e46:	e00b      	b.n	8007e60 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e48:	2300      	movs	r3, #0
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
}
 8007e5e:	e7ff      	b.n	8007e60 <I2C_Master_ADDR+0x316>
 8007e60:	bf00      	nop
 8007e62:	3744      	adds	r7, #68	; 0x44
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d02b      	beq.n	8007ede <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	781a      	ldrb	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d114      	bne.n	8007ede <I2C_SlaveTransmit_TXE+0x72>
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	2b29      	cmp	r3, #41	; 0x29
 8007eb8:	d111      	bne.n	8007ede <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ec8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2221      	movs	r2, #33	; 0x21
 8007ece:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2228      	movs	r2, #40	; 0x28
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff f9e7 	bl	80072ac <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007ede:	bf00      	nop
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d011      	beq.n	8007f1c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	781a      	ldrb	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d02c      	beq.n	8007f9c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	b2d2      	uxtb	r2, r2
 8007f4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d114      	bne.n	8007f9c <I2C_SlaveReceive_RXNE+0x74>
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
 8007f74:	2b2a      	cmp	r3, #42	; 0x2a
 8007f76:	d111      	bne.n	8007f9c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f86:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2222      	movs	r2, #34	; 0x22
 8007f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2228      	movs	r2, #40	; 0x28
 8007f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff f992 	bl	80072c0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007f9c:	bf00      	nop
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d012      	beq.n	8007fdc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	691a      	ldr	r2, [r3, #16]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	b2d2      	uxtb	r2, r2
 8007fc2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008002:	2b28      	cmp	r3, #40	; 0x28
 8008004:	d127      	bne.n	8008056 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008014:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	089b      	lsrs	r3, r3, #2
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008022:	2301      	movs	r3, #1
 8008024:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	09db      	lsrs	r3, r3, #7
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d103      	bne.n	800803a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	81bb      	strh	r3, [r7, #12]
 8008038:	e002      	b.n	8008040 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008048:	89ba      	ldrh	r2, [r7, #12]
 800804a:	7bfb      	ldrb	r3, [r7, #15]
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7ff f940 	bl	80072d4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008054:	e00e      	b.n	8008074 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008056:	2300      	movs	r3, #0
 8008058:	60bb      	str	r3, [r7, #8]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	60bb      	str	r3, [r7, #8]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	60bb      	str	r3, [r7, #8]
 800806a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008074:	bf00      	nop
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800808a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800809a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800809c:	2300      	movs	r3, #0
 800809e:	60bb      	str	r3, [r7, #8]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	60bb      	str	r3, [r7, #8]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f042 0201 	orr.w	r2, r2, #1
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080d8:	d172      	bne.n	80081c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80080da:	7bfb      	ldrb	r3, [r7, #15]
 80080dc:	2b22      	cmp	r3, #34	; 0x22
 80080de:	d002      	beq.n	80080e6 <I2C_Slave_STOPF+0x6a>
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	2b2a      	cmp	r3, #42	; 0x2a
 80080e4:	d135      	bne.n	8008152 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d005      	beq.n	800810a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	f043 0204 	orr.w	r2, r3, #4
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008118:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	4618      	mov	r0, r3
 8008120:	f7fe f85a 	bl	80061d8 <HAL_DMA_GetState>
 8008124:	4603      	mov	r3, r0
 8008126:	2b01      	cmp	r3, #1
 8008128:	d049      	beq.n	80081be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812e:	4a69      	ldr	r2, [pc, #420]	; (80082d4 <I2C_Slave_STOPF+0x258>)
 8008130:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	4618      	mov	r0, r3
 8008138:	f7fd fea2 	bl	8005e80 <HAL_DMA_Abort_IT>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d03d      	beq.n	80081be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800814c:	4610      	mov	r0, r2
 800814e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008150:	e035      	b.n	80081be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	b29a      	uxth	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d005      	beq.n	8008176 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	f043 0204 	orr.w	r2, r3, #4
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008184:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe f824 	bl	80061d8 <HAL_DMA_GetState>
 8008190:	4603      	mov	r3, r0
 8008192:	2b01      	cmp	r3, #1
 8008194:	d014      	beq.n	80081c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819a:	4a4e      	ldr	r2, [pc, #312]	; (80082d4 <I2C_Slave_STOPF+0x258>)
 800819c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fd fe6c 	bl	8005e80 <HAL_DMA_Abort_IT>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d008      	beq.n	80081c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80081b8:	4610      	mov	r0, r2
 80081ba:	4798      	blx	r3
 80081bc:	e000      	b.n	80081c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80081be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d03e      	beq.n	8008248 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b04      	cmp	r3, #4
 80081d6:	d112      	bne.n	80081fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	691a      	ldr	r2, [r3, #16]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e2:	b2d2      	uxtb	r2, r2
 80081e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	3b01      	subs	r3, #1
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008208:	2b40      	cmp	r3, #64	; 0x40
 800820a:	d112      	bne.n	8008232 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	691a      	ldr	r2, [r3, #16]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008216:	b2d2      	uxtb	r2, r2
 8008218:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008228:	b29b      	uxth	r3, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	b29a      	uxth	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008236:	b29b      	uxth	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d005      	beq.n	8008248 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008240:	f043 0204 	orr.w	r2, r3, #4
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f8b3 	bl	80083bc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008256:	e039      	b.n	80082cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008258:	7bfb      	ldrb	r3, [r7, #15]
 800825a:	2b2a      	cmp	r3, #42	; 0x2a
 800825c:	d109      	bne.n	8008272 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2228      	movs	r2, #40	; 0x28
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7ff f827 	bl	80072c0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b28      	cmp	r3, #40	; 0x28
 800827c:	d111      	bne.n	80082a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a15      	ldr	r2, [pc, #84]	; (80082d8 <I2C_Slave_STOPF+0x25c>)
 8008282:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2220      	movs	r2, #32
 800828e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7ff f828 	bl	80072f0 <HAL_I2C_ListenCpltCallback>
}
 80082a0:	e014      	b.n	80082cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a6:	2b22      	cmp	r3, #34	; 0x22
 80082a8:	d002      	beq.n	80082b0 <I2C_Slave_STOPF+0x234>
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
 80082ac:	2b22      	cmp	r3, #34	; 0x22
 80082ae:	d10d      	bne.n	80082cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7fe fffa 	bl	80072c0 <HAL_I2C_SlaveRxCpltCallback>
}
 80082cc:	bf00      	nop
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	0800874d 	.word	0x0800874d
 80082d8:	ffff0000 	.word	0xffff0000

080082dc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d002      	beq.n	80082fe <I2C_Slave_AF+0x22>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	d129      	bne.n	8008352 <I2C_Slave_AF+0x76>
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
 8008300:	2b28      	cmp	r3, #40	; 0x28
 8008302:	d126      	bne.n	8008352 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a2c      	ldr	r2, [pc, #176]	; (80083b8 <I2C_Slave_AF+0xdc>)
 8008308:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008318:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008322:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008332:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2220      	movs	r2, #32
 800833e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7fe ffd0 	bl	80072f0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008350:	e02e      	b.n	80083b0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008352:	7bfb      	ldrb	r3, [r7, #15]
 8008354:	2b21      	cmp	r3, #33	; 0x21
 8008356:	d126      	bne.n	80083a6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a17      	ldr	r2, [pc, #92]	; (80083b8 <I2C_Slave_AF+0xdc>)
 800835c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2221      	movs	r2, #33	; 0x21
 8008362:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2220      	movs	r2, #32
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008382:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800838c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800839c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7fe ff84 	bl	80072ac <HAL_I2C_SlaveTxCpltCallback>
}
 80083a4:	e004      	b.n	80083b0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083ae:	615a      	str	r2, [r3, #20]
}
 80083b0:	bf00      	nop
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	ffff0000 	.word	0xffff0000

080083bc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	2b10      	cmp	r3, #16
 80083d8:	d002      	beq.n	80083e0 <I2C_ITError+0x24>
 80083da:	7bbb      	ldrb	r3, [r7, #14]
 80083dc:	2b40      	cmp	r3, #64	; 0x40
 80083de:	d10a      	bne.n	80083f6 <I2C_ITError+0x3a>
 80083e0:	7bfb      	ldrb	r3, [r7, #15]
 80083e2:	2b22      	cmp	r3, #34	; 0x22
 80083e4:	d107      	bne.n	80083f6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083f4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80083fc:	2b28      	cmp	r3, #40	; 0x28
 80083fe:	d107      	bne.n	8008410 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2228      	movs	r2, #40	; 0x28
 800840a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800840e:	e015      	b.n	800843c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800841a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800841e:	d00a      	beq.n	8008436 <I2C_ITError+0x7a>
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	2b60      	cmp	r3, #96	; 0x60
 8008424:	d007      	beq.n	8008436 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2220      	movs	r2, #32
 800842a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800844a:	d162      	bne.n	8008512 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800845a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b01      	cmp	r3, #1
 8008468:	d020      	beq.n	80084ac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846e:	4a6a      	ldr	r2, [pc, #424]	; (8008618 <I2C_ITError+0x25c>)
 8008470:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008476:	4618      	mov	r0, r3
 8008478:	f7fd fd02 	bl	8005e80 <HAL_DMA_Abort_IT>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 8089 	beq.w	8008596 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0201 	bic.w	r2, r2, #1
 8008492:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2220      	movs	r2, #32
 8008498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80084a6:	4610      	mov	r0, r2
 80084a8:	4798      	blx	r3
 80084aa:	e074      	b.n	8008596 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b0:	4a59      	ldr	r2, [pc, #356]	; (8008618 <I2C_ITError+0x25c>)
 80084b2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fd fce1 	bl	8005e80 <HAL_DMA_Abort_IT>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d068      	beq.n	8008596 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ce:	2b40      	cmp	r3, #64	; 0x40
 80084d0:	d10b      	bne.n	80084ea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	691a      	ldr	r2, [r3, #16]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084dc:	b2d2      	uxtb	r2, r2
 80084de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	1c5a      	adds	r2, r3, #1
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0201 	bic.w	r2, r2, #1
 80084f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2220      	movs	r2, #32
 80084fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800850c:	4610      	mov	r0, r2
 800850e:	4798      	blx	r3
 8008510:	e041      	b.n	8008596 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b60      	cmp	r3, #96	; 0x60
 800851c:	d125      	bne.n	800856a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008536:	2b40      	cmp	r3, #64	; 0x40
 8008538:	d10b      	bne.n	8008552 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	691a      	ldr	r2, [r3, #16]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	b2d2      	uxtb	r2, r2
 8008546:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854c:	1c5a      	adds	r2, r3, #1
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0201 	bic.w	r2, r2, #1
 8008560:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7fe feec 	bl	8007340 <HAL_I2C_AbortCpltCallback>
 8008568:	e015      	b.n	8008596 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008574:	2b40      	cmp	r3, #64	; 0x40
 8008576:	d10b      	bne.n	8008590 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	691a      	ldr	r2, [r3, #16]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008582:	b2d2      	uxtb	r2, r2
 8008584:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f7fe fecb 	bl	800732c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10e      	bne.n	80085c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d109      	bne.n	80085c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d104      	bne.n	80085c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d007      	beq.n	80085d4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085d2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085da:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	d113      	bne.n	8008610 <I2C_ITError+0x254>
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	2b28      	cmp	r3, #40	; 0x28
 80085ec:	d110      	bne.n	8008610 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a0a      	ldr	r2, [pc, #40]	; (800861c <I2C_ITError+0x260>)
 80085f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2220      	movs	r2, #32
 80085fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7fe fe70 	bl	80072f0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008610:	bf00      	nop
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	0800874d 	.word	0x0800874d
 800861c:	ffff0000 	.word	0xffff0000

08008620 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af02      	add	r7, sp, #8
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	4608      	mov	r0, r1
 800862a:	4611      	mov	r1, r2
 800862c:	461a      	mov	r2, r3
 800862e:	4603      	mov	r3, r0
 8008630:	817b      	strh	r3, [r7, #10]
 8008632:	460b      	mov	r3, r1
 8008634:	813b      	strh	r3, [r7, #8]
 8008636:	4613      	mov	r3, r2
 8008638:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008648:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	2200      	movs	r2, #0
 8008652:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 f920 	bl	800889c <I2C_WaitOnFlagUntilTimeout>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00d      	beq.n	800867e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800866c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008670:	d103      	bne.n	800867a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008678:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e05f      	b.n	800873e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800867e:	897b      	ldrh	r3, [r7, #10]
 8008680:	b2db      	uxtb	r3, r3
 8008682:	461a      	mov	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800868c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	6a3a      	ldr	r2, [r7, #32]
 8008692:	492d      	ldr	r1, [pc, #180]	; (8008748 <I2C_RequestMemoryWrite+0x128>)
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 f958 	bl	800894a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e04c      	b.n	800873e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086a4:	2300      	movs	r3, #0
 80086a6:	617b      	str	r3, [r7, #20]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	617b      	str	r3, [r7, #20]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086bc:	6a39      	ldr	r1, [r7, #32]
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 f9c2 	bl	8008a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00d      	beq.n	80086e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d107      	bne.n	80086e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e02b      	b.n	800873e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086e6:	88fb      	ldrh	r3, [r7, #6]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d105      	bne.n	80086f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086ec:	893b      	ldrh	r3, [r7, #8]
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	611a      	str	r2, [r3, #16]
 80086f6:	e021      	b.n	800873c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80086f8:	893b      	ldrh	r3, [r7, #8]
 80086fa:	0a1b      	lsrs	r3, r3, #8
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008708:	6a39      	ldr	r1, [r7, #32]
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 f99c 	bl	8008a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00d      	beq.n	8008732 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871a:	2b04      	cmp	r3, #4
 800871c:	d107      	bne.n	800872e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800872c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e005      	b.n	800873e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008732:	893b      	ldrh	r3, [r7, #8]
 8008734:	b2da      	uxtb	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	00010002 	.word	0x00010002

0800874c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008764:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008766:	4b4b      	ldr	r3, [pc, #300]	; (8008894 <I2C_DMAAbort+0x148>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	08db      	lsrs	r3, r3, #3
 800876c:	4a4a      	ldr	r2, [pc, #296]	; (8008898 <I2C_DMAAbort+0x14c>)
 800876e:	fba2 2303 	umull	r2, r3, r2, r3
 8008772:	0a1a      	lsrs	r2, r3, #8
 8008774:	4613      	mov	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	00da      	lsls	r2, r3, #3
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d106      	bne.n	8008794 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878a:	f043 0220 	orr.w	r2, r3, #32
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008792:	e00a      	b.n	80087aa <I2C_DMAAbort+0x5e>
    }
    count--;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3b01      	subs	r3, #1
 8008798:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087a8:	d0ea      	beq.n	8008780 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b6:	2200      	movs	r2, #0
 80087b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d003      	beq.n	80087ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	2200      	movs	r2, #0
 80087c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2200      	movs	r2, #0
 80087de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ec:	2200      	movs	r2, #0
 80087ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	2200      	movs	r2, #0
 80087fe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f022 0201 	bic.w	r2, r2, #1
 800880e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2b60      	cmp	r3, #96	; 0x60
 800881a:	d10e      	bne.n	800883a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	2220      	movs	r2, #32
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2200      	movs	r2, #0
 8008830:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008832:	6978      	ldr	r0, [r7, #20]
 8008834:	f7fe fd84 	bl	8007340 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008838:	e027      	b.n	800888a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800883a:	7cfb      	ldrb	r3, [r7, #19]
 800883c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008840:	2b28      	cmp	r3, #40	; 0x28
 8008842:	d117      	bne.n	8008874 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0201 	orr.w	r2, r2, #1
 8008852:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008862:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2200      	movs	r2, #0
 8008868:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2228      	movs	r2, #40	; 0x28
 800886e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008872:	e007      	b.n	8008884 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2220      	movs	r2, #32
 8008878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008884:	6978      	ldr	r0, [r7, #20]
 8008886:	f7fe fd51 	bl	800732c <HAL_I2C_ErrorCallback>
}
 800888a:	bf00      	nop
 800888c:	3718      	adds	r7, #24
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	20000000 	.word	0x20000000
 8008898:	14f8b589 	.word	0x14f8b589

0800889c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	603b      	str	r3, [r7, #0]
 80088a8:	4613      	mov	r3, r2
 80088aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088ac:	e025      	b.n	80088fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b4:	d021      	beq.n	80088fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088b6:	f7fc fff3 	bl	80058a0 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d302      	bcc.n	80088cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d116      	bne.n	80088fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e6:	f043 0220 	orr.w	r2, r3, #32
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e023      	b.n	8008942 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	0c1b      	lsrs	r3, r3, #16
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b01      	cmp	r3, #1
 8008902:	d10d      	bne.n	8008920 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	43da      	mvns	r2, r3
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	4013      	ands	r3, r2
 8008910:	b29b      	uxth	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	bf0c      	ite	eq
 8008916:	2301      	moveq	r3, #1
 8008918:	2300      	movne	r3, #0
 800891a:	b2db      	uxtb	r3, r3
 800891c:	461a      	mov	r2, r3
 800891e:	e00c      	b.n	800893a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	43da      	mvns	r2, r3
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	4013      	ands	r3, r2
 800892c:	b29b      	uxth	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	bf0c      	ite	eq
 8008932:	2301      	moveq	r3, #1
 8008934:	2300      	movne	r3, #0
 8008936:	b2db      	uxtb	r3, r3
 8008938:	461a      	mov	r2, r3
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	429a      	cmp	r2, r3
 800893e:	d0b6      	beq.n	80088ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	607a      	str	r2, [r7, #4]
 8008956:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008958:	e051      	b.n	80089fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008968:	d123      	bne.n	80089b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008978:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008982:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2220      	movs	r2, #32
 800898e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899e:	f043 0204 	orr.w	r2, r3, #4
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e046      	b.n	8008a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b8:	d021      	beq.n	80089fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ba:	f7fc ff71 	bl	80058a0 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d302      	bcc.n	80089d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d116      	bne.n	80089fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2220      	movs	r2, #32
 80089da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ea:	f043 0220 	orr.w	r2, r3, #32
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e020      	b.n	8008a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	0c1b      	lsrs	r3, r3, #16
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d10c      	bne.n	8008a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	43da      	mvns	r2, r3
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	4013      	ands	r3, r2
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	bf14      	ite	ne
 8008a1a:	2301      	movne	r3, #1
 8008a1c:	2300      	moveq	r3, #0
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	e00b      	b.n	8008a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	43da      	mvns	r2, r3
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	bf14      	ite	ne
 8008a34:	2301      	movne	r3, #1
 8008a36:	2300      	moveq	r3, #0
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d18d      	bne.n	800895a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a54:	e02d      	b.n	8008ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f000 f8aa 	bl	8008bb0 <I2C_IsAcknowledgeFailed>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e02d      	b.n	8008ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6c:	d021      	beq.n	8008ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a6e:	f7fc ff17 	bl	80058a0 <HAL_GetTick>
 8008a72:	4602      	mov	r2, r0
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d302      	bcc.n	8008a84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d116      	bne.n	8008ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2220      	movs	r2, #32
 8008a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	f043 0220 	orr.w	r2, r3, #32
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e007      	b.n	8008ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008abc:	2b80      	cmp	r3, #128	; 0x80
 8008abe:	d1ca      	bne.n	8008a56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b084      	sub	sp, #16
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	60b9      	str	r1, [r7, #8]
 8008ad4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ad6:	e02d      	b.n	8008b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 f869 	bl	8008bb0 <I2C_IsAcknowledgeFailed>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e02d      	b.n	8008b44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aee:	d021      	beq.n	8008b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af0:	f7fc fed6 	bl	80058a0 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d302      	bcc.n	8008b06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d116      	bne.n	8008b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2220      	movs	r2, #32
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b20:	f043 0220 	orr.w	r2, r3, #32
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e007      	b.n	8008b44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	f003 0304 	and.w	r3, r3, #4
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d1ca      	bne.n	8008ad8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b54:	2300      	movs	r3, #0
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008b58:	4b13      	ldr	r3, [pc, #76]	; (8008ba8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	08db      	lsrs	r3, r3, #3
 8008b5e:	4a13      	ldr	r2, [pc, #76]	; (8008bac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008b60:	fba2 2303 	umull	r2, r3, r2, r3
 8008b64:	0a1a      	lsrs	r2, r3, #8
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3b01      	subs	r3, #1
 8008b72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d107      	bne.n	8008b8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7e:	f043 0220 	orr.w	r2, r3, #32
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e008      	b.n	8008b9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b98:	d0e9      	beq.n	8008b6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	20000000 	.word	0x20000000
 8008bac:	14f8b589 	.word	0x14f8b589

08008bb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bc6:	d11b      	bne.n	8008c00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008bd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bec:	f043 0204 	orr.w	r2, r3, #4
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e000      	b.n	8008c02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008c1e:	d103      	bne.n	8008c28 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c26:	e007      	b.n	8008c38 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008c30:	d102      	bne.n	8008c38 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2208      	movs	r2, #8
 8008c36:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d101      	bne.n	8008c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e267      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d075      	beq.n	8008d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c62:	4b88      	ldr	r3, [pc, #544]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 030c 	and.w	r3, r3, #12
 8008c6a:	2b04      	cmp	r3, #4
 8008c6c:	d00c      	beq.n	8008c88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c6e:	4b85      	ldr	r3, [pc, #532]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d112      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c7a:	4b82      	ldr	r3, [pc, #520]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c86:	d10b      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c88:	4b7e      	ldr	r3, [pc, #504]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d05b      	beq.n	8008d4c <HAL_RCC_OscConfig+0x108>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d157      	bne.n	8008d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e242      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ca8:	d106      	bne.n	8008cb8 <HAL_RCC_OscConfig+0x74>
 8008caa:	4b76      	ldr	r3, [pc, #472]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a75      	ldr	r2, [pc, #468]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cb4:	6013      	str	r3, [r2, #0]
 8008cb6:	e01d      	b.n	8008cf4 <HAL_RCC_OscConfig+0xb0>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cc0:	d10c      	bne.n	8008cdc <HAL_RCC_OscConfig+0x98>
 8008cc2:	4b70      	ldr	r3, [pc, #448]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a6f      	ldr	r2, [pc, #444]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	4b6d      	ldr	r3, [pc, #436]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a6c      	ldr	r2, [pc, #432]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	e00b      	b.n	8008cf4 <HAL_RCC_OscConfig+0xb0>
 8008cdc:	4b69      	ldr	r3, [pc, #420]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a68      	ldr	r2, [pc, #416]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ce6:	6013      	str	r3, [r2, #0]
 8008ce8:	4b66      	ldr	r3, [pc, #408]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a65      	ldr	r2, [pc, #404]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d013      	beq.n	8008d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cfc:	f7fc fdd0 	bl	80058a0 <HAL_GetTick>
 8008d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d02:	e008      	b.n	8008d16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d04:	f7fc fdcc 	bl	80058a0 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	2b64      	cmp	r3, #100	; 0x64
 8008d10:	d901      	bls.n	8008d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e207      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d16:	4b5b      	ldr	r3, [pc, #364]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d0f0      	beq.n	8008d04 <HAL_RCC_OscConfig+0xc0>
 8008d22:	e014      	b.n	8008d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d24:	f7fc fdbc 	bl	80058a0 <HAL_GetTick>
 8008d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d2a:	e008      	b.n	8008d3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d2c:	f7fc fdb8 	bl	80058a0 <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	2b64      	cmp	r3, #100	; 0x64
 8008d38:	d901      	bls.n	8008d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e1f3      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d3e:	4b51      	ldr	r3, [pc, #324]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1f0      	bne.n	8008d2c <HAL_RCC_OscConfig+0xe8>
 8008d4a:	e000      	b.n	8008d4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d063      	beq.n	8008e22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d5a:	4b4a      	ldr	r3, [pc, #296]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f003 030c 	and.w	r3, r3, #12
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00b      	beq.n	8008d7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d66:	4b47      	ldr	r3, [pc, #284]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d6e:	2b08      	cmp	r3, #8
 8008d70:	d11c      	bne.n	8008dac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d72:	4b44      	ldr	r3, [pc, #272]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d116      	bne.n	8008dac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d7e:	4b41      	ldr	r3, [pc, #260]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 0302 	and.w	r3, r3, #2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <HAL_RCC_OscConfig+0x152>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d001      	beq.n	8008d96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e1c7      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d96:	4b3b      	ldr	r3, [pc, #236]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	4937      	ldr	r1, [pc, #220]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008daa:	e03a      	b.n	8008e22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d020      	beq.n	8008df6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008db4:	4b34      	ldr	r3, [pc, #208]	; (8008e88 <HAL_RCC_OscConfig+0x244>)
 8008db6:	2201      	movs	r2, #1
 8008db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dba:	f7fc fd71 	bl	80058a0 <HAL_GetTick>
 8008dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dc0:	e008      	b.n	8008dd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dc2:	f7fc fd6d 	bl	80058a0 <HAL_GetTick>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d901      	bls.n	8008dd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e1a8      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dd4:	4b2b      	ldr	r3, [pc, #172]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d0f0      	beq.n	8008dc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008de0:	4b28      	ldr	r3, [pc, #160]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	00db      	lsls	r3, r3, #3
 8008dee:	4925      	ldr	r1, [pc, #148]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	600b      	str	r3, [r1, #0]
 8008df4:	e015      	b.n	8008e22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008df6:	4b24      	ldr	r3, [pc, #144]	; (8008e88 <HAL_RCC_OscConfig+0x244>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dfc:	f7fc fd50 	bl	80058a0 <HAL_GetTick>
 8008e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e02:	e008      	b.n	8008e16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e04:	f7fc fd4c 	bl	80058a0 <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d901      	bls.n	8008e16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e187      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e16:	4b1b      	ldr	r3, [pc, #108]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1f0      	bne.n	8008e04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0308 	and.w	r3, r3, #8
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d036      	beq.n	8008e9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d016      	beq.n	8008e64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e36:	4b15      	ldr	r3, [pc, #84]	; (8008e8c <HAL_RCC_OscConfig+0x248>)
 8008e38:	2201      	movs	r2, #1
 8008e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e3c:	f7fc fd30 	bl	80058a0 <HAL_GetTick>
 8008e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e42:	e008      	b.n	8008e56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e44:	f7fc fd2c 	bl	80058a0 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d901      	bls.n	8008e56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e167      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e56:	4b0b      	ldr	r3, [pc, #44]	; (8008e84 <HAL_RCC_OscConfig+0x240>)
 8008e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e5a:	f003 0302 	and.w	r3, r3, #2
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0f0      	beq.n	8008e44 <HAL_RCC_OscConfig+0x200>
 8008e62:	e01b      	b.n	8008e9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e64:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <HAL_RCC_OscConfig+0x248>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e6a:	f7fc fd19 	bl	80058a0 <HAL_GetTick>
 8008e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e70:	e00e      	b.n	8008e90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e72:	f7fc fd15 	bl	80058a0 <HAL_GetTick>
 8008e76:	4602      	mov	r2, r0
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d907      	bls.n	8008e90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	e150      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
 8008e84:	40023800 	.word	0x40023800
 8008e88:	42470000 	.word	0x42470000
 8008e8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e90:	4b88      	ldr	r3, [pc, #544]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1ea      	bne.n	8008e72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0304 	and.w	r3, r3, #4
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 8097 	beq.w	8008fd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008eae:	4b81      	ldr	r3, [pc, #516]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10f      	bne.n	8008eda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60bb      	str	r3, [r7, #8]
 8008ebe:	4b7d      	ldr	r3, [pc, #500]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec2:	4a7c      	ldr	r2, [pc, #496]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8008eca:	4b7a      	ldr	r3, [pc, #488]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ed2:	60bb      	str	r3, [r7, #8]
 8008ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eda:	4b77      	ldr	r3, [pc, #476]	; (80090b8 <HAL_RCC_OscConfig+0x474>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d118      	bne.n	8008f18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ee6:	4b74      	ldr	r3, [pc, #464]	; (80090b8 <HAL_RCC_OscConfig+0x474>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a73      	ldr	r2, [pc, #460]	; (80090b8 <HAL_RCC_OscConfig+0x474>)
 8008eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ef2:	f7fc fcd5 	bl	80058a0 <HAL_GetTick>
 8008ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ef8:	e008      	b.n	8008f0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008efa:	f7fc fcd1 	bl	80058a0 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d901      	bls.n	8008f0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e10c      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f0c:	4b6a      	ldr	r3, [pc, #424]	; (80090b8 <HAL_RCC_OscConfig+0x474>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d0f0      	beq.n	8008efa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d106      	bne.n	8008f2e <HAL_RCC_OscConfig+0x2ea>
 8008f20:	4b64      	ldr	r3, [pc, #400]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f24:	4a63      	ldr	r2, [pc, #396]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008f26:	f043 0301 	orr.w	r3, r3, #1
 8008f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8008f2c:	e01c      	b.n	8008f68 <HAL_RCC_OscConfig+0x324>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	2b05      	cmp	r3, #5
 8008f34:	d10c      	bne.n	8008f50 <HAL_RCC_OscConfig+0x30c>
 8008f36:	4b5f      	ldr	r3, [pc, #380]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3a:	4a5e      	ldr	r2, [pc, #376]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008f3c:	f043 0304 	orr.w	r3, r3, #4
 8008f40:	6713      	str	r3, [r2, #112]	; 0x70
 8008f42:	4b5c      	ldr	r3, [pc, #368]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f46:	4a5b      	ldr	r2, [pc, #364]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008f48:	f043 0301 	orr.w	r3, r3, #1
 8008f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f4e:	e00b      	b.n	8008f68 <HAL_RCC_OscConfig+0x324>
 8008f50:	4b58      	ldr	r3, [pc, #352]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f54:	4a57      	ldr	r2, [pc, #348]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008f56:	f023 0301 	bic.w	r3, r3, #1
 8008f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8008f5c:	4b55      	ldr	r3, [pc, #340]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f60:	4a54      	ldr	r2, [pc, #336]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008f62:	f023 0304 	bic.w	r3, r3, #4
 8008f66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d015      	beq.n	8008f9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f70:	f7fc fc96 	bl	80058a0 <HAL_GetTick>
 8008f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f76:	e00a      	b.n	8008f8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f78:	f7fc fc92 	bl	80058a0 <HAL_GetTick>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d901      	bls.n	8008f8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e0cb      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f8e:	4b49      	ldr	r3, [pc, #292]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0ee      	beq.n	8008f78 <HAL_RCC_OscConfig+0x334>
 8008f9a:	e014      	b.n	8008fc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f9c:	f7fc fc80 	bl	80058a0 <HAL_GetTick>
 8008fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fa2:	e00a      	b.n	8008fba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fa4:	f7fc fc7c 	bl	80058a0 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d901      	bls.n	8008fba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e0b5      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fba:	4b3e      	ldr	r3, [pc, #248]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1ee      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d105      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fcc:	4b39      	ldr	r3, [pc, #228]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd0:	4a38      	ldr	r2, [pc, #224]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 80a1 	beq.w	8009124 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008fe2:	4b34      	ldr	r3, [pc, #208]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f003 030c 	and.w	r3, r3, #12
 8008fea:	2b08      	cmp	r3, #8
 8008fec:	d05c      	beq.n	80090a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d141      	bne.n	800907a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ff6:	4b31      	ldr	r3, [pc, #196]	; (80090bc <HAL_RCC_OscConfig+0x478>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ffc:	f7fc fc50 	bl	80058a0 <HAL_GetTick>
 8009000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009002:	e008      	b.n	8009016 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009004:	f7fc fc4c 	bl	80058a0 <HAL_GetTick>
 8009008:	4602      	mov	r2, r0
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	2b02      	cmp	r3, #2
 8009010:	d901      	bls.n	8009016 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	e087      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009016:	4b27      	ldr	r3, [pc, #156]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1f0      	bne.n	8009004 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	69da      	ldr	r2, [r3, #28]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	431a      	orrs	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009030:	019b      	lsls	r3, r3, #6
 8009032:	431a      	orrs	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009038:	085b      	lsrs	r3, r3, #1
 800903a:	3b01      	subs	r3, #1
 800903c:	041b      	lsls	r3, r3, #16
 800903e:	431a      	orrs	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009044:	061b      	lsls	r3, r3, #24
 8009046:	491b      	ldr	r1, [pc, #108]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 8009048:	4313      	orrs	r3, r2
 800904a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800904c:	4b1b      	ldr	r3, [pc, #108]	; (80090bc <HAL_RCC_OscConfig+0x478>)
 800904e:	2201      	movs	r2, #1
 8009050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009052:	f7fc fc25 	bl	80058a0 <HAL_GetTick>
 8009056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009058:	e008      	b.n	800906c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800905a:	f7fc fc21 	bl	80058a0 <HAL_GetTick>
 800905e:	4602      	mov	r2, r0
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	2b02      	cmp	r3, #2
 8009066:	d901      	bls.n	800906c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e05c      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800906c:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d0f0      	beq.n	800905a <HAL_RCC_OscConfig+0x416>
 8009078:	e054      	b.n	8009124 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800907a:	4b10      	ldr	r3, [pc, #64]	; (80090bc <HAL_RCC_OscConfig+0x478>)
 800907c:	2200      	movs	r2, #0
 800907e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009080:	f7fc fc0e 	bl	80058a0 <HAL_GetTick>
 8009084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009086:	e008      	b.n	800909a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009088:	f7fc fc0a 	bl	80058a0 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	2b02      	cmp	r3, #2
 8009094:	d901      	bls.n	800909a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	e045      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800909a:	4b06      	ldr	r3, [pc, #24]	; (80090b4 <HAL_RCC_OscConfig+0x470>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1f0      	bne.n	8009088 <HAL_RCC_OscConfig+0x444>
 80090a6:	e03d      	b.n	8009124 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d107      	bne.n	80090c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e038      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
 80090b4:	40023800 	.word	0x40023800
 80090b8:	40007000 	.word	0x40007000
 80090bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80090c0:	4b1b      	ldr	r3, [pc, #108]	; (8009130 <HAL_RCC_OscConfig+0x4ec>)
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d028      	beq.n	8009120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090d8:	429a      	cmp	r2, r3
 80090da:	d121      	bne.n	8009120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d11a      	bne.n	8009120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80090f0:	4013      	ands	r3, r2
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d111      	bne.n	8009120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009106:	085b      	lsrs	r3, r3, #1
 8009108:	3b01      	subs	r3, #1
 800910a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800910c:	429a      	cmp	r2, r3
 800910e:	d107      	bne.n	8009120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800911c:	429a      	cmp	r2, r3
 800911e:	d001      	beq.n	8009124 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e000      	b.n	8009126 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	40023800 	.word	0x40023800

08009134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e0cc      	b.n	80092e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009148:	4b68      	ldr	r3, [pc, #416]	; (80092ec <HAL_RCC_ClockConfig+0x1b8>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0307 	and.w	r3, r3, #7
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	d90c      	bls.n	8009170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009156:	4b65      	ldr	r3, [pc, #404]	; (80092ec <HAL_RCC_ClockConfig+0x1b8>)
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	b2d2      	uxtb	r2, r2
 800915c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800915e:	4b63      	ldr	r3, [pc, #396]	; (80092ec <HAL_RCC_ClockConfig+0x1b8>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	429a      	cmp	r2, r3
 800916a:	d001      	beq.n	8009170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	e0b8      	b.n	80092e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 0302 	and.w	r3, r3, #2
 8009178:	2b00      	cmp	r3, #0
 800917a:	d020      	beq.n	80091be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	d005      	beq.n	8009194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009188:	4b59      	ldr	r3, [pc, #356]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	4a58      	ldr	r2, [pc, #352]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 800918e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0308 	and.w	r3, r3, #8
 800919c:	2b00      	cmp	r3, #0
 800919e:	d005      	beq.n	80091ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091a0:	4b53      	ldr	r3, [pc, #332]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	4a52      	ldr	r2, [pc, #328]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 80091a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80091aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091ac:	4b50      	ldr	r3, [pc, #320]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	494d      	ldr	r1, [pc, #308]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d044      	beq.n	8009254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d107      	bne.n	80091e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091d2:	4b47      	ldr	r3, [pc, #284]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d119      	bne.n	8009212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e07f      	b.n	80092e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d003      	beq.n	80091f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d107      	bne.n	8009202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091f2:	4b3f      	ldr	r3, [pc, #252]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d109      	bne.n	8009212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e06f      	b.n	80092e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009202:	4b3b      	ldr	r3, [pc, #236]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 0302 	and.w	r3, r3, #2
 800920a:	2b00      	cmp	r3, #0
 800920c:	d101      	bne.n	8009212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e067      	b.n	80092e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009212:	4b37      	ldr	r3, [pc, #220]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f023 0203 	bic.w	r2, r3, #3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	4934      	ldr	r1, [pc, #208]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009220:	4313      	orrs	r3, r2
 8009222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009224:	f7fc fb3c 	bl	80058a0 <HAL_GetTick>
 8009228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800922a:	e00a      	b.n	8009242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800922c:	f7fc fb38 	bl	80058a0 <HAL_GetTick>
 8009230:	4602      	mov	r2, r0
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	f241 3288 	movw	r2, #5000	; 0x1388
 800923a:	4293      	cmp	r3, r2
 800923c:	d901      	bls.n	8009242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e04f      	b.n	80092e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009242:	4b2b      	ldr	r3, [pc, #172]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f003 020c 	and.w	r2, r3, #12
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	429a      	cmp	r2, r3
 8009252:	d1eb      	bne.n	800922c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009254:	4b25      	ldr	r3, [pc, #148]	; (80092ec <HAL_RCC_ClockConfig+0x1b8>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	429a      	cmp	r2, r3
 8009260:	d20c      	bcs.n	800927c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009262:	4b22      	ldr	r3, [pc, #136]	; (80092ec <HAL_RCC_ClockConfig+0x1b8>)
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	b2d2      	uxtb	r2, r2
 8009268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800926a:	4b20      	ldr	r3, [pc, #128]	; (80092ec <HAL_RCC_ClockConfig+0x1b8>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0307 	and.w	r3, r3, #7
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	429a      	cmp	r2, r3
 8009276:	d001      	beq.n	800927c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e032      	b.n	80092e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 0304 	and.w	r3, r3, #4
 8009284:	2b00      	cmp	r3, #0
 8009286:	d008      	beq.n	800929a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009288:	4b19      	ldr	r3, [pc, #100]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	4916      	ldr	r1, [pc, #88]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009296:	4313      	orrs	r3, r2
 8009298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0308 	and.w	r3, r3, #8
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d009      	beq.n	80092ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092a6:	4b12      	ldr	r3, [pc, #72]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	490e      	ldr	r1, [pc, #56]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80092ba:	f000 f821 	bl	8009300 <HAL_RCC_GetSysClockFreq>
 80092be:	4602      	mov	r2, r0
 80092c0:	4b0b      	ldr	r3, [pc, #44]	; (80092f0 <HAL_RCC_ClockConfig+0x1bc>)
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	091b      	lsrs	r3, r3, #4
 80092c6:	f003 030f 	and.w	r3, r3, #15
 80092ca:	490a      	ldr	r1, [pc, #40]	; (80092f4 <HAL_RCC_ClockConfig+0x1c0>)
 80092cc:	5ccb      	ldrb	r3, [r1, r3]
 80092ce:	fa22 f303 	lsr.w	r3, r2, r3
 80092d2:	4a09      	ldr	r2, [pc, #36]	; (80092f8 <HAL_RCC_ClockConfig+0x1c4>)
 80092d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80092d6:	4b09      	ldr	r3, [pc, #36]	; (80092fc <HAL_RCC_ClockConfig+0x1c8>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fc fa9c 	bl	8005818 <HAL_InitTick>

  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	40023c00 	.word	0x40023c00
 80092f0:	40023800 	.word	0x40023800
 80092f4:	0800f264 	.word	0x0800f264
 80092f8:	20000000 	.word	0x20000000
 80092fc:	20000004 	.word	0x20000004

08009300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009304:	b090      	sub	sp, #64	; 0x40
 8009306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	637b      	str	r3, [r7, #52]	; 0x34
 800930c:	2300      	movs	r3, #0
 800930e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009310:	2300      	movs	r3, #0
 8009312:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8009314:	2300      	movs	r3, #0
 8009316:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009318:	4b59      	ldr	r3, [pc, #356]	; (8009480 <HAL_RCC_GetSysClockFreq+0x180>)
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f003 030c 	and.w	r3, r3, #12
 8009320:	2b08      	cmp	r3, #8
 8009322:	d00d      	beq.n	8009340 <HAL_RCC_GetSysClockFreq+0x40>
 8009324:	2b08      	cmp	r3, #8
 8009326:	f200 80a1 	bhi.w	800946c <HAL_RCC_GetSysClockFreq+0x16c>
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <HAL_RCC_GetSysClockFreq+0x34>
 800932e:	2b04      	cmp	r3, #4
 8009330:	d003      	beq.n	800933a <HAL_RCC_GetSysClockFreq+0x3a>
 8009332:	e09b      	b.n	800946c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009334:	4b53      	ldr	r3, [pc, #332]	; (8009484 <HAL_RCC_GetSysClockFreq+0x184>)
 8009336:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8009338:	e09b      	b.n	8009472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800933a:	4b53      	ldr	r3, [pc, #332]	; (8009488 <HAL_RCC_GetSysClockFreq+0x188>)
 800933c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800933e:	e098      	b.n	8009472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009340:	4b4f      	ldr	r3, [pc, #316]	; (8009480 <HAL_RCC_GetSysClockFreq+0x180>)
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009348:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800934a:	4b4d      	ldr	r3, [pc, #308]	; (8009480 <HAL_RCC_GetSysClockFreq+0x180>)
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d028      	beq.n	80093a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009356:	4b4a      	ldr	r3, [pc, #296]	; (8009480 <HAL_RCC_GetSysClockFreq+0x180>)
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	099b      	lsrs	r3, r3, #6
 800935c:	2200      	movs	r2, #0
 800935e:	623b      	str	r3, [r7, #32]
 8009360:	627a      	str	r2, [r7, #36]	; 0x24
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009368:	2100      	movs	r1, #0
 800936a:	4b47      	ldr	r3, [pc, #284]	; (8009488 <HAL_RCC_GetSysClockFreq+0x188>)
 800936c:	fb03 f201 	mul.w	r2, r3, r1
 8009370:	2300      	movs	r3, #0
 8009372:	fb00 f303 	mul.w	r3, r0, r3
 8009376:	4413      	add	r3, r2
 8009378:	4a43      	ldr	r2, [pc, #268]	; (8009488 <HAL_RCC_GetSysClockFreq+0x188>)
 800937a:	fba0 1202 	umull	r1, r2, r0, r2
 800937e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009380:	460a      	mov	r2, r1
 8009382:	62ba      	str	r2, [r7, #40]	; 0x28
 8009384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009386:	4413      	add	r3, r2
 8009388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800938a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938c:	2200      	movs	r2, #0
 800938e:	61bb      	str	r3, [r7, #24]
 8009390:	61fa      	str	r2, [r7, #28]
 8009392:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009396:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800939a:	f7f7 fc5d 	bl	8000c58 <__aeabi_uldivmod>
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	4613      	mov	r3, r2
 80093a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a6:	e053      	b.n	8009450 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093a8:	4b35      	ldr	r3, [pc, #212]	; (8009480 <HAL_RCC_GetSysClockFreq+0x180>)
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	099b      	lsrs	r3, r3, #6
 80093ae:	2200      	movs	r2, #0
 80093b0:	613b      	str	r3, [r7, #16]
 80093b2:	617a      	str	r2, [r7, #20]
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80093ba:	f04f 0b00 	mov.w	fp, #0
 80093be:	4652      	mov	r2, sl
 80093c0:	465b      	mov	r3, fp
 80093c2:	f04f 0000 	mov.w	r0, #0
 80093c6:	f04f 0100 	mov.w	r1, #0
 80093ca:	0159      	lsls	r1, r3, #5
 80093cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80093d0:	0150      	lsls	r0, r2, #5
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	ebb2 080a 	subs.w	r8, r2, sl
 80093da:	eb63 090b 	sbc.w	r9, r3, fp
 80093de:	f04f 0200 	mov.w	r2, #0
 80093e2:	f04f 0300 	mov.w	r3, #0
 80093e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80093ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80093ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80093f2:	ebb2 0408 	subs.w	r4, r2, r8
 80093f6:	eb63 0509 	sbc.w	r5, r3, r9
 80093fa:	f04f 0200 	mov.w	r2, #0
 80093fe:	f04f 0300 	mov.w	r3, #0
 8009402:	00eb      	lsls	r3, r5, #3
 8009404:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009408:	00e2      	lsls	r2, r4, #3
 800940a:	4614      	mov	r4, r2
 800940c:	461d      	mov	r5, r3
 800940e:	eb14 030a 	adds.w	r3, r4, sl
 8009412:	603b      	str	r3, [r7, #0]
 8009414:	eb45 030b 	adc.w	r3, r5, fp
 8009418:	607b      	str	r3, [r7, #4]
 800941a:	f04f 0200 	mov.w	r2, #0
 800941e:	f04f 0300 	mov.w	r3, #0
 8009422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009426:	4629      	mov	r1, r5
 8009428:	028b      	lsls	r3, r1, #10
 800942a:	4621      	mov	r1, r4
 800942c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009430:	4621      	mov	r1, r4
 8009432:	028a      	lsls	r2, r1, #10
 8009434:	4610      	mov	r0, r2
 8009436:	4619      	mov	r1, r3
 8009438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800943a:	2200      	movs	r2, #0
 800943c:	60bb      	str	r3, [r7, #8]
 800943e:	60fa      	str	r2, [r7, #12]
 8009440:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009444:	f7f7 fc08 	bl	8000c58 <__aeabi_uldivmod>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4613      	mov	r3, r2
 800944e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009450:	4b0b      	ldr	r3, [pc, #44]	; (8009480 <HAL_RCC_GetSysClockFreq+0x180>)
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	0c1b      	lsrs	r3, r3, #16
 8009456:	f003 0303 	and.w	r3, r3, #3
 800945a:	3301      	adds	r3, #1
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	fbb2 f3f3 	udiv	r3, r2, r3
 8009468:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800946a:	e002      	b.n	8009472 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800946c:	4b05      	ldr	r3, [pc, #20]	; (8009484 <HAL_RCC_GetSysClockFreq+0x184>)
 800946e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009474:	4618      	mov	r0, r3
 8009476:	3740      	adds	r7, #64	; 0x40
 8009478:	46bd      	mov	sp, r7
 800947a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800947e:	bf00      	nop
 8009480:	40023800 	.word	0x40023800
 8009484:	00f42400 	.word	0x00f42400
 8009488:	017d7840 	.word	0x017d7840

0800948c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800948c:	b480      	push	{r7}
 800948e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009490:	4b03      	ldr	r3, [pc, #12]	; (80094a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009492:	681b      	ldr	r3, [r3, #0]
}
 8009494:	4618      	mov	r0, r3
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	20000000 	.word	0x20000000

080094a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80094a8:	f7ff fff0 	bl	800948c <HAL_RCC_GetHCLKFreq>
 80094ac:	4602      	mov	r2, r0
 80094ae:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	0a9b      	lsrs	r3, r3, #10
 80094b4:	f003 0307 	and.w	r3, r3, #7
 80094b8:	4903      	ldr	r1, [pc, #12]	; (80094c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094ba:	5ccb      	ldrb	r3, [r1, r3]
 80094bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	40023800 	.word	0x40023800
 80094c8:	0800f274 	.word	0x0800f274

080094cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80094d0:	f7ff ffdc 	bl	800948c <HAL_RCC_GetHCLKFreq>
 80094d4:	4602      	mov	r2, r0
 80094d6:	4b05      	ldr	r3, [pc, #20]	; (80094ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	0b5b      	lsrs	r3, r3, #13
 80094dc:	f003 0307 	and.w	r3, r3, #7
 80094e0:	4903      	ldr	r1, [pc, #12]	; (80094f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094e2:	5ccb      	ldrb	r3, [r1, r3]
 80094e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	40023800 	.word	0x40023800
 80094f0:	0800f274 	.word	0x0800f274

080094f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e041      	b.n	800958a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	d106      	bne.n	8009520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7fb fd8e 	bl	800503c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2202      	movs	r2, #2
 8009524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	3304      	adds	r3, #4
 8009530:	4619      	mov	r1, r3
 8009532:	4610      	mov	r0, r2
 8009534:	f000 fd7e 	bl	800a034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d001      	beq.n	80095ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e044      	b.n	8009636 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2202      	movs	r2, #2
 80095b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68da      	ldr	r2, [r3, #12]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f042 0201 	orr.w	r2, r2, #1
 80095c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a1e      	ldr	r2, [pc, #120]	; (8009644 <HAL_TIM_Base_Start_IT+0xb0>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d018      	beq.n	8009600 <HAL_TIM_Base_Start_IT+0x6c>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095d6:	d013      	beq.n	8009600 <HAL_TIM_Base_Start_IT+0x6c>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a1a      	ldr	r2, [pc, #104]	; (8009648 <HAL_TIM_Base_Start_IT+0xb4>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d00e      	beq.n	8009600 <HAL_TIM_Base_Start_IT+0x6c>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a19      	ldr	r2, [pc, #100]	; (800964c <HAL_TIM_Base_Start_IT+0xb8>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d009      	beq.n	8009600 <HAL_TIM_Base_Start_IT+0x6c>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a17      	ldr	r2, [pc, #92]	; (8009650 <HAL_TIM_Base_Start_IT+0xbc>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d004      	beq.n	8009600 <HAL_TIM_Base_Start_IT+0x6c>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a16      	ldr	r2, [pc, #88]	; (8009654 <HAL_TIM_Base_Start_IT+0xc0>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d111      	bne.n	8009624 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f003 0307 	and.w	r3, r3, #7
 800960a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b06      	cmp	r3, #6
 8009610:	d010      	beq.n	8009634 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f042 0201 	orr.w	r2, r2, #1
 8009620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009622:	e007      	b.n	8009634 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f042 0201 	orr.w	r2, r2, #1
 8009632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	40010000 	.word	0x40010000
 8009648:	40000400 	.word	0x40000400
 800964c:	40000800 	.word	0x40000800
 8009650:	40000c00 	.word	0x40000c00
 8009654:	40014000 	.word	0x40014000

08009658 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e041      	b.n	80096ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b00      	cmp	r3, #0
 8009674:	d106      	bne.n	8009684 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7fb fdb6 	bl	80051f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2202      	movs	r2, #2
 8009688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3304      	adds	r3, #4
 8009694:	4619      	mov	r1, r3
 8009696:	4610      	mov	r0, r2
 8009698:	f000 fccc 	bl	800a034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d109      	bne.n	800971c <HAL_TIM_PWM_Start+0x24>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b01      	cmp	r3, #1
 8009712:	bf14      	ite	ne
 8009714:	2301      	movne	r3, #1
 8009716:	2300      	moveq	r3, #0
 8009718:	b2db      	uxtb	r3, r3
 800971a:	e022      	b.n	8009762 <HAL_TIM_PWM_Start+0x6a>
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	2b04      	cmp	r3, #4
 8009720:	d109      	bne.n	8009736 <HAL_TIM_PWM_Start+0x3e>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b01      	cmp	r3, #1
 800972c:	bf14      	ite	ne
 800972e:	2301      	movne	r3, #1
 8009730:	2300      	moveq	r3, #0
 8009732:	b2db      	uxtb	r3, r3
 8009734:	e015      	b.n	8009762 <HAL_TIM_PWM_Start+0x6a>
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2b08      	cmp	r3, #8
 800973a:	d109      	bne.n	8009750 <HAL_TIM_PWM_Start+0x58>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009742:	b2db      	uxtb	r3, r3
 8009744:	2b01      	cmp	r3, #1
 8009746:	bf14      	ite	ne
 8009748:	2301      	movne	r3, #1
 800974a:	2300      	moveq	r3, #0
 800974c:	b2db      	uxtb	r3, r3
 800974e:	e008      	b.n	8009762 <HAL_TIM_PWM_Start+0x6a>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b01      	cmp	r3, #1
 800975a:	bf14      	ite	ne
 800975c:	2301      	movne	r3, #1
 800975e:	2300      	moveq	r3, #0
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e068      	b.n	800983c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d104      	bne.n	800977a <HAL_TIM_PWM_Start+0x82>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2202      	movs	r2, #2
 8009774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009778:	e013      	b.n	80097a2 <HAL_TIM_PWM_Start+0xaa>
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b04      	cmp	r3, #4
 800977e:	d104      	bne.n	800978a <HAL_TIM_PWM_Start+0x92>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2202      	movs	r2, #2
 8009784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009788:	e00b      	b.n	80097a2 <HAL_TIM_PWM_Start+0xaa>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2b08      	cmp	r3, #8
 800978e:	d104      	bne.n	800979a <HAL_TIM_PWM_Start+0xa2>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2202      	movs	r2, #2
 8009794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009798:	e003      	b.n	80097a2 <HAL_TIM_PWM_Start+0xaa>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2202      	movs	r2, #2
 800979e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2201      	movs	r2, #1
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 fee8 	bl	800a580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a23      	ldr	r2, [pc, #140]	; (8009844 <HAL_TIM_PWM_Start+0x14c>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d107      	bne.n	80097ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a1d      	ldr	r2, [pc, #116]	; (8009844 <HAL_TIM_PWM_Start+0x14c>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d018      	beq.n	8009806 <HAL_TIM_PWM_Start+0x10e>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097dc:	d013      	beq.n	8009806 <HAL_TIM_PWM_Start+0x10e>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a19      	ldr	r2, [pc, #100]	; (8009848 <HAL_TIM_PWM_Start+0x150>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d00e      	beq.n	8009806 <HAL_TIM_PWM_Start+0x10e>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a17      	ldr	r2, [pc, #92]	; (800984c <HAL_TIM_PWM_Start+0x154>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d009      	beq.n	8009806 <HAL_TIM_PWM_Start+0x10e>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a16      	ldr	r2, [pc, #88]	; (8009850 <HAL_TIM_PWM_Start+0x158>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d004      	beq.n	8009806 <HAL_TIM_PWM_Start+0x10e>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a14      	ldr	r2, [pc, #80]	; (8009854 <HAL_TIM_PWM_Start+0x15c>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d111      	bne.n	800982a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f003 0307 	and.w	r3, r3, #7
 8009810:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2b06      	cmp	r3, #6
 8009816:	d010      	beq.n	800983a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0201 	orr.w	r2, r2, #1
 8009826:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009828:	e007      	b.n	800983a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f042 0201 	orr.w	r2, r2, #1
 8009838:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	40010000 	.word	0x40010000
 8009848:	40000400 	.word	0x40000400
 800984c:	40000800 	.word	0x40000800
 8009850:	40000c00 	.word	0x40000c00
 8009854:	40014000 	.word	0x40014000

08009858 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d101      	bne.n	800986c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e097      	b.n	800999c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d106      	bne.n	8009886 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7fb fc1b 	bl	80050bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2202      	movs	r2, #2
 800988a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	6812      	ldr	r2, [r2, #0]
 8009898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800989c:	f023 0307 	bic.w	r3, r3, #7
 80098a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	3304      	adds	r3, #4
 80098aa:	4619      	mov	r1, r3
 80098ac:	4610      	mov	r0, r2
 80098ae:	f000 fbc1 	bl	800a034 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098da:	f023 0303 	bic.w	r3, r3, #3
 80098de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	689a      	ldr	r2, [r3, #8]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	021b      	lsls	r3, r3, #8
 80098ea:	4313      	orrs	r3, r2
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80098f8:	f023 030c 	bic.w	r3, r3, #12
 80098fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009904:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	68da      	ldr	r2, [r3, #12]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	021b      	lsls	r3, r3, #8
 8009914:	4313      	orrs	r3, r2
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	4313      	orrs	r3, r2
 800991a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	011a      	lsls	r2, r3, #4
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	031b      	lsls	r3, r3, #12
 8009928:	4313      	orrs	r3, r2
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	4313      	orrs	r3, r2
 800992e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009936:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800993e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	685a      	ldr	r2, [r3, #4]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	4313      	orrs	r3, r2
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80099bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80099cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d110      	bne.n	80099f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d102      	bne.n	80099e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80099da:	7b7b      	ldrb	r3, [r7, #13]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d001      	beq.n	80099e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e069      	b.n	8009ab8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2202      	movs	r2, #2
 80099f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099f4:	e031      	b.n	8009a5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	d110      	bne.n	8009a1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d102      	bne.n	8009a08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a02:	7b3b      	ldrb	r3, [r7, #12]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d001      	beq.n	8009a0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e055      	b.n	8009ab8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2202      	movs	r2, #2
 8009a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a1c:	e01d      	b.n	8009a5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d108      	bne.n	8009a36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d105      	bne.n	8009a36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a2a:	7b7b      	ldrb	r3, [r7, #13]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d102      	bne.n	8009a36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a30:	7b3b      	ldrb	r3, [r7, #12]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d001      	beq.n	8009a3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e03e      	b.n	8009ab8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2202      	movs	r2, #2
 8009a46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2202      	movs	r2, #2
 8009a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d003      	beq.n	8009a68 <HAL_TIM_Encoder_Start+0xc4>
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	d008      	beq.n	8009a78 <HAL_TIM_Encoder_Start+0xd4>
 8009a66:	e00f      	b.n	8009a88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	2100      	movs	r1, #0
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 fd85 	bl	800a580 <TIM_CCxChannelCmd>
      break;
 8009a76:	e016      	b.n	8009aa6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	2104      	movs	r1, #4
 8009a80:	4618      	mov	r0, r3
 8009a82:	f000 fd7d 	bl	800a580 <TIM_CCxChannelCmd>
      break;
 8009a86:	e00e      	b.n	8009aa6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	2100      	movs	r1, #0
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fd75 	bl	800a580 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	2104      	movs	r1, #4
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 fd6e 	bl	800a580 <TIM_CCxChannelCmd>
      break;
 8009aa4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f042 0201 	orr.w	r2, r2, #1
 8009ab4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	f003 0302 	and.w	r3, r3, #2
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d122      	bne.n	8009b1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d11b      	bne.n	8009b1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f06f 0202 	mvn.w	r2, #2
 8009aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	f003 0303 	and.w	r3, r3, #3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d003      	beq.n	8009b0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 fa77 	bl	8009ff6 <HAL_TIM_IC_CaptureCallback>
 8009b08:	e005      	b.n	8009b16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fa69 	bl	8009fe2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fa7a 	bl	800a00a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	f003 0304 	and.w	r3, r3, #4
 8009b26:	2b04      	cmp	r3, #4
 8009b28:	d122      	bne.n	8009b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	f003 0304 	and.w	r3, r3, #4
 8009b34:	2b04      	cmp	r3, #4
 8009b36:	d11b      	bne.n	8009b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f06f 0204 	mvn.w	r2, #4
 8009b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2202      	movs	r2, #2
 8009b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d003      	beq.n	8009b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fa4d 	bl	8009ff6 <HAL_TIM_IC_CaptureCallback>
 8009b5c:	e005      	b.n	8009b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fa3f 	bl	8009fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fa50 	bl	800a00a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	f003 0308 	and.w	r3, r3, #8
 8009b7a:	2b08      	cmp	r3, #8
 8009b7c:	d122      	bne.n	8009bc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	f003 0308 	and.w	r3, r3, #8
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	d11b      	bne.n	8009bc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f06f 0208 	mvn.w	r2, #8
 8009b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2204      	movs	r2, #4
 8009b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	f003 0303 	and.w	r3, r3, #3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d003      	beq.n	8009bb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fa23 	bl	8009ff6 <HAL_TIM_IC_CaptureCallback>
 8009bb0:	e005      	b.n	8009bbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fa15 	bl	8009fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fa26 	bl	800a00a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	f003 0310 	and.w	r3, r3, #16
 8009bce:	2b10      	cmp	r3, #16
 8009bd0:	d122      	bne.n	8009c18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	f003 0310 	and.w	r3, r3, #16
 8009bdc:	2b10      	cmp	r3, #16
 8009bde:	d11b      	bne.n	8009c18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f06f 0210 	mvn.w	r2, #16
 8009be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2208      	movs	r2, #8
 8009bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	69db      	ldr	r3, [r3, #28]
 8009bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d003      	beq.n	8009c06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f9f9 	bl	8009ff6 <HAL_TIM_IC_CaptureCallback>
 8009c04:	e005      	b.n	8009c12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f9eb 	bl	8009fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f9fc 	bl	800a00a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d10e      	bne.n	8009c44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	f003 0301 	and.w	r3, r3, #1
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d107      	bne.n	8009c44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f06f 0201 	mvn.w	r2, #1
 8009c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7f9 f92c 	bl	8002e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c4e:	2b80      	cmp	r3, #128	; 0x80
 8009c50:	d10e      	bne.n	8009c70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c5c:	2b80      	cmp	r3, #128	; 0x80
 8009c5e:	d107      	bne.n	8009c70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fd26 	bl	800a6bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7a:	2b40      	cmp	r3, #64	; 0x40
 8009c7c:	d10e      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c88:	2b40      	cmp	r3, #64	; 0x40
 8009c8a:	d107      	bne.n	8009c9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f9c1 	bl	800a01e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	f003 0320 	and.w	r3, r3, #32
 8009ca6:	2b20      	cmp	r3, #32
 8009ca8:	d10e      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f003 0320 	and.w	r3, r3, #32
 8009cb4:	2b20      	cmp	r3, #32
 8009cb6:	d107      	bne.n	8009cc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f06f 0220 	mvn.w	r2, #32
 8009cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fcf0 	bl	800a6a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cc8:	bf00      	nop
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d101      	bne.n	8009cee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009cea:	2302      	movs	r3, #2
 8009cec:	e0ae      	b.n	8009e4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b0c      	cmp	r3, #12
 8009cfa:	f200 809f 	bhi.w	8009e3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009cfe:	a201      	add	r2, pc, #4	; (adr r2, 8009d04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d04:	08009d39 	.word	0x08009d39
 8009d08:	08009e3d 	.word	0x08009e3d
 8009d0c:	08009e3d 	.word	0x08009e3d
 8009d10:	08009e3d 	.word	0x08009e3d
 8009d14:	08009d79 	.word	0x08009d79
 8009d18:	08009e3d 	.word	0x08009e3d
 8009d1c:	08009e3d 	.word	0x08009e3d
 8009d20:	08009e3d 	.word	0x08009e3d
 8009d24:	08009dbb 	.word	0x08009dbb
 8009d28:	08009e3d 	.word	0x08009e3d
 8009d2c:	08009e3d 	.word	0x08009e3d
 8009d30:	08009e3d 	.word	0x08009e3d
 8009d34:	08009dfb 	.word	0x08009dfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68b9      	ldr	r1, [r7, #8]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 f9f8 	bl	800a134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	699a      	ldr	r2, [r3, #24]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f042 0208 	orr.w	r2, r2, #8
 8009d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	699a      	ldr	r2, [r3, #24]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f022 0204 	bic.w	r2, r2, #4
 8009d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6999      	ldr	r1, [r3, #24]
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	691a      	ldr	r2, [r3, #16]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	430a      	orrs	r2, r1
 8009d74:	619a      	str	r2, [r3, #24]
      break;
 8009d76:	e064      	b.n	8009e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68b9      	ldr	r1, [r7, #8]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 fa3e 	bl	800a200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	699a      	ldr	r2, [r3, #24]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	699a      	ldr	r2, [r3, #24]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6999      	ldr	r1, [r3, #24]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	021a      	lsls	r2, r3, #8
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	430a      	orrs	r2, r1
 8009db6:	619a      	str	r2, [r3, #24]
      break;
 8009db8:	e043      	b.n	8009e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68b9      	ldr	r1, [r7, #8]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 fa89 	bl	800a2d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	69da      	ldr	r2, [r3, #28]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f042 0208 	orr.w	r2, r2, #8
 8009dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	69da      	ldr	r2, [r3, #28]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f022 0204 	bic.w	r2, r2, #4
 8009de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	69d9      	ldr	r1, [r3, #28]
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	691a      	ldr	r2, [r3, #16]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	430a      	orrs	r2, r1
 8009df6:	61da      	str	r2, [r3, #28]
      break;
 8009df8:	e023      	b.n	8009e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68b9      	ldr	r1, [r7, #8]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f000 fad3 	bl	800a3ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	69da      	ldr	r2, [r3, #28]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	69da      	ldr	r2, [r3, #28]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	69d9      	ldr	r1, [r3, #28]
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	021a      	lsls	r2, r3, #8
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	61da      	str	r2, [r3, #28]
      break;
 8009e3a:	e002      	b.n	8009e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3718      	adds	r7, #24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d101      	bne.n	8009e70 <HAL_TIM_ConfigClockSource+0x1c>
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	e0b4      	b.n	8009fda <HAL_TIM_ConfigClockSource+0x186>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ea8:	d03e      	beq.n	8009f28 <HAL_TIM_ConfigClockSource+0xd4>
 8009eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eae:	f200 8087 	bhi.w	8009fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eb6:	f000 8086 	beq.w	8009fc6 <HAL_TIM_ConfigClockSource+0x172>
 8009eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ebe:	d87f      	bhi.n	8009fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ec0:	2b70      	cmp	r3, #112	; 0x70
 8009ec2:	d01a      	beq.n	8009efa <HAL_TIM_ConfigClockSource+0xa6>
 8009ec4:	2b70      	cmp	r3, #112	; 0x70
 8009ec6:	d87b      	bhi.n	8009fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ec8:	2b60      	cmp	r3, #96	; 0x60
 8009eca:	d050      	beq.n	8009f6e <HAL_TIM_ConfigClockSource+0x11a>
 8009ecc:	2b60      	cmp	r3, #96	; 0x60
 8009ece:	d877      	bhi.n	8009fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ed0:	2b50      	cmp	r3, #80	; 0x50
 8009ed2:	d03c      	beq.n	8009f4e <HAL_TIM_ConfigClockSource+0xfa>
 8009ed4:	2b50      	cmp	r3, #80	; 0x50
 8009ed6:	d873      	bhi.n	8009fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ed8:	2b40      	cmp	r3, #64	; 0x40
 8009eda:	d058      	beq.n	8009f8e <HAL_TIM_ConfigClockSource+0x13a>
 8009edc:	2b40      	cmp	r3, #64	; 0x40
 8009ede:	d86f      	bhi.n	8009fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ee0:	2b30      	cmp	r3, #48	; 0x30
 8009ee2:	d064      	beq.n	8009fae <HAL_TIM_ConfigClockSource+0x15a>
 8009ee4:	2b30      	cmp	r3, #48	; 0x30
 8009ee6:	d86b      	bhi.n	8009fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ee8:	2b20      	cmp	r3, #32
 8009eea:	d060      	beq.n	8009fae <HAL_TIM_ConfigClockSource+0x15a>
 8009eec:	2b20      	cmp	r3, #32
 8009eee:	d867      	bhi.n	8009fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d05c      	beq.n	8009fae <HAL_TIM_ConfigClockSource+0x15a>
 8009ef4:	2b10      	cmp	r3, #16
 8009ef6:	d05a      	beq.n	8009fae <HAL_TIM_ConfigClockSource+0x15a>
 8009ef8:	e062      	b.n	8009fc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6818      	ldr	r0, [r3, #0]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	6899      	ldr	r1, [r3, #8]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	f000 fb19 	bl	800a540 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	609a      	str	r2, [r3, #8]
      break;
 8009f26:	e04f      	b.n	8009fc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6818      	ldr	r0, [r3, #0]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	6899      	ldr	r1, [r3, #8]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	f000 fb02 	bl	800a540 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	689a      	ldr	r2, [r3, #8]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f4a:	609a      	str	r2, [r3, #8]
      break;
 8009f4c:	e03c      	b.n	8009fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6818      	ldr	r0, [r3, #0]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	6859      	ldr	r1, [r3, #4]
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f000 fa76 	bl	800a44c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2150      	movs	r1, #80	; 0x50
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 facf 	bl	800a50a <TIM_ITRx_SetConfig>
      break;
 8009f6c:	e02c      	b.n	8009fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6818      	ldr	r0, [r3, #0]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	6859      	ldr	r1, [r3, #4]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f000 fa95 	bl	800a4aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2160      	movs	r1, #96	; 0x60
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 fabf 	bl	800a50a <TIM_ITRx_SetConfig>
      break;
 8009f8c:	e01c      	b.n	8009fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6818      	ldr	r0, [r3, #0]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	6859      	ldr	r1, [r3, #4]
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f000 fa56 	bl	800a44c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2140      	movs	r1, #64	; 0x40
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 faaf 	bl	800a50a <TIM_ITRx_SetConfig>
      break;
 8009fac:	e00c      	b.n	8009fc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4610      	mov	r0, r2
 8009fba:	f000 faa6 	bl	800a50a <TIM_ITRx_SetConfig>
      break;
 8009fbe:	e003      	b.n	8009fc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8009fc4:	e000      	b.n	8009fc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009fc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b083      	sub	sp, #12
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fea:	bf00      	nop
 8009fec:	370c      	adds	r7, #12
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b083      	sub	sp, #12
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ffe:	bf00      	nop
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b083      	sub	sp, #12
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a012:	bf00      	nop
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a01e:	b480      	push	{r7}
 800a020:	b083      	sub	sp, #12
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a026:	bf00      	nop
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
	...

0800a034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a34      	ldr	r2, [pc, #208]	; (800a118 <TIM_Base_SetConfig+0xe4>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d00f      	beq.n	800a06c <TIM_Base_SetConfig+0x38>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a052:	d00b      	beq.n	800a06c <TIM_Base_SetConfig+0x38>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a31      	ldr	r2, [pc, #196]	; (800a11c <TIM_Base_SetConfig+0xe8>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d007      	beq.n	800a06c <TIM_Base_SetConfig+0x38>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a30      	ldr	r2, [pc, #192]	; (800a120 <TIM_Base_SetConfig+0xec>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d003      	beq.n	800a06c <TIM_Base_SetConfig+0x38>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a2f      	ldr	r2, [pc, #188]	; (800a124 <TIM_Base_SetConfig+0xf0>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d108      	bne.n	800a07e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a25      	ldr	r2, [pc, #148]	; (800a118 <TIM_Base_SetConfig+0xe4>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d01b      	beq.n	800a0be <TIM_Base_SetConfig+0x8a>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a08c:	d017      	beq.n	800a0be <TIM_Base_SetConfig+0x8a>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a22      	ldr	r2, [pc, #136]	; (800a11c <TIM_Base_SetConfig+0xe8>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d013      	beq.n	800a0be <TIM_Base_SetConfig+0x8a>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a21      	ldr	r2, [pc, #132]	; (800a120 <TIM_Base_SetConfig+0xec>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d00f      	beq.n	800a0be <TIM_Base_SetConfig+0x8a>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a20      	ldr	r2, [pc, #128]	; (800a124 <TIM_Base_SetConfig+0xf0>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d00b      	beq.n	800a0be <TIM_Base_SetConfig+0x8a>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4a1f      	ldr	r2, [pc, #124]	; (800a128 <TIM_Base_SetConfig+0xf4>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d007      	beq.n	800a0be <TIM_Base_SetConfig+0x8a>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4a1e      	ldr	r2, [pc, #120]	; (800a12c <TIM_Base_SetConfig+0xf8>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d003      	beq.n	800a0be <TIM_Base_SetConfig+0x8a>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a1d      	ldr	r2, [pc, #116]	; (800a130 <TIM_Base_SetConfig+0xfc>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d108      	bne.n	800a0d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	689a      	ldr	r2, [r3, #8]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a08      	ldr	r2, [pc, #32]	; (800a118 <TIM_Base_SetConfig+0xe4>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d103      	bne.n	800a104 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	691a      	ldr	r2, [r3, #16]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	615a      	str	r2, [r3, #20]
}
 800a10a:	bf00      	nop
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	40010000 	.word	0x40010000
 800a11c:	40000400 	.word	0x40000400
 800a120:	40000800 	.word	0x40000800
 800a124:	40000c00 	.word	0x40000c00
 800a128:	40014000 	.word	0x40014000
 800a12c:	40014400 	.word	0x40014400
 800a130:	40014800 	.word	0x40014800

0800a134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a134:	b480      	push	{r7}
 800a136:	b087      	sub	sp, #28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	f023 0201 	bic.w	r2, r3, #1
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	699b      	ldr	r3, [r3, #24]
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f023 0303 	bic.w	r3, r3, #3
 800a16a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	4313      	orrs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	f023 0302 	bic.w	r3, r3, #2
 800a17c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	697a      	ldr	r2, [r7, #20]
 800a184:	4313      	orrs	r3, r2
 800a186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a1c      	ldr	r2, [pc, #112]	; (800a1fc <TIM_OC1_SetConfig+0xc8>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d10c      	bne.n	800a1aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f023 0308 	bic.w	r3, r3, #8
 800a196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f023 0304 	bic.w	r3, r3, #4
 800a1a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a13      	ldr	r2, [pc, #76]	; (800a1fc <TIM_OC1_SetConfig+0xc8>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d111      	bne.n	800a1d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	695b      	ldr	r3, [r3, #20]
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	685a      	ldr	r2, [r3, #4]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	621a      	str	r2, [r3, #32]
}
 800a1f0:	bf00      	nop
 800a1f2:	371c      	adds	r7, #28
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	40010000 	.word	0x40010000

0800a200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	f023 0210 	bic.w	r2, r3, #16
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	021b      	lsls	r3, r3, #8
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	4313      	orrs	r3, r2
 800a242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f023 0320 	bic.w	r3, r3, #32
 800a24a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	011b      	lsls	r3, r3, #4
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	4313      	orrs	r3, r2
 800a256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a1e      	ldr	r2, [pc, #120]	; (800a2d4 <TIM_OC2_SetConfig+0xd4>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d10d      	bne.n	800a27c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	011b      	lsls	r3, r3, #4
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	4313      	orrs	r3, r2
 800a272:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a27a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a15      	ldr	r2, [pc, #84]	; (800a2d4 <TIM_OC2_SetConfig+0xd4>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d113      	bne.n	800a2ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a28a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a292:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	685a      	ldr	r2, [r3, #4]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	621a      	str	r2, [r3, #32]
}
 800a2c6:	bf00      	nop
 800a2c8:	371c      	adds	r7, #28
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	40010000 	.word	0x40010000

0800a2d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b087      	sub	sp, #28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f023 0303 	bic.w	r3, r3, #3
 800a30e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	4313      	orrs	r3, r2
 800a318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	021b      	lsls	r3, r3, #8
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a1d      	ldr	r2, [pc, #116]	; (800a3a8 <TIM_OC3_SetConfig+0xd0>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d10d      	bne.n	800a352 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a33c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	021b      	lsls	r3, r3, #8
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	4313      	orrs	r3, r2
 800a348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a14      	ldr	r2, [pc, #80]	; (800a3a8 <TIM_OC3_SetConfig+0xd0>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d113      	bne.n	800a382 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	011b      	lsls	r3, r3, #4
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	4313      	orrs	r3, r2
 800a374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	011b      	lsls	r3, r3, #4
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	4313      	orrs	r3, r2
 800a380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	697a      	ldr	r2, [r7, #20]
 800a39a:	621a      	str	r2, [r3, #32]
}
 800a39c:	bf00      	nop
 800a39e:	371c      	adds	r7, #28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr
 800a3a8:	40010000 	.word	0x40010000

0800a3ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a1b      	ldr	r3, [r3, #32]
 800a3ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	69db      	ldr	r3, [r3, #28]
 800a3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	021b      	lsls	r3, r3, #8
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	031b      	lsls	r3, r3, #12
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	4313      	orrs	r3, r2
 800a402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a10      	ldr	r2, [pc, #64]	; (800a448 <TIM_OC4_SetConfig+0x9c>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d109      	bne.n	800a420 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a412:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	019b      	lsls	r3, r3, #6
 800a41a:	697a      	ldr	r2, [r7, #20]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	621a      	str	r2, [r3, #32]
}
 800a43a:	bf00      	nop
 800a43c:	371c      	adds	r7, #28
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	40010000 	.word	0x40010000

0800a44c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b087      	sub	sp, #28
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6a1b      	ldr	r3, [r3, #32]
 800a45c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	f023 0201 	bic.w	r2, r3, #1
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	699b      	ldr	r3, [r3, #24]
 800a46e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	011b      	lsls	r3, r3, #4
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	4313      	orrs	r3, r2
 800a480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	f023 030a 	bic.w	r3, r3, #10
 800a488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	4313      	orrs	r3, r2
 800a490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	697a      	ldr	r2, [r7, #20]
 800a49c:	621a      	str	r2, [r3, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b087      	sub	sp, #28
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	f023 0210 	bic.w	r2, r3, #16
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6a1b      	ldr	r3, [r3, #32]
 800a4cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	031b      	lsls	r3, r3, #12
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a4e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	011b      	lsls	r3, r3, #4
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	621a      	str	r2, [r3, #32]
}
 800a4fe:	bf00      	nop
 800a500:	371c      	adds	r7, #28
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a50a:	b480      	push	{r7}
 800a50c:	b085      	sub	sp, #20
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	4313      	orrs	r3, r2
 800a528:	f043 0307 	orr.w	r3, r3, #7
 800a52c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	609a      	str	r2, [r3, #8]
}
 800a534:	bf00      	nop
 800a536:	3714      	adds	r7, #20
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a540:	b480      	push	{r7}
 800a542:	b087      	sub	sp, #28
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
 800a54c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a55a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	021a      	lsls	r2, r3, #8
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	431a      	orrs	r2, r3
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	4313      	orrs	r3, r2
 800a568:	697a      	ldr	r2, [r7, #20]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	609a      	str	r2, [r3, #8]
}
 800a574:	bf00      	nop
 800a576:	371c      	adds	r7, #28
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a580:	b480      	push	{r7}
 800a582:	b087      	sub	sp, #28
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	f003 031f 	and.w	r3, r3, #31
 800a592:	2201      	movs	r2, #1
 800a594:	fa02 f303 	lsl.w	r3, r2, r3
 800a598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6a1a      	ldr	r2, [r3, #32]
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	43db      	mvns	r3, r3
 800a5a2:	401a      	ands	r2, r3
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6a1a      	ldr	r2, [r3, #32]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	f003 031f 	and.w	r3, r3, #31
 800a5b2:	6879      	ldr	r1, [r7, #4]
 800a5b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a5b8:	431a      	orrs	r2, r3
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	621a      	str	r2, [r3, #32]
}
 800a5be:	bf00      	nop
 800a5c0:	371c      	adds	r7, #28
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
	...

0800a5cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d101      	bne.n	800a5e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	e050      	b.n	800a686 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2202      	movs	r2, #2
 800a5f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a60a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	4313      	orrs	r3, r2
 800a614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a1c      	ldr	r2, [pc, #112]	; (800a694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d018      	beq.n	800a65a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a630:	d013      	beq.n	800a65a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a18      	ldr	r2, [pc, #96]	; (800a698 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d00e      	beq.n	800a65a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a16      	ldr	r2, [pc, #88]	; (800a69c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d009      	beq.n	800a65a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a15      	ldr	r2, [pc, #84]	; (800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d004      	beq.n	800a65a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a13      	ldr	r2, [pc, #76]	; (800a6a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d10c      	bne.n	800a674 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	68ba      	ldr	r2, [r7, #8]
 800a668:	4313      	orrs	r3, r2
 800a66a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	40010000 	.word	0x40010000
 800a698:	40000400 	.word	0x40000400
 800a69c:	40000800 	.word	0x40000800
 800a6a0:	40000c00 	.word	0x40000c00
 800a6a4:	40014000 	.word	0x40014000

0800a6a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e03f      	b.n	800a762 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d106      	bne.n	800a6fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f7fa fdfc 	bl	80052f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2224      	movs	r2, #36	; 0x24
 800a700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68da      	ldr	r2, [r3, #12]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fe4b 	bl	800b3b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	691a      	ldr	r2, [r3, #16]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	695a      	ldr	r2, [r3, #20]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68da      	ldr	r2, [r3, #12]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2220      	movs	r2, #32
 800a754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2220      	movs	r2, #32
 800a75c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b082      	sub	sp, #8
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d101      	bne.n	800a77c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	e021      	b.n	800a7c0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2224      	movs	r2, #36	; 0x24
 800a780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68da      	ldr	r2, [r3, #12]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a792:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7fa fe63 	bl	8005460 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b08a      	sub	sp, #40	; 0x28
 800a7cc:	af02      	add	r7, sp, #8
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	603b      	str	r3, [r7, #0]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b20      	cmp	r3, #32
 800a7e6:	d17c      	bne.n	800a8e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d002      	beq.n	800a7f4 <HAL_UART_Transmit+0x2c>
 800a7ee:	88fb      	ldrh	r3, [r7, #6]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d101      	bne.n	800a7f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e075      	b.n	800a8e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d101      	bne.n	800a806 <HAL_UART_Transmit+0x3e>
 800a802:	2302      	movs	r3, #2
 800a804:	e06e      	b.n	800a8e4 <HAL_UART_Transmit+0x11c>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2221      	movs	r2, #33	; 0x21
 800a818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a81c:	f7fb f840 	bl	80058a0 <HAL_GetTick>
 800a820:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	88fa      	ldrh	r2, [r7, #6]
 800a826:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	88fa      	ldrh	r2, [r7, #6]
 800a82c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a836:	d108      	bne.n	800a84a <HAL_UART_Transmit+0x82>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d104      	bne.n	800a84a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a840:	2300      	movs	r3, #0
 800a842:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	61bb      	str	r3, [r7, #24]
 800a848:	e003      	b.n	800a852 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a84e:	2300      	movs	r3, #0
 800a850:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a85a:	e02a      	b.n	800a8b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	2200      	movs	r2, #0
 800a864:	2180      	movs	r1, #128	; 0x80
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f000 fb9a 	bl	800afa0 <UART_WaitOnFlagUntilTimeout>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a872:	2303      	movs	r3, #3
 800a874:	e036      	b.n	800a8e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10b      	bne.n	800a894 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	881b      	ldrh	r3, [r3, #0]
 800a880:	461a      	mov	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a88a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	3302      	adds	r3, #2
 800a890:	61bb      	str	r3, [r7, #24]
 800a892:	e007      	b.n	800a8a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	781a      	ldrb	r2, [r3, #0]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1cf      	bne.n	800a85c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	2140      	movs	r1, #64	; 0x40
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f000 fb6a 	bl	800afa0 <UART_WaitOnFlagUntilTimeout>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d001      	beq.n	800a8d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	e006      	b.n	800a8e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2220      	movs	r2, #32
 800a8da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	e000      	b.n	800a8e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a8e2:	2302      	movs	r3, #2
  }
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3720      	adds	r7, #32
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08a      	sub	sp, #40	; 0x28
 800a8f0:	af02      	add	r7, sp, #8
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	603b      	str	r3, [r7, #0]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b20      	cmp	r3, #32
 800a90a:	f040 808c 	bne.w	800aa26 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d002      	beq.n	800a91a <HAL_UART_Receive+0x2e>
 800a914:	88fb      	ldrh	r3, [r7, #6]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	e084      	b.n	800aa28 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a924:	2b01      	cmp	r3, #1
 800a926:	d101      	bne.n	800a92c <HAL_UART_Receive+0x40>
 800a928:	2302      	movs	r3, #2
 800a92a:	e07d      	b.n	800aa28 <HAL_UART_Receive+0x13c>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2200      	movs	r2, #0
 800a938:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2222      	movs	r2, #34	; 0x22
 800a93e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2200      	movs	r2, #0
 800a946:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a948:	f7fa ffaa 	bl	80058a0 <HAL_GetTick>
 800a94c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	88fa      	ldrh	r2, [r7, #6]
 800a952:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	88fa      	ldrh	r2, [r7, #6]
 800a958:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a962:	d108      	bne.n	800a976 <HAL_UART_Receive+0x8a>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d104      	bne.n	800a976 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a96c:	2300      	movs	r3, #0
 800a96e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	61bb      	str	r3, [r7, #24]
 800a974:	e003      	b.n	800a97e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a97a:	2300      	movs	r3, #0
 800a97c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a986:	e043      	b.n	800aa10 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	2200      	movs	r2, #0
 800a990:	2120      	movs	r1, #32
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f000 fb04 	bl	800afa0 <UART_WaitOnFlagUntilTimeout>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e042      	b.n	800aa28 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10c      	bne.n	800a9c2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	3302      	adds	r3, #2
 800a9be:	61bb      	str	r3, [r7, #24]
 800a9c0:	e01f      	b.n	800aa02 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9ca:	d007      	beq.n	800a9dc <HAL_UART_Receive+0xf0>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10a      	bne.n	800a9ea <HAL_UART_Receive+0xfe>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d106      	bne.n	800a9ea <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	701a      	strb	r2, [r3, #0]
 800a9e8:	e008      	b.n	800a9fc <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1b6      	bne.n	800a988 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2220      	movs	r2, #32
 800aa1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	e000      	b.n	800aa28 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800aa26:	2302      	movs	r3, #2
  }
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3720      	adds	r7, #32
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b0ba      	sub	sp, #232	; 0xe8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800aa56:	2300      	movs	r3, #0
 800aa58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aa62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa66:	f003 030f 	and.w	r3, r3, #15
 800aa6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800aa6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10f      	bne.n	800aa96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aa76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa7a:	f003 0320 	and.w	r3, r3, #32
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d009      	beq.n	800aa96 <HAL_UART_IRQHandler+0x66>
 800aa82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa86:	f003 0320 	and.w	r3, r3, #32
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d003      	beq.n	800aa96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fbd3 	bl	800b23a <UART_Receive_IT>
      return;
 800aa94:	e256      	b.n	800af44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aa96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f000 80de 	beq.w	800ac5c <HAL_UART_IRQHandler+0x22c>
 800aaa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaa4:	f003 0301 	and.w	r3, r3, #1
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d106      	bne.n	800aaba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aaac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aab0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 80d1 	beq.w	800ac5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aaba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00b      	beq.n	800aade <HAL_UART_IRQHandler+0xae>
 800aac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d005      	beq.n	800aade <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad6:	f043 0201 	orr.w	r2, r3, #1
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aae2:	f003 0304 	and.w	r3, r3, #4
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00b      	beq.n	800ab02 <HAL_UART_IRQHandler+0xd2>
 800aaea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaee:	f003 0301 	and.w	r3, r3, #1
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d005      	beq.n	800ab02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafa:	f043 0202 	orr.w	r2, r3, #2
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab06:	f003 0302 	and.w	r3, r3, #2
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00b      	beq.n	800ab26 <HAL_UART_IRQHandler+0xf6>
 800ab0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d005      	beq.n	800ab26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1e:	f043 0204 	orr.w	r2, r3, #4
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ab26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab2a:	f003 0308 	and.w	r3, r3, #8
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d011      	beq.n	800ab56 <HAL_UART_IRQHandler+0x126>
 800ab32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab36:	f003 0320 	and.w	r3, r3, #32
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d105      	bne.n	800ab4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ab3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d005      	beq.n	800ab56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4e:	f043 0208 	orr.w	r2, r3, #8
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f000 81ed 	beq.w	800af3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab64:	f003 0320 	and.w	r3, r3, #32
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d008      	beq.n	800ab7e <HAL_UART_IRQHandler+0x14e>
 800ab6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab70:	f003 0320 	and.w	r3, r3, #32
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d002      	beq.n	800ab7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fb5e 	bl	800b23a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	695b      	ldr	r3, [r3, #20]
 800ab84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab88:	2b40      	cmp	r3, #64	; 0x40
 800ab8a:	bf0c      	ite	eq
 800ab8c:	2301      	moveq	r3, #1
 800ab8e:	2300      	movne	r3, #0
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9a:	f003 0308 	and.w	r3, r3, #8
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d103      	bne.n	800abaa <HAL_UART_IRQHandler+0x17a>
 800aba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d04f      	beq.n	800ac4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fa66 	bl	800b07c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abba:	2b40      	cmp	r3, #64	; 0x40
 800abbc:	d141      	bne.n	800ac42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3314      	adds	r3, #20
 800abc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800abcc:	e853 3f00 	ldrex	r3, [r3]
 800abd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800abd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3314      	adds	r3, #20
 800abe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800abea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800abee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800abf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800abfa:	e841 2300 	strex	r3, r2, [r1]
 800abfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ac02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1d9      	bne.n	800abbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d013      	beq.n	800ac3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac16:	4a7d      	ldr	r2, [pc, #500]	; (800ae0c <HAL_UART_IRQHandler+0x3dc>)
 800ac18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fb f92e 	bl	8005e80 <HAL_DMA_Abort_IT>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d016      	beq.n	800ac58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ac34:	4610      	mov	r0, r2
 800ac36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac38:	e00e      	b.n	800ac58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 f99a 	bl	800af74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac40:	e00a      	b.n	800ac58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f996 	bl	800af74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac48:	e006      	b.n	800ac58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f992 	bl	800af74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ac56:	e170      	b.n	800af3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac58:	bf00      	nop
    return;
 800ac5a:	e16e      	b.n	800af3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	f040 814a 	bne.w	800aefa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ac66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac6a:	f003 0310 	and.w	r3, r3, #16
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f000 8143 	beq.w	800aefa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ac74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac78:	f003 0310 	and.w	r3, r3, #16
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 813c 	beq.w	800aefa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ac82:	2300      	movs	r3, #0
 800ac84:	60bb      	str	r3, [r7, #8]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	60bb      	str	r3, [r7, #8]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	60bb      	str	r3, [r7, #8]
 800ac96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca2:	2b40      	cmp	r3, #64	; 0x40
 800aca4:	f040 80b4 	bne.w	800ae10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800acb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f000 8140 	beq.w	800af3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800acc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800acc6:	429a      	cmp	r2, r3
 800acc8:	f080 8139 	bcs.w	800af3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800acd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd8:	69db      	ldr	r3, [r3, #28]
 800acda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acde:	f000 8088 	beq.w	800adf2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	330c      	adds	r3, #12
 800ace8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800acf0:	e853 3f00 	ldrex	r3, [r3]
 800acf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800acf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800acfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	330c      	adds	r3, #12
 800ad0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ad0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ad12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ad1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad1e:	e841 2300 	strex	r3, r2, [r1]
 800ad22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ad26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1d9      	bne.n	800ace2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	3314      	adds	r3, #20
 800ad34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad38:	e853 3f00 	ldrex	r3, [r3]
 800ad3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ad3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad40:	f023 0301 	bic.w	r3, r3, #1
 800ad44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	3314      	adds	r3, #20
 800ad4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ad52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ad56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ad5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ad5e:	e841 2300 	strex	r3, r2, [r1]
 800ad62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ad64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1e1      	bne.n	800ad2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3314      	adds	r3, #20
 800ad70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad74:	e853 3f00 	ldrex	r3, [r3]
 800ad78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ad7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3314      	adds	r3, #20
 800ad8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ad8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ad90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ad94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad96:	e841 2300 	strex	r3, r2, [r1]
 800ad9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ad9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1e3      	bne.n	800ad6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2220      	movs	r2, #32
 800ada6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	330c      	adds	r3, #12
 800adb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adba:	e853 3f00 	ldrex	r3, [r3]
 800adbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800adc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adc2:	f023 0310 	bic.w	r3, r3, #16
 800adc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	330c      	adds	r3, #12
 800add0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800add4:	65ba      	str	r2, [r7, #88]	; 0x58
 800add6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800adda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800addc:	e841 2300 	strex	r3, r2, [r1]
 800ade0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ade2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1e3      	bne.n	800adb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adec:	4618      	mov	r0, r3
 800adee:	f7fa ffd7 	bl	8005da0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f8c0 	bl	800af88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ae08:	e099      	b.n	800af3e <HAL_UART_IRQHandler+0x50e>
 800ae0a:	bf00      	nop
 800ae0c:	0800b143 	.word	0x0800b143
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f000 808b 	beq.w	800af42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ae2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 8086 	beq.w	800af42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	330c      	adds	r3, #12
 800ae3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae40:	e853 3f00 	ldrex	r3, [r3]
 800ae44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	330c      	adds	r3, #12
 800ae56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ae5a:	647a      	str	r2, [r7, #68]	; 0x44
 800ae5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae62:	e841 2300 	strex	r3, r2, [r1]
 800ae66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1e3      	bne.n	800ae36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	3314      	adds	r3, #20
 800ae74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae78:	e853 3f00 	ldrex	r3, [r3]
 800ae7c:	623b      	str	r3, [r7, #32]
   return(result);
 800ae7e:	6a3b      	ldr	r3, [r7, #32]
 800ae80:	f023 0301 	bic.w	r3, r3, #1
 800ae84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	3314      	adds	r3, #20
 800ae8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ae92:	633a      	str	r2, [r7, #48]	; 0x30
 800ae94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae9a:	e841 2300 	strex	r3, r2, [r1]
 800ae9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1e3      	bne.n	800ae6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2220      	movs	r2, #32
 800aeaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	330c      	adds	r3, #12
 800aeba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	e853 3f00 	ldrex	r3, [r3]
 800aec2:	60fb      	str	r3, [r7, #12]
   return(result);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f023 0310 	bic.w	r3, r3, #16
 800aeca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	330c      	adds	r3, #12
 800aed4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aed8:	61fa      	str	r2, [r7, #28]
 800aeda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aedc:	69b9      	ldr	r1, [r7, #24]
 800aede:	69fa      	ldr	r2, [r7, #28]
 800aee0:	e841 2300 	strex	r3, r2, [r1]
 800aee4:	617b      	str	r3, [r7, #20]
   return(result);
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1e3      	bne.n	800aeb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aeec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aef0:	4619      	mov	r1, r3
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f848 	bl	800af88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aef8:	e023      	b.n	800af42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aefa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aefe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af02:	2b00      	cmp	r3, #0
 800af04:	d009      	beq.n	800af1a <HAL_UART_IRQHandler+0x4ea>
 800af06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d003      	beq.n	800af1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f929 	bl	800b16a <UART_Transmit_IT>
    return;
 800af18:	e014      	b.n	800af44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800af1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00e      	beq.n	800af44 <HAL_UART_IRQHandler+0x514>
 800af26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d008      	beq.n	800af44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 f969 	bl	800b20a <UART_EndTransmit_IT>
    return;
 800af38:	e004      	b.n	800af44 <HAL_UART_IRQHandler+0x514>
    return;
 800af3a:	bf00      	nop
 800af3c:	e002      	b.n	800af44 <HAL_UART_IRQHandler+0x514>
      return;
 800af3e:	bf00      	nop
 800af40:	e000      	b.n	800af44 <HAL_UART_IRQHandler+0x514>
      return;
 800af42:	bf00      	nop
  }
}
 800af44:	37e8      	adds	r7, #232	; 0xe8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop

0800af4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	460b      	mov	r3, r1
 800af92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b090      	sub	sp, #64	; 0x40
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	603b      	str	r3, [r7, #0]
 800afac:	4613      	mov	r3, r2
 800afae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afb0:	e050      	b.n	800b054 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb8:	d04c      	beq.n	800b054 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800afba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d007      	beq.n	800afd0 <UART_WaitOnFlagUntilTimeout+0x30>
 800afc0:	f7fa fc6e 	bl	80058a0 <HAL_GetTick>
 800afc4:	4602      	mov	r2, r0
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afcc:	429a      	cmp	r2, r3
 800afce:	d241      	bcs.n	800b054 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	330c      	adds	r3, #12
 800afd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afda:	e853 3f00 	ldrex	r3, [r3]
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800afe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	330c      	adds	r3, #12
 800afee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aff0:	637a      	str	r2, [r7, #52]	; 0x34
 800aff2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aff8:	e841 2300 	strex	r3, r2, [r1]
 800affc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800affe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1e5      	bne.n	800afd0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3314      	adds	r3, #20
 800b00a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	e853 3f00 	ldrex	r3, [r3]
 800b012:	613b      	str	r3, [r7, #16]
   return(result);
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	f023 0301 	bic.w	r3, r3, #1
 800b01a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3314      	adds	r3, #20
 800b022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b024:	623a      	str	r2, [r7, #32]
 800b026:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b028:	69f9      	ldr	r1, [r7, #28]
 800b02a:	6a3a      	ldr	r2, [r7, #32]
 800b02c:	e841 2300 	strex	r3, r2, [r1]
 800b030:	61bb      	str	r3, [r7, #24]
   return(result);
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1e5      	bne.n	800b004 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2220      	movs	r2, #32
 800b03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2220      	movs	r2, #32
 800b044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	e00f      	b.n	800b074 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	4013      	ands	r3, r2
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	429a      	cmp	r2, r3
 800b062:	bf0c      	ite	eq
 800b064:	2301      	moveq	r3, #1
 800b066:	2300      	movne	r3, #0
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	461a      	mov	r2, r3
 800b06c:	79fb      	ldrb	r3, [r7, #7]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d09f      	beq.n	800afb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3740      	adds	r7, #64	; 0x40
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b095      	sub	sp, #84	; 0x54
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	330c      	adds	r3, #12
 800b08a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b08e:	e853 3f00 	ldrex	r3, [r3]
 800b092:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b09a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	330c      	adds	r3, #12
 800b0a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0a4:	643a      	str	r2, [r7, #64]	; 0x40
 800b0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0ac:	e841 2300 	strex	r3, r2, [r1]
 800b0b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1e5      	bne.n	800b084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3314      	adds	r3, #20
 800b0be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	e853 3f00 	ldrex	r3, [r3]
 800b0c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	f023 0301 	bic.w	r3, r3, #1
 800b0ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3314      	adds	r3, #20
 800b0d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0e0:	e841 2300 	strex	r3, r2, [r1]
 800b0e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1e5      	bne.n	800b0b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d119      	bne.n	800b128 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	330c      	adds	r3, #12
 800b0fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	e853 3f00 	ldrex	r3, [r3]
 800b102:	60bb      	str	r3, [r7, #8]
   return(result);
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	f023 0310 	bic.w	r3, r3, #16
 800b10a:	647b      	str	r3, [r7, #68]	; 0x44
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	330c      	adds	r3, #12
 800b112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b114:	61ba      	str	r2, [r7, #24]
 800b116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b118:	6979      	ldr	r1, [r7, #20]
 800b11a:	69ba      	ldr	r2, [r7, #24]
 800b11c:	e841 2300 	strex	r3, r2, [r1]
 800b120:	613b      	str	r3, [r7, #16]
   return(result);
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1e5      	bne.n	800b0f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2220      	movs	r2, #32
 800b12c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b136:	bf00      	nop
 800b138:	3754      	adds	r7, #84	; 0x54
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b084      	sub	sp, #16
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f7ff ff09 	bl	800af74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b162:	bf00      	nop
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b085      	sub	sp, #20
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b21      	cmp	r3, #33	; 0x21
 800b17c:	d13e      	bne.n	800b1fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b186:	d114      	bne.n	800b1b2 <UART_Transmit_IT+0x48>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d110      	bne.n	800b1b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a1b      	ldr	r3, [r3, #32]
 800b194:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	881b      	ldrh	r3, [r3, #0]
 800b19a:	461a      	mov	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	1c9a      	adds	r2, r3, #2
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	621a      	str	r2, [r3, #32]
 800b1b0:	e008      	b.n	800b1c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	1c59      	adds	r1, r3, #1
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	6211      	str	r1, [r2, #32]
 800b1bc:	781a      	ldrb	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10f      	bne.n	800b1f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	68da      	ldr	r2, [r3, #12]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68da      	ldr	r2, [r3, #12]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	e000      	b.n	800b1fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b1fc:	2302      	movs	r3, #2
  }
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3714      	adds	r7, #20
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr

0800b20a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b082      	sub	sp, #8
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68da      	ldr	r2, [r3, #12]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b220:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2220      	movs	r2, #32
 800b226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7ff fe8e 	bl	800af4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b08c      	sub	sp, #48	; 0x30
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b22      	cmp	r3, #34	; 0x22
 800b24c:	f040 80ab 	bne.w	800b3a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b258:	d117      	bne.n	800b28a <UART_Receive_IT+0x50>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d113      	bne.n	800b28a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b262:	2300      	movs	r3, #0
 800b264:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	b29b      	uxth	r3, r3
 800b274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b278:	b29a      	uxth	r2, r3
 800b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b282:	1c9a      	adds	r2, r3, #2
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	629a      	str	r2, [r3, #40]	; 0x28
 800b288:	e026      	b.n	800b2d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b28e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b290:	2300      	movs	r3, #0
 800b292:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b29c:	d007      	beq.n	800b2ae <UART_Receive_IT+0x74>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10a      	bne.n	800b2bc <UART_Receive_IT+0x82>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d106      	bne.n	800b2bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b8:	701a      	strb	r2, [r3, #0]
 800b2ba:	e008      	b.n	800b2ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d2:	1c5a      	adds	r2, r3, #1
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d15a      	bne.n	800b3a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	68da      	ldr	r2, [r3, #12]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f022 0220 	bic.w	r2, r2, #32
 800b2fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68da      	ldr	r2, [r3, #12]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b30a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	695a      	ldr	r2, [r3, #20]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f022 0201 	bic.w	r2, r2, #1
 800b31a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2220      	movs	r2, #32
 800b320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d135      	bne.n	800b398 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	330c      	adds	r3, #12
 800b338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	e853 3f00 	ldrex	r3, [r3]
 800b340:	613b      	str	r3, [r7, #16]
   return(result);
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	f023 0310 	bic.w	r3, r3, #16
 800b348:	627b      	str	r3, [r7, #36]	; 0x24
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	330c      	adds	r3, #12
 800b350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b352:	623a      	str	r2, [r7, #32]
 800b354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b356:	69f9      	ldr	r1, [r7, #28]
 800b358:	6a3a      	ldr	r2, [r7, #32]
 800b35a:	e841 2300 	strex	r3, r2, [r1]
 800b35e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1e5      	bne.n	800b332 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 0310 	and.w	r3, r3, #16
 800b370:	2b10      	cmp	r3, #16
 800b372:	d10a      	bne.n	800b38a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b374:	2300      	movs	r3, #0
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	60fb      	str	r3, [r7, #12]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	60fb      	str	r3, [r7, #12]
 800b388:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b38e:	4619      	mov	r1, r3
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f7ff fdf9 	bl	800af88 <HAL_UARTEx_RxEventCallback>
 800b396:	e002      	b.n	800b39e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7ff fde1 	bl	800af60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	e002      	b.n	800b3a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	e000      	b.n	800b3a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b3a6:	2302      	movs	r3, #2
  }
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3730      	adds	r7, #48	; 0x30
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3b4:	b0c0      	sub	sp, #256	; 0x100
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b3c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3cc:	68d9      	ldr	r1, [r3, #12]
 800b3ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	ea40 0301 	orr.w	r3, r0, r1
 800b3d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b3da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3de:	689a      	ldr	r2, [r3, #8]
 800b3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	431a      	orrs	r2, r3
 800b3e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	431a      	orrs	r2, r3
 800b3f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3f4:	69db      	ldr	r3, [r3, #28]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b3fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b408:	f021 010c 	bic.w	r1, r1, #12
 800b40c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b416:	430b      	orrs	r3, r1
 800b418:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b41a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	695b      	ldr	r3, [r3, #20]
 800b422:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b42a:	6999      	ldr	r1, [r3, #24]
 800b42c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	ea40 0301 	orr.w	r3, r0, r1
 800b436:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	4b8f      	ldr	r3, [pc, #572]	; (800b67c <UART_SetConfig+0x2cc>)
 800b440:	429a      	cmp	r2, r3
 800b442:	d005      	beq.n	800b450 <UART_SetConfig+0xa0>
 800b444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	4b8d      	ldr	r3, [pc, #564]	; (800b680 <UART_SetConfig+0x2d0>)
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d104      	bne.n	800b45a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b450:	f7fe f83c 	bl	80094cc <HAL_RCC_GetPCLK2Freq>
 800b454:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b458:	e003      	b.n	800b462 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b45a:	f7fe f823 	bl	80094a4 <HAL_RCC_GetPCLK1Freq>
 800b45e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b466:	69db      	ldr	r3, [r3, #28]
 800b468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b46c:	f040 810c 	bne.w	800b688 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b474:	2200      	movs	r2, #0
 800b476:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b47a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b47e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b482:	4622      	mov	r2, r4
 800b484:	462b      	mov	r3, r5
 800b486:	1891      	adds	r1, r2, r2
 800b488:	65b9      	str	r1, [r7, #88]	; 0x58
 800b48a:	415b      	adcs	r3, r3
 800b48c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b48e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b492:	4621      	mov	r1, r4
 800b494:	eb12 0801 	adds.w	r8, r2, r1
 800b498:	4629      	mov	r1, r5
 800b49a:	eb43 0901 	adc.w	r9, r3, r1
 800b49e:	f04f 0200 	mov.w	r2, #0
 800b4a2:	f04f 0300 	mov.w	r3, #0
 800b4a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b4aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b4ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b4b2:	4690      	mov	r8, r2
 800b4b4:	4699      	mov	r9, r3
 800b4b6:	4623      	mov	r3, r4
 800b4b8:	eb18 0303 	adds.w	r3, r8, r3
 800b4bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b4c0:	462b      	mov	r3, r5
 800b4c2:	eb49 0303 	adc.w	r3, r9, r3
 800b4c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b4ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b4da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b4de:	460b      	mov	r3, r1
 800b4e0:	18db      	adds	r3, r3, r3
 800b4e2:	653b      	str	r3, [r7, #80]	; 0x50
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	eb42 0303 	adc.w	r3, r2, r3
 800b4ea:	657b      	str	r3, [r7, #84]	; 0x54
 800b4ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b4f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b4f4:	f7f5 fbb0 	bl	8000c58 <__aeabi_uldivmod>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4b61      	ldr	r3, [pc, #388]	; (800b684 <UART_SetConfig+0x2d4>)
 800b4fe:	fba3 2302 	umull	r2, r3, r3, r2
 800b502:	095b      	lsrs	r3, r3, #5
 800b504:	011c      	lsls	r4, r3, #4
 800b506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b50a:	2200      	movs	r2, #0
 800b50c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b510:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b514:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b518:	4642      	mov	r2, r8
 800b51a:	464b      	mov	r3, r9
 800b51c:	1891      	adds	r1, r2, r2
 800b51e:	64b9      	str	r1, [r7, #72]	; 0x48
 800b520:	415b      	adcs	r3, r3
 800b522:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b524:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b528:	4641      	mov	r1, r8
 800b52a:	eb12 0a01 	adds.w	sl, r2, r1
 800b52e:	4649      	mov	r1, r9
 800b530:	eb43 0b01 	adc.w	fp, r3, r1
 800b534:	f04f 0200 	mov.w	r2, #0
 800b538:	f04f 0300 	mov.w	r3, #0
 800b53c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b540:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b544:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b548:	4692      	mov	sl, r2
 800b54a:	469b      	mov	fp, r3
 800b54c:	4643      	mov	r3, r8
 800b54e:	eb1a 0303 	adds.w	r3, sl, r3
 800b552:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b556:	464b      	mov	r3, r9
 800b558:	eb4b 0303 	adc.w	r3, fp, r3
 800b55c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b56c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b570:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b574:	460b      	mov	r3, r1
 800b576:	18db      	adds	r3, r3, r3
 800b578:	643b      	str	r3, [r7, #64]	; 0x40
 800b57a:	4613      	mov	r3, r2
 800b57c:	eb42 0303 	adc.w	r3, r2, r3
 800b580:	647b      	str	r3, [r7, #68]	; 0x44
 800b582:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b586:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b58a:	f7f5 fb65 	bl	8000c58 <__aeabi_uldivmod>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	4611      	mov	r1, r2
 800b594:	4b3b      	ldr	r3, [pc, #236]	; (800b684 <UART_SetConfig+0x2d4>)
 800b596:	fba3 2301 	umull	r2, r3, r3, r1
 800b59a:	095b      	lsrs	r3, r3, #5
 800b59c:	2264      	movs	r2, #100	; 0x64
 800b59e:	fb02 f303 	mul.w	r3, r2, r3
 800b5a2:	1acb      	subs	r3, r1, r3
 800b5a4:	00db      	lsls	r3, r3, #3
 800b5a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b5aa:	4b36      	ldr	r3, [pc, #216]	; (800b684 <UART_SetConfig+0x2d4>)
 800b5ac:	fba3 2302 	umull	r2, r3, r3, r2
 800b5b0:	095b      	lsrs	r3, r3, #5
 800b5b2:	005b      	lsls	r3, r3, #1
 800b5b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b5b8:	441c      	add	r4, r3
 800b5ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b5c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b5c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b5cc:	4642      	mov	r2, r8
 800b5ce:	464b      	mov	r3, r9
 800b5d0:	1891      	adds	r1, r2, r2
 800b5d2:	63b9      	str	r1, [r7, #56]	; 0x38
 800b5d4:	415b      	adcs	r3, r3
 800b5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b5dc:	4641      	mov	r1, r8
 800b5de:	1851      	adds	r1, r2, r1
 800b5e0:	6339      	str	r1, [r7, #48]	; 0x30
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	414b      	adcs	r3, r1
 800b5e6:	637b      	str	r3, [r7, #52]	; 0x34
 800b5e8:	f04f 0200 	mov.w	r2, #0
 800b5ec:	f04f 0300 	mov.w	r3, #0
 800b5f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b5f4:	4659      	mov	r1, fp
 800b5f6:	00cb      	lsls	r3, r1, #3
 800b5f8:	4651      	mov	r1, sl
 800b5fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5fe:	4651      	mov	r1, sl
 800b600:	00ca      	lsls	r2, r1, #3
 800b602:	4610      	mov	r0, r2
 800b604:	4619      	mov	r1, r3
 800b606:	4603      	mov	r3, r0
 800b608:	4642      	mov	r2, r8
 800b60a:	189b      	adds	r3, r3, r2
 800b60c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b610:	464b      	mov	r3, r9
 800b612:	460a      	mov	r2, r1
 800b614:	eb42 0303 	adc.w	r3, r2, r3
 800b618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b61c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b628:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b62c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b630:	460b      	mov	r3, r1
 800b632:	18db      	adds	r3, r3, r3
 800b634:	62bb      	str	r3, [r7, #40]	; 0x28
 800b636:	4613      	mov	r3, r2
 800b638:	eb42 0303 	adc.w	r3, r2, r3
 800b63c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b63e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b642:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b646:	f7f5 fb07 	bl	8000c58 <__aeabi_uldivmod>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	4b0d      	ldr	r3, [pc, #52]	; (800b684 <UART_SetConfig+0x2d4>)
 800b650:	fba3 1302 	umull	r1, r3, r3, r2
 800b654:	095b      	lsrs	r3, r3, #5
 800b656:	2164      	movs	r1, #100	; 0x64
 800b658:	fb01 f303 	mul.w	r3, r1, r3
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	00db      	lsls	r3, r3, #3
 800b660:	3332      	adds	r3, #50	; 0x32
 800b662:	4a08      	ldr	r2, [pc, #32]	; (800b684 <UART_SetConfig+0x2d4>)
 800b664:	fba2 2303 	umull	r2, r3, r2, r3
 800b668:	095b      	lsrs	r3, r3, #5
 800b66a:	f003 0207 	and.w	r2, r3, #7
 800b66e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4422      	add	r2, r4
 800b676:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b678:	e105      	b.n	800b886 <UART_SetConfig+0x4d6>
 800b67a:	bf00      	nop
 800b67c:	40011000 	.word	0x40011000
 800b680:	40011400 	.word	0x40011400
 800b684:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b68c:	2200      	movs	r2, #0
 800b68e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b692:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b696:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b69a:	4642      	mov	r2, r8
 800b69c:	464b      	mov	r3, r9
 800b69e:	1891      	adds	r1, r2, r2
 800b6a0:	6239      	str	r1, [r7, #32]
 800b6a2:	415b      	adcs	r3, r3
 800b6a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b6a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b6aa:	4641      	mov	r1, r8
 800b6ac:	1854      	adds	r4, r2, r1
 800b6ae:	4649      	mov	r1, r9
 800b6b0:	eb43 0501 	adc.w	r5, r3, r1
 800b6b4:	f04f 0200 	mov.w	r2, #0
 800b6b8:	f04f 0300 	mov.w	r3, #0
 800b6bc:	00eb      	lsls	r3, r5, #3
 800b6be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b6c2:	00e2      	lsls	r2, r4, #3
 800b6c4:	4614      	mov	r4, r2
 800b6c6:	461d      	mov	r5, r3
 800b6c8:	4643      	mov	r3, r8
 800b6ca:	18e3      	adds	r3, r4, r3
 800b6cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b6d0:	464b      	mov	r3, r9
 800b6d2:	eb45 0303 	adc.w	r3, r5, r3
 800b6d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b6da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b6e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b6ea:	f04f 0200 	mov.w	r2, #0
 800b6ee:	f04f 0300 	mov.w	r3, #0
 800b6f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	008b      	lsls	r3, r1, #2
 800b6fa:	4621      	mov	r1, r4
 800b6fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b700:	4621      	mov	r1, r4
 800b702:	008a      	lsls	r2, r1, #2
 800b704:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b708:	f7f5 faa6 	bl	8000c58 <__aeabi_uldivmod>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	4b60      	ldr	r3, [pc, #384]	; (800b894 <UART_SetConfig+0x4e4>)
 800b712:	fba3 2302 	umull	r2, r3, r3, r2
 800b716:	095b      	lsrs	r3, r3, #5
 800b718:	011c      	lsls	r4, r3, #4
 800b71a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b71e:	2200      	movs	r2, #0
 800b720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b724:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b728:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b72c:	4642      	mov	r2, r8
 800b72e:	464b      	mov	r3, r9
 800b730:	1891      	adds	r1, r2, r2
 800b732:	61b9      	str	r1, [r7, #24]
 800b734:	415b      	adcs	r3, r3
 800b736:	61fb      	str	r3, [r7, #28]
 800b738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b73c:	4641      	mov	r1, r8
 800b73e:	1851      	adds	r1, r2, r1
 800b740:	6139      	str	r1, [r7, #16]
 800b742:	4649      	mov	r1, r9
 800b744:	414b      	adcs	r3, r1
 800b746:	617b      	str	r3, [r7, #20]
 800b748:	f04f 0200 	mov.w	r2, #0
 800b74c:	f04f 0300 	mov.w	r3, #0
 800b750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b754:	4659      	mov	r1, fp
 800b756:	00cb      	lsls	r3, r1, #3
 800b758:	4651      	mov	r1, sl
 800b75a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b75e:	4651      	mov	r1, sl
 800b760:	00ca      	lsls	r2, r1, #3
 800b762:	4610      	mov	r0, r2
 800b764:	4619      	mov	r1, r3
 800b766:	4603      	mov	r3, r0
 800b768:	4642      	mov	r2, r8
 800b76a:	189b      	adds	r3, r3, r2
 800b76c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b770:	464b      	mov	r3, r9
 800b772:	460a      	mov	r2, r1
 800b774:	eb42 0303 	adc.w	r3, r2, r3
 800b778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	67bb      	str	r3, [r7, #120]	; 0x78
 800b786:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b788:	f04f 0200 	mov.w	r2, #0
 800b78c:	f04f 0300 	mov.w	r3, #0
 800b790:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b794:	4649      	mov	r1, r9
 800b796:	008b      	lsls	r3, r1, #2
 800b798:	4641      	mov	r1, r8
 800b79a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b79e:	4641      	mov	r1, r8
 800b7a0:	008a      	lsls	r2, r1, #2
 800b7a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b7a6:	f7f5 fa57 	bl	8000c58 <__aeabi_uldivmod>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4b39      	ldr	r3, [pc, #228]	; (800b894 <UART_SetConfig+0x4e4>)
 800b7b0:	fba3 1302 	umull	r1, r3, r3, r2
 800b7b4:	095b      	lsrs	r3, r3, #5
 800b7b6:	2164      	movs	r1, #100	; 0x64
 800b7b8:	fb01 f303 	mul.w	r3, r1, r3
 800b7bc:	1ad3      	subs	r3, r2, r3
 800b7be:	011b      	lsls	r3, r3, #4
 800b7c0:	3332      	adds	r3, #50	; 0x32
 800b7c2:	4a34      	ldr	r2, [pc, #208]	; (800b894 <UART_SetConfig+0x4e4>)
 800b7c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b7c8:	095b      	lsrs	r3, r3, #5
 800b7ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7ce:	441c      	add	r4, r3
 800b7d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	673b      	str	r3, [r7, #112]	; 0x70
 800b7d8:	677a      	str	r2, [r7, #116]	; 0x74
 800b7da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b7de:	4642      	mov	r2, r8
 800b7e0:	464b      	mov	r3, r9
 800b7e2:	1891      	adds	r1, r2, r2
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	415b      	adcs	r3, r3
 800b7e8:	60fb      	str	r3, [r7, #12]
 800b7ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b7ee:	4641      	mov	r1, r8
 800b7f0:	1851      	adds	r1, r2, r1
 800b7f2:	6039      	str	r1, [r7, #0]
 800b7f4:	4649      	mov	r1, r9
 800b7f6:	414b      	adcs	r3, r1
 800b7f8:	607b      	str	r3, [r7, #4]
 800b7fa:	f04f 0200 	mov.w	r2, #0
 800b7fe:	f04f 0300 	mov.w	r3, #0
 800b802:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b806:	4659      	mov	r1, fp
 800b808:	00cb      	lsls	r3, r1, #3
 800b80a:	4651      	mov	r1, sl
 800b80c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b810:	4651      	mov	r1, sl
 800b812:	00ca      	lsls	r2, r1, #3
 800b814:	4610      	mov	r0, r2
 800b816:	4619      	mov	r1, r3
 800b818:	4603      	mov	r3, r0
 800b81a:	4642      	mov	r2, r8
 800b81c:	189b      	adds	r3, r3, r2
 800b81e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b820:	464b      	mov	r3, r9
 800b822:	460a      	mov	r2, r1
 800b824:	eb42 0303 	adc.w	r3, r2, r3
 800b828:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b82a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	663b      	str	r3, [r7, #96]	; 0x60
 800b834:	667a      	str	r2, [r7, #100]	; 0x64
 800b836:	f04f 0200 	mov.w	r2, #0
 800b83a:	f04f 0300 	mov.w	r3, #0
 800b83e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b842:	4649      	mov	r1, r9
 800b844:	008b      	lsls	r3, r1, #2
 800b846:	4641      	mov	r1, r8
 800b848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b84c:	4641      	mov	r1, r8
 800b84e:	008a      	lsls	r2, r1, #2
 800b850:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b854:	f7f5 fa00 	bl	8000c58 <__aeabi_uldivmod>
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	4b0d      	ldr	r3, [pc, #52]	; (800b894 <UART_SetConfig+0x4e4>)
 800b85e:	fba3 1302 	umull	r1, r3, r3, r2
 800b862:	095b      	lsrs	r3, r3, #5
 800b864:	2164      	movs	r1, #100	; 0x64
 800b866:	fb01 f303 	mul.w	r3, r1, r3
 800b86a:	1ad3      	subs	r3, r2, r3
 800b86c:	011b      	lsls	r3, r3, #4
 800b86e:	3332      	adds	r3, #50	; 0x32
 800b870:	4a08      	ldr	r2, [pc, #32]	; (800b894 <UART_SetConfig+0x4e4>)
 800b872:	fba2 2303 	umull	r2, r3, r2, r3
 800b876:	095b      	lsrs	r3, r3, #5
 800b878:	f003 020f 	and.w	r2, r3, #15
 800b87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4422      	add	r2, r4
 800b884:	609a      	str	r2, [r3, #8]
}
 800b886:	bf00      	nop
 800b888:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b88c:	46bd      	mov	sp, r7
 800b88e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b892:	bf00      	nop
 800b894:	51eb851f 	.word	0x51eb851f

0800b898 <_ZdlPvj>:
 800b898:	f000 b817 	b.w	800b8ca <_ZdlPv>

0800b89c <_Znwj>:
 800b89c:	2801      	cmp	r0, #1
 800b89e:	bf38      	it	cc
 800b8a0:	2001      	movcc	r0, #1
 800b8a2:	b510      	push	{r4, lr}
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f000 ff66 	bl	800c778 <malloc>
 800b8ac:	b930      	cbnz	r0, 800b8bc <_Znwj+0x20>
 800b8ae:	f000 f80f 	bl	800b8d0 <_ZSt15get_new_handlerv>
 800b8b2:	b908      	cbnz	r0, 800b8b8 <_Znwj+0x1c>
 800b8b4:	f000 ff2e 	bl	800c714 <abort>
 800b8b8:	4780      	blx	r0
 800b8ba:	e7f4      	b.n	800b8a6 <_Znwj+0xa>
 800b8bc:	bd10      	pop	{r4, pc}

0800b8be <_ZSt17__throw_bad_allocv>:
 800b8be:	b508      	push	{r3, lr}
 800b8c0:	f000 ff28 	bl	800c714 <abort>

0800b8c4 <_ZSt20__throw_length_errorPKc>:
 800b8c4:	b508      	push	{r3, lr}
 800b8c6:	f000 ff25 	bl	800c714 <abort>

0800b8ca <_ZdlPv>:
 800b8ca:	f000 bf5d 	b.w	800c788 <free>
	...

0800b8d0 <_ZSt15get_new_handlerv>:
 800b8d0:	4b02      	ldr	r3, [pc, #8]	; (800b8dc <_ZSt15get_new_handlerv+0xc>)
 800b8d2:	6818      	ldr	r0, [r3, #0]
 800b8d4:	f3bf 8f5b 	dmb	ish
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	200010dc 	.word	0x200010dc

0800b8e0 <pow>:
 800b8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e2:	ed2d 8b02 	vpush	{d8}
 800b8e6:	eeb0 8a40 	vmov.f32	s16, s0
 800b8ea:	eef0 8a60 	vmov.f32	s17, s1
 800b8ee:	ec55 4b11 	vmov	r4, r5, d1
 800b8f2:	f000 f865 	bl	800b9c0 <__ieee754_pow>
 800b8f6:	4622      	mov	r2, r4
 800b8f8:	462b      	mov	r3, r5
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	ec57 6b10 	vmov	r6, r7, d0
 800b902:	f7f5 f91b 	bl	8000b3c <__aeabi_dcmpun>
 800b906:	2800      	cmp	r0, #0
 800b908:	d13b      	bne.n	800b982 <pow+0xa2>
 800b90a:	ec51 0b18 	vmov	r0, r1, d8
 800b90e:	2200      	movs	r2, #0
 800b910:	2300      	movs	r3, #0
 800b912:	f7f5 f8e1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b916:	b1b8      	cbz	r0, 800b948 <pow+0x68>
 800b918:	2200      	movs	r2, #0
 800b91a:	2300      	movs	r3, #0
 800b91c:	4620      	mov	r0, r4
 800b91e:	4629      	mov	r1, r5
 800b920:	f7f5 f8da 	bl	8000ad8 <__aeabi_dcmpeq>
 800b924:	2800      	cmp	r0, #0
 800b926:	d146      	bne.n	800b9b6 <pow+0xd6>
 800b928:	ec45 4b10 	vmov	d0, r4, r5
 800b92c:	f000 fe61 	bl	800c5f2 <finite>
 800b930:	b338      	cbz	r0, 800b982 <pow+0xa2>
 800b932:	2200      	movs	r2, #0
 800b934:	2300      	movs	r3, #0
 800b936:	4620      	mov	r0, r4
 800b938:	4629      	mov	r1, r5
 800b93a:	f7f5 f8d7 	bl	8000aec <__aeabi_dcmplt>
 800b93e:	b300      	cbz	r0, 800b982 <pow+0xa2>
 800b940:	f000 fef0 	bl	800c724 <__errno>
 800b944:	2322      	movs	r3, #34	; 0x22
 800b946:	e01b      	b.n	800b980 <pow+0xa0>
 800b948:	ec47 6b10 	vmov	d0, r6, r7
 800b94c:	f000 fe51 	bl	800c5f2 <finite>
 800b950:	b9e0      	cbnz	r0, 800b98c <pow+0xac>
 800b952:	eeb0 0a48 	vmov.f32	s0, s16
 800b956:	eef0 0a68 	vmov.f32	s1, s17
 800b95a:	f000 fe4a 	bl	800c5f2 <finite>
 800b95e:	b1a8      	cbz	r0, 800b98c <pow+0xac>
 800b960:	ec45 4b10 	vmov	d0, r4, r5
 800b964:	f000 fe45 	bl	800c5f2 <finite>
 800b968:	b180      	cbz	r0, 800b98c <pow+0xac>
 800b96a:	4632      	mov	r2, r6
 800b96c:	463b      	mov	r3, r7
 800b96e:	4630      	mov	r0, r6
 800b970:	4639      	mov	r1, r7
 800b972:	f7f5 f8e3 	bl	8000b3c <__aeabi_dcmpun>
 800b976:	2800      	cmp	r0, #0
 800b978:	d0e2      	beq.n	800b940 <pow+0x60>
 800b97a:	f000 fed3 	bl	800c724 <__errno>
 800b97e:	2321      	movs	r3, #33	; 0x21
 800b980:	6003      	str	r3, [r0, #0]
 800b982:	ecbd 8b02 	vpop	{d8}
 800b986:	ec47 6b10 	vmov	d0, r6, r7
 800b98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b98c:	2200      	movs	r2, #0
 800b98e:	2300      	movs	r3, #0
 800b990:	4630      	mov	r0, r6
 800b992:	4639      	mov	r1, r7
 800b994:	f7f5 f8a0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b998:	2800      	cmp	r0, #0
 800b99a:	d0f2      	beq.n	800b982 <pow+0xa2>
 800b99c:	eeb0 0a48 	vmov.f32	s0, s16
 800b9a0:	eef0 0a68 	vmov.f32	s1, s17
 800b9a4:	f000 fe25 	bl	800c5f2 <finite>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	d0ea      	beq.n	800b982 <pow+0xa2>
 800b9ac:	ec45 4b10 	vmov	d0, r4, r5
 800b9b0:	f000 fe1f 	bl	800c5f2 <finite>
 800b9b4:	e7c3      	b.n	800b93e <pow+0x5e>
 800b9b6:	4f01      	ldr	r7, [pc, #4]	; (800b9bc <pow+0xdc>)
 800b9b8:	2600      	movs	r6, #0
 800b9ba:	e7e2      	b.n	800b982 <pow+0xa2>
 800b9bc:	3ff00000 	.word	0x3ff00000

0800b9c0 <__ieee754_pow>:
 800b9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c4:	ed2d 8b06 	vpush	{d8-d10}
 800b9c8:	b089      	sub	sp, #36	; 0x24
 800b9ca:	ed8d 1b00 	vstr	d1, [sp]
 800b9ce:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b9d2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b9d6:	ea58 0102 	orrs.w	r1, r8, r2
 800b9da:	ec57 6b10 	vmov	r6, r7, d0
 800b9de:	d115      	bne.n	800ba0c <__ieee754_pow+0x4c>
 800b9e0:	19b3      	adds	r3, r6, r6
 800b9e2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b9e6:	4152      	adcs	r2, r2
 800b9e8:	4299      	cmp	r1, r3
 800b9ea:	4b89      	ldr	r3, [pc, #548]	; (800bc10 <__ieee754_pow+0x250>)
 800b9ec:	4193      	sbcs	r3, r2
 800b9ee:	f080 84d2 	bcs.w	800c396 <__ieee754_pow+0x9d6>
 800b9f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	f7f4 fc4f 	bl	800029c <__adddf3>
 800b9fe:	ec41 0b10 	vmov	d0, r0, r1
 800ba02:	b009      	add	sp, #36	; 0x24
 800ba04:	ecbd 8b06 	vpop	{d8-d10}
 800ba08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba0c:	4b81      	ldr	r3, [pc, #516]	; (800bc14 <__ieee754_pow+0x254>)
 800ba0e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ba12:	429c      	cmp	r4, r3
 800ba14:	ee10 aa10 	vmov	sl, s0
 800ba18:	463d      	mov	r5, r7
 800ba1a:	dc06      	bgt.n	800ba2a <__ieee754_pow+0x6a>
 800ba1c:	d101      	bne.n	800ba22 <__ieee754_pow+0x62>
 800ba1e:	2e00      	cmp	r6, #0
 800ba20:	d1e7      	bne.n	800b9f2 <__ieee754_pow+0x32>
 800ba22:	4598      	cmp	r8, r3
 800ba24:	dc01      	bgt.n	800ba2a <__ieee754_pow+0x6a>
 800ba26:	d10f      	bne.n	800ba48 <__ieee754_pow+0x88>
 800ba28:	b172      	cbz	r2, 800ba48 <__ieee754_pow+0x88>
 800ba2a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ba2e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ba32:	ea55 050a 	orrs.w	r5, r5, sl
 800ba36:	d1dc      	bne.n	800b9f2 <__ieee754_pow+0x32>
 800ba38:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba3c:	18db      	adds	r3, r3, r3
 800ba3e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ba42:	4152      	adcs	r2, r2
 800ba44:	429d      	cmp	r5, r3
 800ba46:	e7d0      	b.n	800b9ea <__ieee754_pow+0x2a>
 800ba48:	2d00      	cmp	r5, #0
 800ba4a:	da3b      	bge.n	800bac4 <__ieee754_pow+0x104>
 800ba4c:	4b72      	ldr	r3, [pc, #456]	; (800bc18 <__ieee754_pow+0x258>)
 800ba4e:	4598      	cmp	r8, r3
 800ba50:	dc51      	bgt.n	800baf6 <__ieee754_pow+0x136>
 800ba52:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ba56:	4598      	cmp	r8, r3
 800ba58:	f340 84ac 	ble.w	800c3b4 <__ieee754_pow+0x9f4>
 800ba5c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ba60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ba64:	2b14      	cmp	r3, #20
 800ba66:	dd0f      	ble.n	800ba88 <__ieee754_pow+0xc8>
 800ba68:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ba6c:	fa22 f103 	lsr.w	r1, r2, r3
 800ba70:	fa01 f303 	lsl.w	r3, r1, r3
 800ba74:	4293      	cmp	r3, r2
 800ba76:	f040 849d 	bne.w	800c3b4 <__ieee754_pow+0x9f4>
 800ba7a:	f001 0101 	and.w	r1, r1, #1
 800ba7e:	f1c1 0302 	rsb	r3, r1, #2
 800ba82:	9304      	str	r3, [sp, #16]
 800ba84:	b182      	cbz	r2, 800baa8 <__ieee754_pow+0xe8>
 800ba86:	e05f      	b.n	800bb48 <__ieee754_pow+0x188>
 800ba88:	2a00      	cmp	r2, #0
 800ba8a:	d15b      	bne.n	800bb44 <__ieee754_pow+0x184>
 800ba8c:	f1c3 0314 	rsb	r3, r3, #20
 800ba90:	fa48 f103 	asr.w	r1, r8, r3
 800ba94:	fa01 f303 	lsl.w	r3, r1, r3
 800ba98:	4543      	cmp	r3, r8
 800ba9a:	f040 8488 	bne.w	800c3ae <__ieee754_pow+0x9ee>
 800ba9e:	f001 0101 	and.w	r1, r1, #1
 800baa2:	f1c1 0302 	rsb	r3, r1, #2
 800baa6:	9304      	str	r3, [sp, #16]
 800baa8:	4b5c      	ldr	r3, [pc, #368]	; (800bc1c <__ieee754_pow+0x25c>)
 800baaa:	4598      	cmp	r8, r3
 800baac:	d132      	bne.n	800bb14 <__ieee754_pow+0x154>
 800baae:	f1b9 0f00 	cmp.w	r9, #0
 800bab2:	f280 8478 	bge.w	800c3a6 <__ieee754_pow+0x9e6>
 800bab6:	4959      	ldr	r1, [pc, #356]	; (800bc1c <__ieee754_pow+0x25c>)
 800bab8:	4632      	mov	r2, r6
 800baba:	463b      	mov	r3, r7
 800babc:	2000      	movs	r0, #0
 800babe:	f7f4 fecd 	bl	800085c <__aeabi_ddiv>
 800bac2:	e79c      	b.n	800b9fe <__ieee754_pow+0x3e>
 800bac4:	2300      	movs	r3, #0
 800bac6:	9304      	str	r3, [sp, #16]
 800bac8:	2a00      	cmp	r2, #0
 800baca:	d13d      	bne.n	800bb48 <__ieee754_pow+0x188>
 800bacc:	4b51      	ldr	r3, [pc, #324]	; (800bc14 <__ieee754_pow+0x254>)
 800bace:	4598      	cmp	r8, r3
 800bad0:	d1ea      	bne.n	800baa8 <__ieee754_pow+0xe8>
 800bad2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bad6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bada:	ea53 030a 	orrs.w	r3, r3, sl
 800bade:	f000 845a 	beq.w	800c396 <__ieee754_pow+0x9d6>
 800bae2:	4b4f      	ldr	r3, [pc, #316]	; (800bc20 <__ieee754_pow+0x260>)
 800bae4:	429c      	cmp	r4, r3
 800bae6:	dd08      	ble.n	800bafa <__ieee754_pow+0x13a>
 800bae8:	f1b9 0f00 	cmp.w	r9, #0
 800baec:	f2c0 8457 	blt.w	800c39e <__ieee754_pow+0x9de>
 800baf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800baf4:	e783      	b.n	800b9fe <__ieee754_pow+0x3e>
 800baf6:	2302      	movs	r3, #2
 800baf8:	e7e5      	b.n	800bac6 <__ieee754_pow+0x106>
 800bafa:	f1b9 0f00 	cmp.w	r9, #0
 800bafe:	f04f 0000 	mov.w	r0, #0
 800bb02:	f04f 0100 	mov.w	r1, #0
 800bb06:	f6bf af7a 	bge.w	800b9fe <__ieee754_pow+0x3e>
 800bb0a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bb0e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bb12:	e774      	b.n	800b9fe <__ieee754_pow+0x3e>
 800bb14:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bb18:	d106      	bne.n	800bb28 <__ieee754_pow+0x168>
 800bb1a:	4632      	mov	r2, r6
 800bb1c:	463b      	mov	r3, r7
 800bb1e:	4630      	mov	r0, r6
 800bb20:	4639      	mov	r1, r7
 800bb22:	f7f4 fd71 	bl	8000608 <__aeabi_dmul>
 800bb26:	e76a      	b.n	800b9fe <__ieee754_pow+0x3e>
 800bb28:	4b3e      	ldr	r3, [pc, #248]	; (800bc24 <__ieee754_pow+0x264>)
 800bb2a:	4599      	cmp	r9, r3
 800bb2c:	d10c      	bne.n	800bb48 <__ieee754_pow+0x188>
 800bb2e:	2d00      	cmp	r5, #0
 800bb30:	db0a      	blt.n	800bb48 <__ieee754_pow+0x188>
 800bb32:	ec47 6b10 	vmov	d0, r6, r7
 800bb36:	b009      	add	sp, #36	; 0x24
 800bb38:	ecbd 8b06 	vpop	{d8-d10}
 800bb3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb40:	f000 bc6c 	b.w	800c41c <__ieee754_sqrt>
 800bb44:	2300      	movs	r3, #0
 800bb46:	9304      	str	r3, [sp, #16]
 800bb48:	ec47 6b10 	vmov	d0, r6, r7
 800bb4c:	f000 fd48 	bl	800c5e0 <fabs>
 800bb50:	ec51 0b10 	vmov	r0, r1, d0
 800bb54:	f1ba 0f00 	cmp.w	sl, #0
 800bb58:	d129      	bne.n	800bbae <__ieee754_pow+0x1ee>
 800bb5a:	b124      	cbz	r4, 800bb66 <__ieee754_pow+0x1a6>
 800bb5c:	4b2f      	ldr	r3, [pc, #188]	; (800bc1c <__ieee754_pow+0x25c>)
 800bb5e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d123      	bne.n	800bbae <__ieee754_pow+0x1ee>
 800bb66:	f1b9 0f00 	cmp.w	r9, #0
 800bb6a:	da05      	bge.n	800bb78 <__ieee754_pow+0x1b8>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	2000      	movs	r0, #0
 800bb72:	492a      	ldr	r1, [pc, #168]	; (800bc1c <__ieee754_pow+0x25c>)
 800bb74:	f7f4 fe72 	bl	800085c <__aeabi_ddiv>
 800bb78:	2d00      	cmp	r5, #0
 800bb7a:	f6bf af40 	bge.w	800b9fe <__ieee754_pow+0x3e>
 800bb7e:	9b04      	ldr	r3, [sp, #16]
 800bb80:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bb84:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bb88:	4323      	orrs	r3, r4
 800bb8a:	d108      	bne.n	800bb9e <__ieee754_pow+0x1de>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4610      	mov	r0, r2
 800bb92:	4619      	mov	r1, r3
 800bb94:	f7f4 fb80 	bl	8000298 <__aeabi_dsub>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	e78f      	b.n	800babe <__ieee754_pow+0xfe>
 800bb9e:	9b04      	ldr	r3, [sp, #16]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	f47f af2c 	bne.w	800b9fe <__ieee754_pow+0x3e>
 800bba6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbaa:	4619      	mov	r1, r3
 800bbac:	e727      	b.n	800b9fe <__ieee754_pow+0x3e>
 800bbae:	0feb      	lsrs	r3, r5, #31
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	9306      	str	r3, [sp, #24]
 800bbb4:	9a06      	ldr	r2, [sp, #24]
 800bbb6:	9b04      	ldr	r3, [sp, #16]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	d102      	bne.n	800bbc2 <__ieee754_pow+0x202>
 800bbbc:	4632      	mov	r2, r6
 800bbbe:	463b      	mov	r3, r7
 800bbc0:	e7e6      	b.n	800bb90 <__ieee754_pow+0x1d0>
 800bbc2:	4b19      	ldr	r3, [pc, #100]	; (800bc28 <__ieee754_pow+0x268>)
 800bbc4:	4598      	cmp	r8, r3
 800bbc6:	f340 80fb 	ble.w	800bdc0 <__ieee754_pow+0x400>
 800bbca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bbce:	4598      	cmp	r8, r3
 800bbd0:	4b13      	ldr	r3, [pc, #76]	; (800bc20 <__ieee754_pow+0x260>)
 800bbd2:	dd0c      	ble.n	800bbee <__ieee754_pow+0x22e>
 800bbd4:	429c      	cmp	r4, r3
 800bbd6:	dc0f      	bgt.n	800bbf8 <__ieee754_pow+0x238>
 800bbd8:	f1b9 0f00 	cmp.w	r9, #0
 800bbdc:	da0f      	bge.n	800bbfe <__ieee754_pow+0x23e>
 800bbde:	2000      	movs	r0, #0
 800bbe0:	b009      	add	sp, #36	; 0x24
 800bbe2:	ecbd 8b06 	vpop	{d8-d10}
 800bbe6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbea:	f000 bcf0 	b.w	800c5ce <__math_oflow>
 800bbee:	429c      	cmp	r4, r3
 800bbf0:	dbf2      	blt.n	800bbd8 <__ieee754_pow+0x218>
 800bbf2:	4b0a      	ldr	r3, [pc, #40]	; (800bc1c <__ieee754_pow+0x25c>)
 800bbf4:	429c      	cmp	r4, r3
 800bbf6:	dd19      	ble.n	800bc2c <__ieee754_pow+0x26c>
 800bbf8:	f1b9 0f00 	cmp.w	r9, #0
 800bbfc:	dcef      	bgt.n	800bbde <__ieee754_pow+0x21e>
 800bbfe:	2000      	movs	r0, #0
 800bc00:	b009      	add	sp, #36	; 0x24
 800bc02:	ecbd 8b06 	vpop	{d8-d10}
 800bc06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0a:	f000 bcd7 	b.w	800c5bc <__math_uflow>
 800bc0e:	bf00      	nop
 800bc10:	fff00000 	.word	0xfff00000
 800bc14:	7ff00000 	.word	0x7ff00000
 800bc18:	433fffff 	.word	0x433fffff
 800bc1c:	3ff00000 	.word	0x3ff00000
 800bc20:	3fefffff 	.word	0x3fefffff
 800bc24:	3fe00000 	.word	0x3fe00000
 800bc28:	41e00000 	.word	0x41e00000
 800bc2c:	4b60      	ldr	r3, [pc, #384]	; (800bdb0 <__ieee754_pow+0x3f0>)
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f7f4 fb32 	bl	8000298 <__aeabi_dsub>
 800bc34:	a354      	add	r3, pc, #336	; (adr r3, 800bd88 <__ieee754_pow+0x3c8>)
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	460d      	mov	r5, r1
 800bc3e:	f7f4 fce3 	bl	8000608 <__aeabi_dmul>
 800bc42:	a353      	add	r3, pc, #332	; (adr r3, 800bd90 <__ieee754_pow+0x3d0>)
 800bc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc48:	4606      	mov	r6, r0
 800bc4a:	460f      	mov	r7, r1
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	4629      	mov	r1, r5
 800bc50:	f7f4 fcda 	bl	8000608 <__aeabi_dmul>
 800bc54:	4b57      	ldr	r3, [pc, #348]	; (800bdb4 <__ieee754_pow+0x3f4>)
 800bc56:	4682      	mov	sl, r0
 800bc58:	468b      	mov	fp, r1
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	4629      	mov	r1, r5
 800bc60:	f7f4 fcd2 	bl	8000608 <__aeabi_dmul>
 800bc64:	4602      	mov	r2, r0
 800bc66:	460b      	mov	r3, r1
 800bc68:	a14b      	add	r1, pc, #300	; (adr r1, 800bd98 <__ieee754_pow+0x3d8>)
 800bc6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc6e:	f7f4 fb13 	bl	8000298 <__aeabi_dsub>
 800bc72:	4622      	mov	r2, r4
 800bc74:	462b      	mov	r3, r5
 800bc76:	f7f4 fcc7 	bl	8000608 <__aeabi_dmul>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	2000      	movs	r0, #0
 800bc80:	494d      	ldr	r1, [pc, #308]	; (800bdb8 <__ieee754_pow+0x3f8>)
 800bc82:	f7f4 fb09 	bl	8000298 <__aeabi_dsub>
 800bc86:	4622      	mov	r2, r4
 800bc88:	4680      	mov	r8, r0
 800bc8a:	4689      	mov	r9, r1
 800bc8c:	462b      	mov	r3, r5
 800bc8e:	4620      	mov	r0, r4
 800bc90:	4629      	mov	r1, r5
 800bc92:	f7f4 fcb9 	bl	8000608 <__aeabi_dmul>
 800bc96:	4602      	mov	r2, r0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4640      	mov	r0, r8
 800bc9c:	4649      	mov	r1, r9
 800bc9e:	f7f4 fcb3 	bl	8000608 <__aeabi_dmul>
 800bca2:	a33f      	add	r3, pc, #252	; (adr r3, 800bda0 <__ieee754_pow+0x3e0>)
 800bca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca8:	f7f4 fcae 	bl	8000608 <__aeabi_dmul>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4650      	mov	r0, sl
 800bcb2:	4659      	mov	r1, fp
 800bcb4:	f7f4 faf0 	bl	8000298 <__aeabi_dsub>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	460b      	mov	r3, r1
 800bcbc:	4680      	mov	r8, r0
 800bcbe:	4689      	mov	r9, r1
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	4639      	mov	r1, r7
 800bcc4:	f7f4 faea 	bl	800029c <__adddf3>
 800bcc8:	2000      	movs	r0, #0
 800bcca:	4632      	mov	r2, r6
 800bccc:	463b      	mov	r3, r7
 800bcce:	4604      	mov	r4, r0
 800bcd0:	460d      	mov	r5, r1
 800bcd2:	f7f4 fae1 	bl	8000298 <__aeabi_dsub>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4649      	mov	r1, r9
 800bcde:	f7f4 fadb 	bl	8000298 <__aeabi_dsub>
 800bce2:	9b04      	ldr	r3, [sp, #16]
 800bce4:	9a06      	ldr	r2, [sp, #24]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	4313      	orrs	r3, r2
 800bcea:	4682      	mov	sl, r0
 800bcec:	468b      	mov	fp, r1
 800bcee:	f040 81e7 	bne.w	800c0c0 <__ieee754_pow+0x700>
 800bcf2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bda8 <__ieee754_pow+0x3e8>
 800bcf6:	eeb0 8a47 	vmov.f32	s16, s14
 800bcfa:	eef0 8a67 	vmov.f32	s17, s15
 800bcfe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bd02:	2600      	movs	r6, #0
 800bd04:	4632      	mov	r2, r6
 800bd06:	463b      	mov	r3, r7
 800bd08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd0c:	f7f4 fac4 	bl	8000298 <__aeabi_dsub>
 800bd10:	4622      	mov	r2, r4
 800bd12:	462b      	mov	r3, r5
 800bd14:	f7f4 fc78 	bl	8000608 <__aeabi_dmul>
 800bd18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd1c:	4680      	mov	r8, r0
 800bd1e:	4689      	mov	r9, r1
 800bd20:	4650      	mov	r0, sl
 800bd22:	4659      	mov	r1, fp
 800bd24:	f7f4 fc70 	bl	8000608 <__aeabi_dmul>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	4640      	mov	r0, r8
 800bd2e:	4649      	mov	r1, r9
 800bd30:	f7f4 fab4 	bl	800029c <__adddf3>
 800bd34:	4632      	mov	r2, r6
 800bd36:	463b      	mov	r3, r7
 800bd38:	4680      	mov	r8, r0
 800bd3a:	4689      	mov	r9, r1
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	4629      	mov	r1, r5
 800bd40:	f7f4 fc62 	bl	8000608 <__aeabi_dmul>
 800bd44:	460b      	mov	r3, r1
 800bd46:	4604      	mov	r4, r0
 800bd48:	460d      	mov	r5, r1
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	4649      	mov	r1, r9
 800bd4e:	4640      	mov	r0, r8
 800bd50:	f7f4 faa4 	bl	800029c <__adddf3>
 800bd54:	4b19      	ldr	r3, [pc, #100]	; (800bdbc <__ieee754_pow+0x3fc>)
 800bd56:	4299      	cmp	r1, r3
 800bd58:	ec45 4b19 	vmov	d9, r4, r5
 800bd5c:	4606      	mov	r6, r0
 800bd5e:	460f      	mov	r7, r1
 800bd60:	468b      	mov	fp, r1
 800bd62:	f340 82f1 	ble.w	800c348 <__ieee754_pow+0x988>
 800bd66:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bd6a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bd6e:	4303      	orrs	r3, r0
 800bd70:	f000 81e4 	beq.w	800c13c <__ieee754_pow+0x77c>
 800bd74:	ec51 0b18 	vmov	r0, r1, d8
 800bd78:	2200      	movs	r2, #0
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f7f4 feb6 	bl	8000aec <__aeabi_dcmplt>
 800bd80:	3800      	subs	r0, #0
 800bd82:	bf18      	it	ne
 800bd84:	2001      	movne	r0, #1
 800bd86:	e72b      	b.n	800bbe0 <__ieee754_pow+0x220>
 800bd88:	60000000 	.word	0x60000000
 800bd8c:	3ff71547 	.word	0x3ff71547
 800bd90:	f85ddf44 	.word	0xf85ddf44
 800bd94:	3e54ae0b 	.word	0x3e54ae0b
 800bd98:	55555555 	.word	0x55555555
 800bd9c:	3fd55555 	.word	0x3fd55555
 800bda0:	652b82fe 	.word	0x652b82fe
 800bda4:	3ff71547 	.word	0x3ff71547
 800bda8:	00000000 	.word	0x00000000
 800bdac:	bff00000 	.word	0xbff00000
 800bdb0:	3ff00000 	.word	0x3ff00000
 800bdb4:	3fd00000 	.word	0x3fd00000
 800bdb8:	3fe00000 	.word	0x3fe00000
 800bdbc:	408fffff 	.word	0x408fffff
 800bdc0:	4bd5      	ldr	r3, [pc, #852]	; (800c118 <__ieee754_pow+0x758>)
 800bdc2:	402b      	ands	r3, r5
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	b92b      	cbnz	r3, 800bdd4 <__ieee754_pow+0x414>
 800bdc8:	4bd4      	ldr	r3, [pc, #848]	; (800c11c <__ieee754_pow+0x75c>)
 800bdca:	f7f4 fc1d 	bl	8000608 <__aeabi_dmul>
 800bdce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	1523      	asrs	r3, r4, #20
 800bdd6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bdda:	4413      	add	r3, r2
 800bddc:	9305      	str	r3, [sp, #20]
 800bdde:	4bd0      	ldr	r3, [pc, #832]	; (800c120 <__ieee754_pow+0x760>)
 800bde0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bde4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bde8:	429c      	cmp	r4, r3
 800bdea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bdee:	dd08      	ble.n	800be02 <__ieee754_pow+0x442>
 800bdf0:	4bcc      	ldr	r3, [pc, #816]	; (800c124 <__ieee754_pow+0x764>)
 800bdf2:	429c      	cmp	r4, r3
 800bdf4:	f340 8162 	ble.w	800c0bc <__ieee754_pow+0x6fc>
 800bdf8:	9b05      	ldr	r3, [sp, #20]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	9305      	str	r3, [sp, #20]
 800bdfe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800be02:	2400      	movs	r4, #0
 800be04:	00e3      	lsls	r3, r4, #3
 800be06:	9307      	str	r3, [sp, #28]
 800be08:	4bc7      	ldr	r3, [pc, #796]	; (800c128 <__ieee754_pow+0x768>)
 800be0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be0e:	ed93 7b00 	vldr	d7, [r3]
 800be12:	4629      	mov	r1, r5
 800be14:	ec53 2b17 	vmov	r2, r3, d7
 800be18:	eeb0 9a47 	vmov.f32	s18, s14
 800be1c:	eef0 9a67 	vmov.f32	s19, s15
 800be20:	4682      	mov	sl, r0
 800be22:	f7f4 fa39 	bl	8000298 <__aeabi_dsub>
 800be26:	4652      	mov	r2, sl
 800be28:	4606      	mov	r6, r0
 800be2a:	460f      	mov	r7, r1
 800be2c:	462b      	mov	r3, r5
 800be2e:	ec51 0b19 	vmov	r0, r1, d9
 800be32:	f7f4 fa33 	bl	800029c <__adddf3>
 800be36:	4602      	mov	r2, r0
 800be38:	460b      	mov	r3, r1
 800be3a:	2000      	movs	r0, #0
 800be3c:	49bb      	ldr	r1, [pc, #748]	; (800c12c <__ieee754_pow+0x76c>)
 800be3e:	f7f4 fd0d 	bl	800085c <__aeabi_ddiv>
 800be42:	ec41 0b1a 	vmov	d10, r0, r1
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	4630      	mov	r0, r6
 800be4c:	4639      	mov	r1, r7
 800be4e:	f7f4 fbdb 	bl	8000608 <__aeabi_dmul>
 800be52:	2300      	movs	r3, #0
 800be54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be58:	9302      	str	r3, [sp, #8]
 800be5a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800be5e:	46ab      	mov	fp, r5
 800be60:	106d      	asrs	r5, r5, #1
 800be62:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800be66:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800be6a:	ec41 0b18 	vmov	d8, r0, r1
 800be6e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800be72:	2200      	movs	r2, #0
 800be74:	4640      	mov	r0, r8
 800be76:	4649      	mov	r1, r9
 800be78:	4614      	mov	r4, r2
 800be7a:	461d      	mov	r5, r3
 800be7c:	f7f4 fbc4 	bl	8000608 <__aeabi_dmul>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	4630      	mov	r0, r6
 800be86:	4639      	mov	r1, r7
 800be88:	f7f4 fa06 	bl	8000298 <__aeabi_dsub>
 800be8c:	ec53 2b19 	vmov	r2, r3, d9
 800be90:	4606      	mov	r6, r0
 800be92:	460f      	mov	r7, r1
 800be94:	4620      	mov	r0, r4
 800be96:	4629      	mov	r1, r5
 800be98:	f7f4 f9fe 	bl	8000298 <__aeabi_dsub>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	4650      	mov	r0, sl
 800bea2:	4659      	mov	r1, fp
 800bea4:	f7f4 f9f8 	bl	8000298 <__aeabi_dsub>
 800bea8:	4642      	mov	r2, r8
 800beaa:	464b      	mov	r3, r9
 800beac:	f7f4 fbac 	bl	8000608 <__aeabi_dmul>
 800beb0:	4602      	mov	r2, r0
 800beb2:	460b      	mov	r3, r1
 800beb4:	4630      	mov	r0, r6
 800beb6:	4639      	mov	r1, r7
 800beb8:	f7f4 f9ee 	bl	8000298 <__aeabi_dsub>
 800bebc:	ec53 2b1a 	vmov	r2, r3, d10
 800bec0:	f7f4 fba2 	bl	8000608 <__aeabi_dmul>
 800bec4:	ec53 2b18 	vmov	r2, r3, d8
 800bec8:	ec41 0b19 	vmov	d9, r0, r1
 800becc:	ec51 0b18 	vmov	r0, r1, d8
 800bed0:	f7f4 fb9a 	bl	8000608 <__aeabi_dmul>
 800bed4:	a37c      	add	r3, pc, #496	; (adr r3, 800c0c8 <__ieee754_pow+0x708>)
 800bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beda:	4604      	mov	r4, r0
 800bedc:	460d      	mov	r5, r1
 800bede:	f7f4 fb93 	bl	8000608 <__aeabi_dmul>
 800bee2:	a37b      	add	r3, pc, #492	; (adr r3, 800c0d0 <__ieee754_pow+0x710>)
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	f7f4 f9d8 	bl	800029c <__adddf3>
 800beec:	4622      	mov	r2, r4
 800beee:	462b      	mov	r3, r5
 800bef0:	f7f4 fb8a 	bl	8000608 <__aeabi_dmul>
 800bef4:	a378      	add	r3, pc, #480	; (adr r3, 800c0d8 <__ieee754_pow+0x718>)
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	f7f4 f9cf 	bl	800029c <__adddf3>
 800befe:	4622      	mov	r2, r4
 800bf00:	462b      	mov	r3, r5
 800bf02:	f7f4 fb81 	bl	8000608 <__aeabi_dmul>
 800bf06:	a376      	add	r3, pc, #472	; (adr r3, 800c0e0 <__ieee754_pow+0x720>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	f7f4 f9c6 	bl	800029c <__adddf3>
 800bf10:	4622      	mov	r2, r4
 800bf12:	462b      	mov	r3, r5
 800bf14:	f7f4 fb78 	bl	8000608 <__aeabi_dmul>
 800bf18:	a373      	add	r3, pc, #460	; (adr r3, 800c0e8 <__ieee754_pow+0x728>)
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	f7f4 f9bd 	bl	800029c <__adddf3>
 800bf22:	4622      	mov	r2, r4
 800bf24:	462b      	mov	r3, r5
 800bf26:	f7f4 fb6f 	bl	8000608 <__aeabi_dmul>
 800bf2a:	a371      	add	r3, pc, #452	; (adr r3, 800c0f0 <__ieee754_pow+0x730>)
 800bf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf30:	f7f4 f9b4 	bl	800029c <__adddf3>
 800bf34:	4622      	mov	r2, r4
 800bf36:	4606      	mov	r6, r0
 800bf38:	460f      	mov	r7, r1
 800bf3a:	462b      	mov	r3, r5
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	4629      	mov	r1, r5
 800bf40:	f7f4 fb62 	bl	8000608 <__aeabi_dmul>
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	4630      	mov	r0, r6
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	f7f4 fb5c 	bl	8000608 <__aeabi_dmul>
 800bf50:	4642      	mov	r2, r8
 800bf52:	4604      	mov	r4, r0
 800bf54:	460d      	mov	r5, r1
 800bf56:	464b      	mov	r3, r9
 800bf58:	ec51 0b18 	vmov	r0, r1, d8
 800bf5c:	f7f4 f99e 	bl	800029c <__adddf3>
 800bf60:	ec53 2b19 	vmov	r2, r3, d9
 800bf64:	f7f4 fb50 	bl	8000608 <__aeabi_dmul>
 800bf68:	4622      	mov	r2, r4
 800bf6a:	462b      	mov	r3, r5
 800bf6c:	f7f4 f996 	bl	800029c <__adddf3>
 800bf70:	4642      	mov	r2, r8
 800bf72:	4682      	mov	sl, r0
 800bf74:	468b      	mov	fp, r1
 800bf76:	464b      	mov	r3, r9
 800bf78:	4640      	mov	r0, r8
 800bf7a:	4649      	mov	r1, r9
 800bf7c:	f7f4 fb44 	bl	8000608 <__aeabi_dmul>
 800bf80:	4b6b      	ldr	r3, [pc, #428]	; (800c130 <__ieee754_pow+0x770>)
 800bf82:	2200      	movs	r2, #0
 800bf84:	4606      	mov	r6, r0
 800bf86:	460f      	mov	r7, r1
 800bf88:	f7f4 f988 	bl	800029c <__adddf3>
 800bf8c:	4652      	mov	r2, sl
 800bf8e:	465b      	mov	r3, fp
 800bf90:	f7f4 f984 	bl	800029c <__adddf3>
 800bf94:	2000      	movs	r0, #0
 800bf96:	4604      	mov	r4, r0
 800bf98:	460d      	mov	r5, r1
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	4640      	mov	r0, r8
 800bfa0:	4649      	mov	r1, r9
 800bfa2:	f7f4 fb31 	bl	8000608 <__aeabi_dmul>
 800bfa6:	4b62      	ldr	r3, [pc, #392]	; (800c130 <__ieee754_pow+0x770>)
 800bfa8:	4680      	mov	r8, r0
 800bfaa:	4689      	mov	r9, r1
 800bfac:	2200      	movs	r2, #0
 800bfae:	4620      	mov	r0, r4
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	f7f4 f971 	bl	8000298 <__aeabi_dsub>
 800bfb6:	4632      	mov	r2, r6
 800bfb8:	463b      	mov	r3, r7
 800bfba:	f7f4 f96d 	bl	8000298 <__aeabi_dsub>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	4650      	mov	r0, sl
 800bfc4:	4659      	mov	r1, fp
 800bfc6:	f7f4 f967 	bl	8000298 <__aeabi_dsub>
 800bfca:	ec53 2b18 	vmov	r2, r3, d8
 800bfce:	f7f4 fb1b 	bl	8000608 <__aeabi_dmul>
 800bfd2:	4622      	mov	r2, r4
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	460f      	mov	r7, r1
 800bfd8:	462b      	mov	r3, r5
 800bfda:	ec51 0b19 	vmov	r0, r1, d9
 800bfde:	f7f4 fb13 	bl	8000608 <__aeabi_dmul>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	4639      	mov	r1, r7
 800bfea:	f7f4 f957 	bl	800029c <__adddf3>
 800bfee:	4606      	mov	r6, r0
 800bff0:	460f      	mov	r7, r1
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
 800bff6:	4640      	mov	r0, r8
 800bff8:	4649      	mov	r1, r9
 800bffa:	f7f4 f94f 	bl	800029c <__adddf3>
 800bffe:	a33e      	add	r3, pc, #248	; (adr r3, 800c0f8 <__ieee754_pow+0x738>)
 800c000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c004:	2000      	movs	r0, #0
 800c006:	4604      	mov	r4, r0
 800c008:	460d      	mov	r5, r1
 800c00a:	f7f4 fafd 	bl	8000608 <__aeabi_dmul>
 800c00e:	4642      	mov	r2, r8
 800c010:	ec41 0b18 	vmov	d8, r0, r1
 800c014:	464b      	mov	r3, r9
 800c016:	4620      	mov	r0, r4
 800c018:	4629      	mov	r1, r5
 800c01a:	f7f4 f93d 	bl	8000298 <__aeabi_dsub>
 800c01e:	4602      	mov	r2, r0
 800c020:	460b      	mov	r3, r1
 800c022:	4630      	mov	r0, r6
 800c024:	4639      	mov	r1, r7
 800c026:	f7f4 f937 	bl	8000298 <__aeabi_dsub>
 800c02a:	a335      	add	r3, pc, #212	; (adr r3, 800c100 <__ieee754_pow+0x740>)
 800c02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c030:	f7f4 faea 	bl	8000608 <__aeabi_dmul>
 800c034:	a334      	add	r3, pc, #208	; (adr r3, 800c108 <__ieee754_pow+0x748>)
 800c036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03a:	4606      	mov	r6, r0
 800c03c:	460f      	mov	r7, r1
 800c03e:	4620      	mov	r0, r4
 800c040:	4629      	mov	r1, r5
 800c042:	f7f4 fae1 	bl	8000608 <__aeabi_dmul>
 800c046:	4602      	mov	r2, r0
 800c048:	460b      	mov	r3, r1
 800c04a:	4630      	mov	r0, r6
 800c04c:	4639      	mov	r1, r7
 800c04e:	f7f4 f925 	bl	800029c <__adddf3>
 800c052:	9a07      	ldr	r2, [sp, #28]
 800c054:	4b37      	ldr	r3, [pc, #220]	; (800c134 <__ieee754_pow+0x774>)
 800c056:	4413      	add	r3, r2
 800c058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05c:	f7f4 f91e 	bl	800029c <__adddf3>
 800c060:	4682      	mov	sl, r0
 800c062:	9805      	ldr	r0, [sp, #20]
 800c064:	468b      	mov	fp, r1
 800c066:	f7f4 fa65 	bl	8000534 <__aeabi_i2d>
 800c06a:	9a07      	ldr	r2, [sp, #28]
 800c06c:	4b32      	ldr	r3, [pc, #200]	; (800c138 <__ieee754_pow+0x778>)
 800c06e:	4413      	add	r3, r2
 800c070:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c074:	4606      	mov	r6, r0
 800c076:	460f      	mov	r7, r1
 800c078:	4652      	mov	r2, sl
 800c07a:	465b      	mov	r3, fp
 800c07c:	ec51 0b18 	vmov	r0, r1, d8
 800c080:	f7f4 f90c 	bl	800029c <__adddf3>
 800c084:	4642      	mov	r2, r8
 800c086:	464b      	mov	r3, r9
 800c088:	f7f4 f908 	bl	800029c <__adddf3>
 800c08c:	4632      	mov	r2, r6
 800c08e:	463b      	mov	r3, r7
 800c090:	f7f4 f904 	bl	800029c <__adddf3>
 800c094:	2000      	movs	r0, #0
 800c096:	4632      	mov	r2, r6
 800c098:	463b      	mov	r3, r7
 800c09a:	4604      	mov	r4, r0
 800c09c:	460d      	mov	r5, r1
 800c09e:	f7f4 f8fb 	bl	8000298 <__aeabi_dsub>
 800c0a2:	4642      	mov	r2, r8
 800c0a4:	464b      	mov	r3, r9
 800c0a6:	f7f4 f8f7 	bl	8000298 <__aeabi_dsub>
 800c0aa:	ec53 2b18 	vmov	r2, r3, d8
 800c0ae:	f7f4 f8f3 	bl	8000298 <__aeabi_dsub>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	4650      	mov	r0, sl
 800c0b8:	4659      	mov	r1, fp
 800c0ba:	e610      	b.n	800bcde <__ieee754_pow+0x31e>
 800c0bc:	2401      	movs	r4, #1
 800c0be:	e6a1      	b.n	800be04 <__ieee754_pow+0x444>
 800c0c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c110 <__ieee754_pow+0x750>
 800c0c4:	e617      	b.n	800bcf6 <__ieee754_pow+0x336>
 800c0c6:	bf00      	nop
 800c0c8:	4a454eef 	.word	0x4a454eef
 800c0cc:	3fca7e28 	.word	0x3fca7e28
 800c0d0:	93c9db65 	.word	0x93c9db65
 800c0d4:	3fcd864a 	.word	0x3fcd864a
 800c0d8:	a91d4101 	.word	0xa91d4101
 800c0dc:	3fd17460 	.word	0x3fd17460
 800c0e0:	518f264d 	.word	0x518f264d
 800c0e4:	3fd55555 	.word	0x3fd55555
 800c0e8:	db6fabff 	.word	0xdb6fabff
 800c0ec:	3fdb6db6 	.word	0x3fdb6db6
 800c0f0:	33333303 	.word	0x33333303
 800c0f4:	3fe33333 	.word	0x3fe33333
 800c0f8:	e0000000 	.word	0xe0000000
 800c0fc:	3feec709 	.word	0x3feec709
 800c100:	dc3a03fd 	.word	0xdc3a03fd
 800c104:	3feec709 	.word	0x3feec709
 800c108:	145b01f5 	.word	0x145b01f5
 800c10c:	be3e2fe0 	.word	0xbe3e2fe0
 800c110:	00000000 	.word	0x00000000
 800c114:	3ff00000 	.word	0x3ff00000
 800c118:	7ff00000 	.word	0x7ff00000
 800c11c:	43400000 	.word	0x43400000
 800c120:	0003988e 	.word	0x0003988e
 800c124:	000bb679 	.word	0x000bb679
 800c128:	0800f288 	.word	0x0800f288
 800c12c:	3ff00000 	.word	0x3ff00000
 800c130:	40080000 	.word	0x40080000
 800c134:	0800f2a8 	.word	0x0800f2a8
 800c138:	0800f298 	.word	0x0800f298
 800c13c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c414 <__ieee754_pow+0xa54>)
 800c13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c142:	4640      	mov	r0, r8
 800c144:	4649      	mov	r1, r9
 800c146:	f7f4 f8a9 	bl	800029c <__adddf3>
 800c14a:	4622      	mov	r2, r4
 800c14c:	ec41 0b1a 	vmov	d10, r0, r1
 800c150:	462b      	mov	r3, r5
 800c152:	4630      	mov	r0, r6
 800c154:	4639      	mov	r1, r7
 800c156:	f7f4 f89f 	bl	8000298 <__aeabi_dsub>
 800c15a:	4602      	mov	r2, r0
 800c15c:	460b      	mov	r3, r1
 800c15e:	ec51 0b1a 	vmov	r0, r1, d10
 800c162:	f7f4 fce1 	bl	8000b28 <__aeabi_dcmpgt>
 800c166:	2800      	cmp	r0, #0
 800c168:	f47f ae04 	bne.w	800bd74 <__ieee754_pow+0x3b4>
 800c16c:	4aa4      	ldr	r2, [pc, #656]	; (800c400 <__ieee754_pow+0xa40>)
 800c16e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c172:	4293      	cmp	r3, r2
 800c174:	f340 8108 	ble.w	800c388 <__ieee754_pow+0x9c8>
 800c178:	151b      	asrs	r3, r3, #20
 800c17a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c17e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c182:	fa4a f303 	asr.w	r3, sl, r3
 800c186:	445b      	add	r3, fp
 800c188:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c18c:	4e9d      	ldr	r6, [pc, #628]	; (800c404 <__ieee754_pow+0xa44>)
 800c18e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c192:	4116      	asrs	r6, r2
 800c194:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c198:	2000      	movs	r0, #0
 800c19a:	ea23 0106 	bic.w	r1, r3, r6
 800c19e:	f1c2 0214 	rsb	r2, r2, #20
 800c1a2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c1a6:	fa4a fa02 	asr.w	sl, sl, r2
 800c1aa:	f1bb 0f00 	cmp.w	fp, #0
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	bfb8      	it	lt
 800c1b8:	f1ca 0a00 	rsblt	sl, sl, #0
 800c1bc:	f7f4 f86c 	bl	8000298 <__aeabi_dsub>
 800c1c0:	ec41 0b19 	vmov	d9, r0, r1
 800c1c4:	4642      	mov	r2, r8
 800c1c6:	464b      	mov	r3, r9
 800c1c8:	ec51 0b19 	vmov	r0, r1, d9
 800c1cc:	f7f4 f866 	bl	800029c <__adddf3>
 800c1d0:	a37b      	add	r3, pc, #492	; (adr r3, 800c3c0 <__ieee754_pow+0xa00>)
 800c1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	4604      	mov	r4, r0
 800c1da:	460d      	mov	r5, r1
 800c1dc:	f7f4 fa14 	bl	8000608 <__aeabi_dmul>
 800c1e0:	ec53 2b19 	vmov	r2, r3, d9
 800c1e4:	4606      	mov	r6, r0
 800c1e6:	460f      	mov	r7, r1
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	4629      	mov	r1, r5
 800c1ec:	f7f4 f854 	bl	8000298 <__aeabi_dsub>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	4640      	mov	r0, r8
 800c1f6:	4649      	mov	r1, r9
 800c1f8:	f7f4 f84e 	bl	8000298 <__aeabi_dsub>
 800c1fc:	a372      	add	r3, pc, #456	; (adr r3, 800c3c8 <__ieee754_pow+0xa08>)
 800c1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c202:	f7f4 fa01 	bl	8000608 <__aeabi_dmul>
 800c206:	a372      	add	r3, pc, #456	; (adr r3, 800c3d0 <__ieee754_pow+0xa10>)
 800c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20c:	4680      	mov	r8, r0
 800c20e:	4689      	mov	r9, r1
 800c210:	4620      	mov	r0, r4
 800c212:	4629      	mov	r1, r5
 800c214:	f7f4 f9f8 	bl	8000608 <__aeabi_dmul>
 800c218:	4602      	mov	r2, r0
 800c21a:	460b      	mov	r3, r1
 800c21c:	4640      	mov	r0, r8
 800c21e:	4649      	mov	r1, r9
 800c220:	f7f4 f83c 	bl	800029c <__adddf3>
 800c224:	4604      	mov	r4, r0
 800c226:	460d      	mov	r5, r1
 800c228:	4602      	mov	r2, r0
 800c22a:	460b      	mov	r3, r1
 800c22c:	4630      	mov	r0, r6
 800c22e:	4639      	mov	r1, r7
 800c230:	f7f4 f834 	bl	800029c <__adddf3>
 800c234:	4632      	mov	r2, r6
 800c236:	463b      	mov	r3, r7
 800c238:	4680      	mov	r8, r0
 800c23a:	4689      	mov	r9, r1
 800c23c:	f7f4 f82c 	bl	8000298 <__aeabi_dsub>
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4620      	mov	r0, r4
 800c246:	4629      	mov	r1, r5
 800c248:	f7f4 f826 	bl	8000298 <__aeabi_dsub>
 800c24c:	4642      	mov	r2, r8
 800c24e:	4606      	mov	r6, r0
 800c250:	460f      	mov	r7, r1
 800c252:	464b      	mov	r3, r9
 800c254:	4640      	mov	r0, r8
 800c256:	4649      	mov	r1, r9
 800c258:	f7f4 f9d6 	bl	8000608 <__aeabi_dmul>
 800c25c:	a35e      	add	r3, pc, #376	; (adr r3, 800c3d8 <__ieee754_pow+0xa18>)
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	4604      	mov	r4, r0
 800c264:	460d      	mov	r5, r1
 800c266:	f7f4 f9cf 	bl	8000608 <__aeabi_dmul>
 800c26a:	a35d      	add	r3, pc, #372	; (adr r3, 800c3e0 <__ieee754_pow+0xa20>)
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	f7f4 f812 	bl	8000298 <__aeabi_dsub>
 800c274:	4622      	mov	r2, r4
 800c276:	462b      	mov	r3, r5
 800c278:	f7f4 f9c6 	bl	8000608 <__aeabi_dmul>
 800c27c:	a35a      	add	r3, pc, #360	; (adr r3, 800c3e8 <__ieee754_pow+0xa28>)
 800c27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c282:	f7f4 f80b 	bl	800029c <__adddf3>
 800c286:	4622      	mov	r2, r4
 800c288:	462b      	mov	r3, r5
 800c28a:	f7f4 f9bd 	bl	8000608 <__aeabi_dmul>
 800c28e:	a358      	add	r3, pc, #352	; (adr r3, 800c3f0 <__ieee754_pow+0xa30>)
 800c290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c294:	f7f4 f800 	bl	8000298 <__aeabi_dsub>
 800c298:	4622      	mov	r2, r4
 800c29a:	462b      	mov	r3, r5
 800c29c:	f7f4 f9b4 	bl	8000608 <__aeabi_dmul>
 800c2a0:	a355      	add	r3, pc, #340	; (adr r3, 800c3f8 <__ieee754_pow+0xa38>)
 800c2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a6:	f7f3 fff9 	bl	800029c <__adddf3>
 800c2aa:	4622      	mov	r2, r4
 800c2ac:	462b      	mov	r3, r5
 800c2ae:	f7f4 f9ab 	bl	8000608 <__aeabi_dmul>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4640      	mov	r0, r8
 800c2b8:	4649      	mov	r1, r9
 800c2ba:	f7f3 ffed 	bl	8000298 <__aeabi_dsub>
 800c2be:	4604      	mov	r4, r0
 800c2c0:	460d      	mov	r5, r1
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4640      	mov	r0, r8
 800c2c8:	4649      	mov	r1, r9
 800c2ca:	f7f4 f99d 	bl	8000608 <__aeabi_dmul>
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	ec41 0b19 	vmov	d9, r0, r1
 800c2d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2d8:	4620      	mov	r0, r4
 800c2da:	4629      	mov	r1, r5
 800c2dc:	f7f3 ffdc 	bl	8000298 <__aeabi_dsub>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	ec51 0b19 	vmov	r0, r1, d9
 800c2e8:	f7f4 fab8 	bl	800085c <__aeabi_ddiv>
 800c2ec:	4632      	mov	r2, r6
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	460d      	mov	r5, r1
 800c2f2:	463b      	mov	r3, r7
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	4649      	mov	r1, r9
 800c2f8:	f7f4 f986 	bl	8000608 <__aeabi_dmul>
 800c2fc:	4632      	mov	r2, r6
 800c2fe:	463b      	mov	r3, r7
 800c300:	f7f3 ffcc 	bl	800029c <__adddf3>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	4620      	mov	r0, r4
 800c30a:	4629      	mov	r1, r5
 800c30c:	f7f3 ffc4 	bl	8000298 <__aeabi_dsub>
 800c310:	4642      	mov	r2, r8
 800c312:	464b      	mov	r3, r9
 800c314:	f7f3 ffc0 	bl	8000298 <__aeabi_dsub>
 800c318:	460b      	mov	r3, r1
 800c31a:	4602      	mov	r2, r0
 800c31c:	493a      	ldr	r1, [pc, #232]	; (800c408 <__ieee754_pow+0xa48>)
 800c31e:	2000      	movs	r0, #0
 800c320:	f7f3 ffba 	bl	8000298 <__aeabi_dsub>
 800c324:	ec41 0b10 	vmov	d0, r0, r1
 800c328:	ee10 3a90 	vmov	r3, s1
 800c32c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c334:	da2b      	bge.n	800c38e <__ieee754_pow+0x9ce>
 800c336:	4650      	mov	r0, sl
 800c338:	f000 f966 	bl	800c608 <scalbn>
 800c33c:	ec51 0b10 	vmov	r0, r1, d0
 800c340:	ec53 2b18 	vmov	r2, r3, d8
 800c344:	f7ff bbed 	b.w	800bb22 <__ieee754_pow+0x162>
 800c348:	4b30      	ldr	r3, [pc, #192]	; (800c40c <__ieee754_pow+0xa4c>)
 800c34a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c34e:	429e      	cmp	r6, r3
 800c350:	f77f af0c 	ble.w	800c16c <__ieee754_pow+0x7ac>
 800c354:	4b2e      	ldr	r3, [pc, #184]	; (800c410 <__ieee754_pow+0xa50>)
 800c356:	440b      	add	r3, r1
 800c358:	4303      	orrs	r3, r0
 800c35a:	d009      	beq.n	800c370 <__ieee754_pow+0x9b0>
 800c35c:	ec51 0b18 	vmov	r0, r1, d8
 800c360:	2200      	movs	r2, #0
 800c362:	2300      	movs	r3, #0
 800c364:	f7f4 fbc2 	bl	8000aec <__aeabi_dcmplt>
 800c368:	3800      	subs	r0, #0
 800c36a:	bf18      	it	ne
 800c36c:	2001      	movne	r0, #1
 800c36e:	e447      	b.n	800bc00 <__ieee754_pow+0x240>
 800c370:	4622      	mov	r2, r4
 800c372:	462b      	mov	r3, r5
 800c374:	f7f3 ff90 	bl	8000298 <__aeabi_dsub>
 800c378:	4642      	mov	r2, r8
 800c37a:	464b      	mov	r3, r9
 800c37c:	f7f4 fbca 	bl	8000b14 <__aeabi_dcmpge>
 800c380:	2800      	cmp	r0, #0
 800c382:	f43f aef3 	beq.w	800c16c <__ieee754_pow+0x7ac>
 800c386:	e7e9      	b.n	800c35c <__ieee754_pow+0x99c>
 800c388:	f04f 0a00 	mov.w	sl, #0
 800c38c:	e71a      	b.n	800c1c4 <__ieee754_pow+0x804>
 800c38e:	ec51 0b10 	vmov	r0, r1, d0
 800c392:	4619      	mov	r1, r3
 800c394:	e7d4      	b.n	800c340 <__ieee754_pow+0x980>
 800c396:	491c      	ldr	r1, [pc, #112]	; (800c408 <__ieee754_pow+0xa48>)
 800c398:	2000      	movs	r0, #0
 800c39a:	f7ff bb30 	b.w	800b9fe <__ieee754_pow+0x3e>
 800c39e:	2000      	movs	r0, #0
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	f7ff bb2c 	b.w	800b9fe <__ieee754_pow+0x3e>
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	4639      	mov	r1, r7
 800c3aa:	f7ff bb28 	b.w	800b9fe <__ieee754_pow+0x3e>
 800c3ae:	9204      	str	r2, [sp, #16]
 800c3b0:	f7ff bb7a 	b.w	800baa8 <__ieee754_pow+0xe8>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	f7ff bb64 	b.w	800ba82 <__ieee754_pow+0xc2>
 800c3ba:	bf00      	nop
 800c3bc:	f3af 8000 	nop.w
 800c3c0:	00000000 	.word	0x00000000
 800c3c4:	3fe62e43 	.word	0x3fe62e43
 800c3c8:	fefa39ef 	.word	0xfefa39ef
 800c3cc:	3fe62e42 	.word	0x3fe62e42
 800c3d0:	0ca86c39 	.word	0x0ca86c39
 800c3d4:	be205c61 	.word	0xbe205c61
 800c3d8:	72bea4d0 	.word	0x72bea4d0
 800c3dc:	3e663769 	.word	0x3e663769
 800c3e0:	c5d26bf1 	.word	0xc5d26bf1
 800c3e4:	3ebbbd41 	.word	0x3ebbbd41
 800c3e8:	af25de2c 	.word	0xaf25de2c
 800c3ec:	3f11566a 	.word	0x3f11566a
 800c3f0:	16bebd93 	.word	0x16bebd93
 800c3f4:	3f66c16c 	.word	0x3f66c16c
 800c3f8:	5555553e 	.word	0x5555553e
 800c3fc:	3fc55555 	.word	0x3fc55555
 800c400:	3fe00000 	.word	0x3fe00000
 800c404:	000fffff 	.word	0x000fffff
 800c408:	3ff00000 	.word	0x3ff00000
 800c40c:	4090cbff 	.word	0x4090cbff
 800c410:	3f6f3400 	.word	0x3f6f3400
 800c414:	652b82fe 	.word	0x652b82fe
 800c418:	3c971547 	.word	0x3c971547

0800c41c <__ieee754_sqrt>:
 800c41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c420:	ec55 4b10 	vmov	r4, r5, d0
 800c424:	4e55      	ldr	r6, [pc, #340]	; (800c57c <__ieee754_sqrt+0x160>)
 800c426:	43ae      	bics	r6, r5
 800c428:	ee10 0a10 	vmov	r0, s0
 800c42c:	ee10 3a10 	vmov	r3, s0
 800c430:	462a      	mov	r2, r5
 800c432:	4629      	mov	r1, r5
 800c434:	d110      	bne.n	800c458 <__ieee754_sqrt+0x3c>
 800c436:	ee10 2a10 	vmov	r2, s0
 800c43a:	462b      	mov	r3, r5
 800c43c:	f7f4 f8e4 	bl	8000608 <__aeabi_dmul>
 800c440:	4602      	mov	r2, r0
 800c442:	460b      	mov	r3, r1
 800c444:	4620      	mov	r0, r4
 800c446:	4629      	mov	r1, r5
 800c448:	f7f3 ff28 	bl	800029c <__adddf3>
 800c44c:	4604      	mov	r4, r0
 800c44e:	460d      	mov	r5, r1
 800c450:	ec45 4b10 	vmov	d0, r4, r5
 800c454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c458:	2d00      	cmp	r5, #0
 800c45a:	dc10      	bgt.n	800c47e <__ieee754_sqrt+0x62>
 800c45c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c460:	4330      	orrs	r0, r6
 800c462:	d0f5      	beq.n	800c450 <__ieee754_sqrt+0x34>
 800c464:	b15d      	cbz	r5, 800c47e <__ieee754_sqrt+0x62>
 800c466:	ee10 2a10 	vmov	r2, s0
 800c46a:	462b      	mov	r3, r5
 800c46c:	ee10 0a10 	vmov	r0, s0
 800c470:	f7f3 ff12 	bl	8000298 <__aeabi_dsub>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	f7f4 f9f0 	bl	800085c <__aeabi_ddiv>
 800c47c:	e7e6      	b.n	800c44c <__ieee754_sqrt+0x30>
 800c47e:	1512      	asrs	r2, r2, #20
 800c480:	d074      	beq.n	800c56c <__ieee754_sqrt+0x150>
 800c482:	07d4      	lsls	r4, r2, #31
 800c484:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c488:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c48c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c490:	bf5e      	ittt	pl
 800c492:	0fda      	lsrpl	r2, r3, #31
 800c494:	005b      	lslpl	r3, r3, #1
 800c496:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c49a:	2400      	movs	r4, #0
 800c49c:	0fda      	lsrs	r2, r3, #31
 800c49e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c4a2:	107f      	asrs	r7, r7, #1
 800c4a4:	005b      	lsls	r3, r3, #1
 800c4a6:	2516      	movs	r5, #22
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c4ae:	1886      	adds	r6, r0, r2
 800c4b0:	428e      	cmp	r6, r1
 800c4b2:	bfde      	ittt	le
 800c4b4:	1b89      	suble	r1, r1, r6
 800c4b6:	18b0      	addle	r0, r6, r2
 800c4b8:	18a4      	addle	r4, r4, r2
 800c4ba:	0049      	lsls	r1, r1, #1
 800c4bc:	3d01      	subs	r5, #1
 800c4be:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c4c2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c4c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c4ca:	d1f0      	bne.n	800c4ae <__ieee754_sqrt+0x92>
 800c4cc:	462a      	mov	r2, r5
 800c4ce:	f04f 0e20 	mov.w	lr, #32
 800c4d2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c4d6:	4281      	cmp	r1, r0
 800c4d8:	eb06 0c05 	add.w	ip, r6, r5
 800c4dc:	dc02      	bgt.n	800c4e4 <__ieee754_sqrt+0xc8>
 800c4de:	d113      	bne.n	800c508 <__ieee754_sqrt+0xec>
 800c4e0:	459c      	cmp	ip, r3
 800c4e2:	d811      	bhi.n	800c508 <__ieee754_sqrt+0xec>
 800c4e4:	f1bc 0f00 	cmp.w	ip, #0
 800c4e8:	eb0c 0506 	add.w	r5, ip, r6
 800c4ec:	da43      	bge.n	800c576 <__ieee754_sqrt+0x15a>
 800c4ee:	2d00      	cmp	r5, #0
 800c4f0:	db41      	blt.n	800c576 <__ieee754_sqrt+0x15a>
 800c4f2:	f100 0801 	add.w	r8, r0, #1
 800c4f6:	1a09      	subs	r1, r1, r0
 800c4f8:	459c      	cmp	ip, r3
 800c4fa:	bf88      	it	hi
 800c4fc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c500:	eba3 030c 	sub.w	r3, r3, ip
 800c504:	4432      	add	r2, r6
 800c506:	4640      	mov	r0, r8
 800c508:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c50c:	f1be 0e01 	subs.w	lr, lr, #1
 800c510:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c514:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c518:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c51c:	d1db      	bne.n	800c4d6 <__ieee754_sqrt+0xba>
 800c51e:	430b      	orrs	r3, r1
 800c520:	d006      	beq.n	800c530 <__ieee754_sqrt+0x114>
 800c522:	1c50      	adds	r0, r2, #1
 800c524:	bf13      	iteet	ne
 800c526:	3201      	addne	r2, #1
 800c528:	3401      	addeq	r4, #1
 800c52a:	4672      	moveq	r2, lr
 800c52c:	f022 0201 	bicne.w	r2, r2, #1
 800c530:	1063      	asrs	r3, r4, #1
 800c532:	0852      	lsrs	r2, r2, #1
 800c534:	07e1      	lsls	r1, r4, #31
 800c536:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c53a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c53e:	bf48      	it	mi
 800c540:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c544:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c548:	4614      	mov	r4, r2
 800c54a:	e781      	b.n	800c450 <__ieee754_sqrt+0x34>
 800c54c:	0ad9      	lsrs	r1, r3, #11
 800c54e:	3815      	subs	r0, #21
 800c550:	055b      	lsls	r3, r3, #21
 800c552:	2900      	cmp	r1, #0
 800c554:	d0fa      	beq.n	800c54c <__ieee754_sqrt+0x130>
 800c556:	02cd      	lsls	r5, r1, #11
 800c558:	d50a      	bpl.n	800c570 <__ieee754_sqrt+0x154>
 800c55a:	f1c2 0420 	rsb	r4, r2, #32
 800c55e:	fa23 f404 	lsr.w	r4, r3, r4
 800c562:	1e55      	subs	r5, r2, #1
 800c564:	4093      	lsls	r3, r2
 800c566:	4321      	orrs	r1, r4
 800c568:	1b42      	subs	r2, r0, r5
 800c56a:	e78a      	b.n	800c482 <__ieee754_sqrt+0x66>
 800c56c:	4610      	mov	r0, r2
 800c56e:	e7f0      	b.n	800c552 <__ieee754_sqrt+0x136>
 800c570:	0049      	lsls	r1, r1, #1
 800c572:	3201      	adds	r2, #1
 800c574:	e7ef      	b.n	800c556 <__ieee754_sqrt+0x13a>
 800c576:	4680      	mov	r8, r0
 800c578:	e7bd      	b.n	800c4f6 <__ieee754_sqrt+0xda>
 800c57a:	bf00      	nop
 800c57c:	7ff00000 	.word	0x7ff00000

0800c580 <with_errno>:
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	4604      	mov	r4, r0
 800c584:	460d      	mov	r5, r1
 800c586:	4616      	mov	r6, r2
 800c588:	f000 f8cc 	bl	800c724 <__errno>
 800c58c:	4629      	mov	r1, r5
 800c58e:	6006      	str	r6, [r0, #0]
 800c590:	4620      	mov	r0, r4
 800c592:	bd70      	pop	{r4, r5, r6, pc}

0800c594 <xflow>:
 800c594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c596:	4614      	mov	r4, r2
 800c598:	461d      	mov	r5, r3
 800c59a:	b108      	cbz	r0, 800c5a0 <xflow+0xc>
 800c59c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c5a0:	e9cd 2300 	strd	r2, r3, [sp]
 800c5a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	4629      	mov	r1, r5
 800c5ac:	f7f4 f82c 	bl	8000608 <__aeabi_dmul>
 800c5b0:	2222      	movs	r2, #34	; 0x22
 800c5b2:	b003      	add	sp, #12
 800c5b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5b8:	f7ff bfe2 	b.w	800c580 <with_errno>

0800c5bc <__math_uflow>:
 800c5bc:	b508      	push	{r3, lr}
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c5c4:	f7ff ffe6 	bl	800c594 <xflow>
 800c5c8:	ec41 0b10 	vmov	d0, r0, r1
 800c5cc:	bd08      	pop	{r3, pc}

0800c5ce <__math_oflow>:
 800c5ce:	b508      	push	{r3, lr}
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c5d6:	f7ff ffdd 	bl	800c594 <xflow>
 800c5da:	ec41 0b10 	vmov	d0, r0, r1
 800c5de:	bd08      	pop	{r3, pc}

0800c5e0 <fabs>:
 800c5e0:	ec51 0b10 	vmov	r0, r1, d0
 800c5e4:	ee10 2a10 	vmov	r2, s0
 800c5e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c5ec:	ec43 2b10 	vmov	d0, r2, r3
 800c5f0:	4770      	bx	lr

0800c5f2 <finite>:
 800c5f2:	b082      	sub	sp, #8
 800c5f4:	ed8d 0b00 	vstr	d0, [sp]
 800c5f8:	9801      	ldr	r0, [sp, #4]
 800c5fa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c5fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c602:	0fc0      	lsrs	r0, r0, #31
 800c604:	b002      	add	sp, #8
 800c606:	4770      	bx	lr

0800c608 <scalbn>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	ec55 4b10 	vmov	r4, r5, d0
 800c60e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c612:	4606      	mov	r6, r0
 800c614:	462b      	mov	r3, r5
 800c616:	b99a      	cbnz	r2, 800c640 <scalbn+0x38>
 800c618:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c61c:	4323      	orrs	r3, r4
 800c61e:	d036      	beq.n	800c68e <scalbn+0x86>
 800c620:	4b39      	ldr	r3, [pc, #228]	; (800c708 <scalbn+0x100>)
 800c622:	4629      	mov	r1, r5
 800c624:	ee10 0a10 	vmov	r0, s0
 800c628:	2200      	movs	r2, #0
 800c62a:	f7f3 ffed 	bl	8000608 <__aeabi_dmul>
 800c62e:	4b37      	ldr	r3, [pc, #220]	; (800c70c <scalbn+0x104>)
 800c630:	429e      	cmp	r6, r3
 800c632:	4604      	mov	r4, r0
 800c634:	460d      	mov	r5, r1
 800c636:	da10      	bge.n	800c65a <scalbn+0x52>
 800c638:	a32b      	add	r3, pc, #172	; (adr r3, 800c6e8 <scalbn+0xe0>)
 800c63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63e:	e03a      	b.n	800c6b6 <scalbn+0xae>
 800c640:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c644:	428a      	cmp	r2, r1
 800c646:	d10c      	bne.n	800c662 <scalbn+0x5a>
 800c648:	ee10 2a10 	vmov	r2, s0
 800c64c:	4620      	mov	r0, r4
 800c64e:	4629      	mov	r1, r5
 800c650:	f7f3 fe24 	bl	800029c <__adddf3>
 800c654:	4604      	mov	r4, r0
 800c656:	460d      	mov	r5, r1
 800c658:	e019      	b.n	800c68e <scalbn+0x86>
 800c65a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c65e:	460b      	mov	r3, r1
 800c660:	3a36      	subs	r2, #54	; 0x36
 800c662:	4432      	add	r2, r6
 800c664:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c668:	428a      	cmp	r2, r1
 800c66a:	dd08      	ble.n	800c67e <scalbn+0x76>
 800c66c:	2d00      	cmp	r5, #0
 800c66e:	a120      	add	r1, pc, #128	; (adr r1, 800c6f0 <scalbn+0xe8>)
 800c670:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c674:	da1c      	bge.n	800c6b0 <scalbn+0xa8>
 800c676:	a120      	add	r1, pc, #128	; (adr r1, 800c6f8 <scalbn+0xf0>)
 800c678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c67c:	e018      	b.n	800c6b0 <scalbn+0xa8>
 800c67e:	2a00      	cmp	r2, #0
 800c680:	dd08      	ble.n	800c694 <scalbn+0x8c>
 800c682:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c686:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c68a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c68e:	ec45 4b10 	vmov	d0, r4, r5
 800c692:	bd70      	pop	{r4, r5, r6, pc}
 800c694:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c698:	da19      	bge.n	800c6ce <scalbn+0xc6>
 800c69a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c69e:	429e      	cmp	r6, r3
 800c6a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c6a4:	dd0a      	ble.n	800c6bc <scalbn+0xb4>
 800c6a6:	a112      	add	r1, pc, #72	; (adr r1, 800c6f0 <scalbn+0xe8>)
 800c6a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1e2      	bne.n	800c676 <scalbn+0x6e>
 800c6b0:	a30f      	add	r3, pc, #60	; (adr r3, 800c6f0 <scalbn+0xe8>)
 800c6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b6:	f7f3 ffa7 	bl	8000608 <__aeabi_dmul>
 800c6ba:	e7cb      	b.n	800c654 <scalbn+0x4c>
 800c6bc:	a10a      	add	r1, pc, #40	; (adr r1, 800c6e8 <scalbn+0xe0>)
 800c6be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d0b8      	beq.n	800c638 <scalbn+0x30>
 800c6c6:	a10e      	add	r1, pc, #56	; (adr r1, 800c700 <scalbn+0xf8>)
 800c6c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6cc:	e7b4      	b.n	800c638 <scalbn+0x30>
 800c6ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6d2:	3236      	adds	r2, #54	; 0x36
 800c6d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c6dc:	4620      	mov	r0, r4
 800c6de:	4b0c      	ldr	r3, [pc, #48]	; (800c710 <scalbn+0x108>)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	e7e8      	b.n	800c6b6 <scalbn+0xae>
 800c6e4:	f3af 8000 	nop.w
 800c6e8:	c2f8f359 	.word	0xc2f8f359
 800c6ec:	01a56e1f 	.word	0x01a56e1f
 800c6f0:	8800759c 	.word	0x8800759c
 800c6f4:	7e37e43c 	.word	0x7e37e43c
 800c6f8:	8800759c 	.word	0x8800759c
 800c6fc:	fe37e43c 	.word	0xfe37e43c
 800c700:	c2f8f359 	.word	0xc2f8f359
 800c704:	81a56e1f 	.word	0x81a56e1f
 800c708:	43500000 	.word	0x43500000
 800c70c:	ffff3cb0 	.word	0xffff3cb0
 800c710:	3c900000 	.word	0x3c900000

0800c714 <abort>:
 800c714:	b508      	push	{r3, lr}
 800c716:	2006      	movs	r0, #6
 800c718:	f000 fdf0 	bl	800d2fc <raise>
 800c71c:	2001      	movs	r0, #1
 800c71e:	f7f8 ff6f 	bl	8005600 <_exit>
	...

0800c724 <__errno>:
 800c724:	4b01      	ldr	r3, [pc, #4]	; (800c72c <__errno+0x8>)
 800c726:	6818      	ldr	r0, [r3, #0]
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	2000000c 	.word	0x2000000c

0800c730 <__libc_init_array>:
 800c730:	b570      	push	{r4, r5, r6, lr}
 800c732:	4d0d      	ldr	r5, [pc, #52]	; (800c768 <__libc_init_array+0x38>)
 800c734:	4c0d      	ldr	r4, [pc, #52]	; (800c76c <__libc_init_array+0x3c>)
 800c736:	1b64      	subs	r4, r4, r5
 800c738:	10a4      	asrs	r4, r4, #2
 800c73a:	2600      	movs	r6, #0
 800c73c:	42a6      	cmp	r6, r4
 800c73e:	d109      	bne.n	800c754 <__libc_init_array+0x24>
 800c740:	4d0b      	ldr	r5, [pc, #44]	; (800c770 <__libc_init_array+0x40>)
 800c742:	4c0c      	ldr	r4, [pc, #48]	; (800c774 <__libc_init_array+0x44>)
 800c744:	f002 fd50 	bl	800f1e8 <_init>
 800c748:	1b64      	subs	r4, r4, r5
 800c74a:	10a4      	asrs	r4, r4, #2
 800c74c:	2600      	movs	r6, #0
 800c74e:	42a6      	cmp	r6, r4
 800c750:	d105      	bne.n	800c75e <__libc_init_array+0x2e>
 800c752:	bd70      	pop	{r4, r5, r6, pc}
 800c754:	f855 3b04 	ldr.w	r3, [r5], #4
 800c758:	4798      	blx	r3
 800c75a:	3601      	adds	r6, #1
 800c75c:	e7ee      	b.n	800c73c <__libc_init_array+0xc>
 800c75e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c762:	4798      	blx	r3
 800c764:	3601      	adds	r6, #1
 800c766:	e7f2      	b.n	800c74e <__libc_init_array+0x1e>
 800c768:	0800f69c 	.word	0x0800f69c
 800c76c:	0800f69c 	.word	0x0800f69c
 800c770:	0800f69c 	.word	0x0800f69c
 800c774:	0800f6a4 	.word	0x0800f6a4

0800c778 <malloc>:
 800c778:	4b02      	ldr	r3, [pc, #8]	; (800c784 <malloc+0xc>)
 800c77a:	4601      	mov	r1, r0
 800c77c:	6818      	ldr	r0, [r3, #0]
 800c77e:	f000 b8a7 	b.w	800c8d0 <_malloc_r>
 800c782:	bf00      	nop
 800c784:	2000000c 	.word	0x2000000c

0800c788 <free>:
 800c788:	4b02      	ldr	r3, [pc, #8]	; (800c794 <free+0xc>)
 800c78a:	4601      	mov	r1, r0
 800c78c:	6818      	ldr	r0, [r3, #0]
 800c78e:	f000 b833 	b.w	800c7f8 <_free_r>
 800c792:	bf00      	nop
 800c794:	2000000c 	.word	0x2000000c

0800c798 <memcpy>:
 800c798:	440a      	add	r2, r1
 800c79a:	4291      	cmp	r1, r2
 800c79c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7a0:	d100      	bne.n	800c7a4 <memcpy+0xc>
 800c7a2:	4770      	bx	lr
 800c7a4:	b510      	push	{r4, lr}
 800c7a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7ae:	4291      	cmp	r1, r2
 800c7b0:	d1f9      	bne.n	800c7a6 <memcpy+0xe>
 800c7b2:	bd10      	pop	{r4, pc}

0800c7b4 <memmove>:
 800c7b4:	4288      	cmp	r0, r1
 800c7b6:	b510      	push	{r4, lr}
 800c7b8:	eb01 0402 	add.w	r4, r1, r2
 800c7bc:	d902      	bls.n	800c7c4 <memmove+0x10>
 800c7be:	4284      	cmp	r4, r0
 800c7c0:	4623      	mov	r3, r4
 800c7c2:	d807      	bhi.n	800c7d4 <memmove+0x20>
 800c7c4:	1e43      	subs	r3, r0, #1
 800c7c6:	42a1      	cmp	r1, r4
 800c7c8:	d008      	beq.n	800c7dc <memmove+0x28>
 800c7ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7d2:	e7f8      	b.n	800c7c6 <memmove+0x12>
 800c7d4:	4402      	add	r2, r0
 800c7d6:	4601      	mov	r1, r0
 800c7d8:	428a      	cmp	r2, r1
 800c7da:	d100      	bne.n	800c7de <memmove+0x2a>
 800c7dc:	bd10      	pop	{r4, pc}
 800c7de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7e6:	e7f7      	b.n	800c7d8 <memmove+0x24>

0800c7e8 <memset>:
 800c7e8:	4402      	add	r2, r0
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d100      	bne.n	800c7f2 <memset+0xa>
 800c7f0:	4770      	bx	lr
 800c7f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c7f6:	e7f9      	b.n	800c7ec <memset+0x4>

0800c7f8 <_free_r>:
 800c7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7fa:	2900      	cmp	r1, #0
 800c7fc:	d044      	beq.n	800c888 <_free_r+0x90>
 800c7fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c802:	9001      	str	r0, [sp, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	f1a1 0404 	sub.w	r4, r1, #4
 800c80a:	bfb8      	it	lt
 800c80c:	18e4      	addlt	r4, r4, r3
 800c80e:	f001 fc11 	bl	800e034 <__malloc_lock>
 800c812:	4a1e      	ldr	r2, [pc, #120]	; (800c88c <_free_r+0x94>)
 800c814:	9801      	ldr	r0, [sp, #4]
 800c816:	6813      	ldr	r3, [r2, #0]
 800c818:	b933      	cbnz	r3, 800c828 <_free_r+0x30>
 800c81a:	6063      	str	r3, [r4, #4]
 800c81c:	6014      	str	r4, [r2, #0]
 800c81e:	b003      	add	sp, #12
 800c820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c824:	f001 bc0c 	b.w	800e040 <__malloc_unlock>
 800c828:	42a3      	cmp	r3, r4
 800c82a:	d908      	bls.n	800c83e <_free_r+0x46>
 800c82c:	6825      	ldr	r5, [r4, #0]
 800c82e:	1961      	adds	r1, r4, r5
 800c830:	428b      	cmp	r3, r1
 800c832:	bf01      	itttt	eq
 800c834:	6819      	ldreq	r1, [r3, #0]
 800c836:	685b      	ldreq	r3, [r3, #4]
 800c838:	1949      	addeq	r1, r1, r5
 800c83a:	6021      	streq	r1, [r4, #0]
 800c83c:	e7ed      	b.n	800c81a <_free_r+0x22>
 800c83e:	461a      	mov	r2, r3
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	b10b      	cbz	r3, 800c848 <_free_r+0x50>
 800c844:	42a3      	cmp	r3, r4
 800c846:	d9fa      	bls.n	800c83e <_free_r+0x46>
 800c848:	6811      	ldr	r1, [r2, #0]
 800c84a:	1855      	adds	r5, r2, r1
 800c84c:	42a5      	cmp	r5, r4
 800c84e:	d10b      	bne.n	800c868 <_free_r+0x70>
 800c850:	6824      	ldr	r4, [r4, #0]
 800c852:	4421      	add	r1, r4
 800c854:	1854      	adds	r4, r2, r1
 800c856:	42a3      	cmp	r3, r4
 800c858:	6011      	str	r1, [r2, #0]
 800c85a:	d1e0      	bne.n	800c81e <_free_r+0x26>
 800c85c:	681c      	ldr	r4, [r3, #0]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	6053      	str	r3, [r2, #4]
 800c862:	4421      	add	r1, r4
 800c864:	6011      	str	r1, [r2, #0]
 800c866:	e7da      	b.n	800c81e <_free_r+0x26>
 800c868:	d902      	bls.n	800c870 <_free_r+0x78>
 800c86a:	230c      	movs	r3, #12
 800c86c:	6003      	str	r3, [r0, #0]
 800c86e:	e7d6      	b.n	800c81e <_free_r+0x26>
 800c870:	6825      	ldr	r5, [r4, #0]
 800c872:	1961      	adds	r1, r4, r5
 800c874:	428b      	cmp	r3, r1
 800c876:	bf04      	itt	eq
 800c878:	6819      	ldreq	r1, [r3, #0]
 800c87a:	685b      	ldreq	r3, [r3, #4]
 800c87c:	6063      	str	r3, [r4, #4]
 800c87e:	bf04      	itt	eq
 800c880:	1949      	addeq	r1, r1, r5
 800c882:	6021      	streq	r1, [r4, #0]
 800c884:	6054      	str	r4, [r2, #4]
 800c886:	e7ca      	b.n	800c81e <_free_r+0x26>
 800c888:	b003      	add	sp, #12
 800c88a:	bd30      	pop	{r4, r5, pc}
 800c88c:	200010e0 	.word	0x200010e0

0800c890 <sbrk_aligned>:
 800c890:	b570      	push	{r4, r5, r6, lr}
 800c892:	4e0e      	ldr	r6, [pc, #56]	; (800c8cc <sbrk_aligned+0x3c>)
 800c894:	460c      	mov	r4, r1
 800c896:	6831      	ldr	r1, [r6, #0]
 800c898:	4605      	mov	r5, r0
 800c89a:	b911      	cbnz	r1, 800c8a2 <sbrk_aligned+0x12>
 800c89c:	f000 fcf6 	bl	800d28c <_sbrk_r>
 800c8a0:	6030      	str	r0, [r6, #0]
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	f000 fcf1 	bl	800d28c <_sbrk_r>
 800c8aa:	1c43      	adds	r3, r0, #1
 800c8ac:	d00a      	beq.n	800c8c4 <sbrk_aligned+0x34>
 800c8ae:	1cc4      	adds	r4, r0, #3
 800c8b0:	f024 0403 	bic.w	r4, r4, #3
 800c8b4:	42a0      	cmp	r0, r4
 800c8b6:	d007      	beq.n	800c8c8 <sbrk_aligned+0x38>
 800c8b8:	1a21      	subs	r1, r4, r0
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	f000 fce6 	bl	800d28c <_sbrk_r>
 800c8c0:	3001      	adds	r0, #1
 800c8c2:	d101      	bne.n	800c8c8 <sbrk_aligned+0x38>
 800c8c4:	f04f 34ff 	mov.w	r4, #4294967295
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	bd70      	pop	{r4, r5, r6, pc}
 800c8cc:	200010e4 	.word	0x200010e4

0800c8d0 <_malloc_r>:
 800c8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d4:	1ccd      	adds	r5, r1, #3
 800c8d6:	f025 0503 	bic.w	r5, r5, #3
 800c8da:	3508      	adds	r5, #8
 800c8dc:	2d0c      	cmp	r5, #12
 800c8de:	bf38      	it	cc
 800c8e0:	250c      	movcc	r5, #12
 800c8e2:	2d00      	cmp	r5, #0
 800c8e4:	4607      	mov	r7, r0
 800c8e6:	db01      	blt.n	800c8ec <_malloc_r+0x1c>
 800c8e8:	42a9      	cmp	r1, r5
 800c8ea:	d905      	bls.n	800c8f8 <_malloc_r+0x28>
 800c8ec:	230c      	movs	r3, #12
 800c8ee:	603b      	str	r3, [r7, #0]
 800c8f0:	2600      	movs	r6, #0
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f8:	4e2e      	ldr	r6, [pc, #184]	; (800c9b4 <_malloc_r+0xe4>)
 800c8fa:	f001 fb9b 	bl	800e034 <__malloc_lock>
 800c8fe:	6833      	ldr	r3, [r6, #0]
 800c900:	461c      	mov	r4, r3
 800c902:	bb34      	cbnz	r4, 800c952 <_malloc_r+0x82>
 800c904:	4629      	mov	r1, r5
 800c906:	4638      	mov	r0, r7
 800c908:	f7ff ffc2 	bl	800c890 <sbrk_aligned>
 800c90c:	1c43      	adds	r3, r0, #1
 800c90e:	4604      	mov	r4, r0
 800c910:	d14d      	bne.n	800c9ae <_malloc_r+0xde>
 800c912:	6834      	ldr	r4, [r6, #0]
 800c914:	4626      	mov	r6, r4
 800c916:	2e00      	cmp	r6, #0
 800c918:	d140      	bne.n	800c99c <_malloc_r+0xcc>
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	4631      	mov	r1, r6
 800c91e:	4638      	mov	r0, r7
 800c920:	eb04 0803 	add.w	r8, r4, r3
 800c924:	f000 fcb2 	bl	800d28c <_sbrk_r>
 800c928:	4580      	cmp	r8, r0
 800c92a:	d13a      	bne.n	800c9a2 <_malloc_r+0xd2>
 800c92c:	6821      	ldr	r1, [r4, #0]
 800c92e:	3503      	adds	r5, #3
 800c930:	1a6d      	subs	r5, r5, r1
 800c932:	f025 0503 	bic.w	r5, r5, #3
 800c936:	3508      	adds	r5, #8
 800c938:	2d0c      	cmp	r5, #12
 800c93a:	bf38      	it	cc
 800c93c:	250c      	movcc	r5, #12
 800c93e:	4629      	mov	r1, r5
 800c940:	4638      	mov	r0, r7
 800c942:	f7ff ffa5 	bl	800c890 <sbrk_aligned>
 800c946:	3001      	adds	r0, #1
 800c948:	d02b      	beq.n	800c9a2 <_malloc_r+0xd2>
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	442b      	add	r3, r5
 800c94e:	6023      	str	r3, [r4, #0]
 800c950:	e00e      	b.n	800c970 <_malloc_r+0xa0>
 800c952:	6822      	ldr	r2, [r4, #0]
 800c954:	1b52      	subs	r2, r2, r5
 800c956:	d41e      	bmi.n	800c996 <_malloc_r+0xc6>
 800c958:	2a0b      	cmp	r2, #11
 800c95a:	d916      	bls.n	800c98a <_malloc_r+0xba>
 800c95c:	1961      	adds	r1, r4, r5
 800c95e:	42a3      	cmp	r3, r4
 800c960:	6025      	str	r5, [r4, #0]
 800c962:	bf18      	it	ne
 800c964:	6059      	strne	r1, [r3, #4]
 800c966:	6863      	ldr	r3, [r4, #4]
 800c968:	bf08      	it	eq
 800c96a:	6031      	streq	r1, [r6, #0]
 800c96c:	5162      	str	r2, [r4, r5]
 800c96e:	604b      	str	r3, [r1, #4]
 800c970:	4638      	mov	r0, r7
 800c972:	f104 060b 	add.w	r6, r4, #11
 800c976:	f001 fb63 	bl	800e040 <__malloc_unlock>
 800c97a:	f026 0607 	bic.w	r6, r6, #7
 800c97e:	1d23      	adds	r3, r4, #4
 800c980:	1af2      	subs	r2, r6, r3
 800c982:	d0b6      	beq.n	800c8f2 <_malloc_r+0x22>
 800c984:	1b9b      	subs	r3, r3, r6
 800c986:	50a3      	str	r3, [r4, r2]
 800c988:	e7b3      	b.n	800c8f2 <_malloc_r+0x22>
 800c98a:	6862      	ldr	r2, [r4, #4]
 800c98c:	42a3      	cmp	r3, r4
 800c98e:	bf0c      	ite	eq
 800c990:	6032      	streq	r2, [r6, #0]
 800c992:	605a      	strne	r2, [r3, #4]
 800c994:	e7ec      	b.n	800c970 <_malloc_r+0xa0>
 800c996:	4623      	mov	r3, r4
 800c998:	6864      	ldr	r4, [r4, #4]
 800c99a:	e7b2      	b.n	800c902 <_malloc_r+0x32>
 800c99c:	4634      	mov	r4, r6
 800c99e:	6876      	ldr	r6, [r6, #4]
 800c9a0:	e7b9      	b.n	800c916 <_malloc_r+0x46>
 800c9a2:	230c      	movs	r3, #12
 800c9a4:	603b      	str	r3, [r7, #0]
 800c9a6:	4638      	mov	r0, r7
 800c9a8:	f001 fb4a 	bl	800e040 <__malloc_unlock>
 800c9ac:	e7a1      	b.n	800c8f2 <_malloc_r+0x22>
 800c9ae:	6025      	str	r5, [r4, #0]
 800c9b0:	e7de      	b.n	800c970 <_malloc_r+0xa0>
 800c9b2:	bf00      	nop
 800c9b4:	200010e0 	.word	0x200010e0

0800c9b8 <__cvt>:
 800c9b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9bc:	ec55 4b10 	vmov	r4, r5, d0
 800c9c0:	2d00      	cmp	r5, #0
 800c9c2:	460e      	mov	r6, r1
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	462b      	mov	r3, r5
 800c9c8:	bfbb      	ittet	lt
 800c9ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c9ce:	461d      	movlt	r5, r3
 800c9d0:	2300      	movge	r3, #0
 800c9d2:	232d      	movlt	r3, #45	; 0x2d
 800c9d4:	700b      	strb	r3, [r1, #0]
 800c9d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c9dc:	4691      	mov	r9, r2
 800c9de:	f023 0820 	bic.w	r8, r3, #32
 800c9e2:	bfbc      	itt	lt
 800c9e4:	4622      	movlt	r2, r4
 800c9e6:	4614      	movlt	r4, r2
 800c9e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c9ec:	d005      	beq.n	800c9fa <__cvt+0x42>
 800c9ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c9f2:	d100      	bne.n	800c9f6 <__cvt+0x3e>
 800c9f4:	3601      	adds	r6, #1
 800c9f6:	2102      	movs	r1, #2
 800c9f8:	e000      	b.n	800c9fc <__cvt+0x44>
 800c9fa:	2103      	movs	r1, #3
 800c9fc:	ab03      	add	r3, sp, #12
 800c9fe:	9301      	str	r3, [sp, #4]
 800ca00:	ab02      	add	r3, sp, #8
 800ca02:	9300      	str	r3, [sp, #0]
 800ca04:	ec45 4b10 	vmov	d0, r4, r5
 800ca08:	4653      	mov	r3, sl
 800ca0a:	4632      	mov	r2, r6
 800ca0c:	f000 fd20 	bl	800d450 <_dtoa_r>
 800ca10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ca14:	4607      	mov	r7, r0
 800ca16:	d102      	bne.n	800ca1e <__cvt+0x66>
 800ca18:	f019 0f01 	tst.w	r9, #1
 800ca1c:	d022      	beq.n	800ca64 <__cvt+0xac>
 800ca1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca22:	eb07 0906 	add.w	r9, r7, r6
 800ca26:	d110      	bne.n	800ca4a <__cvt+0x92>
 800ca28:	783b      	ldrb	r3, [r7, #0]
 800ca2a:	2b30      	cmp	r3, #48	; 0x30
 800ca2c:	d10a      	bne.n	800ca44 <__cvt+0x8c>
 800ca2e:	2200      	movs	r2, #0
 800ca30:	2300      	movs	r3, #0
 800ca32:	4620      	mov	r0, r4
 800ca34:	4629      	mov	r1, r5
 800ca36:	f7f4 f84f 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca3a:	b918      	cbnz	r0, 800ca44 <__cvt+0x8c>
 800ca3c:	f1c6 0601 	rsb	r6, r6, #1
 800ca40:	f8ca 6000 	str.w	r6, [sl]
 800ca44:	f8da 3000 	ldr.w	r3, [sl]
 800ca48:	4499      	add	r9, r3
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	4620      	mov	r0, r4
 800ca50:	4629      	mov	r1, r5
 800ca52:	f7f4 f841 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca56:	b108      	cbz	r0, 800ca5c <__cvt+0xa4>
 800ca58:	f8cd 900c 	str.w	r9, [sp, #12]
 800ca5c:	2230      	movs	r2, #48	; 0x30
 800ca5e:	9b03      	ldr	r3, [sp, #12]
 800ca60:	454b      	cmp	r3, r9
 800ca62:	d307      	bcc.n	800ca74 <__cvt+0xbc>
 800ca64:	9b03      	ldr	r3, [sp, #12]
 800ca66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca68:	1bdb      	subs	r3, r3, r7
 800ca6a:	4638      	mov	r0, r7
 800ca6c:	6013      	str	r3, [r2, #0]
 800ca6e:	b004      	add	sp, #16
 800ca70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca74:	1c59      	adds	r1, r3, #1
 800ca76:	9103      	str	r1, [sp, #12]
 800ca78:	701a      	strb	r2, [r3, #0]
 800ca7a:	e7f0      	b.n	800ca5e <__cvt+0xa6>

0800ca7c <__exponent>:
 800ca7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2900      	cmp	r1, #0
 800ca82:	bfb8      	it	lt
 800ca84:	4249      	neglt	r1, r1
 800ca86:	f803 2b02 	strb.w	r2, [r3], #2
 800ca8a:	bfb4      	ite	lt
 800ca8c:	222d      	movlt	r2, #45	; 0x2d
 800ca8e:	222b      	movge	r2, #43	; 0x2b
 800ca90:	2909      	cmp	r1, #9
 800ca92:	7042      	strb	r2, [r0, #1]
 800ca94:	dd2a      	ble.n	800caec <__exponent+0x70>
 800ca96:	f10d 0407 	add.w	r4, sp, #7
 800ca9a:	46a4      	mov	ip, r4
 800ca9c:	270a      	movs	r7, #10
 800ca9e:	46a6      	mov	lr, r4
 800caa0:	460a      	mov	r2, r1
 800caa2:	fb91 f6f7 	sdiv	r6, r1, r7
 800caa6:	fb07 1516 	mls	r5, r7, r6, r1
 800caaa:	3530      	adds	r5, #48	; 0x30
 800caac:	2a63      	cmp	r2, #99	; 0x63
 800caae:	f104 34ff 	add.w	r4, r4, #4294967295
 800cab2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cab6:	4631      	mov	r1, r6
 800cab8:	dcf1      	bgt.n	800ca9e <__exponent+0x22>
 800caba:	3130      	adds	r1, #48	; 0x30
 800cabc:	f1ae 0502 	sub.w	r5, lr, #2
 800cac0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cac4:	1c44      	adds	r4, r0, #1
 800cac6:	4629      	mov	r1, r5
 800cac8:	4561      	cmp	r1, ip
 800caca:	d30a      	bcc.n	800cae2 <__exponent+0x66>
 800cacc:	f10d 0209 	add.w	r2, sp, #9
 800cad0:	eba2 020e 	sub.w	r2, r2, lr
 800cad4:	4565      	cmp	r5, ip
 800cad6:	bf88      	it	hi
 800cad8:	2200      	movhi	r2, #0
 800cada:	4413      	add	r3, r2
 800cadc:	1a18      	subs	r0, r3, r0
 800cade:	b003      	add	sp, #12
 800cae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cae6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800caea:	e7ed      	b.n	800cac8 <__exponent+0x4c>
 800caec:	2330      	movs	r3, #48	; 0x30
 800caee:	3130      	adds	r1, #48	; 0x30
 800caf0:	7083      	strb	r3, [r0, #2]
 800caf2:	70c1      	strb	r1, [r0, #3]
 800caf4:	1d03      	adds	r3, r0, #4
 800caf6:	e7f1      	b.n	800cadc <__exponent+0x60>

0800caf8 <_printf_float>:
 800caf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafc:	ed2d 8b02 	vpush	{d8}
 800cb00:	b08d      	sub	sp, #52	; 0x34
 800cb02:	460c      	mov	r4, r1
 800cb04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cb08:	4616      	mov	r6, r2
 800cb0a:	461f      	mov	r7, r3
 800cb0c:	4605      	mov	r5, r0
 800cb0e:	f001 fa8d 	bl	800e02c <_localeconv_r>
 800cb12:	f8d0 a000 	ldr.w	sl, [r0]
 800cb16:	4650      	mov	r0, sl
 800cb18:	f7f3 fb62 	bl	80001e0 <strlen>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	930a      	str	r3, [sp, #40]	; 0x28
 800cb20:	6823      	ldr	r3, [r4, #0]
 800cb22:	9305      	str	r3, [sp, #20]
 800cb24:	f8d8 3000 	ldr.w	r3, [r8]
 800cb28:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cb2c:	3307      	adds	r3, #7
 800cb2e:	f023 0307 	bic.w	r3, r3, #7
 800cb32:	f103 0208 	add.w	r2, r3, #8
 800cb36:	f8c8 2000 	str.w	r2, [r8]
 800cb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cb42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cb46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb4a:	9307      	str	r3, [sp, #28]
 800cb4c:	f8cd 8018 	str.w	r8, [sp, #24]
 800cb50:	ee08 0a10 	vmov	s16, r0
 800cb54:	4b9f      	ldr	r3, [pc, #636]	; (800cdd4 <_printf_float+0x2dc>)
 800cb56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb5a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb5e:	f7f3 ffed 	bl	8000b3c <__aeabi_dcmpun>
 800cb62:	bb88      	cbnz	r0, 800cbc8 <_printf_float+0xd0>
 800cb64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb68:	4b9a      	ldr	r3, [pc, #616]	; (800cdd4 <_printf_float+0x2dc>)
 800cb6a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb6e:	f7f3 ffc7 	bl	8000b00 <__aeabi_dcmple>
 800cb72:	bb48      	cbnz	r0, 800cbc8 <_printf_float+0xd0>
 800cb74:	2200      	movs	r2, #0
 800cb76:	2300      	movs	r3, #0
 800cb78:	4640      	mov	r0, r8
 800cb7a:	4649      	mov	r1, r9
 800cb7c:	f7f3 ffb6 	bl	8000aec <__aeabi_dcmplt>
 800cb80:	b110      	cbz	r0, 800cb88 <_printf_float+0x90>
 800cb82:	232d      	movs	r3, #45	; 0x2d
 800cb84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb88:	4b93      	ldr	r3, [pc, #588]	; (800cdd8 <_printf_float+0x2e0>)
 800cb8a:	4894      	ldr	r0, [pc, #592]	; (800cddc <_printf_float+0x2e4>)
 800cb8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cb90:	bf94      	ite	ls
 800cb92:	4698      	movls	r8, r3
 800cb94:	4680      	movhi	r8, r0
 800cb96:	2303      	movs	r3, #3
 800cb98:	6123      	str	r3, [r4, #16]
 800cb9a:	9b05      	ldr	r3, [sp, #20]
 800cb9c:	f023 0204 	bic.w	r2, r3, #4
 800cba0:	6022      	str	r2, [r4, #0]
 800cba2:	f04f 0900 	mov.w	r9, #0
 800cba6:	9700      	str	r7, [sp, #0]
 800cba8:	4633      	mov	r3, r6
 800cbaa:	aa0b      	add	r2, sp, #44	; 0x2c
 800cbac:	4621      	mov	r1, r4
 800cbae:	4628      	mov	r0, r5
 800cbb0:	f000 f9d8 	bl	800cf64 <_printf_common>
 800cbb4:	3001      	adds	r0, #1
 800cbb6:	f040 8090 	bne.w	800ccda <_printf_float+0x1e2>
 800cbba:	f04f 30ff 	mov.w	r0, #4294967295
 800cbbe:	b00d      	add	sp, #52	; 0x34
 800cbc0:	ecbd 8b02 	vpop	{d8}
 800cbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc8:	4642      	mov	r2, r8
 800cbca:	464b      	mov	r3, r9
 800cbcc:	4640      	mov	r0, r8
 800cbce:	4649      	mov	r1, r9
 800cbd0:	f7f3 ffb4 	bl	8000b3c <__aeabi_dcmpun>
 800cbd4:	b140      	cbz	r0, 800cbe8 <_printf_float+0xf0>
 800cbd6:	464b      	mov	r3, r9
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	bfbc      	itt	lt
 800cbdc:	232d      	movlt	r3, #45	; 0x2d
 800cbde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cbe2:	487f      	ldr	r0, [pc, #508]	; (800cde0 <_printf_float+0x2e8>)
 800cbe4:	4b7f      	ldr	r3, [pc, #508]	; (800cde4 <_printf_float+0x2ec>)
 800cbe6:	e7d1      	b.n	800cb8c <_printf_float+0x94>
 800cbe8:	6863      	ldr	r3, [r4, #4]
 800cbea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cbee:	9206      	str	r2, [sp, #24]
 800cbf0:	1c5a      	adds	r2, r3, #1
 800cbf2:	d13f      	bne.n	800cc74 <_printf_float+0x17c>
 800cbf4:	2306      	movs	r3, #6
 800cbf6:	6063      	str	r3, [r4, #4]
 800cbf8:	9b05      	ldr	r3, [sp, #20]
 800cbfa:	6861      	ldr	r1, [r4, #4]
 800cbfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cc00:	2300      	movs	r3, #0
 800cc02:	9303      	str	r3, [sp, #12]
 800cc04:	ab0a      	add	r3, sp, #40	; 0x28
 800cc06:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cc0a:	ab09      	add	r3, sp, #36	; 0x24
 800cc0c:	ec49 8b10 	vmov	d0, r8, r9
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	6022      	str	r2, [r4, #0]
 800cc14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cc18:	4628      	mov	r0, r5
 800cc1a:	f7ff fecd 	bl	800c9b8 <__cvt>
 800cc1e:	9b06      	ldr	r3, [sp, #24]
 800cc20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc22:	2b47      	cmp	r3, #71	; 0x47
 800cc24:	4680      	mov	r8, r0
 800cc26:	d108      	bne.n	800cc3a <_printf_float+0x142>
 800cc28:	1cc8      	adds	r0, r1, #3
 800cc2a:	db02      	blt.n	800cc32 <_printf_float+0x13a>
 800cc2c:	6863      	ldr	r3, [r4, #4]
 800cc2e:	4299      	cmp	r1, r3
 800cc30:	dd41      	ble.n	800ccb6 <_printf_float+0x1be>
 800cc32:	f1ab 0b02 	sub.w	fp, fp, #2
 800cc36:	fa5f fb8b 	uxtb.w	fp, fp
 800cc3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc3e:	d820      	bhi.n	800cc82 <_printf_float+0x18a>
 800cc40:	3901      	subs	r1, #1
 800cc42:	465a      	mov	r2, fp
 800cc44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cc48:	9109      	str	r1, [sp, #36]	; 0x24
 800cc4a:	f7ff ff17 	bl	800ca7c <__exponent>
 800cc4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc50:	1813      	adds	r3, r2, r0
 800cc52:	2a01      	cmp	r2, #1
 800cc54:	4681      	mov	r9, r0
 800cc56:	6123      	str	r3, [r4, #16]
 800cc58:	dc02      	bgt.n	800cc60 <_printf_float+0x168>
 800cc5a:	6822      	ldr	r2, [r4, #0]
 800cc5c:	07d2      	lsls	r2, r2, #31
 800cc5e:	d501      	bpl.n	800cc64 <_printf_float+0x16c>
 800cc60:	3301      	adds	r3, #1
 800cc62:	6123      	str	r3, [r4, #16]
 800cc64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d09c      	beq.n	800cba6 <_printf_float+0xae>
 800cc6c:	232d      	movs	r3, #45	; 0x2d
 800cc6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc72:	e798      	b.n	800cba6 <_printf_float+0xae>
 800cc74:	9a06      	ldr	r2, [sp, #24]
 800cc76:	2a47      	cmp	r2, #71	; 0x47
 800cc78:	d1be      	bne.n	800cbf8 <_printf_float+0x100>
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1bc      	bne.n	800cbf8 <_printf_float+0x100>
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e7b9      	b.n	800cbf6 <_printf_float+0xfe>
 800cc82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cc86:	d118      	bne.n	800ccba <_printf_float+0x1c2>
 800cc88:	2900      	cmp	r1, #0
 800cc8a:	6863      	ldr	r3, [r4, #4]
 800cc8c:	dd0b      	ble.n	800cca6 <_printf_float+0x1ae>
 800cc8e:	6121      	str	r1, [r4, #16]
 800cc90:	b913      	cbnz	r3, 800cc98 <_printf_float+0x1a0>
 800cc92:	6822      	ldr	r2, [r4, #0]
 800cc94:	07d0      	lsls	r0, r2, #31
 800cc96:	d502      	bpl.n	800cc9e <_printf_float+0x1a6>
 800cc98:	3301      	adds	r3, #1
 800cc9a:	440b      	add	r3, r1
 800cc9c:	6123      	str	r3, [r4, #16]
 800cc9e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cca0:	f04f 0900 	mov.w	r9, #0
 800cca4:	e7de      	b.n	800cc64 <_printf_float+0x16c>
 800cca6:	b913      	cbnz	r3, 800ccae <_printf_float+0x1b6>
 800cca8:	6822      	ldr	r2, [r4, #0]
 800ccaa:	07d2      	lsls	r2, r2, #31
 800ccac:	d501      	bpl.n	800ccb2 <_printf_float+0x1ba>
 800ccae:	3302      	adds	r3, #2
 800ccb0:	e7f4      	b.n	800cc9c <_printf_float+0x1a4>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e7f2      	b.n	800cc9c <_printf_float+0x1a4>
 800ccb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ccba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccbc:	4299      	cmp	r1, r3
 800ccbe:	db05      	blt.n	800cccc <_printf_float+0x1d4>
 800ccc0:	6823      	ldr	r3, [r4, #0]
 800ccc2:	6121      	str	r1, [r4, #16]
 800ccc4:	07d8      	lsls	r0, r3, #31
 800ccc6:	d5ea      	bpl.n	800cc9e <_printf_float+0x1a6>
 800ccc8:	1c4b      	adds	r3, r1, #1
 800ccca:	e7e7      	b.n	800cc9c <_printf_float+0x1a4>
 800cccc:	2900      	cmp	r1, #0
 800ccce:	bfd4      	ite	le
 800ccd0:	f1c1 0202 	rsble	r2, r1, #2
 800ccd4:	2201      	movgt	r2, #1
 800ccd6:	4413      	add	r3, r2
 800ccd8:	e7e0      	b.n	800cc9c <_printf_float+0x1a4>
 800ccda:	6823      	ldr	r3, [r4, #0]
 800ccdc:	055a      	lsls	r2, r3, #21
 800ccde:	d407      	bmi.n	800ccf0 <_printf_float+0x1f8>
 800cce0:	6923      	ldr	r3, [r4, #16]
 800cce2:	4642      	mov	r2, r8
 800cce4:	4631      	mov	r1, r6
 800cce6:	4628      	mov	r0, r5
 800cce8:	47b8      	blx	r7
 800ccea:	3001      	adds	r0, #1
 800ccec:	d12c      	bne.n	800cd48 <_printf_float+0x250>
 800ccee:	e764      	b.n	800cbba <_printf_float+0xc2>
 800ccf0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ccf4:	f240 80e0 	bls.w	800ceb8 <_printf_float+0x3c0>
 800ccf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	2300      	movs	r3, #0
 800cd00:	f7f3 feea 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d034      	beq.n	800cd72 <_printf_float+0x27a>
 800cd08:	4a37      	ldr	r2, [pc, #220]	; (800cde8 <_printf_float+0x2f0>)
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	4631      	mov	r1, r6
 800cd0e:	4628      	mov	r0, r5
 800cd10:	47b8      	blx	r7
 800cd12:	3001      	adds	r0, #1
 800cd14:	f43f af51 	beq.w	800cbba <_printf_float+0xc2>
 800cd18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	db02      	blt.n	800cd26 <_printf_float+0x22e>
 800cd20:	6823      	ldr	r3, [r4, #0]
 800cd22:	07d8      	lsls	r0, r3, #31
 800cd24:	d510      	bpl.n	800cd48 <_printf_float+0x250>
 800cd26:	ee18 3a10 	vmov	r3, s16
 800cd2a:	4652      	mov	r2, sl
 800cd2c:	4631      	mov	r1, r6
 800cd2e:	4628      	mov	r0, r5
 800cd30:	47b8      	blx	r7
 800cd32:	3001      	adds	r0, #1
 800cd34:	f43f af41 	beq.w	800cbba <_printf_float+0xc2>
 800cd38:	f04f 0800 	mov.w	r8, #0
 800cd3c:	f104 091a 	add.w	r9, r4, #26
 800cd40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd42:	3b01      	subs	r3, #1
 800cd44:	4543      	cmp	r3, r8
 800cd46:	dc09      	bgt.n	800cd5c <_printf_float+0x264>
 800cd48:	6823      	ldr	r3, [r4, #0]
 800cd4a:	079b      	lsls	r3, r3, #30
 800cd4c:	f100 8105 	bmi.w	800cf5a <_printf_float+0x462>
 800cd50:	68e0      	ldr	r0, [r4, #12]
 800cd52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd54:	4298      	cmp	r0, r3
 800cd56:	bfb8      	it	lt
 800cd58:	4618      	movlt	r0, r3
 800cd5a:	e730      	b.n	800cbbe <_printf_float+0xc6>
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	464a      	mov	r2, r9
 800cd60:	4631      	mov	r1, r6
 800cd62:	4628      	mov	r0, r5
 800cd64:	47b8      	blx	r7
 800cd66:	3001      	adds	r0, #1
 800cd68:	f43f af27 	beq.w	800cbba <_printf_float+0xc2>
 800cd6c:	f108 0801 	add.w	r8, r8, #1
 800cd70:	e7e6      	b.n	800cd40 <_printf_float+0x248>
 800cd72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	dc39      	bgt.n	800cdec <_printf_float+0x2f4>
 800cd78:	4a1b      	ldr	r2, [pc, #108]	; (800cde8 <_printf_float+0x2f0>)
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	4631      	mov	r1, r6
 800cd7e:	4628      	mov	r0, r5
 800cd80:	47b8      	blx	r7
 800cd82:	3001      	adds	r0, #1
 800cd84:	f43f af19 	beq.w	800cbba <_printf_float+0xc2>
 800cd88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	d102      	bne.n	800cd96 <_printf_float+0x29e>
 800cd90:	6823      	ldr	r3, [r4, #0]
 800cd92:	07d9      	lsls	r1, r3, #31
 800cd94:	d5d8      	bpl.n	800cd48 <_printf_float+0x250>
 800cd96:	ee18 3a10 	vmov	r3, s16
 800cd9a:	4652      	mov	r2, sl
 800cd9c:	4631      	mov	r1, r6
 800cd9e:	4628      	mov	r0, r5
 800cda0:	47b8      	blx	r7
 800cda2:	3001      	adds	r0, #1
 800cda4:	f43f af09 	beq.w	800cbba <_printf_float+0xc2>
 800cda8:	f04f 0900 	mov.w	r9, #0
 800cdac:	f104 0a1a 	add.w	sl, r4, #26
 800cdb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdb2:	425b      	negs	r3, r3
 800cdb4:	454b      	cmp	r3, r9
 800cdb6:	dc01      	bgt.n	800cdbc <_printf_float+0x2c4>
 800cdb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdba:	e792      	b.n	800cce2 <_printf_float+0x1ea>
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	4652      	mov	r2, sl
 800cdc0:	4631      	mov	r1, r6
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	47b8      	blx	r7
 800cdc6:	3001      	adds	r0, #1
 800cdc8:	f43f aef7 	beq.w	800cbba <_printf_float+0xc2>
 800cdcc:	f109 0901 	add.w	r9, r9, #1
 800cdd0:	e7ee      	b.n	800cdb0 <_printf_float+0x2b8>
 800cdd2:	bf00      	nop
 800cdd4:	7fefffff 	.word	0x7fefffff
 800cdd8:	0800f2bc 	.word	0x0800f2bc
 800cddc:	0800f2c0 	.word	0x0800f2c0
 800cde0:	0800f2c8 	.word	0x0800f2c8
 800cde4:	0800f2c4 	.word	0x0800f2c4
 800cde8:	0800f2cc 	.word	0x0800f2cc
 800cdec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	bfa8      	it	ge
 800cdf4:	461a      	movge	r2, r3
 800cdf6:	2a00      	cmp	r2, #0
 800cdf8:	4691      	mov	r9, r2
 800cdfa:	dc37      	bgt.n	800ce6c <_printf_float+0x374>
 800cdfc:	f04f 0b00 	mov.w	fp, #0
 800ce00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce04:	f104 021a 	add.w	r2, r4, #26
 800ce08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce0a:	9305      	str	r3, [sp, #20]
 800ce0c:	eba3 0309 	sub.w	r3, r3, r9
 800ce10:	455b      	cmp	r3, fp
 800ce12:	dc33      	bgt.n	800ce7c <_printf_float+0x384>
 800ce14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	db3b      	blt.n	800ce94 <_printf_float+0x39c>
 800ce1c:	6823      	ldr	r3, [r4, #0]
 800ce1e:	07da      	lsls	r2, r3, #31
 800ce20:	d438      	bmi.n	800ce94 <_printf_float+0x39c>
 800ce22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce24:	9a05      	ldr	r2, [sp, #20]
 800ce26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce28:	1a9a      	subs	r2, r3, r2
 800ce2a:	eba3 0901 	sub.w	r9, r3, r1
 800ce2e:	4591      	cmp	r9, r2
 800ce30:	bfa8      	it	ge
 800ce32:	4691      	movge	r9, r2
 800ce34:	f1b9 0f00 	cmp.w	r9, #0
 800ce38:	dc35      	bgt.n	800cea6 <_printf_float+0x3ae>
 800ce3a:	f04f 0800 	mov.w	r8, #0
 800ce3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce42:	f104 0a1a 	add.w	sl, r4, #26
 800ce46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce4a:	1a9b      	subs	r3, r3, r2
 800ce4c:	eba3 0309 	sub.w	r3, r3, r9
 800ce50:	4543      	cmp	r3, r8
 800ce52:	f77f af79 	ble.w	800cd48 <_printf_float+0x250>
 800ce56:	2301      	movs	r3, #1
 800ce58:	4652      	mov	r2, sl
 800ce5a:	4631      	mov	r1, r6
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	47b8      	blx	r7
 800ce60:	3001      	adds	r0, #1
 800ce62:	f43f aeaa 	beq.w	800cbba <_printf_float+0xc2>
 800ce66:	f108 0801 	add.w	r8, r8, #1
 800ce6a:	e7ec      	b.n	800ce46 <_printf_float+0x34e>
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	4631      	mov	r1, r6
 800ce70:	4642      	mov	r2, r8
 800ce72:	4628      	mov	r0, r5
 800ce74:	47b8      	blx	r7
 800ce76:	3001      	adds	r0, #1
 800ce78:	d1c0      	bne.n	800cdfc <_printf_float+0x304>
 800ce7a:	e69e      	b.n	800cbba <_printf_float+0xc2>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	4631      	mov	r1, r6
 800ce80:	4628      	mov	r0, r5
 800ce82:	9205      	str	r2, [sp, #20]
 800ce84:	47b8      	blx	r7
 800ce86:	3001      	adds	r0, #1
 800ce88:	f43f ae97 	beq.w	800cbba <_printf_float+0xc2>
 800ce8c:	9a05      	ldr	r2, [sp, #20]
 800ce8e:	f10b 0b01 	add.w	fp, fp, #1
 800ce92:	e7b9      	b.n	800ce08 <_printf_float+0x310>
 800ce94:	ee18 3a10 	vmov	r3, s16
 800ce98:	4652      	mov	r2, sl
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	47b8      	blx	r7
 800cea0:	3001      	adds	r0, #1
 800cea2:	d1be      	bne.n	800ce22 <_printf_float+0x32a>
 800cea4:	e689      	b.n	800cbba <_printf_float+0xc2>
 800cea6:	9a05      	ldr	r2, [sp, #20]
 800cea8:	464b      	mov	r3, r9
 800ceaa:	4442      	add	r2, r8
 800ceac:	4631      	mov	r1, r6
 800ceae:	4628      	mov	r0, r5
 800ceb0:	47b8      	blx	r7
 800ceb2:	3001      	adds	r0, #1
 800ceb4:	d1c1      	bne.n	800ce3a <_printf_float+0x342>
 800ceb6:	e680      	b.n	800cbba <_printf_float+0xc2>
 800ceb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ceba:	2a01      	cmp	r2, #1
 800cebc:	dc01      	bgt.n	800cec2 <_printf_float+0x3ca>
 800cebe:	07db      	lsls	r3, r3, #31
 800cec0:	d538      	bpl.n	800cf34 <_printf_float+0x43c>
 800cec2:	2301      	movs	r3, #1
 800cec4:	4642      	mov	r2, r8
 800cec6:	4631      	mov	r1, r6
 800cec8:	4628      	mov	r0, r5
 800ceca:	47b8      	blx	r7
 800cecc:	3001      	adds	r0, #1
 800cece:	f43f ae74 	beq.w	800cbba <_printf_float+0xc2>
 800ced2:	ee18 3a10 	vmov	r3, s16
 800ced6:	4652      	mov	r2, sl
 800ced8:	4631      	mov	r1, r6
 800ceda:	4628      	mov	r0, r5
 800cedc:	47b8      	blx	r7
 800cede:	3001      	adds	r0, #1
 800cee0:	f43f ae6b 	beq.w	800cbba <_printf_float+0xc2>
 800cee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cee8:	2200      	movs	r2, #0
 800ceea:	2300      	movs	r3, #0
 800ceec:	f7f3 fdf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800cef0:	b9d8      	cbnz	r0, 800cf2a <_printf_float+0x432>
 800cef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cef4:	f108 0201 	add.w	r2, r8, #1
 800cef8:	3b01      	subs	r3, #1
 800cefa:	4631      	mov	r1, r6
 800cefc:	4628      	mov	r0, r5
 800cefe:	47b8      	blx	r7
 800cf00:	3001      	adds	r0, #1
 800cf02:	d10e      	bne.n	800cf22 <_printf_float+0x42a>
 800cf04:	e659      	b.n	800cbba <_printf_float+0xc2>
 800cf06:	2301      	movs	r3, #1
 800cf08:	4652      	mov	r2, sl
 800cf0a:	4631      	mov	r1, r6
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	47b8      	blx	r7
 800cf10:	3001      	adds	r0, #1
 800cf12:	f43f ae52 	beq.w	800cbba <_printf_float+0xc2>
 800cf16:	f108 0801 	add.w	r8, r8, #1
 800cf1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	4543      	cmp	r3, r8
 800cf20:	dcf1      	bgt.n	800cf06 <_printf_float+0x40e>
 800cf22:	464b      	mov	r3, r9
 800cf24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cf28:	e6dc      	b.n	800cce4 <_printf_float+0x1ec>
 800cf2a:	f04f 0800 	mov.w	r8, #0
 800cf2e:	f104 0a1a 	add.w	sl, r4, #26
 800cf32:	e7f2      	b.n	800cf1a <_printf_float+0x422>
 800cf34:	2301      	movs	r3, #1
 800cf36:	4642      	mov	r2, r8
 800cf38:	e7df      	b.n	800cefa <_printf_float+0x402>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	464a      	mov	r2, r9
 800cf3e:	4631      	mov	r1, r6
 800cf40:	4628      	mov	r0, r5
 800cf42:	47b8      	blx	r7
 800cf44:	3001      	adds	r0, #1
 800cf46:	f43f ae38 	beq.w	800cbba <_printf_float+0xc2>
 800cf4a:	f108 0801 	add.w	r8, r8, #1
 800cf4e:	68e3      	ldr	r3, [r4, #12]
 800cf50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf52:	1a5b      	subs	r3, r3, r1
 800cf54:	4543      	cmp	r3, r8
 800cf56:	dcf0      	bgt.n	800cf3a <_printf_float+0x442>
 800cf58:	e6fa      	b.n	800cd50 <_printf_float+0x258>
 800cf5a:	f04f 0800 	mov.w	r8, #0
 800cf5e:	f104 0919 	add.w	r9, r4, #25
 800cf62:	e7f4      	b.n	800cf4e <_printf_float+0x456>

0800cf64 <_printf_common>:
 800cf64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf68:	4616      	mov	r6, r2
 800cf6a:	4699      	mov	r9, r3
 800cf6c:	688a      	ldr	r2, [r1, #8]
 800cf6e:	690b      	ldr	r3, [r1, #16]
 800cf70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf74:	4293      	cmp	r3, r2
 800cf76:	bfb8      	it	lt
 800cf78:	4613      	movlt	r3, r2
 800cf7a:	6033      	str	r3, [r6, #0]
 800cf7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf80:	4607      	mov	r7, r0
 800cf82:	460c      	mov	r4, r1
 800cf84:	b10a      	cbz	r2, 800cf8a <_printf_common+0x26>
 800cf86:	3301      	adds	r3, #1
 800cf88:	6033      	str	r3, [r6, #0]
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	0699      	lsls	r1, r3, #26
 800cf8e:	bf42      	ittt	mi
 800cf90:	6833      	ldrmi	r3, [r6, #0]
 800cf92:	3302      	addmi	r3, #2
 800cf94:	6033      	strmi	r3, [r6, #0]
 800cf96:	6825      	ldr	r5, [r4, #0]
 800cf98:	f015 0506 	ands.w	r5, r5, #6
 800cf9c:	d106      	bne.n	800cfac <_printf_common+0x48>
 800cf9e:	f104 0a19 	add.w	sl, r4, #25
 800cfa2:	68e3      	ldr	r3, [r4, #12]
 800cfa4:	6832      	ldr	r2, [r6, #0]
 800cfa6:	1a9b      	subs	r3, r3, r2
 800cfa8:	42ab      	cmp	r3, r5
 800cfaa:	dc26      	bgt.n	800cffa <_printf_common+0x96>
 800cfac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cfb0:	1e13      	subs	r3, r2, #0
 800cfb2:	6822      	ldr	r2, [r4, #0]
 800cfb4:	bf18      	it	ne
 800cfb6:	2301      	movne	r3, #1
 800cfb8:	0692      	lsls	r2, r2, #26
 800cfba:	d42b      	bmi.n	800d014 <_printf_common+0xb0>
 800cfbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cfc0:	4649      	mov	r1, r9
 800cfc2:	4638      	mov	r0, r7
 800cfc4:	47c0      	blx	r8
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	d01e      	beq.n	800d008 <_printf_common+0xa4>
 800cfca:	6823      	ldr	r3, [r4, #0]
 800cfcc:	68e5      	ldr	r5, [r4, #12]
 800cfce:	6832      	ldr	r2, [r6, #0]
 800cfd0:	f003 0306 	and.w	r3, r3, #6
 800cfd4:	2b04      	cmp	r3, #4
 800cfd6:	bf08      	it	eq
 800cfd8:	1aad      	subeq	r5, r5, r2
 800cfda:	68a3      	ldr	r3, [r4, #8]
 800cfdc:	6922      	ldr	r2, [r4, #16]
 800cfde:	bf0c      	ite	eq
 800cfe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfe4:	2500      	movne	r5, #0
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	bfc4      	itt	gt
 800cfea:	1a9b      	subgt	r3, r3, r2
 800cfec:	18ed      	addgt	r5, r5, r3
 800cfee:	2600      	movs	r6, #0
 800cff0:	341a      	adds	r4, #26
 800cff2:	42b5      	cmp	r5, r6
 800cff4:	d11a      	bne.n	800d02c <_printf_common+0xc8>
 800cff6:	2000      	movs	r0, #0
 800cff8:	e008      	b.n	800d00c <_printf_common+0xa8>
 800cffa:	2301      	movs	r3, #1
 800cffc:	4652      	mov	r2, sl
 800cffe:	4649      	mov	r1, r9
 800d000:	4638      	mov	r0, r7
 800d002:	47c0      	blx	r8
 800d004:	3001      	adds	r0, #1
 800d006:	d103      	bne.n	800d010 <_printf_common+0xac>
 800d008:	f04f 30ff 	mov.w	r0, #4294967295
 800d00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d010:	3501      	adds	r5, #1
 800d012:	e7c6      	b.n	800cfa2 <_printf_common+0x3e>
 800d014:	18e1      	adds	r1, r4, r3
 800d016:	1c5a      	adds	r2, r3, #1
 800d018:	2030      	movs	r0, #48	; 0x30
 800d01a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d01e:	4422      	add	r2, r4
 800d020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d028:	3302      	adds	r3, #2
 800d02a:	e7c7      	b.n	800cfbc <_printf_common+0x58>
 800d02c:	2301      	movs	r3, #1
 800d02e:	4622      	mov	r2, r4
 800d030:	4649      	mov	r1, r9
 800d032:	4638      	mov	r0, r7
 800d034:	47c0      	blx	r8
 800d036:	3001      	adds	r0, #1
 800d038:	d0e6      	beq.n	800d008 <_printf_common+0xa4>
 800d03a:	3601      	adds	r6, #1
 800d03c:	e7d9      	b.n	800cff2 <_printf_common+0x8e>
	...

0800d040 <_printf_i>:
 800d040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d044:	7e0f      	ldrb	r7, [r1, #24]
 800d046:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d048:	2f78      	cmp	r7, #120	; 0x78
 800d04a:	4691      	mov	r9, r2
 800d04c:	4680      	mov	r8, r0
 800d04e:	460c      	mov	r4, r1
 800d050:	469a      	mov	sl, r3
 800d052:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d056:	d807      	bhi.n	800d068 <_printf_i+0x28>
 800d058:	2f62      	cmp	r7, #98	; 0x62
 800d05a:	d80a      	bhi.n	800d072 <_printf_i+0x32>
 800d05c:	2f00      	cmp	r7, #0
 800d05e:	f000 80d8 	beq.w	800d212 <_printf_i+0x1d2>
 800d062:	2f58      	cmp	r7, #88	; 0x58
 800d064:	f000 80a3 	beq.w	800d1ae <_printf_i+0x16e>
 800d068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d06c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d070:	e03a      	b.n	800d0e8 <_printf_i+0xa8>
 800d072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d076:	2b15      	cmp	r3, #21
 800d078:	d8f6      	bhi.n	800d068 <_printf_i+0x28>
 800d07a:	a101      	add	r1, pc, #4	; (adr r1, 800d080 <_printf_i+0x40>)
 800d07c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d080:	0800d0d9 	.word	0x0800d0d9
 800d084:	0800d0ed 	.word	0x0800d0ed
 800d088:	0800d069 	.word	0x0800d069
 800d08c:	0800d069 	.word	0x0800d069
 800d090:	0800d069 	.word	0x0800d069
 800d094:	0800d069 	.word	0x0800d069
 800d098:	0800d0ed 	.word	0x0800d0ed
 800d09c:	0800d069 	.word	0x0800d069
 800d0a0:	0800d069 	.word	0x0800d069
 800d0a4:	0800d069 	.word	0x0800d069
 800d0a8:	0800d069 	.word	0x0800d069
 800d0ac:	0800d1f9 	.word	0x0800d1f9
 800d0b0:	0800d11d 	.word	0x0800d11d
 800d0b4:	0800d1db 	.word	0x0800d1db
 800d0b8:	0800d069 	.word	0x0800d069
 800d0bc:	0800d069 	.word	0x0800d069
 800d0c0:	0800d21b 	.word	0x0800d21b
 800d0c4:	0800d069 	.word	0x0800d069
 800d0c8:	0800d11d 	.word	0x0800d11d
 800d0cc:	0800d069 	.word	0x0800d069
 800d0d0:	0800d069 	.word	0x0800d069
 800d0d4:	0800d1e3 	.word	0x0800d1e3
 800d0d8:	682b      	ldr	r3, [r5, #0]
 800d0da:	1d1a      	adds	r2, r3, #4
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	602a      	str	r2, [r5, #0]
 800d0e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e0a3      	b.n	800d234 <_printf_i+0x1f4>
 800d0ec:	6820      	ldr	r0, [r4, #0]
 800d0ee:	6829      	ldr	r1, [r5, #0]
 800d0f0:	0606      	lsls	r6, r0, #24
 800d0f2:	f101 0304 	add.w	r3, r1, #4
 800d0f6:	d50a      	bpl.n	800d10e <_printf_i+0xce>
 800d0f8:	680e      	ldr	r6, [r1, #0]
 800d0fa:	602b      	str	r3, [r5, #0]
 800d0fc:	2e00      	cmp	r6, #0
 800d0fe:	da03      	bge.n	800d108 <_printf_i+0xc8>
 800d100:	232d      	movs	r3, #45	; 0x2d
 800d102:	4276      	negs	r6, r6
 800d104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d108:	485e      	ldr	r0, [pc, #376]	; (800d284 <_printf_i+0x244>)
 800d10a:	230a      	movs	r3, #10
 800d10c:	e019      	b.n	800d142 <_printf_i+0x102>
 800d10e:	680e      	ldr	r6, [r1, #0]
 800d110:	602b      	str	r3, [r5, #0]
 800d112:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d116:	bf18      	it	ne
 800d118:	b236      	sxthne	r6, r6
 800d11a:	e7ef      	b.n	800d0fc <_printf_i+0xbc>
 800d11c:	682b      	ldr	r3, [r5, #0]
 800d11e:	6820      	ldr	r0, [r4, #0]
 800d120:	1d19      	adds	r1, r3, #4
 800d122:	6029      	str	r1, [r5, #0]
 800d124:	0601      	lsls	r1, r0, #24
 800d126:	d501      	bpl.n	800d12c <_printf_i+0xec>
 800d128:	681e      	ldr	r6, [r3, #0]
 800d12a:	e002      	b.n	800d132 <_printf_i+0xf2>
 800d12c:	0646      	lsls	r6, r0, #25
 800d12e:	d5fb      	bpl.n	800d128 <_printf_i+0xe8>
 800d130:	881e      	ldrh	r6, [r3, #0]
 800d132:	4854      	ldr	r0, [pc, #336]	; (800d284 <_printf_i+0x244>)
 800d134:	2f6f      	cmp	r7, #111	; 0x6f
 800d136:	bf0c      	ite	eq
 800d138:	2308      	moveq	r3, #8
 800d13a:	230a      	movne	r3, #10
 800d13c:	2100      	movs	r1, #0
 800d13e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d142:	6865      	ldr	r5, [r4, #4]
 800d144:	60a5      	str	r5, [r4, #8]
 800d146:	2d00      	cmp	r5, #0
 800d148:	bfa2      	ittt	ge
 800d14a:	6821      	ldrge	r1, [r4, #0]
 800d14c:	f021 0104 	bicge.w	r1, r1, #4
 800d150:	6021      	strge	r1, [r4, #0]
 800d152:	b90e      	cbnz	r6, 800d158 <_printf_i+0x118>
 800d154:	2d00      	cmp	r5, #0
 800d156:	d04d      	beq.n	800d1f4 <_printf_i+0x1b4>
 800d158:	4615      	mov	r5, r2
 800d15a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d15e:	fb03 6711 	mls	r7, r3, r1, r6
 800d162:	5dc7      	ldrb	r7, [r0, r7]
 800d164:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d168:	4637      	mov	r7, r6
 800d16a:	42bb      	cmp	r3, r7
 800d16c:	460e      	mov	r6, r1
 800d16e:	d9f4      	bls.n	800d15a <_printf_i+0x11a>
 800d170:	2b08      	cmp	r3, #8
 800d172:	d10b      	bne.n	800d18c <_printf_i+0x14c>
 800d174:	6823      	ldr	r3, [r4, #0]
 800d176:	07de      	lsls	r6, r3, #31
 800d178:	d508      	bpl.n	800d18c <_printf_i+0x14c>
 800d17a:	6923      	ldr	r3, [r4, #16]
 800d17c:	6861      	ldr	r1, [r4, #4]
 800d17e:	4299      	cmp	r1, r3
 800d180:	bfde      	ittt	le
 800d182:	2330      	movle	r3, #48	; 0x30
 800d184:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d188:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d18c:	1b52      	subs	r2, r2, r5
 800d18e:	6122      	str	r2, [r4, #16]
 800d190:	f8cd a000 	str.w	sl, [sp]
 800d194:	464b      	mov	r3, r9
 800d196:	aa03      	add	r2, sp, #12
 800d198:	4621      	mov	r1, r4
 800d19a:	4640      	mov	r0, r8
 800d19c:	f7ff fee2 	bl	800cf64 <_printf_common>
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	d14c      	bne.n	800d23e <_printf_i+0x1fe>
 800d1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a8:	b004      	add	sp, #16
 800d1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ae:	4835      	ldr	r0, [pc, #212]	; (800d284 <_printf_i+0x244>)
 800d1b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d1b4:	6829      	ldr	r1, [r5, #0]
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d1bc:	6029      	str	r1, [r5, #0]
 800d1be:	061d      	lsls	r5, r3, #24
 800d1c0:	d514      	bpl.n	800d1ec <_printf_i+0x1ac>
 800d1c2:	07df      	lsls	r7, r3, #31
 800d1c4:	bf44      	itt	mi
 800d1c6:	f043 0320 	orrmi.w	r3, r3, #32
 800d1ca:	6023      	strmi	r3, [r4, #0]
 800d1cc:	b91e      	cbnz	r6, 800d1d6 <_printf_i+0x196>
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	f023 0320 	bic.w	r3, r3, #32
 800d1d4:	6023      	str	r3, [r4, #0]
 800d1d6:	2310      	movs	r3, #16
 800d1d8:	e7b0      	b.n	800d13c <_printf_i+0xfc>
 800d1da:	6823      	ldr	r3, [r4, #0]
 800d1dc:	f043 0320 	orr.w	r3, r3, #32
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	2378      	movs	r3, #120	; 0x78
 800d1e4:	4828      	ldr	r0, [pc, #160]	; (800d288 <_printf_i+0x248>)
 800d1e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d1ea:	e7e3      	b.n	800d1b4 <_printf_i+0x174>
 800d1ec:	0659      	lsls	r1, r3, #25
 800d1ee:	bf48      	it	mi
 800d1f0:	b2b6      	uxthmi	r6, r6
 800d1f2:	e7e6      	b.n	800d1c2 <_printf_i+0x182>
 800d1f4:	4615      	mov	r5, r2
 800d1f6:	e7bb      	b.n	800d170 <_printf_i+0x130>
 800d1f8:	682b      	ldr	r3, [r5, #0]
 800d1fa:	6826      	ldr	r6, [r4, #0]
 800d1fc:	6961      	ldr	r1, [r4, #20]
 800d1fe:	1d18      	adds	r0, r3, #4
 800d200:	6028      	str	r0, [r5, #0]
 800d202:	0635      	lsls	r5, r6, #24
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	d501      	bpl.n	800d20c <_printf_i+0x1cc>
 800d208:	6019      	str	r1, [r3, #0]
 800d20a:	e002      	b.n	800d212 <_printf_i+0x1d2>
 800d20c:	0670      	lsls	r0, r6, #25
 800d20e:	d5fb      	bpl.n	800d208 <_printf_i+0x1c8>
 800d210:	8019      	strh	r1, [r3, #0]
 800d212:	2300      	movs	r3, #0
 800d214:	6123      	str	r3, [r4, #16]
 800d216:	4615      	mov	r5, r2
 800d218:	e7ba      	b.n	800d190 <_printf_i+0x150>
 800d21a:	682b      	ldr	r3, [r5, #0]
 800d21c:	1d1a      	adds	r2, r3, #4
 800d21e:	602a      	str	r2, [r5, #0]
 800d220:	681d      	ldr	r5, [r3, #0]
 800d222:	6862      	ldr	r2, [r4, #4]
 800d224:	2100      	movs	r1, #0
 800d226:	4628      	mov	r0, r5
 800d228:	f7f2 ffe2 	bl	80001f0 <memchr>
 800d22c:	b108      	cbz	r0, 800d232 <_printf_i+0x1f2>
 800d22e:	1b40      	subs	r0, r0, r5
 800d230:	6060      	str	r0, [r4, #4]
 800d232:	6863      	ldr	r3, [r4, #4]
 800d234:	6123      	str	r3, [r4, #16]
 800d236:	2300      	movs	r3, #0
 800d238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d23c:	e7a8      	b.n	800d190 <_printf_i+0x150>
 800d23e:	6923      	ldr	r3, [r4, #16]
 800d240:	462a      	mov	r2, r5
 800d242:	4649      	mov	r1, r9
 800d244:	4640      	mov	r0, r8
 800d246:	47d0      	blx	sl
 800d248:	3001      	adds	r0, #1
 800d24a:	d0ab      	beq.n	800d1a4 <_printf_i+0x164>
 800d24c:	6823      	ldr	r3, [r4, #0]
 800d24e:	079b      	lsls	r3, r3, #30
 800d250:	d413      	bmi.n	800d27a <_printf_i+0x23a>
 800d252:	68e0      	ldr	r0, [r4, #12]
 800d254:	9b03      	ldr	r3, [sp, #12]
 800d256:	4298      	cmp	r0, r3
 800d258:	bfb8      	it	lt
 800d25a:	4618      	movlt	r0, r3
 800d25c:	e7a4      	b.n	800d1a8 <_printf_i+0x168>
 800d25e:	2301      	movs	r3, #1
 800d260:	4632      	mov	r2, r6
 800d262:	4649      	mov	r1, r9
 800d264:	4640      	mov	r0, r8
 800d266:	47d0      	blx	sl
 800d268:	3001      	adds	r0, #1
 800d26a:	d09b      	beq.n	800d1a4 <_printf_i+0x164>
 800d26c:	3501      	adds	r5, #1
 800d26e:	68e3      	ldr	r3, [r4, #12]
 800d270:	9903      	ldr	r1, [sp, #12]
 800d272:	1a5b      	subs	r3, r3, r1
 800d274:	42ab      	cmp	r3, r5
 800d276:	dcf2      	bgt.n	800d25e <_printf_i+0x21e>
 800d278:	e7eb      	b.n	800d252 <_printf_i+0x212>
 800d27a:	2500      	movs	r5, #0
 800d27c:	f104 0619 	add.w	r6, r4, #25
 800d280:	e7f5      	b.n	800d26e <_printf_i+0x22e>
 800d282:	bf00      	nop
 800d284:	0800f2ce 	.word	0x0800f2ce
 800d288:	0800f2df 	.word	0x0800f2df

0800d28c <_sbrk_r>:
 800d28c:	b538      	push	{r3, r4, r5, lr}
 800d28e:	4d06      	ldr	r5, [pc, #24]	; (800d2a8 <_sbrk_r+0x1c>)
 800d290:	2300      	movs	r3, #0
 800d292:	4604      	mov	r4, r0
 800d294:	4608      	mov	r0, r1
 800d296:	602b      	str	r3, [r5, #0]
 800d298:	f7f8 fa2a 	bl	80056f0 <_sbrk>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	d102      	bne.n	800d2a6 <_sbrk_r+0x1a>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	b103      	cbz	r3, 800d2a6 <_sbrk_r+0x1a>
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	200010e8 	.word	0x200010e8

0800d2ac <_raise_r>:
 800d2ac:	291f      	cmp	r1, #31
 800d2ae:	b538      	push	{r3, r4, r5, lr}
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	460d      	mov	r5, r1
 800d2b4:	d904      	bls.n	800d2c0 <_raise_r+0x14>
 800d2b6:	2316      	movs	r3, #22
 800d2b8:	6003      	str	r3, [r0, #0]
 800d2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d2be:	bd38      	pop	{r3, r4, r5, pc}
 800d2c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d2c2:	b112      	cbz	r2, 800d2ca <_raise_r+0x1e>
 800d2c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2c8:	b94b      	cbnz	r3, 800d2de <_raise_r+0x32>
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	f000 f830 	bl	800d330 <_getpid_r>
 800d2d0:	462a      	mov	r2, r5
 800d2d2:	4601      	mov	r1, r0
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2da:	f000 b817 	b.w	800d30c <_kill_r>
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d00a      	beq.n	800d2f8 <_raise_r+0x4c>
 800d2e2:	1c59      	adds	r1, r3, #1
 800d2e4:	d103      	bne.n	800d2ee <_raise_r+0x42>
 800d2e6:	2316      	movs	r3, #22
 800d2e8:	6003      	str	r3, [r0, #0]
 800d2ea:	2001      	movs	r0, #1
 800d2ec:	e7e7      	b.n	800d2be <_raise_r+0x12>
 800d2ee:	2400      	movs	r4, #0
 800d2f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	4798      	blx	r3
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	e7e0      	b.n	800d2be <_raise_r+0x12>

0800d2fc <raise>:
 800d2fc:	4b02      	ldr	r3, [pc, #8]	; (800d308 <raise+0xc>)
 800d2fe:	4601      	mov	r1, r0
 800d300:	6818      	ldr	r0, [r3, #0]
 800d302:	f7ff bfd3 	b.w	800d2ac <_raise_r>
 800d306:	bf00      	nop
 800d308:	2000000c 	.word	0x2000000c

0800d30c <_kill_r>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	4d07      	ldr	r5, [pc, #28]	; (800d32c <_kill_r+0x20>)
 800d310:	2300      	movs	r3, #0
 800d312:	4604      	mov	r4, r0
 800d314:	4608      	mov	r0, r1
 800d316:	4611      	mov	r1, r2
 800d318:	602b      	str	r3, [r5, #0]
 800d31a:	f7f8 f961 	bl	80055e0 <_kill>
 800d31e:	1c43      	adds	r3, r0, #1
 800d320:	d102      	bne.n	800d328 <_kill_r+0x1c>
 800d322:	682b      	ldr	r3, [r5, #0]
 800d324:	b103      	cbz	r3, 800d328 <_kill_r+0x1c>
 800d326:	6023      	str	r3, [r4, #0]
 800d328:	bd38      	pop	{r3, r4, r5, pc}
 800d32a:	bf00      	nop
 800d32c:	200010e8 	.word	0x200010e8

0800d330 <_getpid_r>:
 800d330:	f7f8 b94e 	b.w	80055d0 <_getpid>

0800d334 <quorem>:
 800d334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d338:	6903      	ldr	r3, [r0, #16]
 800d33a:	690c      	ldr	r4, [r1, #16]
 800d33c:	42a3      	cmp	r3, r4
 800d33e:	4607      	mov	r7, r0
 800d340:	f2c0 8081 	blt.w	800d446 <quorem+0x112>
 800d344:	3c01      	subs	r4, #1
 800d346:	f101 0814 	add.w	r8, r1, #20
 800d34a:	f100 0514 	add.w	r5, r0, #20
 800d34e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d352:	9301      	str	r3, [sp, #4]
 800d354:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d358:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d35c:	3301      	adds	r3, #1
 800d35e:	429a      	cmp	r2, r3
 800d360:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d364:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d368:	fbb2 f6f3 	udiv	r6, r2, r3
 800d36c:	d331      	bcc.n	800d3d2 <quorem+0x9e>
 800d36e:	f04f 0e00 	mov.w	lr, #0
 800d372:	4640      	mov	r0, r8
 800d374:	46ac      	mov	ip, r5
 800d376:	46f2      	mov	sl, lr
 800d378:	f850 2b04 	ldr.w	r2, [r0], #4
 800d37c:	b293      	uxth	r3, r2
 800d37e:	fb06 e303 	mla	r3, r6, r3, lr
 800d382:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d386:	b29b      	uxth	r3, r3
 800d388:	ebaa 0303 	sub.w	r3, sl, r3
 800d38c:	f8dc a000 	ldr.w	sl, [ip]
 800d390:	0c12      	lsrs	r2, r2, #16
 800d392:	fa13 f38a 	uxtah	r3, r3, sl
 800d396:	fb06 e202 	mla	r2, r6, r2, lr
 800d39a:	9300      	str	r3, [sp, #0]
 800d39c:	9b00      	ldr	r3, [sp, #0]
 800d39e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d3a2:	b292      	uxth	r2, r2
 800d3a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d3a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d3ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800d3b0:	4581      	cmp	r9, r0
 800d3b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3b6:	f84c 3b04 	str.w	r3, [ip], #4
 800d3ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d3be:	d2db      	bcs.n	800d378 <quorem+0x44>
 800d3c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800d3c4:	b92b      	cbnz	r3, 800d3d2 <quorem+0x9e>
 800d3c6:	9b01      	ldr	r3, [sp, #4]
 800d3c8:	3b04      	subs	r3, #4
 800d3ca:	429d      	cmp	r5, r3
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	d32e      	bcc.n	800d42e <quorem+0xfa>
 800d3d0:	613c      	str	r4, [r7, #16]
 800d3d2:	4638      	mov	r0, r7
 800d3d4:	f001 f8bc 	bl	800e550 <__mcmp>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	db24      	blt.n	800d426 <quorem+0xf2>
 800d3dc:	3601      	adds	r6, #1
 800d3de:	4628      	mov	r0, r5
 800d3e0:	f04f 0c00 	mov.w	ip, #0
 800d3e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d3e8:	f8d0 e000 	ldr.w	lr, [r0]
 800d3ec:	b293      	uxth	r3, r2
 800d3ee:	ebac 0303 	sub.w	r3, ip, r3
 800d3f2:	0c12      	lsrs	r2, r2, #16
 800d3f4:	fa13 f38e 	uxtah	r3, r3, lr
 800d3f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d3fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d400:	b29b      	uxth	r3, r3
 800d402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d406:	45c1      	cmp	r9, r8
 800d408:	f840 3b04 	str.w	r3, [r0], #4
 800d40c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d410:	d2e8      	bcs.n	800d3e4 <quorem+0xb0>
 800d412:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d416:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d41a:	b922      	cbnz	r2, 800d426 <quorem+0xf2>
 800d41c:	3b04      	subs	r3, #4
 800d41e:	429d      	cmp	r5, r3
 800d420:	461a      	mov	r2, r3
 800d422:	d30a      	bcc.n	800d43a <quorem+0x106>
 800d424:	613c      	str	r4, [r7, #16]
 800d426:	4630      	mov	r0, r6
 800d428:	b003      	add	sp, #12
 800d42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42e:	6812      	ldr	r2, [r2, #0]
 800d430:	3b04      	subs	r3, #4
 800d432:	2a00      	cmp	r2, #0
 800d434:	d1cc      	bne.n	800d3d0 <quorem+0x9c>
 800d436:	3c01      	subs	r4, #1
 800d438:	e7c7      	b.n	800d3ca <quorem+0x96>
 800d43a:	6812      	ldr	r2, [r2, #0]
 800d43c:	3b04      	subs	r3, #4
 800d43e:	2a00      	cmp	r2, #0
 800d440:	d1f0      	bne.n	800d424 <quorem+0xf0>
 800d442:	3c01      	subs	r4, #1
 800d444:	e7eb      	b.n	800d41e <quorem+0xea>
 800d446:	2000      	movs	r0, #0
 800d448:	e7ee      	b.n	800d428 <quorem+0xf4>
 800d44a:	0000      	movs	r0, r0
 800d44c:	0000      	movs	r0, r0
	...

0800d450 <_dtoa_r>:
 800d450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d454:	ed2d 8b04 	vpush	{d8-d9}
 800d458:	ec57 6b10 	vmov	r6, r7, d0
 800d45c:	b093      	sub	sp, #76	; 0x4c
 800d45e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d460:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d464:	9106      	str	r1, [sp, #24]
 800d466:	ee10 aa10 	vmov	sl, s0
 800d46a:	4604      	mov	r4, r0
 800d46c:	9209      	str	r2, [sp, #36]	; 0x24
 800d46e:	930c      	str	r3, [sp, #48]	; 0x30
 800d470:	46bb      	mov	fp, r7
 800d472:	b975      	cbnz	r5, 800d492 <_dtoa_r+0x42>
 800d474:	2010      	movs	r0, #16
 800d476:	f7ff f97f 	bl	800c778 <malloc>
 800d47a:	4602      	mov	r2, r0
 800d47c:	6260      	str	r0, [r4, #36]	; 0x24
 800d47e:	b920      	cbnz	r0, 800d48a <_dtoa_r+0x3a>
 800d480:	4ba7      	ldr	r3, [pc, #668]	; (800d720 <_dtoa_r+0x2d0>)
 800d482:	21ea      	movs	r1, #234	; 0xea
 800d484:	48a7      	ldr	r0, [pc, #668]	; (800d724 <_dtoa_r+0x2d4>)
 800d486:	f001 f97b 	bl	800e780 <__assert_func>
 800d48a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d48e:	6005      	str	r5, [r0, #0]
 800d490:	60c5      	str	r5, [r0, #12]
 800d492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d494:	6819      	ldr	r1, [r3, #0]
 800d496:	b151      	cbz	r1, 800d4ae <_dtoa_r+0x5e>
 800d498:	685a      	ldr	r2, [r3, #4]
 800d49a:	604a      	str	r2, [r1, #4]
 800d49c:	2301      	movs	r3, #1
 800d49e:	4093      	lsls	r3, r2
 800d4a0:	608b      	str	r3, [r1, #8]
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f000 fe12 	bl	800e0cc <_Bfree>
 800d4a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	601a      	str	r2, [r3, #0]
 800d4ae:	1e3b      	subs	r3, r7, #0
 800d4b0:	bfaa      	itet	ge
 800d4b2:	2300      	movge	r3, #0
 800d4b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d4b8:	f8c8 3000 	strge.w	r3, [r8]
 800d4bc:	4b9a      	ldr	r3, [pc, #616]	; (800d728 <_dtoa_r+0x2d8>)
 800d4be:	bfbc      	itt	lt
 800d4c0:	2201      	movlt	r2, #1
 800d4c2:	f8c8 2000 	strlt.w	r2, [r8]
 800d4c6:	ea33 030b 	bics.w	r3, r3, fp
 800d4ca:	d11b      	bne.n	800d504 <_dtoa_r+0xb4>
 800d4cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800d4d2:	6013      	str	r3, [r2, #0]
 800d4d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4d8:	4333      	orrs	r3, r6
 800d4da:	f000 8592 	beq.w	800e002 <_dtoa_r+0xbb2>
 800d4de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4e0:	b963      	cbnz	r3, 800d4fc <_dtoa_r+0xac>
 800d4e2:	4b92      	ldr	r3, [pc, #584]	; (800d72c <_dtoa_r+0x2dc>)
 800d4e4:	e022      	b.n	800d52c <_dtoa_r+0xdc>
 800d4e6:	4b92      	ldr	r3, [pc, #584]	; (800d730 <_dtoa_r+0x2e0>)
 800d4e8:	9301      	str	r3, [sp, #4]
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d4ee:	6013      	str	r3, [r2, #0]
 800d4f0:	9801      	ldr	r0, [sp, #4]
 800d4f2:	b013      	add	sp, #76	; 0x4c
 800d4f4:	ecbd 8b04 	vpop	{d8-d9}
 800d4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fc:	4b8b      	ldr	r3, [pc, #556]	; (800d72c <_dtoa_r+0x2dc>)
 800d4fe:	9301      	str	r3, [sp, #4]
 800d500:	3303      	adds	r3, #3
 800d502:	e7f3      	b.n	800d4ec <_dtoa_r+0x9c>
 800d504:	2200      	movs	r2, #0
 800d506:	2300      	movs	r3, #0
 800d508:	4650      	mov	r0, sl
 800d50a:	4659      	mov	r1, fp
 800d50c:	f7f3 fae4 	bl	8000ad8 <__aeabi_dcmpeq>
 800d510:	ec4b ab19 	vmov	d9, sl, fp
 800d514:	4680      	mov	r8, r0
 800d516:	b158      	cbz	r0, 800d530 <_dtoa_r+0xe0>
 800d518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d51a:	2301      	movs	r3, #1
 800d51c:	6013      	str	r3, [r2, #0]
 800d51e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d520:	2b00      	cmp	r3, #0
 800d522:	f000 856b 	beq.w	800dffc <_dtoa_r+0xbac>
 800d526:	4883      	ldr	r0, [pc, #524]	; (800d734 <_dtoa_r+0x2e4>)
 800d528:	6018      	str	r0, [r3, #0]
 800d52a:	1e43      	subs	r3, r0, #1
 800d52c:	9301      	str	r3, [sp, #4]
 800d52e:	e7df      	b.n	800d4f0 <_dtoa_r+0xa0>
 800d530:	ec4b ab10 	vmov	d0, sl, fp
 800d534:	aa10      	add	r2, sp, #64	; 0x40
 800d536:	a911      	add	r1, sp, #68	; 0x44
 800d538:	4620      	mov	r0, r4
 800d53a:	f001 f8af 	bl	800e69c <__d2b>
 800d53e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d542:	ee08 0a10 	vmov	s16, r0
 800d546:	2d00      	cmp	r5, #0
 800d548:	f000 8084 	beq.w	800d654 <_dtoa_r+0x204>
 800d54c:	ee19 3a90 	vmov	r3, s19
 800d550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d554:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d558:	4656      	mov	r6, sl
 800d55a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d55e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d562:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d566:	4b74      	ldr	r3, [pc, #464]	; (800d738 <_dtoa_r+0x2e8>)
 800d568:	2200      	movs	r2, #0
 800d56a:	4630      	mov	r0, r6
 800d56c:	4639      	mov	r1, r7
 800d56e:	f7f2 fe93 	bl	8000298 <__aeabi_dsub>
 800d572:	a365      	add	r3, pc, #404	; (adr r3, 800d708 <_dtoa_r+0x2b8>)
 800d574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d578:	f7f3 f846 	bl	8000608 <__aeabi_dmul>
 800d57c:	a364      	add	r3, pc, #400	; (adr r3, 800d710 <_dtoa_r+0x2c0>)
 800d57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d582:	f7f2 fe8b 	bl	800029c <__adddf3>
 800d586:	4606      	mov	r6, r0
 800d588:	4628      	mov	r0, r5
 800d58a:	460f      	mov	r7, r1
 800d58c:	f7f2 ffd2 	bl	8000534 <__aeabi_i2d>
 800d590:	a361      	add	r3, pc, #388	; (adr r3, 800d718 <_dtoa_r+0x2c8>)
 800d592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d596:	f7f3 f837 	bl	8000608 <__aeabi_dmul>
 800d59a:	4602      	mov	r2, r0
 800d59c:	460b      	mov	r3, r1
 800d59e:	4630      	mov	r0, r6
 800d5a0:	4639      	mov	r1, r7
 800d5a2:	f7f2 fe7b 	bl	800029c <__adddf3>
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	460f      	mov	r7, r1
 800d5aa:	f7f3 fadd 	bl	8000b68 <__aeabi_d2iz>
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	9000      	str	r0, [sp, #0]
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	4639      	mov	r1, r7
 800d5b8:	f7f3 fa98 	bl	8000aec <__aeabi_dcmplt>
 800d5bc:	b150      	cbz	r0, 800d5d4 <_dtoa_r+0x184>
 800d5be:	9800      	ldr	r0, [sp, #0]
 800d5c0:	f7f2 ffb8 	bl	8000534 <__aeabi_i2d>
 800d5c4:	4632      	mov	r2, r6
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	f7f3 fa86 	bl	8000ad8 <__aeabi_dcmpeq>
 800d5cc:	b910      	cbnz	r0, 800d5d4 <_dtoa_r+0x184>
 800d5ce:	9b00      	ldr	r3, [sp, #0]
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	9b00      	ldr	r3, [sp, #0]
 800d5d6:	2b16      	cmp	r3, #22
 800d5d8:	d85a      	bhi.n	800d690 <_dtoa_r+0x240>
 800d5da:	9a00      	ldr	r2, [sp, #0]
 800d5dc:	4b57      	ldr	r3, [pc, #348]	; (800d73c <_dtoa_r+0x2ec>)
 800d5de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e6:	ec51 0b19 	vmov	r0, r1, d9
 800d5ea:	f7f3 fa7f 	bl	8000aec <__aeabi_dcmplt>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d050      	beq.n	800d694 <_dtoa_r+0x244>
 800d5f2:	9b00      	ldr	r3, [sp, #0]
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5fe:	1b5d      	subs	r5, r3, r5
 800d600:	1e6b      	subs	r3, r5, #1
 800d602:	9305      	str	r3, [sp, #20]
 800d604:	bf45      	ittet	mi
 800d606:	f1c5 0301 	rsbmi	r3, r5, #1
 800d60a:	9304      	strmi	r3, [sp, #16]
 800d60c:	2300      	movpl	r3, #0
 800d60e:	2300      	movmi	r3, #0
 800d610:	bf4c      	ite	mi
 800d612:	9305      	strmi	r3, [sp, #20]
 800d614:	9304      	strpl	r3, [sp, #16]
 800d616:	9b00      	ldr	r3, [sp, #0]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	db3d      	blt.n	800d698 <_dtoa_r+0x248>
 800d61c:	9b05      	ldr	r3, [sp, #20]
 800d61e:	9a00      	ldr	r2, [sp, #0]
 800d620:	920a      	str	r2, [sp, #40]	; 0x28
 800d622:	4413      	add	r3, r2
 800d624:	9305      	str	r3, [sp, #20]
 800d626:	2300      	movs	r3, #0
 800d628:	9307      	str	r3, [sp, #28]
 800d62a:	9b06      	ldr	r3, [sp, #24]
 800d62c:	2b09      	cmp	r3, #9
 800d62e:	f200 8089 	bhi.w	800d744 <_dtoa_r+0x2f4>
 800d632:	2b05      	cmp	r3, #5
 800d634:	bfc4      	itt	gt
 800d636:	3b04      	subgt	r3, #4
 800d638:	9306      	strgt	r3, [sp, #24]
 800d63a:	9b06      	ldr	r3, [sp, #24]
 800d63c:	f1a3 0302 	sub.w	r3, r3, #2
 800d640:	bfcc      	ite	gt
 800d642:	2500      	movgt	r5, #0
 800d644:	2501      	movle	r5, #1
 800d646:	2b03      	cmp	r3, #3
 800d648:	f200 8087 	bhi.w	800d75a <_dtoa_r+0x30a>
 800d64c:	e8df f003 	tbb	[pc, r3]
 800d650:	59383a2d 	.word	0x59383a2d
 800d654:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d658:	441d      	add	r5, r3
 800d65a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d65e:	2b20      	cmp	r3, #32
 800d660:	bfc1      	itttt	gt
 800d662:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d666:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d66a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d66e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d672:	bfda      	itte	le
 800d674:	f1c3 0320 	rsble	r3, r3, #32
 800d678:	fa06 f003 	lslle.w	r0, r6, r3
 800d67c:	4318      	orrgt	r0, r3
 800d67e:	f7f2 ff49 	bl	8000514 <__aeabi_ui2d>
 800d682:	2301      	movs	r3, #1
 800d684:	4606      	mov	r6, r0
 800d686:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d68a:	3d01      	subs	r5, #1
 800d68c:	930e      	str	r3, [sp, #56]	; 0x38
 800d68e:	e76a      	b.n	800d566 <_dtoa_r+0x116>
 800d690:	2301      	movs	r3, #1
 800d692:	e7b2      	b.n	800d5fa <_dtoa_r+0x1aa>
 800d694:	900b      	str	r0, [sp, #44]	; 0x2c
 800d696:	e7b1      	b.n	800d5fc <_dtoa_r+0x1ac>
 800d698:	9b04      	ldr	r3, [sp, #16]
 800d69a:	9a00      	ldr	r2, [sp, #0]
 800d69c:	1a9b      	subs	r3, r3, r2
 800d69e:	9304      	str	r3, [sp, #16]
 800d6a0:	4253      	negs	r3, r2
 800d6a2:	9307      	str	r3, [sp, #28]
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d6a8:	e7bf      	b.n	800d62a <_dtoa_r+0x1da>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	9308      	str	r3, [sp, #32]
 800d6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	dc55      	bgt.n	800d760 <_dtoa_r+0x310>
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d6be:	e00c      	b.n	800d6da <_dtoa_r+0x28a>
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	e7f3      	b.n	800d6ac <_dtoa_r+0x25c>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6c8:	9308      	str	r3, [sp, #32]
 800d6ca:	9b00      	ldr	r3, [sp, #0]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	9302      	str	r3, [sp, #8]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	9303      	str	r3, [sp, #12]
 800d6d6:	bfb8      	it	lt
 800d6d8:	2301      	movlt	r3, #1
 800d6da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d6dc:	2200      	movs	r2, #0
 800d6de:	6042      	str	r2, [r0, #4]
 800d6e0:	2204      	movs	r2, #4
 800d6e2:	f102 0614 	add.w	r6, r2, #20
 800d6e6:	429e      	cmp	r6, r3
 800d6e8:	6841      	ldr	r1, [r0, #4]
 800d6ea:	d93d      	bls.n	800d768 <_dtoa_r+0x318>
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f000 fcad 	bl	800e04c <_Balloc>
 800d6f2:	9001      	str	r0, [sp, #4]
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d13b      	bne.n	800d770 <_dtoa_r+0x320>
 800d6f8:	4b11      	ldr	r3, [pc, #68]	; (800d740 <_dtoa_r+0x2f0>)
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d700:	e6c0      	b.n	800d484 <_dtoa_r+0x34>
 800d702:	2301      	movs	r3, #1
 800d704:	e7df      	b.n	800d6c6 <_dtoa_r+0x276>
 800d706:	bf00      	nop
 800d708:	636f4361 	.word	0x636f4361
 800d70c:	3fd287a7 	.word	0x3fd287a7
 800d710:	8b60c8b3 	.word	0x8b60c8b3
 800d714:	3fc68a28 	.word	0x3fc68a28
 800d718:	509f79fb 	.word	0x509f79fb
 800d71c:	3fd34413 	.word	0x3fd34413
 800d720:	0800f2fd 	.word	0x0800f2fd
 800d724:	0800f314 	.word	0x0800f314
 800d728:	7ff00000 	.word	0x7ff00000
 800d72c:	0800f2f9 	.word	0x0800f2f9
 800d730:	0800f2f0 	.word	0x0800f2f0
 800d734:	0800f2cd 	.word	0x0800f2cd
 800d738:	3ff80000 	.word	0x3ff80000
 800d73c:	0800f408 	.word	0x0800f408
 800d740:	0800f36f 	.word	0x0800f36f
 800d744:	2501      	movs	r5, #1
 800d746:	2300      	movs	r3, #0
 800d748:	9306      	str	r3, [sp, #24]
 800d74a:	9508      	str	r5, [sp, #32]
 800d74c:	f04f 33ff 	mov.w	r3, #4294967295
 800d750:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d754:	2200      	movs	r2, #0
 800d756:	2312      	movs	r3, #18
 800d758:	e7b0      	b.n	800d6bc <_dtoa_r+0x26c>
 800d75a:	2301      	movs	r3, #1
 800d75c:	9308      	str	r3, [sp, #32]
 800d75e:	e7f5      	b.n	800d74c <_dtoa_r+0x2fc>
 800d760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d762:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d766:	e7b8      	b.n	800d6da <_dtoa_r+0x28a>
 800d768:	3101      	adds	r1, #1
 800d76a:	6041      	str	r1, [r0, #4]
 800d76c:	0052      	lsls	r2, r2, #1
 800d76e:	e7b8      	b.n	800d6e2 <_dtoa_r+0x292>
 800d770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d772:	9a01      	ldr	r2, [sp, #4]
 800d774:	601a      	str	r2, [r3, #0]
 800d776:	9b03      	ldr	r3, [sp, #12]
 800d778:	2b0e      	cmp	r3, #14
 800d77a:	f200 809d 	bhi.w	800d8b8 <_dtoa_r+0x468>
 800d77e:	2d00      	cmp	r5, #0
 800d780:	f000 809a 	beq.w	800d8b8 <_dtoa_r+0x468>
 800d784:	9b00      	ldr	r3, [sp, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	dd32      	ble.n	800d7f0 <_dtoa_r+0x3a0>
 800d78a:	4ab7      	ldr	r2, [pc, #732]	; (800da68 <_dtoa_r+0x618>)
 800d78c:	f003 030f 	and.w	r3, r3, #15
 800d790:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d794:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d798:	9b00      	ldr	r3, [sp, #0]
 800d79a:	05d8      	lsls	r0, r3, #23
 800d79c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d7a0:	d516      	bpl.n	800d7d0 <_dtoa_r+0x380>
 800d7a2:	4bb2      	ldr	r3, [pc, #712]	; (800da6c <_dtoa_r+0x61c>)
 800d7a4:	ec51 0b19 	vmov	r0, r1, d9
 800d7a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7ac:	f7f3 f856 	bl	800085c <__aeabi_ddiv>
 800d7b0:	f007 070f 	and.w	r7, r7, #15
 800d7b4:	4682      	mov	sl, r0
 800d7b6:	468b      	mov	fp, r1
 800d7b8:	2503      	movs	r5, #3
 800d7ba:	4eac      	ldr	r6, [pc, #688]	; (800da6c <_dtoa_r+0x61c>)
 800d7bc:	b957      	cbnz	r7, 800d7d4 <_dtoa_r+0x384>
 800d7be:	4642      	mov	r2, r8
 800d7c0:	464b      	mov	r3, r9
 800d7c2:	4650      	mov	r0, sl
 800d7c4:	4659      	mov	r1, fp
 800d7c6:	f7f3 f849 	bl	800085c <__aeabi_ddiv>
 800d7ca:	4682      	mov	sl, r0
 800d7cc:	468b      	mov	fp, r1
 800d7ce:	e028      	b.n	800d822 <_dtoa_r+0x3d2>
 800d7d0:	2502      	movs	r5, #2
 800d7d2:	e7f2      	b.n	800d7ba <_dtoa_r+0x36a>
 800d7d4:	07f9      	lsls	r1, r7, #31
 800d7d6:	d508      	bpl.n	800d7ea <_dtoa_r+0x39a>
 800d7d8:	4640      	mov	r0, r8
 800d7da:	4649      	mov	r1, r9
 800d7dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d7e0:	f7f2 ff12 	bl	8000608 <__aeabi_dmul>
 800d7e4:	3501      	adds	r5, #1
 800d7e6:	4680      	mov	r8, r0
 800d7e8:	4689      	mov	r9, r1
 800d7ea:	107f      	asrs	r7, r7, #1
 800d7ec:	3608      	adds	r6, #8
 800d7ee:	e7e5      	b.n	800d7bc <_dtoa_r+0x36c>
 800d7f0:	f000 809b 	beq.w	800d92a <_dtoa_r+0x4da>
 800d7f4:	9b00      	ldr	r3, [sp, #0]
 800d7f6:	4f9d      	ldr	r7, [pc, #628]	; (800da6c <_dtoa_r+0x61c>)
 800d7f8:	425e      	negs	r6, r3
 800d7fa:	4b9b      	ldr	r3, [pc, #620]	; (800da68 <_dtoa_r+0x618>)
 800d7fc:	f006 020f 	and.w	r2, r6, #15
 800d800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d808:	ec51 0b19 	vmov	r0, r1, d9
 800d80c:	f7f2 fefc 	bl	8000608 <__aeabi_dmul>
 800d810:	1136      	asrs	r6, r6, #4
 800d812:	4682      	mov	sl, r0
 800d814:	468b      	mov	fp, r1
 800d816:	2300      	movs	r3, #0
 800d818:	2502      	movs	r5, #2
 800d81a:	2e00      	cmp	r6, #0
 800d81c:	d17a      	bne.n	800d914 <_dtoa_r+0x4c4>
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d1d3      	bne.n	800d7ca <_dtoa_r+0x37a>
 800d822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 8082 	beq.w	800d92e <_dtoa_r+0x4de>
 800d82a:	4b91      	ldr	r3, [pc, #580]	; (800da70 <_dtoa_r+0x620>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	4650      	mov	r0, sl
 800d830:	4659      	mov	r1, fp
 800d832:	f7f3 f95b 	bl	8000aec <__aeabi_dcmplt>
 800d836:	2800      	cmp	r0, #0
 800d838:	d079      	beq.n	800d92e <_dtoa_r+0x4de>
 800d83a:	9b03      	ldr	r3, [sp, #12]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d076      	beq.n	800d92e <_dtoa_r+0x4de>
 800d840:	9b02      	ldr	r3, [sp, #8]
 800d842:	2b00      	cmp	r3, #0
 800d844:	dd36      	ble.n	800d8b4 <_dtoa_r+0x464>
 800d846:	9b00      	ldr	r3, [sp, #0]
 800d848:	4650      	mov	r0, sl
 800d84a:	4659      	mov	r1, fp
 800d84c:	1e5f      	subs	r7, r3, #1
 800d84e:	2200      	movs	r2, #0
 800d850:	4b88      	ldr	r3, [pc, #544]	; (800da74 <_dtoa_r+0x624>)
 800d852:	f7f2 fed9 	bl	8000608 <__aeabi_dmul>
 800d856:	9e02      	ldr	r6, [sp, #8]
 800d858:	4682      	mov	sl, r0
 800d85a:	468b      	mov	fp, r1
 800d85c:	3501      	adds	r5, #1
 800d85e:	4628      	mov	r0, r5
 800d860:	f7f2 fe68 	bl	8000534 <__aeabi_i2d>
 800d864:	4652      	mov	r2, sl
 800d866:	465b      	mov	r3, fp
 800d868:	f7f2 fece 	bl	8000608 <__aeabi_dmul>
 800d86c:	4b82      	ldr	r3, [pc, #520]	; (800da78 <_dtoa_r+0x628>)
 800d86e:	2200      	movs	r2, #0
 800d870:	f7f2 fd14 	bl	800029c <__adddf3>
 800d874:	46d0      	mov	r8, sl
 800d876:	46d9      	mov	r9, fp
 800d878:	4682      	mov	sl, r0
 800d87a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d87e:	2e00      	cmp	r6, #0
 800d880:	d158      	bne.n	800d934 <_dtoa_r+0x4e4>
 800d882:	4b7e      	ldr	r3, [pc, #504]	; (800da7c <_dtoa_r+0x62c>)
 800d884:	2200      	movs	r2, #0
 800d886:	4640      	mov	r0, r8
 800d888:	4649      	mov	r1, r9
 800d88a:	f7f2 fd05 	bl	8000298 <__aeabi_dsub>
 800d88e:	4652      	mov	r2, sl
 800d890:	465b      	mov	r3, fp
 800d892:	4680      	mov	r8, r0
 800d894:	4689      	mov	r9, r1
 800d896:	f7f3 f947 	bl	8000b28 <__aeabi_dcmpgt>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	f040 8295 	bne.w	800ddca <_dtoa_r+0x97a>
 800d8a0:	4652      	mov	r2, sl
 800d8a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d8a6:	4640      	mov	r0, r8
 800d8a8:	4649      	mov	r1, r9
 800d8aa:	f7f3 f91f 	bl	8000aec <__aeabi_dcmplt>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	f040 8289 	bne.w	800ddc6 <_dtoa_r+0x976>
 800d8b4:	ec5b ab19 	vmov	sl, fp, d9
 800d8b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	f2c0 8148 	blt.w	800db50 <_dtoa_r+0x700>
 800d8c0:	9a00      	ldr	r2, [sp, #0]
 800d8c2:	2a0e      	cmp	r2, #14
 800d8c4:	f300 8144 	bgt.w	800db50 <_dtoa_r+0x700>
 800d8c8:	4b67      	ldr	r3, [pc, #412]	; (800da68 <_dtoa_r+0x618>)
 800d8ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f280 80d5 	bge.w	800da84 <_dtoa_r+0x634>
 800d8da:	9b03      	ldr	r3, [sp, #12]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f300 80d1 	bgt.w	800da84 <_dtoa_r+0x634>
 800d8e2:	f040 826f 	bne.w	800ddc4 <_dtoa_r+0x974>
 800d8e6:	4b65      	ldr	r3, [pc, #404]	; (800da7c <_dtoa_r+0x62c>)
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	4640      	mov	r0, r8
 800d8ec:	4649      	mov	r1, r9
 800d8ee:	f7f2 fe8b 	bl	8000608 <__aeabi_dmul>
 800d8f2:	4652      	mov	r2, sl
 800d8f4:	465b      	mov	r3, fp
 800d8f6:	f7f3 f90d 	bl	8000b14 <__aeabi_dcmpge>
 800d8fa:	9e03      	ldr	r6, [sp, #12]
 800d8fc:	4637      	mov	r7, r6
 800d8fe:	2800      	cmp	r0, #0
 800d900:	f040 8245 	bne.w	800dd8e <_dtoa_r+0x93e>
 800d904:	9d01      	ldr	r5, [sp, #4]
 800d906:	2331      	movs	r3, #49	; 0x31
 800d908:	f805 3b01 	strb.w	r3, [r5], #1
 800d90c:	9b00      	ldr	r3, [sp, #0]
 800d90e:	3301      	adds	r3, #1
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	e240      	b.n	800dd96 <_dtoa_r+0x946>
 800d914:	07f2      	lsls	r2, r6, #31
 800d916:	d505      	bpl.n	800d924 <_dtoa_r+0x4d4>
 800d918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d91c:	f7f2 fe74 	bl	8000608 <__aeabi_dmul>
 800d920:	3501      	adds	r5, #1
 800d922:	2301      	movs	r3, #1
 800d924:	1076      	asrs	r6, r6, #1
 800d926:	3708      	adds	r7, #8
 800d928:	e777      	b.n	800d81a <_dtoa_r+0x3ca>
 800d92a:	2502      	movs	r5, #2
 800d92c:	e779      	b.n	800d822 <_dtoa_r+0x3d2>
 800d92e:	9f00      	ldr	r7, [sp, #0]
 800d930:	9e03      	ldr	r6, [sp, #12]
 800d932:	e794      	b.n	800d85e <_dtoa_r+0x40e>
 800d934:	9901      	ldr	r1, [sp, #4]
 800d936:	4b4c      	ldr	r3, [pc, #304]	; (800da68 <_dtoa_r+0x618>)
 800d938:	4431      	add	r1, r6
 800d93a:	910d      	str	r1, [sp, #52]	; 0x34
 800d93c:	9908      	ldr	r1, [sp, #32]
 800d93e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d942:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d946:	2900      	cmp	r1, #0
 800d948:	d043      	beq.n	800d9d2 <_dtoa_r+0x582>
 800d94a:	494d      	ldr	r1, [pc, #308]	; (800da80 <_dtoa_r+0x630>)
 800d94c:	2000      	movs	r0, #0
 800d94e:	f7f2 ff85 	bl	800085c <__aeabi_ddiv>
 800d952:	4652      	mov	r2, sl
 800d954:	465b      	mov	r3, fp
 800d956:	f7f2 fc9f 	bl	8000298 <__aeabi_dsub>
 800d95a:	9d01      	ldr	r5, [sp, #4]
 800d95c:	4682      	mov	sl, r0
 800d95e:	468b      	mov	fp, r1
 800d960:	4649      	mov	r1, r9
 800d962:	4640      	mov	r0, r8
 800d964:	f7f3 f900 	bl	8000b68 <__aeabi_d2iz>
 800d968:	4606      	mov	r6, r0
 800d96a:	f7f2 fde3 	bl	8000534 <__aeabi_i2d>
 800d96e:	4602      	mov	r2, r0
 800d970:	460b      	mov	r3, r1
 800d972:	4640      	mov	r0, r8
 800d974:	4649      	mov	r1, r9
 800d976:	f7f2 fc8f 	bl	8000298 <__aeabi_dsub>
 800d97a:	3630      	adds	r6, #48	; 0x30
 800d97c:	f805 6b01 	strb.w	r6, [r5], #1
 800d980:	4652      	mov	r2, sl
 800d982:	465b      	mov	r3, fp
 800d984:	4680      	mov	r8, r0
 800d986:	4689      	mov	r9, r1
 800d988:	f7f3 f8b0 	bl	8000aec <__aeabi_dcmplt>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d163      	bne.n	800da58 <_dtoa_r+0x608>
 800d990:	4642      	mov	r2, r8
 800d992:	464b      	mov	r3, r9
 800d994:	4936      	ldr	r1, [pc, #216]	; (800da70 <_dtoa_r+0x620>)
 800d996:	2000      	movs	r0, #0
 800d998:	f7f2 fc7e 	bl	8000298 <__aeabi_dsub>
 800d99c:	4652      	mov	r2, sl
 800d99e:	465b      	mov	r3, fp
 800d9a0:	f7f3 f8a4 	bl	8000aec <__aeabi_dcmplt>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	f040 80b5 	bne.w	800db14 <_dtoa_r+0x6c4>
 800d9aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9ac:	429d      	cmp	r5, r3
 800d9ae:	d081      	beq.n	800d8b4 <_dtoa_r+0x464>
 800d9b0:	4b30      	ldr	r3, [pc, #192]	; (800da74 <_dtoa_r+0x624>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	4650      	mov	r0, sl
 800d9b6:	4659      	mov	r1, fp
 800d9b8:	f7f2 fe26 	bl	8000608 <__aeabi_dmul>
 800d9bc:	4b2d      	ldr	r3, [pc, #180]	; (800da74 <_dtoa_r+0x624>)
 800d9be:	4682      	mov	sl, r0
 800d9c0:	468b      	mov	fp, r1
 800d9c2:	4640      	mov	r0, r8
 800d9c4:	4649      	mov	r1, r9
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f7f2 fe1e 	bl	8000608 <__aeabi_dmul>
 800d9cc:	4680      	mov	r8, r0
 800d9ce:	4689      	mov	r9, r1
 800d9d0:	e7c6      	b.n	800d960 <_dtoa_r+0x510>
 800d9d2:	4650      	mov	r0, sl
 800d9d4:	4659      	mov	r1, fp
 800d9d6:	f7f2 fe17 	bl	8000608 <__aeabi_dmul>
 800d9da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9dc:	9d01      	ldr	r5, [sp, #4]
 800d9de:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9e0:	4682      	mov	sl, r0
 800d9e2:	468b      	mov	fp, r1
 800d9e4:	4649      	mov	r1, r9
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	f7f3 f8be 	bl	8000b68 <__aeabi_d2iz>
 800d9ec:	4606      	mov	r6, r0
 800d9ee:	f7f2 fda1 	bl	8000534 <__aeabi_i2d>
 800d9f2:	3630      	adds	r6, #48	; 0x30
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4640      	mov	r0, r8
 800d9fa:	4649      	mov	r1, r9
 800d9fc:	f7f2 fc4c 	bl	8000298 <__aeabi_dsub>
 800da00:	f805 6b01 	strb.w	r6, [r5], #1
 800da04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da06:	429d      	cmp	r5, r3
 800da08:	4680      	mov	r8, r0
 800da0a:	4689      	mov	r9, r1
 800da0c:	f04f 0200 	mov.w	r2, #0
 800da10:	d124      	bne.n	800da5c <_dtoa_r+0x60c>
 800da12:	4b1b      	ldr	r3, [pc, #108]	; (800da80 <_dtoa_r+0x630>)
 800da14:	4650      	mov	r0, sl
 800da16:	4659      	mov	r1, fp
 800da18:	f7f2 fc40 	bl	800029c <__adddf3>
 800da1c:	4602      	mov	r2, r0
 800da1e:	460b      	mov	r3, r1
 800da20:	4640      	mov	r0, r8
 800da22:	4649      	mov	r1, r9
 800da24:	f7f3 f880 	bl	8000b28 <__aeabi_dcmpgt>
 800da28:	2800      	cmp	r0, #0
 800da2a:	d173      	bne.n	800db14 <_dtoa_r+0x6c4>
 800da2c:	4652      	mov	r2, sl
 800da2e:	465b      	mov	r3, fp
 800da30:	4913      	ldr	r1, [pc, #76]	; (800da80 <_dtoa_r+0x630>)
 800da32:	2000      	movs	r0, #0
 800da34:	f7f2 fc30 	bl	8000298 <__aeabi_dsub>
 800da38:	4602      	mov	r2, r0
 800da3a:	460b      	mov	r3, r1
 800da3c:	4640      	mov	r0, r8
 800da3e:	4649      	mov	r1, r9
 800da40:	f7f3 f854 	bl	8000aec <__aeabi_dcmplt>
 800da44:	2800      	cmp	r0, #0
 800da46:	f43f af35 	beq.w	800d8b4 <_dtoa_r+0x464>
 800da4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800da4c:	1e6b      	subs	r3, r5, #1
 800da4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800da50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da54:	2b30      	cmp	r3, #48	; 0x30
 800da56:	d0f8      	beq.n	800da4a <_dtoa_r+0x5fa>
 800da58:	9700      	str	r7, [sp, #0]
 800da5a:	e049      	b.n	800daf0 <_dtoa_r+0x6a0>
 800da5c:	4b05      	ldr	r3, [pc, #20]	; (800da74 <_dtoa_r+0x624>)
 800da5e:	f7f2 fdd3 	bl	8000608 <__aeabi_dmul>
 800da62:	4680      	mov	r8, r0
 800da64:	4689      	mov	r9, r1
 800da66:	e7bd      	b.n	800d9e4 <_dtoa_r+0x594>
 800da68:	0800f408 	.word	0x0800f408
 800da6c:	0800f3e0 	.word	0x0800f3e0
 800da70:	3ff00000 	.word	0x3ff00000
 800da74:	40240000 	.word	0x40240000
 800da78:	401c0000 	.word	0x401c0000
 800da7c:	40140000 	.word	0x40140000
 800da80:	3fe00000 	.word	0x3fe00000
 800da84:	9d01      	ldr	r5, [sp, #4]
 800da86:	4656      	mov	r6, sl
 800da88:	465f      	mov	r7, fp
 800da8a:	4642      	mov	r2, r8
 800da8c:	464b      	mov	r3, r9
 800da8e:	4630      	mov	r0, r6
 800da90:	4639      	mov	r1, r7
 800da92:	f7f2 fee3 	bl	800085c <__aeabi_ddiv>
 800da96:	f7f3 f867 	bl	8000b68 <__aeabi_d2iz>
 800da9a:	4682      	mov	sl, r0
 800da9c:	f7f2 fd4a 	bl	8000534 <__aeabi_i2d>
 800daa0:	4642      	mov	r2, r8
 800daa2:	464b      	mov	r3, r9
 800daa4:	f7f2 fdb0 	bl	8000608 <__aeabi_dmul>
 800daa8:	4602      	mov	r2, r0
 800daaa:	460b      	mov	r3, r1
 800daac:	4630      	mov	r0, r6
 800daae:	4639      	mov	r1, r7
 800dab0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dab4:	f7f2 fbf0 	bl	8000298 <__aeabi_dsub>
 800dab8:	f805 6b01 	strb.w	r6, [r5], #1
 800dabc:	9e01      	ldr	r6, [sp, #4]
 800dabe:	9f03      	ldr	r7, [sp, #12]
 800dac0:	1bae      	subs	r6, r5, r6
 800dac2:	42b7      	cmp	r7, r6
 800dac4:	4602      	mov	r2, r0
 800dac6:	460b      	mov	r3, r1
 800dac8:	d135      	bne.n	800db36 <_dtoa_r+0x6e6>
 800daca:	f7f2 fbe7 	bl	800029c <__adddf3>
 800dace:	4642      	mov	r2, r8
 800dad0:	464b      	mov	r3, r9
 800dad2:	4606      	mov	r6, r0
 800dad4:	460f      	mov	r7, r1
 800dad6:	f7f3 f827 	bl	8000b28 <__aeabi_dcmpgt>
 800dada:	b9d0      	cbnz	r0, 800db12 <_dtoa_r+0x6c2>
 800dadc:	4642      	mov	r2, r8
 800dade:	464b      	mov	r3, r9
 800dae0:	4630      	mov	r0, r6
 800dae2:	4639      	mov	r1, r7
 800dae4:	f7f2 fff8 	bl	8000ad8 <__aeabi_dcmpeq>
 800dae8:	b110      	cbz	r0, 800daf0 <_dtoa_r+0x6a0>
 800daea:	f01a 0f01 	tst.w	sl, #1
 800daee:	d110      	bne.n	800db12 <_dtoa_r+0x6c2>
 800daf0:	4620      	mov	r0, r4
 800daf2:	ee18 1a10 	vmov	r1, s16
 800daf6:	f000 fae9 	bl	800e0cc <_Bfree>
 800dafa:	2300      	movs	r3, #0
 800dafc:	9800      	ldr	r0, [sp, #0]
 800dafe:	702b      	strb	r3, [r5, #0]
 800db00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db02:	3001      	adds	r0, #1
 800db04:	6018      	str	r0, [r3, #0]
 800db06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db08:	2b00      	cmp	r3, #0
 800db0a:	f43f acf1 	beq.w	800d4f0 <_dtoa_r+0xa0>
 800db0e:	601d      	str	r5, [r3, #0]
 800db10:	e4ee      	b.n	800d4f0 <_dtoa_r+0xa0>
 800db12:	9f00      	ldr	r7, [sp, #0]
 800db14:	462b      	mov	r3, r5
 800db16:	461d      	mov	r5, r3
 800db18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db1c:	2a39      	cmp	r2, #57	; 0x39
 800db1e:	d106      	bne.n	800db2e <_dtoa_r+0x6de>
 800db20:	9a01      	ldr	r2, [sp, #4]
 800db22:	429a      	cmp	r2, r3
 800db24:	d1f7      	bne.n	800db16 <_dtoa_r+0x6c6>
 800db26:	9901      	ldr	r1, [sp, #4]
 800db28:	2230      	movs	r2, #48	; 0x30
 800db2a:	3701      	adds	r7, #1
 800db2c:	700a      	strb	r2, [r1, #0]
 800db2e:	781a      	ldrb	r2, [r3, #0]
 800db30:	3201      	adds	r2, #1
 800db32:	701a      	strb	r2, [r3, #0]
 800db34:	e790      	b.n	800da58 <_dtoa_r+0x608>
 800db36:	4ba6      	ldr	r3, [pc, #664]	; (800ddd0 <_dtoa_r+0x980>)
 800db38:	2200      	movs	r2, #0
 800db3a:	f7f2 fd65 	bl	8000608 <__aeabi_dmul>
 800db3e:	2200      	movs	r2, #0
 800db40:	2300      	movs	r3, #0
 800db42:	4606      	mov	r6, r0
 800db44:	460f      	mov	r7, r1
 800db46:	f7f2 ffc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d09d      	beq.n	800da8a <_dtoa_r+0x63a>
 800db4e:	e7cf      	b.n	800daf0 <_dtoa_r+0x6a0>
 800db50:	9a08      	ldr	r2, [sp, #32]
 800db52:	2a00      	cmp	r2, #0
 800db54:	f000 80d7 	beq.w	800dd06 <_dtoa_r+0x8b6>
 800db58:	9a06      	ldr	r2, [sp, #24]
 800db5a:	2a01      	cmp	r2, #1
 800db5c:	f300 80ba 	bgt.w	800dcd4 <_dtoa_r+0x884>
 800db60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db62:	2a00      	cmp	r2, #0
 800db64:	f000 80b2 	beq.w	800dccc <_dtoa_r+0x87c>
 800db68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800db6c:	9e07      	ldr	r6, [sp, #28]
 800db6e:	9d04      	ldr	r5, [sp, #16]
 800db70:	9a04      	ldr	r2, [sp, #16]
 800db72:	441a      	add	r2, r3
 800db74:	9204      	str	r2, [sp, #16]
 800db76:	9a05      	ldr	r2, [sp, #20]
 800db78:	2101      	movs	r1, #1
 800db7a:	441a      	add	r2, r3
 800db7c:	4620      	mov	r0, r4
 800db7e:	9205      	str	r2, [sp, #20]
 800db80:	f000 fb5c 	bl	800e23c <__i2b>
 800db84:	4607      	mov	r7, r0
 800db86:	2d00      	cmp	r5, #0
 800db88:	dd0c      	ble.n	800dba4 <_dtoa_r+0x754>
 800db8a:	9b05      	ldr	r3, [sp, #20]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	dd09      	ble.n	800dba4 <_dtoa_r+0x754>
 800db90:	42ab      	cmp	r3, r5
 800db92:	9a04      	ldr	r2, [sp, #16]
 800db94:	bfa8      	it	ge
 800db96:	462b      	movge	r3, r5
 800db98:	1ad2      	subs	r2, r2, r3
 800db9a:	9204      	str	r2, [sp, #16]
 800db9c:	9a05      	ldr	r2, [sp, #20]
 800db9e:	1aed      	subs	r5, r5, r3
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	9305      	str	r3, [sp, #20]
 800dba4:	9b07      	ldr	r3, [sp, #28]
 800dba6:	b31b      	cbz	r3, 800dbf0 <_dtoa_r+0x7a0>
 800dba8:	9b08      	ldr	r3, [sp, #32]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	f000 80af 	beq.w	800dd0e <_dtoa_r+0x8be>
 800dbb0:	2e00      	cmp	r6, #0
 800dbb2:	dd13      	ble.n	800dbdc <_dtoa_r+0x78c>
 800dbb4:	4639      	mov	r1, r7
 800dbb6:	4632      	mov	r2, r6
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f000 fbff 	bl	800e3bc <__pow5mult>
 800dbbe:	ee18 2a10 	vmov	r2, s16
 800dbc2:	4601      	mov	r1, r0
 800dbc4:	4607      	mov	r7, r0
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f000 fb4e 	bl	800e268 <__multiply>
 800dbcc:	ee18 1a10 	vmov	r1, s16
 800dbd0:	4680      	mov	r8, r0
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f000 fa7a 	bl	800e0cc <_Bfree>
 800dbd8:	ee08 8a10 	vmov	s16, r8
 800dbdc:	9b07      	ldr	r3, [sp, #28]
 800dbde:	1b9a      	subs	r2, r3, r6
 800dbe0:	d006      	beq.n	800dbf0 <_dtoa_r+0x7a0>
 800dbe2:	ee18 1a10 	vmov	r1, s16
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	f000 fbe8 	bl	800e3bc <__pow5mult>
 800dbec:	ee08 0a10 	vmov	s16, r0
 800dbf0:	2101      	movs	r1, #1
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f000 fb22 	bl	800e23c <__i2b>
 800dbf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	f340 8088 	ble.w	800dd12 <_dtoa_r+0x8c2>
 800dc02:	461a      	mov	r2, r3
 800dc04:	4601      	mov	r1, r0
 800dc06:	4620      	mov	r0, r4
 800dc08:	f000 fbd8 	bl	800e3bc <__pow5mult>
 800dc0c:	9b06      	ldr	r3, [sp, #24]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	4606      	mov	r6, r0
 800dc12:	f340 8081 	ble.w	800dd18 <_dtoa_r+0x8c8>
 800dc16:	f04f 0800 	mov.w	r8, #0
 800dc1a:	6933      	ldr	r3, [r6, #16]
 800dc1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dc20:	6918      	ldr	r0, [r3, #16]
 800dc22:	f000 fabb 	bl	800e19c <__hi0bits>
 800dc26:	f1c0 0020 	rsb	r0, r0, #32
 800dc2a:	9b05      	ldr	r3, [sp, #20]
 800dc2c:	4418      	add	r0, r3
 800dc2e:	f010 001f 	ands.w	r0, r0, #31
 800dc32:	f000 8092 	beq.w	800dd5a <_dtoa_r+0x90a>
 800dc36:	f1c0 0320 	rsb	r3, r0, #32
 800dc3a:	2b04      	cmp	r3, #4
 800dc3c:	f340 808a 	ble.w	800dd54 <_dtoa_r+0x904>
 800dc40:	f1c0 001c 	rsb	r0, r0, #28
 800dc44:	9b04      	ldr	r3, [sp, #16]
 800dc46:	4403      	add	r3, r0
 800dc48:	9304      	str	r3, [sp, #16]
 800dc4a:	9b05      	ldr	r3, [sp, #20]
 800dc4c:	4403      	add	r3, r0
 800dc4e:	4405      	add	r5, r0
 800dc50:	9305      	str	r3, [sp, #20]
 800dc52:	9b04      	ldr	r3, [sp, #16]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	dd07      	ble.n	800dc68 <_dtoa_r+0x818>
 800dc58:	ee18 1a10 	vmov	r1, s16
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	4620      	mov	r0, r4
 800dc60:	f000 fc06 	bl	800e470 <__lshift>
 800dc64:	ee08 0a10 	vmov	s16, r0
 800dc68:	9b05      	ldr	r3, [sp, #20]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	dd05      	ble.n	800dc7a <_dtoa_r+0x82a>
 800dc6e:	4631      	mov	r1, r6
 800dc70:	461a      	mov	r2, r3
 800dc72:	4620      	mov	r0, r4
 800dc74:	f000 fbfc 	bl	800e470 <__lshift>
 800dc78:	4606      	mov	r6, r0
 800dc7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d06e      	beq.n	800dd5e <_dtoa_r+0x90e>
 800dc80:	ee18 0a10 	vmov	r0, s16
 800dc84:	4631      	mov	r1, r6
 800dc86:	f000 fc63 	bl	800e550 <__mcmp>
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	da67      	bge.n	800dd5e <_dtoa_r+0x90e>
 800dc8e:	9b00      	ldr	r3, [sp, #0]
 800dc90:	3b01      	subs	r3, #1
 800dc92:	ee18 1a10 	vmov	r1, s16
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	220a      	movs	r2, #10
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	f000 fa37 	bl	800e110 <__multadd>
 800dca2:	9b08      	ldr	r3, [sp, #32]
 800dca4:	ee08 0a10 	vmov	s16, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	f000 81b1 	beq.w	800e010 <_dtoa_r+0xbc0>
 800dcae:	2300      	movs	r3, #0
 800dcb0:	4639      	mov	r1, r7
 800dcb2:	220a      	movs	r2, #10
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f000 fa2b 	bl	800e110 <__multadd>
 800dcba:	9b02      	ldr	r3, [sp, #8]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	4607      	mov	r7, r0
 800dcc0:	f300 808e 	bgt.w	800dde0 <_dtoa_r+0x990>
 800dcc4:	9b06      	ldr	r3, [sp, #24]
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	dc51      	bgt.n	800dd6e <_dtoa_r+0x91e>
 800dcca:	e089      	b.n	800dde0 <_dtoa_r+0x990>
 800dccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dcce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dcd2:	e74b      	b.n	800db6c <_dtoa_r+0x71c>
 800dcd4:	9b03      	ldr	r3, [sp, #12]
 800dcd6:	1e5e      	subs	r6, r3, #1
 800dcd8:	9b07      	ldr	r3, [sp, #28]
 800dcda:	42b3      	cmp	r3, r6
 800dcdc:	bfbf      	itttt	lt
 800dcde:	9b07      	ldrlt	r3, [sp, #28]
 800dce0:	9607      	strlt	r6, [sp, #28]
 800dce2:	1af2      	sublt	r2, r6, r3
 800dce4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dce6:	bfb6      	itet	lt
 800dce8:	189b      	addlt	r3, r3, r2
 800dcea:	1b9e      	subge	r6, r3, r6
 800dcec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dcee:	9b03      	ldr	r3, [sp, #12]
 800dcf0:	bfb8      	it	lt
 800dcf2:	2600      	movlt	r6, #0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	bfb7      	itett	lt
 800dcf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dcfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dd00:	1a9d      	sublt	r5, r3, r2
 800dd02:	2300      	movlt	r3, #0
 800dd04:	e734      	b.n	800db70 <_dtoa_r+0x720>
 800dd06:	9e07      	ldr	r6, [sp, #28]
 800dd08:	9d04      	ldr	r5, [sp, #16]
 800dd0a:	9f08      	ldr	r7, [sp, #32]
 800dd0c:	e73b      	b.n	800db86 <_dtoa_r+0x736>
 800dd0e:	9a07      	ldr	r2, [sp, #28]
 800dd10:	e767      	b.n	800dbe2 <_dtoa_r+0x792>
 800dd12:	9b06      	ldr	r3, [sp, #24]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	dc18      	bgt.n	800dd4a <_dtoa_r+0x8fa>
 800dd18:	f1ba 0f00 	cmp.w	sl, #0
 800dd1c:	d115      	bne.n	800dd4a <_dtoa_r+0x8fa>
 800dd1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd22:	b993      	cbnz	r3, 800dd4a <_dtoa_r+0x8fa>
 800dd24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd28:	0d1b      	lsrs	r3, r3, #20
 800dd2a:	051b      	lsls	r3, r3, #20
 800dd2c:	b183      	cbz	r3, 800dd50 <_dtoa_r+0x900>
 800dd2e:	9b04      	ldr	r3, [sp, #16]
 800dd30:	3301      	adds	r3, #1
 800dd32:	9304      	str	r3, [sp, #16]
 800dd34:	9b05      	ldr	r3, [sp, #20]
 800dd36:	3301      	adds	r3, #1
 800dd38:	9305      	str	r3, [sp, #20]
 800dd3a:	f04f 0801 	mov.w	r8, #1
 800dd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	f47f af6a 	bne.w	800dc1a <_dtoa_r+0x7ca>
 800dd46:	2001      	movs	r0, #1
 800dd48:	e76f      	b.n	800dc2a <_dtoa_r+0x7da>
 800dd4a:	f04f 0800 	mov.w	r8, #0
 800dd4e:	e7f6      	b.n	800dd3e <_dtoa_r+0x8ee>
 800dd50:	4698      	mov	r8, r3
 800dd52:	e7f4      	b.n	800dd3e <_dtoa_r+0x8ee>
 800dd54:	f43f af7d 	beq.w	800dc52 <_dtoa_r+0x802>
 800dd58:	4618      	mov	r0, r3
 800dd5a:	301c      	adds	r0, #28
 800dd5c:	e772      	b.n	800dc44 <_dtoa_r+0x7f4>
 800dd5e:	9b03      	ldr	r3, [sp, #12]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	dc37      	bgt.n	800ddd4 <_dtoa_r+0x984>
 800dd64:	9b06      	ldr	r3, [sp, #24]
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	dd34      	ble.n	800ddd4 <_dtoa_r+0x984>
 800dd6a:	9b03      	ldr	r3, [sp, #12]
 800dd6c:	9302      	str	r3, [sp, #8]
 800dd6e:	9b02      	ldr	r3, [sp, #8]
 800dd70:	b96b      	cbnz	r3, 800dd8e <_dtoa_r+0x93e>
 800dd72:	4631      	mov	r1, r6
 800dd74:	2205      	movs	r2, #5
 800dd76:	4620      	mov	r0, r4
 800dd78:	f000 f9ca 	bl	800e110 <__multadd>
 800dd7c:	4601      	mov	r1, r0
 800dd7e:	4606      	mov	r6, r0
 800dd80:	ee18 0a10 	vmov	r0, s16
 800dd84:	f000 fbe4 	bl	800e550 <__mcmp>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	f73f adbb 	bgt.w	800d904 <_dtoa_r+0x4b4>
 800dd8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd90:	9d01      	ldr	r5, [sp, #4]
 800dd92:	43db      	mvns	r3, r3
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	f04f 0800 	mov.w	r8, #0
 800dd9a:	4631      	mov	r1, r6
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	f000 f995 	bl	800e0cc <_Bfree>
 800dda2:	2f00      	cmp	r7, #0
 800dda4:	f43f aea4 	beq.w	800daf0 <_dtoa_r+0x6a0>
 800dda8:	f1b8 0f00 	cmp.w	r8, #0
 800ddac:	d005      	beq.n	800ddba <_dtoa_r+0x96a>
 800ddae:	45b8      	cmp	r8, r7
 800ddb0:	d003      	beq.n	800ddba <_dtoa_r+0x96a>
 800ddb2:	4641      	mov	r1, r8
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f000 f989 	bl	800e0cc <_Bfree>
 800ddba:	4639      	mov	r1, r7
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	f000 f985 	bl	800e0cc <_Bfree>
 800ddc2:	e695      	b.n	800daf0 <_dtoa_r+0x6a0>
 800ddc4:	2600      	movs	r6, #0
 800ddc6:	4637      	mov	r7, r6
 800ddc8:	e7e1      	b.n	800dd8e <_dtoa_r+0x93e>
 800ddca:	9700      	str	r7, [sp, #0]
 800ddcc:	4637      	mov	r7, r6
 800ddce:	e599      	b.n	800d904 <_dtoa_r+0x4b4>
 800ddd0:	40240000 	.word	0x40240000
 800ddd4:	9b08      	ldr	r3, [sp, #32]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f000 80ca 	beq.w	800df70 <_dtoa_r+0xb20>
 800dddc:	9b03      	ldr	r3, [sp, #12]
 800ddde:	9302      	str	r3, [sp, #8]
 800dde0:	2d00      	cmp	r5, #0
 800dde2:	dd05      	ble.n	800ddf0 <_dtoa_r+0x9a0>
 800dde4:	4639      	mov	r1, r7
 800dde6:	462a      	mov	r2, r5
 800dde8:	4620      	mov	r0, r4
 800ddea:	f000 fb41 	bl	800e470 <__lshift>
 800ddee:	4607      	mov	r7, r0
 800ddf0:	f1b8 0f00 	cmp.w	r8, #0
 800ddf4:	d05b      	beq.n	800deae <_dtoa_r+0xa5e>
 800ddf6:	6879      	ldr	r1, [r7, #4]
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f000 f927 	bl	800e04c <_Balloc>
 800ddfe:	4605      	mov	r5, r0
 800de00:	b928      	cbnz	r0, 800de0e <_dtoa_r+0x9be>
 800de02:	4b87      	ldr	r3, [pc, #540]	; (800e020 <_dtoa_r+0xbd0>)
 800de04:	4602      	mov	r2, r0
 800de06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de0a:	f7ff bb3b 	b.w	800d484 <_dtoa_r+0x34>
 800de0e:	693a      	ldr	r2, [r7, #16]
 800de10:	3202      	adds	r2, #2
 800de12:	0092      	lsls	r2, r2, #2
 800de14:	f107 010c 	add.w	r1, r7, #12
 800de18:	300c      	adds	r0, #12
 800de1a:	f7fe fcbd 	bl	800c798 <memcpy>
 800de1e:	2201      	movs	r2, #1
 800de20:	4629      	mov	r1, r5
 800de22:	4620      	mov	r0, r4
 800de24:	f000 fb24 	bl	800e470 <__lshift>
 800de28:	9b01      	ldr	r3, [sp, #4]
 800de2a:	f103 0901 	add.w	r9, r3, #1
 800de2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800de32:	4413      	add	r3, r2
 800de34:	9305      	str	r3, [sp, #20]
 800de36:	f00a 0301 	and.w	r3, sl, #1
 800de3a:	46b8      	mov	r8, r7
 800de3c:	9304      	str	r3, [sp, #16]
 800de3e:	4607      	mov	r7, r0
 800de40:	4631      	mov	r1, r6
 800de42:	ee18 0a10 	vmov	r0, s16
 800de46:	f7ff fa75 	bl	800d334 <quorem>
 800de4a:	4641      	mov	r1, r8
 800de4c:	9002      	str	r0, [sp, #8]
 800de4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800de52:	ee18 0a10 	vmov	r0, s16
 800de56:	f000 fb7b 	bl	800e550 <__mcmp>
 800de5a:	463a      	mov	r2, r7
 800de5c:	9003      	str	r0, [sp, #12]
 800de5e:	4631      	mov	r1, r6
 800de60:	4620      	mov	r0, r4
 800de62:	f000 fb91 	bl	800e588 <__mdiff>
 800de66:	68c2      	ldr	r2, [r0, #12]
 800de68:	f109 3bff 	add.w	fp, r9, #4294967295
 800de6c:	4605      	mov	r5, r0
 800de6e:	bb02      	cbnz	r2, 800deb2 <_dtoa_r+0xa62>
 800de70:	4601      	mov	r1, r0
 800de72:	ee18 0a10 	vmov	r0, s16
 800de76:	f000 fb6b 	bl	800e550 <__mcmp>
 800de7a:	4602      	mov	r2, r0
 800de7c:	4629      	mov	r1, r5
 800de7e:	4620      	mov	r0, r4
 800de80:	9207      	str	r2, [sp, #28]
 800de82:	f000 f923 	bl	800e0cc <_Bfree>
 800de86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800de8a:	ea43 0102 	orr.w	r1, r3, r2
 800de8e:	9b04      	ldr	r3, [sp, #16]
 800de90:	430b      	orrs	r3, r1
 800de92:	464d      	mov	r5, r9
 800de94:	d10f      	bne.n	800deb6 <_dtoa_r+0xa66>
 800de96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de9a:	d02a      	beq.n	800def2 <_dtoa_r+0xaa2>
 800de9c:	9b03      	ldr	r3, [sp, #12]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	dd02      	ble.n	800dea8 <_dtoa_r+0xa58>
 800dea2:	9b02      	ldr	r3, [sp, #8]
 800dea4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dea8:	f88b a000 	strb.w	sl, [fp]
 800deac:	e775      	b.n	800dd9a <_dtoa_r+0x94a>
 800deae:	4638      	mov	r0, r7
 800deb0:	e7ba      	b.n	800de28 <_dtoa_r+0x9d8>
 800deb2:	2201      	movs	r2, #1
 800deb4:	e7e2      	b.n	800de7c <_dtoa_r+0xa2c>
 800deb6:	9b03      	ldr	r3, [sp, #12]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	db04      	blt.n	800dec6 <_dtoa_r+0xa76>
 800debc:	9906      	ldr	r1, [sp, #24]
 800debe:	430b      	orrs	r3, r1
 800dec0:	9904      	ldr	r1, [sp, #16]
 800dec2:	430b      	orrs	r3, r1
 800dec4:	d122      	bne.n	800df0c <_dtoa_r+0xabc>
 800dec6:	2a00      	cmp	r2, #0
 800dec8:	ddee      	ble.n	800dea8 <_dtoa_r+0xa58>
 800deca:	ee18 1a10 	vmov	r1, s16
 800dece:	2201      	movs	r2, #1
 800ded0:	4620      	mov	r0, r4
 800ded2:	f000 facd 	bl	800e470 <__lshift>
 800ded6:	4631      	mov	r1, r6
 800ded8:	ee08 0a10 	vmov	s16, r0
 800dedc:	f000 fb38 	bl	800e550 <__mcmp>
 800dee0:	2800      	cmp	r0, #0
 800dee2:	dc03      	bgt.n	800deec <_dtoa_r+0xa9c>
 800dee4:	d1e0      	bne.n	800dea8 <_dtoa_r+0xa58>
 800dee6:	f01a 0f01 	tst.w	sl, #1
 800deea:	d0dd      	beq.n	800dea8 <_dtoa_r+0xa58>
 800deec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800def0:	d1d7      	bne.n	800dea2 <_dtoa_r+0xa52>
 800def2:	2339      	movs	r3, #57	; 0x39
 800def4:	f88b 3000 	strb.w	r3, [fp]
 800def8:	462b      	mov	r3, r5
 800defa:	461d      	mov	r5, r3
 800defc:	3b01      	subs	r3, #1
 800defe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df02:	2a39      	cmp	r2, #57	; 0x39
 800df04:	d071      	beq.n	800dfea <_dtoa_r+0xb9a>
 800df06:	3201      	adds	r2, #1
 800df08:	701a      	strb	r2, [r3, #0]
 800df0a:	e746      	b.n	800dd9a <_dtoa_r+0x94a>
 800df0c:	2a00      	cmp	r2, #0
 800df0e:	dd07      	ble.n	800df20 <_dtoa_r+0xad0>
 800df10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df14:	d0ed      	beq.n	800def2 <_dtoa_r+0xaa2>
 800df16:	f10a 0301 	add.w	r3, sl, #1
 800df1a:	f88b 3000 	strb.w	r3, [fp]
 800df1e:	e73c      	b.n	800dd9a <_dtoa_r+0x94a>
 800df20:	9b05      	ldr	r3, [sp, #20]
 800df22:	f809 ac01 	strb.w	sl, [r9, #-1]
 800df26:	4599      	cmp	r9, r3
 800df28:	d047      	beq.n	800dfba <_dtoa_r+0xb6a>
 800df2a:	ee18 1a10 	vmov	r1, s16
 800df2e:	2300      	movs	r3, #0
 800df30:	220a      	movs	r2, #10
 800df32:	4620      	mov	r0, r4
 800df34:	f000 f8ec 	bl	800e110 <__multadd>
 800df38:	45b8      	cmp	r8, r7
 800df3a:	ee08 0a10 	vmov	s16, r0
 800df3e:	f04f 0300 	mov.w	r3, #0
 800df42:	f04f 020a 	mov.w	r2, #10
 800df46:	4641      	mov	r1, r8
 800df48:	4620      	mov	r0, r4
 800df4a:	d106      	bne.n	800df5a <_dtoa_r+0xb0a>
 800df4c:	f000 f8e0 	bl	800e110 <__multadd>
 800df50:	4680      	mov	r8, r0
 800df52:	4607      	mov	r7, r0
 800df54:	f109 0901 	add.w	r9, r9, #1
 800df58:	e772      	b.n	800de40 <_dtoa_r+0x9f0>
 800df5a:	f000 f8d9 	bl	800e110 <__multadd>
 800df5e:	4639      	mov	r1, r7
 800df60:	4680      	mov	r8, r0
 800df62:	2300      	movs	r3, #0
 800df64:	220a      	movs	r2, #10
 800df66:	4620      	mov	r0, r4
 800df68:	f000 f8d2 	bl	800e110 <__multadd>
 800df6c:	4607      	mov	r7, r0
 800df6e:	e7f1      	b.n	800df54 <_dtoa_r+0xb04>
 800df70:	9b03      	ldr	r3, [sp, #12]
 800df72:	9302      	str	r3, [sp, #8]
 800df74:	9d01      	ldr	r5, [sp, #4]
 800df76:	ee18 0a10 	vmov	r0, s16
 800df7a:	4631      	mov	r1, r6
 800df7c:	f7ff f9da 	bl	800d334 <quorem>
 800df80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800df84:	9b01      	ldr	r3, [sp, #4]
 800df86:	f805 ab01 	strb.w	sl, [r5], #1
 800df8a:	1aea      	subs	r2, r5, r3
 800df8c:	9b02      	ldr	r3, [sp, #8]
 800df8e:	4293      	cmp	r3, r2
 800df90:	dd09      	ble.n	800dfa6 <_dtoa_r+0xb56>
 800df92:	ee18 1a10 	vmov	r1, s16
 800df96:	2300      	movs	r3, #0
 800df98:	220a      	movs	r2, #10
 800df9a:	4620      	mov	r0, r4
 800df9c:	f000 f8b8 	bl	800e110 <__multadd>
 800dfa0:	ee08 0a10 	vmov	s16, r0
 800dfa4:	e7e7      	b.n	800df76 <_dtoa_r+0xb26>
 800dfa6:	9b02      	ldr	r3, [sp, #8]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	bfc8      	it	gt
 800dfac:	461d      	movgt	r5, r3
 800dfae:	9b01      	ldr	r3, [sp, #4]
 800dfb0:	bfd8      	it	le
 800dfb2:	2501      	movle	r5, #1
 800dfb4:	441d      	add	r5, r3
 800dfb6:	f04f 0800 	mov.w	r8, #0
 800dfba:	ee18 1a10 	vmov	r1, s16
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f000 fa55 	bl	800e470 <__lshift>
 800dfc6:	4631      	mov	r1, r6
 800dfc8:	ee08 0a10 	vmov	s16, r0
 800dfcc:	f000 fac0 	bl	800e550 <__mcmp>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	dc91      	bgt.n	800def8 <_dtoa_r+0xaa8>
 800dfd4:	d102      	bne.n	800dfdc <_dtoa_r+0xb8c>
 800dfd6:	f01a 0f01 	tst.w	sl, #1
 800dfda:	d18d      	bne.n	800def8 <_dtoa_r+0xaa8>
 800dfdc:	462b      	mov	r3, r5
 800dfde:	461d      	mov	r5, r3
 800dfe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfe4:	2a30      	cmp	r2, #48	; 0x30
 800dfe6:	d0fa      	beq.n	800dfde <_dtoa_r+0xb8e>
 800dfe8:	e6d7      	b.n	800dd9a <_dtoa_r+0x94a>
 800dfea:	9a01      	ldr	r2, [sp, #4]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d184      	bne.n	800defa <_dtoa_r+0xaaa>
 800dff0:	9b00      	ldr	r3, [sp, #0]
 800dff2:	3301      	adds	r3, #1
 800dff4:	9300      	str	r3, [sp, #0]
 800dff6:	2331      	movs	r3, #49	; 0x31
 800dff8:	7013      	strb	r3, [r2, #0]
 800dffa:	e6ce      	b.n	800dd9a <_dtoa_r+0x94a>
 800dffc:	4b09      	ldr	r3, [pc, #36]	; (800e024 <_dtoa_r+0xbd4>)
 800dffe:	f7ff ba95 	b.w	800d52c <_dtoa_r+0xdc>
 800e002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e004:	2b00      	cmp	r3, #0
 800e006:	f47f aa6e 	bne.w	800d4e6 <_dtoa_r+0x96>
 800e00a:	4b07      	ldr	r3, [pc, #28]	; (800e028 <_dtoa_r+0xbd8>)
 800e00c:	f7ff ba8e 	b.w	800d52c <_dtoa_r+0xdc>
 800e010:	9b02      	ldr	r3, [sp, #8]
 800e012:	2b00      	cmp	r3, #0
 800e014:	dcae      	bgt.n	800df74 <_dtoa_r+0xb24>
 800e016:	9b06      	ldr	r3, [sp, #24]
 800e018:	2b02      	cmp	r3, #2
 800e01a:	f73f aea8 	bgt.w	800dd6e <_dtoa_r+0x91e>
 800e01e:	e7a9      	b.n	800df74 <_dtoa_r+0xb24>
 800e020:	0800f36f 	.word	0x0800f36f
 800e024:	0800f2cc 	.word	0x0800f2cc
 800e028:	0800f2f0 	.word	0x0800f2f0

0800e02c <_localeconv_r>:
 800e02c:	4800      	ldr	r0, [pc, #0]	; (800e030 <_localeconv_r+0x4>)
 800e02e:	4770      	bx	lr
 800e030:	20000160 	.word	0x20000160

0800e034 <__malloc_lock>:
 800e034:	4801      	ldr	r0, [pc, #4]	; (800e03c <__malloc_lock+0x8>)
 800e036:	f000 bbd4 	b.w	800e7e2 <__retarget_lock_acquire_recursive>
 800e03a:	bf00      	nop
 800e03c:	200010ec 	.word	0x200010ec

0800e040 <__malloc_unlock>:
 800e040:	4801      	ldr	r0, [pc, #4]	; (800e048 <__malloc_unlock+0x8>)
 800e042:	f000 bbcf 	b.w	800e7e4 <__retarget_lock_release_recursive>
 800e046:	bf00      	nop
 800e048:	200010ec 	.word	0x200010ec

0800e04c <_Balloc>:
 800e04c:	b570      	push	{r4, r5, r6, lr}
 800e04e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e050:	4604      	mov	r4, r0
 800e052:	460d      	mov	r5, r1
 800e054:	b976      	cbnz	r6, 800e074 <_Balloc+0x28>
 800e056:	2010      	movs	r0, #16
 800e058:	f7fe fb8e 	bl	800c778 <malloc>
 800e05c:	4602      	mov	r2, r0
 800e05e:	6260      	str	r0, [r4, #36]	; 0x24
 800e060:	b920      	cbnz	r0, 800e06c <_Balloc+0x20>
 800e062:	4b18      	ldr	r3, [pc, #96]	; (800e0c4 <_Balloc+0x78>)
 800e064:	4818      	ldr	r0, [pc, #96]	; (800e0c8 <_Balloc+0x7c>)
 800e066:	2166      	movs	r1, #102	; 0x66
 800e068:	f000 fb8a 	bl	800e780 <__assert_func>
 800e06c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e070:	6006      	str	r6, [r0, #0]
 800e072:	60c6      	str	r6, [r0, #12]
 800e074:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e076:	68f3      	ldr	r3, [r6, #12]
 800e078:	b183      	cbz	r3, 800e09c <_Balloc+0x50>
 800e07a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e07c:	68db      	ldr	r3, [r3, #12]
 800e07e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e082:	b9b8      	cbnz	r0, 800e0b4 <_Balloc+0x68>
 800e084:	2101      	movs	r1, #1
 800e086:	fa01 f605 	lsl.w	r6, r1, r5
 800e08a:	1d72      	adds	r2, r6, #5
 800e08c:	0092      	lsls	r2, r2, #2
 800e08e:	4620      	mov	r0, r4
 800e090:	f000 fb60 	bl	800e754 <_calloc_r>
 800e094:	b160      	cbz	r0, 800e0b0 <_Balloc+0x64>
 800e096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e09a:	e00e      	b.n	800e0ba <_Balloc+0x6e>
 800e09c:	2221      	movs	r2, #33	; 0x21
 800e09e:	2104      	movs	r1, #4
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f000 fb57 	bl	800e754 <_calloc_r>
 800e0a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0a8:	60f0      	str	r0, [r6, #12]
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1e4      	bne.n	800e07a <_Balloc+0x2e>
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	bd70      	pop	{r4, r5, r6, pc}
 800e0b4:	6802      	ldr	r2, [r0, #0]
 800e0b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e0c0:	e7f7      	b.n	800e0b2 <_Balloc+0x66>
 800e0c2:	bf00      	nop
 800e0c4:	0800f2fd 	.word	0x0800f2fd
 800e0c8:	0800f380 	.word	0x0800f380

0800e0cc <_Bfree>:
 800e0cc:	b570      	push	{r4, r5, r6, lr}
 800e0ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0d0:	4605      	mov	r5, r0
 800e0d2:	460c      	mov	r4, r1
 800e0d4:	b976      	cbnz	r6, 800e0f4 <_Bfree+0x28>
 800e0d6:	2010      	movs	r0, #16
 800e0d8:	f7fe fb4e 	bl	800c778 <malloc>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	6268      	str	r0, [r5, #36]	; 0x24
 800e0e0:	b920      	cbnz	r0, 800e0ec <_Bfree+0x20>
 800e0e2:	4b09      	ldr	r3, [pc, #36]	; (800e108 <_Bfree+0x3c>)
 800e0e4:	4809      	ldr	r0, [pc, #36]	; (800e10c <_Bfree+0x40>)
 800e0e6:	218a      	movs	r1, #138	; 0x8a
 800e0e8:	f000 fb4a 	bl	800e780 <__assert_func>
 800e0ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0f0:	6006      	str	r6, [r0, #0]
 800e0f2:	60c6      	str	r6, [r0, #12]
 800e0f4:	b13c      	cbz	r4, 800e106 <_Bfree+0x3a>
 800e0f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e0f8:	6862      	ldr	r2, [r4, #4]
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e100:	6021      	str	r1, [r4, #0]
 800e102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e106:	bd70      	pop	{r4, r5, r6, pc}
 800e108:	0800f2fd 	.word	0x0800f2fd
 800e10c:	0800f380 	.word	0x0800f380

0800e110 <__multadd>:
 800e110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e114:	690d      	ldr	r5, [r1, #16]
 800e116:	4607      	mov	r7, r0
 800e118:	460c      	mov	r4, r1
 800e11a:	461e      	mov	r6, r3
 800e11c:	f101 0c14 	add.w	ip, r1, #20
 800e120:	2000      	movs	r0, #0
 800e122:	f8dc 3000 	ldr.w	r3, [ip]
 800e126:	b299      	uxth	r1, r3
 800e128:	fb02 6101 	mla	r1, r2, r1, r6
 800e12c:	0c1e      	lsrs	r6, r3, #16
 800e12e:	0c0b      	lsrs	r3, r1, #16
 800e130:	fb02 3306 	mla	r3, r2, r6, r3
 800e134:	b289      	uxth	r1, r1
 800e136:	3001      	adds	r0, #1
 800e138:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e13c:	4285      	cmp	r5, r0
 800e13e:	f84c 1b04 	str.w	r1, [ip], #4
 800e142:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e146:	dcec      	bgt.n	800e122 <__multadd+0x12>
 800e148:	b30e      	cbz	r6, 800e18e <__multadd+0x7e>
 800e14a:	68a3      	ldr	r3, [r4, #8]
 800e14c:	42ab      	cmp	r3, r5
 800e14e:	dc19      	bgt.n	800e184 <__multadd+0x74>
 800e150:	6861      	ldr	r1, [r4, #4]
 800e152:	4638      	mov	r0, r7
 800e154:	3101      	adds	r1, #1
 800e156:	f7ff ff79 	bl	800e04c <_Balloc>
 800e15a:	4680      	mov	r8, r0
 800e15c:	b928      	cbnz	r0, 800e16a <__multadd+0x5a>
 800e15e:	4602      	mov	r2, r0
 800e160:	4b0c      	ldr	r3, [pc, #48]	; (800e194 <__multadd+0x84>)
 800e162:	480d      	ldr	r0, [pc, #52]	; (800e198 <__multadd+0x88>)
 800e164:	21b5      	movs	r1, #181	; 0xb5
 800e166:	f000 fb0b 	bl	800e780 <__assert_func>
 800e16a:	6922      	ldr	r2, [r4, #16]
 800e16c:	3202      	adds	r2, #2
 800e16e:	f104 010c 	add.w	r1, r4, #12
 800e172:	0092      	lsls	r2, r2, #2
 800e174:	300c      	adds	r0, #12
 800e176:	f7fe fb0f 	bl	800c798 <memcpy>
 800e17a:	4621      	mov	r1, r4
 800e17c:	4638      	mov	r0, r7
 800e17e:	f7ff ffa5 	bl	800e0cc <_Bfree>
 800e182:	4644      	mov	r4, r8
 800e184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e188:	3501      	adds	r5, #1
 800e18a:	615e      	str	r6, [r3, #20]
 800e18c:	6125      	str	r5, [r4, #16]
 800e18e:	4620      	mov	r0, r4
 800e190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e194:	0800f36f 	.word	0x0800f36f
 800e198:	0800f380 	.word	0x0800f380

0800e19c <__hi0bits>:
 800e19c:	0c03      	lsrs	r3, r0, #16
 800e19e:	041b      	lsls	r3, r3, #16
 800e1a0:	b9d3      	cbnz	r3, 800e1d8 <__hi0bits+0x3c>
 800e1a2:	0400      	lsls	r0, r0, #16
 800e1a4:	2310      	movs	r3, #16
 800e1a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e1aa:	bf04      	itt	eq
 800e1ac:	0200      	lsleq	r0, r0, #8
 800e1ae:	3308      	addeq	r3, #8
 800e1b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e1b4:	bf04      	itt	eq
 800e1b6:	0100      	lsleq	r0, r0, #4
 800e1b8:	3304      	addeq	r3, #4
 800e1ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e1be:	bf04      	itt	eq
 800e1c0:	0080      	lsleq	r0, r0, #2
 800e1c2:	3302      	addeq	r3, #2
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	db05      	blt.n	800e1d4 <__hi0bits+0x38>
 800e1c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e1cc:	f103 0301 	add.w	r3, r3, #1
 800e1d0:	bf08      	it	eq
 800e1d2:	2320      	moveq	r3, #32
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	4770      	bx	lr
 800e1d8:	2300      	movs	r3, #0
 800e1da:	e7e4      	b.n	800e1a6 <__hi0bits+0xa>

0800e1dc <__lo0bits>:
 800e1dc:	6803      	ldr	r3, [r0, #0]
 800e1de:	f013 0207 	ands.w	r2, r3, #7
 800e1e2:	4601      	mov	r1, r0
 800e1e4:	d00b      	beq.n	800e1fe <__lo0bits+0x22>
 800e1e6:	07da      	lsls	r2, r3, #31
 800e1e8:	d423      	bmi.n	800e232 <__lo0bits+0x56>
 800e1ea:	0798      	lsls	r0, r3, #30
 800e1ec:	bf49      	itett	mi
 800e1ee:	085b      	lsrmi	r3, r3, #1
 800e1f0:	089b      	lsrpl	r3, r3, #2
 800e1f2:	2001      	movmi	r0, #1
 800e1f4:	600b      	strmi	r3, [r1, #0]
 800e1f6:	bf5c      	itt	pl
 800e1f8:	600b      	strpl	r3, [r1, #0]
 800e1fa:	2002      	movpl	r0, #2
 800e1fc:	4770      	bx	lr
 800e1fe:	b298      	uxth	r0, r3
 800e200:	b9a8      	cbnz	r0, 800e22e <__lo0bits+0x52>
 800e202:	0c1b      	lsrs	r3, r3, #16
 800e204:	2010      	movs	r0, #16
 800e206:	b2da      	uxtb	r2, r3
 800e208:	b90a      	cbnz	r2, 800e20e <__lo0bits+0x32>
 800e20a:	3008      	adds	r0, #8
 800e20c:	0a1b      	lsrs	r3, r3, #8
 800e20e:	071a      	lsls	r2, r3, #28
 800e210:	bf04      	itt	eq
 800e212:	091b      	lsreq	r3, r3, #4
 800e214:	3004      	addeq	r0, #4
 800e216:	079a      	lsls	r2, r3, #30
 800e218:	bf04      	itt	eq
 800e21a:	089b      	lsreq	r3, r3, #2
 800e21c:	3002      	addeq	r0, #2
 800e21e:	07da      	lsls	r2, r3, #31
 800e220:	d403      	bmi.n	800e22a <__lo0bits+0x4e>
 800e222:	085b      	lsrs	r3, r3, #1
 800e224:	f100 0001 	add.w	r0, r0, #1
 800e228:	d005      	beq.n	800e236 <__lo0bits+0x5a>
 800e22a:	600b      	str	r3, [r1, #0]
 800e22c:	4770      	bx	lr
 800e22e:	4610      	mov	r0, r2
 800e230:	e7e9      	b.n	800e206 <__lo0bits+0x2a>
 800e232:	2000      	movs	r0, #0
 800e234:	4770      	bx	lr
 800e236:	2020      	movs	r0, #32
 800e238:	4770      	bx	lr
	...

0800e23c <__i2b>:
 800e23c:	b510      	push	{r4, lr}
 800e23e:	460c      	mov	r4, r1
 800e240:	2101      	movs	r1, #1
 800e242:	f7ff ff03 	bl	800e04c <_Balloc>
 800e246:	4602      	mov	r2, r0
 800e248:	b928      	cbnz	r0, 800e256 <__i2b+0x1a>
 800e24a:	4b05      	ldr	r3, [pc, #20]	; (800e260 <__i2b+0x24>)
 800e24c:	4805      	ldr	r0, [pc, #20]	; (800e264 <__i2b+0x28>)
 800e24e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e252:	f000 fa95 	bl	800e780 <__assert_func>
 800e256:	2301      	movs	r3, #1
 800e258:	6144      	str	r4, [r0, #20]
 800e25a:	6103      	str	r3, [r0, #16]
 800e25c:	bd10      	pop	{r4, pc}
 800e25e:	bf00      	nop
 800e260:	0800f36f 	.word	0x0800f36f
 800e264:	0800f380 	.word	0x0800f380

0800e268 <__multiply>:
 800e268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e26c:	4691      	mov	r9, r2
 800e26e:	690a      	ldr	r2, [r1, #16]
 800e270:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e274:	429a      	cmp	r2, r3
 800e276:	bfb8      	it	lt
 800e278:	460b      	movlt	r3, r1
 800e27a:	460c      	mov	r4, r1
 800e27c:	bfbc      	itt	lt
 800e27e:	464c      	movlt	r4, r9
 800e280:	4699      	movlt	r9, r3
 800e282:	6927      	ldr	r7, [r4, #16]
 800e284:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e288:	68a3      	ldr	r3, [r4, #8]
 800e28a:	6861      	ldr	r1, [r4, #4]
 800e28c:	eb07 060a 	add.w	r6, r7, sl
 800e290:	42b3      	cmp	r3, r6
 800e292:	b085      	sub	sp, #20
 800e294:	bfb8      	it	lt
 800e296:	3101      	addlt	r1, #1
 800e298:	f7ff fed8 	bl	800e04c <_Balloc>
 800e29c:	b930      	cbnz	r0, 800e2ac <__multiply+0x44>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	4b44      	ldr	r3, [pc, #272]	; (800e3b4 <__multiply+0x14c>)
 800e2a2:	4845      	ldr	r0, [pc, #276]	; (800e3b8 <__multiply+0x150>)
 800e2a4:	f240 115d 	movw	r1, #349	; 0x15d
 800e2a8:	f000 fa6a 	bl	800e780 <__assert_func>
 800e2ac:	f100 0514 	add.w	r5, r0, #20
 800e2b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e2b4:	462b      	mov	r3, r5
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	4543      	cmp	r3, r8
 800e2ba:	d321      	bcc.n	800e300 <__multiply+0x98>
 800e2bc:	f104 0314 	add.w	r3, r4, #20
 800e2c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e2c4:	f109 0314 	add.w	r3, r9, #20
 800e2c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e2cc:	9202      	str	r2, [sp, #8]
 800e2ce:	1b3a      	subs	r2, r7, r4
 800e2d0:	3a15      	subs	r2, #21
 800e2d2:	f022 0203 	bic.w	r2, r2, #3
 800e2d6:	3204      	adds	r2, #4
 800e2d8:	f104 0115 	add.w	r1, r4, #21
 800e2dc:	428f      	cmp	r7, r1
 800e2de:	bf38      	it	cc
 800e2e0:	2204      	movcc	r2, #4
 800e2e2:	9201      	str	r2, [sp, #4]
 800e2e4:	9a02      	ldr	r2, [sp, #8]
 800e2e6:	9303      	str	r3, [sp, #12]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d80c      	bhi.n	800e306 <__multiply+0x9e>
 800e2ec:	2e00      	cmp	r6, #0
 800e2ee:	dd03      	ble.n	800e2f8 <__multiply+0x90>
 800e2f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d05a      	beq.n	800e3ae <__multiply+0x146>
 800e2f8:	6106      	str	r6, [r0, #16]
 800e2fa:	b005      	add	sp, #20
 800e2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e300:	f843 2b04 	str.w	r2, [r3], #4
 800e304:	e7d8      	b.n	800e2b8 <__multiply+0x50>
 800e306:	f8b3 a000 	ldrh.w	sl, [r3]
 800e30a:	f1ba 0f00 	cmp.w	sl, #0
 800e30e:	d024      	beq.n	800e35a <__multiply+0xf2>
 800e310:	f104 0e14 	add.w	lr, r4, #20
 800e314:	46a9      	mov	r9, r5
 800e316:	f04f 0c00 	mov.w	ip, #0
 800e31a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e31e:	f8d9 1000 	ldr.w	r1, [r9]
 800e322:	fa1f fb82 	uxth.w	fp, r2
 800e326:	b289      	uxth	r1, r1
 800e328:	fb0a 110b 	mla	r1, sl, fp, r1
 800e32c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e330:	f8d9 2000 	ldr.w	r2, [r9]
 800e334:	4461      	add	r1, ip
 800e336:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e33a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e33e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e342:	b289      	uxth	r1, r1
 800e344:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e348:	4577      	cmp	r7, lr
 800e34a:	f849 1b04 	str.w	r1, [r9], #4
 800e34e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e352:	d8e2      	bhi.n	800e31a <__multiply+0xb2>
 800e354:	9a01      	ldr	r2, [sp, #4]
 800e356:	f845 c002 	str.w	ip, [r5, r2]
 800e35a:	9a03      	ldr	r2, [sp, #12]
 800e35c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e360:	3304      	adds	r3, #4
 800e362:	f1b9 0f00 	cmp.w	r9, #0
 800e366:	d020      	beq.n	800e3aa <__multiply+0x142>
 800e368:	6829      	ldr	r1, [r5, #0]
 800e36a:	f104 0c14 	add.w	ip, r4, #20
 800e36e:	46ae      	mov	lr, r5
 800e370:	f04f 0a00 	mov.w	sl, #0
 800e374:	f8bc b000 	ldrh.w	fp, [ip]
 800e378:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e37c:	fb09 220b 	mla	r2, r9, fp, r2
 800e380:	4492      	add	sl, r2
 800e382:	b289      	uxth	r1, r1
 800e384:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e388:	f84e 1b04 	str.w	r1, [lr], #4
 800e38c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e390:	f8be 1000 	ldrh.w	r1, [lr]
 800e394:	0c12      	lsrs	r2, r2, #16
 800e396:	fb09 1102 	mla	r1, r9, r2, r1
 800e39a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e39e:	4567      	cmp	r7, ip
 800e3a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e3a4:	d8e6      	bhi.n	800e374 <__multiply+0x10c>
 800e3a6:	9a01      	ldr	r2, [sp, #4]
 800e3a8:	50a9      	str	r1, [r5, r2]
 800e3aa:	3504      	adds	r5, #4
 800e3ac:	e79a      	b.n	800e2e4 <__multiply+0x7c>
 800e3ae:	3e01      	subs	r6, #1
 800e3b0:	e79c      	b.n	800e2ec <__multiply+0x84>
 800e3b2:	bf00      	nop
 800e3b4:	0800f36f 	.word	0x0800f36f
 800e3b8:	0800f380 	.word	0x0800f380

0800e3bc <__pow5mult>:
 800e3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3c0:	4615      	mov	r5, r2
 800e3c2:	f012 0203 	ands.w	r2, r2, #3
 800e3c6:	4606      	mov	r6, r0
 800e3c8:	460f      	mov	r7, r1
 800e3ca:	d007      	beq.n	800e3dc <__pow5mult+0x20>
 800e3cc:	4c25      	ldr	r4, [pc, #148]	; (800e464 <__pow5mult+0xa8>)
 800e3ce:	3a01      	subs	r2, #1
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e3d6:	f7ff fe9b 	bl	800e110 <__multadd>
 800e3da:	4607      	mov	r7, r0
 800e3dc:	10ad      	asrs	r5, r5, #2
 800e3de:	d03d      	beq.n	800e45c <__pow5mult+0xa0>
 800e3e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e3e2:	b97c      	cbnz	r4, 800e404 <__pow5mult+0x48>
 800e3e4:	2010      	movs	r0, #16
 800e3e6:	f7fe f9c7 	bl	800c778 <malloc>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	6270      	str	r0, [r6, #36]	; 0x24
 800e3ee:	b928      	cbnz	r0, 800e3fc <__pow5mult+0x40>
 800e3f0:	4b1d      	ldr	r3, [pc, #116]	; (800e468 <__pow5mult+0xac>)
 800e3f2:	481e      	ldr	r0, [pc, #120]	; (800e46c <__pow5mult+0xb0>)
 800e3f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e3f8:	f000 f9c2 	bl	800e780 <__assert_func>
 800e3fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e400:	6004      	str	r4, [r0, #0]
 800e402:	60c4      	str	r4, [r0, #12]
 800e404:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e40c:	b94c      	cbnz	r4, 800e422 <__pow5mult+0x66>
 800e40e:	f240 2171 	movw	r1, #625	; 0x271
 800e412:	4630      	mov	r0, r6
 800e414:	f7ff ff12 	bl	800e23c <__i2b>
 800e418:	2300      	movs	r3, #0
 800e41a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e41e:	4604      	mov	r4, r0
 800e420:	6003      	str	r3, [r0, #0]
 800e422:	f04f 0900 	mov.w	r9, #0
 800e426:	07eb      	lsls	r3, r5, #31
 800e428:	d50a      	bpl.n	800e440 <__pow5mult+0x84>
 800e42a:	4639      	mov	r1, r7
 800e42c:	4622      	mov	r2, r4
 800e42e:	4630      	mov	r0, r6
 800e430:	f7ff ff1a 	bl	800e268 <__multiply>
 800e434:	4639      	mov	r1, r7
 800e436:	4680      	mov	r8, r0
 800e438:	4630      	mov	r0, r6
 800e43a:	f7ff fe47 	bl	800e0cc <_Bfree>
 800e43e:	4647      	mov	r7, r8
 800e440:	106d      	asrs	r5, r5, #1
 800e442:	d00b      	beq.n	800e45c <__pow5mult+0xa0>
 800e444:	6820      	ldr	r0, [r4, #0]
 800e446:	b938      	cbnz	r0, 800e458 <__pow5mult+0x9c>
 800e448:	4622      	mov	r2, r4
 800e44a:	4621      	mov	r1, r4
 800e44c:	4630      	mov	r0, r6
 800e44e:	f7ff ff0b 	bl	800e268 <__multiply>
 800e452:	6020      	str	r0, [r4, #0]
 800e454:	f8c0 9000 	str.w	r9, [r0]
 800e458:	4604      	mov	r4, r0
 800e45a:	e7e4      	b.n	800e426 <__pow5mult+0x6a>
 800e45c:	4638      	mov	r0, r7
 800e45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e462:	bf00      	nop
 800e464:	0800f4d0 	.word	0x0800f4d0
 800e468:	0800f2fd 	.word	0x0800f2fd
 800e46c:	0800f380 	.word	0x0800f380

0800e470 <__lshift>:
 800e470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e474:	460c      	mov	r4, r1
 800e476:	6849      	ldr	r1, [r1, #4]
 800e478:	6923      	ldr	r3, [r4, #16]
 800e47a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e47e:	68a3      	ldr	r3, [r4, #8]
 800e480:	4607      	mov	r7, r0
 800e482:	4691      	mov	r9, r2
 800e484:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e488:	f108 0601 	add.w	r6, r8, #1
 800e48c:	42b3      	cmp	r3, r6
 800e48e:	db0b      	blt.n	800e4a8 <__lshift+0x38>
 800e490:	4638      	mov	r0, r7
 800e492:	f7ff fddb 	bl	800e04c <_Balloc>
 800e496:	4605      	mov	r5, r0
 800e498:	b948      	cbnz	r0, 800e4ae <__lshift+0x3e>
 800e49a:	4602      	mov	r2, r0
 800e49c:	4b2a      	ldr	r3, [pc, #168]	; (800e548 <__lshift+0xd8>)
 800e49e:	482b      	ldr	r0, [pc, #172]	; (800e54c <__lshift+0xdc>)
 800e4a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e4a4:	f000 f96c 	bl	800e780 <__assert_func>
 800e4a8:	3101      	adds	r1, #1
 800e4aa:	005b      	lsls	r3, r3, #1
 800e4ac:	e7ee      	b.n	800e48c <__lshift+0x1c>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	f100 0114 	add.w	r1, r0, #20
 800e4b4:	f100 0210 	add.w	r2, r0, #16
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	4553      	cmp	r3, sl
 800e4bc:	db37      	blt.n	800e52e <__lshift+0xbe>
 800e4be:	6920      	ldr	r0, [r4, #16]
 800e4c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e4c4:	f104 0314 	add.w	r3, r4, #20
 800e4c8:	f019 091f 	ands.w	r9, r9, #31
 800e4cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e4d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e4d4:	d02f      	beq.n	800e536 <__lshift+0xc6>
 800e4d6:	f1c9 0e20 	rsb	lr, r9, #32
 800e4da:	468a      	mov	sl, r1
 800e4dc:	f04f 0c00 	mov.w	ip, #0
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	fa02 f209 	lsl.w	r2, r2, r9
 800e4e6:	ea42 020c 	orr.w	r2, r2, ip
 800e4ea:	f84a 2b04 	str.w	r2, [sl], #4
 800e4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4f2:	4298      	cmp	r0, r3
 800e4f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e4f8:	d8f2      	bhi.n	800e4e0 <__lshift+0x70>
 800e4fa:	1b03      	subs	r3, r0, r4
 800e4fc:	3b15      	subs	r3, #21
 800e4fe:	f023 0303 	bic.w	r3, r3, #3
 800e502:	3304      	adds	r3, #4
 800e504:	f104 0215 	add.w	r2, r4, #21
 800e508:	4290      	cmp	r0, r2
 800e50a:	bf38      	it	cc
 800e50c:	2304      	movcc	r3, #4
 800e50e:	f841 c003 	str.w	ip, [r1, r3]
 800e512:	f1bc 0f00 	cmp.w	ip, #0
 800e516:	d001      	beq.n	800e51c <__lshift+0xac>
 800e518:	f108 0602 	add.w	r6, r8, #2
 800e51c:	3e01      	subs	r6, #1
 800e51e:	4638      	mov	r0, r7
 800e520:	612e      	str	r6, [r5, #16]
 800e522:	4621      	mov	r1, r4
 800e524:	f7ff fdd2 	bl	800e0cc <_Bfree>
 800e528:	4628      	mov	r0, r5
 800e52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e52e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e532:	3301      	adds	r3, #1
 800e534:	e7c1      	b.n	800e4ba <__lshift+0x4a>
 800e536:	3904      	subs	r1, #4
 800e538:	f853 2b04 	ldr.w	r2, [r3], #4
 800e53c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e540:	4298      	cmp	r0, r3
 800e542:	d8f9      	bhi.n	800e538 <__lshift+0xc8>
 800e544:	e7ea      	b.n	800e51c <__lshift+0xac>
 800e546:	bf00      	nop
 800e548:	0800f36f 	.word	0x0800f36f
 800e54c:	0800f380 	.word	0x0800f380

0800e550 <__mcmp>:
 800e550:	b530      	push	{r4, r5, lr}
 800e552:	6902      	ldr	r2, [r0, #16]
 800e554:	690c      	ldr	r4, [r1, #16]
 800e556:	1b12      	subs	r2, r2, r4
 800e558:	d10e      	bne.n	800e578 <__mcmp+0x28>
 800e55a:	f100 0314 	add.w	r3, r0, #20
 800e55e:	3114      	adds	r1, #20
 800e560:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e564:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e568:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e56c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e570:	42a5      	cmp	r5, r4
 800e572:	d003      	beq.n	800e57c <__mcmp+0x2c>
 800e574:	d305      	bcc.n	800e582 <__mcmp+0x32>
 800e576:	2201      	movs	r2, #1
 800e578:	4610      	mov	r0, r2
 800e57a:	bd30      	pop	{r4, r5, pc}
 800e57c:	4283      	cmp	r3, r0
 800e57e:	d3f3      	bcc.n	800e568 <__mcmp+0x18>
 800e580:	e7fa      	b.n	800e578 <__mcmp+0x28>
 800e582:	f04f 32ff 	mov.w	r2, #4294967295
 800e586:	e7f7      	b.n	800e578 <__mcmp+0x28>

0800e588 <__mdiff>:
 800e588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e58c:	460c      	mov	r4, r1
 800e58e:	4606      	mov	r6, r0
 800e590:	4611      	mov	r1, r2
 800e592:	4620      	mov	r0, r4
 800e594:	4690      	mov	r8, r2
 800e596:	f7ff ffdb 	bl	800e550 <__mcmp>
 800e59a:	1e05      	subs	r5, r0, #0
 800e59c:	d110      	bne.n	800e5c0 <__mdiff+0x38>
 800e59e:	4629      	mov	r1, r5
 800e5a0:	4630      	mov	r0, r6
 800e5a2:	f7ff fd53 	bl	800e04c <_Balloc>
 800e5a6:	b930      	cbnz	r0, 800e5b6 <__mdiff+0x2e>
 800e5a8:	4b3a      	ldr	r3, [pc, #232]	; (800e694 <__mdiff+0x10c>)
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	f240 2132 	movw	r1, #562	; 0x232
 800e5b0:	4839      	ldr	r0, [pc, #228]	; (800e698 <__mdiff+0x110>)
 800e5b2:	f000 f8e5 	bl	800e780 <__assert_func>
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e5bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5c0:	bfa4      	itt	ge
 800e5c2:	4643      	movge	r3, r8
 800e5c4:	46a0      	movge	r8, r4
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e5cc:	bfa6      	itte	ge
 800e5ce:	461c      	movge	r4, r3
 800e5d0:	2500      	movge	r5, #0
 800e5d2:	2501      	movlt	r5, #1
 800e5d4:	f7ff fd3a 	bl	800e04c <_Balloc>
 800e5d8:	b920      	cbnz	r0, 800e5e4 <__mdiff+0x5c>
 800e5da:	4b2e      	ldr	r3, [pc, #184]	; (800e694 <__mdiff+0x10c>)
 800e5dc:	4602      	mov	r2, r0
 800e5de:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e5e2:	e7e5      	b.n	800e5b0 <__mdiff+0x28>
 800e5e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e5e8:	6926      	ldr	r6, [r4, #16]
 800e5ea:	60c5      	str	r5, [r0, #12]
 800e5ec:	f104 0914 	add.w	r9, r4, #20
 800e5f0:	f108 0514 	add.w	r5, r8, #20
 800e5f4:	f100 0e14 	add.w	lr, r0, #20
 800e5f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e5fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e600:	f108 0210 	add.w	r2, r8, #16
 800e604:	46f2      	mov	sl, lr
 800e606:	2100      	movs	r1, #0
 800e608:	f859 3b04 	ldr.w	r3, [r9], #4
 800e60c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e610:	fa1f f883 	uxth.w	r8, r3
 800e614:	fa11 f18b 	uxtah	r1, r1, fp
 800e618:	0c1b      	lsrs	r3, r3, #16
 800e61a:	eba1 0808 	sub.w	r8, r1, r8
 800e61e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e622:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e626:	fa1f f888 	uxth.w	r8, r8
 800e62a:	1419      	asrs	r1, r3, #16
 800e62c:	454e      	cmp	r6, r9
 800e62e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e632:	f84a 3b04 	str.w	r3, [sl], #4
 800e636:	d8e7      	bhi.n	800e608 <__mdiff+0x80>
 800e638:	1b33      	subs	r3, r6, r4
 800e63a:	3b15      	subs	r3, #21
 800e63c:	f023 0303 	bic.w	r3, r3, #3
 800e640:	3304      	adds	r3, #4
 800e642:	3415      	adds	r4, #21
 800e644:	42a6      	cmp	r6, r4
 800e646:	bf38      	it	cc
 800e648:	2304      	movcc	r3, #4
 800e64a:	441d      	add	r5, r3
 800e64c:	4473      	add	r3, lr
 800e64e:	469e      	mov	lr, r3
 800e650:	462e      	mov	r6, r5
 800e652:	4566      	cmp	r6, ip
 800e654:	d30e      	bcc.n	800e674 <__mdiff+0xec>
 800e656:	f10c 0203 	add.w	r2, ip, #3
 800e65a:	1b52      	subs	r2, r2, r5
 800e65c:	f022 0203 	bic.w	r2, r2, #3
 800e660:	3d03      	subs	r5, #3
 800e662:	45ac      	cmp	ip, r5
 800e664:	bf38      	it	cc
 800e666:	2200      	movcc	r2, #0
 800e668:	441a      	add	r2, r3
 800e66a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e66e:	b17b      	cbz	r3, 800e690 <__mdiff+0x108>
 800e670:	6107      	str	r7, [r0, #16]
 800e672:	e7a3      	b.n	800e5bc <__mdiff+0x34>
 800e674:	f856 8b04 	ldr.w	r8, [r6], #4
 800e678:	fa11 f288 	uxtah	r2, r1, r8
 800e67c:	1414      	asrs	r4, r2, #16
 800e67e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e682:	b292      	uxth	r2, r2
 800e684:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e688:	f84e 2b04 	str.w	r2, [lr], #4
 800e68c:	1421      	asrs	r1, r4, #16
 800e68e:	e7e0      	b.n	800e652 <__mdiff+0xca>
 800e690:	3f01      	subs	r7, #1
 800e692:	e7ea      	b.n	800e66a <__mdiff+0xe2>
 800e694:	0800f36f 	.word	0x0800f36f
 800e698:	0800f380 	.word	0x0800f380

0800e69c <__d2b>:
 800e69c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6a0:	4689      	mov	r9, r1
 800e6a2:	2101      	movs	r1, #1
 800e6a4:	ec57 6b10 	vmov	r6, r7, d0
 800e6a8:	4690      	mov	r8, r2
 800e6aa:	f7ff fccf 	bl	800e04c <_Balloc>
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	b930      	cbnz	r0, 800e6c0 <__d2b+0x24>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	4b25      	ldr	r3, [pc, #148]	; (800e74c <__d2b+0xb0>)
 800e6b6:	4826      	ldr	r0, [pc, #152]	; (800e750 <__d2b+0xb4>)
 800e6b8:	f240 310a 	movw	r1, #778	; 0x30a
 800e6bc:	f000 f860 	bl	800e780 <__assert_func>
 800e6c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e6c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e6c8:	bb35      	cbnz	r5, 800e718 <__d2b+0x7c>
 800e6ca:	2e00      	cmp	r6, #0
 800e6cc:	9301      	str	r3, [sp, #4]
 800e6ce:	d028      	beq.n	800e722 <__d2b+0x86>
 800e6d0:	4668      	mov	r0, sp
 800e6d2:	9600      	str	r6, [sp, #0]
 800e6d4:	f7ff fd82 	bl	800e1dc <__lo0bits>
 800e6d8:	9900      	ldr	r1, [sp, #0]
 800e6da:	b300      	cbz	r0, 800e71e <__d2b+0x82>
 800e6dc:	9a01      	ldr	r2, [sp, #4]
 800e6de:	f1c0 0320 	rsb	r3, r0, #32
 800e6e2:	fa02 f303 	lsl.w	r3, r2, r3
 800e6e6:	430b      	orrs	r3, r1
 800e6e8:	40c2      	lsrs	r2, r0
 800e6ea:	6163      	str	r3, [r4, #20]
 800e6ec:	9201      	str	r2, [sp, #4]
 800e6ee:	9b01      	ldr	r3, [sp, #4]
 800e6f0:	61a3      	str	r3, [r4, #24]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	bf14      	ite	ne
 800e6f6:	2202      	movne	r2, #2
 800e6f8:	2201      	moveq	r2, #1
 800e6fa:	6122      	str	r2, [r4, #16]
 800e6fc:	b1d5      	cbz	r5, 800e734 <__d2b+0x98>
 800e6fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e702:	4405      	add	r5, r0
 800e704:	f8c9 5000 	str.w	r5, [r9]
 800e708:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e70c:	f8c8 0000 	str.w	r0, [r8]
 800e710:	4620      	mov	r0, r4
 800e712:	b003      	add	sp, #12
 800e714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e71c:	e7d5      	b.n	800e6ca <__d2b+0x2e>
 800e71e:	6161      	str	r1, [r4, #20]
 800e720:	e7e5      	b.n	800e6ee <__d2b+0x52>
 800e722:	a801      	add	r0, sp, #4
 800e724:	f7ff fd5a 	bl	800e1dc <__lo0bits>
 800e728:	9b01      	ldr	r3, [sp, #4]
 800e72a:	6163      	str	r3, [r4, #20]
 800e72c:	2201      	movs	r2, #1
 800e72e:	6122      	str	r2, [r4, #16]
 800e730:	3020      	adds	r0, #32
 800e732:	e7e3      	b.n	800e6fc <__d2b+0x60>
 800e734:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e738:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e73c:	f8c9 0000 	str.w	r0, [r9]
 800e740:	6918      	ldr	r0, [r3, #16]
 800e742:	f7ff fd2b 	bl	800e19c <__hi0bits>
 800e746:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e74a:	e7df      	b.n	800e70c <__d2b+0x70>
 800e74c:	0800f36f 	.word	0x0800f36f
 800e750:	0800f380 	.word	0x0800f380

0800e754 <_calloc_r>:
 800e754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e756:	fba1 2402 	umull	r2, r4, r1, r2
 800e75a:	b94c      	cbnz	r4, 800e770 <_calloc_r+0x1c>
 800e75c:	4611      	mov	r1, r2
 800e75e:	9201      	str	r2, [sp, #4]
 800e760:	f7fe f8b6 	bl	800c8d0 <_malloc_r>
 800e764:	9a01      	ldr	r2, [sp, #4]
 800e766:	4605      	mov	r5, r0
 800e768:	b930      	cbnz	r0, 800e778 <_calloc_r+0x24>
 800e76a:	4628      	mov	r0, r5
 800e76c:	b003      	add	sp, #12
 800e76e:	bd30      	pop	{r4, r5, pc}
 800e770:	220c      	movs	r2, #12
 800e772:	6002      	str	r2, [r0, #0]
 800e774:	2500      	movs	r5, #0
 800e776:	e7f8      	b.n	800e76a <_calloc_r+0x16>
 800e778:	4621      	mov	r1, r4
 800e77a:	f7fe f835 	bl	800c7e8 <memset>
 800e77e:	e7f4      	b.n	800e76a <_calloc_r+0x16>

0800e780 <__assert_func>:
 800e780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e782:	4614      	mov	r4, r2
 800e784:	461a      	mov	r2, r3
 800e786:	4b09      	ldr	r3, [pc, #36]	; (800e7ac <__assert_func+0x2c>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4605      	mov	r5, r0
 800e78c:	68d8      	ldr	r0, [r3, #12]
 800e78e:	b14c      	cbz	r4, 800e7a4 <__assert_func+0x24>
 800e790:	4b07      	ldr	r3, [pc, #28]	; (800e7b0 <__assert_func+0x30>)
 800e792:	9100      	str	r1, [sp, #0]
 800e794:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e798:	4906      	ldr	r1, [pc, #24]	; (800e7b4 <__assert_func+0x34>)
 800e79a:	462b      	mov	r3, r5
 800e79c:	f000 f80e 	bl	800e7bc <fiprintf>
 800e7a0:	f7fd ffb8 	bl	800c714 <abort>
 800e7a4:	4b04      	ldr	r3, [pc, #16]	; (800e7b8 <__assert_func+0x38>)
 800e7a6:	461c      	mov	r4, r3
 800e7a8:	e7f3      	b.n	800e792 <__assert_func+0x12>
 800e7aa:	bf00      	nop
 800e7ac:	2000000c 	.word	0x2000000c
 800e7b0:	0800f4dc 	.word	0x0800f4dc
 800e7b4:	0800f4e9 	.word	0x0800f4e9
 800e7b8:	0800f517 	.word	0x0800f517

0800e7bc <fiprintf>:
 800e7bc:	b40e      	push	{r1, r2, r3}
 800e7be:	b503      	push	{r0, r1, lr}
 800e7c0:	4601      	mov	r1, r0
 800e7c2:	ab03      	add	r3, sp, #12
 800e7c4:	4805      	ldr	r0, [pc, #20]	; (800e7dc <fiprintf+0x20>)
 800e7c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ca:	6800      	ldr	r0, [r0, #0]
 800e7cc:	9301      	str	r3, [sp, #4]
 800e7ce:	f000 f845 	bl	800e85c <_vfiprintf_r>
 800e7d2:	b002      	add	sp, #8
 800e7d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7d8:	b003      	add	sp, #12
 800e7da:	4770      	bx	lr
 800e7dc:	2000000c 	.word	0x2000000c

0800e7e0 <__retarget_lock_init_recursive>:
 800e7e0:	4770      	bx	lr

0800e7e2 <__retarget_lock_acquire_recursive>:
 800e7e2:	4770      	bx	lr

0800e7e4 <__retarget_lock_release_recursive>:
 800e7e4:	4770      	bx	lr

0800e7e6 <__ascii_mbtowc>:
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	b901      	cbnz	r1, 800e7ec <__ascii_mbtowc+0x6>
 800e7ea:	a901      	add	r1, sp, #4
 800e7ec:	b142      	cbz	r2, 800e800 <__ascii_mbtowc+0x1a>
 800e7ee:	b14b      	cbz	r3, 800e804 <__ascii_mbtowc+0x1e>
 800e7f0:	7813      	ldrb	r3, [r2, #0]
 800e7f2:	600b      	str	r3, [r1, #0]
 800e7f4:	7812      	ldrb	r2, [r2, #0]
 800e7f6:	1e10      	subs	r0, r2, #0
 800e7f8:	bf18      	it	ne
 800e7fa:	2001      	movne	r0, #1
 800e7fc:	b002      	add	sp, #8
 800e7fe:	4770      	bx	lr
 800e800:	4610      	mov	r0, r2
 800e802:	e7fb      	b.n	800e7fc <__ascii_mbtowc+0x16>
 800e804:	f06f 0001 	mvn.w	r0, #1
 800e808:	e7f8      	b.n	800e7fc <__ascii_mbtowc+0x16>

0800e80a <__sfputc_r>:
 800e80a:	6893      	ldr	r3, [r2, #8]
 800e80c:	3b01      	subs	r3, #1
 800e80e:	2b00      	cmp	r3, #0
 800e810:	b410      	push	{r4}
 800e812:	6093      	str	r3, [r2, #8]
 800e814:	da08      	bge.n	800e828 <__sfputc_r+0x1e>
 800e816:	6994      	ldr	r4, [r2, #24]
 800e818:	42a3      	cmp	r3, r4
 800e81a:	db01      	blt.n	800e820 <__sfputc_r+0x16>
 800e81c:	290a      	cmp	r1, #10
 800e81e:	d103      	bne.n	800e828 <__sfputc_r+0x1e>
 800e820:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e824:	f000 b94a 	b.w	800eabc <__swbuf_r>
 800e828:	6813      	ldr	r3, [r2, #0]
 800e82a:	1c58      	adds	r0, r3, #1
 800e82c:	6010      	str	r0, [r2, #0]
 800e82e:	7019      	strb	r1, [r3, #0]
 800e830:	4608      	mov	r0, r1
 800e832:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <__sfputs_r>:
 800e838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e83a:	4606      	mov	r6, r0
 800e83c:	460f      	mov	r7, r1
 800e83e:	4614      	mov	r4, r2
 800e840:	18d5      	adds	r5, r2, r3
 800e842:	42ac      	cmp	r4, r5
 800e844:	d101      	bne.n	800e84a <__sfputs_r+0x12>
 800e846:	2000      	movs	r0, #0
 800e848:	e007      	b.n	800e85a <__sfputs_r+0x22>
 800e84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e84e:	463a      	mov	r2, r7
 800e850:	4630      	mov	r0, r6
 800e852:	f7ff ffda 	bl	800e80a <__sfputc_r>
 800e856:	1c43      	adds	r3, r0, #1
 800e858:	d1f3      	bne.n	800e842 <__sfputs_r+0xa>
 800e85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e85c <_vfiprintf_r>:
 800e85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e860:	460d      	mov	r5, r1
 800e862:	b09d      	sub	sp, #116	; 0x74
 800e864:	4614      	mov	r4, r2
 800e866:	4698      	mov	r8, r3
 800e868:	4606      	mov	r6, r0
 800e86a:	b118      	cbz	r0, 800e874 <_vfiprintf_r+0x18>
 800e86c:	6983      	ldr	r3, [r0, #24]
 800e86e:	b90b      	cbnz	r3, 800e874 <_vfiprintf_r+0x18>
 800e870:	f000 fb0c 	bl	800ee8c <__sinit>
 800e874:	4b89      	ldr	r3, [pc, #548]	; (800ea9c <_vfiprintf_r+0x240>)
 800e876:	429d      	cmp	r5, r3
 800e878:	d11b      	bne.n	800e8b2 <_vfiprintf_r+0x56>
 800e87a:	6875      	ldr	r5, [r6, #4]
 800e87c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e87e:	07d9      	lsls	r1, r3, #31
 800e880:	d405      	bmi.n	800e88e <_vfiprintf_r+0x32>
 800e882:	89ab      	ldrh	r3, [r5, #12]
 800e884:	059a      	lsls	r2, r3, #22
 800e886:	d402      	bmi.n	800e88e <_vfiprintf_r+0x32>
 800e888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e88a:	f7ff ffaa 	bl	800e7e2 <__retarget_lock_acquire_recursive>
 800e88e:	89ab      	ldrh	r3, [r5, #12]
 800e890:	071b      	lsls	r3, r3, #28
 800e892:	d501      	bpl.n	800e898 <_vfiprintf_r+0x3c>
 800e894:	692b      	ldr	r3, [r5, #16]
 800e896:	b9eb      	cbnz	r3, 800e8d4 <_vfiprintf_r+0x78>
 800e898:	4629      	mov	r1, r5
 800e89a:	4630      	mov	r0, r6
 800e89c:	f000 f96e 	bl	800eb7c <__swsetup_r>
 800e8a0:	b1c0      	cbz	r0, 800e8d4 <_vfiprintf_r+0x78>
 800e8a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8a4:	07dc      	lsls	r4, r3, #31
 800e8a6:	d50e      	bpl.n	800e8c6 <_vfiprintf_r+0x6a>
 800e8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ac:	b01d      	add	sp, #116	; 0x74
 800e8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b2:	4b7b      	ldr	r3, [pc, #492]	; (800eaa0 <_vfiprintf_r+0x244>)
 800e8b4:	429d      	cmp	r5, r3
 800e8b6:	d101      	bne.n	800e8bc <_vfiprintf_r+0x60>
 800e8b8:	68b5      	ldr	r5, [r6, #8]
 800e8ba:	e7df      	b.n	800e87c <_vfiprintf_r+0x20>
 800e8bc:	4b79      	ldr	r3, [pc, #484]	; (800eaa4 <_vfiprintf_r+0x248>)
 800e8be:	429d      	cmp	r5, r3
 800e8c0:	bf08      	it	eq
 800e8c2:	68f5      	ldreq	r5, [r6, #12]
 800e8c4:	e7da      	b.n	800e87c <_vfiprintf_r+0x20>
 800e8c6:	89ab      	ldrh	r3, [r5, #12]
 800e8c8:	0598      	lsls	r0, r3, #22
 800e8ca:	d4ed      	bmi.n	800e8a8 <_vfiprintf_r+0x4c>
 800e8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8ce:	f7ff ff89 	bl	800e7e4 <__retarget_lock_release_recursive>
 800e8d2:	e7e9      	b.n	800e8a8 <_vfiprintf_r+0x4c>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8d8:	2320      	movs	r3, #32
 800e8da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8de:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8e2:	2330      	movs	r3, #48	; 0x30
 800e8e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eaa8 <_vfiprintf_r+0x24c>
 800e8e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8ec:	f04f 0901 	mov.w	r9, #1
 800e8f0:	4623      	mov	r3, r4
 800e8f2:	469a      	mov	sl, r3
 800e8f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8f8:	b10a      	cbz	r2, 800e8fe <_vfiprintf_r+0xa2>
 800e8fa:	2a25      	cmp	r2, #37	; 0x25
 800e8fc:	d1f9      	bne.n	800e8f2 <_vfiprintf_r+0x96>
 800e8fe:	ebba 0b04 	subs.w	fp, sl, r4
 800e902:	d00b      	beq.n	800e91c <_vfiprintf_r+0xc0>
 800e904:	465b      	mov	r3, fp
 800e906:	4622      	mov	r2, r4
 800e908:	4629      	mov	r1, r5
 800e90a:	4630      	mov	r0, r6
 800e90c:	f7ff ff94 	bl	800e838 <__sfputs_r>
 800e910:	3001      	adds	r0, #1
 800e912:	f000 80aa 	beq.w	800ea6a <_vfiprintf_r+0x20e>
 800e916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e918:	445a      	add	r2, fp
 800e91a:	9209      	str	r2, [sp, #36]	; 0x24
 800e91c:	f89a 3000 	ldrb.w	r3, [sl]
 800e920:	2b00      	cmp	r3, #0
 800e922:	f000 80a2 	beq.w	800ea6a <_vfiprintf_r+0x20e>
 800e926:	2300      	movs	r3, #0
 800e928:	f04f 32ff 	mov.w	r2, #4294967295
 800e92c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e930:	f10a 0a01 	add.w	sl, sl, #1
 800e934:	9304      	str	r3, [sp, #16]
 800e936:	9307      	str	r3, [sp, #28]
 800e938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e93c:	931a      	str	r3, [sp, #104]	; 0x68
 800e93e:	4654      	mov	r4, sl
 800e940:	2205      	movs	r2, #5
 800e942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e946:	4858      	ldr	r0, [pc, #352]	; (800eaa8 <_vfiprintf_r+0x24c>)
 800e948:	f7f1 fc52 	bl	80001f0 <memchr>
 800e94c:	9a04      	ldr	r2, [sp, #16]
 800e94e:	b9d8      	cbnz	r0, 800e988 <_vfiprintf_r+0x12c>
 800e950:	06d1      	lsls	r1, r2, #27
 800e952:	bf44      	itt	mi
 800e954:	2320      	movmi	r3, #32
 800e956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e95a:	0713      	lsls	r3, r2, #28
 800e95c:	bf44      	itt	mi
 800e95e:	232b      	movmi	r3, #43	; 0x2b
 800e960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e964:	f89a 3000 	ldrb.w	r3, [sl]
 800e968:	2b2a      	cmp	r3, #42	; 0x2a
 800e96a:	d015      	beq.n	800e998 <_vfiprintf_r+0x13c>
 800e96c:	9a07      	ldr	r2, [sp, #28]
 800e96e:	4654      	mov	r4, sl
 800e970:	2000      	movs	r0, #0
 800e972:	f04f 0c0a 	mov.w	ip, #10
 800e976:	4621      	mov	r1, r4
 800e978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e97c:	3b30      	subs	r3, #48	; 0x30
 800e97e:	2b09      	cmp	r3, #9
 800e980:	d94e      	bls.n	800ea20 <_vfiprintf_r+0x1c4>
 800e982:	b1b0      	cbz	r0, 800e9b2 <_vfiprintf_r+0x156>
 800e984:	9207      	str	r2, [sp, #28]
 800e986:	e014      	b.n	800e9b2 <_vfiprintf_r+0x156>
 800e988:	eba0 0308 	sub.w	r3, r0, r8
 800e98c:	fa09 f303 	lsl.w	r3, r9, r3
 800e990:	4313      	orrs	r3, r2
 800e992:	9304      	str	r3, [sp, #16]
 800e994:	46a2      	mov	sl, r4
 800e996:	e7d2      	b.n	800e93e <_vfiprintf_r+0xe2>
 800e998:	9b03      	ldr	r3, [sp, #12]
 800e99a:	1d19      	adds	r1, r3, #4
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	9103      	str	r1, [sp, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	bfbb      	ittet	lt
 800e9a4:	425b      	neglt	r3, r3
 800e9a6:	f042 0202 	orrlt.w	r2, r2, #2
 800e9aa:	9307      	strge	r3, [sp, #28]
 800e9ac:	9307      	strlt	r3, [sp, #28]
 800e9ae:	bfb8      	it	lt
 800e9b0:	9204      	strlt	r2, [sp, #16]
 800e9b2:	7823      	ldrb	r3, [r4, #0]
 800e9b4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9b6:	d10c      	bne.n	800e9d2 <_vfiprintf_r+0x176>
 800e9b8:	7863      	ldrb	r3, [r4, #1]
 800e9ba:	2b2a      	cmp	r3, #42	; 0x2a
 800e9bc:	d135      	bne.n	800ea2a <_vfiprintf_r+0x1ce>
 800e9be:	9b03      	ldr	r3, [sp, #12]
 800e9c0:	1d1a      	adds	r2, r3, #4
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	9203      	str	r2, [sp, #12]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	bfb8      	it	lt
 800e9ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9ce:	3402      	adds	r4, #2
 800e9d0:	9305      	str	r3, [sp, #20]
 800e9d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eab8 <_vfiprintf_r+0x25c>
 800e9d6:	7821      	ldrb	r1, [r4, #0]
 800e9d8:	2203      	movs	r2, #3
 800e9da:	4650      	mov	r0, sl
 800e9dc:	f7f1 fc08 	bl	80001f0 <memchr>
 800e9e0:	b140      	cbz	r0, 800e9f4 <_vfiprintf_r+0x198>
 800e9e2:	2340      	movs	r3, #64	; 0x40
 800e9e4:	eba0 000a 	sub.w	r0, r0, sl
 800e9e8:	fa03 f000 	lsl.w	r0, r3, r0
 800e9ec:	9b04      	ldr	r3, [sp, #16]
 800e9ee:	4303      	orrs	r3, r0
 800e9f0:	3401      	adds	r4, #1
 800e9f2:	9304      	str	r3, [sp, #16]
 800e9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9f8:	482c      	ldr	r0, [pc, #176]	; (800eaac <_vfiprintf_r+0x250>)
 800e9fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9fe:	2206      	movs	r2, #6
 800ea00:	f7f1 fbf6 	bl	80001f0 <memchr>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d03f      	beq.n	800ea88 <_vfiprintf_r+0x22c>
 800ea08:	4b29      	ldr	r3, [pc, #164]	; (800eab0 <_vfiprintf_r+0x254>)
 800ea0a:	bb1b      	cbnz	r3, 800ea54 <_vfiprintf_r+0x1f8>
 800ea0c:	9b03      	ldr	r3, [sp, #12]
 800ea0e:	3307      	adds	r3, #7
 800ea10:	f023 0307 	bic.w	r3, r3, #7
 800ea14:	3308      	adds	r3, #8
 800ea16:	9303      	str	r3, [sp, #12]
 800ea18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea1a:	443b      	add	r3, r7
 800ea1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea1e:	e767      	b.n	800e8f0 <_vfiprintf_r+0x94>
 800ea20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea24:	460c      	mov	r4, r1
 800ea26:	2001      	movs	r0, #1
 800ea28:	e7a5      	b.n	800e976 <_vfiprintf_r+0x11a>
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	3401      	adds	r4, #1
 800ea2e:	9305      	str	r3, [sp, #20]
 800ea30:	4619      	mov	r1, r3
 800ea32:	f04f 0c0a 	mov.w	ip, #10
 800ea36:	4620      	mov	r0, r4
 800ea38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea3c:	3a30      	subs	r2, #48	; 0x30
 800ea3e:	2a09      	cmp	r2, #9
 800ea40:	d903      	bls.n	800ea4a <_vfiprintf_r+0x1ee>
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d0c5      	beq.n	800e9d2 <_vfiprintf_r+0x176>
 800ea46:	9105      	str	r1, [sp, #20]
 800ea48:	e7c3      	b.n	800e9d2 <_vfiprintf_r+0x176>
 800ea4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea4e:	4604      	mov	r4, r0
 800ea50:	2301      	movs	r3, #1
 800ea52:	e7f0      	b.n	800ea36 <_vfiprintf_r+0x1da>
 800ea54:	ab03      	add	r3, sp, #12
 800ea56:	9300      	str	r3, [sp, #0]
 800ea58:	462a      	mov	r2, r5
 800ea5a:	4b16      	ldr	r3, [pc, #88]	; (800eab4 <_vfiprintf_r+0x258>)
 800ea5c:	a904      	add	r1, sp, #16
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f7fe f84a 	bl	800caf8 <_printf_float>
 800ea64:	4607      	mov	r7, r0
 800ea66:	1c78      	adds	r0, r7, #1
 800ea68:	d1d6      	bne.n	800ea18 <_vfiprintf_r+0x1bc>
 800ea6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea6c:	07d9      	lsls	r1, r3, #31
 800ea6e:	d405      	bmi.n	800ea7c <_vfiprintf_r+0x220>
 800ea70:	89ab      	ldrh	r3, [r5, #12]
 800ea72:	059a      	lsls	r2, r3, #22
 800ea74:	d402      	bmi.n	800ea7c <_vfiprintf_r+0x220>
 800ea76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea78:	f7ff feb4 	bl	800e7e4 <__retarget_lock_release_recursive>
 800ea7c:	89ab      	ldrh	r3, [r5, #12]
 800ea7e:	065b      	lsls	r3, r3, #25
 800ea80:	f53f af12 	bmi.w	800e8a8 <_vfiprintf_r+0x4c>
 800ea84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea86:	e711      	b.n	800e8ac <_vfiprintf_r+0x50>
 800ea88:	ab03      	add	r3, sp, #12
 800ea8a:	9300      	str	r3, [sp, #0]
 800ea8c:	462a      	mov	r2, r5
 800ea8e:	4b09      	ldr	r3, [pc, #36]	; (800eab4 <_vfiprintf_r+0x258>)
 800ea90:	a904      	add	r1, sp, #16
 800ea92:	4630      	mov	r0, r6
 800ea94:	f7fe fad4 	bl	800d040 <_printf_i>
 800ea98:	e7e4      	b.n	800ea64 <_vfiprintf_r+0x208>
 800ea9a:	bf00      	nop
 800ea9c:	0800f654 	.word	0x0800f654
 800eaa0:	0800f674 	.word	0x0800f674
 800eaa4:	0800f634 	.word	0x0800f634
 800eaa8:	0800f522 	.word	0x0800f522
 800eaac:	0800f52c 	.word	0x0800f52c
 800eab0:	0800caf9 	.word	0x0800caf9
 800eab4:	0800e839 	.word	0x0800e839
 800eab8:	0800f528 	.word	0x0800f528

0800eabc <__swbuf_r>:
 800eabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eabe:	460e      	mov	r6, r1
 800eac0:	4614      	mov	r4, r2
 800eac2:	4605      	mov	r5, r0
 800eac4:	b118      	cbz	r0, 800eace <__swbuf_r+0x12>
 800eac6:	6983      	ldr	r3, [r0, #24]
 800eac8:	b90b      	cbnz	r3, 800eace <__swbuf_r+0x12>
 800eaca:	f000 f9df 	bl	800ee8c <__sinit>
 800eace:	4b21      	ldr	r3, [pc, #132]	; (800eb54 <__swbuf_r+0x98>)
 800ead0:	429c      	cmp	r4, r3
 800ead2:	d12b      	bne.n	800eb2c <__swbuf_r+0x70>
 800ead4:	686c      	ldr	r4, [r5, #4]
 800ead6:	69a3      	ldr	r3, [r4, #24]
 800ead8:	60a3      	str	r3, [r4, #8]
 800eada:	89a3      	ldrh	r3, [r4, #12]
 800eadc:	071a      	lsls	r2, r3, #28
 800eade:	d52f      	bpl.n	800eb40 <__swbuf_r+0x84>
 800eae0:	6923      	ldr	r3, [r4, #16]
 800eae2:	b36b      	cbz	r3, 800eb40 <__swbuf_r+0x84>
 800eae4:	6923      	ldr	r3, [r4, #16]
 800eae6:	6820      	ldr	r0, [r4, #0]
 800eae8:	1ac0      	subs	r0, r0, r3
 800eaea:	6963      	ldr	r3, [r4, #20]
 800eaec:	b2f6      	uxtb	r6, r6
 800eaee:	4283      	cmp	r3, r0
 800eaf0:	4637      	mov	r7, r6
 800eaf2:	dc04      	bgt.n	800eafe <__swbuf_r+0x42>
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f000 f934 	bl	800ed64 <_fflush_r>
 800eafc:	bb30      	cbnz	r0, 800eb4c <__swbuf_r+0x90>
 800eafe:	68a3      	ldr	r3, [r4, #8]
 800eb00:	3b01      	subs	r3, #1
 800eb02:	60a3      	str	r3, [r4, #8]
 800eb04:	6823      	ldr	r3, [r4, #0]
 800eb06:	1c5a      	adds	r2, r3, #1
 800eb08:	6022      	str	r2, [r4, #0]
 800eb0a:	701e      	strb	r6, [r3, #0]
 800eb0c:	6963      	ldr	r3, [r4, #20]
 800eb0e:	3001      	adds	r0, #1
 800eb10:	4283      	cmp	r3, r0
 800eb12:	d004      	beq.n	800eb1e <__swbuf_r+0x62>
 800eb14:	89a3      	ldrh	r3, [r4, #12]
 800eb16:	07db      	lsls	r3, r3, #31
 800eb18:	d506      	bpl.n	800eb28 <__swbuf_r+0x6c>
 800eb1a:	2e0a      	cmp	r6, #10
 800eb1c:	d104      	bne.n	800eb28 <__swbuf_r+0x6c>
 800eb1e:	4621      	mov	r1, r4
 800eb20:	4628      	mov	r0, r5
 800eb22:	f000 f91f 	bl	800ed64 <_fflush_r>
 800eb26:	b988      	cbnz	r0, 800eb4c <__swbuf_r+0x90>
 800eb28:	4638      	mov	r0, r7
 800eb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb2c:	4b0a      	ldr	r3, [pc, #40]	; (800eb58 <__swbuf_r+0x9c>)
 800eb2e:	429c      	cmp	r4, r3
 800eb30:	d101      	bne.n	800eb36 <__swbuf_r+0x7a>
 800eb32:	68ac      	ldr	r4, [r5, #8]
 800eb34:	e7cf      	b.n	800ead6 <__swbuf_r+0x1a>
 800eb36:	4b09      	ldr	r3, [pc, #36]	; (800eb5c <__swbuf_r+0xa0>)
 800eb38:	429c      	cmp	r4, r3
 800eb3a:	bf08      	it	eq
 800eb3c:	68ec      	ldreq	r4, [r5, #12]
 800eb3e:	e7ca      	b.n	800ead6 <__swbuf_r+0x1a>
 800eb40:	4621      	mov	r1, r4
 800eb42:	4628      	mov	r0, r5
 800eb44:	f000 f81a 	bl	800eb7c <__swsetup_r>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d0cb      	beq.n	800eae4 <__swbuf_r+0x28>
 800eb4c:	f04f 37ff 	mov.w	r7, #4294967295
 800eb50:	e7ea      	b.n	800eb28 <__swbuf_r+0x6c>
 800eb52:	bf00      	nop
 800eb54:	0800f654 	.word	0x0800f654
 800eb58:	0800f674 	.word	0x0800f674
 800eb5c:	0800f634 	.word	0x0800f634

0800eb60 <__ascii_wctomb>:
 800eb60:	b149      	cbz	r1, 800eb76 <__ascii_wctomb+0x16>
 800eb62:	2aff      	cmp	r2, #255	; 0xff
 800eb64:	bf85      	ittet	hi
 800eb66:	238a      	movhi	r3, #138	; 0x8a
 800eb68:	6003      	strhi	r3, [r0, #0]
 800eb6a:	700a      	strbls	r2, [r1, #0]
 800eb6c:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb70:	bf98      	it	ls
 800eb72:	2001      	movls	r0, #1
 800eb74:	4770      	bx	lr
 800eb76:	4608      	mov	r0, r1
 800eb78:	4770      	bx	lr
	...

0800eb7c <__swsetup_r>:
 800eb7c:	4b32      	ldr	r3, [pc, #200]	; (800ec48 <__swsetup_r+0xcc>)
 800eb7e:	b570      	push	{r4, r5, r6, lr}
 800eb80:	681d      	ldr	r5, [r3, #0]
 800eb82:	4606      	mov	r6, r0
 800eb84:	460c      	mov	r4, r1
 800eb86:	b125      	cbz	r5, 800eb92 <__swsetup_r+0x16>
 800eb88:	69ab      	ldr	r3, [r5, #24]
 800eb8a:	b913      	cbnz	r3, 800eb92 <__swsetup_r+0x16>
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f000 f97d 	bl	800ee8c <__sinit>
 800eb92:	4b2e      	ldr	r3, [pc, #184]	; (800ec4c <__swsetup_r+0xd0>)
 800eb94:	429c      	cmp	r4, r3
 800eb96:	d10f      	bne.n	800ebb8 <__swsetup_r+0x3c>
 800eb98:	686c      	ldr	r4, [r5, #4]
 800eb9a:	89a3      	ldrh	r3, [r4, #12]
 800eb9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eba0:	0719      	lsls	r1, r3, #28
 800eba2:	d42c      	bmi.n	800ebfe <__swsetup_r+0x82>
 800eba4:	06dd      	lsls	r5, r3, #27
 800eba6:	d411      	bmi.n	800ebcc <__swsetup_r+0x50>
 800eba8:	2309      	movs	r3, #9
 800ebaa:	6033      	str	r3, [r6, #0]
 800ebac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ebb0:	81a3      	strh	r3, [r4, #12]
 800ebb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb6:	e03e      	b.n	800ec36 <__swsetup_r+0xba>
 800ebb8:	4b25      	ldr	r3, [pc, #148]	; (800ec50 <__swsetup_r+0xd4>)
 800ebba:	429c      	cmp	r4, r3
 800ebbc:	d101      	bne.n	800ebc2 <__swsetup_r+0x46>
 800ebbe:	68ac      	ldr	r4, [r5, #8]
 800ebc0:	e7eb      	b.n	800eb9a <__swsetup_r+0x1e>
 800ebc2:	4b24      	ldr	r3, [pc, #144]	; (800ec54 <__swsetup_r+0xd8>)
 800ebc4:	429c      	cmp	r4, r3
 800ebc6:	bf08      	it	eq
 800ebc8:	68ec      	ldreq	r4, [r5, #12]
 800ebca:	e7e6      	b.n	800eb9a <__swsetup_r+0x1e>
 800ebcc:	0758      	lsls	r0, r3, #29
 800ebce:	d512      	bpl.n	800ebf6 <__swsetup_r+0x7a>
 800ebd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebd2:	b141      	cbz	r1, 800ebe6 <__swsetup_r+0x6a>
 800ebd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebd8:	4299      	cmp	r1, r3
 800ebda:	d002      	beq.n	800ebe2 <__swsetup_r+0x66>
 800ebdc:	4630      	mov	r0, r6
 800ebde:	f7fd fe0b 	bl	800c7f8 <_free_r>
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	6363      	str	r3, [r4, #52]	; 0x34
 800ebe6:	89a3      	ldrh	r3, [r4, #12]
 800ebe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ebec:	81a3      	strh	r3, [r4, #12]
 800ebee:	2300      	movs	r3, #0
 800ebf0:	6063      	str	r3, [r4, #4]
 800ebf2:	6923      	ldr	r3, [r4, #16]
 800ebf4:	6023      	str	r3, [r4, #0]
 800ebf6:	89a3      	ldrh	r3, [r4, #12]
 800ebf8:	f043 0308 	orr.w	r3, r3, #8
 800ebfc:	81a3      	strh	r3, [r4, #12]
 800ebfe:	6923      	ldr	r3, [r4, #16]
 800ec00:	b94b      	cbnz	r3, 800ec16 <__swsetup_r+0x9a>
 800ec02:	89a3      	ldrh	r3, [r4, #12]
 800ec04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec0c:	d003      	beq.n	800ec16 <__swsetup_r+0x9a>
 800ec0e:	4621      	mov	r1, r4
 800ec10:	4630      	mov	r0, r6
 800ec12:	f000 f9fd 	bl	800f010 <__smakebuf_r>
 800ec16:	89a0      	ldrh	r0, [r4, #12]
 800ec18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec1c:	f010 0301 	ands.w	r3, r0, #1
 800ec20:	d00a      	beq.n	800ec38 <__swsetup_r+0xbc>
 800ec22:	2300      	movs	r3, #0
 800ec24:	60a3      	str	r3, [r4, #8]
 800ec26:	6963      	ldr	r3, [r4, #20]
 800ec28:	425b      	negs	r3, r3
 800ec2a:	61a3      	str	r3, [r4, #24]
 800ec2c:	6923      	ldr	r3, [r4, #16]
 800ec2e:	b943      	cbnz	r3, 800ec42 <__swsetup_r+0xc6>
 800ec30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec34:	d1ba      	bne.n	800ebac <__swsetup_r+0x30>
 800ec36:	bd70      	pop	{r4, r5, r6, pc}
 800ec38:	0781      	lsls	r1, r0, #30
 800ec3a:	bf58      	it	pl
 800ec3c:	6963      	ldrpl	r3, [r4, #20]
 800ec3e:	60a3      	str	r3, [r4, #8]
 800ec40:	e7f4      	b.n	800ec2c <__swsetup_r+0xb0>
 800ec42:	2000      	movs	r0, #0
 800ec44:	e7f7      	b.n	800ec36 <__swsetup_r+0xba>
 800ec46:	bf00      	nop
 800ec48:	2000000c 	.word	0x2000000c
 800ec4c:	0800f654 	.word	0x0800f654
 800ec50:	0800f674 	.word	0x0800f674
 800ec54:	0800f634 	.word	0x0800f634

0800ec58 <__sflush_r>:
 800ec58:	898a      	ldrh	r2, [r1, #12]
 800ec5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec5e:	4605      	mov	r5, r0
 800ec60:	0710      	lsls	r0, r2, #28
 800ec62:	460c      	mov	r4, r1
 800ec64:	d458      	bmi.n	800ed18 <__sflush_r+0xc0>
 800ec66:	684b      	ldr	r3, [r1, #4]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	dc05      	bgt.n	800ec78 <__sflush_r+0x20>
 800ec6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	dc02      	bgt.n	800ec78 <__sflush_r+0x20>
 800ec72:	2000      	movs	r0, #0
 800ec74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec7a:	2e00      	cmp	r6, #0
 800ec7c:	d0f9      	beq.n	800ec72 <__sflush_r+0x1a>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec84:	682f      	ldr	r7, [r5, #0]
 800ec86:	602b      	str	r3, [r5, #0]
 800ec88:	d032      	beq.n	800ecf0 <__sflush_r+0x98>
 800ec8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec8c:	89a3      	ldrh	r3, [r4, #12]
 800ec8e:	075a      	lsls	r2, r3, #29
 800ec90:	d505      	bpl.n	800ec9e <__sflush_r+0x46>
 800ec92:	6863      	ldr	r3, [r4, #4]
 800ec94:	1ac0      	subs	r0, r0, r3
 800ec96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec98:	b10b      	cbz	r3, 800ec9e <__sflush_r+0x46>
 800ec9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec9c:	1ac0      	subs	r0, r0, r3
 800ec9e:	2300      	movs	r3, #0
 800eca0:	4602      	mov	r2, r0
 800eca2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eca4:	6a21      	ldr	r1, [r4, #32]
 800eca6:	4628      	mov	r0, r5
 800eca8:	47b0      	blx	r6
 800ecaa:	1c43      	adds	r3, r0, #1
 800ecac:	89a3      	ldrh	r3, [r4, #12]
 800ecae:	d106      	bne.n	800ecbe <__sflush_r+0x66>
 800ecb0:	6829      	ldr	r1, [r5, #0]
 800ecb2:	291d      	cmp	r1, #29
 800ecb4:	d82c      	bhi.n	800ed10 <__sflush_r+0xb8>
 800ecb6:	4a2a      	ldr	r2, [pc, #168]	; (800ed60 <__sflush_r+0x108>)
 800ecb8:	40ca      	lsrs	r2, r1
 800ecba:	07d6      	lsls	r6, r2, #31
 800ecbc:	d528      	bpl.n	800ed10 <__sflush_r+0xb8>
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	6062      	str	r2, [r4, #4]
 800ecc2:	04d9      	lsls	r1, r3, #19
 800ecc4:	6922      	ldr	r2, [r4, #16]
 800ecc6:	6022      	str	r2, [r4, #0]
 800ecc8:	d504      	bpl.n	800ecd4 <__sflush_r+0x7c>
 800ecca:	1c42      	adds	r2, r0, #1
 800eccc:	d101      	bne.n	800ecd2 <__sflush_r+0x7a>
 800ecce:	682b      	ldr	r3, [r5, #0]
 800ecd0:	b903      	cbnz	r3, 800ecd4 <__sflush_r+0x7c>
 800ecd2:	6560      	str	r0, [r4, #84]	; 0x54
 800ecd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecd6:	602f      	str	r7, [r5, #0]
 800ecd8:	2900      	cmp	r1, #0
 800ecda:	d0ca      	beq.n	800ec72 <__sflush_r+0x1a>
 800ecdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ece0:	4299      	cmp	r1, r3
 800ece2:	d002      	beq.n	800ecea <__sflush_r+0x92>
 800ece4:	4628      	mov	r0, r5
 800ece6:	f7fd fd87 	bl	800c7f8 <_free_r>
 800ecea:	2000      	movs	r0, #0
 800ecec:	6360      	str	r0, [r4, #52]	; 0x34
 800ecee:	e7c1      	b.n	800ec74 <__sflush_r+0x1c>
 800ecf0:	6a21      	ldr	r1, [r4, #32]
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	4628      	mov	r0, r5
 800ecf6:	47b0      	blx	r6
 800ecf8:	1c41      	adds	r1, r0, #1
 800ecfa:	d1c7      	bne.n	800ec8c <__sflush_r+0x34>
 800ecfc:	682b      	ldr	r3, [r5, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d0c4      	beq.n	800ec8c <__sflush_r+0x34>
 800ed02:	2b1d      	cmp	r3, #29
 800ed04:	d001      	beq.n	800ed0a <__sflush_r+0xb2>
 800ed06:	2b16      	cmp	r3, #22
 800ed08:	d101      	bne.n	800ed0e <__sflush_r+0xb6>
 800ed0a:	602f      	str	r7, [r5, #0]
 800ed0c:	e7b1      	b.n	800ec72 <__sflush_r+0x1a>
 800ed0e:	89a3      	ldrh	r3, [r4, #12]
 800ed10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed14:	81a3      	strh	r3, [r4, #12]
 800ed16:	e7ad      	b.n	800ec74 <__sflush_r+0x1c>
 800ed18:	690f      	ldr	r7, [r1, #16]
 800ed1a:	2f00      	cmp	r7, #0
 800ed1c:	d0a9      	beq.n	800ec72 <__sflush_r+0x1a>
 800ed1e:	0793      	lsls	r3, r2, #30
 800ed20:	680e      	ldr	r6, [r1, #0]
 800ed22:	bf08      	it	eq
 800ed24:	694b      	ldreq	r3, [r1, #20]
 800ed26:	600f      	str	r7, [r1, #0]
 800ed28:	bf18      	it	ne
 800ed2a:	2300      	movne	r3, #0
 800ed2c:	eba6 0807 	sub.w	r8, r6, r7
 800ed30:	608b      	str	r3, [r1, #8]
 800ed32:	f1b8 0f00 	cmp.w	r8, #0
 800ed36:	dd9c      	ble.n	800ec72 <__sflush_r+0x1a>
 800ed38:	6a21      	ldr	r1, [r4, #32]
 800ed3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed3c:	4643      	mov	r3, r8
 800ed3e:	463a      	mov	r2, r7
 800ed40:	4628      	mov	r0, r5
 800ed42:	47b0      	blx	r6
 800ed44:	2800      	cmp	r0, #0
 800ed46:	dc06      	bgt.n	800ed56 <__sflush_r+0xfe>
 800ed48:	89a3      	ldrh	r3, [r4, #12]
 800ed4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed4e:	81a3      	strh	r3, [r4, #12]
 800ed50:	f04f 30ff 	mov.w	r0, #4294967295
 800ed54:	e78e      	b.n	800ec74 <__sflush_r+0x1c>
 800ed56:	4407      	add	r7, r0
 800ed58:	eba8 0800 	sub.w	r8, r8, r0
 800ed5c:	e7e9      	b.n	800ed32 <__sflush_r+0xda>
 800ed5e:	bf00      	nop
 800ed60:	20400001 	.word	0x20400001

0800ed64 <_fflush_r>:
 800ed64:	b538      	push	{r3, r4, r5, lr}
 800ed66:	690b      	ldr	r3, [r1, #16]
 800ed68:	4605      	mov	r5, r0
 800ed6a:	460c      	mov	r4, r1
 800ed6c:	b913      	cbnz	r3, 800ed74 <_fflush_r+0x10>
 800ed6e:	2500      	movs	r5, #0
 800ed70:	4628      	mov	r0, r5
 800ed72:	bd38      	pop	{r3, r4, r5, pc}
 800ed74:	b118      	cbz	r0, 800ed7e <_fflush_r+0x1a>
 800ed76:	6983      	ldr	r3, [r0, #24]
 800ed78:	b90b      	cbnz	r3, 800ed7e <_fflush_r+0x1a>
 800ed7a:	f000 f887 	bl	800ee8c <__sinit>
 800ed7e:	4b14      	ldr	r3, [pc, #80]	; (800edd0 <_fflush_r+0x6c>)
 800ed80:	429c      	cmp	r4, r3
 800ed82:	d11b      	bne.n	800edbc <_fflush_r+0x58>
 800ed84:	686c      	ldr	r4, [r5, #4]
 800ed86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d0ef      	beq.n	800ed6e <_fflush_r+0xa>
 800ed8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed90:	07d0      	lsls	r0, r2, #31
 800ed92:	d404      	bmi.n	800ed9e <_fflush_r+0x3a>
 800ed94:	0599      	lsls	r1, r3, #22
 800ed96:	d402      	bmi.n	800ed9e <_fflush_r+0x3a>
 800ed98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed9a:	f7ff fd22 	bl	800e7e2 <__retarget_lock_acquire_recursive>
 800ed9e:	4628      	mov	r0, r5
 800eda0:	4621      	mov	r1, r4
 800eda2:	f7ff ff59 	bl	800ec58 <__sflush_r>
 800eda6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eda8:	07da      	lsls	r2, r3, #31
 800edaa:	4605      	mov	r5, r0
 800edac:	d4e0      	bmi.n	800ed70 <_fflush_r+0xc>
 800edae:	89a3      	ldrh	r3, [r4, #12]
 800edb0:	059b      	lsls	r3, r3, #22
 800edb2:	d4dd      	bmi.n	800ed70 <_fflush_r+0xc>
 800edb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edb6:	f7ff fd15 	bl	800e7e4 <__retarget_lock_release_recursive>
 800edba:	e7d9      	b.n	800ed70 <_fflush_r+0xc>
 800edbc:	4b05      	ldr	r3, [pc, #20]	; (800edd4 <_fflush_r+0x70>)
 800edbe:	429c      	cmp	r4, r3
 800edc0:	d101      	bne.n	800edc6 <_fflush_r+0x62>
 800edc2:	68ac      	ldr	r4, [r5, #8]
 800edc4:	e7df      	b.n	800ed86 <_fflush_r+0x22>
 800edc6:	4b04      	ldr	r3, [pc, #16]	; (800edd8 <_fflush_r+0x74>)
 800edc8:	429c      	cmp	r4, r3
 800edca:	bf08      	it	eq
 800edcc:	68ec      	ldreq	r4, [r5, #12]
 800edce:	e7da      	b.n	800ed86 <_fflush_r+0x22>
 800edd0:	0800f654 	.word	0x0800f654
 800edd4:	0800f674 	.word	0x0800f674
 800edd8:	0800f634 	.word	0x0800f634

0800eddc <std>:
 800eddc:	2300      	movs	r3, #0
 800edde:	b510      	push	{r4, lr}
 800ede0:	4604      	mov	r4, r0
 800ede2:	e9c0 3300 	strd	r3, r3, [r0]
 800ede6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800edea:	6083      	str	r3, [r0, #8]
 800edec:	8181      	strh	r1, [r0, #12]
 800edee:	6643      	str	r3, [r0, #100]	; 0x64
 800edf0:	81c2      	strh	r2, [r0, #14]
 800edf2:	6183      	str	r3, [r0, #24]
 800edf4:	4619      	mov	r1, r3
 800edf6:	2208      	movs	r2, #8
 800edf8:	305c      	adds	r0, #92	; 0x5c
 800edfa:	f7fd fcf5 	bl	800c7e8 <memset>
 800edfe:	4b05      	ldr	r3, [pc, #20]	; (800ee14 <std+0x38>)
 800ee00:	6263      	str	r3, [r4, #36]	; 0x24
 800ee02:	4b05      	ldr	r3, [pc, #20]	; (800ee18 <std+0x3c>)
 800ee04:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee06:	4b05      	ldr	r3, [pc, #20]	; (800ee1c <std+0x40>)
 800ee08:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee0a:	4b05      	ldr	r3, [pc, #20]	; (800ee20 <std+0x44>)
 800ee0c:	6224      	str	r4, [r4, #32]
 800ee0e:	6323      	str	r3, [r4, #48]	; 0x30
 800ee10:	bd10      	pop	{r4, pc}
 800ee12:	bf00      	nop
 800ee14:	0800f091 	.word	0x0800f091
 800ee18:	0800f0b3 	.word	0x0800f0b3
 800ee1c:	0800f0eb 	.word	0x0800f0eb
 800ee20:	0800f10f 	.word	0x0800f10f

0800ee24 <_cleanup_r>:
 800ee24:	4901      	ldr	r1, [pc, #4]	; (800ee2c <_cleanup_r+0x8>)
 800ee26:	f000 b8af 	b.w	800ef88 <_fwalk_reent>
 800ee2a:	bf00      	nop
 800ee2c:	0800ed65 	.word	0x0800ed65

0800ee30 <__sfmoreglue>:
 800ee30:	b570      	push	{r4, r5, r6, lr}
 800ee32:	2268      	movs	r2, #104	; 0x68
 800ee34:	1e4d      	subs	r5, r1, #1
 800ee36:	4355      	muls	r5, r2
 800ee38:	460e      	mov	r6, r1
 800ee3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee3e:	f7fd fd47 	bl	800c8d0 <_malloc_r>
 800ee42:	4604      	mov	r4, r0
 800ee44:	b140      	cbz	r0, 800ee58 <__sfmoreglue+0x28>
 800ee46:	2100      	movs	r1, #0
 800ee48:	e9c0 1600 	strd	r1, r6, [r0]
 800ee4c:	300c      	adds	r0, #12
 800ee4e:	60a0      	str	r0, [r4, #8]
 800ee50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee54:	f7fd fcc8 	bl	800c7e8 <memset>
 800ee58:	4620      	mov	r0, r4
 800ee5a:	bd70      	pop	{r4, r5, r6, pc}

0800ee5c <__sfp_lock_acquire>:
 800ee5c:	4801      	ldr	r0, [pc, #4]	; (800ee64 <__sfp_lock_acquire+0x8>)
 800ee5e:	f7ff bcc0 	b.w	800e7e2 <__retarget_lock_acquire_recursive>
 800ee62:	bf00      	nop
 800ee64:	200010ed 	.word	0x200010ed

0800ee68 <__sfp_lock_release>:
 800ee68:	4801      	ldr	r0, [pc, #4]	; (800ee70 <__sfp_lock_release+0x8>)
 800ee6a:	f7ff bcbb 	b.w	800e7e4 <__retarget_lock_release_recursive>
 800ee6e:	bf00      	nop
 800ee70:	200010ed 	.word	0x200010ed

0800ee74 <__sinit_lock_acquire>:
 800ee74:	4801      	ldr	r0, [pc, #4]	; (800ee7c <__sinit_lock_acquire+0x8>)
 800ee76:	f7ff bcb4 	b.w	800e7e2 <__retarget_lock_acquire_recursive>
 800ee7a:	bf00      	nop
 800ee7c:	200010ee 	.word	0x200010ee

0800ee80 <__sinit_lock_release>:
 800ee80:	4801      	ldr	r0, [pc, #4]	; (800ee88 <__sinit_lock_release+0x8>)
 800ee82:	f7ff bcaf 	b.w	800e7e4 <__retarget_lock_release_recursive>
 800ee86:	bf00      	nop
 800ee88:	200010ee 	.word	0x200010ee

0800ee8c <__sinit>:
 800ee8c:	b510      	push	{r4, lr}
 800ee8e:	4604      	mov	r4, r0
 800ee90:	f7ff fff0 	bl	800ee74 <__sinit_lock_acquire>
 800ee94:	69a3      	ldr	r3, [r4, #24]
 800ee96:	b11b      	cbz	r3, 800eea0 <__sinit+0x14>
 800ee98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee9c:	f7ff bff0 	b.w	800ee80 <__sinit_lock_release>
 800eea0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eea4:	6523      	str	r3, [r4, #80]	; 0x50
 800eea6:	4b13      	ldr	r3, [pc, #76]	; (800eef4 <__sinit+0x68>)
 800eea8:	4a13      	ldr	r2, [pc, #76]	; (800eef8 <__sinit+0x6c>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	62a2      	str	r2, [r4, #40]	; 0x28
 800eeae:	42a3      	cmp	r3, r4
 800eeb0:	bf04      	itt	eq
 800eeb2:	2301      	moveq	r3, #1
 800eeb4:	61a3      	streq	r3, [r4, #24]
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	f000 f820 	bl	800eefc <__sfp>
 800eebc:	6060      	str	r0, [r4, #4]
 800eebe:	4620      	mov	r0, r4
 800eec0:	f000 f81c 	bl	800eefc <__sfp>
 800eec4:	60a0      	str	r0, [r4, #8]
 800eec6:	4620      	mov	r0, r4
 800eec8:	f000 f818 	bl	800eefc <__sfp>
 800eecc:	2200      	movs	r2, #0
 800eece:	60e0      	str	r0, [r4, #12]
 800eed0:	2104      	movs	r1, #4
 800eed2:	6860      	ldr	r0, [r4, #4]
 800eed4:	f7ff ff82 	bl	800eddc <std>
 800eed8:	68a0      	ldr	r0, [r4, #8]
 800eeda:	2201      	movs	r2, #1
 800eedc:	2109      	movs	r1, #9
 800eede:	f7ff ff7d 	bl	800eddc <std>
 800eee2:	68e0      	ldr	r0, [r4, #12]
 800eee4:	2202      	movs	r2, #2
 800eee6:	2112      	movs	r1, #18
 800eee8:	f7ff ff78 	bl	800eddc <std>
 800eeec:	2301      	movs	r3, #1
 800eeee:	61a3      	str	r3, [r4, #24]
 800eef0:	e7d2      	b.n	800ee98 <__sinit+0xc>
 800eef2:	bf00      	nop
 800eef4:	0800f2b8 	.word	0x0800f2b8
 800eef8:	0800ee25 	.word	0x0800ee25

0800eefc <__sfp>:
 800eefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eefe:	4607      	mov	r7, r0
 800ef00:	f7ff ffac 	bl	800ee5c <__sfp_lock_acquire>
 800ef04:	4b1e      	ldr	r3, [pc, #120]	; (800ef80 <__sfp+0x84>)
 800ef06:	681e      	ldr	r6, [r3, #0]
 800ef08:	69b3      	ldr	r3, [r6, #24]
 800ef0a:	b913      	cbnz	r3, 800ef12 <__sfp+0x16>
 800ef0c:	4630      	mov	r0, r6
 800ef0e:	f7ff ffbd 	bl	800ee8c <__sinit>
 800ef12:	3648      	adds	r6, #72	; 0x48
 800ef14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef18:	3b01      	subs	r3, #1
 800ef1a:	d503      	bpl.n	800ef24 <__sfp+0x28>
 800ef1c:	6833      	ldr	r3, [r6, #0]
 800ef1e:	b30b      	cbz	r3, 800ef64 <__sfp+0x68>
 800ef20:	6836      	ldr	r6, [r6, #0]
 800ef22:	e7f7      	b.n	800ef14 <__sfp+0x18>
 800ef24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef28:	b9d5      	cbnz	r5, 800ef60 <__sfp+0x64>
 800ef2a:	4b16      	ldr	r3, [pc, #88]	; (800ef84 <__sfp+0x88>)
 800ef2c:	60e3      	str	r3, [r4, #12]
 800ef2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ef32:	6665      	str	r5, [r4, #100]	; 0x64
 800ef34:	f7ff fc54 	bl	800e7e0 <__retarget_lock_init_recursive>
 800ef38:	f7ff ff96 	bl	800ee68 <__sfp_lock_release>
 800ef3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ef40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ef44:	6025      	str	r5, [r4, #0]
 800ef46:	61a5      	str	r5, [r4, #24]
 800ef48:	2208      	movs	r2, #8
 800ef4a:	4629      	mov	r1, r5
 800ef4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef50:	f7fd fc4a 	bl	800c7e8 <memset>
 800ef54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef60:	3468      	adds	r4, #104	; 0x68
 800ef62:	e7d9      	b.n	800ef18 <__sfp+0x1c>
 800ef64:	2104      	movs	r1, #4
 800ef66:	4638      	mov	r0, r7
 800ef68:	f7ff ff62 	bl	800ee30 <__sfmoreglue>
 800ef6c:	4604      	mov	r4, r0
 800ef6e:	6030      	str	r0, [r6, #0]
 800ef70:	2800      	cmp	r0, #0
 800ef72:	d1d5      	bne.n	800ef20 <__sfp+0x24>
 800ef74:	f7ff ff78 	bl	800ee68 <__sfp_lock_release>
 800ef78:	230c      	movs	r3, #12
 800ef7a:	603b      	str	r3, [r7, #0]
 800ef7c:	e7ee      	b.n	800ef5c <__sfp+0x60>
 800ef7e:	bf00      	nop
 800ef80:	0800f2b8 	.word	0x0800f2b8
 800ef84:	ffff0001 	.word	0xffff0001

0800ef88 <_fwalk_reent>:
 800ef88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef8c:	4606      	mov	r6, r0
 800ef8e:	4688      	mov	r8, r1
 800ef90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef94:	2700      	movs	r7, #0
 800ef96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef9a:	f1b9 0901 	subs.w	r9, r9, #1
 800ef9e:	d505      	bpl.n	800efac <_fwalk_reent+0x24>
 800efa0:	6824      	ldr	r4, [r4, #0]
 800efa2:	2c00      	cmp	r4, #0
 800efa4:	d1f7      	bne.n	800ef96 <_fwalk_reent+0xe>
 800efa6:	4638      	mov	r0, r7
 800efa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efac:	89ab      	ldrh	r3, [r5, #12]
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d907      	bls.n	800efc2 <_fwalk_reent+0x3a>
 800efb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800efb6:	3301      	adds	r3, #1
 800efb8:	d003      	beq.n	800efc2 <_fwalk_reent+0x3a>
 800efba:	4629      	mov	r1, r5
 800efbc:	4630      	mov	r0, r6
 800efbe:	47c0      	blx	r8
 800efc0:	4307      	orrs	r7, r0
 800efc2:	3568      	adds	r5, #104	; 0x68
 800efc4:	e7e9      	b.n	800ef9a <_fwalk_reent+0x12>

0800efc6 <__swhatbuf_r>:
 800efc6:	b570      	push	{r4, r5, r6, lr}
 800efc8:	460e      	mov	r6, r1
 800efca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efce:	2900      	cmp	r1, #0
 800efd0:	b096      	sub	sp, #88	; 0x58
 800efd2:	4614      	mov	r4, r2
 800efd4:	461d      	mov	r5, r3
 800efd6:	da08      	bge.n	800efea <__swhatbuf_r+0x24>
 800efd8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800efdc:	2200      	movs	r2, #0
 800efde:	602a      	str	r2, [r5, #0]
 800efe0:	061a      	lsls	r2, r3, #24
 800efe2:	d410      	bmi.n	800f006 <__swhatbuf_r+0x40>
 800efe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efe8:	e00e      	b.n	800f008 <__swhatbuf_r+0x42>
 800efea:	466a      	mov	r2, sp
 800efec:	f000 f8b6 	bl	800f15c <_fstat_r>
 800eff0:	2800      	cmp	r0, #0
 800eff2:	dbf1      	blt.n	800efd8 <__swhatbuf_r+0x12>
 800eff4:	9a01      	ldr	r2, [sp, #4]
 800eff6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800effa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800effe:	425a      	negs	r2, r3
 800f000:	415a      	adcs	r2, r3
 800f002:	602a      	str	r2, [r5, #0]
 800f004:	e7ee      	b.n	800efe4 <__swhatbuf_r+0x1e>
 800f006:	2340      	movs	r3, #64	; 0x40
 800f008:	2000      	movs	r0, #0
 800f00a:	6023      	str	r3, [r4, #0]
 800f00c:	b016      	add	sp, #88	; 0x58
 800f00e:	bd70      	pop	{r4, r5, r6, pc}

0800f010 <__smakebuf_r>:
 800f010:	898b      	ldrh	r3, [r1, #12]
 800f012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f014:	079d      	lsls	r5, r3, #30
 800f016:	4606      	mov	r6, r0
 800f018:	460c      	mov	r4, r1
 800f01a:	d507      	bpl.n	800f02c <__smakebuf_r+0x1c>
 800f01c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f020:	6023      	str	r3, [r4, #0]
 800f022:	6123      	str	r3, [r4, #16]
 800f024:	2301      	movs	r3, #1
 800f026:	6163      	str	r3, [r4, #20]
 800f028:	b002      	add	sp, #8
 800f02a:	bd70      	pop	{r4, r5, r6, pc}
 800f02c:	ab01      	add	r3, sp, #4
 800f02e:	466a      	mov	r2, sp
 800f030:	f7ff ffc9 	bl	800efc6 <__swhatbuf_r>
 800f034:	9900      	ldr	r1, [sp, #0]
 800f036:	4605      	mov	r5, r0
 800f038:	4630      	mov	r0, r6
 800f03a:	f7fd fc49 	bl	800c8d0 <_malloc_r>
 800f03e:	b948      	cbnz	r0, 800f054 <__smakebuf_r+0x44>
 800f040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f044:	059a      	lsls	r2, r3, #22
 800f046:	d4ef      	bmi.n	800f028 <__smakebuf_r+0x18>
 800f048:	f023 0303 	bic.w	r3, r3, #3
 800f04c:	f043 0302 	orr.w	r3, r3, #2
 800f050:	81a3      	strh	r3, [r4, #12]
 800f052:	e7e3      	b.n	800f01c <__smakebuf_r+0xc>
 800f054:	4b0d      	ldr	r3, [pc, #52]	; (800f08c <__smakebuf_r+0x7c>)
 800f056:	62b3      	str	r3, [r6, #40]	; 0x28
 800f058:	89a3      	ldrh	r3, [r4, #12]
 800f05a:	6020      	str	r0, [r4, #0]
 800f05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f060:	81a3      	strh	r3, [r4, #12]
 800f062:	9b00      	ldr	r3, [sp, #0]
 800f064:	6163      	str	r3, [r4, #20]
 800f066:	9b01      	ldr	r3, [sp, #4]
 800f068:	6120      	str	r0, [r4, #16]
 800f06a:	b15b      	cbz	r3, 800f084 <__smakebuf_r+0x74>
 800f06c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f070:	4630      	mov	r0, r6
 800f072:	f000 f885 	bl	800f180 <_isatty_r>
 800f076:	b128      	cbz	r0, 800f084 <__smakebuf_r+0x74>
 800f078:	89a3      	ldrh	r3, [r4, #12]
 800f07a:	f023 0303 	bic.w	r3, r3, #3
 800f07e:	f043 0301 	orr.w	r3, r3, #1
 800f082:	81a3      	strh	r3, [r4, #12]
 800f084:	89a0      	ldrh	r0, [r4, #12]
 800f086:	4305      	orrs	r5, r0
 800f088:	81a5      	strh	r5, [r4, #12]
 800f08a:	e7cd      	b.n	800f028 <__smakebuf_r+0x18>
 800f08c:	0800ee25 	.word	0x0800ee25

0800f090 <__sread>:
 800f090:	b510      	push	{r4, lr}
 800f092:	460c      	mov	r4, r1
 800f094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f098:	f000 f894 	bl	800f1c4 <_read_r>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	bfab      	itete	ge
 800f0a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0a2:	89a3      	ldrhlt	r3, [r4, #12]
 800f0a4:	181b      	addge	r3, r3, r0
 800f0a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f0aa:	bfac      	ite	ge
 800f0ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800f0ae:	81a3      	strhlt	r3, [r4, #12]
 800f0b0:	bd10      	pop	{r4, pc}

0800f0b2 <__swrite>:
 800f0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b6:	461f      	mov	r7, r3
 800f0b8:	898b      	ldrh	r3, [r1, #12]
 800f0ba:	05db      	lsls	r3, r3, #23
 800f0bc:	4605      	mov	r5, r0
 800f0be:	460c      	mov	r4, r1
 800f0c0:	4616      	mov	r6, r2
 800f0c2:	d505      	bpl.n	800f0d0 <__swrite+0x1e>
 800f0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0c8:	2302      	movs	r3, #2
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f000 f868 	bl	800f1a0 <_lseek_r>
 800f0d0:	89a3      	ldrh	r3, [r4, #12]
 800f0d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f0da:	81a3      	strh	r3, [r4, #12]
 800f0dc:	4632      	mov	r2, r6
 800f0de:	463b      	mov	r3, r7
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0e6:	f000 b817 	b.w	800f118 <_write_r>

0800f0ea <__sseek>:
 800f0ea:	b510      	push	{r4, lr}
 800f0ec:	460c      	mov	r4, r1
 800f0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0f2:	f000 f855 	bl	800f1a0 <_lseek_r>
 800f0f6:	1c43      	adds	r3, r0, #1
 800f0f8:	89a3      	ldrh	r3, [r4, #12]
 800f0fa:	bf15      	itete	ne
 800f0fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f0fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f106:	81a3      	strheq	r3, [r4, #12]
 800f108:	bf18      	it	ne
 800f10a:	81a3      	strhne	r3, [r4, #12]
 800f10c:	bd10      	pop	{r4, pc}

0800f10e <__sclose>:
 800f10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f112:	f000 b813 	b.w	800f13c <_close_r>
	...

0800f118 <_write_r>:
 800f118:	b538      	push	{r3, r4, r5, lr}
 800f11a:	4d07      	ldr	r5, [pc, #28]	; (800f138 <_write_r+0x20>)
 800f11c:	4604      	mov	r4, r0
 800f11e:	4608      	mov	r0, r1
 800f120:	4611      	mov	r1, r2
 800f122:	2200      	movs	r2, #0
 800f124:	602a      	str	r2, [r5, #0]
 800f126:	461a      	mov	r2, r3
 800f128:	f7f6 fa91 	bl	800564e <_write>
 800f12c:	1c43      	adds	r3, r0, #1
 800f12e:	d102      	bne.n	800f136 <_write_r+0x1e>
 800f130:	682b      	ldr	r3, [r5, #0]
 800f132:	b103      	cbz	r3, 800f136 <_write_r+0x1e>
 800f134:	6023      	str	r3, [r4, #0]
 800f136:	bd38      	pop	{r3, r4, r5, pc}
 800f138:	200010e8 	.word	0x200010e8

0800f13c <_close_r>:
 800f13c:	b538      	push	{r3, r4, r5, lr}
 800f13e:	4d06      	ldr	r5, [pc, #24]	; (800f158 <_close_r+0x1c>)
 800f140:	2300      	movs	r3, #0
 800f142:	4604      	mov	r4, r0
 800f144:	4608      	mov	r0, r1
 800f146:	602b      	str	r3, [r5, #0]
 800f148:	f7f6 fa9d 	bl	8005686 <_close>
 800f14c:	1c43      	adds	r3, r0, #1
 800f14e:	d102      	bne.n	800f156 <_close_r+0x1a>
 800f150:	682b      	ldr	r3, [r5, #0]
 800f152:	b103      	cbz	r3, 800f156 <_close_r+0x1a>
 800f154:	6023      	str	r3, [r4, #0]
 800f156:	bd38      	pop	{r3, r4, r5, pc}
 800f158:	200010e8 	.word	0x200010e8

0800f15c <_fstat_r>:
 800f15c:	b538      	push	{r3, r4, r5, lr}
 800f15e:	4d07      	ldr	r5, [pc, #28]	; (800f17c <_fstat_r+0x20>)
 800f160:	2300      	movs	r3, #0
 800f162:	4604      	mov	r4, r0
 800f164:	4608      	mov	r0, r1
 800f166:	4611      	mov	r1, r2
 800f168:	602b      	str	r3, [r5, #0]
 800f16a:	f7f6 fa98 	bl	800569e <_fstat>
 800f16e:	1c43      	adds	r3, r0, #1
 800f170:	d102      	bne.n	800f178 <_fstat_r+0x1c>
 800f172:	682b      	ldr	r3, [r5, #0]
 800f174:	b103      	cbz	r3, 800f178 <_fstat_r+0x1c>
 800f176:	6023      	str	r3, [r4, #0]
 800f178:	bd38      	pop	{r3, r4, r5, pc}
 800f17a:	bf00      	nop
 800f17c:	200010e8 	.word	0x200010e8

0800f180 <_isatty_r>:
 800f180:	b538      	push	{r3, r4, r5, lr}
 800f182:	4d06      	ldr	r5, [pc, #24]	; (800f19c <_isatty_r+0x1c>)
 800f184:	2300      	movs	r3, #0
 800f186:	4604      	mov	r4, r0
 800f188:	4608      	mov	r0, r1
 800f18a:	602b      	str	r3, [r5, #0]
 800f18c:	f7f6 fa97 	bl	80056be <_isatty>
 800f190:	1c43      	adds	r3, r0, #1
 800f192:	d102      	bne.n	800f19a <_isatty_r+0x1a>
 800f194:	682b      	ldr	r3, [r5, #0]
 800f196:	b103      	cbz	r3, 800f19a <_isatty_r+0x1a>
 800f198:	6023      	str	r3, [r4, #0]
 800f19a:	bd38      	pop	{r3, r4, r5, pc}
 800f19c:	200010e8 	.word	0x200010e8

0800f1a0 <_lseek_r>:
 800f1a0:	b538      	push	{r3, r4, r5, lr}
 800f1a2:	4d07      	ldr	r5, [pc, #28]	; (800f1c0 <_lseek_r+0x20>)
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	4608      	mov	r0, r1
 800f1a8:	4611      	mov	r1, r2
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	602a      	str	r2, [r5, #0]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	f7f6 fa90 	bl	80056d4 <_lseek>
 800f1b4:	1c43      	adds	r3, r0, #1
 800f1b6:	d102      	bne.n	800f1be <_lseek_r+0x1e>
 800f1b8:	682b      	ldr	r3, [r5, #0]
 800f1ba:	b103      	cbz	r3, 800f1be <_lseek_r+0x1e>
 800f1bc:	6023      	str	r3, [r4, #0]
 800f1be:	bd38      	pop	{r3, r4, r5, pc}
 800f1c0:	200010e8 	.word	0x200010e8

0800f1c4 <_read_r>:
 800f1c4:	b538      	push	{r3, r4, r5, lr}
 800f1c6:	4d07      	ldr	r5, [pc, #28]	; (800f1e4 <_read_r+0x20>)
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	4608      	mov	r0, r1
 800f1cc:	4611      	mov	r1, r2
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	602a      	str	r2, [r5, #0]
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	f7f6 fa1e 	bl	8005614 <_read>
 800f1d8:	1c43      	adds	r3, r0, #1
 800f1da:	d102      	bne.n	800f1e2 <_read_r+0x1e>
 800f1dc:	682b      	ldr	r3, [r5, #0]
 800f1de:	b103      	cbz	r3, 800f1e2 <_read_r+0x1e>
 800f1e0:	6023      	str	r3, [r4, #0]
 800f1e2:	bd38      	pop	{r3, r4, r5, pc}
 800f1e4:	200010e8 	.word	0x200010e8

0800f1e8 <_init>:
 800f1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ea:	bf00      	nop
 800f1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ee:	bc08      	pop	{r3}
 800f1f0:	469e      	mov	lr, r3
 800f1f2:	4770      	bx	lr

0800f1f4 <_fini>:
 800f1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f6:	bf00      	nop
 800f1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1fa:	bc08      	pop	{r3}
 800f1fc:	469e      	mov	lr, r3
 800f1fe:	4770      	bx	lr
