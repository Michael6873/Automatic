
f4_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f060  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000864  0800f200  0800f200  0001f200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa64  0800fa64  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa64  0800fa64  0001fa64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa6c  0800fa6c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fa6c  0800fa6c  0001fa6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800fa74  0800fa74  0001fa74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800fa7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  200001dc  0800fc58  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b3c  0800fc58  00020b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca94  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eb2  00000000  00000000  0003cca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  0003fb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001628  00000000  00000000  00041240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b248  00000000  00000000  00042868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158c6  00000000  00000000  0005dab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a26e5  00000000  00000000  00073376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115a5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c7c  00000000  00000000  00115aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f1e8 	.word	0x0800f1e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800f1e8 	.word	0x0800f1e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <_ZN7RPLidar3endEv>:

extern UART_HandleTypeDef huart2; // Дескриптор UART1
static bool uart1_is_open = false;

// Закрытие UART1
void RPLidar::end() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    if (isOpen()) {
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f811 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <_ZN7RPLidar3endEv+0x20>
        HAL_UART_DeInit(&huart2); // Деинициализация UART1
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <_ZN7RPLidar3endEv+0x28>)
 8000f72:	f008 fccc 	bl	800990e <HAL_UART_DeInit>
        uart1_is_open = false;    // Отмечаем UART как закрытый
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <_ZN7RPLidar3endEv+0x2c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
    }
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000a1c 	.word	0x20000a1c
 8000f88:	200001f8 	.word	0x200001f8

08000f8c <_ZN7RPLidar6isOpenEv>:

// Проверка состояния UART1 (открыт или закрыт)
bool RPLidar::isOpen() {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
    return uart1_is_open; // Возвращаем текущее состояние UART1
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <_ZN7RPLidar6isOpenEv+0x18>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	200001f8 	.word	0x200001f8

08000fa8 <_ZN7RPLidarC1Ev>:

RPLidar::RPLidar() {
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < sizeof(distances) / sizeof(distances[0]); ++i) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000fba:	d80c      	bhi.n	8000fd6 <_ZN7RPLidarC1Ev+0x2e>
        distances[i] = 0.0f;
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(distances) / sizeof(distances[0]); ++i) {
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	e7ee      	b.n	8000fb4 <_ZN7RPLidarC1Ev+0xc>
    }
    _currentMeasurement.distance = 0;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
    _currentMeasurement.angle = 0;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
    _currentMeasurement.quality = 0;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	721a      	strb	r2, [r3, #8]
    _currentMeasurement.startBit = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	725a      	strb	r2, [r3, #9]
}
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <_ZN7RPLidarD1Ev>:


RPLidar::~RPLidar()
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
{
    end();
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ffa7 	bl	8000f5c <_ZN7RPLidar3endEv>
}
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <_ZN7RPLidar5beginEv>:


// Инициализация UART1 для работы с RPLIDAR
bool RPLidar::begin() {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    // Если UART уже открыт, завершаем его работу
    if (isOpen()) {
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ffb3 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
   // huart2.Init.Mode = UART_MODE_TX_RX;
   // huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   // huart2.Init.OverSampling = UART_OVERSAMPLING_16;

    // Инициализация UART1
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001026:	480a      	ldr	r0, [pc, #40]	; (8001050 <_ZN7RPLidar5beginEv+0x38>)
 8001028:	f008 fc24 	bl	8009874 <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	bf14      	ite	ne
 8001032:	2301      	movne	r3, #1
 8001034:	2300      	moveq	r3, #0
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <_ZN7RPLidar5beginEv+0x28>
        return false; // Если инициализация не удалась
 800103c:	2300      	movs	r3, #0
 800103e:	e003      	b.n	8001048 <_ZN7RPLidar5beginEv+0x30>
    }

    // Отмечаем UART как открытый
    uart1_is_open = true;
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <_ZN7RPLidar5beginEv+0x3c>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
    return true;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000a1c 	.word	0x20000a1c
 8001054:	200001f8 	.word	0x200001f8

08001058 <_ZN7RPLidar12_sendCommandEhPKvj>:

uint32_t RPLidar::_sendCommand(uint8_t cmd, const void *payload, size_t payloadsize) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	460b      	mov	r3, r1
 8001066:	72fb      	strb	r3, [r7, #11]
    rplidar_cmd_packet_t pkt_header;
    uint8_t checksum = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	75fb      	strb	r3, [r7, #23]
    HAL_StatusTypeDef status;

    // Проверяем наличие полезной нагрузки
    if (payloadsize && payload) {
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d006      	beq.n	8001080 <_ZN7RPLidar12_sendCommandEhPKvj+0x28>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <_ZN7RPLidar12_sendCommandEhPKvj+0x28>
        cmd |= RPLIDAR_CMDFLAG_HAS_PAYLOAD;
 8001078:	7afb      	ldrb	r3, [r7, #11]
 800107a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800107e:	72fb      	strb	r3, [r7, #11]
    }

    // Формируем заголовок команды
    pkt_header.syncByte = RPLIDAR_CMD_SYNC_BYTE;
 8001080:	23a5      	movs	r3, #165	; 0xa5
 8001082:	763b      	strb	r3, [r7, #24]
    pkt_header.cmd_flag = cmd;
 8001084:	7afb      	ldrb	r3, [r7, #11]
 8001086:	767b      	strb	r3, [r7, #25]

    // Отправляем заголовок (2 байта)
    status = HAL_UART_Transmit(&huart2, (uint8_t *)&pkt_header, sizeof(pkt_header), HAL_MAX_DELAY);
 8001088:	f107 0118 	add.w	r1, r7, #24
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	2203      	movs	r2, #3
 8001092:	4833      	ldr	r0, [pc, #204]	; (8001160 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 8001094:	f008 fc6a 	bl	800996c <HAL_UART_Transmit>
 8001098:	4603      	mov	r3, r0
 800109a:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) {
 800109c:	7efb      	ldrb	r3, [r7, #27]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <_ZN7RPLidar12_sendCommandEhPKvj+0x4e>
        return RESULT_OPERATION_FAIL; // Если произошла ошибка при передаче, возвращаем ошибку
 80010a2:	4b30      	ldr	r3, [pc, #192]	; (8001164 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 80010a4:	e057      	b.n	8001156 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
    }

    // Если есть полезная нагрузка
    if (cmd & RPLIDAR_CMDFLAG_HAS_PAYLOAD) {
 80010a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da52      	bge.n	8001154 <_ZN7RPLidar12_sendCommandEhPKvj+0xfc>
        // Инициализируем контрольную сумму
        checksum ^= RPLIDAR_CMD_SYNC_BYTE;
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
 80010b0:	f083 035a 	eor.w	r3, r3, #90	; 0x5a
 80010b4:	43db      	mvns	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	75fb      	strb	r3, [r7, #23]
        checksum ^= cmd;
 80010ba:	7dfa      	ldrb	r2, [r7, #23]
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	4053      	eors	r3, r2
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	75fb      	strb	r3, [r7, #23]
        checksum ^= (payloadsize & 0xFF);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	4053      	eors	r3, r2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	75fb      	strb	r3, [r7, #23]

        // Вычисляем контрольную сумму для полезной нагрузки
        for (size_t pos = 0; pos < payloadsize; ++pos) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d20b      	bcs.n	80010f4 <_ZN7RPLidar12_sendCommandEhPKvj+0x9c>
            checksum ^= ((uint8_t *)payload)[pos];
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	4413      	add	r3, r2
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	4053      	eors	r3, r2
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	75fb      	strb	r3, [r7, #23]
        for (size_t pos = 0; pos < payloadsize; ++pos) {
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	3301      	adds	r3, #1
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	e7ef      	b.n	80010d4 <_ZN7RPLidar12_sendCommandEhPKvj+0x7c>
        }

        // Отправляем размер полезной нагрузки (1 байт)
        uint8_t sizebyte = (uint8_t)payloadsize;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	75bb      	strb	r3, [r7, #22]
        status = HAL_UART_Transmit(&huart2, &sizebyte, 1, HAL_MAX_DELAY);
 80010fa:	f107 0116 	add.w	r1, r7, #22
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	2201      	movs	r2, #1
 8001104:	4816      	ldr	r0, [pc, #88]	; (8001160 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 8001106:	f008 fc31 	bl	800996c <HAL_UART_Transmit>
 800110a:	4603      	mov	r3, r0
 800110c:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 800110e:	7efb      	ldrb	r3, [r7, #27]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <_ZN7RPLidar12_sendCommandEhPKvj+0xc0>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001116:	e01e      	b.n	8001156 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }

        // Отправляем полезную нагрузку
        status = HAL_UART_Transmit(&huart2, (uint8_t *)payload, payloadsize, HAL_MAX_DELAY);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b29a      	uxth	r2, r3
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	480f      	ldr	r0, [pc, #60]	; (8001160 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 8001124:	f008 fc22 	bl	800996c <HAL_UART_Transmit>
 8001128:	4603      	mov	r3, r0
 800112a:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 800112c:	7efb      	ldrb	r3, [r7, #27]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <_ZN7RPLidar12_sendCommandEhPKvj+0xde>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001134:	e00f      	b.n	8001156 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }

        // Отправляем контрольную сумму (1 байт)
        status = HAL_UART_Transmit(&huart2, &checksum, 1, HAL_MAX_DELAY);
 8001136:	f107 0117 	add.w	r1, r7, #23
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	2201      	movs	r2, #1
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 8001142:	f008 fc13 	bl	800996c <HAL_UART_Transmit>
 8001146:	4603      	mov	r3, r0
 8001148:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 800114a:	7efb      	ldrb	r3, [r7, #27]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <_ZN7RPLidar12_sendCommandEhPKvj+0xfc>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001152:	e000      	b.n	8001156 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }
    }

    return RESULT_OK; // Если все данные успешно отправлены
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000a1c 	.word	0x20000a1c
 8001164:	80008001 	.word	0x80008001

08001168 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>:


uint32_t RPLidar::_waitResponseHeader(rplidar_ans_header_t *header, uint32_t timeout) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
    uint32_t startTick = HAL_GetTick(); // Запоминаем начальное время
 8001174:	f004 f83a 	bl	80051ec <HAL_GetTick>
 8001178:	61b8      	str	r0, [r7, #24]
    uint8_t recvPos = 0; // Текущая позиция приёмного буфера
 800117a:	2300      	movs	r3, #0
 800117c:	77fb      	strb	r3, [r7, #31]
    uint8_t *headerbuf = (uint8_t *)header; // Преобразуем указатель на заголовок к массиву байтов
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	617b      	str	r3, [r7, #20]
    uint8_t currentByte;

    while ((HAL_GetTick() - startTick) < timeout) { // Пока не истёк таймаут
 8001182:	f004 f833 	bl	80051ec <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	429a      	cmp	r2, r3
 8001190:	bf8c      	ite	hi
 8001192:	2301      	movhi	r3, #1
 8001194:	2300      	movls	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d039      	beq.n	8001210 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa8>
        // Считываем один байт через UART
        HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, &currentByte, 1, timeout - (HAL_GetTick() - startTick));
 800119c:	f004 f826 	bl	80051ec <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	1a9a      	subs	r2, r3, r2
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	f107 0112 	add.w	r1, r7, #18
 80011ae:	2201      	movs	r2, #1
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb4>)
 80011b2:	f008 fc6d 	bl	8009a90 <HAL_UART_Receive>
 80011b6:	4603      	mov	r3, r0
 80011b8:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK) { // Если байт успешно прочитан
 80011ba:	7cfb      	ldrb	r3, [r7, #19]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d11f      	bne.n	8001200 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x98>
            switch (recvPos) {
 80011c0:	7ffb      	ldrb	r3, [r7, #31]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x64>
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d004      	beq.n	80011d4 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x6c>
 80011ca:	e00c      	b.n	80011e6 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7e>
                case 0:
                    // Проверяем первый синхронизирующий байт
                    if (currentByte != RPLIDAR_ANS_SYNC_BYTE1) {
 80011cc:	7cbb      	ldrb	r3, [r7, #18]
 80011ce:	2ba5      	cmp	r3, #165	; 0xa5
 80011d0:	d006      	beq.n	80011e0 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x78>
                        continue; // Если не совпадает, игнорируем байт и продолжаем
 80011d2:	e01c      	b.n	800120e <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa6>
                    }
                    break;
                case 1:
                    // Проверяем второй синхронизирующий байт
                    if (currentByte != RPLIDAR_ANS_SYNC_BYTE2) {
 80011d4:	7cbb      	ldrb	r3, [r7, #18]
 80011d6:	2b5a      	cmp	r3, #90	; 0x5a
 80011d8:	d004      	beq.n	80011e4 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7c>
                        recvPos = 0; // Если не совпадает, сбрасываем позицию
 80011da:	2300      	movs	r3, #0
 80011dc:	77fb      	strb	r3, [r7, #31]
                        continue;
 80011de:	e016      	b.n	800120e <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa6>
                    break;
 80011e0:	bf00      	nop
 80011e2:	e000      	b.n	80011e6 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7e>
                    }
                    break;
 80011e4:	bf00      	nop
            }
            // Записываем байт в буфер заголовка
            headerbuf[recvPos++] = currentByte;
 80011e6:	7ffb      	ldrb	r3, [r7, #31]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	77fa      	strb	r2, [r7, #31]
 80011ec:	461a      	mov	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	4413      	add	r3, r2
 80011f2:	7cba      	ldrb	r2, [r7, #18]
 80011f4:	701a      	strb	r2, [r3, #0]

            // Если заголовок полностью считан
            if (recvPos == sizeof(rplidar_ans_header_t)) return RESULT_OK; // Возвращаем успешный результат
 80011f6:	7ffb      	ldrb	r3, [r7, #31]
 80011f8:	2b07      	cmp	r3, #7
 80011fa:	d1c2      	bne.n	8001182 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x1a>
 80011fc:	2300      	movs	r3, #0
 80011fe:	e008      	b.n	8001212 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
        }
        else if (status == HAL_TIMEOUT) return RESULT_OPERATION_TIMEOUT; // Если истёк таймаут
 8001200:	7cfb      	ldrb	r3, [r7, #19]
 8001202:	2b03      	cmp	r3, #3
 8001204:	d101      	bne.n	800120a <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa2>
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb8>)
 8001208:	e003      	b.n	8001212 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
        else return RESULT_OPERATION_FAIL; // Если произошла ошибка
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xbc>)
 800120c:	e001      	b.n	8001212 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
    while ((HAL_GetTick() - startTick) < timeout) { // Пока не истёк таймаут
 800120e:	e7b8      	b.n	8001182 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x1a>
    }

    return RESULT_OPERATION_TIMEOUT; // Если цикл завершился без успешного завершения
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb8>)
}
 8001212:	4618      	mov	r0, r3
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000a1c 	.word	0x20000a1c
 8001220:	80008002 	.word	0x80008002
 8001224:	80008001 	.word	0x80008001

08001228 <_ZN7RPLidar4stopEv>:
    // Если время ожидания истекло
    return RESULT_OPERATION_TIMEOUT;
}

uint32_t RPLidar::stop()
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    if (!isOpen()) return RESULT_OPERATION_FAIL;
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff feab 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 8001236:	4603      	mov	r3, r0
 8001238:	f083 0301 	eor.w	r3, r3, #1
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <_ZN7RPLidar4stopEv+0x1e>
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <_ZN7RPLidar4stopEv+0x38>)
 8001244:	e007      	b.n	8001256 <_ZN7RPLidar4stopEv+0x2e>
    uint32_t ans = _sendCommand(RPLIDAR_CMD_STOP,NULL,0);
 8001246:	2300      	movs	r3, #0
 8001248:	2200      	movs	r2, #0
 800124a:	2125      	movs	r1, #37	; 0x25
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff03 	bl	8001058 <_ZN7RPLidar12_sendCommandEhPKvj>
 8001252:	60f8      	str	r0, [r7, #12]
    return ans;
 8001254:	68fb      	ldr	r3, [r7, #12]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	80008001 	.word	0x80008001

08001264 <_ZN7RPLidar9startScanEbm>:

uint32_t RPLidar::startScan(bool force, uint32_t timeout) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	460b      	mov	r3, r1
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	72fb      	strb	r3, [r7, #11]
    uint32_t ans;

    // Проверяем, открыт ли UART
    if (!isOpen()) return RESULT_OPERATION_FAIL;
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f7ff fe8a 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 8001278:	4603      	mov	r3, r0
 800127a:	f083 0301 	eor.w	r3, r3, #1
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <_ZN7RPLidar9startScanEbm+0x24>
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <_ZN7RPLidar9startScanEbm+0x9c>)
 8001286:	e036      	b.n	80012f6 <_ZN7RPLidar9startScanEbm+0x92>

    // Останавливаем предыдущую операцию
    stop();
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff ffcd 	bl	8001228 <_ZN7RPLidar4stopEv>

    // Отправляем команду на сканирование

        uint8_t command = force ? RPLIDAR_CMD_FORCE_SCAN : RPLIDAR_CMD_SCAN;
 800128e:	7afb      	ldrb	r3, [r7, #11]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <_ZN7RPLidar9startScanEbm+0x34>
 8001294:	2321      	movs	r3, #33	; 0x21
 8001296:	e000      	b.n	800129a <_ZN7RPLidar9startScanEbm+0x36>
 8001298:	2320      	movs	r3, #32
 800129a:	77fb      	strb	r3, [r7, #31]
        ans = _sendCommand(command, NULL, 0);
 800129c:	7ff9      	ldrb	r1, [r7, #31]
 800129e:	2300      	movs	r3, #0
 80012a0:	2200      	movs	r2, #0
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f7ff fed8 	bl	8001058 <_ZN7RPLidar12_sendCommandEhPKvj>
 80012a8:	61b8      	str	r0, [r7, #24]
        if (IS_FAIL(ans)) return ans;
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	da01      	bge.n	80012b4 <_ZN7RPLidar9startScanEbm+0x50>
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	e020      	b.n	80012f6 <_ZN7RPLidar9startScanEbm+0x92>

        // Ожидание заголовка подтверждения
        rplidar_ans_header_t response_header;
        if (IS_FAIL(ans = _waitResponseHeader(&response_header, timeout))) return ans;
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4619      	mov	r1, r3
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f7ff ff53 	bl	8001168 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>
 80012c2:	61b8      	str	r0, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	0fdb      	lsrs	r3, r3, #31
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <_ZN7RPLidar9startScanEbm+0x6e>
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	e011      	b.n	80012f6 <_ZN7RPLidar9startScanEbm+0x92>

        // Проверяем тип заголовка
        if (response_header.type != RPLIDAR_ANS_TYPE_MEASUREMENT) return RESULT_INVALID_DATA;
 80012d2:	7dbb      	ldrb	r3, [r7, #22]
 80012d4:	2b81      	cmp	r3, #129	; 0x81
 80012d6:	d002      	beq.n	80012de <_ZN7RPLidar9startScanEbm+0x7a>
 80012d8:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80012dc:	e00b      	b.n	80012f6 <_ZN7RPLidar9startScanEbm+0x92>

        // Проверяем размер заголовка
        if (response_header.size < sizeof(rplidar_response_measurement_node_t)) return RESULT_INVALID_DATA;
 80012de:	8a7b      	ldrh	r3, [r7, #18]
 80012e0:	8aba      	ldrh	r2, [r7, #20]
 80012e2:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80012e6:	0412      	lsls	r2, r2, #16
 80012e8:	4313      	orrs	r3, r2
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d802      	bhi.n	80012f4 <_ZN7RPLidar9startScanEbm+0x90>
 80012ee:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80012f2:	e000      	b.n	80012f6 <_ZN7RPLidar9startScanEbm+0x92>


    return RESULT_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	80008001 	.word	0x80008001

08001304 <_ZN7RPLidar12getDistancesEv>:
float* RPLidar::getDistances() {  // Аргумент по умолчанию здесь не указывается
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    return distances;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	330c      	adds	r3, #12
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_ZN7RPLidar12getDistancesEi>:

void RPLidar::setDistances(uint32_t i, float value){
	distances[i] = value;
}

float RPLidar::getDistances(int i) {  // Аргумент по умолчанию здесь не указывается
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
    return distances[i];
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	3302      	adds	r3, #2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	3304      	adds	r3, #4
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	ee07 3a90 	vmov	s15, r3
}
 8001338:	eeb0 0a67 	vmov.f32	s0, s15
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_ZN7RPLidar9constrainElll>:
float RPLidar::constrain(int32_t value,int32_t num1,int32_t num2){
 8001346:	b480      	push	{r7}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	603b      	str	r3, [r7, #0]
	if (value>num2) value = num2;
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	dd01      	ble.n	8001360 <_ZN7RPLidar9constrainElll+0x1a>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	60bb      	str	r3, [r7, #8]
	if (value<num1) value = num1;
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	da01      	bge.n	800136c <_ZN7RPLidar9constrainElll+0x26>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	60bb      	str	r3, [r7, #8]
	return value;
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001376:	eeb0 0a67 	vmov.f32	s0, s15
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <_ZN7RPLidar9waitPointEm>:

uint32_t RPLidar::waitPoint(uint32_t timeout) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	; 0x30
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
    uint32_t currentTs = HAL_GetTick(); // Получаем текущее время
 800138e:	f003 ff2d 	bl	80051ec <HAL_GetTick>
 8001392:	62b8      	str	r0, [r7, #40]	; 0x28
    uint32_t remainingtime;
    rplidar_response_measurement_node_t node;
    uint8_t *nodebuf = (uint8_t *)&node;
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t recvPos = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    while ((remainingtime = HAL_GetTick() - currentTs) <= timeout) {
 80013a0:	f003 ff24 	bl	80051ec <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	623b      	str	r3, [r7, #32]
 80013ac:	6a3a      	ldr	r2, [r7, #32]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	bf94      	ite	ls
 80013b4:	2301      	movls	r3, #1
 80013b6:	2300      	movhi	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 80b7 	beq.w	800152e <_ZN7RPLidar9waitPointEm+0x1aa>
        uint8_t currentbyte;
        HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, &currentbyte, 1, timeout);
 80013c0:	f107 010b 	add.w	r1, r7, #11
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	2201      	movs	r2, #1
 80013c8:	485b      	ldr	r0, [pc, #364]	; (8001538 <_ZN7RPLidar9waitPointEm+0x1b4>)
 80013ca:	f008 fb61 	bl	8009a90 <HAL_UART_Receive>
 80013ce:	4603      	mov	r3, r0
 80013d0:	77fb      	strb	r3, [r7, #31]

        // Проверяем, успешно ли получен байт
        if (status != HAL_OK) continue; // Пропускаем итерацию, если байт не был получен
 80013d2:	7ffb      	ldrb	r3, [r7, #31]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f040 80a8 	bne.w	800152a <_ZN7RPLidar9waitPointEm+0x1a6>

        switch (recvPos) {
 80013da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <_ZN7RPLidar9waitPointEm+0x64>
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d00c      	beq.n	8001400 <_ZN7RPLidar9waitPointEm+0x7c>
 80013e6:	e017      	b.n	8001418 <_ZN7RPLidar9waitPointEm+0x94>
            case 0: // Ожидаем бит синхронизации и его инверсии
                {
                    uint8_t tmp = (currentbyte >> 1);
 80013e8:	7afb      	ldrb	r3, [r7, #11]
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	77bb      	strb	r3, [r7, #30]
                    if ((tmp ^ currentbyte) & 0x1){} // Проходит проверку
 80013ee:	7afa      	ldrb	r2, [r7, #11]
 80013f0:	7fbb      	ldrb	r3, [r7, #30]
 80013f2:	4053      	eors	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d109      	bne.n	8001412 <_ZN7RPLidar9waitPointEm+0x8e>
                    else continue; // Если проверка не прошла, ждём следующий байт
 80013fe:	e095      	b.n	800152c <_ZN7RPLidar9waitPointEm+0x1a8>
                }
                break;

            case 1: // Ожидаем, что самый старший бит равен 1
                {
                    if (currentbyte & RPLIDAR_RESP_MEASUREMENT_CHECKBIT) {} // Проходит проверку
 8001400:	7afb      	ldrb	r3, [r7, #11]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d105      	bne.n	8001416 <_ZN7RPLidar9waitPointEm+0x92>
                    else {
                        recvPos = 0; // Сбрасываем позицию и начинаем заново
 800140a:	2300      	movs	r3, #0
 800140c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        continue;
 8001410:	e08c      	b.n	800152c <_ZN7RPLidar9waitPointEm+0x1a8>
                break;
 8001412:	bf00      	nop
 8001414:	e000      	b.n	8001418 <_ZN7RPLidar9waitPointEm+0x94>
                    }
                }
                break;
 8001416:	bf00      	nop
        }

        // Сохраняем текущий байт
        nodebuf[recvPos++] = currentbyte;
 8001418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001422:	461a      	mov	r2, r3
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	4413      	add	r3, r2
 8001428:	7afa      	ldrb	r2, [r7, #11]
 800142a:	701a      	strb	r2, [r3, #0]

        // Если все байты структуры считаны
        if (recvPos == sizeof(rplidar_response_measurement_node_t)) {
 800142c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001430:	2b05      	cmp	r3, #5
 8001432:	d1b5      	bne.n	80013a0 <_ZN7RPLidar9waitPointEm+0x1c>
            // Вычисляем значения измерений
            _currentMeasurement.distance = node.distance_q2 / 4.0f;
 8001434:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8001438:	b29b      	uxth	r3, r3
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001442:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001446:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	edc3 7a00 	vstr	s15, [r3]
            _currentMeasurement.angle = constrain((node.angle_q6_checkbit >> RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT) / 64.0f,0,360);
 8001450:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8001454:	b29b      	uxth	r3, r3
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	b29b      	uxth	r3, r3
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001462:	eddf 6a36 	vldr	s13, [pc, #216]	; 800153c <_ZN7RPLidar9waitPointEm+0x1b8>
 8001466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800146a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001472:	2200      	movs	r2, #0
 8001474:	ee17 1a90 	vmov	r1, s15
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff64 	bl	8001346 <_ZN7RPLidar9constrainElll>
 800147e:	eef0 7a40 	vmov.f32	s15, s0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	edc3 7a01 	vstr	s15, [r3, #4]
            _currentMeasurement.quality = (node.sync_quality >> RPLIDAR_RESP_MEASUREMENT_QUALITY_SHIFT);
 8001488:	7b3b      	ldrb	r3, [r7, #12]
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	b2da      	uxtb	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	721a      	strb	r2, [r3, #8]
            _currentMeasurement.startBit = (node.sync_quality & RPLIDAR_RESP_MEASUREMENT_SYNCBIT);
 8001492:	7b3b      	ldrb	r3, [r7, #12]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	bf14      	ite	ne
 800149c:	2301      	movne	r3, #1
 800149e:	2300      	moveq	r3, #0
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	725a      	strb	r2, [r3, #9]

            // Сохраняем минимальное расстояние для каждого угла (от 0 до 360 градусов)
            float newAngle = _currentMeasurement.angle;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	61bb      	str	r3, [r7, #24]
            float newDistance = _currentMeasurement.distance;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	617b      	str	r3, [r7, #20]

            if (newDistance>200){
 80014b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001540 <_ZN7RPLidar9waitPointEm+0x1bc>
 80014ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c2:	dd30      	ble.n	8001526 <_ZN7RPLidar9waitPointEm+0x1a2>
				if (newAngle>=0&&newAngle<=360)
 80014c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80014c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	db29      	blt.n	8001526 <_ZN7RPLidar9waitPointEm+0x1a2>
 80014d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014d6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001544 <_ZN7RPLidar9waitPointEm+0x1c0>
 80014da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	d820      	bhi.n	8001526 <_ZN7RPLidar9waitPointEm+0x1a2>
					if (newDistance != distances[(int)newAngle]) {
 80014e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80014e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ec:	ee17 3a90 	vmov	r3, s15
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	3302      	adds	r3, #2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	3304      	adds	r3, #4
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001502:	eeb4 7a67 	vcmp.f32	s14, s15
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	d00c      	beq.n	8001526 <_ZN7RPLidar9waitPointEm+0x1a2>
						distances[(int)newAngle] = newDistance; // Сохраняем  расстояние
 800150c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001514:	ee17 3a90 	vmov	r3, s15
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	3302      	adds	r3, #2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3304      	adds	r3, #4
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	601a      	str	r2, [r3, #0]
				}
            }


            return RESULT_OK; // Успешное завершение
 8001526:	2300      	movs	r3, #0
 8001528:	e002      	b.n	8001530 <_ZN7RPLidar9waitPointEm+0x1ac>
        if (status != HAL_OK) continue; // Пропускаем итерацию, если байт не был получен
 800152a:	bf00      	nop
    while ((remainingtime = HAL_GetTick() - currentTs) <= timeout) {
 800152c:	e738      	b.n	80013a0 <_ZN7RPLidar9waitPointEm+0x1c>
        }
    }

    // Если таймаут истёк
    return RESULT_OPERATION_TIMEOUT;
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <_ZN7RPLidar9waitPointEm+0x1c4>)
}
 8001530:	4618      	mov	r0, r3
 8001532:	3730      	adds	r7, #48	; 0x30
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000a1c 	.word	0x20000a1c
 800153c:	42800000 	.word	0x42800000
 8001540:	43480000 	.word	0x43480000
 8001544:	43b40000 	.word	0x43b40000
 8001548:	80008002 	.word	0x80008002

0800154c <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	bfb8      	it	lt
 800155a:	425b      	neglt	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001572:	edd7 7a01 	vldr	s15, [r7, #4]
 8001576:	eef0 7ae7 	vabs.f32	s15, s15
 800157a:	eeb0 0a67 	vmov.f32	s0, s15
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001592:	ed97 0a01 	vldr	s0, [r7, #4]
 8001596:	f009 fa75 	bl	800aa84 <cosf>
 800159a:	eef0 7a40 	vmov.f32	s15, s0
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80015b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80015b6:	f009 faa9 	bl	800ab0c <sinf>
 80015ba:	eef0 7a40 	vmov.f32	s15, s0
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_ZSt4tanhf>:
  using ::tanh;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tanh(float __x)
  { return __builtin_tanhf(__x); }
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80015d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80015d6:	f009 fadf 	bl	800ab98 <tanhf>
 80015da:	eef0 7a40 	vmov.f32	s15, s0
 80015de:	eeb0 0a67 	vmov.f32	s0, s15
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800160e:	d205      	bcs.n	800161c <_ZSt16__deque_buf_sizej+0x1c>
 8001610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	e000      	b.n	800161e <_ZSt16__deque_buf_sizej+0x1e>
 800161c:	2301      	movs	r3, #1
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_ZN7EncoderC1EP17TIM_HandleTypeDef>:
#include  <cmath>

class Encoder
{
public:
	Encoder(TIM_HandleTypeDef* _encTim)
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
		:encTim(_encTim)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	609a      	str	r2, [r3, #8]
	{
		//HAL_TIM_Encoder_Start(_encTim, TIM_CHANNEL_1);
	};
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_ZN7Encoder7handlerEv>:

	void handler() {
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
		encoderValue = (int16_t)__HAL_TIM_GET_COUNTER(encTim);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	b21a      	sxth	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(encTim, 0);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_ZN7Encoder15getEncoderValueEv>:

	int16_t getEncoderValue(){
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
		return encoderValue;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f9b3 3000 	ldrsh.w	r3, [r3]
	}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f001 fc67 	bl	8002f6a <_ZNSaIfED1Ev>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_ZN7BFilterC1ESt6vectorIfSaIfEE>:
        // Инициализация коэффициентов фильтра нулями
        //coefs = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
        initializeStates();
    }
    // Конструктор с заданными коэффициентами
    BFilter(const std::vector<float> _coefs)
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
    	:coefs(_coefs)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6839      	ldr	r1, [r7, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f001 fc98 	bl	8002fea <_ZNSt6vectorIfSaIfEEC1ERKS1_>
        } else {
            // Если коэффициенты заданы неверно, инициализируем нулями
            coefs = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
        }
        */
        initializeStates();
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f86f 	bl	800179e <_ZN7BFilter16initializeStatesEv>
    }
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_ZN7BFilter4calcEf>:
    // Метод для вычисления отфильтрованного значения
    float calc(float inData) {
 80016ca:	b580      	push	{r7, lr}
 80016cc:	ed2d 8b02 	vpush	{d8}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	ed87 0a00 	vstr	s0, [r7]
        // Вычисление выходного значения по разностному уравнению
        float y = coefs[2] * inData + coefs[3] * x1 + coefs[4] * x2 - coefs[0] * y1 - coefs[1] * y2;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2102      	movs	r1, #2
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 fcc0 	bl	8003064 <_ZNSt6vectorIfSaIfEEixEj>
 80016e4:	4603      	mov	r3, r0
 80016e6:	ed93 7a00 	vldr	s14, [r3]
 80016ea:	edd7 7a00 	vldr	s15, [r7]
 80016ee:	ee27 8a27 	vmul.f32	s16, s14, s15
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2103      	movs	r1, #3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f001 fcb4 	bl	8003064 <_ZNSt6vectorIfSaIfEEixEj>
 80016fc:	4603      	mov	r3, r0
 80016fe:	ed93 7a00 	vldr	s14, [r3]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	edd3 7a03 	vldr	s15, [r3, #12]
 8001708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2104      	movs	r1, #4
 8001714:	4618      	mov	r0, r3
 8001716:	f001 fca5 	bl	8003064 <_ZNSt6vectorIfSaIfEEixEj>
 800171a:	4603      	mov	r3, r0
 800171c:	ed93 7a00 	vldr	s14, [r3]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	edd3 7a04 	vldr	s15, [r3, #16]
 8001726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f001 fc96 	bl	8003064 <_ZNSt6vectorIfSaIfEEixEj>
 8001738:	4603      	mov	r3, r0
 800173a:	ed93 7a00 	vldr	s14, [r3]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	edd3 7a05 	vldr	s15, [r3, #20]
 8001744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001748:	ee38 8a67 	vsub.f32	s16, s16, s15
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2101      	movs	r1, #1
 8001750:	4618      	mov	r0, r3
 8001752:	f001 fc87 	bl	8003064 <_ZNSt6vectorIfSaIfEEixEj>
 8001756:	4603      	mov	r3, r0
 8001758:	ed93 7a00 	vldr	s14, [r3]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001766:	ee78 7a67 	vsub.f32	s15, s16, s15
 800176a:	edc7 7a03 	vstr	s15, [r7, #12]

        // Обновление состояний фильтра
        x2 = x1;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	611a      	str	r2, [r3, #16]
        x1 = inData;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	60da      	str	r2, [r3, #12]
        y2 = y1;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	619a      	str	r2, [r3, #24]
        y1 = y;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	615a      	str	r2, [r3, #20]

        return y;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	ee07 3a90 	vmov	s15, r3
    }
 8001790:	eeb0 0a67 	vmov.f32	s0, s15
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	ecbd 8b02 	vpop	{d8}
 800179c:	bd80      	pop	{r7, pc}

0800179e <_ZN7BFilter16initializeStatesEv>:
    // Метод для инициализации состояний фильтра
    void initializeStates() {
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
        x1 = 0.0f;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
        x2 = 0.0f;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
        y1 = 0.0f;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	615a      	str	r2, [r3, #20]
        y2 = 0.0f;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
    }
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f7fe fea8 	bl	8000534 <__aeabi_i2d>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	ed97 1b00 	vldr	d1, [r7]
 80017ec:	ec43 2b10 	vmov	d0, r2, r3
 80017f0:	f009 fa24 	bl	800ac3c <pow>
 80017f4:	eeb0 7a40 	vmov.f32	s14, s0
 80017f8:	eef0 7a60 	vmov.f32	s15, s1
    }
 80017fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001800:	eef0 0a67 	vmov.f32	s1, s15
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	0000      	movs	r0, r0
 800180c:	0000      	movs	r0, r0
	...

08001810 <_ZN7BFilter15CalcSecondOrderEff>:
		float a1 = (omegaC - 2 / T) / a0;
		float b0 = omegaC / a0;
		std::vector<float> buf = {a1, 0, b0, b0, 0};
		return buf;
	};
	static std::vector<float> CalcSecondOrder(float freq, float sampleRate) {
 8001810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001814:	b094      	sub	sp, #80	; 0x50
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	ed87 0a02 	vstr	s0, [r7, #8]
 800181e:	edc7 0a01 	vstr	s1, [r7, #4]
		float T = 1 / sampleRate;
 8001822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001826:	ed97 7a01 	vldr	s14, [r7, #4]
 800182a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800182e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		float omegaC = 2 * M_PI * freq;
 8001832:	68b8      	ldr	r0, [r7, #8]
 8001834:	f7fe fe90 	bl	8000558 <__aeabi_f2d>
 8001838:	a3ad      	add	r3, pc, #692	; (adr r3, 8001af0 <_ZN7BFilter15CalcSecondOrderEff+0x2e0>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe fee3 	bl	8000608 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff f9b5 	bl	8000bb8 <__aeabi_d2f>
 800184e:	4603      	mov	r3, r0
 8001850:	64bb      	str	r3, [r7, #72]	; 0x48
		float a0 = pow(omegaC, 2) + 2 * pow(2, 0.5) * omegaC / T + 4 / pow(T, 2);
 8001852:	2002      	movs	r0, #2
 8001854:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001858:	f001 fc35 	bl	80030c6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800185c:	ec59 8b10 	vmov	r8, r9, d0
 8001860:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 8001ae0 <_ZN7BFilter15CalcSecondOrderEff+0x2d0>
 8001864:	2002      	movs	r0, #2
 8001866:	f7ff ffb4 	bl	80017d2 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800186a:	ec51 0b10 	vmov	r0, r1, d0
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	f7fe fd13 	bl	800029c <__adddf3>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4614      	mov	r4, r2
 800187c:	461d      	mov	r5, r3
 800187e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001880:	f7fe fe6a 	bl	8000558 <__aeabi_f2d>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4620      	mov	r0, r4
 800188a:	4629      	mov	r1, r5
 800188c:	f7fe febc 	bl	8000608 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4614      	mov	r4, r2
 8001896:	461d      	mov	r5, r3
 8001898:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800189a:	f7fe fe5d 	bl	8000558 <__aeabi_f2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4620      	mov	r0, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	f7fe ffd9 	bl	800085c <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4640      	mov	r0, r8
 80018b0:	4649      	mov	r1, r9
 80018b2:	f7fe fcf3 	bl	800029c <__adddf3>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4614      	mov	r4, r2
 80018bc:	461d      	mov	r5, r3
 80018be:	2002      	movs	r0, #2
 80018c0:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80018c4:	f001 fbff 	bl	80030c6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80018c8:	ec53 2b10 	vmov	r2, r3, d0
 80018cc:	f04f 0000 	mov.w	r0, #0
 80018d0:	4985      	ldr	r1, [pc, #532]	; (8001ae8 <_ZN7BFilter15CalcSecondOrderEff+0x2d8>)
 80018d2:	f7fe ffc3 	bl	800085c <__aeabi_ddiv>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7fe fcdd 	bl	800029c <__adddf3>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	f7ff f965 	bl	8000bb8 <__aeabi_d2f>
 80018ee:	4603      	mov	r3, r0
 80018f0:	647b      	str	r3, [r7, #68]	; 0x44
		float a1 = (2 * pow(omegaC, 2) - 8 / pow(T, 2)) / a0;
 80018f2:	2002      	movs	r0, #2
 80018f4:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 80018f8:	f001 fbe5 	bl	80030c6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80018fc:	ec51 0b10 	vmov	r0, r1, d0
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	f7fe fcca 	bl	800029c <__adddf3>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4614      	mov	r4, r2
 800190e:	461d      	mov	r5, r3
 8001910:	2002      	movs	r0, #2
 8001912:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001916:	f001 fbd6 	bl	80030c6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800191a:	ec53 2b10 	vmov	r2, r3, d0
 800191e:	f04f 0000 	mov.w	r0, #0
 8001922:	4972      	ldr	r1, [pc, #456]	; (8001aec <_ZN7BFilter15CalcSecondOrderEff+0x2dc>)
 8001924:	f7fe ff9a 	bl	800085c <__aeabi_ddiv>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4620      	mov	r0, r4
 800192e:	4629      	mov	r1, r5
 8001930:	f7fe fcb2 	bl	8000298 <__aeabi_dsub>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800193e:	f7fe fe0b 	bl	8000558 <__aeabi_f2d>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4620      	mov	r0, r4
 8001948:	4629      	mov	r1, r5
 800194a:	f7fe ff87 	bl	800085c <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f7ff f92f 	bl	8000bb8 <__aeabi_d2f>
 800195a:	4603      	mov	r3, r0
 800195c:	643b      	str	r3, [r7, #64]	; 0x40
		float a2 = (pow(omegaC, 2) - 2 * pow(2, 0.5) * omegaC / T + 4 / pow(T, 2)) / a0;
 800195e:	2002      	movs	r0, #2
 8001960:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001964:	f001 fbaf 	bl	80030c6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001968:	ec59 8b10 	vmov	r8, r9, d0
 800196c:	ed9f 0b5c 	vldr	d0, [pc, #368]	; 8001ae0 <_ZN7BFilter15CalcSecondOrderEff+0x2d0>
 8001970:	2002      	movs	r0, #2
 8001972:	f7ff ff2e 	bl	80017d2 <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001976:	ec51 0b10 	vmov	r0, r1, d0
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	f7fe fc8d 	bl	800029c <__adddf3>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4614      	mov	r4, r2
 8001988:	461d      	mov	r5, r3
 800198a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800198c:	f7fe fde4 	bl	8000558 <__aeabi_f2d>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4620      	mov	r0, r4
 8001996:	4629      	mov	r1, r5
 8001998:	f7fe fe36 	bl	8000608 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4614      	mov	r4, r2
 80019a2:	461d      	mov	r5, r3
 80019a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019a6:	f7fe fdd7 	bl	8000558 <__aeabi_f2d>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4620      	mov	r0, r4
 80019b0:	4629      	mov	r1, r5
 80019b2:	f7fe ff53 	bl	800085c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4640      	mov	r0, r8
 80019bc:	4649      	mov	r1, r9
 80019be:	f7fe fc6b 	bl	8000298 <__aeabi_dsub>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4614      	mov	r4, r2
 80019c8:	461d      	mov	r5, r3
 80019ca:	2002      	movs	r0, #2
 80019cc:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80019d0:	f001 fb79 	bl	80030c6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80019d4:	ec53 2b10 	vmov	r2, r3, d0
 80019d8:	f04f 0000 	mov.w	r0, #0
 80019dc:	4942      	ldr	r1, [pc, #264]	; (8001ae8 <_ZN7BFilter15CalcSecondOrderEff+0x2d8>)
 80019de:	f7fe ff3d 	bl	800085c <__aeabi_ddiv>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4620      	mov	r0, r4
 80019e8:	4629      	mov	r1, r5
 80019ea:	f7fe fc57 	bl	800029c <__adddf3>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4614      	mov	r4, r2
 80019f4:	461d      	mov	r5, r3
 80019f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019f8:	f7fe fdae 	bl	8000558 <__aeabi_f2d>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4620      	mov	r0, r4
 8001a02:	4629      	mov	r1, r5
 8001a04:	f7fe ff2a 	bl	800085c <__aeabi_ddiv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f7ff f8d2 	bl	8000bb8 <__aeabi_d2f>
 8001a14:	4603      	mov	r3, r0
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
		float b0 = pow(omegaC, 2) / a0;
 8001a18:	2002      	movs	r0, #2
 8001a1a:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001a1e:	f001 fb52 	bl	80030c6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a22:	ec55 4b10 	vmov	r4, r5, d0
 8001a26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a28:	f7fe fd96 	bl	8000558 <__aeabi_f2d>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4620      	mov	r0, r4
 8001a32:	4629      	mov	r1, r5
 8001a34:	f7fe ff12 	bl	800085c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f8ba 	bl	8000bb8 <__aeabi_d2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	63bb      	str	r3, [r7, #56]	; 0x38
		float b1 = 2 * pow(omegaC, 2) / a0;
 8001a48:	2002      	movs	r0, #2
 8001a4a:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001a4e:	f001 fb3a 	bl	80030c6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a52:	ec51 0b10 	vmov	r0, r1, d0
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	f7fe fc1f 	bl	800029c <__adddf3>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4614      	mov	r4, r2
 8001a64:	461d      	mov	r5, r3
 8001a66:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a68:	f7fe fd76 	bl	8000558 <__aeabi_f2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7fe fef2 	bl	800085c <__aeabi_ddiv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f89a 	bl	8000bb8 <__aeabi_d2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	637b      	str	r3, [r7, #52]	; 0x34
		float b2 = b0;
 8001a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a8a:	633b      	str	r3, [r7, #48]	; 0x30
		//float buf[5] = {a1, a2, b0, b1, b2};
		std::vector<float> buf = {a1, a2, b0, b1, b2};
 8001a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a96:	623b      	str	r3, [r7, #32]
 8001a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa0:	f107 0318 	add.w	r3, r7, #24
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 fa4f 	bl	8002f52 <_ZNSaIfEC1Ev>
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	f107 0210 	add.w	r2, r7, #16
 8001abc:	ca06      	ldmia	r2, {r1, r2}
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f001 fae0 	bl	8003084 <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8001ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f001 fa4e 	bl	8002f6a <_ZNSaIfED1Ev>

		return buf;
 8001ace:	bf00      	nop
	};
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	3750      	adds	r7, #80	; 0x50
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ada:	bf00      	nop
 8001adc:	f3af 8000 	nop.w
 8001ae0:	00000000 	.word	0x00000000
 8001ae4:	3fe00000 	.word	0x3fe00000
 8001ae8:	40100000 	.word	0x40100000
 8001aec:	40200000 	.word	0x40200000
 8001af0:	54442d18 	.word	0x54442d18
 8001af4:	401921fb 	.word	0x401921fb

08001af8 <_ZN3PIDC1Efff>:


class PID {
public:
    PID(float kp, float ki, float kd)
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b04:	edc7 0a01 	vstr	s1, [r7, #4]
 8001b08:	ed87 1a00 	vstr	s2, [r7]
        : kp(kp), ki(ki), kd(kd), prevError(0), integral(0) {
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
    }
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_ZN3PID9calculateEff>:

    // Метод для расчета управляющего воздействия
    float calculate(float target, float current) {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b48:	edc7 0a01 	vstr	s1, [r7, #4]
    	float error = target - current;
 8001b4c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b58:	edc7 7a05 	vstr	s15, [r7, #20]
        integral += error; // Накопление интегральной ошибки
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b62:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	edc3 7a04 	vstr	s15, [r3, #16]
        float derivative = error - prevError; // Разница ошибок
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b76:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b7e:	edc7 7a04 	vstr	s15, [r7, #16]
        prevError = error;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	60da      	str	r2, [r3, #12]

        return kp * error + ki * integral + kd * derivative;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	ed93 7a00 	vldr	s14, [r3]
 8001b8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8001bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc0:	371c      	adds	r7, #28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	0000      	movs	r0, r0
 8001bcc:	0000      	movs	r0, r0
	...

08001bd0 <_ZN3PID18updateCoefficientsEd>:
    	prevError = 0;
    	integral = 0;
    }

    // Метод для обновления коэффициентов по формулам
    void updateCoefficients(double targetSpeed) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b092      	sub	sp, #72	; 0x48
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	ed87 0b00 	vstr	d0, [r7]
        // Коэффициенты для низких скоростей (до 50 об/мин)
        double kp_low = 20;
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	4b6f      	ldr	r3, [pc, #444]	; (8001da0 <_ZN3PID18updateCoefficientsEd+0x1d0>)
 8001be2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
        double ki_low = 0.05;
 8001be6:	a368      	add	r3, pc, #416	; (adr r3, 8001d88 <_ZN3PID18updateCoefficientsEd+0x1b8>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        double kd_low = 7;
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b6b      	ldr	r3, [pc, #428]	; (8001da4 <_ZN3PID18updateCoefficientsEd+0x1d4>)
 8001bf6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

        // Коэффициенты для высоких скоростей (свыше 150 об/мин)
        double kp_high = 16;
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	4b6a      	ldr	r3, [pc, #424]	; (8001da8 <_ZN3PID18updateCoefficientsEd+0x1d8>)
 8001c00:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        double ki_high = 0.1;
 8001c04:	a362      	add	r3, pc, #392	; (adr r3, 8001d90 <_ZN3PID18updateCoefficientsEd+0x1c0>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        double kd_high = 6;
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	4b66      	ldr	r3, [pc, #408]	; (8001dac <_ZN3PID18updateCoefficientsEd+0x1dc>)
 8001c14:	e9c7 2306 	strd	r2, r3, [r7, #24]

        // Линейная интерполяция коэффициентов
        if (targetSpeed <= 50) {
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	4b64      	ldr	r3, [pc, #400]	; (8001db0 <_ZN3PID18updateCoefficientsEd+0x1e0>)
 8001c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c22:	f7fe ff6d 	bl	8000b00 <__aeabi_dcmple>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d015      	beq.n	8001c58 <_ZN3PID18updateCoefficientsEd+0x88>
            // Если скорость <= 50, используем коэффициенты для низких скоростей
            kp = kp_low;
 8001c2c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001c30:	f7fe ffc2 	bl	8000bb8 <__aeabi_d2f>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	601a      	str	r2, [r3, #0]
            ki = ki_low;
 8001c3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c3e:	f7fe ffbb 	bl	8000bb8 <__aeabi_d2f>
 8001c42:	4602      	mov	r2, r0
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	605a      	str	r2, [r3, #4]
            kd = kd_low;
 8001c48:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c4c:	f7fe ffb4 	bl	8000bb8 <__aeabi_d2f>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	609a      	str	r2, [r3, #8]
            double t = (targetSpeed - 50) / (150 - 50); // Нормализация скорости в диапазоне [0, 1]
            kp = kp_low + t * (kp_high - kp_low);
            ki = ki_low + t * (ki_high - ki_low);
            kd = kd_low + t * (kd_high - kd_low);
        }
    }
 8001c56:	e090      	b.n	8001d7a <_ZN3PID18updateCoefficientsEd+0x1aa>
        } else if (targetSpeed >= 150) {
 8001c58:	a34f      	add	r3, pc, #316	; (adr r3, 8001d98 <_ZN3PID18updateCoefficientsEd+0x1c8>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c62:	f7fe ff57 	bl	8000b14 <__aeabi_dcmpge>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d015      	beq.n	8001c98 <_ZN3PID18updateCoefficientsEd+0xc8>
            kp = kp_high;
 8001c6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c70:	f7fe ffa2 	bl	8000bb8 <__aeabi_d2f>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	601a      	str	r2, [r3, #0]
            ki = ki_high;
 8001c7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c7e:	f7fe ff9b 	bl	8000bb8 <__aeabi_d2f>
 8001c82:	4602      	mov	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	605a      	str	r2, [r3, #4]
            kd = kd_high;
 8001c88:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c8c:	f7fe ff94 	bl	8000bb8 <__aeabi_d2f>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	609a      	str	r2, [r3, #8]
    }
 8001c96:	e070      	b.n	8001d7a <_ZN3PID18updateCoefficientsEd+0x1aa>
            double t = (targetSpeed - 50) / (150 - 50); // Нормализация скорости в диапазоне [0, 1]
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <_ZN3PID18updateCoefficientsEd+0x1e0>)
 8001c9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ca2:	f7fe faf9 	bl	8000298 <__aeabi_dsub>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <_ZN3PID18updateCoefficientsEd+0x1e4>)
 8001cb4:	f7fe fdd2 	bl	800085c <__aeabi_ddiv>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
            kp = kp_low + t * (kp_high - kp_low);
 8001cc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001cc4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cc8:	f7fe fae6 	bl	8000298 <__aeabi_dsub>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cd8:	f7fe fc96 	bl	8000608 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ce8:	f7fe fad8 	bl	800029c <__adddf3>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe ff60 	bl	8000bb8 <__aeabi_d2f>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	601a      	str	r2, [r3, #0]
            ki = ki_low + t * (ki_high - ki_low);
 8001cfe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d06:	f7fe fac7 	bl	8000298 <__aeabi_dsub>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d16:	f7fe fc77 	bl	8000608 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d26:	f7fe fab9 	bl	800029c <__adddf3>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe ff41 	bl	8000bb8 <__aeabi_d2f>
 8001d36:	4602      	mov	r2, r0
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	605a      	str	r2, [r3, #4]
            kd = kd_low + t * (kd_high - kd_low);
 8001d3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d40:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d44:	f7fe faa8 	bl	8000298 <__aeabi_dsub>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d54:	f7fe fc58 	bl	8000608 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d64:	f7fe fa9a 	bl	800029c <__adddf3>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7fe ff22 	bl	8000bb8 <__aeabi_d2f>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	609a      	str	r2, [r3, #8]
    }
 8001d7a:	bf00      	nop
 8001d7c:	3748      	adds	r7, #72	; 0x48
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	f3af 8000 	nop.w
 8001d88:	9999999a 	.word	0x9999999a
 8001d8c:	3fa99999 	.word	0x3fa99999
 8001d90:	9999999a 	.word	0x9999999a
 8001d94:	3fb99999 	.word	0x3fb99999
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	4062c000 	.word	0x4062c000
 8001da0:	40340000 	.word	0x40340000
 8001da4:	401c0000 	.word	0x401c0000
 8001da8:	40300000 	.word	0x40300000
 8001dac:	40180000 	.word	0x40180000
 8001db0:	40490000 	.word	0x40490000
 8001db4:	40590000 	.word	0x40590000

08001db8 <_Z9constrainlll>:
#include  <cmath>

#ifndef INC_MOTOR_H_
#define INC_MOTOR_H_

	int32_t constrain(int32_t value,int32_t num1,int32_t num2){
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
		if (value>num2) value = num2;
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dd01      	ble.n	8001dd0 <_Z9constrainlll+0x18>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	60fb      	str	r3, [r7, #12]
		if (value<num1) value = num1;
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	da01      	bge.n	8001ddc <_Z9constrainlll+0x24>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	60fb      	str	r3, [r7, #12]
		return value;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
	}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <_ZN7BFilterD1Ev>:
class BFilter {
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f001 f8c4 	bl	8002f82 <_ZNSt6vectorIfSaIfEED1Ev>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>:

class Motor{

public:

	Motor(TIM_HandleTypeDef* _encTim,TIM_HandleTypeDef* _ctrlTim, uint8_t _ctrlTimCh):
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	70fb      	strb	r3, [r7, #3]
		ctrlTim(_ctrlTim),ctrlTimCh(_ctrlTimCh),enc(_encTim),pid(20,0.05,7)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fc07 	bl	800162a <_ZN7EncoderC1EP17TIM_HandleTypeDef>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	330c      	adds	r3, #12
 8001e20:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8001e24:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001e78 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h+0x74>
 8001e28:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fe63 	bl	8001af8 <_ZN3PIDC1Efff>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f103 0420 	add.w	r4, r3, #32
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001e7c <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h+0x78>
 8001e40:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fce3 	bl	8001810 <_ZN7BFilter15CalcSecondOrderEff>
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4620      	mov	r0, r4
 8001e52:	f7ff fc28 	bl	80016a6 <_ZN7BFilterC1ESt6vectorIfSaIfEE>
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f001 f891 	bl	8002f82 <_ZNSt6vectorIfSaIfEED1Ev>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	641a      	str	r2, [r3, #64]	; 0x40
	{};
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd90      	pop	{r4, r7, pc}
 8001e76:	bf00      	nop
 8001e78:	3d4ccccd 	.word	0x3d4ccccd
 8001e7c:	447a0000 	.word	0x447a0000

08001e80 <_ZN5Motor14setTargetSpeedEf>:
	}

	int16_t getEncoderValue(){
		return enc.getEncoderValue();
	}
	void setTargetSpeed(float speed){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	ed87 0a00 	vstr	s0, [r7]
		targetSpeed = speed;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	651a      	str	r2, [r3, #80]	; 0x50
		targetSpeed = constrain(targetSpeed,-MAX_MOT_SPEED,MAX_MOT_SPEED);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e9c:	2264      	movs	r2, #100	; 0x64
 8001e9e:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001ea2:	ee17 0a90 	vmov	r0, s15
 8001ea6:	f7ff ff87 	bl	8001db8 <_Z9constrainlll>
 8001eaa:	ee07 0a90 	vmov	s15, r0
 8001eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_ZN5Motor7handlerEv>:
	void handler(){
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
		calcCurSpeedMotor();
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f83d 	bl	8001f48 <_ZN5Motor17calcCurSpeedMotorEv>
		pid.updateCoefficients(targetSpeed);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f103 040c 	add.w	r4, r3, #12
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb3d 	bl	8000558 <__aeabi_f2d>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	ec43 2b10 	vmov	d0, r2, r3
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f7ff fe72 	bl	8001bd0 <_ZN3PID18updateCoefficientsEd>
		helpPWM = pid.calculate(targetSpeed, currentSpeed);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f103 020c 	add.w	r2, r3, #12
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001efe:	eef0 0a47 	vmov.f32	s1, s14
 8001f02:	eeb0 0a67 	vmov.f32	s0, s15
 8001f06:	4610      	mov	r0, r2
 8001f08:	f7ff fe18 	bl	8001b3c <_ZN3PID9calculateEff>
 8001f0c:	eef0 7a40 	vmov.f32	s15, s0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		setMotorPWM(constrain((int32_t)helpPWM,-MAX_MOT_PWM,MAX_MOT_PWM));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f20:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f24:	4906      	ldr	r1, [pc, #24]	; (8001f40 <_ZN5Motor7handlerEv+0x80>)
 8001f26:	ee17 0a90 	vmov	r0, s15
 8001f2a:	f7ff ff45 	bl	8001db8 <_Z9constrainlll>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4619      	mov	r1, r3
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f84e 	bl	8001fd4 <_ZN5Motor11setMotorPWMEl>
	}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd90      	pop	{r4, r7, pc}
 8001f40:	ffffd8f0 	.word	0xffffd8f0
 8001f44:	00000000 	.word	0x00000000

08001f48 <_ZN5Motor17calcCurSpeedMotorEv>:

private:

	void calcCurSpeedMotor(){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
				enc.handler();
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fb78 	bl	8001648 <_ZN7Encoder7handlerEv>
				currentSpeed = (((float)enc.getEncoderValue())*60.0)/(ENC_MAX*FAST_CYCLE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fb8a 	bl	8001674 <_ZN7Encoder15getEncoderValueEv>
 8001f60:	4603      	mov	r3, r0
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6a:	ee17 0a90 	vmov	r0, s15
 8001f6e:	f7fe faf3 	bl	8000558 <__aeabi_f2d>
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <_ZN5Motor17calcCurSpeedMotorEv+0x88>)
 8001f78:	f7fe fb46 	bl	8000608 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	a310      	add	r3, pc, #64	; (adr r3, 8001fc8 <_ZN5Motor17calcCurSpeedMotorEv+0x80>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	f7fe fc67 	bl	800085c <__aeabi_ddiv>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	f7fe fe0f 	bl	8000bb8 <__aeabi_d2f>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	64da      	str	r2, [r3, #76]	; 0x4c
				currentSpeed = filt.calc(currentSpeed);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f103 0220 	add.w	r2, r3, #32
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001fac:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f7ff fb8a 	bl	80016ca <_ZN7BFilter4calcEf>
 8001fb6:	eef0 7a40 	vmov.f32	s15, s0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	cccccccd 	.word	0xcccccccd
 8001fcc:	3ffccccc 	.word	0x3ffccccc
 8001fd0:	404e0000 	.word	0x404e0000

08001fd4 <_ZN5Motor11setMotorPWMEl>:
	void setMotorPWM(int32_t PWM){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]


		if (ctrlTimCh == CHANNEL1||ctrlTimCh == CHANNEL2){
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d003      	beq.n	8001fee <_ZN5Motor11setMotorPWMEl+0x1a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d11e      	bne.n	800202c <_ZN5Motor11setMotorPWMEl+0x58>
			if (PWM>0){
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	dd0a      	ble.n	800200a <_ZN5Motor11setMotorPWMEl+0x36>
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_1, ZERO);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_2, PWM);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
 8002008:	e010      	b.n	800202c <_ZN5Motor11setMotorPWMEl+0x58>
			}

			else if (PWM<0){
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da0d      	bge.n	800202c <_ZN5Motor11setMotorPWMEl+0x58>
				PWM = abs(PWM);
 8002010:	6838      	ldr	r0, [r7, #0]
 8002012:	f7ff fa9b 	bl	800154c <_ZSt3absl>
 8002016:	6038      	str	r0, [r7, #0]
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_2, ZERO);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2200      	movs	r2, #0
 8002020:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_1, PWM);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}

		if (ctrlTimCh == CHANNEL3||ctrlTimCh == CHANNEL4){
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	2b03      	cmp	r3, #3
 8002032:	d003      	beq.n	800203c <_ZN5Motor11setMotorPWMEl+0x68>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	2b04      	cmp	r3, #4
 800203a:	d11e      	bne.n	800207a <_ZN5Motor11setMotorPWMEl+0xa6>
			if (PWM>0){
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	dd0a      	ble.n	8002058 <_ZN5Motor11setMotorPWMEl+0x84>
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, ZERO);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, PWM);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
				PWM = abs(PWM);
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, ZERO);
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, PWM);
			}
		}
	}
 8002056:	e010      	b.n	800207a <_ZN5Motor11setMotorPWMEl+0xa6>
			else if (PWM<0){
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	da0d      	bge.n	800207a <_ZN5Motor11setMotorPWMEl+0xa6>
				PWM = abs(PWM);
 800205e:	6838      	ldr	r0, [r7, #0]
 8002060:	f7ff fa74 	bl	800154c <_ZSt3absl>
 8002064:	6038      	str	r0, [r7, #0]
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, ZERO);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2200      	movs	r2, #0
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, PWM);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_ZN5MotorD1Ev>:
class Motor{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3320      	adds	r3, #32
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff feab 	bl	8001dea <_ZN7BFilterD1Ev>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <_ZN6TelegaC1Ev>:

class Telega{

public:

	Telega():
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
		leftMotor(ENC_LEFT_TIM,MOT_L_PWM_TIM,CHANNEL3),
		rightMotor(ENC_RIGHT_TIM,MOT_R_PWM_TIM,CHANNEL1)
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	2303      	movs	r3, #3
 80020ac:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <_ZN6TelegaC1Ev+0x30>)
 80020ae:	4909      	ldr	r1, [pc, #36]	; (80020d4 <_ZN6TelegaC1Ev+0x34>)
 80020b0:	f7ff fea8 	bl	8001e04 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80020ba:	2301      	movs	r3, #1
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <_ZN6TelegaC1Ev+0x30>)
 80020be:	4906      	ldr	r1, [pc, #24]	; (80020d8 <_ZN6TelegaC1Ev+0x38>)
 80020c0:	f7ff fea0 	bl	8001e04 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>
	{};
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000098c 	.word	0x2000098c
 80020d4:	20000944 	.word	0x20000944
 80020d8:	200009d4 	.word	0x200009d4

080020dc <_ZN6Telega7handlerEv>:

	void handler(){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
			leftMotor.handler();
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff feea 	bl	8001ec0 <_ZN5Motor7handlerEv>
			rightMotor.handler();
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3354      	adds	r3, #84	; 0x54
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fee5 	bl	8001ec0 <_ZN5Motor7handlerEv>
	}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_ZN6Telega13setRobotSpeedEff>:
	void setRobotSpeed(float linSpeed, float angSpeed){
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	ed87 0a02 	vstr	s0, [r7, #8]
 800210a:	edc7 0a01 	vstr	s1, [r7, #4]
		setMotorSpeed(linSpeed-angSpeed,linSpeed+angSpeed);
 800210e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002112:	edd7 7a01 	vldr	s15, [r7, #4]
 8002116:	ee77 6a67 	vsub.f32	s13, s14, s15
 800211a:	ed97 7a02 	vldr	s14, [r7, #8]
 800211e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002126:	eef0 0a67 	vmov.f32	s1, s15
 800212a:	eeb0 0a66 	vmov.f32	s0, s13
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f804 	bl	800213c <_ZN6Telega13setMotorSpeedEff>
	}
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_ZN6Telega13setMotorSpeedEff>:
	}


private:

	void setMotorSpeed(float lSpd, float rSpd){
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	ed87 0a02 	vstr	s0, [r7, #8]
 8002148:	edc7 0a01 	vstr	s1, [r7, #4]
			leftMotor.setTargetSpeed(-lSpd);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002152:	eef1 7a67 	vneg.f32	s15, s15
 8002156:	eeb0 0a67 	vmov.f32	s0, s15
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fe90 	bl	8001e80 <_ZN5Motor14setTargetSpeedEf>
			rightMotor.setTargetSpeed(rSpd);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3354      	adds	r3, #84	; 0x54
 8002164:	ed97 0a01 	vldr	s0, [r7, #4]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fe89 	bl	8001e80 <_ZN5Motor14setTargetSpeedEf>
	}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <_ZN10TanControl16calcTgtRobotSpdsEff>:
	float ang;
};

class TanControl{
public:
	Spd calcTgtRobotSpds(float dist, float ang) {
 8002178:	b5b0      	push	{r4, r5, r7, lr}
 800217a:	ed2d 8b02 	vpush	{d8}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6178      	str	r0, [r7, #20]
 8002184:	ed87 0a04 	vstr	s0, [r7, #16]
 8002188:	edc7 0a03 	vstr	s1, [r7, #12]
		clearSpd();
 800218c:	6978      	ldr	r0, [r7, #20]
 800218e:	f000 f8d1 	bl	8002334 <_ZN10TanControl8clearSpdEv>
		spd.lin = MAX_MOT_SPEED * tanh(dist) * cos(ang);
 8002192:	ed97 0a04 	vldr	s0, [r7, #16]
 8002196:	f7ff fa17 	bl	80015c8 <_ZSt4tanhf>
 800219a:	eef0 7a40 	vmov.f32	s15, s0
 800219e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002250 <_ZN10TanControl16calcTgtRobotSpdsEff+0xd8>
 80021a2:	ee27 8a87 	vmul.f32	s16, s15, s14
 80021a6:	ed97 0a03 	vldr	s0, [r7, #12]
 80021aa:	f7ff f9ed 	bl	8001588 <_ZSt3cosf>
 80021ae:	eef0 7a40 	vmov.f32	s15, s0
 80021b2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	edc3 7a00 	vstr	s15, [r3]
		spd.ang = K_ANG * ang + spd.lin * sin(ang) / dist;
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f7fe f9cb 	bl	8000558 <__aeabi_f2d>
 80021c2:	a321      	add	r3, pc, #132	; (adr r3, 8002248 <_ZN10TanControl16calcTgtRobotSpdsEff+0xd0>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	f7fe fa1e 	bl	8000608 <__aeabi_dmul>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4614      	mov	r4, r2
 80021d2:	461d      	mov	r5, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	ed93 8a00 	vldr	s16, [r3]
 80021da:	ed97 0a03 	vldr	s0, [r7, #12]
 80021de:	f7ff f9e3 	bl	80015a8 <_ZSt3sinf>
 80021e2:	eef0 7a40 	vmov.f32	s15, s0
 80021e6:	ee28 7a27 	vmul.f32	s14, s16, s15
 80021ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80021ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80021f2:	ee16 0a90 	vmov	r0, s13
 80021f6:	f7fe f9af 	bl	8000558 <__aeabi_f2d>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4620      	mov	r0, r4
 8002200:	4629      	mov	r1, r5
 8002202:	f7fe f84b 	bl	800029c <__adddf3>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f7fe fcd3 	bl	8000bb8 <__aeabi_d2f>
 8002212:	4602      	mov	r2, r0
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	605a      	str	r2, [r3, #4]
		return spd;
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	f107 0318 	add.w	r3, r7, #24
 800221e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002222:	e883 0003 	stmia.w	r3, {r0, r1}
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	ee07 2a10 	vmov	s14, r2
 800222e:	ee07 3a90 	vmov	s15, r3
	}
 8002232:	eeb0 0a47 	vmov.f32	s0, s14
 8002236:	eef0 0a67 	vmov.f32	s1, s15
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	ecbd 8b02 	vpop	{d8}
 8002242:	bdb0      	pop	{r4, r5, r7, pc}
 8002244:	f3af 8000 	nop.w
 8002248:	33333333 	.word	0x33333333
 800224c:	3fd33333 	.word	0x3fd33333
 8002250:	42c80000 	.word	0x42c80000

08002254 <_ZN10TanControl13getErrorAngleEPf>:

	float getErrorAngle(float *distances){
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
		float errorAngle = 0.0f;
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
		float minDistance = 10000.0f;
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <_ZN10TanControl13getErrorAngleEPf+0x88>)
 8002266:	613b      	str	r3, [r7, #16]
		  for(int i = 0;i<=360;i++){
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002272:	dc28      	bgt.n	80022c6 <_ZN10TanControl13getErrorAngleEPf+0x72>

			  if(distances[i]<minDistance&&distances[i]!=0){
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	4413      	add	r3, r2
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	ed97 7a04 	vldr	s14, [r7, #16]
 8002284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	dd17      	ble.n	80022be <_ZN10TanControl13getErrorAngleEPf+0x6a>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	4413      	add	r3, r2
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	d00c      	beq.n	80022be <_ZN10TanControl13getErrorAngleEPf+0x6a>
				  minDistance = distances[i];
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	613b      	str	r3, [r7, #16]
				  errorAngle = i;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ba:	edc7 7a05 	vstr	s15, [r7, #20]
		  for(int i = 0;i<=360;i++){
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3301      	adds	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e7d2      	b.n	800226c <_ZN10TanControl13getErrorAngleEPf+0x18>
			  }
		  }
		  return errorAngle;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	ee07 3a90 	vmov	s15, r3
	}
 80022cc:	eeb0 0a67 	vmov.f32	s0, s15
 80022d0:	371c      	adds	r7, #28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	461c4000 	.word	0x461c4000

080022e0 <_ZN10TanControl8limitAngEf>:
	float limitAng(float ang){
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	ed87 0a00 	vstr	s0, [r7]
		int32_t inAng = ang;
 80022ec:	edd7 7a00 	vldr	s15, [r7]
 80022f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022f4:	ee17 3a90 	vmov	r3, s15
 80022f8:	60fb      	str	r3, [r7, #12]
		while (inAng >= HALF_CIRCLE) {
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2bb3      	cmp	r3, #179	; 0xb3
 80022fe:	dd04      	ble.n	800230a <_ZN10TanControl8limitAngEf+0x2a>
			inAng -= 2 * HALF_CIRCLE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002306:	60fb      	str	r3, [r7, #12]
		while (inAng >= HALF_CIRCLE) {
 8002308:	e7f7      	b.n	80022fa <_ZN10TanControl8limitAngEf+0x1a>
		}
		while (inAng <= -HALF_CIRCLE) {
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 8002310:	da04      	bge.n	800231c <_ZN10TanControl8limitAngEf+0x3c>
			inAng += 2 * HALF_CIRCLE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002318:	60fb      	str	r3, [r7, #12]
		while (inAng <= -HALF_CIRCLE) {
 800231a:	e7f6      	b.n	800230a <_ZN10TanControl8limitAngEf+0x2a>
		}
		return inAng;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	ee07 3a90 	vmov	s15, r3
 8002322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	}
 8002326:	eeb0 0a67 	vmov.f32	s0, s15
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_ZN10TanControl8clearSpdEv>:
private:
	void clearSpd(){
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
		spd.lin = 0;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
		spd.ang = 0;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	605a      	str	r2, [r3, #4]
	}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fef1 	bl	800314a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <_ZN6TelegaD1Ev>:
class Telega{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3354      	adds	r3, #84	; 0x54
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fe7f 	bl	8002082 <_ZN5MotorD1Ev>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fe7b 	bl	8002082 <_ZN5MotorD1Ev>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <_ZN12ActionsQueueC1Ev>:

class ActionsQueue
{
public:
	
	ActionsQueue():pidl(10,0.0005,1){
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 febd 	bl	8003122 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3328      	adds	r3, #40	; 0x28
 80023ac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80023b0:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80023e8 <_ZN12ActionsQueueC1Ev+0x50>
 80023b4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fb9d 	bl	8001af8 <_ZN3PIDC1Efff>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	333c      	adds	r3, #60	; 0x3c
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fdf0 	bl	8000fa8 <_ZN7RPLidarC1Ev>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fe66 	bl	80020a0 <_ZN6TelegaC1Ev>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
	};
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	3a03126f 	.word	0x3a03126f

080023ec <_ZN12ActionsQueue4initEv>:
	void init(){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
		lid.begin();
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	333c      	adds	r3, #60	; 0x3c
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe fe0d 	bl	8001018 <_ZN7RPLidar5beginEv>
		lid.startScan();
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	333c      	adds	r3, #60	; 0x3c
 8002402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe ff2b 	bl	8001264 <_ZN7RPLidar9startScanEbm>
	}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <_ZN12ActionsQueue4pushE7ACTIONS>:

	void push(ACTIONS action) {
 8002416:	b590      	push	{r4, r7, lr}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	70fb      	strb	r3, [r7, #3]
		rQueue.push(RobotInstruction(action));
 8002422:	687c      	ldr	r4, [r7, #4]
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	f107 0308 	add.w	r3, r7, #8
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f000 f9ad 	bl	800278c <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>
 8002432:	f107 0308 	add.w	r3, r7, #8
 8002436:	4619      	mov	r1, r3
 8002438:	4620      	mov	r0, r4
 800243a:	f000 feab 	bl	8003194 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>
	};
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	bd90      	pop	{r4, r7, pc}

08002446 <_ZN12ActionsQueue7isClearEv>:
		while (!rQueue.empty()) {
			rQueue.pop();
		}
		delayInit = false;
	}
	bool isClear() {
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
		if (rQueue.size() == 0) {
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4618      	mov	r0, r3
 8002452:	f000 feb1 	bl	80031b8 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf0c      	ite	eq
 800245c:	2301      	moveq	r3, #1
 800245e:	2300      	movne	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <_ZN12ActionsQueue7isClearEv+0x24>
			return true;
 8002466:	2301      	movs	r3, #1
 8002468:	e00f      	b.n	800248a <_ZN12ActionsQueue7isClearEv+0x44>
		}
		else if (rQueue.front().robotAction == ACTIONS::IDLE) {
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fec9 	bl	8003204 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 8002472:	4603      	mov	r3, r0
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf0c      	ite	eq
 800247a:	2301      	moveq	r3, #1
 800247c:	2300      	movne	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <_ZN12ActionsQueue7isClearEv+0x42>
			return true;
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <_ZN12ActionsQueue7isClearEv+0x44>
		}
		else {
			return false;
 8002488:	2300      	movs	r3, #0
		};
	}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <_ZN12ActionsQueue7handlerEv>:

	void handler(){
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
		telega.handler();
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fe1b 	bl	80020dc <_ZN6Telega7handlerEv>
	}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <_ZN12ActionsQueue9fastCycleEv>:

	void fastCycle() {
 80024b0:	b5b0      	push	{r4, r5, r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

		float ang,angLimit,Spd;
		if (rQueue.empty()) {
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fe89 	bl	80031d2 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5emptyEv>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00d      	beq.n	80024e2 <_ZN12ActionsQueue9fastCycleEv+0x32>
			rQueue.push(RobotInstruction(IDLE));
 80024c6:	687c      	ldr	r4, [r7, #4]
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f95c 	bl	800278c <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>
 80024d4:	f107 0310 	add.w	r3, r7, #16
 80024d8:	4619      	mov	r1, r3
 80024da:	4620      	mov	r0, r4
 80024dc:	f000 fe5a 	bl	8003194 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>
				break;
			default:
				break;
			}
		}
	};
 80024e0:	e141      	b.n	8002766 <_ZN12ActionsQueue9fastCycleEv+0x2b6>
		else if ((rQueue.size() > 1) && (rQueue.front().robotAction == IDLE)) {
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fe67 	bl	80031b8 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d909      	bls.n	8002504 <_ZN12ActionsQueue9fastCycleEv+0x54>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fe86 	bl	8003204 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 80024f8:	4603      	mov	r3, r0
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <_ZN12ActionsQueue9fastCycleEv+0x54>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <_ZN12ActionsQueue9fastCycleEv+0x56>
 8002504:	2300      	movs	r3, #0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <_ZN12ActionsQueue9fastCycleEv+0x64>
			rQueue.pop();
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fe6d 	bl	80031ec <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
	};
 8002512:	e128      	b.n	8002766 <_ZN12ActionsQueue9fastCycleEv+0x2b6>
			RobotInstruction _curInstr = rQueue.front();
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fe74 	bl	8003204 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 800251c:	4602      	mov	r2, r0
 800251e:	f107 0308 	add.w	r3, r7, #8
 8002522:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002526:	e883 0003 	stmia.w	r3, {r0, r1}
			if(IS_OK(lid.waitPoint())) ;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	333c      	adds	r3, #60	; 0x3c
 800252e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe ff26 	bl	8001384 <_ZN7RPLidar9waitPointEm>
			switch (_curInstr.robotAction)
 8002538:	7a3b      	ldrb	r3, [r7, #8]
 800253a:	2b08      	cmp	r3, #8
 800253c:	f200 8110 	bhi.w	8002760 <_ZN12ActionsQueue9fastCycleEv+0x2b0>
 8002540:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <_ZN12ActionsQueue9fastCycleEv+0x98>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	08002761 	.word	0x08002761
 800254c:	0800256d 	.word	0x0800256d
 8002550:	0800258b 	.word	0x0800258b
 8002554:	080025a9 	.word	0x080025a9
 8002558:	080025c7 	.word	0x080025c7
 800255c:	08002603 	.word	0x08002603
 8002560:	08002621 	.word	0x08002621
 8002564:	08002703 	.word	0x08002703
 8002568:	080025e5 	.word	0x080025e5
				telega.setRobotSpeed(0,0);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8002572:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8002770 <_ZN12ActionsQueue9fastCycleEv+0x2c0>
 8002576:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8002770 <_ZN12ActionsQueue9fastCycleEv+0x2c0>
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fdbf 	bl	80020fe <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fe32 	bl	80031ec <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002588:	e0ed      	b.n	8002766 <_ZN12ActionsQueue9fastCycleEv+0x2b6>
				telega.setRobotSpeed(0,TURN_SPEED);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8002590:	eddf 0a78 	vldr	s1, [pc, #480]	; 8002774 <_ZN12ActionsQueue9fastCycleEv+0x2c4>
 8002594:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8002770 <_ZN12ActionsQueue9fastCycleEv+0x2c0>
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fdb0 	bl	80020fe <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fe23 	bl	80031ec <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 80025a6:	e0de      	b.n	8002766 <_ZN12ActionsQueue9fastCycleEv+0x2b6>
				telega.setRobotSpeed(0,-TURN_SPEED);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 80025ae:	eddf 0a72 	vldr	s1, [pc, #456]	; 8002778 <_ZN12ActionsQueue9fastCycleEv+0x2c8>
 80025b2:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8002770 <_ZN12ActionsQueue9fastCycleEv+0x2c0>
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fda1 	bl	80020fe <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fe14 	bl	80031ec <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 80025c4:	e0cf      	b.n	8002766 <_ZN12ActionsQueue9fastCycleEv+0x2b6>
				telega.setRobotSpeed(MAX_MOT_SPEED*0.7,0);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 80025cc:	eddf 0a68 	vldr	s1, [pc, #416]	; 8002770 <_ZN12ActionsQueue9fastCycleEv+0x2c0>
 80025d0:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800277c <_ZN12ActionsQueue9fastCycleEv+0x2cc>
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fd92 	bl	80020fe <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fe05 	bl	80031ec <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 80025e2:	e0c0      	b.n	8002766 <_ZN12ActionsQueue9fastCycleEv+0x2b6>
				telega.setRobotSpeed(MAX_MOT_SPEED,0);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 80025ea:	eddf 0a61 	vldr	s1, [pc, #388]	; 8002770 <_ZN12ActionsQueue9fastCycleEv+0x2c0>
 80025ee:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8002774 <_ZN12ActionsQueue9fastCycleEv+0x2c4>
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fd83 	bl	80020fe <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fdf6 	bl	80031ec <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002600:	e0b1      	b.n	8002766 <_ZN12ActionsQueue9fastCycleEv+0x2b6>
				telega.setRobotSpeed(-MAX_MOT_SPEED*0.7, 0);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8002608:	eddf 0a59 	vldr	s1, [pc, #356]	; 8002770 <_ZN12ActionsQueue9fastCycleEv+0x2c0>
 800260c:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8002780 <_ZN12ActionsQueue9fastCycleEv+0x2d0>
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fd74 	bl	80020fe <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fde7 	bl	80031ec <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 800261e:	e0a2      	b.n	8002766 <_ZN12ActionsQueue9fastCycleEv+0x2b6>
				ang = tan.getErrorAngle(lid.getDistances());
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	333c      	adds	r3, #60	; 0x3c
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fe6a 	bl	8001304 <_ZN7RPLidar12getDistancesEv>
 8002630:	4603      	mov	r3, r0
 8002632:	4619      	mov	r1, r3
 8002634:	4620      	mov	r0, r4
 8002636:	f7ff fe0d 	bl	8002254 <_ZN10TanControl13getErrorAngleEPf>
 800263a:	ed87 0a07 	vstr	s0, [r7, #28]
				angLimit = tan.limitAng(ang);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8002644:	ed97 0a07 	vldr	s0, [r7, #28]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fe49 	bl	80022e0 <_ZN10TanControl8limitAngEf>
 800264e:	ed87 0a06 	vstr	s0, [r7, #24]
				spd = tan.calcTgtRobotSpds(lid.getDistances((uint32_t)ang), angLimit);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	333c      	adds	r3, #60	; 0x3c
 800265c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002664:	ee17 2a90 	vmov	r2, s15
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fe56 	bl	800131c <_ZN7RPLidar12getDistancesEi>
 8002670:	eef0 7a40 	vmov.f32	s15, s0
 8002674:	687d      	ldr	r5, [r7, #4]
 8002676:	edd7 0a06 	vldr	s1, [r7, #24]
 800267a:	eeb0 0a67 	vmov.f32	s0, s15
 800267e:	4620      	mov	r0, r4
 8002680:	f7ff fd7a 	bl	8002178 <_ZN10TanControl16calcTgtRobotSpdsEff>
 8002684:	eeb0 7a40 	vmov.f32	s14, s0
 8002688:	eef0 7a60 	vmov.f32	s15, s1
 800268c:	462b      	mov	r3, r5
 800268e:	f203 639c 	addw	r3, r3, #1692	; 0x69c
 8002692:	ed83 7a00 	vstr	s14, [r3]
 8002696:	462b      	mov	r3, r5
 8002698:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800269c:	edc3 7a00 	vstr	s15, [r3]
				if (abs(angLimit)>90){
 80026a0:	ed97 0a06 	vldr	s0, [r7, #24]
 80026a4:	f7fe ff60 	bl	8001568 <_ZSt3absf>
 80026a8:	eef0 7a40 	vmov.f32	s15, s0
 80026ac:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002784 <_ZN12ActionsQueue9fastCycleEv+0x2d4>
 80026b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b8:	bfcc      	ite	gt
 80026ba:	2301      	movgt	r3, #1
 80026bc:	2300      	movle	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <_ZN12ActionsQueue9fastCycleEv+0x220>
					spd.lin = 0.0f;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f203 639c 	addw	r3, r3, #1692	; 0x69c
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
				telega.setRobotSpeed(-spd.lin,-spd.ang);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f203 52ec 	addw	r2, r3, #1516	; 0x5ec
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f203 639c 	addw	r3, r3, #1692	; 0x69c
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	eeb1 7a67 	vneg.f32	s14, s15
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	eef1 7a67 	vneg.f32	s15, s15
 80026f2:	eef0 0a67 	vmov.f32	s1, s15
 80026f6:	eeb0 0a47 	vmov.f32	s0, s14
 80026fa:	4610      	mov	r0, r2
 80026fc:	f7ff fcff 	bl	80020fe <_ZN6Telega13setRobotSpeedEff>
				break;
 8002700:	e031      	b.n	8002766 <_ZN12ActionsQueue9fastCycleEv+0x2b6>
				if (!delayInit) {
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 36a4 	ldrb.w	r3, [r3, #1700]	; 0x6a4
 8002708:	f083 0301 	eor.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d009      	beq.n	8002726 <_ZN12ActionsQueue9fastCycleEv+0x276>
					delayInit = true;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
					delayBegin = HAL_GetTick();
 800271a:	f002 fd67 	bl	80051ec <HAL_GetTick>
 800271e:	4603      	mov	r3, r0
 8002720:	4a19      	ldr	r2, [pc, #100]	; (8002788 <_ZN12ActionsQueue9fastCycleEv+0x2d8>)
 8002722:	6013      	str	r3, [r2, #0]
				break;
 8002724:	e01e      	b.n	8002764 <_ZN12ActionsQueue9fastCycleEv+0x2b4>
				else if (HAL_GetTick() - delayBegin >= (uint16_t)_curInstr.parametr) {
 8002726:	f002 fd61 	bl	80051ec <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	4b16      	ldr	r3, [pc, #88]	; (8002788 <_ZN12ActionsQueue9fastCycleEv+0x2d8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	edd7 7a03 	vldr	s15, [r7, #12]
 8002736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800273a:	ee17 2a90 	vmov	r2, s15
 800273e:	b292      	uxth	r2, r2
 8002740:	4293      	cmp	r3, r2
 8002742:	bf2c      	ite	cs
 8002744:	2301      	movcs	r3, #1
 8002746:	2300      	movcc	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <_ZN12ActionsQueue9fastCycleEv+0x2b4>
					rQueue.pop();
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fd4b 	bl	80031ec <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
					delayInit = false;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
				break;
 800275e:	e001      	b.n	8002764 <_ZN12ActionsQueue9fastCycleEv+0x2b4>
				break;
 8002760:	bf00      	nop
 8002762:	e000      	b.n	8002766 <_ZN12ActionsQueue9fastCycleEv+0x2b6>
				break;
 8002764:	bf00      	nop
	};
 8002766:	bf00      	nop
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bdb0      	pop	{r4, r5, r7, pc}
 800276e:	bf00      	nop
 8002770:	00000000 	.word	0x00000000
 8002774:	42c80000 	.word	0x42c80000
 8002778:	c2c80000 	.word	0xc2c80000
 800277c:	428c0000 	.word	0x428c0000
 8002780:	c28c0000 	.word	0xc28c0000
 8002784:	42b40000 	.word	0x42b40000
 8002788:	200001fc 	.word	0x200001fc

0800278c <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>:
		bool paramAvalible = false;
		bool pointAvalible = false;
		float parametr = 0;

		RobotInstruction() {};
		RobotInstruction(ACTIONS _action)
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
			: robotAction(_action) {};
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	701a      	strb	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	705a      	strb	r2, [r3, #1]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	709a      	strb	r2, [r3, #2]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) // Проверяем, что прерывание от TIM3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d102      	bne.n	80027d8 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        // Действия при срабатывании прерывания
    	Queue.handler();
 80027d2:	4804      	ldr	r0, [pc, #16]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80027d4:	f7ff fe5d 	bl	8002492 <_ZN12ActionsQueue7handlerEv>
    	//telega.handler();
    }
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40010000 	.word	0x40010000
 80027e4:	20000200 	.word	0x20000200

080027e8 <_Z4initv>:
void init(){
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
	  //питание для левого энкодера
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80027ec:	2200      	movs	r2, #0
 80027ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027f2:	4818      	ldr	r0, [pc, #96]	; (8002854 <_Z4initv+0x6c>)
 80027f4:	f003 fcbe 	bl	8006174 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80027f8:	2201      	movs	r2, #1
 80027fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027fe:	4815      	ldr	r0, [pc, #84]	; (8002854 <_Z4initv+0x6c>)
 8002800:	f003 fcb8 	bl	8006174 <HAL_GPIO_WritePin>

	  //питание для правого энкодера
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002804:	2200      	movs	r2, #0
 8002806:	2110      	movs	r1, #16
 8002808:	4813      	ldr	r0, [pc, #76]	; (8002858 <_Z4initv+0x70>)
 800280a:	f003 fcb3 	bl	8006174 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800280e:	2201      	movs	r2, #1
 8002810:	2120      	movs	r1, #32
 8002812:	4811      	ldr	r0, [pc, #68]	; (8002858 <_Z4initv+0x70>)
 8002814:	f003 fcae 	bl	8006174 <HAL_GPIO_WritePin>

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002818:	2100      	movs	r1, #0
 800281a:	4810      	ldr	r0, [pc, #64]	; (800285c <_Z4initv+0x74>)
 800281c:	f006 f83e 	bl	800889c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002820:	2104      	movs	r1, #4
 8002822:	480e      	ldr	r0, [pc, #56]	; (800285c <_Z4initv+0x74>)
 8002824:	f006 f83a 	bl	800889c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002828:	2108      	movs	r1, #8
 800282a:	480c      	ldr	r0, [pc, #48]	; (800285c <_Z4initv+0x74>)
 800282c:	f006 f836 	bl	800889c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002830:	210c      	movs	r1, #12
 8002832:	480a      	ldr	r0, [pc, #40]	; (800285c <_Z4initv+0x74>)
 8002834:	f006 f832 	bl	800889c <HAL_TIM_PWM_Start>

	  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8002838:	2100      	movs	r1, #0
 800283a:	4809      	ldr	r0, [pc, #36]	; (8002860 <_Z4initv+0x78>)
 800283c:	f006 f984 	bl	8008b48 <HAL_TIM_Encoder_Start>

	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8002840:	2100      	movs	r1, #0
 8002842:	4808      	ldr	r0, [pc, #32]	; (8002864 <_Z4initv+0x7c>)
 8002844:	f006 f980 	bl	8008b48 <HAL_TIM_Encoder_Start>

	  HAL_TIM_Base_Start_IT(&htim1);
 8002848:	4807      	ldr	r0, [pc, #28]	; (8002868 <_Z4initv+0x80>)
 800284a:	f005 ff75 	bl	8008738 <HAL_TIM_Base_Start_IT>

}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40020000 	.word	0x40020000
 8002858:	40020400 	.word	0x40020400
 800285c:	2000098c 	.word	0x2000098c
 8002860:	20000944 	.word	0x20000944
 8002864:	200009d4 	.word	0x200009d4
 8002868:	200008fc 	.word	0x200008fc

0800286c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002870:	f002 fc56 	bl	8005120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002874:	f000 f82c 	bl	80028d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002878:	f000 fada 	bl	8002e30 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800287c:	f000 fab0 	bl	8002de0 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8002880:	f000 fa80 	bl	8002d84 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8002884:	f000 f896 	bl	80029b4 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 8002888:	f000 f928 	bl	8002adc <_ZL12MX_TIM2_Initv>
  MX_TIM4_Init();
 800288c:	f000 fa1c 	bl	8002cc8 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 8002890:	f000 f982 	bl	8002b98 <_ZL12MX_TIM3_Initv>
  MX_TIM1_Init();
 8002894:	f000 f8c2 	bl	8002a1c <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8002898:	2064      	movs	r0, #100	; 0x64
 800289a:	f002 fcb3 	bl	8005204 <HAL_Delay>
  init();
 800289e:	f7ff ffa3 	bl	80027e8 <_Z4initv>
  Queue.init();
 80028a2:	480a      	ldr	r0, [pc, #40]	; (80028cc <main+0x60>)
 80028a4:	f7ff fda2 	bl	80023ec <_ZN12ActionsQueue4initEv>
  HAL_Delay(100);
 80028a8:	2064      	movs	r0, #100	; 0x64
 80028aa:	f002 fcab 	bl	8005204 <HAL_Delay>
  while (1)
  {
//


	  if(Queue.isClear()){
 80028ae:	4807      	ldr	r0, [pc, #28]	; (80028cc <main+0x60>)
 80028b0:	f7ff fdc9 	bl	8002446 <_ZN12ActionsQueue7isClearEv>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <main+0x56>
		  Queue.push(SET_SPEED_TURN); // Движение вперёд
 80028ba:	2106      	movs	r1, #6
 80028bc:	4803      	ldr	r0, [pc, #12]	; (80028cc <main+0x60>)
 80028be:	f7ff fdaa 	bl	8002416 <_ZN12ActionsQueue4pushE7ACTIONS>

	  }

      Queue.fastCycle();
 80028c2:	4802      	ldr	r0, [pc, #8]	; (80028cc <main+0x60>)
 80028c4:	f7ff fdf4 	bl	80024b0 <_ZN12ActionsQueue9fastCycleEv>
	  if(Queue.isClear()){
 80028c8:	e7f1      	b.n	80028ae <main+0x42>
 80028ca:	bf00      	nop
 80028cc:	20000200 	.word	0x20000200

080028d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b094      	sub	sp, #80	; 0x50
 80028d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028d6:	f107 0320 	add.w	r3, r7, #32
 80028da:	2230      	movs	r2, #48	; 0x30
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f009 ff82 	bl	800c7e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	4b2c      	ldr	r3, [pc, #176]	; (80029ac <_Z18SystemClock_Configv+0xdc>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a2b      	ldr	r2, [pc, #172]	; (80029ac <_Z18SystemClock_Configv+0xdc>)
 80028fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
 8002904:	4b29      	ldr	r3, [pc, #164]	; (80029ac <_Z18SystemClock_Configv+0xdc>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002910:	2300      	movs	r3, #0
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <_Z18SystemClock_Configv+0xe0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a25      	ldr	r2, [pc, #148]	; (80029b0 <_Z18SystemClock_Configv+0xe0>)
 800291a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <_Z18SystemClock_Configv+0xe0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800292c:	2301      	movs	r3, #1
 800292e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002936:	2302      	movs	r3, #2
 8002938:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800293a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800293e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002940:	230c      	movs	r3, #12
 8002942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002944:	2360      	movs	r3, #96	; 0x60
 8002946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002948:	2302      	movs	r3, #2
 800294a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800294c:	2304      	movs	r3, #4
 800294e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002950:	f107 0320 	add.w	r3, r7, #32
 8002954:	4618      	mov	r0, r3
 8002956:	f005 fa47 	bl	8007de8 <HAL_RCC_OscConfig>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800296a:	f000 faed 	bl	8002f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800296e:	230f      	movs	r3, #15
 8002970:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002972:	2302      	movs	r3, #2
 8002974:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800297a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800297e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	2103      	movs	r1, #3
 800298a:	4618      	mov	r0, r3
 800298c:	f005 fca4 	bl	80082d8 <HAL_RCC_ClockConfig>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	bf14      	ite	ne
 8002996:	2301      	movne	r3, #1
 8002998:	2300      	moveq	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80029a0:	f000 fad2 	bl	8002f48 <Error_Handler>
  }
}
 80029a4:	bf00      	nop
 80029a6:	3750      	adds	r7, #80	; 0x50
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40007000 	.word	0x40007000

080029b4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029b8:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <_ZL12MX_I2C1_Initv+0x60>)
 80029bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029be:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029c0:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <_ZL12MX_I2C1_Initv+0x64>)
 80029c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029ca:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029d8:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029e4:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029f0:	4807      	ldr	r0, [pc, #28]	; (8002a10 <_ZL12MX_I2C1_Initv+0x5c>)
 80029f2:	f003 fbd9 	bl	80061a8 <HAL_I2C_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002a06:	f000 fa9f 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	200008a8 	.word	0x200008a8
 8002a14:	40005400 	.word	0x40005400
 8002a18:	000186a0 	.word	0x000186a0

08002a1c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a30:	463b      	mov	r3, r7
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a38:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a3a:	4a27      	ldr	r2, [pc, #156]	; (8002ad8 <_ZL12MX_TIM1_Initv+0xbc>)
 8002a3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8002a3e:	4b25      	ldr	r3, [pc, #148]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a40:	2263      	movs	r2, #99	; 0x63
 8002a42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a44:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002a4a:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a58:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a64:	481b      	ldr	r0, [pc, #108]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a66:	f005 fe17 	bl	8008698 <HAL_TIM_Base_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8002a7a:	f000 fa65 	bl	8002f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a84:	f107 0308 	add.w	r3, r7, #8
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4812      	ldr	r0, [pc, #72]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002a8c:	f006 fab4 	bl	8008ff8 <HAL_TIM_ConfigClockSource>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8002aa0:	f000 fa52 	bl	8002f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002aac:	463b      	mov	r3, r7
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4808      	ldr	r0, [pc, #32]	; (8002ad4 <_ZL12MX_TIM1_Initv+0xb8>)
 8002ab2:	f006 fe5d 	bl	8009770 <HAL_TIMEx_MasterConfigSynchronization>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8002ac6:	f000 fa3f 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200008fc 	.word	0x200008fc
 8002ad8:	40010000 	.word	0x40010000

08002adc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08c      	sub	sp, #48	; 0x30
 8002ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ae2:	f107 030c 	add.w	r3, r7, #12
 8002ae6:	2224      	movs	r2, #36	; 0x24
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f009 fe7c 	bl	800c7e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002af8:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <_ZL12MX_TIM2_Initv+0xb8>)
 8002afa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002afe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b00:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b06:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b14:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b1a:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b20:	2301      	movs	r3, #1
 8002b22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b34:	2300      	movs	r3, #0
 8002b36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4812      	ldr	r0, [pc, #72]	; (8002b94 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b4c:	f005 ff56 	bl	80089fc <HAL_TIM_Encoder_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	bf14      	ite	ne
 8002b56:	2301      	movne	r3, #1
 8002b58:	2300      	moveq	r3, #0
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8002b60:	f000 f9f2 	bl	8002f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b64:	2300      	movs	r3, #0
 8002b66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4808      	ldr	r0, [pc, #32]	; (8002b94 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b72:	f006 fdfd 	bl	8009770 <HAL_TIMEx_MasterConfigSynchronization>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8002b86:	f000 f9df 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b8a:	bf00      	nop
 8002b8c:	3730      	adds	r7, #48	; 0x30
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000944 	.word	0x20000944

08002b98 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	; 0x28
 8002b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b9e:	f107 0320 	add.w	r3, r7, #32
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
 8002bb4:	611a      	str	r2, [r3, #16]
 8002bb6:	615a      	str	r2, [r3, #20]
 8002bb8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bba:	4b41      	ldr	r3, [pc, #260]	; (8002cc0 <_ZL12MX_TIM3_Initv+0x128>)
 8002bbc:	4a41      	ldr	r2, [pc, #260]	; (8002cc4 <_ZL12MX_TIM3_Initv+0x12c>)
 8002bbe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002bc0:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <_ZL12MX_TIM3_Initv+0x128>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc6:	4b3e      	ldr	r3, [pc, #248]	; (8002cc0 <_ZL12MX_TIM3_Initv+0x128>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002bcc:	4b3c      	ldr	r3, [pc, #240]	; (8002cc0 <_ZL12MX_TIM3_Initv+0x128>)
 8002bce:	f242 720f 	movw	r2, #9999	; 0x270f
 8002bd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd4:	4b3a      	ldr	r3, [pc, #232]	; (8002cc0 <_ZL12MX_TIM3_Initv+0x128>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bda:	4b39      	ldr	r3, [pc, #228]	; (8002cc0 <_ZL12MX_TIM3_Initv+0x128>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002be0:	4837      	ldr	r0, [pc, #220]	; (8002cc0 <_ZL12MX_TIM3_Initv+0x128>)
 8002be2:	f005 fe0b 	bl	80087fc <HAL_TIM_PWM_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf14      	ite	ne
 8002bec:	2301      	movne	r3, #1
 8002bee:	2300      	moveq	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8002bf6:	f000 f9a7 	bl	8002f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c02:	f107 0320 	add.w	r3, r7, #32
 8002c06:	4619      	mov	r1, r3
 8002c08:	482d      	ldr	r0, [pc, #180]	; (8002cc0 <_ZL12MX_TIM3_Initv+0x128>)
 8002c0a:	f006 fdb1 	bl	8009770 <HAL_TIMEx_MasterConfigSynchronization>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8002c1e:	f000 f993 	bl	8002f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c22:	2360      	movs	r3, #96	; 0x60
 8002c24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	2200      	movs	r2, #0
 8002c36:	4619      	mov	r1, r3
 8002c38:	4821      	ldr	r0, [pc, #132]	; (8002cc0 <_ZL12MX_TIM3_Initv+0x128>)
 8002c3a:	f006 f91b 	bl	8008e74 <HAL_TIM_PWM_ConfigChannel>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8002c4e:	f000 f97b 	bl	8002f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	2204      	movs	r2, #4
 8002c56:	4619      	mov	r1, r3
 8002c58:	4819      	ldr	r0, [pc, #100]	; (8002cc0 <_ZL12MX_TIM3_Initv+0x128>)
 8002c5a:	f006 f90b 	bl	8008e74 <HAL_TIM_PWM_ConfigChannel>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf14      	ite	ne
 8002c64:	2301      	movne	r3, #1
 8002c66:	2300      	moveq	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8002c6e:	f000 f96b 	bl	8002f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	2208      	movs	r2, #8
 8002c76:	4619      	mov	r1, r3
 8002c78:	4811      	ldr	r0, [pc, #68]	; (8002cc0 <_ZL12MX_TIM3_Initv+0x128>)
 8002c7a:	f006 f8fb 	bl	8008e74 <HAL_TIM_PWM_ConfigChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 8002c8e:	f000 f95b 	bl	8002f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	220c      	movs	r2, #12
 8002c96:	4619      	mov	r1, r3
 8002c98:	4809      	ldr	r0, [pc, #36]	; (8002cc0 <_ZL12MX_TIM3_Initv+0x128>)
 8002c9a:	f006 f8eb 	bl	8008e74 <HAL_TIM_PWM_ConfigChannel>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf14      	ite	ne
 8002ca4:	2301      	movne	r3, #1
 8002ca6:	2300      	moveq	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 8002cae:	f000 f94b 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002cb2:	4803      	ldr	r0, [pc, #12]	; (8002cc0 <_ZL12MX_TIM3_Initv+0x128>)
 8002cb4:	f001 ff6a 	bl	8004b8c <HAL_TIM_MspPostInit>

}
 8002cb8:	bf00      	nop
 8002cba:	3728      	adds	r7, #40	; 0x28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	2000098c 	.word	0x2000098c
 8002cc4:	40000400 	.word	0x40000400

08002cc8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08c      	sub	sp, #48	; 0x30
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cce:	f107 030c 	add.w	r3, r7, #12
 8002cd2:	2224      	movs	r2, #36	; 0x24
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f009 fd86 	bl	800c7e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ce4:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <_ZL12MX_TIM4_Initv+0xb4>)
 8002ce6:	4a26      	ldr	r2, [pc, #152]	; (8002d80 <_ZL12MX_TIM4_Initv+0xb8>)
 8002ce8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002cea:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <_ZL12MX_TIM4_Initv+0xb4>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf0:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <_ZL12MX_TIM4_Initv+0xb4>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002cf6:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <_ZL12MX_TIM4_Initv+0xb4>)
 8002cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cfc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cfe:	4b1f      	ldr	r3, [pc, #124]	; (8002d7c <_ZL12MX_TIM4_Initv+0xb4>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d04:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <_ZL12MX_TIM4_Initv+0xb4>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d12:	2301      	movs	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d22:	2301      	movs	r3, #1
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d26:	2300      	movs	r3, #0
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002d2e:	f107 030c 	add.w	r3, r7, #12
 8002d32:	4619      	mov	r1, r3
 8002d34:	4811      	ldr	r0, [pc, #68]	; (8002d7c <_ZL12MX_TIM4_Initv+0xb4>)
 8002d36:	f005 fe61 	bl	80089fc <HAL_TIM_Encoder_Init>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8002d4a:	f000 f8fd 	bl	8002f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4808      	ldr	r0, [pc, #32]	; (8002d7c <_ZL12MX_TIM4_Initv+0xb4>)
 8002d5c:	f006 fd08 	bl	8009770 <HAL_TIMEx_MasterConfigSynchronization>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	bf14      	ite	ne
 8002d66:	2301      	movne	r3, #1
 8002d68:	2300      	moveq	r3, #0
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8002d70:	f000 f8ea 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d74:	bf00      	nop
 8002d76:	3730      	adds	r7, #48	; 0x30
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200009d4 	.word	0x200009d4
 8002d80:	40000800 	.word	0x40000800

08002d84 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002d8a:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <_ZL19MX_USART2_UART_Initv+0x58>)
 8002d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d8e:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002daa:	220c      	movs	r2, #12
 8002dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dba:	4807      	ldr	r0, [pc, #28]	; (8002dd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002dbc:	f006 fd5a 	bl	8009874 <HAL_UART_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bf14      	ite	ne
 8002dc6:	2301      	movne	r3, #1
 8002dc8:	2300      	moveq	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002dd0:	f000 f8ba 	bl	8002f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000a1c 	.word	0x20000a1c
 8002ddc:	40004400 	.word	0x40004400

08002de0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <_ZL11MX_DMA_Initv+0x4c>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <_ZL11MX_DMA_Initv+0x4c>)
 8002df0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <_ZL11MX_DMA_Initv+0x4c>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfe:	607b      	str	r3, [r7, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2100      	movs	r1, #0
 8002e06:	2010      	movs	r0, #16
 8002e08:	f002 fb1f 	bl	800544a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002e0c:	2010      	movs	r0, #16
 8002e0e:	f002 fb38 	bl	8005482 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2100      	movs	r1, #0
 8002e16:	2011      	movs	r0, #17
 8002e18:	f002 fb17 	bl	800544a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002e1c:	2011      	movs	r0, #17
 8002e1e:	f002 fb30 	bl	8005482 <HAL_NVIC_EnableIRQ>

}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800

08002e30 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	60da      	str	r2, [r3, #12]
 8002e44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	4b3b      	ldr	r3, [pc, #236]	; (8002f38 <_ZL12MX_GPIO_Initv+0x108>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a3a      	ldr	r2, [pc, #232]	; (8002f38 <_ZL12MX_GPIO_Initv+0x108>)
 8002e50:	f043 0304 	orr.w	r3, r3, #4
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b38      	ldr	r3, [pc, #224]	; (8002f38 <_ZL12MX_GPIO_Initv+0x108>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <_ZL12MX_GPIO_Initv+0x108>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a33      	ldr	r2, [pc, #204]	; (8002f38 <_ZL12MX_GPIO_Initv+0x108>)
 8002e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <_ZL12MX_GPIO_Initv+0x108>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <_ZL12MX_GPIO_Initv+0x108>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a2c      	ldr	r2, [pc, #176]	; (8002f38 <_ZL12MX_GPIO_Initv+0x108>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <_ZL12MX_GPIO_Initv+0x108>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <_ZL12MX_GPIO_Initv+0x108>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a25      	ldr	r2, [pc, #148]	; (8002f38 <_ZL12MX_GPIO_Initv+0x108>)
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b23      	ldr	r3, [pc, #140]	; (8002f38 <_ZL12MX_GPIO_Initv+0x108>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ebc:	481f      	ldr	r0, [pc, #124]	; (8002f3c <_ZL12MX_GPIO_Initv+0x10c>)
 8002ebe:	f003 f959 	bl	8006174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002ec8:	481d      	ldr	r0, [pc, #116]	; (8002f40 <_ZL12MX_GPIO_Initv+0x110>)
 8002eca:	f003 f953 	bl	8006174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2130      	movs	r1, #48	; 0x30
 8002ed2:	481c      	ldr	r0, [pc, #112]	; (8002f44 <_ZL12MX_GPIO_Initv+0x114>)
 8002ed4:	f003 f94e 	bl	8006174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4812      	ldr	r0, [pc, #72]	; (8002f3c <_ZL12MX_GPIO_Initv+0x10c>)
 8002ef2:	f002 fed7 	bl	8005ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ef6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efc:	2301      	movs	r3, #1
 8002efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f04:	2300      	movs	r3, #0
 8002f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480c      	ldr	r0, [pc, #48]	; (8002f40 <_ZL12MX_GPIO_Initv+0x110>)
 8002f10:	f002 fec8 	bl	8005ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002f14:	2330      	movs	r3, #48	; 0x30
 8002f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f20:	2300      	movs	r3, #0
 8002f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4806      	ldr	r0, [pc, #24]	; (8002f44 <_ZL12MX_GPIO_Initv+0x114>)
 8002f2c:	f002 feba 	bl	8005ca4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f30:	bf00      	nop
 8002f32:	3728      	adds	r7, #40	; 0x28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020000 	.word	0x40020000
 8002f44:	40020400 	.word	0x40020400

08002f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4c:	b672      	cpsid	i
}
 8002f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f50:	e7fe      	b.n	8002f50 <Error_Handler+0x8>

08002f52 <_ZNSaIfEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f95f 	bl	800321e <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f95e 	bl	8003234 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8002f82:	b5b0      	push	{r4, r5, r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681c      	ldr	r4, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 f995 	bl	80032c4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002f9a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f000 f99a 	bl	80032da <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 f805 	bl	8002fb8 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bdb0      	pop	{r4, r5, r7, pc}

08002fb8 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f99d 	bl	8003312 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fb57 	bl	800168e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8002fea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8002ff4:	687c      	ldr	r4, [r7, #4]
 8002ff6:	6838      	ldr	r0, [r7, #0]
 8002ff8:	f000 f99e 	bl	8003338 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8002ffc:	4605      	mov	r5, r0
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f000 f9b7 	bl	8003374 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003006:	4602      	mov	r2, r0
 8003008:	f107 030c 	add.w	r3, r7, #12
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f9a2 	bl	8003358 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 8003014:	f107 030c 	add.w	r3, r7, #12
 8003018:	461a      	mov	r2, r3
 800301a:	4629      	mov	r1, r5
 800301c:	4620      	mov	r0, r4
 800301e:	f000 f93d 	bl	800329c <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 8003022:	f107 030c 	add.w	r3, r7, #12
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff ff9f 	bl	8002f6a <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800302c:	6838      	ldr	r0, [r7, #0]
 800302e:	f000 f9ac 	bl	800338a <_ZNKSt6vectorIfSaIfEE5beginEv>
 8003032:	4605      	mov	r5, r0
 8003034:	6838      	ldr	r0, [r7, #0]
 8003036:	f000 f9b8 	bl	80033aa <_ZNKSt6vectorIfSaIfEE3endEv>
 800303a:	4606      	mov	r6, r0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f93e 	bl	80032c4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003048:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800304a:	4622      	mov	r2, r4
 800304c:	4631      	mov	r1, r6
 800304e:	4628      	mov	r0, r5
 8003050:	f000 f9bc 	bl	80033cc <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 8003054:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	605a      	str	r2, [r3, #4]
      }
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003064 <_ZNSt6vectorIfSaIfEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
      }
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>:
      vector(initializer_list<value_type> __l,
 8003084:	b5b0      	push	{r4, r5, r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	1d38      	adds	r0, r7, #4
 800308e:	e880 0006 	stmia.w	r0, {r1, r2}
 8003092:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6839      	ldr	r1, [r7, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f000 f9a8 	bl	80033ee <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 f9b3 	bl	800340c <_ZNKSt16initializer_listIfE5beginEv>
 80030a6:	4604      	mov	r4, r0
 80030a8:	1d3b      	adds	r3, r7, #4
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f9ba 	bl	8003424 <_ZNKSt16initializer_listIfE3endEv>
 80030b0:	4602      	mov	r2, r0
 80030b2:	462b      	mov	r3, r5
 80030b4:	4621      	mov	r1, r4
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f9c6 	bl	8003448 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>
      }
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bdb0      	pop	{r4, r5, r7, pc}

080030c6 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80030c6:	b5b0      	push	{r4, r5, r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	ed87 0a01 	vstr	s0, [r7, #4]
 80030d0:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fd fa40 	bl	8000558 <__aeabi_f2d>
 80030d8:	4604      	mov	r4, r0
 80030da:	460d      	mov	r5, r1
 80030dc:	6838      	ldr	r0, [r7, #0]
 80030de:	f7fd fa29 	bl	8000534 <__aeabi_i2d>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	ec43 2b11 	vmov	d1, r2, r3
 80030ea:	ec45 4b10 	vmov	d0, r4, r5
 80030ee:	f007 fda5 	bl	800ac3c <pow>
 80030f2:	eeb0 7a40 	vmov.f32	s14, s0
 80030f6:	eef0 7a60 	vmov.f32	s15, s1
    }
 80030fa:	eeb0 0a47 	vmov.f32	s0, s14
 80030fe:	eef0 0a67 	vmov.f32	s1, s15
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bdb0      	pop	{r4, r5, r7, pc}

08003108 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f9dd 	bl	80034d2 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
	: c() { }
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4618      	mov	r0, r3
 800312e:	2328      	movs	r3, #40	; 0x28
 8003130:	461a      	mov	r2, r3
 8003132:	2100      	movs	r1, #0
 8003134:	f009 fb58 	bl	800c7e8 <memset>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ffe4 	bl	8003108 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 800314a:	b580      	push	{r7, lr}
 800314c:	b08a      	sub	sp, #40	; 0x28
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8003152:	f107 0308 	add.w	r3, r7, #8
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f9ed 	bl	8003538 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>
 800315e:	f107 0318 	add.w	r3, r7, #24
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f9f6 	bl	8003556 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE3endEv>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	f000 fa01 	bl	8003574 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8003172:	4603      	mov	r3, r0
 8003174:	f107 0218 	add.w	r2, r7, #24
 8003178:	f107 0108 	add.w	r1, r7, #8
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fa20 	bl	80035c2 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f9b5 	bl	80034f4 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4618      	mov	r0, r3
 800318e:	3728      	adds	r7, #40	; 0x28
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>:
      push(const value_type& __x)
      { c.push_back(__x); }

#if __cplusplus >= 201103L
      void
      push(value_type&& __x)
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 800319e:	687c      	ldr	r4, [r7, #4]
 80031a0:	6838      	ldr	r0, [r7, #0]
 80031a2:	f000 fa1b 	bl	80035dc <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4619      	mov	r1, r3
 80031aa:	4620      	mov	r0, r4
 80031ac:	f000 fa21 	bl	80035f2 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9push_backEOS1_>
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd90      	pop	{r4, r7, pc}

080031b8 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>:
      size() const
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fa26 	bl	8003614 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>
 80031c8:	4603      	mov	r3, r0
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5emptyEv>:
      empty() const
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fa2b 	bl	8003638 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5emptyEv>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fa30 	bl	800365c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv>
      }
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>:
      front()
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	return c.front();
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fa48 	bl	80036a4 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5frontEv>
 8003214:	4603      	mov	r3, r0
      }
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8003256:	f107 030c 	add.w	r3, r7, #12
 800325a:	6839      	ldr	r1, [r7, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f000 f84a 	bl	80032f6 <_ZNSaIfEC1ERKS_>
 8003262:	f107 030c 	add.w	r3, r7, #12
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fa30 	bl	80036cc <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 800326c:	4602      	mov	r2, r0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4293      	cmp	r3, r2
 8003272:	bf8c      	ite	hi
 8003274:	2301      	movhi	r3, #1
 8003276:	2300      	movls	r3, #0
 8003278:	b2dc      	uxtb	r4, r3
 800327a:	f107 030c 	add.w	r3, r7, #12
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fe73 	bl	8002f6a <_ZNSaIfED1Ev>
 8003284:	2c00      	cmp	r4, #0
 8003286:	d002      	beq.n	800328e <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8003288:	4803      	ldr	r0, [pc, #12]	; (8003298 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x4c>)
 800328a:	f007 fbed 	bl	800aa68 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 800328e:	687b      	ldr	r3, [r7, #4]
      }
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	bd90      	pop	{r4, r7, pc}
 8003298:	0800f200 	.word	0x0800f200

0800329c <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fa27 	bl	8003700 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 fa35 	bl	8003724 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 fa36 	bl	800375a <_ZSt8_DestroyIPfEvT_S1_>
    }
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003300:	6839      	ldr	r1, [r7, #0]
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fa36 	bl	8003774 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
	if (__p)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fa2e 	bl	800378c <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8003330:	bf00      	nop
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	109b      	asrs	r3, r3, #2
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6839      	ldr	r1, [r7, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fa1f 	bl	80037aa <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	f107 030c 	add.w	r3, r7, #12
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fa12 	bl	80037c4 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b084      	sub	sp, #16
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	1d1a      	adds	r2, r3, #4
 80033b6:	f107 030c 	add.w	r3, r7, #12
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fa01 	bl	80037c4 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 fa00 	bl	80037e4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 80033e4:	4603      	mov	r3, r0
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6839      	ldr	r1, [r7, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 f97f 	bl	8003700 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ffed 	bl	800340c <_ZNKSt16initializer_listIfE5beginEv>
 8003432:	4604      	mov	r4, r0
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f9e7 	bl	8003808 <_ZNKSt16initializer_listIfE4sizeEv>
 800343a:	4603      	mov	r3, r0
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4423      	add	r3, r4
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bd90      	pop	{r4, r7, pc}

08003448 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	68b8      	ldr	r0, [r7, #8]
 800345a:	f000 f9e1 	bl	8003820 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800345e:	4603      	mov	r3, r0
 8003460:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8003462:	68fc      	ldr	r4, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff ff2c 	bl	80032c4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800346c:	4603      	mov	r3, r0
 800346e:	4619      	mov	r1, r3
 8003470:	6978      	ldr	r0, [r7, #20]
 8003472:	f7ff feeb 	bl	800324c <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
 8003476:	4603      	mov	r3, r0
 8003478:	4619      	mov	r1, r3
 800347a:	4620      	mov	r0, r4
 800347c:	f000 f9e4 	bl	8003848 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	441a      	add	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ff12 	bl	80032c4 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80034a0:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 80034a2:	4622      	mov	r2, r4
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	68b8      	ldr	r0, [r7, #8]
 80034a8:	f000 f9e2 	bl	8003870 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
 80034ac:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	605a      	str	r2, [r3, #4]
	}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd90      	pop	{r4, r7, pc}

080034ba <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f9f5 	bl	80038b2 <_ZNSaIN12ActionsQueue16RobotInstructionEED1Ev>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>:
      _Deque_base()
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f9d8 	bl	8003892 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80034e2:	2100      	movs	r1, #0
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f9f0 	bl	80038ca <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_initialize_mapEj>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d010      	beq.n	8003526 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800350c:	3304      	adds	r3, #4
 800350e:	461a      	mov	r2, r3
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fa3d 	bl	8003990 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6819      	ldr	r1, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	461a      	mov	r2, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fa4f 	bl	80039c4 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ffc6 	bl	80034ba <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implD1Ev>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	3308      	adds	r3, #8
 8003546:	4619      	mov	r1, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f81e 	bl	800358a <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	3318      	adds	r3, #24
 8003564:	4619      	mov	r1, r3
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f80f 	bl	800358a <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	60da      	str	r2, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 80035c2:	b480      	push	{r7}
 80035c4:	b08d      	sub	sp, #52	; 0x34
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 80035d0:	bf00      	nop
 80035d2:	3734      	adds	r7, #52	; 0x34
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80035fc:	6838      	ldr	r0, [r7, #0]
 80035fe:	f7ff ffed 	bl	80035dc <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>
 8003602:	4603      	mov	r3, r0
 8003604:	4619      	mov	r1, r3
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f9f8 	bl	80039fc <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f103 0218 	add.w	r2, r3, #24
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3308      	adds	r3, #8
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f000 fa12 	bl	8003a52 <_ZStmiRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>
 800362e:	4603      	mov	r3, r0
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f103 0218 	add.w	r2, r3, #24
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3308      	adds	r3, #8
 800364a:	4619      	mov	r1, r3
 800364c:	4610      	mov	r0, r2
 800364e:	f000 fa24 	bl	8003a9a <_ZSteqRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>
 8003652:	4603      	mov	r3, r0
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	3b08      	subs	r3, #8
	if (this->_M_impl._M_start._M_cur
 800366e:	429a      	cmp	r2, r3
 8003670:	d011      	beq.n	8003696 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff7d 	bl	8003574 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 800367a:	4602      	mov	r2, r0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4619      	mov	r1, r3
 8003682:	4610      	mov	r0, r2
 8003684:	f000 fa1d 	bl	8003ac2 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f103 0208 	add.w	r2, r3, #8
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	609a      	str	r2, [r3, #8]
      }
 8003694:	e002      	b.n	800369c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fa20 	bl	8003adc <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_pop_front_auxEv>
      }
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	return *begin();
 80036ac:	f107 0308 	add.w	r3, r7, #8
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff ff40 	bl	8003538 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>
 80036b8:	f107 0308 	add.w	r3, r7, #8
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fa35 	bl	8003b2c <_ZNKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EdeEv>
 80036c2:	4603      	mov	r3, r0
      }
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80036d4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80036d8:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fa32 	bl	8003b44 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 80036e0:	4603      	mov	r3, r0
 80036e2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80036e4:	f107 0208 	add.w	r2, r7, #8
 80036e8:	f107 030c 	add.w	r3, r7, #12
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fa34 	bl	8003b5c <_ZSt3minIjERKT_S2_S2_>
 80036f4:	4603      	mov	r3, r0
 80036f6:	681b      	ldr	r3, [r3, #0]
      }
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800370a:	6839      	ldr	r1, [r7, #0]
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff fdf2 	bl	80032f6 <_ZNSaIfEC1ERKS_>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fa35 	bl	8003b84 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800372e:	6839      	ldr	r1, [r7, #0]
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f889 	bl	8003848 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8003736:	4602      	mov	r2, r0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	441a      	add	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	609a      	str	r2, [r3, #8]
      }
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8003764:	6839      	ldr	r1, [r7, #0]
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa20 	bl	8003bac <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 fa10 	bl	8003bc2 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80037b4:	6839      	ldr	r1, [r7, #0]
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fd9d 	bl	80032f6 <_ZNSaIfEC1ERKS_>
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80037f0:	2301      	movs	r3, #1
 80037f2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f9f2 	bl	8003be2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 80037fe:	4603      	mov	r3, r0
    }
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8003820:	b5b0      	push	{r4, r5, r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800382a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f9e7 	bl	8003c02 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8003834:	462a      	mov	r2, r5
 8003836:	6839      	ldr	r1, [r7, #0]
 8003838:	4620      	mov	r0, r4
 800383a:	f000 f9ed 	bl	8003c18 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800383e:	4603      	mov	r3, r0
    }
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bdb0      	pop	{r4, r5, r7, pc}

08003848 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d006      	beq.n	8003866 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6839      	ldr	r1, [r7, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 f9eb 	bl	8003c38 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8003862:	4603      	mov	r3, r0
 8003864:	e000      	b.n	8003868 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8003866:	2300      	movs	r3, #0
      }
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f9e7 	bl	8003c56 <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>
 8003888:	4603      	mov	r3, r0
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f9ed 	bl	8003c7a <_ZNSaIN12ActionsQueue16RobotInstructionEEC1Ev>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f9f5 	bl	8003c92 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <_ZNSaIN12ActionsQueue16RobotInstructionEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fa02 	bl	8003cc4 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEED1Ev>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80038ca:	b590      	push	{r4, r7, lr}
 80038cc:	b089      	sub	sp, #36	; 0x24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80038d4:	2008      	movs	r0, #8
 80038d6:	f7fd fe93 	bl	8001600 <_ZSt16__deque_buf_sizej>
 80038da:	4602      	mov	r2, r0
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	fbb3 f3f2 	udiv	r3, r3, r2
 80038e2:	3301      	adds	r3, #1
 80038e4:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80038e6:	2308      	movs	r3, #8
 80038e8:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3302      	adds	r3, #2
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	f107 0210 	add.w	r2, r7, #16
 80038f4:	f107 030c 	add.w	r3, r7, #12
 80038f8:	4611      	mov	r1, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f9ed 	bl	8003cda <_ZSt3maxIjERKT_S2_S2_>
 8003900:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f9f7 	bl	8003d02 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>
 8003914:	4602      	mov	r2, r0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6859      	ldr	r1, [r3, #4]
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	1acb      	subs	r3, r1, r3
 8003926:	085b      	lsrs	r3, r3, #1
 8003928:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 800392a:	4413      	add	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4413      	add	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	69b9      	ldr	r1, [r7, #24]
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f9fd 	bl	8003d3c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3308      	adds	r3, #8
 8003946:	69b9      	ldr	r1, [r7, #24]
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fa11 	bl	8003d70 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f103 0218 	add.w	r2, r3, #24
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	3b04      	subs	r3, #4
 8003958:	4619      	mov	r1, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f000 fa08 	bl	8003d70 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 800396c:	2008      	movs	r0, #8
 800396e:	f7fd fe47 	bl	8001600 <_ZSt16__deque_buf_sizej>
 8003972:	4602      	mov	r2, r0
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	fbb3 f1f2 	udiv	r1, r3, r2
 800397a:	fb01 f202 	mul.w	r2, r1, r2
 800397e:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	619a      	str	r2, [r3, #24]
    }
 8003988:	bf00      	nop
 800398a:	3724      	adds	r7, #36	; 0x24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd90      	pop	{r4, r7, pc}

08003990 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d209      	bcs.n	80039bc <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4619      	mov	r1, r3
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f9f7 	bl	8003da2 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	3304      	adds	r3, #4
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	e7f1      	b.n	80039a0 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 80039bc:	bf00      	nop
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80039d0:	f107 0314 	add.w	r3, r7, #20
 80039d4:	68f9      	ldr	r1, [r7, #12]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f9f6 	bl	8003dc8 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80039dc:	f107 0314 	add.w	r3, r7, #20
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fa0c 	bl	8003e02 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80039ea:	f107 0314 	add.w	r3, r7, #20
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 f9fb 	bl	8003dea <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>
      }
 80039f4:	bf00      	nop
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 80039fc:	b5b0      	push	{r4, r5, r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	3b08      	subs	r3, #8
	if (this->_M_impl._M_finish._M_cur
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d012      	beq.n	8003a3a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8003a14:	687c      	ldr	r4, [r7, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699d      	ldr	r5, [r3, #24]
 8003a1a:	6838      	ldr	r0, [r7, #0]
 8003a1c:	f000 fa00 	bl	8003e20 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003a20:	4603      	mov	r3, r0
 8003a22:	461a      	mov	r2, r3
 8003a24:	4629      	mov	r1, r5
 8003a26:	4620      	mov	r0, r4
 8003a28:	f000 fa05 	bl	8003e36 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f103 0208 	add.w	r2, r3, #8
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8003a38:	e007      	b.n	8003a4a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8003a3a:	6838      	ldr	r0, [r7, #0]
 8003a3c:	f000 f9f0 	bl	8003e20 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003a40:	4603      	mov	r3, r0
 8003a42:	4619      	mov	r1, r3
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fa09 	bl	8003e5c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>
      }
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bdb0      	pop	{r4, r5, r7, pc}

08003a52 <_ZStmiRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8003a5c:	f000 fa42 	bl	8003ee4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>
 8003a60:	4603      	mov	r3, r0
 8003a62:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	109b      	asrs	r3, r3, #2
 8003a70:	3b01      	subs	r3, #1
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6811      	ldr	r1, [r2, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6852      	ldr	r2, [r2, #4]
 8003a7e:	1a8a      	subs	r2, r1, r2
 8003a80:	10d2      	asrs	r2, r2, #3
 8003a82:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	6891      	ldr	r1, [r2, #8]
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	1a8a      	subs	r2, r1, r2
 8003a8e:	10d2      	asrs	r2, r2, #3
 8003a90:	4413      	add	r3, r2
      }
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <_ZSteqRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003acc:	6839      	ldr	r1, [r7, #0]
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa10 	bl	8003ef4 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE7destroyIS2_EEvPT_>
	}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fd44 	bl	8003574 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8003aec:	4602      	mov	r2, r0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	4619      	mov	r1, r3
 8003af4:	4610      	mov	r0, r2
 8003af6:	f7ff ffe4 	bl	8003ac2 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f000 f94d 	bl	8003da2 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f103 0208 	add.w	r2, r3, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f000 f92a 	bl	8003d70 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	609a      	str	r2, [r3, #8]
    }
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <_ZNKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f9dc 	bl	8003f0a <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8003b52:	4603      	mov	r3, r0
      }
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d201      	bcs.n	8003b76 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	e000      	b.n	8003b78 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003b76:	687b      	ldr	r3, [r7, #4]
    }
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
	{ }
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	68b8      	ldr	r0, [r7, #8]
 8003bd6:	f006 ff31 	bl	800aa3c <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f995 	bl	8003f22 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8003c0a:	bf00      	nop
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	109b      	asrs	r3, r3, #2
    }
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003c42:	2200      	movs	r2, #0
 8003c44:	6839      	ldr	r1, [r7, #0]
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f983 	bl	8003f52 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b086      	sub	sp, #24
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003c62:	2301      	movs	r3, #1
 8003c64:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f98f 	bl	8003f8e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>
 8003c70:	4603      	mov	r3, r0
    }
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <_ZNSaIN12ActionsQueue16RobotInstructionEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f993 	bl	8003fae <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEEC1Ev>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3308      	adds	r3, #8
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f98a 	bl	8003fc4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3318      	adds	r3, #24
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 f985 	bl	8003fc4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>
	{ }
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d201      	bcs.n	8003cf4 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	e000      	b.n	8003cf6 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003cf4:	687b      	ldr	r3, [r7, #4]
    }
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8003d02:	b590      	push	{r4, r7, lr}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003d0c:	f107 030c 	add.w	r3, r7, #12
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f858 	bl	8003dc8 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003d18:	f107 030c 	add.w	r3, r7, #12
 8003d1c:	6839      	ldr	r1, [r7, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f967 	bl	8003ff2 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE8allocateERS3_j>
 8003d24:	4604      	mov	r4, r0
 8003d26:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003d28:	f107 030c 	add.w	r3, r7, #12
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 f85c 	bl	8003dea <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003d32:	4623      	mov	r3, r4
      }
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd90      	pop	{r4, r7, pc}

08003d3c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d209      	bcs.n	8003d68 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f95b 	bl	8004010 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3304      	adds	r3, #4
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e7f1      	b.n	8003d4c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8003d68:	bf00      	nop
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8003d70:	b590      	push	{r4, r7, lr}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685c      	ldr	r4, [r3, #4]
 8003d8c:	f000 f8aa 	bl	8003ee4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>
 8003d90:	4603      	mov	r3, r0
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	18e2      	adds	r2, r4, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	609a      	str	r2, [r3, #8]
      }
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd90      	pop	{r4, r7, pc}

08003da2 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8003da2:	b590      	push	{r4, r7, lr}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8003dac:	687c      	ldr	r4, [r7, #4]
 8003dae:	2008      	movs	r0, #8
 8003db0:	f7fd fc26 	bl	8001600 <_ZSt16__deque_buf_sizej>
 8003db4:	4603      	mov	r3, r0
 8003db6:	461a      	mov	r2, r3
 8003db8:	6839      	ldr	r1, [r7, #0]
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f000 f93a 	bl	8004034 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE10deallocateERS2_PS1_j>
      }
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd90      	pop	{r4, r7, pc}

08003dc8 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8003dd2:	6838      	ldr	r0, [r7, #0]
 8003dd4:	f000 f93d 	bl	8004052 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f943 	bl	8004068 <_ZNSaIPN12ActionsQueue16RobotInstructionEEC1IS0_EERKSaIT_E>
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f945 	bl	8004082 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEED1Ev>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f940 	bl	8004098 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE10deallocateEPS3_j>
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff ffec 	bl	8003e20 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f932 	bl	80040b8 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8003e5c:	b5b0      	push	{r4, r5, r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fbd4 	bl	8003614 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f93b 	bl	80040ea <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE8max_sizeEv>
 8003e74:	4603      	mov	r3, r0
 8003e76:	429c      	cmp	r4, r3
 8003e78:	bf0c      	ite	eq
 8003e7a:	2301      	moveq	r3, #1
 8003e7c:	2300      	movne	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8003e84:	4816      	ldr	r0, [pc, #88]	; (8003ee0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x84>)
 8003e86:	f006 fdef 	bl	800aa68 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f93d 	bl	800410c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	1d1c      	adds	r4, r3, #4
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f000 f8b8 	bl	8004010 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8003ea4:	687c      	ldr	r4, [r7, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699d      	ldr	r5, [r3, #24]
 8003eaa:	6838      	ldr	r0, [r7, #0]
 8003eac:	f7ff ffb8 	bl	8003e20 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7ff ffbd 	bl	8003e36 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f103 0218 	add.w	r2, r3, #24
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f7ff ff50 	bl	8003d70 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	619a      	str	r2, [r3, #24]
      }
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bdb0      	pop	{r4, r5, r7, pc}
 8003ee0:	0800f234 	.word	0x0800f234

08003ee4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8003ee8:	2008      	movs	r0, #8
 8003eea:	f7fd fb89 	bl	8001600 <_ZSt16__deque_buf_sizej>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE7destroyIS2_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f915 	bl	8004142 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003f22:	b590      	push	{r4, r7, lr}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f913 	bl	800415a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003f34:	4604      	mov	r4, r0
 8003f36:	68b8      	ldr	r0, [r7, #8]
 8003f38:	f000 f90f 	bl	800415a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4619      	mov	r1, r3
 8003f42:	4620      	mov	r0, r4
 8003f44:	f000 f914 	bl	8004170 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 8003f48:	4603      	mov	r3, r0
    }
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd90      	pop	{r4, r7, pc}

08003f52 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f8ef 	bl	8004142 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	bf8c      	ite	hi
 8003f6c:	2301      	movhi	r3, #1
 8003f6e:	2300      	movls	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003f76:	f006 fd74 	bl	800aa62 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f006 fd5e 	bl	800aa40 <_Znwj>
 8003f84:	4603      	mov	r3, r0
      }
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f909 	bl	80041b6 <_ZSt4copyIPKfPfET0_T_S4_S3_>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	605a      	str	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	609a      	str	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	60da      	str	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	6839      	ldr	r1, [r7, #0]
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f8f0 	bl	80041e6 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv>
 8004006:	4603      	mov	r3, r0
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8004010:	b590      	push	{r4, r7, lr}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8004018:	687c      	ldr	r4, [r7, #4]
 800401a:	2008      	movs	r0, #8
 800401c:	f7fd faf0 	bl	8001600 <_ZSt16__deque_buf_sizej>
 8004020:	4603      	mov	r3, r0
 8004022:	4619      	mov	r1, r3
 8004024:	4620      	mov	r0, r4
 8004026:	f000 f8fc 	bl	8004222 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8allocateERS2_j>
 800402a:	4603      	mov	r3, r0
      }
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bd90      	pop	{r4, r7, pc}

08004034 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	68b9      	ldr	r1, [r7, #8]
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f8fb 	bl	8004240 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE10deallocateEPS2_j>
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <_ZNSaIPN12ActionsQueue16RobotInstructionEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8f4 	bl	8004260 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEEC1Ev>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4619      	mov	r1, r3
 80040aa:	68b8      	ldr	r0, [r7, #8]
 80040ac:	f006 fcc6 	bl	800aa3c <_ZdlPvj>
      }
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff feab 	bl	8003e20 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 80040ca:	4604      	mov	r4, r0
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4619      	mov	r1, r3
 80040d0:	2008      	movs	r0, #8
 80040d2:	f7fd fa89 	bl	80015e8 <_ZnwjPv>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4622      	mov	r2, r4
 80040da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040de:	e883 0003 	stmia.w	r3, {r0, r1}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd90      	pop	{r4, r7, pc}

080040ea <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff ffac 	bl	8004052 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f8ba 	bl	8004276 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE11_S_max_sizeERKS2_>
 8004102:	4603      	mov	r3, r0
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	6809      	ldr	r1, [r1, #0]
 8004126:	1a41      	subs	r1, r0, r1
 8004128:	1089      	asrs	r1, r1, #2
 800412a:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800412c:	429a      	cmp	r2, r3
 800412e:	d904      	bls.n	800413a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8004130:	2200      	movs	r2, #0
 8004132:	6839      	ldr	r1, [r7, #0]
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8b8 	bl	80042aa <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb>
      }
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800414a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800414e:	4618      	mov	r0, r3
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4618      	mov	r0, r3
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004170:	b5b0      	push	{r4, r5, r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f92e 	bl	80043de <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004182:	4604      	mov	r4, r0
 8004184:	68b8      	ldr	r0, [r7, #8]
 8004186:	f000 f92a 	bl	80043de <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800418a:	4605      	mov	r5, r0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f933 	bl	80043fa <_ZSt12__niter_baseIPfET_S1_>
 8004194:	4603      	mov	r3, r0
 8004196:	461a      	mov	r2, r3
 8004198:	4629      	mov	r1, r5
 800419a:	4620      	mov	r0, r4
 800419c:	f000 f938 	bl	8004410 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 80041a0:	4602      	mov	r2, r0
 80041a2:	1d3b      	adds	r3, r7, #4
 80041a4:	4611      	mov	r1, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f942 	bl	8004430 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 80041ac:	4603      	mov	r3, r0
    }
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bdb0      	pop	{r4, r5, r7, pc}

080041b6 <_ZSt4copyIPKfPfET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80041b6:	b590      	push	{r4, r7, lr}
 80041b8:	b085      	sub	sp, #20
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f940 	bl	8004448 <_ZSt12__miter_baseIPKfET_S2_>
 80041c8:	4604      	mov	r4, r0
 80041ca:	68b8      	ldr	r0, [r7, #8]
 80041cc:	f000 f93c 	bl	8004448 <_ZSt12__miter_baseIPKfET_S2_>
 80041d0:	4603      	mov	r3, r0
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4619      	mov	r1, r3
 80041d6:	4620      	mov	r0, r4
 80041d8:	f000 f941 	bl	800445e <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 80041dc:	4603      	mov	r3, r0
    }
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd90      	pop	{r4, r7, pc}

080041e6 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f956 	bl	80044a4 <_ZNK9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 80041f8:	4602      	mov	r2, r0
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	4293      	cmp	r3, r2
 80041fe:	bf8c      	ite	hi
 8004200:	2301      	movhi	r3, #1
 8004202:	2300      	movls	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800420a:	f006 fc2a 	bl	800aa62 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4618      	mov	r0, r3
 8004214:	f006 fc14 	bl	800aa40 <_Znwj>
 8004218:	4603      	mov	r3, r0
      }
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800422c:	2200      	movs	r2, #0
 800422e:	6839      	ldr	r1, [r7, #0]
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f943 	bl	80044bc <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv>
 8004236:	4603      	mov	r3, r0
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4619      	mov	r1, r3
 8004252:	68b8      	ldr	r0, [r7, #8]
 8004254:	f006 fbf2 	bl	800aa3c <_ZdlPvj>
      }
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800427e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004282:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f937 	bl	80044f8 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8max_sizeERKS2_>
 800428a:	4603      	mov	r3, r0
 800428c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800428e:	f107 0208 	add.w	r2, r7, #8
 8004292:	f107 030c 	add.w	r3, r7, #12
 8004296:	4611      	mov	r1, r2
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fc5f 	bl	8003b5c <_ZSt3minIjERKT_S2_S2_>
 800429e:	4603      	mov	r3, r0
 80042a0:	681b      	ldr	r3, [r3, #0]
      }
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80042aa:	b590      	push	{r4, r7, lr}
 80042ac:	b08b      	sub	sp, #44	; 0x2c
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	4613      	mov	r3, r2
 80042b6:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	109b      	asrs	r3, r3, #2
 80042c4:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80042c6:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6a3a      	ldr	r2, [r7, #32]
 80042cc:	4413      	add	r3, r2
 80042ce:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	429a      	cmp	r2, r3
 80042da:	d92d      	bls.n	8004338 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	1acb      	subs	r3, r1, r3
 80042e8:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80042ea:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	e000      	b.n	80042fa <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x50>
 80042f8:	2300      	movs	r3, #0
 80042fa:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80042fc:	4413      	add	r3, r2
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004306:	429a      	cmp	r2, r3
 8004308:	d209      	bcs.n	800431e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8004312:	3304      	adds	r3, #4
 8004314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004316:	4619      	mov	r1, r3
 8004318:	f000 f8fa 	bl	8004510 <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
 800431c:	e048      	b.n	80043b0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004326:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800432c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432e:	4413      	add	r3, r2
 8004330:	461a      	mov	r2, r3
 8004332:	f000 f905 	bl	8004540 <_ZSt13copy_backwardIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
 8004336:	e03b      	b.n	80043b0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3304      	adds	r3, #4
 8004340:	f107 0208 	add.w	r2, r7, #8
 8004344:	4611      	mov	r1, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff fcc7 	bl	8003cda <_ZSt3maxIjERKT_S2_S2_>
 800434c:	4603      	mov	r3, r0
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8004352:	3302      	adds	r3, #2
 8004354:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	69b9      	ldr	r1, [r7, #24]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fcd1 	bl	8003d02 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>
 8004360:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0xce>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	e000      	b.n	800437a <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 8004378:	2300      	movs	r3, #0
 800437a:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4413      	add	r3, r2
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800438a:	3304      	adds	r3, #4
 800438c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438e:	4619      	mov	r1, r3
 8004390:	f000 f8be 	bl	8004510 <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	461a      	mov	r2, r3
 80043a0:	f7ff fb10 	bl	80039c4 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3308      	adds	r3, #8
 80043b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fcda 	bl	8003d70 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f103 0018 	add.w	r0, r3, #24
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043c8:	3b01      	subs	r3, #1
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ce:	4413      	add	r3, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	f7ff fccd 	bl	8003d70 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
    }
 80043d6:	bf00      	nop
 80043d8:	372c      	adds	r7, #44	; 0x2c
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd90      	pop	{r4, r7, pc}

080043de <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 80043e6:	1d3b      	adds	r3, r7, #4
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f8c1 	bl	8004570 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 80043ee:	4603      	mov	r3, r0
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f8b0 	bl	8004586 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8004426:	4603      	mov	r3, r0
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
    { return __res; }
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <_ZSt12__miter_baseIPKfET_S2_>:
    __miter_base(_Iterator __it)
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800445e:	b5b0      	push	{r4, r5, r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f89b 	bl	80045a6 <_ZSt12__niter_baseIPKfET_S2_>
 8004470:	4604      	mov	r4, r0
 8004472:	68b8      	ldr	r0, [r7, #8]
 8004474:	f000 f897 	bl	80045a6 <_ZSt12__niter_baseIPKfET_S2_>
 8004478:	4605      	mov	r5, r0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ffbc 	bl	80043fa <_ZSt12__niter_baseIPfET_S1_>
 8004482:	4603      	mov	r3, r0
 8004484:	461a      	mov	r2, r3
 8004486:	4629      	mov	r1, r5
 8004488:	4620      	mov	r0, r4
 800448a:	f7ff ffc1 	bl	8004410 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 800448e:	4602      	mov	r2, r0
 8004490:	1d3b      	adds	r3, r7, #4
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff ffcb 	bl	8004430 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800449a:	4603      	mov	r3, r0
    }
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bdb0      	pop	{r4, r5, r7, pc}

080044a4 <_ZNK9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80044ac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f877 	bl	80045bc <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 80044ce:	4602      	mov	r2, r0
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4293      	cmp	r3, r2
 80044d4:	bf8c      	ite	hi
 80044d6:	2301      	movhi	r3, #1
 80044d8:	2300      	movls	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80044e0:	f006 fabf 	bl	800aa62 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4618      	mov	r0, r3
 80044ea:	f006 faa9 	bl	800aa40 <_Znwj>
 80044ee:	4603      	mov	r3, r0
      }
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f867 	bl	80045d4 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8max_sizeEv>
 8004506:	4603      	mov	r3, r0
      }
 8004508:	4618      	mov	r0, r3
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f865 	bl	80045ec <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004522:	4604      	mov	r4, r0
 8004524:	68b8      	ldr	r0, [r7, #8]
 8004526:	f000 f861 	bl	80045ec <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 800452a:	4603      	mov	r3, r0
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	4619      	mov	r1, r3
 8004530:	4620      	mov	r0, r4
 8004532:	f000 f866 	bl	8004602 <_ZSt13__copy_move_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004536:	4603      	mov	r3, r0
    }
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	bd90      	pop	{r4, r7, pc}

08004540 <_ZSt13copy_backwardIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f84d 	bl	80045ec <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004552:	4604      	mov	r4, r0
 8004554:	68b8      	ldr	r0, [r7, #8]
 8004556:	f000 f849 	bl	80045ec <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 800455a:	4603      	mov	r3, r0
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	4619      	mov	r1, r3
 8004560:	4620      	mov	r0, r4
 8004562:	f000 f871 	bl	8004648 <_ZSt22__copy_move_backward_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004566:	4603      	mov	r3, r0
    }
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	bd90      	pop	{r4, r7, pc}

08004570 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f879 	bl	800468e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 800459c:	4603      	mov	r3, r0
    }
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
    { return __it; }
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80045c4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff ffed 	bl	80045bc <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 80045e2:	4603      	mov	r3, r0
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>:
    __miter_base(_Iterator __it)
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <_ZSt13__copy_move_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004602:	b5b0      	push	{r4, r5, r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f85a 	bl	80046c8 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004614:	4604      	mov	r4, r0
 8004616:	68b8      	ldr	r0, [r7, #8]
 8004618:	f000 f856 	bl	80046c8 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 800461c:	4605      	mov	r5, r0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 f851 	bl	80046c8 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	4629      	mov	r1, r5
 800462c:	4620      	mov	r0, r4
 800462e:	f000 f856 	bl	80046de <_ZSt14__copy_move_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004632:	4602      	mov	r2, r0
 8004634:	1d3b      	adds	r3, r7, #4
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f000 f860 	bl	80046fe <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>
 800463e:	4603      	mov	r3, r0
    }
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bdb0      	pop	{r4, r5, r7, pc}

08004648 <_ZSt22__copy_move_backward_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8004648:	b5b0      	push	{r4, r5, r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f837 	bl	80046c8 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 800465a:	4604      	mov	r4, r0
 800465c:	68b8      	ldr	r0, [r7, #8]
 800465e:	f000 f833 	bl	80046c8 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004662:	4605      	mov	r5, r0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f82e 	bl	80046c8 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 800466c:	4603      	mov	r3, r0
 800466e:	461a      	mov	r2, r3
 8004670:	4629      	mov	r1, r5
 8004672:	4620      	mov	r0, r4
 8004674:	f000 f84f 	bl	8004716 <_ZSt23__copy_move_backward_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004678:	4602      	mov	r2, r0
 800467a:	1d3b      	adds	r3, r7, #4
 800467c:	4611      	mov	r1, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f000 f83d 	bl	80046fe <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>
 8004684:	4603      	mov	r3, r0
    }
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bdb0      	pop	{r4, r5, r7, pc}

0800468e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800468e:	b580      	push	{r7, lr}
 8004690:	b086      	sub	sp, #24
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	109b      	asrs	r3, r3, #2
 80046a2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d006      	beq.n	80046b8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	461a      	mov	r2, r3
 80046b0:	68f9      	ldr	r1, [r7, #12]
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f008 f87e 	bl	800c7b4 <memmove>
	  return __result + _Num;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	4413      	add	r3, r2
	}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>:
    __niter_base(_Iterator __it)
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
    { return __it; }
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <_ZSt14__copy_move_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f821 	bl	8004736 <_ZSt14__copy_move_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 80046f4:	4603      	mov	r3, r0
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	6039      	str	r1, [r7, #0]
    { return __res; }
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <_ZSt23__copy_move_backward_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f815 	bl	8004756 <_ZSt23__copy_move_backward_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 800472c:	4603      	mov	r3, r0
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <_ZSt14__copy_move_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f815 	bl	8004776 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>
 800474c:	4603      	mov	r3, r0
    }
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <_ZSt23__copy_move_backward_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f822 	bl	80047b0 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>
 800476c:	4603      	mov	r3, r0
    }
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004776:	b580      	push	{r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	109b      	asrs	r3, r3, #2
 800478a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d006      	beq.n	80047a0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	461a      	mov	r2, r3
 8004798:	68f9      	ldr	r1, [r7, #12]
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f008 f80a 	bl	800c7b4 <memmove>
	  return __result + _Num;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	4413      	add	r3, r2
	}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	109b      	asrs	r3, r3, #2
 80047c4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	425b      	negs	r3, r3
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	18d0      	adds	r0, r2, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	461a      	mov	r2, r3
 80047dc:	68f9      	ldr	r1, [r7, #12]
 80047de:	f007 ffe9 	bl	800c7b4 <memmove>
	  return __result - _Num;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	425b      	negs	r3, r3
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	4413      	add	r3, r2
	}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <_ZN12ActionsQueueD1Ev>:
class ActionsQueue
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8004802:	4618      	mov	r0, r3
 8004804:	f7fd fdb5 	bl	8002372 <_ZN6TelegaD1Ev>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	333c      	adds	r3, #60	; 0x3c
 800480c:	4618      	mov	r0, r3
 800480e:	f7fc fbf7 	bl	8001000 <_ZN7RPLidarD1Ev>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4618      	mov	r0, r3
 8004816:	f7fd fd9f 	bl	8002358 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEED1Ev>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d107      	bne.n	8004844 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800483a:	4293      	cmp	r3, r2
 800483c:	d102      	bne.n	8004844 <_Z41__static_initialization_and_destruction_0ii+0x20>
ActionsQueue Queue;
 800483e:	4809      	ldr	r0, [pc, #36]	; (8004864 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004840:	f7fd fdaa 	bl	8002398 <_ZN12ActionsQueueC1Ev>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d107      	bne.n	800485a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004850:	4293      	cmp	r3, r2
 8004852:	d102      	bne.n	800485a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004854:	4803      	ldr	r0, [pc, #12]	; (8004864 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004856:	f7ff ffcd 	bl	80047f4 <_ZN12ActionsQueueD1Ev>
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000200 	.word	0x20000200

08004868 <_GLOBAL__sub_I__Z9constrainlll>:
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
 800486c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004870:	2001      	movs	r0, #1
 8004872:	f7ff ffd7 	bl	8004824 <_Z41__static_initialization_and_destruction_0ii>
 8004876:	bd80      	pop	{r7, pc}

08004878 <_GLOBAL__sub_D__Z9constrainlll>:
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
 800487c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004880:	2000      	movs	r0, #0
 8004882:	f7ff ffcf 	bl	8004824 <_Z41__static_initialization_and_destruction_0ii>
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800488e:	2300      	movs	r3, #0
 8004890:	607b      	str	r3, [r7, #4]
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <HAL_MspInit+0x4c>)
 8004894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004896:	4a0f      	ldr	r2, [pc, #60]	; (80048d4 <HAL_MspInit+0x4c>)
 8004898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800489c:	6453      	str	r3, [r2, #68]	; 0x44
 800489e:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <HAL_MspInit+0x4c>)
 80048a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a6:	607b      	str	r3, [r7, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <HAL_MspInit+0x4c>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <HAL_MspInit+0x4c>)
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_MspInit+0x4c>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800

080048d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	; 0x28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e0:	f107 0314 	add.w	r3, r7, #20
 80048e4:	2200      	movs	r2, #0
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	605a      	str	r2, [r3, #4]
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	60da      	str	r2, [r3, #12]
 80048ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a21      	ldr	r2, [pc, #132]	; (800497c <HAL_I2C_MspInit+0xa4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d13c      	bne.n	8004974 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	4b20      	ldr	r3, [pc, #128]	; (8004980 <HAL_I2C_MspInit+0xa8>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	4a1f      	ldr	r2, [pc, #124]	; (8004980 <HAL_I2C_MspInit+0xa8>)
 8004904:	f043 0302 	orr.w	r3, r3, #2
 8004908:	6313      	str	r3, [r2, #48]	; 0x30
 800490a:	4b1d      	ldr	r3, [pc, #116]	; (8004980 <HAL_I2C_MspInit+0xa8>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004916:	f44f 7340 	mov.w	r3, #768	; 0x300
 800491a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800491c:	2312      	movs	r3, #18
 800491e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004920:	2300      	movs	r3, #0
 8004922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004924:	2303      	movs	r3, #3
 8004926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004928:	2304      	movs	r3, #4
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800492c:	f107 0314 	add.w	r3, r7, #20
 8004930:	4619      	mov	r1, r3
 8004932:	4814      	ldr	r0, [pc, #80]	; (8004984 <HAL_I2C_MspInit+0xac>)
 8004934:	f001 f9b6 	bl	8005ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	4b10      	ldr	r3, [pc, #64]	; (8004980 <HAL_I2C_MspInit+0xa8>)
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	4a0f      	ldr	r2, [pc, #60]	; (8004980 <HAL_I2C_MspInit+0xa8>)
 8004942:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004946:	6413      	str	r3, [r2, #64]	; 0x40
 8004948:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <HAL_I2C_MspInit+0xa8>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004954:	2200      	movs	r2, #0
 8004956:	2100      	movs	r1, #0
 8004958:	201f      	movs	r0, #31
 800495a:	f000 fd76 	bl	800544a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800495e:	201f      	movs	r0, #31
 8004960:	f000 fd8f 	bl	8005482 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004964:	2200      	movs	r2, #0
 8004966:	2100      	movs	r1, #0
 8004968:	2020      	movs	r0, #32
 800496a:	f000 fd6e 	bl	800544a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800496e:	2020      	movs	r0, #32
 8004970:	f000 fd87 	bl	8005482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004974:	bf00      	nop
 8004976:	3728      	adds	r7, #40	; 0x28
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40005400 	.word	0x40005400
 8004980:	40023800 	.word	0x40023800
 8004984:	40020400 	.word	0x40020400

08004988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1a      	ldr	r2, [pc, #104]	; (8004a00 <HAL_TIM_Base_MspInit+0x78>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d12d      	bne.n	80049f6 <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <HAL_TIM_Base_MspInit+0x7c>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	4a18      	ldr	r2, [pc, #96]	; (8004a04 <HAL_TIM_Base_MspInit+0x7c>)
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	6453      	str	r3, [r2, #68]	; 0x44
 80049aa:	4b16      	ldr	r3, [pc, #88]	; (8004a04 <HAL_TIM_Base_MspInit+0x7c>)
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80049b6:	2200      	movs	r2, #0
 80049b8:	2100      	movs	r1, #0
 80049ba:	2018      	movs	r0, #24
 80049bc:	f000 fd45 	bl	800544a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80049c0:	2018      	movs	r0, #24
 80049c2:	f000 fd5e 	bl	8005482 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80049c6:	2200      	movs	r2, #0
 80049c8:	2100      	movs	r1, #0
 80049ca:	2019      	movs	r0, #25
 80049cc:	f000 fd3d 	bl	800544a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80049d0:	2019      	movs	r0, #25
 80049d2:	f000 fd56 	bl	8005482 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80049d6:	2200      	movs	r2, #0
 80049d8:	2100      	movs	r1, #0
 80049da:	201a      	movs	r0, #26
 80049dc:	f000 fd35 	bl	800544a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80049e0:	201a      	movs	r0, #26
 80049e2:	f000 fd4e 	bl	8005482 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80049e6:	2200      	movs	r2, #0
 80049e8:	2100      	movs	r1, #0
 80049ea:	201b      	movs	r0, #27
 80049ec:	f000 fd2d 	bl	800544a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80049f0:	201b      	movs	r0, #27
 80049f2:	f000 fd46 	bl	8005482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80049f6:	bf00      	nop
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40023800 	.word	0x40023800

08004a08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08c      	sub	sp, #48	; 0x30
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a10:	f107 031c 	add.w	r3, r7, #28
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	609a      	str	r2, [r3, #8]
 8004a1c:	60da      	str	r2, [r3, #12]
 8004a1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a28:	d14b      	bne.n	8004ac2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	4b3f      	ldr	r3, [pc, #252]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	4a3e      	ldr	r2, [pc, #248]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3a:	4b3c      	ldr	r3, [pc, #240]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	4b38      	ldr	r3, [pc, #224]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	4a37      	ldr	r2, [pc, #220]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6313      	str	r3, [r2, #48]	; 0x30
 8004a56:	4b35      	ldr	r3, [pc, #212]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a62:	2300      	movs	r3, #0
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	4b31      	ldr	r3, [pc, #196]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	4a30      	ldr	r2, [pc, #192]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004a6c:	f043 0302 	orr.w	r3, r3, #2
 8004a70:	6313      	str	r3, [r2, #48]	; 0x30
 8004a72:	4b2e      	ldr	r3, [pc, #184]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a84:	2302      	movs	r3, #2
 8004a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a90:	2301      	movs	r3, #1
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a94:	f107 031c 	add.w	r3, r7, #28
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4825      	ldr	r0, [pc, #148]	; (8004b30 <HAL_TIM_Encoder_MspInit+0x128>)
 8004a9c:	f001 f902 	bl	8005ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004aa0:	2308      	movs	r3, #8
 8004aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ab4:	f107 031c 	add.w	r3, r7, #28
 8004ab8:	4619      	mov	r1, r3
 8004aba:	481e      	ldr	r0, [pc, #120]	; (8004b34 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004abc:	f001 f8f2 	bl	8005ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004ac0:	e030      	b.n	8004b24 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1c      	ldr	r2, [pc, #112]	; (8004b38 <HAL_TIM_Encoder_MspInit+0x130>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d12b      	bne.n	8004b24 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	4b16      	ldr	r3, [pc, #88]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	4a15      	ldr	r2, [pc, #84]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004ad6:	f043 0304 	orr.w	r3, r3, #4
 8004ada:	6413      	str	r3, [r2, #64]	; 0x40
 8004adc:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	4a0e      	ldr	r2, [pc, #56]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004af2:	f043 0302 	orr.w	r3, r3, #2
 8004af6:	6313      	str	r3, [r2, #48]	; 0x30
 8004af8:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <HAL_TIM_Encoder_MspInit+0x124>)
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b04:	23c0      	movs	r3, #192	; 0xc0
 8004b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b10:	2300      	movs	r3, #0
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004b14:	2302      	movs	r3, #2
 8004b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b18:	f107 031c 	add.w	r3, r7, #28
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4805      	ldr	r0, [pc, #20]	; (8004b34 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004b20:	f001 f8c0 	bl	8005ca4 <HAL_GPIO_Init>
}
 8004b24:	bf00      	nop
 8004b26:	3730      	adds	r7, #48	; 0x30
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	40020000 	.word	0x40020000
 8004b34:	40020400 	.word	0x40020400
 8004b38:	40000800 	.word	0x40000800

08004b3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a0e      	ldr	r2, [pc, #56]	; (8004b84 <HAL_TIM_PWM_MspInit+0x48>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d115      	bne.n	8004b7a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <HAL_TIM_PWM_MspInit+0x4c>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	4a0c      	ldr	r2, [pc, #48]	; (8004b88 <HAL_TIM_PWM_MspInit+0x4c>)
 8004b58:	f043 0302 	orr.w	r3, r3, #2
 8004b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b5e:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <HAL_TIM_PWM_MspInit+0x4c>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	201d      	movs	r0, #29
 8004b70:	f000 fc6b 	bl	800544a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004b74:	201d      	movs	r0, #29
 8004b76:	f000 fc84 	bl	8005482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40000400 	.word	0x40000400
 8004b88:	40023800 	.word	0x40023800

08004b8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	; 0x28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b94:	f107 0314 	add.w	r3, r7, #20
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <HAL_TIM_MspPostInit+0xa4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d13b      	bne.n	8004c26 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <HAL_TIM_MspPostInit+0xa8>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <HAL_TIM_MspPostInit+0xa8>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <HAL_TIM_MspPostInit+0xa8>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	4b19      	ldr	r3, [pc, #100]	; (8004c34 <HAL_TIM_MspPostInit+0xa8>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	4a18      	ldr	r2, [pc, #96]	; (8004c34 <HAL_TIM_MspPostInit+0xa8>)
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bda:	4b16      	ldr	r3, [pc, #88]	; (8004c34 <HAL_TIM_MspPostInit+0xa8>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004be6:	23c0      	movs	r3, #192	; 0xc0
 8004be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bea:	2302      	movs	r3, #2
 8004bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bfa:	f107 0314 	add.w	r3, r7, #20
 8004bfe:	4619      	mov	r1, r3
 8004c00:	480d      	ldr	r0, [pc, #52]	; (8004c38 <HAL_TIM_MspPostInit+0xac>)
 8004c02:	f001 f84f 	bl	8005ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004c06:	2303      	movs	r3, #3
 8004c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c12:	2300      	movs	r3, #0
 8004c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c16:	2302      	movs	r3, #2
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c1a:	f107 0314 	add.w	r3, r7, #20
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4806      	ldr	r0, [pc, #24]	; (8004c3c <HAL_TIM_MspPostInit+0xb0>)
 8004c22:	f001 f83f 	bl	8005ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004c26:	bf00      	nop
 8004c28:	3728      	adds	r7, #40	; 0x28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40000400 	.word	0x40000400
 8004c34:	40023800 	.word	0x40023800
 8004c38:	40020000 	.word	0x40020000
 8004c3c:	40020400 	.word	0x40020400

08004c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08a      	sub	sp, #40	; 0x28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c48:	f107 0314 	add.w	r3, r7, #20
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	609a      	str	r2, [r3, #8]
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a4c      	ldr	r2, [pc, #304]	; (8004d90 <HAL_UART_MspInit+0x150>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	f040 8092 	bne.w	8004d88 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	4b4a      	ldr	r3, [pc, #296]	; (8004d94 <HAL_UART_MspInit+0x154>)
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	4a49      	ldr	r2, [pc, #292]	; (8004d94 <HAL_UART_MspInit+0x154>)
 8004c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c72:	6413      	str	r3, [r2, #64]	; 0x40
 8004c74:	4b47      	ldr	r3, [pc, #284]	; (8004d94 <HAL_UART_MspInit+0x154>)
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	4b43      	ldr	r3, [pc, #268]	; (8004d94 <HAL_UART_MspInit+0x154>)
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	4a42      	ldr	r2, [pc, #264]	; (8004d94 <HAL_UART_MspInit+0x154>)
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c90:	4b40      	ldr	r3, [pc, #256]	; (8004d94 <HAL_UART_MspInit+0x154>)
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004c9c:	230c      	movs	r3, #12
 8004c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004cac:	2307      	movs	r3, #7
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cb0:	f107 0314 	add.w	r3, r7, #20
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4838      	ldr	r0, [pc, #224]	; (8004d98 <HAL_UART_MspInit+0x158>)
 8004cb8:	f000 fff4 	bl	8005ca4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004cbc:	4b37      	ldr	r3, [pc, #220]	; (8004d9c <HAL_UART_MspInit+0x15c>)
 8004cbe:	4a38      	ldr	r2, [pc, #224]	; (8004da0 <HAL_UART_MspInit+0x160>)
 8004cc0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004cc2:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <HAL_UART_MspInit+0x15c>)
 8004cc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cc8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cca:	4b34      	ldr	r3, [pc, #208]	; (8004d9c <HAL_UART_MspInit+0x15c>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cd0:	4b32      	ldr	r3, [pc, #200]	; (8004d9c <HAL_UART_MspInit+0x15c>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cd6:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <HAL_UART_MspInit+0x15c>)
 8004cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cdc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cde:	4b2f      	ldr	r3, [pc, #188]	; (8004d9c <HAL_UART_MspInit+0x15c>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ce4:	4b2d      	ldr	r3, [pc, #180]	; (8004d9c <HAL_UART_MspInit+0x15c>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004cea:	4b2c      	ldr	r3, [pc, #176]	; (8004d9c <HAL_UART_MspInit+0x15c>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004cf0:	4b2a      	ldr	r3, [pc, #168]	; (8004d9c <HAL_UART_MspInit+0x15c>)
 8004cf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cf6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cf8:	4b28      	ldr	r3, [pc, #160]	; (8004d9c <HAL_UART_MspInit+0x15c>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004cfe:	4827      	ldr	r0, [pc, #156]	; (8004d9c <HAL_UART_MspInit+0x15c>)
 8004d00:	f000 fbe8 	bl	80054d4 <HAL_DMA_Init>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004d0a:	f7fe f91d 	bl	8002f48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a22      	ldr	r2, [pc, #136]	; (8004d9c <HAL_UART_MspInit+0x15c>)
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
 8004d14:	4a21      	ldr	r2, [pc, #132]	; (8004d9c <HAL_UART_MspInit+0x15c>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004d1a:	4b22      	ldr	r3, [pc, #136]	; (8004da4 <HAL_UART_MspInit+0x164>)
 8004d1c:	4a22      	ldr	r2, [pc, #136]	; (8004da8 <HAL_UART_MspInit+0x168>)
 8004d1e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004d20:	4b20      	ldr	r3, [pc, #128]	; (8004da4 <HAL_UART_MspInit+0x164>)
 8004d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d26:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d28:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <HAL_UART_MspInit+0x164>)
 8004d2a:	2240      	movs	r2, #64	; 0x40
 8004d2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d2e:	4b1d      	ldr	r3, [pc, #116]	; (8004da4 <HAL_UART_MspInit+0x164>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d34:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <HAL_UART_MspInit+0x164>)
 8004d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d3a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d3c:	4b19      	ldr	r3, [pc, #100]	; (8004da4 <HAL_UART_MspInit+0x164>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d42:	4b18      	ldr	r3, [pc, #96]	; (8004da4 <HAL_UART_MspInit+0x164>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d48:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <HAL_UART_MspInit+0x164>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d4e:	4b15      	ldr	r3, [pc, #84]	; (8004da4 <HAL_UART_MspInit+0x164>)
 8004d50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d54:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d56:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <HAL_UART_MspInit+0x164>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d5c:	4811      	ldr	r0, [pc, #68]	; (8004da4 <HAL_UART_MspInit+0x164>)
 8004d5e:	f000 fbb9 	bl	80054d4 <HAL_DMA_Init>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8004d68:	f7fe f8ee 	bl	8002f48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a0d      	ldr	r2, [pc, #52]	; (8004da4 <HAL_UART_MspInit+0x164>)
 8004d70:	635a      	str	r2, [r3, #52]	; 0x34
 8004d72:	4a0c      	ldr	r2, [pc, #48]	; (8004da4 <HAL_UART_MspInit+0x164>)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	2026      	movs	r0, #38	; 0x26
 8004d7e:	f000 fb64 	bl	800544a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d82:	2026      	movs	r0, #38	; 0x26
 8004d84:	f000 fb7d 	bl	8005482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d88:	bf00      	nop
 8004d8a:	3728      	adds	r7, #40	; 0x28
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40004400 	.word	0x40004400
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40020000 	.word	0x40020000
 8004d9c:	20000a60 	.word	0x20000a60
 8004da0:	40026088 	.word	0x40026088
 8004da4:	20000ac0 	.word	0x20000ac0
 8004da8:	400260a0 	.word	0x400260a0

08004dac <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a0e      	ldr	r2, [pc, #56]	; (8004df4 <HAL_UART_MspDeInit+0x48>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d116      	bne.n	8004dec <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8004dbe:	4b0e      	ldr	r3, [pc, #56]	; (8004df8 <HAL_UART_MspDeInit+0x4c>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	4a0d      	ldr	r2, [pc, #52]	; (8004df8 <HAL_UART_MspDeInit+0x4c>)
 8004dc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004dc8:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8004dca:	210c      	movs	r1, #12
 8004dcc:	480b      	ldr	r0, [pc, #44]	; (8004dfc <HAL_UART_MspDeInit+0x50>)
 8004dce:	f001 f8ed 	bl	8005fac <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fc2a 	bl	8005630 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fc25 	bl	8005630 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004de6:	2026      	movs	r0, #38	; 0x26
 8004de8:	f000 fb59 	bl	800549e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40004400 	.word	0x40004400
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	40020000 	.word	0x40020000

08004e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e04:	e7fe      	b.n	8004e04 <NMI_Handler+0x4>

08004e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e06:	b480      	push	{r7}
 8004e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e0a:	e7fe      	b.n	8004e0a <HardFault_Handler+0x4>

08004e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e10:	e7fe      	b.n	8004e10 <MemManage_Handler+0x4>

08004e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e12:	b480      	push	{r7}
 8004e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e16:	e7fe      	b.n	8004e16 <BusFault_Handler+0x4>

08004e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e1c:	e7fe      	b.n	8004e1c <UsageFault_Handler+0x4>

08004e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e22:	bf00      	nop
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e30:	bf00      	nop
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e3e:	bf00      	nop
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e4c:	f000 f9ba 	bl	80051c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e50:	bf00      	nop
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004e58:	4802      	ldr	r0, [pc, #8]	; (8004e64 <DMA1_Stream5_IRQHandler+0x10>)
 8004e5a:	f000 fcd9 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000a60 	.word	0x20000a60

08004e68 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004e6c:	4802      	ldr	r0, [pc, #8]	; (8004e78 <DMA1_Stream6_IRQHandler+0x10>)
 8004e6e:	f000 fccf 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004e72:	bf00      	nop
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000ac0 	.word	0x20000ac0

08004e7c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e80:	4802      	ldr	r0, [pc, #8]	; (8004e8c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004e82:	f003 feef 	bl	8008c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004e86:	bf00      	nop
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	200008fc 	.word	0x200008fc

08004e90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e94:	4802      	ldr	r0, [pc, #8]	; (8004ea0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004e96:	f003 fee5 	bl	8008c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004e9a:	bf00      	nop
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	200008fc 	.word	0x200008fc

08004ea4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ea8:	4802      	ldr	r0, [pc, #8]	; (8004eb4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004eaa:	f003 fedb 	bl	8008c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004eae:	bf00      	nop
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	200008fc 	.word	0x200008fc

08004eb8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ebc:	4802      	ldr	r0, [pc, #8]	; (8004ec8 <TIM1_CC_IRQHandler+0x10>)
 8004ebe:	f003 fed1 	bl	8008c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	200008fc 	.word	0x200008fc

08004ecc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004ed0:	4802      	ldr	r0, [pc, #8]	; (8004edc <TIM3_IRQHandler+0x10>)
 8004ed2:	f003 fec7 	bl	8008c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004ed6:	bf00      	nop
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	2000098c 	.word	0x2000098c

08004ee0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004ee4:	4802      	ldr	r0, [pc, #8]	; (8004ef0 <I2C1_EV_IRQHandler+0x10>)
 8004ee6:	f001 faa3 	bl	8006430 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004eea:	bf00      	nop
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	200008a8 	.word	0x200008a8

08004ef4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004ef8:	4802      	ldr	r0, [pc, #8]	; (8004f04 <I2C1_ER_IRQHandler+0x10>)
 8004efa:	f001 fc0a 	bl	8006712 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004efe:	bf00      	nop
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	200008a8 	.word	0x200008a8

08004f08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f0c:	4802      	ldr	r0, [pc, #8]	; (8004f18 <USART2_IRQHandler+0x10>)
 8004f0e:	f004 fe61 	bl	8009bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000a1c 	.word	0x20000a1c

08004f1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  return 1;
 8004f20:	2301      	movs	r3, #1
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <_kill>:

int _kill(int pid, int sig)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f36:	f007 fbf5 	bl	800c724 <__errno>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2216      	movs	r2, #22
 8004f3e:	601a      	str	r2, [r3, #0]
  return -1;
 8004f40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <_exit>:

void _exit (int status)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f54:	f04f 31ff 	mov.w	r1, #4294967295
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff ffe7 	bl	8004f2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f5e:	e7fe      	b.n	8004f5e <_exit+0x12>

08004f60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e00a      	b.n	8004f88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f72:	f3af 8000 	nop.w
 8004f76:	4601      	mov	r1, r0
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	60ba      	str	r2, [r7, #8]
 8004f7e:	b2ca      	uxtb	r2, r1
 8004f80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	3301      	adds	r3, #1
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	dbf0      	blt.n	8004f72 <_read+0x12>
  }

  return len;
 8004f90:	687b      	ldr	r3, [r7, #4]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b086      	sub	sp, #24
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	e009      	b.n	8004fc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	60ba      	str	r2, [r7, #8]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	dbf1      	blt.n	8004fac <_write+0x12>
  }
  return len;
 8004fc8:	687b      	ldr	r3, [r7, #4]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <_close>:

int _close(int file)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ffa:	605a      	str	r2, [r3, #4]
  return 0;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <_isatty>:

int _isatty(int file)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005012:	2301      	movs	r3, #1
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005044:	4a14      	ldr	r2, [pc, #80]	; (8005098 <_sbrk+0x5c>)
 8005046:	4b15      	ldr	r3, [pc, #84]	; (800509c <_sbrk+0x60>)
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005050:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <_sbrk+0x64>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d102      	bne.n	800505e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005058:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <_sbrk+0x64>)
 800505a:	4a12      	ldr	r2, [pc, #72]	; (80050a4 <_sbrk+0x68>)
 800505c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <_sbrk+0x64>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4413      	add	r3, r2
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	429a      	cmp	r2, r3
 800506a:	d207      	bcs.n	800507c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800506c:	f007 fb5a 	bl	800c724 <__errno>
 8005070:	4603      	mov	r3, r0
 8005072:	220c      	movs	r2, #12
 8005074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005076:	f04f 33ff 	mov.w	r3, #4294967295
 800507a:	e009      	b.n	8005090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800507c:	4b08      	ldr	r3, [pc, #32]	; (80050a0 <_sbrk+0x64>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005082:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <_sbrk+0x64>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4413      	add	r3, r2
 800508a:	4a05      	ldr	r2, [pc, #20]	; (80050a0 <_sbrk+0x64>)
 800508c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800508e:	68fb      	ldr	r3, [r7, #12]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20020000 	.word	0x20020000
 800509c:	00000400 	.word	0x00000400
 80050a0:	20000b20 	.word	0x20000b20
 80050a4:	20000b40 	.word	0x20000b40

080050a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050ac:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <SystemInit+0x20>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	4a05      	ldr	r2, [pc, #20]	; (80050c8 <SystemInit+0x20>)
 80050b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050bc:	bf00      	nop
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	e000ed00 	.word	0xe000ed00

080050cc <Reset_Handler>:
 80050cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005104 <LoopFillZerobss+0x12>
 80050d0:	480d      	ldr	r0, [pc, #52]	; (8005108 <LoopFillZerobss+0x16>)
 80050d2:	490e      	ldr	r1, [pc, #56]	; (800510c <LoopFillZerobss+0x1a>)
 80050d4:	4a0e      	ldr	r2, [pc, #56]	; (8005110 <LoopFillZerobss+0x1e>)
 80050d6:	2300      	movs	r3, #0
 80050d8:	e002      	b.n	80050e0 <LoopCopyDataInit>

080050da <CopyDataInit>:
 80050da:	58d4      	ldr	r4, [r2, r3]
 80050dc:	50c4      	str	r4, [r0, r3]
 80050de:	3304      	adds	r3, #4

080050e0 <LoopCopyDataInit>:
 80050e0:	18c4      	adds	r4, r0, r3
 80050e2:	428c      	cmp	r4, r1
 80050e4:	d3f9      	bcc.n	80050da <CopyDataInit>
 80050e6:	4a0b      	ldr	r2, [pc, #44]	; (8005114 <LoopFillZerobss+0x22>)
 80050e8:	4c0b      	ldr	r4, [pc, #44]	; (8005118 <LoopFillZerobss+0x26>)
 80050ea:	2300      	movs	r3, #0
 80050ec:	e001      	b.n	80050f2 <LoopFillZerobss>

080050ee <FillZerobss>:
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	3204      	adds	r2, #4

080050f2 <LoopFillZerobss>:
 80050f2:	42a2      	cmp	r2, r4
 80050f4:	d3fb      	bcc.n	80050ee <FillZerobss>
 80050f6:	f7ff ffd7 	bl	80050a8 <SystemInit>
 80050fa:	f007 fb19 	bl	800c730 <__libc_init_array>
 80050fe:	f7fd fbb5 	bl	800286c <main>
 8005102:	4770      	bx	lr
 8005104:	20020000 	.word	0x20020000
 8005108:	20000000 	.word	0x20000000
 800510c:	200001dc 	.word	0x200001dc
 8005110:	0800fa7c 	.word	0x0800fa7c
 8005114:	200001dc 	.word	0x200001dc
 8005118:	20000b3c 	.word	0x20000b3c

0800511c <ADC_IRQHandler>:
 800511c:	e7fe      	b.n	800511c <ADC_IRQHandler>
	...

08005120 <HAL_Init>:
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
 8005124:	4b0e      	ldr	r3, [pc, #56]	; (8005160 <HAL_Init+0x40>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a0d      	ldr	r2, [pc, #52]	; (8005160 <HAL_Init+0x40>)
 800512a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_Init+0x40>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a0a      	ldr	r2, [pc, #40]	; (8005160 <HAL_Init+0x40>)
 8005136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	4b08      	ldr	r3, [pc, #32]	; (8005160 <HAL_Init+0x40>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a07      	ldr	r2, [pc, #28]	; (8005160 <HAL_Init+0x40>)
 8005142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	2003      	movs	r0, #3
 800514a:	f000 f973 	bl	8005434 <HAL_NVIC_SetPriorityGrouping>
 800514e:	200f      	movs	r0, #15
 8005150:	f000 f808 	bl	8005164 <HAL_InitTick>
 8005154:	f7ff fb98 	bl	8004888 <HAL_MspInit>
 8005158:	2300      	movs	r3, #0
 800515a:	4618      	mov	r0, r3
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40023c00 	.word	0x40023c00

08005164 <HAL_InitTick>:
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <HAL_InitTick+0x54>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4b12      	ldr	r3, [pc, #72]	; (80051bc <HAL_InitTick+0x58>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	4619      	mov	r1, r3
 8005176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800517a:	fbb3 f3f1 	udiv	r3, r3, r1
 800517e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005182:	4618      	mov	r0, r3
 8005184:	f000 f999 	bl	80054ba <HAL_SYSTICK_Config>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <HAL_InitTick+0x2e>
 800518e:	2301      	movs	r3, #1
 8005190:	e00e      	b.n	80051b0 <HAL_InitTick+0x4c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b0f      	cmp	r3, #15
 8005196:	d80a      	bhi.n	80051ae <HAL_InitTick+0x4a>
 8005198:	2200      	movs	r2, #0
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	f04f 30ff 	mov.w	r0, #4294967295
 80051a0:	f000 f953 	bl	800544a <HAL_NVIC_SetPriority>
 80051a4:	4a06      	ldr	r2, [pc, #24]	; (80051c0 <HAL_InitTick+0x5c>)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	2300      	movs	r3, #0
 80051ac:	e000      	b.n	80051b0 <HAL_InitTick+0x4c>
 80051ae:	2301      	movs	r3, #1
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	20000000 	.word	0x20000000
 80051bc:	20000008 	.word	0x20000008
 80051c0:	20000004 	.word	0x20000004

080051c4 <HAL_IncTick>:
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <HAL_IncTick+0x20>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <HAL_IncTick+0x24>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4413      	add	r3, r2
 80051d4:	4a04      	ldr	r2, [pc, #16]	; (80051e8 <HAL_IncTick+0x24>)
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	bf00      	nop
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000008 	.word	0x20000008
 80051e8:	20000b24 	.word	0x20000b24

080051ec <HAL_GetTick>:
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	4b03      	ldr	r3, [pc, #12]	; (8005200 <HAL_GetTick+0x14>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	20000b24 	.word	0x20000b24

08005204 <HAL_Delay>:
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	f7ff ffee 	bl	80051ec <HAL_GetTick>
 8005210:	60b8      	str	r0, [r7, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d005      	beq.n	800522a <HAL_Delay+0x26>
 800521e:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <HAL_Delay+0x44>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	bf00      	nop
 800522c:	f7ff ffde 	bl	80051ec <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	429a      	cmp	r2, r3
 800523a:	d8f7      	bhi.n	800522c <HAL_Delay+0x28>
 800523c:	bf00      	nop
 800523e:	bf00      	nop
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000008 	.word	0x20000008

0800524c <__NVIC_SetPriorityGrouping>:
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	4b0c      	ldr	r3, [pc, #48]	; (8005290 <__NVIC_SetPriorityGrouping+0x44>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	60bb      	str	r3, [r7, #8]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005268:	4013      	ands	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	021a      	lsls	r2, r3, #8
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	4313      	orrs	r3, r2
 8005274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	4a04      	ldr	r2, [pc, #16]	; (8005290 <__NVIC_SetPriorityGrouping+0x44>)
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	60d3      	str	r3, [r2, #12]
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	e000ed00 	.word	0xe000ed00

08005294 <__NVIC_GetPriorityGrouping>:
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
 8005298:	4b04      	ldr	r3, [pc, #16]	; (80052ac <__NVIC_GetPriorityGrouping+0x18>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	0a1b      	lsrs	r3, r3, #8
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	4618      	mov	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	e000ed00 	.word	0xe000ed00

080052b0 <__NVIC_EnableIRQ>:
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	71fb      	strb	r3, [r7, #7]
 80052ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	db0b      	blt.n	80052da <__NVIC_EnableIRQ+0x2a>
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	f003 021f 	and.w	r2, r3, #31
 80052c8:	4907      	ldr	r1, [pc, #28]	; (80052e8 <__NVIC_EnableIRQ+0x38>)
 80052ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	2001      	movs	r0, #1
 80052d2:	fa00 f202 	lsl.w	r2, r0, r2
 80052d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	e000e100 	.word	0xe000e100

080052ec <__NVIC_DisableIRQ>:
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	71fb      	strb	r3, [r7, #7]
 80052f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	db12      	blt.n	8005324 <__NVIC_DisableIRQ+0x38>
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	f003 021f 	and.w	r2, r3, #31
 8005304:	490a      	ldr	r1, [pc, #40]	; (8005330 <__NVIC_DisableIRQ+0x44>)
 8005306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	2001      	movs	r0, #1
 800530e:	fa00 f202 	lsl.w	r2, r0, r2
 8005312:	3320      	adds	r3, #32
 8005314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	bf00      	nop
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	e000e100 	.word	0xe000e100

08005334 <__NVIC_SetPriority>:
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	6039      	str	r1, [r7, #0]
 800533e:	71fb      	strb	r3, [r7, #7]
 8005340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005344:	2b00      	cmp	r3, #0
 8005346:	db0a      	blt.n	800535e <__NVIC_SetPriority+0x2a>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	b2da      	uxtb	r2, r3
 800534c:	490c      	ldr	r1, [pc, #48]	; (8005380 <__NVIC_SetPriority+0x4c>)
 800534e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005352:	0112      	lsls	r2, r2, #4
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	440b      	add	r3, r1
 8005358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800535c:	e00a      	b.n	8005374 <__NVIC_SetPriority+0x40>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	b2da      	uxtb	r2, r3
 8005362:	4908      	ldr	r1, [pc, #32]	; (8005384 <__NVIC_SetPriority+0x50>)
 8005364:	79fb      	ldrb	r3, [r7, #7]
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	3b04      	subs	r3, #4
 800536c:	0112      	lsls	r2, r2, #4
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	440b      	add	r3, r1
 8005372:	761a      	strb	r2, [r3, #24]
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	e000e100 	.word	0xe000e100
 8005384:	e000ed00 	.word	0xe000ed00

08005388 <NVIC_EncodePriority>:
 8005388:	b480      	push	{r7}
 800538a:	b089      	sub	sp, #36	; 0x24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f1c3 0307 	rsb	r3, r3, #7
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	bf28      	it	cs
 80053a6:	2304      	movcs	r3, #4
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3304      	adds	r3, #4
 80053ae:	2b06      	cmp	r3, #6
 80053b0:	d902      	bls.n	80053b8 <NVIC_EncodePriority+0x30>
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	3b03      	subs	r3, #3
 80053b6:	e000      	b.n	80053ba <NVIC_EncodePriority+0x32>
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	f04f 32ff 	mov.w	r2, #4294967295
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	fa02 f303 	lsl.w	r3, r2, r3
 80053c6:	43da      	mvns	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	401a      	ands	r2, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	409a      	lsls	r2, r3
 80053d0:	f04f 31ff 	mov.w	r1, #4294967295
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	fa01 f303 	lsl.w	r3, r1, r3
 80053da:	43d9      	mvns	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	400b      	ands	r3, r1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	3724      	adds	r7, #36	; 0x24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
	...

080053f0 <SysTick_Config>:
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005400:	d301      	bcc.n	8005406 <SysTick_Config+0x16>
 8005402:	2301      	movs	r3, #1
 8005404:	e00f      	b.n	8005426 <SysTick_Config+0x36>
 8005406:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <SysTick_Config+0x40>)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3b01      	subs	r3, #1
 800540c:	6053      	str	r3, [r2, #4]
 800540e:	210f      	movs	r1, #15
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	f7ff ff8e 	bl	8005334 <__NVIC_SetPriority>
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <SysTick_Config+0x40>)
 800541a:	2200      	movs	r2, #0
 800541c:	609a      	str	r2, [r3, #8]
 800541e:	4b04      	ldr	r3, [pc, #16]	; (8005430 <SysTick_Config+0x40>)
 8005420:	2207      	movs	r2, #7
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	2300      	movs	r3, #0
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	e000e010 	.word	0xe000e010

08005434 <HAL_NVIC_SetPriorityGrouping>:
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7ff ff05 	bl	800524c <__NVIC_SetPriorityGrouping>
 8005442:	bf00      	nop
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_NVIC_SetPriority>:
 800544a:	b580      	push	{r7, lr}
 800544c:	b086      	sub	sp, #24
 800544e:	af00      	add	r7, sp, #0
 8005450:	4603      	mov	r3, r0
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	73fb      	strb	r3, [r7, #15]
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	f7ff ff1a 	bl	8005294 <__NVIC_GetPriorityGrouping>
 8005460:	6178      	str	r0, [r7, #20]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	6978      	ldr	r0, [r7, #20]
 8005468:	f7ff ff8e 	bl	8005388 <NVIC_EncodePriority>
 800546c:	4602      	mov	r2, r0
 800546e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005472:	4611      	mov	r1, r2
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff ff5d 	bl	8005334 <__NVIC_SetPriority>
 800547a:	bf00      	nop
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_NVIC_EnableIRQ>:
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
 8005488:	4603      	mov	r3, r0
 800548a:	71fb      	strb	r3, [r7, #7]
 800548c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff ff0d 	bl	80052b0 <__NVIC_EnableIRQ>
 8005496:	bf00      	nop
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_NVIC_DisableIRQ>:
 800549e:	b580      	push	{r7, lr}
 80054a0:	b082      	sub	sp, #8
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	4603      	mov	r3, r0
 80054a6:	71fb      	strb	r3, [r7, #7]
 80054a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff ff1d 	bl	80052ec <__NVIC_DisableIRQ>
 80054b2:	bf00      	nop
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_SYSTICK_Config>:
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff ff94 	bl	80053f0 <SysTick_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <HAL_DMA_Init>:
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	f7ff fe84 	bl	80051ec <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_DMA_Init+0x1c>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e099      	b.n	8005624 <HAL_DMA_Init+0x150>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0201 	bic.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	e00f      	b.n	8005532 <HAL_DMA_Init+0x5e>
 8005512:	f7ff fe6b 	bl	80051ec <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b05      	cmp	r3, #5
 800551e:	d908      	bls.n	8005532 <HAL_DMA_Init+0x5e>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	655a      	str	r2, [r3, #84]	; 0x54
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2203      	movs	r2, #3
 800552a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800552e:	2303      	movs	r3, #3
 8005530:	e078      	b.n	8005624 <HAL_DMA_Init+0x150>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e8      	bne.n	8005512 <HAL_DMA_Init+0x3e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4b38      	ldr	r3, [pc, #224]	; (800562c <HAL_DMA_Init+0x158>)
 800554c:	4013      	ands	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	431a      	orrs	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	4313      	orrs	r3, r2
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	2b04      	cmp	r3, #4
 800558a:	d107      	bne.n	800559c <HAL_DMA_Init+0xc8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	4313      	orrs	r3, r2
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f023 0307 	bic.w	r3, r3, #7
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d117      	bne.n	80055f6 <HAL_DMA_Init+0x122>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00e      	beq.n	80055f6 <HAL_DMA_Init+0x122>
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fae7 	bl	8005bac <DMA_CheckFifoParam>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <HAL_DMA_Init+0x122>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2240      	movs	r2, #64	; 0x40
 80055e8:	655a      	str	r2, [r3, #84]	; 0x54
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80055f2:	2301      	movs	r3, #1
 80055f4:	e016      	b.n	8005624 <HAL_DMA_Init+0x150>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	615a      	str	r2, [r3, #20]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fa9e 	bl	8005b40 <DMA_CalcBaseAndBitshift>
 8005604:	4603      	mov	r3, r0
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560c:	223f      	movs	r2, #63	; 0x3f
 800560e:	409a      	lsls	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	609a      	str	r2, [r3, #8]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	655a      	str	r2, [r3, #84]	; 0x54
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005622:	2300      	movs	r3, #0
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	f010803f 	.word	0xf010803f

08005630 <HAL_DMA_DeInit>:
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_DMA_DeInit+0x12>
 800563e:	2301      	movs	r3, #1
 8005640:	e050      	b.n	80056e4 <HAL_DMA_DeInit+0xb4>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d101      	bne.n	8005652 <HAL_DMA_DeInit+0x22>
 800564e:	2302      	movs	r3, #2
 8005650:	e048      	b.n	80056e4 <HAL_DMA_DeInit+0xb4>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0201 	bic.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2200      	movs	r2, #0
 8005670:	605a      	str	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2200      	movs	r2, #0
 8005678:	609a      	str	r2, [r3, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2200      	movs	r2, #0
 8005680:	60da      	str	r2, [r3, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2200      	movs	r2, #0
 8005688:	611a      	str	r2, [r3, #16]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2221      	movs	r2, #33	; 0x21
 8005690:	615a      	str	r2, [r3, #20]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fa54 	bl	8005b40 <DMA_CalcBaseAndBitshift>
 8005698:	4603      	mov	r3, r0
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	641a      	str	r2, [r3, #64]	; 0x40
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	645a      	str	r2, [r3, #68]	; 0x44
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	649a      	str	r2, [r3, #72]	; 0x48
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	651a      	str	r2, [r3, #80]	; 0x50
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c4:	223f      	movs	r2, #63	; 0x3f
 80056c6:	409a      	lsls	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	609a      	str	r2, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	655a      	str	r2, [r3, #84]	; 0x54
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80056e2:	2300      	movs	r3, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_DMA_Abort>:
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	f7ff fd77 	bl	80051ec <HAL_GetTick>
 80056fe:	60b8      	str	r0, [r7, #8]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d008      	beq.n	800571e <HAL_DMA_Abort+0x32>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2280      	movs	r2, #128	; 0x80
 8005710:	655a      	str	r2, [r3, #84]	; 0x54
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800571a:	2301      	movs	r3, #1
 800571c:	e052      	b.n	80057c4 <HAL_DMA_Abort+0xd8>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0216 	bic.w	r2, r2, #22
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695a      	ldr	r2, [r3, #20]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800573c:	615a      	str	r2, [r3, #20]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d103      	bne.n	800574e <HAL_DMA_Abort+0x62>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <HAL_DMA_Abort+0x72>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0208 	bic.w	r2, r2, #8
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0201 	bic.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	e013      	b.n	8005798 <HAL_DMA_Abort+0xac>
 8005770:	f7ff fd3c 	bl	80051ec <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b05      	cmp	r3, #5
 800577c:	d90c      	bls.n	8005798 <HAL_DMA_Abort+0xac>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	655a      	str	r2, [r3, #84]	; 0x54
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2203      	movs	r2, #3
 8005788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005794:	2303      	movs	r3, #3
 8005796:	e015      	b.n	80057c4 <HAL_DMA_Abort+0xd8>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e4      	bne.n	8005770 <HAL_DMA_Abort+0x84>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057aa:	223f      	movs	r2, #63	; 0x3f
 80057ac:	409a      	lsls	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	609a      	str	r2, [r3, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80057c2:	2300      	movs	r3, #0
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_DMA_Abort_IT>:
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d004      	beq.n	80057ea <HAL_DMA_Abort_IT+0x1e>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2280      	movs	r2, #128	; 0x80
 80057e4:	655a      	str	r2, [r3, #84]	; 0x54
 80057e6:	2301      	movs	r3, #1
 80057e8:	e00c      	b.n	8005804 <HAL_DMA_Abort_IT+0x38>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2205      	movs	r2, #5
 80057ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	2300      	movs	r3, #0
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_DMA_IRQHandler>:
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	2300      	movs	r3, #0
 800581a:	60bb      	str	r3, [r7, #8]
 800581c:	4b8e      	ldr	r3, [pc, #568]	; (8005a58 <HAL_DMA_IRQHandler+0x248>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a8e      	ldr	r2, [pc, #568]	; (8005a5c <HAL_DMA_IRQHandler+0x24c>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	0a9b      	lsrs	r3, r3, #10
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582e:	613b      	str	r3, [r7, #16]
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583a:	2208      	movs	r2, #8
 800583c:	409a      	lsls	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4013      	ands	r3, r2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d01a      	beq.n	800587c <HAL_DMA_IRQHandler+0x6c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d013      	beq.n	800587c <HAL_DMA_IRQHandler+0x6c>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0204 	bic.w	r2, r2, #4
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005868:	2208      	movs	r2, #8
 800586a:	409a      	lsls	r2, r3
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	609a      	str	r2, [r3, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005874:	f043 0201 	orr.w	r2, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	655a      	str	r2, [r3, #84]	; 0x54
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005880:	2201      	movs	r2, #1
 8005882:	409a      	lsls	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4013      	ands	r3, r2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d012      	beq.n	80058b2 <HAL_DMA_IRQHandler+0xa2>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_DMA_IRQHandler+0xa2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589e:	2201      	movs	r2, #1
 80058a0:	409a      	lsls	r2, r3
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	609a      	str	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058aa:	f043 0202 	orr.w	r2, r3, #2
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	655a      	str	r2, [r3, #84]	; 0x54
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b6:	2204      	movs	r2, #4
 80058b8:	409a      	lsls	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4013      	ands	r3, r2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d012      	beq.n	80058e8 <HAL_DMA_IRQHandler+0xd8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00b      	beq.n	80058e8 <HAL_DMA_IRQHandler+0xd8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d4:	2204      	movs	r2, #4
 80058d6:	409a      	lsls	r2, r3
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	609a      	str	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e0:	f043 0204 	orr.w	r2, r3, #4
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ec:	2210      	movs	r2, #16
 80058ee:	409a      	lsls	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d043      	beq.n	8005980 <HAL_DMA_IRQHandler+0x170>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d03c      	beq.n	8005980 <HAL_DMA_IRQHandler+0x170>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590a:	2210      	movs	r2, #16
 800590c:	409a      	lsls	r2, r3
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	609a      	str	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d018      	beq.n	8005952 <HAL_DMA_IRQHandler+0x142>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d108      	bne.n	8005940 <HAL_DMA_IRQHandler+0x130>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d024      	beq.n	8005980 <HAL_DMA_IRQHandler+0x170>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	4798      	blx	r3
 800593e:	e01f      	b.n	8005980 <HAL_DMA_IRQHandler+0x170>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01b      	beq.n	8005980 <HAL_DMA_IRQHandler+0x170>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	4798      	blx	r3
 8005950:	e016      	b.n	8005980 <HAL_DMA_IRQHandler+0x170>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595c:	2b00      	cmp	r3, #0
 800595e:	d107      	bne.n	8005970 <HAL_DMA_IRQHandler+0x160>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0208 	bic.w	r2, r2, #8
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <HAL_DMA_IRQHandler+0x170>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	4798      	blx	r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005984:	2220      	movs	r2, #32
 8005986:	409a      	lsls	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4013      	ands	r3, r2
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 808f 	beq.w	8005ab0 <HAL_DMA_IRQHandler+0x2a0>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 8087 	beq.w	8005ab0 <HAL_DMA_IRQHandler+0x2a0>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a6:	2220      	movs	r2, #32
 80059a8:	409a      	lsls	r2, r3
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	609a      	str	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b05      	cmp	r3, #5
 80059b8:	d136      	bne.n	8005a28 <HAL_DMA_IRQHandler+0x218>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0216 	bic.w	r2, r2, #22
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695a      	ldr	r2, [r3, #20]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059d8:	615a      	str	r2, [r3, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <HAL_DMA_IRQHandler+0x1da>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <HAL_DMA_IRQHandler+0x1ea>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0208 	bic.w	r2, r2, #8
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fe:	223f      	movs	r2, #63	; 0x3f
 8005a00:	409a      	lsls	r2, r3
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	609a      	str	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d07e      	beq.n	8005b1c <HAL_DMA_IRQHandler+0x30c>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	4798      	blx	r3
 8005a26:	e079      	b.n	8005b1c <HAL_DMA_IRQHandler+0x30c>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01d      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x262>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10d      	bne.n	8005a60 <HAL_DMA_IRQHandler+0x250>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d031      	beq.n	8005ab0 <HAL_DMA_IRQHandler+0x2a0>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	4798      	blx	r3
 8005a54:	e02c      	b.n	8005ab0 <HAL_DMA_IRQHandler+0x2a0>
 8005a56:	bf00      	nop
 8005a58:	20000000 	.word	0x20000000
 8005a5c:	1b4e81b5 	.word	0x1b4e81b5
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d023      	beq.n	8005ab0 <HAL_DMA_IRQHandler+0x2a0>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	4798      	blx	r3
 8005a70:	e01e      	b.n	8005ab0 <HAL_DMA_IRQHandler+0x2a0>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10f      	bne.n	8005aa0 <HAL_DMA_IRQHandler+0x290>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0210 	bic.w	r2, r2, #16
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_DMA_IRQHandler+0x2a0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	4798      	blx	r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d032      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x30e>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d022      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2fa>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2205      	movs	r2, #5
 8005ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0201 	bic.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	60bb      	str	r3, [r7, #8]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d307      	bcc.n	8005af8 <HAL_DMA_IRQHandler+0x2e8>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f2      	bne.n	8005adc <HAL_DMA_IRQHandler+0x2cc>
 8005af6:	e000      	b.n	8005afa <HAL_DMA_IRQHandler+0x2ea>
 8005af8:	bf00      	nop
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d005      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x30e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	4798      	blx	r3
 8005b1a:	e000      	b.n	8005b1e <HAL_DMA_IRQHandler+0x30e>
 8005b1c:	bf00      	nop
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_DMA_GetState>:
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <DMA_CalcBaseAndBitshift>:
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	3b10      	subs	r3, #16
 8005b50:	4a14      	ldr	r2, [pc, #80]	; (8005ba4 <DMA_CalcBaseAndBitshift+0x64>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	091b      	lsrs	r3, r3, #4
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	4a13      	ldr	r2, [pc, #76]	; (8005ba8 <DMA_CalcBaseAndBitshift+0x68>)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d909      	bls.n	8005b82 <DMA_CalcBaseAndBitshift+0x42>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b76:	f023 0303 	bic.w	r3, r3, #3
 8005b7a:	1d1a      	adds	r2, r3, #4
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	659a      	str	r2, [r3, #88]	; 0x58
 8005b80:	e007      	b.n	8005b92 <DMA_CalcBaseAndBitshift+0x52>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6593      	str	r3, [r2, #88]	; 0x58
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	aaaaaaab 	.word	0xaaaaaaab
 8005ba8:	0800f27c 	.word	0x0800f27c

08005bac <DMA_CheckFifoParam>:
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	73fb      	strb	r3, [r7, #15]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d11f      	bne.n	8005c06 <DMA_CheckFifoParam+0x5a>
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d856      	bhi.n	8005c7a <DMA_CheckFifoParam+0xce>
 8005bcc:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <DMA_CheckFifoParam+0x28>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005be5 	.word	0x08005be5
 8005bd8:	08005bf7 	.word	0x08005bf7
 8005bdc:	08005be5 	.word	0x08005be5
 8005be0:	08005c7b 	.word	0x08005c7b
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d046      	beq.n	8005c7e <DMA_CheckFifoParam+0xd2>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	73fb      	strb	r3, [r7, #15]
 8005bf4:	e043      	b.n	8005c7e <DMA_CheckFifoParam+0xd2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bfe:	d140      	bne.n	8005c82 <DMA_CheckFifoParam+0xd6>
 8005c00:	2301      	movs	r3, #1
 8005c02:	73fb      	strb	r3, [r7, #15]
 8005c04:	e03d      	b.n	8005c82 <DMA_CheckFifoParam+0xd6>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c0e:	d121      	bne.n	8005c54 <DMA_CheckFifoParam+0xa8>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d837      	bhi.n	8005c86 <DMA_CheckFifoParam+0xda>
 8005c16:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <DMA_CheckFifoParam+0x70>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c2d 	.word	0x08005c2d
 8005c20:	08005c33 	.word	0x08005c33
 8005c24:	08005c2d 	.word	0x08005c2d
 8005c28:	08005c45 	.word	0x08005c45
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
 8005c30:	e030      	b.n	8005c94 <DMA_CheckFifoParam+0xe8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d025      	beq.n	8005c8a <DMA_CheckFifoParam+0xde>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	73fb      	strb	r3, [r7, #15]
 8005c42:	e022      	b.n	8005c8a <DMA_CheckFifoParam+0xde>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c4c:	d11f      	bne.n	8005c8e <DMA_CheckFifoParam+0xe2>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
 8005c52:	e01c      	b.n	8005c8e <DMA_CheckFifoParam+0xe2>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d903      	bls.n	8005c62 <DMA_CheckFifoParam+0xb6>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b03      	cmp	r3, #3
 8005c5e:	d003      	beq.n	8005c68 <DMA_CheckFifoParam+0xbc>
 8005c60:	e018      	b.n	8005c94 <DMA_CheckFifoParam+0xe8>
 8005c62:	2301      	movs	r3, #1
 8005c64:	73fb      	strb	r3, [r7, #15]
 8005c66:	e015      	b.n	8005c94 <DMA_CheckFifoParam+0xe8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00e      	beq.n	8005c92 <DMA_CheckFifoParam+0xe6>
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
 8005c78:	e00b      	b.n	8005c92 <DMA_CheckFifoParam+0xe6>
 8005c7a:	bf00      	nop
 8005c7c:	e00a      	b.n	8005c94 <DMA_CheckFifoParam+0xe8>
 8005c7e:	bf00      	nop
 8005c80:	e008      	b.n	8005c94 <DMA_CheckFifoParam+0xe8>
 8005c82:	bf00      	nop
 8005c84:	e006      	b.n	8005c94 <DMA_CheckFifoParam+0xe8>
 8005c86:	bf00      	nop
 8005c88:	e004      	b.n	8005c94 <DMA_CheckFifoParam+0xe8>
 8005c8a:	bf00      	nop
 8005c8c:	e002      	b.n	8005c94 <DMA_CheckFifoParam+0xe8>
 8005c8e:	bf00      	nop
 8005c90:	e000      	b.n	8005c94 <DMA_CheckFifoParam+0xe8>
 8005c92:	bf00      	nop
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop

08005ca4 <HAL_GPIO_Init>:
 8005ca4:	b480      	push	{r7}
 8005ca6:	b089      	sub	sp, #36	; 0x24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	e159      	b.n	8005f74 <HAL_GPIO_Init+0x2d0>
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	f040 8148 	bne.w	8005f6e <HAL_GPIO_Init+0x2ca>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d005      	beq.n	8005cf6 <HAL_GPIO_Init+0x52>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d130      	bne.n	8005d58 <HAL_GPIO_Init+0xb4>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	61bb      	str	r3, [r7, #24]
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	2203      	movs	r2, #3
 8005d02:	fa02 f303 	lsl.w	r3, r2, r3
 8005d06:	43db      	mvns	r3, r3
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	609a      	str	r2, [r3, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	43db      	mvns	r3, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	091b      	lsrs	r3, r3, #4
 8005d42:	f003 0201 	and.w	r2, r3, #1
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	605a      	str	r2, [r3, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d017      	beq.n	8005d94 <HAL_GPIO_Init+0xf0>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	2203      	movs	r2, #3
 8005d70:	fa02 f303 	lsl.w	r3, r2, r3
 8005d74:	43db      	mvns	r3, r3
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	60da      	str	r2, [r3, #12]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f003 0303 	and.w	r3, r3, #3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d123      	bne.n	8005de8 <HAL_GPIO_Init+0x144>
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	08da      	lsrs	r2, r3, #3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3208      	adds	r2, #8
 8005da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	220f      	movs	r2, #15
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	08da      	lsrs	r2, r3, #3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3208      	adds	r2, #8
 8005de2:	69b9      	ldr	r1, [r7, #24]
 8005de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	2203      	movs	r2, #3
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f003 0203 	and.w	r2, r3, #3
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 80a2 	beq.w	8005f6e <HAL_GPIO_Init+0x2ca>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	4b57      	ldr	r3, [pc, #348]	; (8005f8c <HAL_GPIO_Init+0x2e8>)
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	4a56      	ldr	r2, [pc, #344]	; (8005f8c <HAL_GPIO_Init+0x2e8>)
 8005e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e38:	6453      	str	r3, [r2, #68]	; 0x44
 8005e3a:	4b54      	ldr	r3, [pc, #336]	; (8005f8c <HAL_GPIO_Init+0x2e8>)
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4a52      	ldr	r2, [pc, #328]	; (8005f90 <HAL_GPIO_Init+0x2ec>)
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	089b      	lsrs	r3, r3, #2
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e52:	61bb      	str	r3, [r7, #24]
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	220f      	movs	r2, #15
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	43db      	mvns	r3, r3
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	4013      	ands	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a49      	ldr	r2, [pc, #292]	; (8005f94 <HAL_GPIO_Init+0x2f0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d019      	beq.n	8005ea6 <HAL_GPIO_Init+0x202>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a48      	ldr	r2, [pc, #288]	; (8005f98 <HAL_GPIO_Init+0x2f4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d013      	beq.n	8005ea2 <HAL_GPIO_Init+0x1fe>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a47      	ldr	r2, [pc, #284]	; (8005f9c <HAL_GPIO_Init+0x2f8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00d      	beq.n	8005e9e <HAL_GPIO_Init+0x1fa>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a46      	ldr	r2, [pc, #280]	; (8005fa0 <HAL_GPIO_Init+0x2fc>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <HAL_GPIO_Init+0x1f6>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a45      	ldr	r2, [pc, #276]	; (8005fa4 <HAL_GPIO_Init+0x300>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d101      	bne.n	8005e96 <HAL_GPIO_Init+0x1f2>
 8005e92:	2304      	movs	r3, #4
 8005e94:	e008      	b.n	8005ea8 <HAL_GPIO_Init+0x204>
 8005e96:	2307      	movs	r3, #7
 8005e98:	e006      	b.n	8005ea8 <HAL_GPIO_Init+0x204>
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e004      	b.n	8005ea8 <HAL_GPIO_Init+0x204>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e002      	b.n	8005ea8 <HAL_GPIO_Init+0x204>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <HAL_GPIO_Init+0x204>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	f002 0203 	and.w	r2, r2, #3
 8005eae:	0092      	lsls	r2, r2, #2
 8005eb0:	4093      	lsls	r3, r2
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
 8005eb8:	4935      	ldr	r1, [pc, #212]	; (8005f90 <HAL_GPIO_Init+0x2ec>)
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	089b      	lsrs	r3, r3, #2
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005ec6:	4b38      	ldr	r3, [pc, #224]	; (8005fa8 <HAL_GPIO_Init+0x304>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	61bb      	str	r3, [r7, #24]
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_GPIO_Init+0x246>
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	4a2f      	ldr	r2, [pc, #188]	; (8005fa8 <HAL_GPIO_Init+0x304>)
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	6093      	str	r3, [r2, #8]
 8005ef0:	4b2d      	ldr	r3, [pc, #180]	; (8005fa8 <HAL_GPIO_Init+0x304>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	61bb      	str	r3, [r7, #24]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	4013      	ands	r3, r2
 8005efe:	61bb      	str	r3, [r7, #24]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_GPIO_Init+0x270>
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
 8005f14:	4a24      	ldr	r2, [pc, #144]	; (8005fa8 <HAL_GPIO_Init+0x304>)
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	60d3      	str	r3, [r2, #12]
 8005f1a:	4b23      	ldr	r3, [pc, #140]	; (8005fa8 <HAL_GPIO_Init+0x304>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	43db      	mvns	r3, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4013      	ands	r3, r2
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_GPIO_Init+0x29a>
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	4a1a      	ldr	r2, [pc, #104]	; (8005fa8 <HAL_GPIO_Init+0x304>)
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	6053      	str	r3, [r2, #4]
 8005f44:	4b18      	ldr	r3, [pc, #96]	; (8005fa8 <HAL_GPIO_Init+0x304>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	4013      	ands	r3, r2
 8005f52:	61bb      	str	r3, [r7, #24]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_GPIO_Init+0x2c4>
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	61bb      	str	r3, [r7, #24]
 8005f68:	4a0f      	ldr	r2, [pc, #60]	; (8005fa8 <HAL_GPIO_Init+0x304>)
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	3301      	adds	r3, #1
 8005f72:	61fb      	str	r3, [r7, #28]
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	2b0f      	cmp	r3, #15
 8005f78:	f67f aea2 	bls.w	8005cc0 <HAL_GPIO_Init+0x1c>
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	3724      	adds	r7, #36	; 0x24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	40013800 	.word	0x40013800
 8005f94:	40020000 	.word	0x40020000
 8005f98:	40020400 	.word	0x40020400
 8005f9c:	40020800 	.word	0x40020800
 8005fa0:	40020c00 	.word	0x40020c00
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	40013c00 	.word	0x40013c00

08005fac <HAL_GPIO_DeInit>:
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60bb      	str	r3, [r7, #8]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	e0bb      	b.n	8006140 <HAL_GPIO_DeInit+0x194>
 8005fc8:	2201      	movs	r2, #1
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	f040 80ab 	bne.w	800613a <HAL_GPIO_DeInit+0x18e>
 8005fe4:	4a5c      	ldr	r2, [pc, #368]	; (8006158 <HAL_GPIO_DeInit+0x1ac>)
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	089b      	lsrs	r3, r3, #2
 8005fea:	3302      	adds	r3, #2
 8005fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f003 0303 	and.w	r3, r3, #3
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	220f      	movs	r2, #15
 8005ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	4013      	ands	r3, r2
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a54      	ldr	r2, [pc, #336]	; (800615c <HAL_GPIO_DeInit+0x1b0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d019      	beq.n	8006042 <HAL_GPIO_DeInit+0x96>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a53      	ldr	r2, [pc, #332]	; (8006160 <HAL_GPIO_DeInit+0x1b4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d013      	beq.n	800603e <HAL_GPIO_DeInit+0x92>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a52      	ldr	r2, [pc, #328]	; (8006164 <HAL_GPIO_DeInit+0x1b8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00d      	beq.n	800603a <HAL_GPIO_DeInit+0x8e>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a51      	ldr	r2, [pc, #324]	; (8006168 <HAL_GPIO_DeInit+0x1bc>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d007      	beq.n	8006036 <HAL_GPIO_DeInit+0x8a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a50      	ldr	r2, [pc, #320]	; (800616c <HAL_GPIO_DeInit+0x1c0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d101      	bne.n	8006032 <HAL_GPIO_DeInit+0x86>
 800602e:	2304      	movs	r3, #4
 8006030:	e008      	b.n	8006044 <HAL_GPIO_DeInit+0x98>
 8006032:	2307      	movs	r3, #7
 8006034:	e006      	b.n	8006044 <HAL_GPIO_DeInit+0x98>
 8006036:	2303      	movs	r3, #3
 8006038:	e004      	b.n	8006044 <HAL_GPIO_DeInit+0x98>
 800603a:	2302      	movs	r3, #2
 800603c:	e002      	b.n	8006044 <HAL_GPIO_DeInit+0x98>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <HAL_GPIO_DeInit+0x98>
 8006042:	2300      	movs	r3, #0
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	f002 0203 	and.w	r2, r2, #3
 800604a:	0092      	lsls	r2, r2, #2
 800604c:	4093      	lsls	r3, r2
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	429a      	cmp	r2, r3
 8006052:	d132      	bne.n	80060ba <HAL_GPIO_DeInit+0x10e>
 8006054:	4b46      	ldr	r3, [pc, #280]	; (8006170 <HAL_GPIO_DeInit+0x1c4>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	43db      	mvns	r3, r3
 800605c:	4944      	ldr	r1, [pc, #272]	; (8006170 <HAL_GPIO_DeInit+0x1c4>)
 800605e:	4013      	ands	r3, r2
 8006060:	600b      	str	r3, [r1, #0]
 8006062:	4b43      	ldr	r3, [pc, #268]	; (8006170 <HAL_GPIO_DeInit+0x1c4>)
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	43db      	mvns	r3, r3
 800606a:	4941      	ldr	r1, [pc, #260]	; (8006170 <HAL_GPIO_DeInit+0x1c4>)
 800606c:	4013      	ands	r3, r2
 800606e:	604b      	str	r3, [r1, #4]
 8006070:	4b3f      	ldr	r3, [pc, #252]	; (8006170 <HAL_GPIO_DeInit+0x1c4>)
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	43db      	mvns	r3, r3
 8006078:	493d      	ldr	r1, [pc, #244]	; (8006170 <HAL_GPIO_DeInit+0x1c4>)
 800607a:	4013      	ands	r3, r2
 800607c:	60cb      	str	r3, [r1, #12]
 800607e:	4b3c      	ldr	r3, [pc, #240]	; (8006170 <HAL_GPIO_DeInit+0x1c4>)
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	43db      	mvns	r3, r3
 8006086:	493a      	ldr	r1, [pc, #232]	; (8006170 <HAL_GPIO_DeInit+0x1c4>)
 8006088:	4013      	ands	r3, r2
 800608a:	608b      	str	r3, [r1, #8]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	220f      	movs	r2, #15
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	4a2e      	ldr	r2, [pc, #184]	; (8006158 <HAL_GPIO_DeInit+0x1ac>)
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	089b      	lsrs	r3, r3, #2
 80060a2:	3302      	adds	r3, #2
 80060a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	43da      	mvns	r2, r3
 80060ac:	482a      	ldr	r0, [pc, #168]	; (8006158 <HAL_GPIO_DeInit+0x1ac>)
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	089b      	lsrs	r3, r3, #2
 80060b2:	400a      	ands	r2, r1
 80060b4:	3302      	adds	r3, #2
 80060b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	2103      	movs	r1, #3
 80060c4:	fa01 f303 	lsl.w	r3, r1, r3
 80060c8:	43db      	mvns	r3, r3
 80060ca:	401a      	ands	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	08da      	lsrs	r2, r3, #3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3208      	adds	r2, #8
 80060d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	220f      	movs	r2, #15
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	43db      	mvns	r3, r3
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	08d2      	lsrs	r2, r2, #3
 80060f0:	4019      	ands	r1, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3208      	adds	r2, #8
 80060f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	2103      	movs	r1, #3
 8006104:	fa01 f303 	lsl.w	r3, r1, r3
 8006108:	43db      	mvns	r3, r3
 800610a:	401a      	ands	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60da      	str	r2, [r3, #12]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	2101      	movs	r1, #1
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	fa01 f303 	lsl.w	r3, r1, r3
 800611c:	43db      	mvns	r3, r3
 800611e:	401a      	ands	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	605a      	str	r2, [r3, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	2103      	movs	r1, #3
 800612e:	fa01 f303 	lsl.w	r3, r1, r3
 8006132:	43db      	mvns	r3, r3
 8006134:	401a      	ands	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	609a      	str	r2, [r3, #8]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	3301      	adds	r3, #1
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2b0f      	cmp	r3, #15
 8006144:	f67f af40 	bls.w	8005fc8 <HAL_GPIO_DeInit+0x1c>
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40013800 	.word	0x40013800
 800615c:	40020000 	.word	0x40020000
 8006160:	40020400 	.word	0x40020400
 8006164:	40020800 	.word	0x40020800
 8006168:	40020c00 	.word	0x40020c00
 800616c:	40021000 	.word	0x40021000
 8006170:	40013c00 	.word	0x40013c00

08006174 <HAL_GPIO_WritePin>:
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	807b      	strh	r3, [r7, #2]
 8006180:	4613      	mov	r3, r2
 8006182:	707b      	strb	r3, [r7, #1]
 8006184:	787b      	ldrb	r3, [r7, #1]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_WritePin+0x1e>
 800618a:	887a      	ldrh	r2, [r7, #2]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	619a      	str	r2, [r3, #24]
 8006190:	e003      	b.n	800619a <HAL_GPIO_WritePin+0x26>
 8006192:	887b      	ldrh	r3, [r7, #2]
 8006194:	041a      	lsls	r2, r3, #16
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	619a      	str	r2, [r3, #24]
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
	...

080061a8 <HAL_I2C_Init>:
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_I2C_Init+0x12>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e12b      	b.n	8006412 <HAL_I2C_Init+0x26a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <HAL_I2C_Init+0x2c>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fe fb82 	bl	80048d8 <HAL_I2C_MspInit>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2224      	movs	r2, #36	; 0x24
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0201 	bic.w	r2, r2, #1
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	f002 fa1c 	bl	8008648 <HAL_RCC_GetPCLK1Freq>
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	4a81      	ldr	r2, [pc, #516]	; (800641c <HAL_I2C_Init+0x274>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d807      	bhi.n	800622c <HAL_I2C_Init+0x84>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4a80      	ldr	r2, [pc, #512]	; (8006420 <HAL_I2C_Init+0x278>)
 8006220:	4293      	cmp	r3, r2
 8006222:	bf94      	ite	ls
 8006224:	2301      	movls	r3, #1
 8006226:	2300      	movhi	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	e006      	b.n	800623a <HAL_I2C_Init+0x92>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4a7d      	ldr	r2, [pc, #500]	; (8006424 <HAL_I2C_Init+0x27c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	bf94      	ite	ls
 8006234:	2301      	movls	r3, #1
 8006236:	2300      	movhi	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <HAL_I2C_Init+0x9a>
 800623e:	2301      	movs	r3, #1
 8006240:	e0e7      	b.n	8006412 <HAL_I2C_Init+0x26a>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4a78      	ldr	r2, [pc, #480]	; (8006428 <HAL_I2C_Init+0x280>)
 8006246:	fba2 2303 	umull	r2, r3, r2, r3
 800624a:	0c9b      	lsrs	r3, r3, #18
 800624c:	60bb      	str	r3, [r7, #8]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	430a      	orrs	r2, r1
 8006260:	605a      	str	r2, [r3, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	4a6a      	ldr	r2, [pc, #424]	; (800641c <HAL_I2C_Init+0x274>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d802      	bhi.n	800627c <HAL_I2C_Init+0xd4>
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	3301      	adds	r3, #1
 800627a:	e009      	b.n	8006290 <HAL_I2C_Init+0xe8>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006282:	fb02 f303 	mul.w	r3, r2, r3
 8006286:	4a69      	ldr	r2, [pc, #420]	; (800642c <HAL_I2C_Init+0x284>)
 8006288:	fba2 2303 	umull	r2, r3, r2, r3
 800628c:	099b      	lsrs	r3, r3, #6
 800628e:	3301      	adds	r3, #1
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6812      	ldr	r2, [r2, #0]
 8006294:	430b      	orrs	r3, r1
 8006296:	6213      	str	r3, [r2, #32]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80062a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	495c      	ldr	r1, [pc, #368]	; (800641c <HAL_I2C_Init+0x274>)
 80062ac:	428b      	cmp	r3, r1
 80062ae:	d819      	bhi.n	80062e4 <HAL_I2C_Init+0x13c>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	1e59      	subs	r1, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80062be:	1c59      	adds	r1, r3, #1
 80062c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80062c4:	400b      	ands	r3, r1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <HAL_I2C_Init+0x138>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1e59      	subs	r1, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80062d8:	3301      	adds	r3, #1
 80062da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062de:	e051      	b.n	8006384 <HAL_I2C_Init+0x1dc>
 80062e0:	2304      	movs	r3, #4
 80062e2:	e04f      	b.n	8006384 <HAL_I2C_Init+0x1dc>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d111      	bne.n	8006310 <HAL_I2C_Init+0x168>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	1e58      	subs	r0, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6859      	ldr	r1, [r3, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	440b      	add	r3, r1
 80062fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80062fe:	3301      	adds	r3, #1
 8006300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006304:	2b00      	cmp	r3, #0
 8006306:	bf0c      	ite	eq
 8006308:	2301      	moveq	r3, #1
 800630a:	2300      	movne	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	e012      	b.n	8006336 <HAL_I2C_Init+0x18e>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	1e58      	subs	r0, r3, #1
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6859      	ldr	r1, [r3, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	440b      	add	r3, r1
 800631e:	0099      	lsls	r1, r3, #2
 8006320:	440b      	add	r3, r1
 8006322:	fbb0 f3f3 	udiv	r3, r0, r3
 8006326:	3301      	adds	r3, #1
 8006328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800632c:	2b00      	cmp	r3, #0
 800632e:	bf0c      	ite	eq
 8006330:	2301      	moveq	r3, #1
 8006332:	2300      	movne	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <HAL_I2C_Init+0x196>
 800633a:	2301      	movs	r3, #1
 800633c:	e022      	b.n	8006384 <HAL_I2C_Init+0x1dc>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10e      	bne.n	8006364 <HAL_I2C_Init+0x1bc>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	1e58      	subs	r0, r3, #1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6859      	ldr	r1, [r3, #4]
 800634e:	460b      	mov	r3, r1
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	440b      	add	r3, r1
 8006354:	fbb0 f3f3 	udiv	r3, r0, r3
 8006358:	3301      	adds	r3, #1
 800635a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800635e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006362:	e00f      	b.n	8006384 <HAL_I2C_Init+0x1dc>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	1e58      	subs	r0, r3, #1
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6859      	ldr	r1, [r3, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	0099      	lsls	r1, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	fbb0 f3f3 	udiv	r3, r0, r3
 800637a:	3301      	adds	r3, #1
 800637c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	6809      	ldr	r1, [r1, #0]
 8006388:	4313      	orrs	r3, r2
 800638a:	61cb      	str	r3, [r1, #28]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69da      	ldr	r2, [r3, #28]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80063b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6911      	ldr	r1, [r2, #16]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	68d2      	ldr	r2, [r2, #12]
 80063be:	4311      	orrs	r1, r2
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6812      	ldr	r2, [r2, #0]
 80063c4:	430b      	orrs	r3, r1
 80063c6:	6093      	str	r3, [r2, #8]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695a      	ldr	r2, [r3, #20]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	60da      	str	r2, [r3, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	641a      	str	r2, [r3, #64]	; 0x40
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	631a      	str	r2, [r3, #48]	; 0x30
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006410:	2300      	movs	r3, #0
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	000186a0 	.word	0x000186a0
 8006420:	001e847f 	.word	0x001e847f
 8006424:	003d08ff 	.word	0x003d08ff
 8006428:	431bde83 	.word	0x431bde83
 800642c:	10624dd3 	.word	0x10624dd3

08006430 <HAL_I2C_EV_IRQHandler>:
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	2300      	movs	r3, #0
 800643a:	61bb      	str	r3, [r7, #24]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006450:	73fb      	strb	r3, [r7, #15]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006458:	73bb      	strb	r3, [r7, #14]
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	2b10      	cmp	r3, #16
 800645e:	d003      	beq.n	8006468 <HAL_I2C_EV_IRQHandler+0x38>
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	2b40      	cmp	r3, #64	; 0x40
 8006464:	f040 80c1 	bne.w	80065ea <HAL_I2C_EV_IRQHandler+0x1ba>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	61fb      	str	r3, [r7, #28]
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10d      	bne.n	800649e <HAL_I2C_EV_IRQHandler+0x6e>
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006488:	d003      	beq.n	8006492 <HAL_I2C_EV_IRQHandler+0x62>
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006490:	d101      	bne.n	8006496 <HAL_I2C_EV_IRQHandler+0x66>
 8006492:	2301      	movs	r3, #1
 8006494:	e000      	b.n	8006498 <HAL_I2C_EV_IRQHandler+0x68>
 8006496:	2300      	movs	r3, #0
 8006498:	2b01      	cmp	r3, #1
 800649a:	f000 8132 	beq.w	8006702 <HAL_I2C_EV_IRQHandler+0x2d2>
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00c      	beq.n	80064c2 <HAL_I2C_EV_IRQHandler+0x92>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	0a5b      	lsrs	r3, r3, #9
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d006      	beq.n	80064c2 <HAL_I2C_EV_IRQHandler+0x92>
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 fc7b 	bl	8007db0 <I2C_ConvertOtherXferOptions>
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fd83 	bl	8006fc6 <I2C_Master_SB>
 80064c0:	e092      	b.n	80065e8 <HAL_I2C_EV_IRQHandler+0x1b8>
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	08db      	lsrs	r3, r3, #3
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d009      	beq.n	80064e2 <HAL_I2C_EV_IRQHandler+0xb2>
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	0a5b      	lsrs	r3, r3, #9
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_I2C_EV_IRQHandler+0xb2>
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fdf9 	bl	80070d2 <I2C_Master_ADD10>
 80064e0:	e082      	b.n	80065e8 <HAL_I2C_EV_IRQHandler+0x1b8>
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	085b      	lsrs	r3, r3, #1
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d009      	beq.n	8006502 <HAL_I2C_EV_IRQHandler+0xd2>
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	0a5b      	lsrs	r3, r3, #9
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_I2C_EV_IRQHandler+0xd2>
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fe13 	bl	8007126 <I2C_Master_ADDR>
 8006500:	e072      	b.n	80065e8 <HAL_I2C_EV_IRQHandler+0x1b8>
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	089b      	lsrs	r3, r3, #2
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d03b      	beq.n	8006586 <HAL_I2C_EV_IRQHandler+0x156>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800651c:	f000 80f3 	beq.w	8006706 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	09db      	lsrs	r3, r3, #7
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00f      	beq.n	800654c <HAL_I2C_EV_IRQHandler+0x11c>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	0a9b      	lsrs	r3, r3, #10
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d009      	beq.n	800654c <HAL_I2C_EV_IRQHandler+0x11c>
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	089b      	lsrs	r3, r3, #2
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d103      	bne.n	800654c <HAL_I2C_EV_IRQHandler+0x11c>
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f9f3 	bl	8006930 <I2C_MasterTransmit_TXE>
 800654a:	e04d      	b.n	80065e8 <HAL_I2C_EV_IRQHandler+0x1b8>
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	089b      	lsrs	r3, r3, #2
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 80d6 	beq.w	8006706 <HAL_I2C_EV_IRQHandler+0x2d6>
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	0a5b      	lsrs	r3, r3, #9
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 80cf 	beq.w	8006706 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	2b21      	cmp	r3, #33	; 0x21
 800656c:	d103      	bne.n	8006576 <HAL_I2C_EV_IRQHandler+0x146>
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fa7a 	bl	8006a68 <I2C_MasterTransmit_BTF>
 8006574:	e0c7      	b.n	8006706 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	f040 80c4 	bne.w	8006706 <HAL_I2C_EV_IRQHandler+0x2d6>
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fae8 	bl	8006b54 <I2C_MemoryTransmit_TXE_BTF>
 8006584:	e0bf      	b.n	8006706 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006594:	f000 80b7 	beq.w	8006706 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	099b      	lsrs	r3, r3, #6
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00f      	beq.n	80065c4 <HAL_I2C_EV_IRQHandler+0x194>
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	0a9b      	lsrs	r3, r3, #10
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d009      	beq.n	80065c4 <HAL_I2C_EV_IRQHandler+0x194>
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	089b      	lsrs	r3, r3, #2
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d103      	bne.n	80065c4 <HAL_I2C_EV_IRQHandler+0x194>
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fb5d 	bl	8006c7c <I2C_MasterReceive_RXNE>
 80065c2:	e011      	b.n	80065e8 <HAL_I2C_EV_IRQHandler+0x1b8>
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	089b      	lsrs	r3, r3, #2
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 809a 	beq.w	8006706 <HAL_I2C_EV_IRQHandler+0x2d6>
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	0a5b      	lsrs	r3, r3, #9
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 8093 	beq.w	8006706 <HAL_I2C_EV_IRQHandler+0x2d6>
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fc06 	bl	8006df2 <I2C_MasterReceive_BTF>
 80065e6:	e08e      	b.n	8006706 <HAL_I2C_EV_IRQHandler+0x2d6>
 80065e8:	e08d      	b.n	8006706 <HAL_I2C_EV_IRQHandler+0x2d6>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d004      	beq.n	80065fc <HAL_I2C_EV_IRQHandler+0x1cc>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	61fb      	str	r3, [r7, #28]
 80065fa:	e007      	b.n	800660c <HAL_I2C_EV_IRQHandler+0x1dc>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	61bb      	str	r3, [r7, #24]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	085b      	lsrs	r3, r3, #1
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d012      	beq.n	800663e <HAL_I2C_EV_IRQHandler+0x20e>
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	0a5b      	lsrs	r3, r3, #9
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00c      	beq.n	800663e <HAL_I2C_EV_IRQHandler+0x20e>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <HAL_I2C_EV_IRQHandler+0x204>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	69b9      	ldr	r1, [r7, #24]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 ffc4 	bl	80075c4 <I2C_Slave_ADDR>
 800663c:	e066      	b.n	800670c <HAL_I2C_EV_IRQHandler+0x2dc>
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	091b      	lsrs	r3, r3, #4
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d009      	beq.n	800665e <HAL_I2C_EV_IRQHandler+0x22e>
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	0a5b      	lsrs	r3, r3, #9
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_I2C_EV_IRQHandler+0x22e>
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fffe 	bl	8007658 <I2C_Slave_STOPF>
 800665c:	e056      	b.n	800670c <HAL_I2C_EV_IRQHandler+0x2dc>
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b21      	cmp	r3, #33	; 0x21
 8006662:	d002      	beq.n	800666a <HAL_I2C_EV_IRQHandler+0x23a>
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	2b29      	cmp	r3, #41	; 0x29
 8006668:	d125      	bne.n	80066b6 <HAL_I2C_EV_IRQHandler+0x286>
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	09db      	lsrs	r3, r3, #7
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00f      	beq.n	8006696 <HAL_I2C_EV_IRQHandler+0x266>
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	0a9b      	lsrs	r3, r3, #10
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <HAL_I2C_EV_IRQHandler+0x266>
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	089b      	lsrs	r3, r3, #2
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d103      	bne.n	8006696 <HAL_I2C_EV_IRQHandler+0x266>
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 feda 	bl	8007448 <I2C_SlaveTransmit_TXE>
 8006694:	e039      	b.n	800670a <HAL_I2C_EV_IRQHandler+0x2da>
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	089b      	lsrs	r3, r3, #2
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d033      	beq.n	800670a <HAL_I2C_EV_IRQHandler+0x2da>
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	0a5b      	lsrs	r3, r3, #9
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d02d      	beq.n	800670a <HAL_I2C_EV_IRQHandler+0x2da>
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 ff07 	bl	80074c2 <I2C_SlaveTransmit_BTF>
 80066b4:	e029      	b.n	800670a <HAL_I2C_EV_IRQHandler+0x2da>
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	099b      	lsrs	r3, r3, #6
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00f      	beq.n	80066e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	0a9b      	lsrs	r3, r3, #10
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d009      	beq.n	80066e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	089b      	lsrs	r3, r3, #2
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d103      	bne.n	80066e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 ff12 	bl	8007504 <I2C_SlaveReceive_RXNE>
 80066e0:	e014      	b.n	800670c <HAL_I2C_EV_IRQHandler+0x2dc>
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	089b      	lsrs	r3, r3, #2
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00e      	beq.n	800670c <HAL_I2C_EV_IRQHandler+0x2dc>
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	0a5b      	lsrs	r3, r3, #9
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d008      	beq.n	800670c <HAL_I2C_EV_IRQHandler+0x2dc>
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 ff40 	bl	8007580 <I2C_SlaveReceive_BTF>
 8006700:	e004      	b.n	800670c <HAL_I2C_EV_IRQHandler+0x2dc>
 8006702:	bf00      	nop
 8006704:	e002      	b.n	800670c <HAL_I2C_EV_IRQHandler+0x2dc>
 8006706:	bf00      	nop
 8006708:	e000      	b.n	800670c <HAL_I2C_EV_IRQHandler+0x2dc>
 800670a:	bf00      	nop
 800670c:	3720      	adds	r7, #32
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_I2C_ER_IRQHandler>:
 8006712:	b580      	push	{r7, lr}
 8006714:	b08a      	sub	sp, #40	; 0x28
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	623b      	str	r3, [r7, #32]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	2300      	movs	r3, #0
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006734:	76fb      	strb	r3, [r7, #27]
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	0a1b      	lsrs	r3, r3, #8
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00e      	beq.n	8006760 <HAL_I2C_ER_IRQHandler+0x4e>
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	0a1b      	lsrs	r3, r3, #8
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d008      	beq.n	8006760 <HAL_I2C_ER_IRQHandler+0x4e>
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	f043 0301 	orr.w	r3, r3, #1
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800675e:	615a      	str	r2, [r3, #20]
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	0a5b      	lsrs	r3, r3, #9
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00e      	beq.n	800678a <HAL_I2C_ER_IRQHandler+0x78>
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	0a1b      	lsrs	r3, r3, #8
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d008      	beq.n	800678a <HAL_I2C_ER_IRQHandler+0x78>
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	f043 0302 	orr.w	r3, r3, #2
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006788:	615a      	str	r2, [r3, #20]
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	0a9b      	lsrs	r3, r3, #10
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d03f      	beq.n	8006816 <HAL_I2C_ER_IRQHandler+0x104>
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	0a1b      	lsrs	r3, r3, #8
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d039      	beq.n	8006816 <HAL_I2C_ER_IRQHandler+0x104>
 80067a2:	7efb      	ldrb	r3, [r7, #27]
 80067a4:	76bb      	strb	r3, [r7, #26]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b4:	74fb      	strb	r3, [r7, #19]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	7ebb      	ldrb	r3, [r7, #26]
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d112      	bne.n	80067e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10f      	bne.n	80067e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80067c8:	7cfb      	ldrb	r3, [r7, #19]
 80067ca:	2b21      	cmp	r3, #33	; 0x21
 80067cc:	d008      	beq.n	80067e0 <HAL_I2C_ER_IRQHandler+0xce>
 80067ce:	7cfb      	ldrb	r3, [r7, #19]
 80067d0:	2b29      	cmp	r3, #41	; 0x29
 80067d2:	d005      	beq.n	80067e0 <HAL_I2C_ER_IRQHandler+0xce>
 80067d4:	7cfb      	ldrb	r3, [r7, #19]
 80067d6:	2b28      	cmp	r3, #40	; 0x28
 80067d8:	d106      	bne.n	80067e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b21      	cmp	r3, #33	; 0x21
 80067de:	d103      	bne.n	80067e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 f869 	bl	80078b8 <I2C_Slave_AF>
 80067e6:	e016      	b.n	8006816 <HAL_I2C_ER_IRQHandler+0x104>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067f0:	615a      	str	r2, [r3, #20]
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	f043 0304 	orr.w	r3, r3, #4
 80067f8:	627b      	str	r3, [r7, #36]	; 0x24
 80067fa:	7efb      	ldrb	r3, [r7, #27]
 80067fc:	2b10      	cmp	r3, #16
 80067fe:	d002      	beq.n	8006806 <HAL_I2C_ER_IRQHandler+0xf4>
 8006800:	7efb      	ldrb	r3, [r7, #27]
 8006802:	2b40      	cmp	r3, #64	; 0x40
 8006804:	d107      	bne.n	8006816 <HAL_I2C_ER_IRQHandler+0x104>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	0adb      	lsrs	r3, r3, #11
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00e      	beq.n	8006840 <HAL_I2C_ER_IRQHandler+0x12e>
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	0a1b      	lsrs	r3, r3, #8
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d008      	beq.n	8006840 <HAL_I2C_ER_IRQHandler+0x12e>
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	f043 0308 	orr.w	r3, r3, #8
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800683e:	615a      	str	r2, [r3, #20]
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	2b00      	cmp	r3, #0
 8006844:	d008      	beq.n	8006858 <HAL_I2C_ER_IRQHandler+0x146>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	431a      	orrs	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	641a      	str	r2, [r3, #64]	; 0x40
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 f8a0 	bl	8007998 <I2C_ITError>
 8006858:	bf00      	nop
 800685a:	3728      	adds	r7, #40	; 0x28
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_I2C_MasterTxCpltCallback>:
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_I2C_MasterRxCpltCallback>:
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_I2C_SlaveTxCpltCallback>:
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_I2C_SlaveRxCpltCallback>:
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_I2C_AddrCallback>:
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	70fb      	strb	r3, [r7, #3]
 80068bc:	4613      	mov	r3, r2
 80068be:	803b      	strh	r3, [r7, #0]
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_I2C_ListenCpltCallback>:
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_I2C_MemTxCpltCallback>:
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_I2C_MemRxCpltCallback>:
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_I2C_ErrorCallback>:
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_I2C_AbortCpltCallback>:
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <I2C_MasterTransmit_TXE>:
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693e:	73fb      	strb	r3, [r7, #15]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006946:	73bb      	strb	r3, [r7, #14]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	60bb      	str	r3, [r7, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006952:	2b00      	cmp	r3, #0
 8006954:	d150      	bne.n	80069f8 <I2C_MasterTransmit_TXE+0xc8>
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	2b21      	cmp	r3, #33	; 0x21
 800695a:	d14d      	bne.n	80069f8 <I2C_MasterTransmit_TXE+0xc8>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b08      	cmp	r3, #8
 8006960:	d01d      	beq.n	800699e <I2C_MasterTransmit_TXE+0x6e>
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2b20      	cmp	r3, #32
 8006966:	d01a      	beq.n	800699e <I2C_MasterTransmit_TXE+0x6e>
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800696e:	d016      	beq.n	800699e <I2C_MasterTransmit_TXE+0x6e>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800697e:	605a      	str	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2211      	movs	r2, #17
 8006984:	631a      	str	r2, [r3, #48]	; 0x30
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2220      	movs	r2, #32
 8006992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff ff62 	bl	8006860 <HAL_I2C_MasterTxCpltCallback>
 800699c:	e060      	b.n	8006a60 <I2C_MasterTransmit_TXE+0x130>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069ac:	605a      	str	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	631a      	str	r2, [r3, #48]	; 0x30
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	d107      	bne.n	80069e8 <I2C_MasterTransmit_TXE+0xb8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff ff7d 	bl	80068e0 <HAL_I2C_MemTxCpltCallback>
 80069e6:	e03b      	b.n	8006a60 <I2C_MasterTransmit_TXE+0x130>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff ff35 	bl	8006860 <HAL_I2C_MasterTxCpltCallback>
 80069f6:	e033      	b.n	8006a60 <I2C_MasterTransmit_TXE+0x130>
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	2b21      	cmp	r3, #33	; 0x21
 80069fc:	d005      	beq.n	8006a0a <I2C_MasterTransmit_TXE+0xda>
 80069fe:	7bbb      	ldrb	r3, [r7, #14]
 8006a00:	2b40      	cmp	r3, #64	; 0x40
 8006a02:	d12d      	bne.n	8006a60 <I2C_MasterTransmit_TXE+0x130>
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	2b22      	cmp	r3, #34	; 0x22
 8006a08:	d12a      	bne.n	8006a60 <I2C_MasterTransmit_TXE+0x130>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d108      	bne.n	8006a26 <I2C_MasterTransmit_TXE+0xf6>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a22:	605a      	str	r2, [r3, #4]
 8006a24:	e01c      	b.n	8006a60 <I2C_MasterTransmit_TXE+0x130>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b40      	cmp	r3, #64	; 0x40
 8006a30:	d103      	bne.n	8006a3a <I2C_MasterTransmit_TXE+0x10a>
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f88e 	bl	8006b54 <I2C_MemoryTransmit_TXE_BTF>
 8006a38:	e012      	b.n	8006a60 <I2C_MasterTransmit_TXE+0x130>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	781a      	ldrb	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	611a      	str	r2, [r3, #16]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	625a      	str	r2, [r3, #36]	; 0x24
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a5e:	e7ff      	b.n	8006a60 <I2C_MasterTransmit_TXE+0x130>
 8006a60:	bf00      	nop
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <I2C_MasterTransmit_BTF>:
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b21      	cmp	r3, #33	; 0x21
 8006a80:	d164      	bne.n	8006b4c <I2C_MasterTransmit_BTF+0xe4>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d012      	beq.n	8006ab2 <I2C_MasterTransmit_BTF+0x4a>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	781a      	ldrb	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	611a      	str	r2, [r3, #16]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	625a      	str	r2, [r3, #36]	; 0x24
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ab0:	e04c      	b.n	8006b4c <I2C_MasterTransmit_BTF+0xe4>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d01d      	beq.n	8006af4 <I2C_MasterTransmit_BTF+0x8c>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d01a      	beq.n	8006af4 <I2C_MasterTransmit_BTF+0x8c>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ac4:	d016      	beq.n	8006af4 <I2C_MasterTransmit_BTF+0x8c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ad4:	605a      	str	r2, [r3, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2211      	movs	r2, #17
 8006ada:	631a      	str	r2, [r3, #48]	; 0x30
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff feb7 	bl	8006860 <HAL_I2C_MasterTxCpltCallback>
 8006af2:	e02b      	b.n	8006b4c <I2C_MasterTransmit_BTF+0xe4>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b02:	605a      	str	r2, [r3, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	631a      	str	r2, [r3, #48]	; 0x30
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b40      	cmp	r3, #64	; 0x40
 8006b2c:	d107      	bne.n	8006b3e <I2C_MasterTransmit_BTF+0xd6>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff fed2 	bl	80068e0 <HAL_I2C_MemTxCpltCallback>
 8006b3c:	e006      	b.n	8006b4c <I2C_MasterTransmit_BTF+0xe4>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff fe8a 	bl	8006860 <HAL_I2C_MasterTxCpltCallback>
 8006b4c:	bf00      	nop
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <I2C_MemoryTransmit_TXE_BTF>:
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b62:	73fb      	strb	r3, [r7, #15]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d11d      	bne.n	8006ba8 <I2C_MemoryTransmit_TXE_BTF+0x54>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d10b      	bne.n	8006b8c <I2C_MemoryTransmit_TXE_BTF+0x38>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	611a      	str	r2, [r3, #16]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b84:	1c9a      	adds	r2, r3, #2
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	651a      	str	r2, [r3, #80]	; 0x50
 8006b8a:	e073      	b.n	8006c74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	121b      	asrs	r3, r3, #8
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	611a      	str	r2, [r3, #16]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	651a      	str	r2, [r3, #80]	; 0x50
 8006ba6:	e065      	b.n	8006c74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d10b      	bne.n	8006bc8 <I2C_MemoryTransmit_TXE_BTF+0x74>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	611a      	str	r2, [r3, #16]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	651a      	str	r2, [r3, #80]	; 0x50
 8006bc6:	e055      	b.n	8006c74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d151      	bne.n	8006c74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b22      	cmp	r3, #34	; 0x22
 8006bd4:	d10d      	bne.n	8006bf2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	651a      	str	r2, [r3, #80]	; 0x50
 8006bf0:	e040      	b.n	8006c74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d015      	beq.n	8006c28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	2b21      	cmp	r3, #33	; 0x21
 8006c00:	d112      	bne.n	8006c28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	781a      	ldrb	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	611a      	str	r2, [r3, #16]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	625a      	str	r2, [r3, #36]	; 0x24
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c26:	e025      	b.n	8006c74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d120      	bne.n	8006c74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	2b21      	cmp	r3, #33	; 0x21
 8006c36:	d11d      	bne.n	8006c74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c46:	605a      	str	r2, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff fe36 	bl	80068e0 <HAL_I2C_MemTxCpltCallback>
 8006c74:	bf00      	nop
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <I2C_MasterReceive_RXNE>:
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b22      	cmp	r3, #34	; 0x22
 8006c8e:	f040 80ac 	bne.w	8006dea <I2C_MasterReceive_RXNE+0x16e>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d921      	bls.n	8006ce4 <I2C_MasterReceive_RXNE+0x68>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691a      	ldr	r2, [r3, #16]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	b2d2      	uxtb	r2, r2
 8006cac:	701a      	strb	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	625a      	str	r2, [r3, #36]	; 0x24
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	f040 808c 	bne.w	8006dea <I2C_MasterReceive_RXNE+0x16e>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce0:	605a      	str	r2, [r3, #4]
 8006ce2:	e082      	b.n	8006dea <I2C_MasterReceive_RXNE+0x16e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d075      	beq.n	8006dd8 <I2C_MasterReceive_RXNE+0x15c>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d002      	beq.n	8006cf8 <I2C_MasterReceive_RXNE+0x7c>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d16f      	bne.n	8006dd8 <I2C_MasterReceive_RXNE+0x15c>
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 f827 	bl	8007d4c <I2C_WaitOnSTOPRequestThroughIT>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d142      	bne.n	8006d8a <I2C_MasterReceive_RXNE+0x10e>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d22:	605a      	str	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	625a      	str	r2, [r3, #36]	; 0x24
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	3b01      	subs	r3, #1
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b40      	cmp	r3, #64	; 0x40
 8006d5c:	d10a      	bne.n	8006d74 <I2C_MasterReceive_RXNE+0xf8>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff fdc1 	bl	80068f4 <HAL_I2C_MemRxCpltCallback>
 8006d72:	e03a      	b.n	8006dea <I2C_MasterReceive_RXNE+0x16e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2212      	movs	r2, #18
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff fd76 	bl	8006874 <HAL_I2C_MasterRxCpltCallback>
 8006d88:	e02f      	b.n	8006dea <I2C_MasterReceive_RXNE+0x16e>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d98:	605a      	str	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	b2d2      	uxtb	r2, r2
 8006da6:	701a      	strb	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	625a      	str	r2, [r3, #36]	; 0x24
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7ff fd99 	bl	8006908 <HAL_I2C_ErrorCallback>
 8006dd6:	e008      	b.n	8006dea <I2C_MasterReceive_RXNE+0x16e>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de6:	605a      	str	r2, [r3, #4]
 8006de8:	e7ff      	b.n	8006dea <I2C_MasterReceive_RXNE+0x16e>
 8006dea:	bf00      	nop
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <I2C_MasterReceive_BTF>:
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d11b      	bne.n	8006e42 <I2C_MasterReceive_BTF+0x50>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e18:	605a      	str	r2, [r3, #4]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	691a      	ldr	r2, [r3, #16]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	625a      	str	r2, [r3, #36]	; 0x24
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e40:	e0bd      	b.n	8006fbe <I2C_MasterReceive_BTF+0x1cc>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d129      	bne.n	8006ea0 <I2C_MasterReceive_BTF+0xae>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e5a:	605a      	str	r2, [r3, #4]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d00a      	beq.n	8006e78 <I2C_MasterReceive_BTF+0x86>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d007      	beq.n	8006e78 <I2C_MasterReceive_BTF+0x86>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691a      	ldr	r2, [r3, #16]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	625a      	str	r2, [r3, #36]	; 0x24
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e9e:	e08e      	b.n	8006fbe <I2C_MasterReceive_BTF+0x1cc>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d176      	bne.n	8006f98 <I2C_MasterReceive_BTF+0x1a6>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d002      	beq.n	8006eb6 <I2C_MasterReceive_BTF+0xc4>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b10      	cmp	r3, #16
 8006eb4:	d108      	bne.n	8006ec8 <I2C_MasterReceive_BTF+0xd6>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	e019      	b.n	8006efc <I2C_MasterReceive_BTF+0x10a>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d002      	beq.n	8006ed4 <I2C_MasterReceive_BTF+0xe2>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d108      	bne.n	8006ee6 <I2C_MasterReceive_BTF+0xf4>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	e00a      	b.n	8006efc <I2C_MasterReceive_BTF+0x10a>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b10      	cmp	r3, #16
 8006eea:	d007      	beq.n	8006efc <I2C_MasterReceive_BTF+0x10a>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	625a      	str	r2, [r3, #36]	; 0x24
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	b2d2      	uxtb	r2, r2
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	625a      	str	r2, [r3, #36]	; 0x24
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	3b01      	subs	r3, #1
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006f56:	605a      	str	r2, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b40      	cmp	r3, #64	; 0x40
 8006f6a:	d10a      	bne.n	8006f82 <I2C_MasterReceive_BTF+0x190>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff fcba 	bl	80068f4 <HAL_I2C_MemRxCpltCallback>
 8006f80:	e01d      	b.n	8006fbe <I2C_MasterReceive_BTF+0x1cc>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2212      	movs	r2, #18
 8006f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff fc6f 	bl	8006874 <HAL_I2C_MasterRxCpltCallback>
 8006f96:	e012      	b.n	8006fbe <I2C_MasterReceive_BTF+0x1cc>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691a      	ldr	r2, [r3, #16]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	625a      	str	r2, [r3, #36]	; 0x24
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fbe:	bf00      	nop
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <I2C_Master_SB>:
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b40      	cmp	r3, #64	; 0x40
 8006fd8:	d117      	bne.n	800700a <I2C_Master_SB+0x44>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d109      	bne.n	8006ff6 <I2C_Master_SB+0x30>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	461a      	mov	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ff2:	611a      	str	r2, [r3, #16]
 8006ff4:	e067      	b.n	80070c6 <I2C_Master_SB+0x100>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	f043 0301 	orr.w	r3, r3, #1
 8007000:	b2da      	uxtb	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	611a      	str	r2, [r3, #16]
 8007008:	e05d      	b.n	80070c6 <I2C_Master_SB+0x100>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007012:	d133      	bne.n	800707c <I2C_Master_SB+0xb6>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b21      	cmp	r3, #33	; 0x21
 800701e:	d109      	bne.n	8007034 <I2C_Master_SB+0x6e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007024:	b2db      	uxtb	r3, r3
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007030:	611a      	str	r2, [r3, #16]
 8007032:	e008      	b.n	8007046 <I2C_Master_SB+0x80>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007038:	b2db      	uxtb	r3, r3
 800703a:	f043 0301 	orr.w	r3, r3, #1
 800703e:	b2da      	uxtb	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	611a      	str	r2, [r3, #16]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704a:	2b00      	cmp	r3, #0
 800704c:	d004      	beq.n	8007058 <I2C_Master_SB+0x92>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007054:	2b00      	cmp	r3, #0
 8007056:	d108      	bne.n	800706a <I2C_Master_SB+0xa4>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705c:	2b00      	cmp	r3, #0
 800705e:	d032      	beq.n	80070c6 <I2C_Master_SB+0x100>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d02d      	beq.n	80070c6 <I2C_Master_SB+0x100>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007078:	605a      	str	r2, [r3, #4]
 800707a:	e024      	b.n	80070c6 <I2C_Master_SB+0x100>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10e      	bne.n	80070a2 <I2C_Master_SB+0xdc>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007088:	b29b      	uxth	r3, r3
 800708a:	11db      	asrs	r3, r3, #7
 800708c:	b2db      	uxtb	r3, r3
 800708e:	f003 0306 	and.w	r3, r3, #6
 8007092:	b2db      	uxtb	r3, r3
 8007094:	f063 030f 	orn	r3, r3, #15
 8007098:	b2da      	uxtb	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	611a      	str	r2, [r3, #16]
 80070a0:	e011      	b.n	80070c6 <I2C_Master_SB+0x100>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d10d      	bne.n	80070c6 <I2C_Master_SB+0x100>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	11db      	asrs	r3, r3, #7
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f003 0306 	and.w	r3, r3, #6
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	f063 030e 	orn	r3, r3, #14
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	611a      	str	r2, [r3, #16]
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <I2C_Master_ADD10>:
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	611a      	str	r2, [r3, #16]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d004      	beq.n	80070f8 <I2C_Master_ADD10+0x26>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d108      	bne.n	800710a <I2C_Master_ADD10+0x38>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00c      	beq.n	800711a <I2C_Master_ADD10+0x48>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d007      	beq.n	800711a <I2C_Master_ADD10+0x48>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007118:	605a      	str	r2, [r3, #4]
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <I2C_Master_ADDR>:
 8007126:	b480      	push	{r7}
 8007128:	b091      	sub	sp, #68	; 0x44
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007134:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	63bb      	str	r3, [r7, #56]	; 0x38
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	637b      	str	r3, [r7, #52]	; 0x34
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b22      	cmp	r3, #34	; 0x22
 800714e:	f040 8169 	bne.w	8007424 <I2C_Master_ADDR+0x2fe>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10f      	bne.n	800717a <I2C_Master_ADDR+0x54>
 800715a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	d10b      	bne.n	800717a <I2C_Master_ADDR+0x54>
 8007162:	2300      	movs	r3, #0
 8007164:	633b      	str	r3, [r7, #48]	; 0x30
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	633b      	str	r3, [r7, #48]	; 0x30
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	633b      	str	r3, [r7, #48]	; 0x30
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	e160      	b.n	800743c <I2C_Master_ADDR+0x316>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717e:	2b00      	cmp	r3, #0
 8007180:	d11d      	bne.n	80071be <I2C_Master_ADDR+0x98>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800718a:	d118      	bne.n	80071be <I2C_Master_ADDR+0x98>
 800718c:	2300      	movs	r3, #0
 800718e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	651a      	str	r2, [r3, #80]	; 0x50
 80071bc:	e13e      	b.n	800743c <I2C_Master_ADDR+0x316>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d113      	bne.n	80071f0 <I2C_Master_ADDR+0xca>
 80071c8:	2300      	movs	r3, #0
 80071ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	62bb      	str	r3, [r7, #40]	; 0x28
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e115      	b.n	800741c <I2C_Master_ADDR+0x2f6>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	f040 808a 	bne.w	8007310 <I2C_Master_ADDR+0x1ea>
 80071fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007202:	d137      	bne.n	8007274 <I2C_Master_ADDR+0x14e>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800721e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007222:	d113      	bne.n	800724c <I2C_Master_ADDR+0x126>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	2300      	movs	r3, #0
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	e0e7      	b.n	800741c <I2C_Master_ADDR+0x2f6>
 800724c:	2300      	movs	r3, #0
 800724e:	623b      	str	r3, [r7, #32]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	623b      	str	r3, [r7, #32]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	623b      	str	r3, [r7, #32]
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	e0d3      	b.n	800741c <I2C_Master_ADDR+0x2f6>
 8007274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007276:	2b08      	cmp	r3, #8
 8007278:	d02e      	beq.n	80072d8 <I2C_Master_ADDR+0x1b2>
 800727a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727c:	2b20      	cmp	r3, #32
 800727e:	d02b      	beq.n	80072d8 <I2C_Master_ADDR+0x1b2>
 8007280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007282:	2b12      	cmp	r3, #18
 8007284:	d102      	bne.n	800728c <I2C_Master_ADDR+0x166>
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	2b01      	cmp	r3, #1
 800728a:	d125      	bne.n	80072d8 <I2C_Master_ADDR+0x1b2>
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	2b04      	cmp	r3, #4
 8007290:	d00e      	beq.n	80072b0 <I2C_Master_ADDR+0x18a>
 8007292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007294:	2b02      	cmp	r3, #2
 8007296:	d00b      	beq.n	80072b0 <I2C_Master_ADDR+0x18a>
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	2b10      	cmp	r3, #16
 800729c:	d008      	beq.n	80072b0 <I2C_Master_ADDR+0x18a>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	e007      	b.n	80072c0 <I2C_Master_ADDR+0x19a>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	2300      	movs	r3, #0
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	61fb      	str	r3, [r7, #28]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	61fb      	str	r3, [r7, #28]
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	e0a1      	b.n	800741c <I2C_Master_ADDR+0x2f6>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	2300      	movs	r3, #0
 80072ea:	61bb      	str	r3, [r7, #24]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	61bb      	str	r3, [r7, #24]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	61bb      	str	r3, [r7, #24]
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	e085      	b.n	800741c <I2C_Master_ADDR+0x2f6>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007314:	b29b      	uxth	r3, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d14d      	bne.n	80073b6 <I2C_Master_ADDR+0x290>
 800731a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731c:	2b04      	cmp	r3, #4
 800731e:	d016      	beq.n	800734e <I2C_Master_ADDR+0x228>
 8007320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007322:	2b02      	cmp	r3, #2
 8007324:	d013      	beq.n	800734e <I2C_Master_ADDR+0x228>
 8007326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007328:	2b10      	cmp	r3, #16
 800732a:	d010      	beq.n	800734e <I2C_Master_ADDR+0x228>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	e007      	b.n	800735e <I2C_Master_ADDR+0x238>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800736c:	d117      	bne.n	800739e <I2C_Master_ADDR+0x278>
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007374:	d00b      	beq.n	800738e <I2C_Master_ADDR+0x268>
 8007376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007378:	2b01      	cmp	r3, #1
 800737a:	d008      	beq.n	800738e <I2C_Master_ADDR+0x268>
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	2b08      	cmp	r3, #8
 8007380:	d005      	beq.n	800738e <I2C_Master_ADDR+0x268>
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	2b10      	cmp	r3, #16
 8007386:	d002      	beq.n	800738e <I2C_Master_ADDR+0x268>
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	2b20      	cmp	r3, #32
 800738c:	d107      	bne.n	800739e <I2C_Master_ADDR+0x278>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800739c:	605a      	str	r2, [r3, #4]
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	617b      	str	r3, [r7, #20]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	e032      	b.n	800741c <I2C_Master_ADDR+0x2f6>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073d4:	d117      	bne.n	8007406 <I2C_Master_ADDR+0x2e0>
 80073d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073dc:	d00b      	beq.n	80073f6 <I2C_Master_ADDR+0x2d0>
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d008      	beq.n	80073f6 <I2C_Master_ADDR+0x2d0>
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	2b08      	cmp	r3, #8
 80073e8:	d005      	beq.n	80073f6 <I2C_Master_ADDR+0x2d0>
 80073ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ec:	2b10      	cmp	r3, #16
 80073ee:	d002      	beq.n	80073f6 <I2C_Master_ADDR+0x2d0>
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	d107      	bne.n	8007406 <I2C_Master_ADDR+0x2e0>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007404:	605a      	str	r2, [r3, #4]
 8007406:	2300      	movs	r3, #0
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	613b      	str	r3, [r7, #16]
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	651a      	str	r2, [r3, #80]	; 0x50
 8007422:	e00b      	b.n	800743c <I2C_Master_ADDR+0x316>
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	e7ff      	b.n	800743c <I2C_Master_ADDR+0x316>
 800743c:	bf00      	nop
 800743e:	3744      	adds	r7, #68	; 0x44
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <I2C_SlaveTransmit_TXE>:
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007456:	73fb      	strb	r3, [r7, #15]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745c:	b29b      	uxth	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d02b      	beq.n	80074ba <I2C_SlaveTransmit_TXE+0x72>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	781a      	ldrb	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	611a      	str	r2, [r3, #16]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	625a      	str	r2, [r3, #36]	; 0x24
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800747c:	b29b      	uxth	r3, r3
 800747e:	3b01      	subs	r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748a:	b29b      	uxth	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d114      	bne.n	80074ba <I2C_SlaveTransmit_TXE+0x72>
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	2b29      	cmp	r3, #41	; 0x29
 8007494:	d111      	bne.n	80074ba <I2C_SlaveTransmit_TXE+0x72>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a4:	605a      	str	r2, [r3, #4]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2221      	movs	r2, #33	; 0x21
 80074aa:	631a      	str	r2, [r3, #48]	; 0x30
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2228      	movs	r2, #40	; 0x28
 80074b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff f9e7 	bl	8006888 <HAL_I2C_SlaveTxCpltCallback>
 80074ba:	bf00      	nop
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <I2C_SlaveTransmit_BTF>:
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d011      	beq.n	80074f8 <I2C_SlaveTransmit_BTF+0x36>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	781a      	ldrb	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	611a      	str	r2, [r3, #16]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	625a      	str	r2, [r3, #36]	; 0x24
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	3b01      	subs	r3, #1
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <I2C_SlaveReceive_RXNE>:
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007512:	73fb      	strb	r3, [r7, #15]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007518:	b29b      	uxth	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d02c      	beq.n	8007578 <I2C_SlaveReceive_RXNE+0x74>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	701a      	strb	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	625a      	str	r2, [r3, #36]	; 0x24
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800753a:	b29b      	uxth	r3, r3
 800753c:	3b01      	subs	r3, #1
 800753e:	b29a      	uxth	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007548:	b29b      	uxth	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d114      	bne.n	8007578 <I2C_SlaveReceive_RXNE+0x74>
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	2b2a      	cmp	r3, #42	; 0x2a
 8007552:	d111      	bne.n	8007578 <I2C_SlaveReceive_RXNE+0x74>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007562:	605a      	str	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2222      	movs	r2, #34	; 0x22
 8007568:	631a      	str	r2, [r3, #48]	; 0x30
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2228      	movs	r2, #40	; 0x28
 800756e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff f992 	bl	800689c <HAL_I2C_SlaveRxCpltCallback>
 8007578:	bf00      	nop
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <I2C_SlaveReceive_BTF>:
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758c:	b29b      	uxth	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d012      	beq.n	80075b8 <I2C_SlaveReceive_BTF+0x38>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691a      	ldr	r2, [r3, #16]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	b2d2      	uxtb	r2, r2
 800759e:	701a      	strb	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	625a      	str	r2, [r3, #36]	; 0x24
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	3b01      	subs	r3, #1
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <I2C_Slave_ADDR>:
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075de:	2b28      	cmp	r3, #40	; 0x28
 80075e0:	d127      	bne.n	8007632 <I2C_Slave_ADDR+0x6e>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f0:	605a      	str	r2, [r3, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	089b      	lsrs	r3, r3, #2
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <I2C_Slave_ADDR+0x3e>
 80075fe:	2301      	movs	r3, #1
 8007600:	73fb      	strb	r3, [r7, #15]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	09db      	lsrs	r3, r3, #7
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d103      	bne.n	8007616 <I2C_Slave_ADDR+0x52>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	81bb      	strh	r3, [r7, #12]
 8007614:	e002      	b.n	800761c <I2C_Slave_ADDR+0x58>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	81bb      	strh	r3, [r7, #12]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007624:	89ba      	ldrh	r2, [r7, #12]
 8007626:	7bfb      	ldrb	r3, [r7, #15]
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff f940 	bl	80068b0 <HAL_I2C_AddrCallback>
 8007630:	e00e      	b.n	8007650 <I2C_Slave_ADDR+0x8c>
 8007632:	2300      	movs	r3, #0
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	60bb      	str	r3, [r7, #8]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007650:	bf00      	nop
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <I2C_Slave_STOPF>:
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007666:	73fb      	strb	r3, [r7, #15]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007676:	605a      	str	r2, [r3, #4]
 8007678:	2300      	movs	r3, #0
 800767a:	60bb      	str	r3, [r7, #8]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	60bb      	str	r3, [r7, #8]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f042 0201 	orr.w	r2, r2, #1
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076b4:	d172      	bne.n	800779c <I2C_Slave_STOPF+0x144>
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	2b22      	cmp	r3, #34	; 0x22
 80076ba:	d002      	beq.n	80076c2 <I2C_Slave_STOPF+0x6a>
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
 80076be:	2b2a      	cmp	r3, #42	; 0x2a
 80076c0:	d135      	bne.n	800772e <I2C_Slave_STOPF+0xd6>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <I2C_Slave_STOPF+0x8e>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	f043 0204 	orr.w	r2, r3, #4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	641a      	str	r2, [r3, #64]	; 0x40
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076f4:	605a      	str	r2, [r3, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe fa12 	bl	8005b24 <HAL_DMA_GetState>
 8007700:	4603      	mov	r3, r0
 8007702:	2b01      	cmp	r3, #1
 8007704:	d049      	beq.n	800779a <I2C_Slave_STOPF+0x142>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770a:	4a69      	ldr	r2, [pc, #420]	; (80078b0 <I2C_Slave_STOPF+0x258>)
 800770c:	651a      	str	r2, [r3, #80]	; 0x50
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe f85a 	bl	80057cc <HAL_DMA_Abort_IT>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d03d      	beq.n	800779a <I2C_Slave_STOPF+0x142>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007728:	4610      	mov	r0, r2
 800772a:	4798      	blx	r3
 800772c:	e035      	b.n	800779a <I2C_Slave_STOPF+0x142>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	b29a      	uxth	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007740:	b29b      	uxth	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <I2C_Slave_STOPF+0xfa>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	f043 0204 	orr.w	r2, r3, #4
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	641a      	str	r2, [r3, #64]	; 0x40
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007760:	605a      	str	r2, [r3, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe f9dc 	bl	8005b24 <HAL_DMA_GetState>
 800776c:	4603      	mov	r3, r0
 800776e:	2b01      	cmp	r3, #1
 8007770:	d014      	beq.n	800779c <I2C_Slave_STOPF+0x144>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007776:	4a4e      	ldr	r2, [pc, #312]	; (80078b0 <I2C_Slave_STOPF+0x258>)
 8007778:	651a      	str	r2, [r3, #80]	; 0x50
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe f824 	bl	80057cc <HAL_DMA_Abort_IT>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d008      	beq.n	800779c <I2C_Slave_STOPF+0x144>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007794:	4610      	mov	r0, r2
 8007796:	4798      	blx	r3
 8007798:	e000      	b.n	800779c <I2C_Slave_STOPF+0x144>
 800779a:	bf00      	nop
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d03e      	beq.n	8007824 <I2C_Slave_STOPF+0x1cc>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d112      	bne.n	80077da <I2C_Slave_STOPF+0x182>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	691a      	ldr	r2, [r3, #16]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	b2d2      	uxtb	r2, r2
 80077c0:	701a      	strb	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	625a      	str	r2, [r3, #36]	; 0x24
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	3b01      	subs	r3, #1
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d112      	bne.n	800780e <I2C_Slave_STOPF+0x1b6>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	b2d2      	uxtb	r2, r2
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	625a      	str	r2, [r3, #36]	; 0x24
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007804:	b29b      	uxth	r3, r3
 8007806:	3b01      	subs	r3, #1
 8007808:	b29a      	uxth	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007812:	b29b      	uxth	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d005      	beq.n	8007824 <I2C_Slave_STOPF+0x1cc>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	f043 0204 	orr.w	r2, r3, #4
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	641a      	str	r2, [r3, #64]	; 0x40
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <I2C_Slave_STOPF+0x1dc>
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f8b3 	bl	8007998 <I2C_ITError>
 8007832:	e039      	b.n	80078a8 <I2C_Slave_STOPF+0x250>
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	2b2a      	cmp	r3, #42	; 0x2a
 8007838:	d109      	bne.n	800784e <I2C_Slave_STOPF+0x1f6>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	631a      	str	r2, [r3, #48]	; 0x30
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2228      	movs	r2, #40	; 0x28
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff f827 	bl	800689c <HAL_I2C_SlaveRxCpltCallback>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b28      	cmp	r3, #40	; 0x28
 8007858:	d111      	bne.n	800787e <I2C_Slave_STOPF+0x226>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a15      	ldr	r2, [pc, #84]	; (80078b4 <I2C_Slave_STOPF+0x25c>)
 800785e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	631a      	str	r2, [r3, #48]	; 0x30
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2220      	movs	r2, #32
 800786a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7ff f828 	bl	80068cc <HAL_I2C_ListenCpltCallback>
 800787c:	e014      	b.n	80078a8 <I2C_Slave_STOPF+0x250>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007882:	2b22      	cmp	r3, #34	; 0x22
 8007884:	d002      	beq.n	800788c <I2C_Slave_STOPF+0x234>
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	2b22      	cmp	r3, #34	; 0x22
 800788a:	d10d      	bne.n	80078a8 <I2C_Slave_STOPF+0x250>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	631a      	str	r2, [r3, #48]	; 0x30
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2220      	movs	r2, #32
 8007896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7fe fffa 	bl	800689c <HAL_I2C_SlaveRxCpltCallback>
 80078a8:	bf00      	nop
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	08007bfd 	.word	0x08007bfd
 80078b4:	ffff0000 	.word	0xffff0000

080078b8 <I2C_Slave_AF>:
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c6:	73fb      	strb	r3, [r7, #15]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078cc:	60bb      	str	r3, [r7, #8]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b08      	cmp	r3, #8
 80078d2:	d002      	beq.n	80078da <I2C_Slave_AF+0x22>
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d129      	bne.n	800792e <I2C_Slave_AF+0x76>
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	2b28      	cmp	r3, #40	; 0x28
 80078de:	d126      	bne.n	800792e <I2C_Slave_AF+0x76>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a2c      	ldr	r2, [pc, #176]	; (8007994 <I2C_Slave_AF+0xdc>)
 80078e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078f4:	605a      	str	r2, [r3, #4]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80078fe:	615a      	str	r2, [r3, #20]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	631a      	str	r2, [r3, #48]	; 0x30
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7fe ffd0 	bl	80068cc <HAL_I2C_ListenCpltCallback>
 800792c:	e02e      	b.n	800798c <I2C_Slave_AF+0xd4>
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	2b21      	cmp	r3, #33	; 0x21
 8007932:	d126      	bne.n	8007982 <I2C_Slave_AF+0xca>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a17      	ldr	r2, [pc, #92]	; (8007994 <I2C_Slave_AF+0xdc>)
 8007938:	62da      	str	r2, [r3, #44]	; 0x2c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2221      	movs	r2, #33	; 0x21
 800793e:	631a      	str	r2, [r3, #48]	; 0x30
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2220      	movs	r2, #32
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800795e:	605a      	str	r2, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007968:	615a      	str	r2, [r3, #20]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007978:	601a      	str	r2, [r3, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fe ff84 	bl	8006888 <HAL_I2C_SlaveTxCpltCallback>
 8007980:	e004      	b.n	800798c <I2C_Slave_AF+0xd4>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800798a:	615a      	str	r2, [r3, #20]
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	ffff0000 	.word	0xffff0000

08007998 <I2C_ITError>:
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a6:	73fb      	strb	r3, [r7, #15]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079ae:	73bb      	strb	r3, [r7, #14]
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	2b10      	cmp	r3, #16
 80079b4:	d002      	beq.n	80079bc <I2C_ITError+0x24>
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b40      	cmp	r3, #64	; 0x40
 80079ba:	d10a      	bne.n	80079d2 <I2C_ITError+0x3a>
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	2b22      	cmp	r3, #34	; 0x22
 80079c0:	d107      	bne.n	80079d2 <I2C_ITError+0x3a>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80079d8:	2b28      	cmp	r3, #40	; 0x28
 80079da:	d107      	bne.n	80079ec <I2C_ITError+0x54>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	631a      	str	r2, [r3, #48]	; 0x30
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2228      	movs	r2, #40	; 0x28
 80079e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80079ea:	e015      	b.n	8007a18 <I2C_ITError+0x80>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079fa:	d00a      	beq.n	8007a12 <I2C_ITError+0x7a>
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	2b60      	cmp	r3, #96	; 0x60
 8007a00:	d007      	beq.n	8007a12 <I2C_ITError+0x7a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	631a      	str	r2, [r3, #48]	; 0x30
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a26:	d162      	bne.n	8007aee <I2C_ITError+0x156>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a36:	605a      	str	r2, [r3, #4]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d020      	beq.n	8007a88 <I2C_ITError+0xf0>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4a:	4a6a      	ldr	r2, [pc, #424]	; (8007bf4 <I2C_ITError+0x25c>)
 8007a4c:	651a      	str	r2, [r3, #80]	; 0x50
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fd feba 	bl	80057cc <HAL_DMA_Abort_IT>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 8089 	beq.w	8007b72 <I2C_ITError+0x1da>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0201 	bic.w	r2, r2, #1
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a82:	4610      	mov	r0, r2
 8007a84:	4798      	blx	r3
 8007a86:	e074      	b.n	8007b72 <I2C_ITError+0x1da>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8c:	4a59      	ldr	r2, [pc, #356]	; (8007bf4 <I2C_ITError+0x25c>)
 8007a8e:	651a      	str	r2, [r3, #80]	; 0x50
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fd fe99 	bl	80057cc <HAL_DMA_Abort_IT>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d068      	beq.n	8007b72 <I2C_ITError+0x1da>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aaa:	2b40      	cmp	r3, #64	; 0x40
 8007aac:	d10b      	bne.n	8007ac6 <I2C_ITError+0x12e>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	625a      	str	r2, [r3, #36]	; 0x24
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0201 	bic.w	r2, r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4798      	blx	r3
 8007aec:	e041      	b.n	8007b72 <I2C_ITError+0x1da>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b60      	cmp	r3, #96	; 0x60
 8007af8:	d125      	bne.n	8007b46 <I2C_ITError+0x1ae>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	641a      	str	r2, [r3, #64]	; 0x40
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b12:	2b40      	cmp	r3, #64	; 0x40
 8007b14:	d10b      	bne.n	8007b2e <I2C_ITError+0x196>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	b2d2      	uxtb	r2, r2
 8007b22:	701a      	strb	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	625a      	str	r2, [r3, #36]	; 0x24
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 0201 	bic.w	r2, r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7fe feec 	bl	800691c <HAL_I2C_AbortCpltCallback>
 8007b44:	e015      	b.n	8007b72 <I2C_ITError+0x1da>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b50:	2b40      	cmp	r3, #64	; 0x40
 8007b52:	d10b      	bne.n	8007b6c <I2C_ITError+0x1d4>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	691a      	ldr	r2, [r3, #16]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	b2d2      	uxtb	r2, r2
 8007b60:	701a      	strb	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	1c5a      	adds	r2, r3, #1
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	625a      	str	r2, [r3, #36]	; 0x24
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7fe fecb 	bl	8006908 <HAL_I2C_ErrorCallback>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	60bb      	str	r3, [r7, #8]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10e      	bne.n	8007ba0 <I2C_ITError+0x208>
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d109      	bne.n	8007ba0 <I2C_ITError+0x208>
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f003 0304 	and.w	r3, r3, #4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d104      	bne.n	8007ba0 <I2C_ITError+0x208>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d007      	beq.n	8007bb0 <I2C_ITError+0x218>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bae:	605a      	str	r2, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb6:	73fb      	strb	r3, [r7, #15]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d113      	bne.n	8007bec <I2C_ITError+0x254>
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	2b28      	cmp	r3, #40	; 0x28
 8007bc8:	d110      	bne.n	8007bec <I2C_ITError+0x254>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a0a      	ldr	r2, [pc, #40]	; (8007bf8 <I2C_ITError+0x260>)
 8007bce:	62da      	str	r2, [r3, #44]	; 0x2c
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	631a      	str	r2, [r3, #48]	; 0x30
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7fe fe70 	bl	80068cc <HAL_I2C_ListenCpltCallback>
 8007bec:	bf00      	nop
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	08007bfd 	.word	0x08007bfd
 8007bf8:	ffff0000 	.word	0xffff0000

08007bfc <I2C_DMAAbort>:
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c14:	74fb      	strb	r3, [r7, #19]
 8007c16:	4b4b      	ldr	r3, [pc, #300]	; (8007d44 <I2C_DMAAbort+0x148>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	08db      	lsrs	r3, r3, #3
 8007c1c:	4a4a      	ldr	r2, [pc, #296]	; (8007d48 <I2C_DMAAbort+0x14c>)
 8007c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c22:	0a1a      	lsrs	r2, r3, #8
 8007c24:	4613      	mov	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	00da      	lsls	r2, r3, #3
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d106      	bne.n	8007c44 <I2C_DMAAbort+0x48>
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	f043 0220 	orr.w	r2, r3, #32
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	641a      	str	r2, [r3, #64]	; 0x40
 8007c42:	e00a      	b.n	8007c5a <I2C_DMAAbort+0x5e>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c58:	d0ea      	beq.n	8007c30 <I2C_DMAAbort+0x34>
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <I2C_DMAAbort+0x6e>
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	2200      	movs	r2, #0
 8007c68:	63da      	str	r2, [r3, #60]	; 0x3c
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <I2C_DMAAbort+0x7e>
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	2200      	movs	r2, #0
 8007c78:	63da      	str	r2, [r3, #60]	; 0x3c
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c88:	601a      	str	r2, [r3, #0]
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <I2C_DMAAbort+0xa4>
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	651a      	str	r2, [r3, #80]	; 0x50
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d003      	beq.n	8007cb0 <I2C_DMAAbort+0xb4>
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	2200      	movs	r2, #0
 8007cae:	651a      	str	r2, [r3, #80]	; 0x50
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0201 	bic.w	r2, r2, #1
 8007cbe:	601a      	str	r2, [r3, #0]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b60      	cmp	r3, #96	; 0x60
 8007cca:	d10e      	bne.n	8007cea <I2C_DMAAbort+0xee>
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	641a      	str	r2, [r3, #64]	; 0x40
 8007ce2:	6978      	ldr	r0, [r7, #20]
 8007ce4:	f7fe fe1a 	bl	800691c <HAL_I2C_AbortCpltCallback>
 8007ce8:	e027      	b.n	8007d3a <I2C_DMAAbort+0x13e>
 8007cea:	7cfb      	ldrb	r3, [r7, #19]
 8007cec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007cf0:	2b28      	cmp	r3, #40	; 0x28
 8007cf2:	d117      	bne.n	8007d24 <I2C_DMAAbort+0x128>
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0201 	orr.w	r2, r2, #1
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	2200      	movs	r2, #0
 8007d18:	631a      	str	r2, [r3, #48]	; 0x30
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2228      	movs	r2, #40	; 0x28
 8007d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d22:	e007      	b.n	8007d34 <I2C_DMAAbort+0x138>
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2220      	movs	r2, #32
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d34:	6978      	ldr	r0, [r7, #20]
 8007d36:	f7fe fde7 	bl	8006908 <HAL_I2C_ErrorCallback>
 8007d3a:	bf00      	nop
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000000 	.word	0x20000000
 8007d48:	14f8b589 	.word	0x14f8b589

08007d4c <I2C_WaitOnSTOPRequestThroughIT>:
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	2300      	movs	r3, #0
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	4b13      	ldr	r3, [pc, #76]	; (8007da8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	08db      	lsrs	r3, r3, #3
 8007d5e:	4a13      	ldr	r2, [pc, #76]	; (8007dac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007d60:	fba2 2303 	umull	r2, r3, r2, r3
 8007d64:	0a1a      	lsrs	r2, r3, #8
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d107      	bne.n	8007d8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	f043 0220 	orr.w	r2, r3, #32
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	641a      	str	r2, [r3, #64]	; 0x40
 8007d86:	2301      	movs	r3, #1
 8007d88:	e008      	b.n	8007d9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d98:	d0e9      	beq.n	8007d6e <I2C_WaitOnSTOPRequestThroughIT+0x22>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr
 8007da8:	20000000 	.word	0x20000000
 8007dac:	14f8b589 	.word	0x14f8b589

08007db0 <I2C_ConvertOtherXferOptions>:
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007dc0:	d103      	bne.n	8007dca <I2C_ConvertOtherXferOptions+0x1a>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8007dc8:	e007      	b.n	8007dda <I2C_ConvertOtherXferOptions+0x2a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007dd2:	d102      	bne.n	8007dda <I2C_ConvertOtherXferOptions+0x2a>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2208      	movs	r2, #8
 8007dd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
	...

08007de8 <HAL_RCC_OscConfig>:
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <HAL_RCC_OscConfig+0x12>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e267      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d075      	beq.n	8007ef2 <HAL_RCC_OscConfig+0x10a>
 8007e06:	4b88      	ldr	r3, [pc, #544]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f003 030c 	and.w	r3, r3, #12
 8007e0e:	2b04      	cmp	r3, #4
 8007e10:	d00c      	beq.n	8007e2c <HAL_RCC_OscConfig+0x44>
 8007e12:	4b85      	ldr	r3, [pc, #532]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 030c 	and.w	r3, r3, #12
 8007e1a:	2b08      	cmp	r3, #8
 8007e1c:	d112      	bne.n	8007e44 <HAL_RCC_OscConfig+0x5c>
 8007e1e:	4b82      	ldr	r3, [pc, #520]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e2a:	d10b      	bne.n	8007e44 <HAL_RCC_OscConfig+0x5c>
 8007e2c:	4b7e      	ldr	r3, [pc, #504]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d05b      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x108>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d157      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x108>
 8007e40:	2301      	movs	r3, #1
 8007e42:	e242      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e4c:	d106      	bne.n	8007e5c <HAL_RCC_OscConfig+0x74>
 8007e4e:	4b76      	ldr	r3, [pc, #472]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a75      	ldr	r2, [pc, #468]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	e01d      	b.n	8007e98 <HAL_RCC_OscConfig+0xb0>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e64:	d10c      	bne.n	8007e80 <HAL_RCC_OscConfig+0x98>
 8007e66:	4b70      	ldr	r3, [pc, #448]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a6f      	ldr	r2, [pc, #444]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	4b6d      	ldr	r3, [pc, #436]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a6c      	ldr	r2, [pc, #432]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	e00b      	b.n	8007e98 <HAL_RCC_OscConfig+0xb0>
 8007e80:	4b69      	ldr	r3, [pc, #420]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a68      	ldr	r2, [pc, #416]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	4b66      	ldr	r3, [pc, #408]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a65      	ldr	r2, [pc, #404]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d013      	beq.n	8007ec8 <HAL_RCC_OscConfig+0xe0>
 8007ea0:	f7fd f9a4 	bl	80051ec <HAL_GetTick>
 8007ea4:	6138      	str	r0, [r7, #16]
 8007ea6:	e008      	b.n	8007eba <HAL_RCC_OscConfig+0xd2>
 8007ea8:	f7fd f9a0 	bl	80051ec <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	2b64      	cmp	r3, #100	; 0x64
 8007eb4:	d901      	bls.n	8007eba <HAL_RCC_OscConfig+0xd2>
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e207      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 8007eba:	4b5b      	ldr	r3, [pc, #364]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0f0      	beq.n	8007ea8 <HAL_RCC_OscConfig+0xc0>
 8007ec6:	e014      	b.n	8007ef2 <HAL_RCC_OscConfig+0x10a>
 8007ec8:	f7fd f990 	bl	80051ec <HAL_GetTick>
 8007ecc:	6138      	str	r0, [r7, #16]
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0xfa>
 8007ed0:	f7fd f98c 	bl	80051ec <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b64      	cmp	r3, #100	; 0x64
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0xfa>
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e1f3      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 8007ee2:	4b51      	ldr	r3, [pc, #324]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1f0      	bne.n	8007ed0 <HAL_RCC_OscConfig+0xe8>
 8007eee:	e000      	b.n	8007ef2 <HAL_RCC_OscConfig+0x10a>
 8007ef0:	bf00      	nop
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d063      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x1de>
 8007efe:	4b4a      	ldr	r3, [pc, #296]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 030c 	and.w	r3, r3, #12
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00b      	beq.n	8007f22 <HAL_RCC_OscConfig+0x13a>
 8007f0a:	4b47      	ldr	r3, [pc, #284]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f003 030c 	and.w	r3, r3, #12
 8007f12:	2b08      	cmp	r3, #8
 8007f14:	d11c      	bne.n	8007f50 <HAL_RCC_OscConfig+0x168>
 8007f16:	4b44      	ldr	r3, [pc, #272]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d116      	bne.n	8007f50 <HAL_RCC_OscConfig+0x168>
 8007f22:	4b41      	ldr	r3, [pc, #260]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d005      	beq.n	8007f3a <HAL_RCC_OscConfig+0x152>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d001      	beq.n	8007f3a <HAL_RCC_OscConfig+0x152>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e1c7      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 8007f3a:	4b3b      	ldr	r3, [pc, #236]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	4937      	ldr	r1, [pc, #220]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	600b      	str	r3, [r1, #0]
 8007f4e:	e03a      	b.n	8007fc6 <HAL_RCC_OscConfig+0x1de>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d020      	beq.n	8007f9a <HAL_RCC_OscConfig+0x1b2>
 8007f58:	4b34      	ldr	r3, [pc, #208]	; (800802c <HAL_RCC_OscConfig+0x244>)
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	f7fd f945 	bl	80051ec <HAL_GetTick>
 8007f62:	6138      	str	r0, [r7, #16]
 8007f64:	e008      	b.n	8007f78 <HAL_RCC_OscConfig+0x190>
 8007f66:	f7fd f941 	bl	80051ec <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d901      	bls.n	8007f78 <HAL_RCC_OscConfig+0x190>
 8007f74:	2303      	movs	r3, #3
 8007f76:	e1a8      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 8007f78:	4b2b      	ldr	r3, [pc, #172]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0f0      	beq.n	8007f66 <HAL_RCC_OscConfig+0x17e>
 8007f84:	4b28      	ldr	r3, [pc, #160]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	4925      	ldr	r1, [pc, #148]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	600b      	str	r3, [r1, #0]
 8007f98:	e015      	b.n	8007fc6 <HAL_RCC_OscConfig+0x1de>
 8007f9a:	4b24      	ldr	r3, [pc, #144]	; (800802c <HAL_RCC_OscConfig+0x244>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	f7fd f924 	bl	80051ec <HAL_GetTick>
 8007fa4:	6138      	str	r0, [r7, #16]
 8007fa6:	e008      	b.n	8007fba <HAL_RCC_OscConfig+0x1d2>
 8007fa8:	f7fd f920 	bl	80051ec <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d901      	bls.n	8007fba <HAL_RCC_OscConfig+0x1d2>
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e187      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 8007fba:	4b1b      	ldr	r3, [pc, #108]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0302 	and.w	r3, r3, #2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1f0      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x1c0>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0308 	and.w	r3, r3, #8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d036      	beq.n	8008040 <HAL_RCC_OscConfig+0x258>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d016      	beq.n	8008008 <HAL_RCC_OscConfig+0x220>
 8007fda:	4b15      	ldr	r3, [pc, #84]	; (8008030 <HAL_RCC_OscConfig+0x248>)
 8007fdc:	2201      	movs	r2, #1
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	f7fd f904 	bl	80051ec <HAL_GetTick>
 8007fe4:	6138      	str	r0, [r7, #16]
 8007fe6:	e008      	b.n	8007ffa <HAL_RCC_OscConfig+0x212>
 8007fe8:	f7fd f900 	bl	80051ec <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_OscConfig+0x212>
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e167      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 8007ffa:	4b0b      	ldr	r3, [pc, #44]	; (8008028 <HAL_RCC_OscConfig+0x240>)
 8007ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0f0      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x200>
 8008006:	e01b      	b.n	8008040 <HAL_RCC_OscConfig+0x258>
 8008008:	4b09      	ldr	r3, [pc, #36]	; (8008030 <HAL_RCC_OscConfig+0x248>)
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	f7fd f8ed 	bl	80051ec <HAL_GetTick>
 8008012:	6138      	str	r0, [r7, #16]
 8008014:	e00e      	b.n	8008034 <HAL_RCC_OscConfig+0x24c>
 8008016:	f7fd f8e9 	bl	80051ec <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	2b02      	cmp	r3, #2
 8008022:	d907      	bls.n	8008034 <HAL_RCC_OscConfig+0x24c>
 8008024:	2303      	movs	r3, #3
 8008026:	e150      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 8008028:	40023800 	.word	0x40023800
 800802c:	42470000 	.word	0x42470000
 8008030:	42470e80 	.word	0x42470e80
 8008034:	4b88      	ldr	r3, [pc, #544]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 8008036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1ea      	bne.n	8008016 <HAL_RCC_OscConfig+0x22e>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 8097 	beq.w	800817c <HAL_RCC_OscConfig+0x394>
 800804e:	2300      	movs	r3, #0
 8008050:	75fb      	strb	r3, [r7, #23]
 8008052:	4b81      	ldr	r3, [pc, #516]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10f      	bne.n	800807e <HAL_RCC_OscConfig+0x296>
 800805e:	2300      	movs	r3, #0
 8008060:	60bb      	str	r3, [r7, #8]
 8008062:	4b7d      	ldr	r3, [pc, #500]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	4a7c      	ldr	r2, [pc, #496]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 8008068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800806c:	6413      	str	r3, [r2, #64]	; 0x40
 800806e:	4b7a      	ldr	r3, [pc, #488]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 8008070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008076:	60bb      	str	r3, [r7, #8]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2301      	movs	r3, #1
 800807c:	75fb      	strb	r3, [r7, #23]
 800807e:	4b77      	ldr	r3, [pc, #476]	; (800825c <HAL_RCC_OscConfig+0x474>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008086:	2b00      	cmp	r3, #0
 8008088:	d118      	bne.n	80080bc <HAL_RCC_OscConfig+0x2d4>
 800808a:	4b74      	ldr	r3, [pc, #464]	; (800825c <HAL_RCC_OscConfig+0x474>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a73      	ldr	r2, [pc, #460]	; (800825c <HAL_RCC_OscConfig+0x474>)
 8008090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008094:	6013      	str	r3, [r2, #0]
 8008096:	f7fd f8a9 	bl	80051ec <HAL_GetTick>
 800809a:	6138      	str	r0, [r7, #16]
 800809c:	e008      	b.n	80080b0 <HAL_RCC_OscConfig+0x2c8>
 800809e:	f7fd f8a5 	bl	80051ec <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d901      	bls.n	80080b0 <HAL_RCC_OscConfig+0x2c8>
 80080ac:	2303      	movs	r3, #3
 80080ae:	e10c      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 80080b0:	4b6a      	ldr	r3, [pc, #424]	; (800825c <HAL_RCC_OscConfig+0x474>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d0f0      	beq.n	800809e <HAL_RCC_OscConfig+0x2b6>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d106      	bne.n	80080d2 <HAL_RCC_OscConfig+0x2ea>
 80080c4:	4b64      	ldr	r3, [pc, #400]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 80080c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c8:	4a63      	ldr	r2, [pc, #396]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 80080ca:	f043 0301 	orr.w	r3, r3, #1
 80080ce:	6713      	str	r3, [r2, #112]	; 0x70
 80080d0:	e01c      	b.n	800810c <HAL_RCC_OscConfig+0x324>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	2b05      	cmp	r3, #5
 80080d8:	d10c      	bne.n	80080f4 <HAL_RCC_OscConfig+0x30c>
 80080da:	4b5f      	ldr	r3, [pc, #380]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 80080dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080de:	4a5e      	ldr	r2, [pc, #376]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 80080e0:	f043 0304 	orr.w	r3, r3, #4
 80080e4:	6713      	str	r3, [r2, #112]	; 0x70
 80080e6:	4b5c      	ldr	r3, [pc, #368]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 80080e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ea:	4a5b      	ldr	r2, [pc, #364]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 80080ec:	f043 0301 	orr.w	r3, r3, #1
 80080f0:	6713      	str	r3, [r2, #112]	; 0x70
 80080f2:	e00b      	b.n	800810c <HAL_RCC_OscConfig+0x324>
 80080f4:	4b58      	ldr	r3, [pc, #352]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 80080f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f8:	4a57      	ldr	r2, [pc, #348]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 80080fa:	f023 0301 	bic.w	r3, r3, #1
 80080fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008100:	4b55      	ldr	r3, [pc, #340]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 8008102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008104:	4a54      	ldr	r2, [pc, #336]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 8008106:	f023 0304 	bic.w	r3, r3, #4
 800810a:	6713      	str	r3, [r2, #112]	; 0x70
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d015      	beq.n	8008140 <HAL_RCC_OscConfig+0x358>
 8008114:	f7fd f86a 	bl	80051ec <HAL_GetTick>
 8008118:	6138      	str	r0, [r7, #16]
 800811a:	e00a      	b.n	8008132 <HAL_RCC_OscConfig+0x34a>
 800811c:	f7fd f866 	bl	80051ec <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	f241 3288 	movw	r2, #5000	; 0x1388
 800812a:	4293      	cmp	r3, r2
 800812c:	d901      	bls.n	8008132 <HAL_RCC_OscConfig+0x34a>
 800812e:	2303      	movs	r3, #3
 8008130:	e0cb      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 8008132:	4b49      	ldr	r3, [pc, #292]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 8008134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008136:	f003 0302 	and.w	r3, r3, #2
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0ee      	beq.n	800811c <HAL_RCC_OscConfig+0x334>
 800813e:	e014      	b.n	800816a <HAL_RCC_OscConfig+0x382>
 8008140:	f7fd f854 	bl	80051ec <HAL_GetTick>
 8008144:	6138      	str	r0, [r7, #16]
 8008146:	e00a      	b.n	800815e <HAL_RCC_OscConfig+0x376>
 8008148:	f7fd f850 	bl	80051ec <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	f241 3288 	movw	r2, #5000	; 0x1388
 8008156:	4293      	cmp	r3, r2
 8008158:	d901      	bls.n	800815e <HAL_RCC_OscConfig+0x376>
 800815a:	2303      	movs	r3, #3
 800815c:	e0b5      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 800815e:	4b3e      	ldr	r3, [pc, #248]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 8008160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008162:	f003 0302 	and.w	r3, r3, #2
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1ee      	bne.n	8008148 <HAL_RCC_OscConfig+0x360>
 800816a:	7dfb      	ldrb	r3, [r7, #23]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d105      	bne.n	800817c <HAL_RCC_OscConfig+0x394>
 8008170:	4b39      	ldr	r3, [pc, #228]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 8008172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008174:	4a38      	ldr	r2, [pc, #224]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 8008176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800817a:	6413      	str	r3, [r2, #64]	; 0x40
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 80a1 	beq.w	80082c8 <HAL_RCC_OscConfig+0x4e0>
 8008186:	4b34      	ldr	r3, [pc, #208]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f003 030c 	and.w	r3, r3, #12
 800818e:	2b08      	cmp	r3, #8
 8008190:	d05c      	beq.n	800824c <HAL_RCC_OscConfig+0x464>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	2b02      	cmp	r3, #2
 8008198:	d141      	bne.n	800821e <HAL_RCC_OscConfig+0x436>
 800819a:	4b31      	ldr	r3, [pc, #196]	; (8008260 <HAL_RCC_OscConfig+0x478>)
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	f7fd f824 	bl	80051ec <HAL_GetTick>
 80081a4:	6138      	str	r0, [r7, #16]
 80081a6:	e008      	b.n	80081ba <HAL_RCC_OscConfig+0x3d2>
 80081a8:	f7fd f820 	bl	80051ec <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_OscConfig+0x3d2>
 80081b6:	2303      	movs	r3, #3
 80081b8:	e087      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 80081ba:	4b27      	ldr	r3, [pc, #156]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1f0      	bne.n	80081a8 <HAL_RCC_OscConfig+0x3c0>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	69da      	ldr	r2, [r3, #28]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	431a      	orrs	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	019b      	lsls	r3, r3, #6
 80081d6:	431a      	orrs	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	085b      	lsrs	r3, r3, #1
 80081de:	3b01      	subs	r3, #1
 80081e0:	041b      	lsls	r3, r3, #16
 80081e2:	431a      	orrs	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	061b      	lsls	r3, r3, #24
 80081ea:	491b      	ldr	r1, [pc, #108]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	604b      	str	r3, [r1, #4]
 80081f0:	4b1b      	ldr	r3, [pc, #108]	; (8008260 <HAL_RCC_OscConfig+0x478>)
 80081f2:	2201      	movs	r2, #1
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	f7fc fff9 	bl	80051ec <HAL_GetTick>
 80081fa:	6138      	str	r0, [r7, #16]
 80081fc:	e008      	b.n	8008210 <HAL_RCC_OscConfig+0x428>
 80081fe:	f7fc fff5 	bl	80051ec <HAL_GetTick>
 8008202:	4602      	mov	r2, r0
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	2b02      	cmp	r3, #2
 800820a:	d901      	bls.n	8008210 <HAL_RCC_OscConfig+0x428>
 800820c:	2303      	movs	r3, #3
 800820e:	e05c      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 8008210:	4b11      	ldr	r3, [pc, #68]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d0f0      	beq.n	80081fe <HAL_RCC_OscConfig+0x416>
 800821c:	e054      	b.n	80082c8 <HAL_RCC_OscConfig+0x4e0>
 800821e:	4b10      	ldr	r3, [pc, #64]	; (8008260 <HAL_RCC_OscConfig+0x478>)
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	f7fc ffe2 	bl	80051ec <HAL_GetTick>
 8008228:	6138      	str	r0, [r7, #16]
 800822a:	e008      	b.n	800823e <HAL_RCC_OscConfig+0x456>
 800822c:	f7fc ffde 	bl	80051ec <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	2b02      	cmp	r3, #2
 8008238:	d901      	bls.n	800823e <HAL_RCC_OscConfig+0x456>
 800823a:	2303      	movs	r3, #3
 800823c:	e045      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 800823e:	4b06      	ldr	r3, [pc, #24]	; (8008258 <HAL_RCC_OscConfig+0x470>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1f0      	bne.n	800822c <HAL_RCC_OscConfig+0x444>
 800824a:	e03d      	b.n	80082c8 <HAL_RCC_OscConfig+0x4e0>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d107      	bne.n	8008264 <HAL_RCC_OscConfig+0x47c>
 8008254:	2301      	movs	r3, #1
 8008256:	e038      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 8008258:	40023800 	.word	0x40023800
 800825c:	40007000 	.word	0x40007000
 8008260:	42470060 	.word	0x42470060
 8008264:	4b1b      	ldr	r3, [pc, #108]	; (80082d4 <HAL_RCC_OscConfig+0x4ec>)
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d028      	beq.n	80082c4 <HAL_RCC_OscConfig+0x4dc>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	429a      	cmp	r2, r3
 800827e:	d121      	bne.n	80082c4 <HAL_RCC_OscConfig+0x4dc>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	429a      	cmp	r2, r3
 800828c:	d11a      	bne.n	80082c4 <HAL_RCC_OscConfig+0x4dc>
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008294:	4013      	ands	r3, r2
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800829a:	0192      	lsls	r2, r2, #6
 800829c:	4293      	cmp	r3, r2
 800829e:	d111      	bne.n	80082c4 <HAL_RCC_OscConfig+0x4dc>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082aa:	085b      	lsrs	r3, r3, #1
 80082ac:	3b01      	subs	r3, #1
 80082ae:	041b      	lsls	r3, r3, #16
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d107      	bne.n	80082c4 <HAL_RCC_OscConfig+0x4dc>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082be:	061b      	lsls	r3, r3, #24
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d001      	beq.n	80082c8 <HAL_RCC_OscConfig+0x4e0>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e000      	b.n	80082ca <HAL_RCC_OscConfig+0x4e2>
 80082c8:	2300      	movs	r3, #0
 80082ca:	4618      	mov	r0, r3
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	40023800 	.word	0x40023800

080082d8 <HAL_RCC_ClockConfig>:
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <HAL_RCC_ClockConfig+0x14>
 80082e8:	2301      	movs	r3, #1
 80082ea:	e0cc      	b.n	8008486 <HAL_RCC_ClockConfig+0x1ae>
 80082ec:	4b68      	ldr	r3, [pc, #416]	; (8008490 <HAL_RCC_ClockConfig+0x1b8>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0307 	and.w	r3, r3, #7
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d90c      	bls.n	8008314 <HAL_RCC_ClockConfig+0x3c>
 80082fa:	4b65      	ldr	r3, [pc, #404]	; (8008490 <HAL_RCC_ClockConfig+0x1b8>)
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	b2d2      	uxtb	r2, r2
 8008300:	701a      	strb	r2, [r3, #0]
 8008302:	4b63      	ldr	r3, [pc, #396]	; (8008490 <HAL_RCC_ClockConfig+0x1b8>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0307 	and.w	r3, r3, #7
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	429a      	cmp	r2, r3
 800830e:	d001      	beq.n	8008314 <HAL_RCC_ClockConfig+0x3c>
 8008310:	2301      	movs	r3, #1
 8008312:	e0b8      	b.n	8008486 <HAL_RCC_ClockConfig+0x1ae>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d020      	beq.n	8008362 <HAL_RCC_ClockConfig+0x8a>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0304 	and.w	r3, r3, #4
 8008328:	2b00      	cmp	r3, #0
 800832a:	d005      	beq.n	8008338 <HAL_RCC_ClockConfig+0x60>
 800832c:	4b59      	ldr	r3, [pc, #356]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	4a58      	ldr	r2, [pc, #352]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 8008332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008336:	6093      	str	r3, [r2, #8]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0308 	and.w	r3, r3, #8
 8008340:	2b00      	cmp	r3, #0
 8008342:	d005      	beq.n	8008350 <HAL_RCC_ClockConfig+0x78>
 8008344:	4b53      	ldr	r3, [pc, #332]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	4a52      	ldr	r2, [pc, #328]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 800834a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800834e:	6093      	str	r3, [r2, #8]
 8008350:	4b50      	ldr	r3, [pc, #320]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	494d      	ldr	r1, [pc, #308]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 800835e:	4313      	orrs	r3, r2
 8008360:	608b      	str	r3, [r1, #8]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	2b00      	cmp	r3, #0
 800836c:	d044      	beq.n	80083f8 <HAL_RCC_ClockConfig+0x120>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d107      	bne.n	8008386 <HAL_RCC_ClockConfig+0xae>
 8008376:	4b47      	ldr	r3, [pc, #284]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d119      	bne.n	80083b6 <HAL_RCC_ClockConfig+0xde>
 8008382:	2301      	movs	r3, #1
 8008384:	e07f      	b.n	8008486 <HAL_RCC_ClockConfig+0x1ae>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d003      	beq.n	8008396 <HAL_RCC_ClockConfig+0xbe>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2b03      	cmp	r3, #3
 8008394:	d107      	bne.n	80083a6 <HAL_RCC_ClockConfig+0xce>
 8008396:	4b3f      	ldr	r3, [pc, #252]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d109      	bne.n	80083b6 <HAL_RCC_ClockConfig+0xde>
 80083a2:	2301      	movs	r3, #1
 80083a4:	e06f      	b.n	8008486 <HAL_RCC_ClockConfig+0x1ae>
 80083a6:	4b3b      	ldr	r3, [pc, #236]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_RCC_ClockConfig+0xde>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e067      	b.n	8008486 <HAL_RCC_ClockConfig+0x1ae>
 80083b6:	4b37      	ldr	r3, [pc, #220]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f023 0203 	bic.w	r2, r3, #3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	4934      	ldr	r1, [pc, #208]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	608b      	str	r3, [r1, #8]
 80083c8:	f7fc ff10 	bl	80051ec <HAL_GetTick>
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	e00a      	b.n	80083e6 <HAL_RCC_ClockConfig+0x10e>
 80083d0:	f7fc ff0c 	bl	80051ec <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	f241 3288 	movw	r2, #5000	; 0x1388
 80083de:	4293      	cmp	r3, r2
 80083e0:	d901      	bls.n	80083e6 <HAL_RCC_ClockConfig+0x10e>
 80083e2:	2303      	movs	r3, #3
 80083e4:	e04f      	b.n	8008486 <HAL_RCC_ClockConfig+0x1ae>
 80083e6:	4b2b      	ldr	r3, [pc, #172]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f003 020c 	and.w	r2, r3, #12
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d1eb      	bne.n	80083d0 <HAL_RCC_ClockConfig+0xf8>
 80083f8:	4b25      	ldr	r3, [pc, #148]	; (8008490 <HAL_RCC_ClockConfig+0x1b8>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0307 	and.w	r3, r3, #7
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	429a      	cmp	r2, r3
 8008404:	d20c      	bcs.n	8008420 <HAL_RCC_ClockConfig+0x148>
 8008406:	4b22      	ldr	r3, [pc, #136]	; (8008490 <HAL_RCC_ClockConfig+0x1b8>)
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	b2d2      	uxtb	r2, r2
 800840c:	701a      	strb	r2, [r3, #0]
 800840e:	4b20      	ldr	r3, [pc, #128]	; (8008490 <HAL_RCC_ClockConfig+0x1b8>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0307 	and.w	r3, r3, #7
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	429a      	cmp	r2, r3
 800841a:	d001      	beq.n	8008420 <HAL_RCC_ClockConfig+0x148>
 800841c:	2301      	movs	r3, #1
 800841e:	e032      	b.n	8008486 <HAL_RCC_ClockConfig+0x1ae>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0304 	and.w	r3, r3, #4
 8008428:	2b00      	cmp	r3, #0
 800842a:	d008      	beq.n	800843e <HAL_RCC_ClockConfig+0x166>
 800842c:	4b19      	ldr	r3, [pc, #100]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	4916      	ldr	r1, [pc, #88]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 800843a:	4313      	orrs	r3, r2
 800843c:	608b      	str	r3, [r1, #8]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0308 	and.w	r3, r3, #8
 8008446:	2b00      	cmp	r3, #0
 8008448:	d009      	beq.n	800845e <HAL_RCC_ClockConfig+0x186>
 800844a:	4b12      	ldr	r3, [pc, #72]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	490e      	ldr	r1, [pc, #56]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 800845a:	4313      	orrs	r3, r2
 800845c:	608b      	str	r3, [r1, #8]
 800845e:	f000 f821 	bl	80084a4 <HAL_RCC_GetSysClockFreq>
 8008462:	4602      	mov	r2, r0
 8008464:	4b0b      	ldr	r3, [pc, #44]	; (8008494 <HAL_RCC_ClockConfig+0x1bc>)
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	091b      	lsrs	r3, r3, #4
 800846a:	f003 030f 	and.w	r3, r3, #15
 800846e:	490a      	ldr	r1, [pc, #40]	; (8008498 <HAL_RCC_ClockConfig+0x1c0>)
 8008470:	5ccb      	ldrb	r3, [r1, r3]
 8008472:	fa22 f303 	lsr.w	r3, r2, r3
 8008476:	4a09      	ldr	r2, [pc, #36]	; (800849c <HAL_RCC_ClockConfig+0x1c4>)
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	4b09      	ldr	r3, [pc, #36]	; (80084a0 <HAL_RCC_ClockConfig+0x1c8>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4618      	mov	r0, r3
 8008480:	f7fc fe70 	bl	8005164 <HAL_InitTick>
 8008484:	2300      	movs	r3, #0
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	40023c00 	.word	0x40023c00
 8008494:	40023800 	.word	0x40023800
 8008498:	0800f264 	.word	0x0800f264
 800849c:	20000000 	.word	0x20000000
 80084a0:	20000004 	.word	0x20000004

080084a4 <HAL_RCC_GetSysClockFreq>:
 80084a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084a8:	b090      	sub	sp, #64	; 0x40
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	2300      	movs	r3, #0
 80084ae:	637b      	str	r3, [r7, #52]	; 0x34
 80084b0:	2300      	movs	r3, #0
 80084b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084b4:	2300      	movs	r3, #0
 80084b6:	633b      	str	r3, [r7, #48]	; 0x30
 80084b8:	2300      	movs	r3, #0
 80084ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80084bc:	4b59      	ldr	r3, [pc, #356]	; (8008624 <HAL_RCC_GetSysClockFreq+0x180>)
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f003 030c 	and.w	r3, r3, #12
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d00d      	beq.n	80084e4 <HAL_RCC_GetSysClockFreq+0x40>
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	f200 80a1 	bhi.w	8008610 <HAL_RCC_GetSysClockFreq+0x16c>
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d002      	beq.n	80084d8 <HAL_RCC_GetSysClockFreq+0x34>
 80084d2:	2b04      	cmp	r3, #4
 80084d4:	d003      	beq.n	80084de <HAL_RCC_GetSysClockFreq+0x3a>
 80084d6:	e09b      	b.n	8008610 <HAL_RCC_GetSysClockFreq+0x16c>
 80084d8:	4b53      	ldr	r3, [pc, #332]	; (8008628 <HAL_RCC_GetSysClockFreq+0x184>)
 80084da:	63bb      	str	r3, [r7, #56]	; 0x38
 80084dc:	e09b      	b.n	8008616 <HAL_RCC_GetSysClockFreq+0x172>
 80084de:	4b53      	ldr	r3, [pc, #332]	; (800862c <HAL_RCC_GetSysClockFreq+0x188>)
 80084e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80084e2:	e098      	b.n	8008616 <HAL_RCC_GetSysClockFreq+0x172>
 80084e4:	4b4f      	ldr	r3, [pc, #316]	; (8008624 <HAL_RCC_GetSysClockFreq+0x180>)
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34
 80084ee:	4b4d      	ldr	r3, [pc, #308]	; (8008624 <HAL_RCC_GetSysClockFreq+0x180>)
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d028      	beq.n	800854c <HAL_RCC_GetSysClockFreq+0xa8>
 80084fa:	4b4a      	ldr	r3, [pc, #296]	; (8008624 <HAL_RCC_GetSysClockFreq+0x180>)
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	099b      	lsrs	r3, r3, #6
 8008500:	2200      	movs	r2, #0
 8008502:	623b      	str	r3, [r7, #32]
 8008504:	627a      	str	r2, [r7, #36]	; 0x24
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800850c:	2100      	movs	r1, #0
 800850e:	4b47      	ldr	r3, [pc, #284]	; (800862c <HAL_RCC_GetSysClockFreq+0x188>)
 8008510:	fb03 f201 	mul.w	r2, r3, r1
 8008514:	2300      	movs	r3, #0
 8008516:	fb00 f303 	mul.w	r3, r0, r3
 800851a:	4413      	add	r3, r2
 800851c:	4a43      	ldr	r2, [pc, #268]	; (800862c <HAL_RCC_GetSysClockFreq+0x188>)
 800851e:	fba0 1202 	umull	r1, r2, r0, r2
 8008522:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008524:	460a      	mov	r2, r1
 8008526:	62ba      	str	r2, [r7, #40]	; 0x28
 8008528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800852a:	4413      	add	r3, r2
 800852c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800852e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008530:	2200      	movs	r2, #0
 8008532:	61bb      	str	r3, [r7, #24]
 8008534:	61fa      	str	r2, [r7, #28]
 8008536:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800853a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800853e:	f7f8 fb8b 	bl	8000c58 <__aeabi_uldivmod>
 8008542:	4602      	mov	r2, r0
 8008544:	460b      	mov	r3, r1
 8008546:	4613      	mov	r3, r2
 8008548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800854a:	e053      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x150>
 800854c:	4b35      	ldr	r3, [pc, #212]	; (8008624 <HAL_RCC_GetSysClockFreq+0x180>)
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	099b      	lsrs	r3, r3, #6
 8008552:	2200      	movs	r2, #0
 8008554:	613b      	str	r3, [r7, #16]
 8008556:	617a      	str	r2, [r7, #20]
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800855e:	f04f 0b00 	mov.w	fp, #0
 8008562:	4652      	mov	r2, sl
 8008564:	465b      	mov	r3, fp
 8008566:	f04f 0000 	mov.w	r0, #0
 800856a:	f04f 0100 	mov.w	r1, #0
 800856e:	0159      	lsls	r1, r3, #5
 8008570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008574:	0150      	lsls	r0, r2, #5
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	ebb2 080a 	subs.w	r8, r2, sl
 800857e:	eb63 090b 	sbc.w	r9, r3, fp
 8008582:	f04f 0200 	mov.w	r2, #0
 8008586:	f04f 0300 	mov.w	r3, #0
 800858a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800858e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008592:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008596:	ebb2 0408 	subs.w	r4, r2, r8
 800859a:	eb63 0509 	sbc.w	r5, r3, r9
 800859e:	f04f 0200 	mov.w	r2, #0
 80085a2:	f04f 0300 	mov.w	r3, #0
 80085a6:	00eb      	lsls	r3, r5, #3
 80085a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085ac:	00e2      	lsls	r2, r4, #3
 80085ae:	4614      	mov	r4, r2
 80085b0:	461d      	mov	r5, r3
 80085b2:	eb14 030a 	adds.w	r3, r4, sl
 80085b6:	603b      	str	r3, [r7, #0]
 80085b8:	eb45 030b 	adc.w	r3, r5, fp
 80085bc:	607b      	str	r3, [r7, #4]
 80085be:	f04f 0200 	mov.w	r2, #0
 80085c2:	f04f 0300 	mov.w	r3, #0
 80085c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80085ca:	4629      	mov	r1, r5
 80085cc:	028b      	lsls	r3, r1, #10
 80085ce:	4621      	mov	r1, r4
 80085d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80085d4:	4621      	mov	r1, r4
 80085d6:	028a      	lsls	r2, r1, #10
 80085d8:	4610      	mov	r0, r2
 80085da:	4619      	mov	r1, r3
 80085dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085de:	2200      	movs	r2, #0
 80085e0:	60bb      	str	r3, [r7, #8]
 80085e2:	60fa      	str	r2, [r7, #12]
 80085e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085e8:	f7f8 fb36 	bl	8000c58 <__aeabi_uldivmod>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4613      	mov	r3, r2
 80085f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085f4:	4b0b      	ldr	r3, [pc, #44]	; (8008624 <HAL_RCC_GetSysClockFreq+0x180>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	0c1b      	lsrs	r3, r3, #16
 80085fa:	f003 0303 	and.w	r3, r3, #3
 80085fe:	3301      	adds	r3, #1
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	633b      	str	r3, [r7, #48]	; 0x30
 8008604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	fbb2 f3f3 	udiv	r3, r2, r3
 800860c:	63bb      	str	r3, [r7, #56]	; 0x38
 800860e:	e002      	b.n	8008616 <HAL_RCC_GetSysClockFreq+0x172>
 8008610:	4b05      	ldr	r3, [pc, #20]	; (8008628 <HAL_RCC_GetSysClockFreq+0x184>)
 8008612:	63bb      	str	r3, [r7, #56]	; 0x38
 8008614:	bf00      	nop
 8008616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008618:	4618      	mov	r0, r3
 800861a:	3740      	adds	r7, #64	; 0x40
 800861c:	46bd      	mov	sp, r7
 800861e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008622:	bf00      	nop
 8008624:	40023800 	.word	0x40023800
 8008628:	00f42400 	.word	0x00f42400
 800862c:	017d7840 	.word	0x017d7840

08008630 <HAL_RCC_GetHCLKFreq>:
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
 8008634:	4b03      	ldr	r3, [pc, #12]	; (8008644 <HAL_RCC_GetHCLKFreq+0x14>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4618      	mov	r0, r3
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	20000000 	.word	0x20000000

08008648 <HAL_RCC_GetPCLK1Freq>:
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
 800864c:	f7ff fff0 	bl	8008630 <HAL_RCC_GetHCLKFreq>
 8008650:	4602      	mov	r2, r0
 8008652:	4b05      	ldr	r3, [pc, #20]	; (8008668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	0a9b      	lsrs	r3, r3, #10
 8008658:	f003 0307 	and.w	r3, r3, #7
 800865c:	4903      	ldr	r1, [pc, #12]	; (800866c <HAL_RCC_GetPCLK1Freq+0x24>)
 800865e:	5ccb      	ldrb	r3, [r1, r3]
 8008660:	fa22 f303 	lsr.w	r3, r2, r3
 8008664:	4618      	mov	r0, r3
 8008666:	bd80      	pop	{r7, pc}
 8008668:	40023800 	.word	0x40023800
 800866c:	0800f274 	.word	0x0800f274

08008670 <HAL_RCC_GetPCLK2Freq>:
 8008670:	b580      	push	{r7, lr}
 8008672:	af00      	add	r7, sp, #0
 8008674:	f7ff ffdc 	bl	8008630 <HAL_RCC_GetHCLKFreq>
 8008678:	4602      	mov	r2, r0
 800867a:	4b05      	ldr	r3, [pc, #20]	; (8008690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	0b5b      	lsrs	r3, r3, #13
 8008680:	f003 0307 	and.w	r3, r3, #7
 8008684:	4903      	ldr	r1, [pc, #12]	; (8008694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008686:	5ccb      	ldrb	r3, [r1, r3]
 8008688:	fa22 f303 	lsr.w	r3, r2, r3
 800868c:	4618      	mov	r0, r3
 800868e:	bd80      	pop	{r7, pc}
 8008690:	40023800 	.word	0x40023800
 8008694:	0800f274 	.word	0x0800f274

08008698 <HAL_TIM_Base_Init>:
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_TIM_Base_Init+0x12>
 80086a6:	2301      	movs	r3, #1
 80086a8:	e041      	b.n	800872e <HAL_TIM_Base_Init+0x96>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d106      	bne.n	80086c4 <HAL_TIM_Base_Init+0x2c>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7fc f962 	bl	8004988 <HAL_TIM_Base_MspInit>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3304      	adds	r3, #4
 80086d4:	4619      	mov	r1, r3
 80086d6:	4610      	mov	r0, r2
 80086d8:	f000 fd7e 	bl	80091d8 <TIM_Base_SetConfig>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800872c:	2300      	movs	r3, #0
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <HAL_TIM_Base_Start_IT>:
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b01      	cmp	r3, #1
 800874a:	d001      	beq.n	8008750 <HAL_TIM_Base_Start_IT+0x18>
 800874c:	2301      	movs	r3, #1
 800874e:	e044      	b.n	80087da <HAL_TIM_Base_Start_IT+0xa2>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0201 	orr.w	r2, r2, #1
 8008766:	60da      	str	r2, [r3, #12]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a1e      	ldr	r2, [pc, #120]	; (80087e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d018      	beq.n	80087a4 <HAL_TIM_Base_Start_IT+0x6c>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800877a:	d013      	beq.n	80087a4 <HAL_TIM_Base_Start_IT+0x6c>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a1a      	ldr	r2, [pc, #104]	; (80087ec <HAL_TIM_Base_Start_IT+0xb4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d00e      	beq.n	80087a4 <HAL_TIM_Base_Start_IT+0x6c>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a19      	ldr	r2, [pc, #100]	; (80087f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d009      	beq.n	80087a4 <HAL_TIM_Base_Start_IT+0x6c>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a17      	ldr	r2, [pc, #92]	; (80087f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d004      	beq.n	80087a4 <HAL_TIM_Base_Start_IT+0x6c>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a16      	ldr	r2, [pc, #88]	; (80087f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d111      	bne.n	80087c8 <HAL_TIM_Base_Start_IT+0x90>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b06      	cmp	r3, #6
 80087b4:	d010      	beq.n	80087d8 <HAL_TIM_Base_Start_IT+0xa0>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f042 0201 	orr.w	r2, r2, #1
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	e007      	b.n	80087d8 <HAL_TIM_Base_Start_IT+0xa0>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f042 0201 	orr.w	r2, r2, #1
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	2300      	movs	r3, #0
 80087da:	4618      	mov	r0, r3
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	40010000 	.word	0x40010000
 80087ec:	40000400 	.word	0x40000400
 80087f0:	40000800 	.word	0x40000800
 80087f4:	40000c00 	.word	0x40000c00
 80087f8:	40014000 	.word	0x40014000

080087fc <HAL_TIM_PWM_Init>:
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <HAL_TIM_PWM_Init+0x12>
 800880a:	2301      	movs	r3, #1
 800880c:	e041      	b.n	8008892 <HAL_TIM_PWM_Init+0x96>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <HAL_TIM_PWM_Init+0x2c>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7fc f98a 	bl	8004b3c <HAL_TIM_PWM_MspInit>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3304      	adds	r3, #4
 8008838:	4619      	mov	r1, r3
 800883a:	4610      	mov	r0, r2
 800883c:	f000 fccc 	bl	80091d8 <TIM_Base_SetConfig>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008890:	2300      	movs	r3, #0
 8008892:	4618      	mov	r0, r3
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <HAL_TIM_PWM_Start>:
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d109      	bne.n	80088c0 <HAL_TIM_PWM_Start+0x24>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	bf14      	ite	ne
 80088b8:	2301      	movne	r3, #1
 80088ba:	2300      	moveq	r3, #0
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	e022      	b.n	8008906 <HAL_TIM_PWM_Start+0x6a>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	d109      	bne.n	80088da <HAL_TIM_PWM_Start+0x3e>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	bf14      	ite	ne
 80088d2:	2301      	movne	r3, #1
 80088d4:	2300      	moveq	r3, #0
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	e015      	b.n	8008906 <HAL_TIM_PWM_Start+0x6a>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b08      	cmp	r3, #8
 80088de:	d109      	bne.n	80088f4 <HAL_TIM_PWM_Start+0x58>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	bf14      	ite	ne
 80088ec:	2301      	movne	r3, #1
 80088ee:	2300      	moveq	r3, #0
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	e008      	b.n	8008906 <HAL_TIM_PWM_Start+0x6a>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	bf14      	ite	ne
 8008900:	2301      	movne	r3, #1
 8008902:	2300      	moveq	r3, #0
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <HAL_TIM_PWM_Start+0x72>
 800890a:	2301      	movs	r3, #1
 800890c:	e068      	b.n	80089e0 <HAL_TIM_PWM_Start+0x144>
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d104      	bne.n	800891e <HAL_TIM_PWM_Start+0x82>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800891c:	e013      	b.n	8008946 <HAL_TIM_PWM_Start+0xaa>
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b04      	cmp	r3, #4
 8008922:	d104      	bne.n	800892e <HAL_TIM_PWM_Start+0x92>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800892c:	e00b      	b.n	8008946 <HAL_TIM_PWM_Start+0xaa>
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b08      	cmp	r3, #8
 8008932:	d104      	bne.n	800893e <HAL_TIM_PWM_Start+0xa2>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2202      	movs	r2, #2
 8008938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800893c:	e003      	b.n	8008946 <HAL_TIM_PWM_Start+0xaa>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2202      	movs	r2, #2
 8008942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2201      	movs	r2, #1
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	4618      	mov	r0, r3
 8008950:	f000 fee8 	bl	8009724 <TIM_CCxChannelCmd>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a23      	ldr	r2, [pc, #140]	; (80089e8 <HAL_TIM_PWM_Start+0x14c>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d107      	bne.n	800896e <HAL_TIM_PWM_Start+0xd2>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800896c:	645a      	str	r2, [r3, #68]	; 0x44
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a1d      	ldr	r2, [pc, #116]	; (80089e8 <HAL_TIM_PWM_Start+0x14c>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d018      	beq.n	80089aa <HAL_TIM_PWM_Start+0x10e>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008980:	d013      	beq.n	80089aa <HAL_TIM_PWM_Start+0x10e>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a19      	ldr	r2, [pc, #100]	; (80089ec <HAL_TIM_PWM_Start+0x150>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d00e      	beq.n	80089aa <HAL_TIM_PWM_Start+0x10e>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a17      	ldr	r2, [pc, #92]	; (80089f0 <HAL_TIM_PWM_Start+0x154>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d009      	beq.n	80089aa <HAL_TIM_PWM_Start+0x10e>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a16      	ldr	r2, [pc, #88]	; (80089f4 <HAL_TIM_PWM_Start+0x158>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d004      	beq.n	80089aa <HAL_TIM_PWM_Start+0x10e>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a14      	ldr	r2, [pc, #80]	; (80089f8 <HAL_TIM_PWM_Start+0x15c>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d111      	bne.n	80089ce <HAL_TIM_PWM_Start+0x132>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f003 0307 	and.w	r3, r3, #7
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2b06      	cmp	r3, #6
 80089ba:	d010      	beq.n	80089de <HAL_TIM_PWM_Start+0x142>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0201 	orr.w	r2, r2, #1
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	e007      	b.n	80089de <HAL_TIM_PWM_Start+0x142>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0201 	orr.w	r2, r2, #1
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	2300      	movs	r3, #0
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	40010000 	.word	0x40010000
 80089ec:	40000400 	.word	0x40000400
 80089f0:	40000800 	.word	0x40000800
 80089f4:	40000c00 	.word	0x40000c00
 80089f8:	40014000 	.word	0x40014000

080089fc <HAL_TIM_Encoder_Init>:
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d101      	bne.n	8008a10 <HAL_TIM_Encoder_Init+0x14>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e097      	b.n	8008b40 <HAL_TIM_Encoder_Init+0x144>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d106      	bne.n	8008a2a <HAL_TIM_Encoder_Init+0x2e>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7fb ffef 	bl	8004a08 <HAL_TIM_Encoder_MspInit>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	6812      	ldr	r2, [r2, #0]
 8008a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a40:	f023 0307 	bic.w	r3, r3, #7
 8008a44:	6093      	str	r3, [r2, #8]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4610      	mov	r0, r2
 8008a52:	f000 fbc1 	bl	80091d8 <TIM_Base_SetConfig>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	617b      	str	r3, [r7, #20]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	613b      	str	r3, [r7, #16]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a7e:	f023 0303 	bic.w	r3, r3, #3
 8008a82:	613b      	str	r3, [r7, #16]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	689a      	ldr	r2, [r3, #8]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	021b      	lsls	r3, r3, #8
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	613b      	str	r3, [r7, #16]
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008a9c:	f023 030c 	bic.w	r3, r3, #12
 8008aa0:	613b      	str	r3, [r7, #16]
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008aac:	613b      	str	r3, [r7, #16]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	021b      	lsls	r3, r3, #8
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	613b      	str	r3, [r7, #16]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	011a      	lsls	r2, r3, #4
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	031b      	lsls	r3, r3, #12
 8008acc:	4313      	orrs	r3, r2
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	613b      	str	r3, [r7, #16]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	011b      	lsls	r3, r3, #4
 8008aee:	4313      	orrs	r3, r2
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	609a      	str	r2, [r3, #8]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	619a      	str	r2, [r3, #24]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	621a      	str	r2, [r3, #32]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008b3e:	2300      	movs	r3, #0
 8008b40:	4618      	mov	r0, r3
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <HAL_TIM_Encoder_Start>:
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b58:	73fb      	strb	r3, [r7, #15]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008b60:	73bb      	strb	r3, [r7, #14]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b68:	737b      	strb	r3, [r7, #13]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008b70:	733b      	strb	r3, [r7, #12]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d110      	bne.n	8008b9a <HAL_TIM_Encoder_Start+0x52>
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d102      	bne.n	8008b84 <HAL_TIM_Encoder_Start+0x3c>
 8008b7e:	7b7b      	ldrb	r3, [r7, #13]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d001      	beq.n	8008b88 <HAL_TIM_Encoder_Start+0x40>
 8008b84:	2301      	movs	r3, #1
 8008b86:	e069      	b.n	8008c5c <HAL_TIM_Encoder_Start+0x114>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b98:	e031      	b.n	8008bfe <HAL_TIM_Encoder_Start+0xb6>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	d110      	bne.n	8008bc2 <HAL_TIM_Encoder_Start+0x7a>
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d102      	bne.n	8008bac <HAL_TIM_Encoder_Start+0x64>
 8008ba6:	7b3b      	ldrb	r3, [r7, #12]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d001      	beq.n	8008bb0 <HAL_TIM_Encoder_Start+0x68>
 8008bac:	2301      	movs	r3, #1
 8008bae:	e055      	b.n	8008c5c <HAL_TIM_Encoder_Start+0x114>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bc0:	e01d      	b.n	8008bfe <HAL_TIM_Encoder_Start+0xb6>
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d108      	bne.n	8008bda <HAL_TIM_Encoder_Start+0x92>
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d105      	bne.n	8008bda <HAL_TIM_Encoder_Start+0x92>
 8008bce:	7b7b      	ldrb	r3, [r7, #13]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d102      	bne.n	8008bda <HAL_TIM_Encoder_Start+0x92>
 8008bd4:	7b3b      	ldrb	r3, [r7, #12]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d001      	beq.n	8008bde <HAL_TIM_Encoder_Start+0x96>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e03e      	b.n	8008c5c <HAL_TIM_Encoder_Start+0x114>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2202      	movs	r2, #2
 8008be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2202      	movs	r2, #2
 8008bea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d003      	beq.n	8008c0c <HAL_TIM_Encoder_Start+0xc4>
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d008      	beq.n	8008c1c <HAL_TIM_Encoder_Start+0xd4>
 8008c0a:	e00f      	b.n	8008c2c <HAL_TIM_Encoder_Start+0xe4>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2201      	movs	r2, #1
 8008c12:	2100      	movs	r1, #0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 fd85 	bl	8009724 <TIM_CCxChannelCmd>
 8008c1a:	e016      	b.n	8008c4a <HAL_TIM_Encoder_Start+0x102>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2201      	movs	r2, #1
 8008c22:	2104      	movs	r1, #4
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 fd7d 	bl	8009724 <TIM_CCxChannelCmd>
 8008c2a:	e00e      	b.n	8008c4a <HAL_TIM_Encoder_Start+0x102>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2201      	movs	r2, #1
 8008c32:	2100      	movs	r1, #0
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 fd75 	bl	8009724 <TIM_CCxChannelCmd>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	2104      	movs	r1, #4
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 fd6e 	bl	8009724 <TIM_CCxChannelCmd>
 8008c48:	bf00      	nop
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f042 0201 	orr.w	r2, r2, #1
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_TIM_IRQHandler>:
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d122      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0x5c>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f003 0302 	and.w	r3, r3, #2
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d11b      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0x5c>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f06f 0202 	mvn.w	r2, #2
 8008c90:	611a      	str	r2, [r3, #16]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	771a      	strb	r2, [r3, #28]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <HAL_TIM_IRQHandler+0x4a>
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fa77 	bl	800919a <HAL_TIM_IC_CaptureCallback>
 8008cac:	e005      	b.n	8008cba <HAL_TIM_IRQHandler+0x56>
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fa69 	bl	8009186 <HAL_TIM_OC_DelayElapsedCallback>
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fa7a 	bl	80091ae <HAL_TIM_PWM_PulseFinishedCallback>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	771a      	strb	r2, [r3, #28]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f003 0304 	and.w	r3, r3, #4
 8008cca:	2b04      	cmp	r3, #4
 8008ccc:	d122      	bne.n	8008d14 <HAL_TIM_IRQHandler+0xb0>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d11b      	bne.n	8008d14 <HAL_TIM_IRQHandler+0xb0>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f06f 0204 	mvn.w	r2, #4
 8008ce4:	611a      	str	r2, [r3, #16]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2202      	movs	r2, #2
 8008cea:	771a      	strb	r2, [r3, #28]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <HAL_TIM_IRQHandler+0x9e>
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fa4d 	bl	800919a <HAL_TIM_IC_CaptureCallback>
 8008d00:	e005      	b.n	8008d0e <HAL_TIM_IRQHandler+0xaa>
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fa3f 	bl	8009186 <HAL_TIM_OC_DelayElapsedCallback>
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fa50 	bl	80091ae <HAL_TIM_PWM_PulseFinishedCallback>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	771a      	strb	r2, [r3, #28]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	f003 0308 	and.w	r3, r3, #8
 8008d1e:	2b08      	cmp	r3, #8
 8008d20:	d122      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x104>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	f003 0308 	and.w	r3, r3, #8
 8008d2c:	2b08      	cmp	r3, #8
 8008d2e:	d11b      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x104>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f06f 0208 	mvn.w	r2, #8
 8008d38:	611a      	str	r2, [r3, #16]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2204      	movs	r2, #4
 8008d3e:	771a      	strb	r2, [r3, #28]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	f003 0303 	and.w	r3, r3, #3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_TIM_IRQHandler+0xf2>
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa23 	bl	800919a <HAL_TIM_IC_CaptureCallback>
 8008d54:	e005      	b.n	8008d62 <HAL_TIM_IRQHandler+0xfe>
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa15 	bl	8009186 <HAL_TIM_OC_DelayElapsedCallback>
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fa26 	bl	80091ae <HAL_TIM_PWM_PulseFinishedCallback>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	771a      	strb	r2, [r3, #28]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0310 	and.w	r3, r3, #16
 8008d72:	2b10      	cmp	r3, #16
 8008d74:	d122      	bne.n	8008dbc <HAL_TIM_IRQHandler+0x158>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f003 0310 	and.w	r3, r3, #16
 8008d80:	2b10      	cmp	r3, #16
 8008d82:	d11b      	bne.n	8008dbc <HAL_TIM_IRQHandler+0x158>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f06f 0210 	mvn.w	r2, #16
 8008d8c:	611a      	str	r2, [r3, #16]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2208      	movs	r2, #8
 8008d92:	771a      	strb	r2, [r3, #28]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	69db      	ldr	r3, [r3, #28]
 8008d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <HAL_TIM_IRQHandler+0x146>
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f9f9 	bl	800919a <HAL_TIM_IC_CaptureCallback>
 8008da8:	e005      	b.n	8008db6 <HAL_TIM_IRQHandler+0x152>
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f9eb 	bl	8009186 <HAL_TIM_OC_DelayElapsedCallback>
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f9fc 	bl	80091ae <HAL_TIM_PWM_PulseFinishedCallback>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	771a      	strb	r2, [r3, #28]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d10e      	bne.n	8008de8 <HAL_TIM_IRQHandler+0x184>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d107      	bne.n	8008de8 <HAL_TIM_IRQHandler+0x184>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f06f 0201 	mvn.w	r2, #1
 8008de0:	611a      	str	r2, [r3, #16]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7f9 fcec 	bl	80027c0 <HAL_TIM_PeriodElapsedCallback>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df2:	2b80      	cmp	r3, #128	; 0x80
 8008df4:	d10e      	bne.n	8008e14 <HAL_TIM_IRQHandler+0x1b0>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e00:	2b80      	cmp	r3, #128	; 0x80
 8008e02:	d107      	bne.n	8008e14 <HAL_TIM_IRQHandler+0x1b0>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e0c:	611a      	str	r2, [r3, #16]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fd26 	bl	8009860 <HAL_TIMEx_BreakCallback>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1e:	2b40      	cmp	r3, #64	; 0x40
 8008e20:	d10e      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x1dc>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2c:	2b40      	cmp	r3, #64	; 0x40
 8008e2e:	d107      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x1dc>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e38:	611a      	str	r2, [r3, #16]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f9c1 	bl	80091c2 <HAL_TIM_TriggerCallback>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	2b20      	cmp	r3, #32
 8008e4c:	d10e      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x208>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f003 0320 	and.w	r3, r3, #32
 8008e58:	2b20      	cmp	r3, #32
 8008e5a:	d107      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x208>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f06f 0220 	mvn.w	r2, #32
 8008e64:	611a      	str	r2, [r3, #16]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fcf0 	bl	800984c <HAL_TIMEx_CommutCallback>
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_TIM_PWM_ConfigChannel>:
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	2300      	movs	r3, #0
 8008e82:	75fb      	strb	r3, [r7, #23]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d101      	bne.n	8008e92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e8e:	2302      	movs	r3, #2
 8008e90:	e0ae      	b.n	8008ff0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2b0c      	cmp	r3, #12
 8008e9e:	f200 809f 	bhi.w	8008fe0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008ea2:	a201      	add	r2, pc, #4	; (adr r2, 8008ea8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea8:	08008edd 	.word	0x08008edd
 8008eac:	08008fe1 	.word	0x08008fe1
 8008eb0:	08008fe1 	.word	0x08008fe1
 8008eb4:	08008fe1 	.word	0x08008fe1
 8008eb8:	08008f1d 	.word	0x08008f1d
 8008ebc:	08008fe1 	.word	0x08008fe1
 8008ec0:	08008fe1 	.word	0x08008fe1
 8008ec4:	08008fe1 	.word	0x08008fe1
 8008ec8:	08008f5f 	.word	0x08008f5f
 8008ecc:	08008fe1 	.word	0x08008fe1
 8008ed0:	08008fe1 	.word	0x08008fe1
 8008ed4:	08008fe1 	.word	0x08008fe1
 8008ed8:	08008f9f 	.word	0x08008f9f
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68b9      	ldr	r1, [r7, #8]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 f9f8 	bl	80092d8 <TIM_OC1_SetConfig>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	699a      	ldr	r2, [r3, #24]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f042 0208 	orr.w	r2, r2, #8
 8008ef6:	619a      	str	r2, [r3, #24]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	699a      	ldr	r2, [r3, #24]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f022 0204 	bic.w	r2, r2, #4
 8008f06:	619a      	str	r2, [r3, #24]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6999      	ldr	r1, [r3, #24]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	691a      	ldr	r2, [r3, #16]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	430a      	orrs	r2, r1
 8008f18:	619a      	str	r2, [r3, #24]
 8008f1a:	e064      	b.n	8008fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68b9      	ldr	r1, [r7, #8]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fa3e 	bl	80093a4 <TIM_OC2_SetConfig>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	699a      	ldr	r2, [r3, #24]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f36:	619a      	str	r2, [r3, #24]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	699a      	ldr	r2, [r3, #24]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f46:	619a      	str	r2, [r3, #24]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6999      	ldr	r1, [r3, #24]
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	021a      	lsls	r2, r3, #8
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	619a      	str	r2, [r3, #24]
 8008f5c:	e043      	b.n	8008fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68b9      	ldr	r1, [r7, #8]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 fa89 	bl	800947c <TIM_OC3_SetConfig>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	69da      	ldr	r2, [r3, #28]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f042 0208 	orr.w	r2, r2, #8
 8008f78:	61da      	str	r2, [r3, #28]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	69da      	ldr	r2, [r3, #28]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f022 0204 	bic.w	r2, r2, #4
 8008f88:	61da      	str	r2, [r3, #28]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69d9      	ldr	r1, [r3, #28]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	691a      	ldr	r2, [r3, #16]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	61da      	str	r2, [r3, #28]
 8008f9c:	e023      	b.n	8008fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68b9      	ldr	r1, [r7, #8]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 fad3 	bl	8009550 <TIM_OC4_SetConfig>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	69da      	ldr	r2, [r3, #28]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fb8:	61da      	str	r2, [r3, #28]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	69da      	ldr	r2, [r3, #28]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fc8:	61da      	str	r2, [r3, #28]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69d9      	ldr	r1, [r3, #28]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	021a      	lsls	r2, r3, #8
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	430a      	orrs	r2, r1
 8008fdc:	61da      	str	r2, [r3, #28]
 8008fde:	e002      	b.n	8008fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	75fb      	strb	r3, [r7, #23]
 8008fe4:	bf00      	nop
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <HAL_TIM_ConfigClockSource>:
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800900c:	2b01      	cmp	r3, #1
 800900e:	d101      	bne.n	8009014 <HAL_TIM_ConfigClockSource+0x1c>
 8009010:	2302      	movs	r3, #2
 8009012:	e0b4      	b.n	800917e <HAL_TIM_ConfigClockSource+0x186>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2202      	movs	r2, #2
 8009020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	60bb      	str	r3, [r7, #8]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009032:	60bb      	str	r3, [r7, #8]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800903a:	60bb      	str	r3, [r7, #8]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	609a      	str	r2, [r3, #8]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800904c:	d03e      	beq.n	80090cc <HAL_TIM_ConfigClockSource+0xd4>
 800904e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009052:	f200 8087 	bhi.w	8009164 <HAL_TIM_ConfigClockSource+0x16c>
 8009056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800905a:	f000 8086 	beq.w	800916a <HAL_TIM_ConfigClockSource+0x172>
 800905e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009062:	d87f      	bhi.n	8009164 <HAL_TIM_ConfigClockSource+0x16c>
 8009064:	2b70      	cmp	r3, #112	; 0x70
 8009066:	d01a      	beq.n	800909e <HAL_TIM_ConfigClockSource+0xa6>
 8009068:	2b70      	cmp	r3, #112	; 0x70
 800906a:	d87b      	bhi.n	8009164 <HAL_TIM_ConfigClockSource+0x16c>
 800906c:	2b60      	cmp	r3, #96	; 0x60
 800906e:	d050      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0x11a>
 8009070:	2b60      	cmp	r3, #96	; 0x60
 8009072:	d877      	bhi.n	8009164 <HAL_TIM_ConfigClockSource+0x16c>
 8009074:	2b50      	cmp	r3, #80	; 0x50
 8009076:	d03c      	beq.n	80090f2 <HAL_TIM_ConfigClockSource+0xfa>
 8009078:	2b50      	cmp	r3, #80	; 0x50
 800907a:	d873      	bhi.n	8009164 <HAL_TIM_ConfigClockSource+0x16c>
 800907c:	2b40      	cmp	r3, #64	; 0x40
 800907e:	d058      	beq.n	8009132 <HAL_TIM_ConfigClockSource+0x13a>
 8009080:	2b40      	cmp	r3, #64	; 0x40
 8009082:	d86f      	bhi.n	8009164 <HAL_TIM_ConfigClockSource+0x16c>
 8009084:	2b30      	cmp	r3, #48	; 0x30
 8009086:	d064      	beq.n	8009152 <HAL_TIM_ConfigClockSource+0x15a>
 8009088:	2b30      	cmp	r3, #48	; 0x30
 800908a:	d86b      	bhi.n	8009164 <HAL_TIM_ConfigClockSource+0x16c>
 800908c:	2b20      	cmp	r3, #32
 800908e:	d060      	beq.n	8009152 <HAL_TIM_ConfigClockSource+0x15a>
 8009090:	2b20      	cmp	r3, #32
 8009092:	d867      	bhi.n	8009164 <HAL_TIM_ConfigClockSource+0x16c>
 8009094:	2b00      	cmp	r3, #0
 8009096:	d05c      	beq.n	8009152 <HAL_TIM_ConfigClockSource+0x15a>
 8009098:	2b10      	cmp	r3, #16
 800909a:	d05a      	beq.n	8009152 <HAL_TIM_ConfigClockSource+0x15a>
 800909c:	e062      	b.n	8009164 <HAL_TIM_ConfigClockSource+0x16c>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6818      	ldr	r0, [r3, #0]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	6899      	ldr	r1, [r3, #8]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	685a      	ldr	r2, [r3, #4]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	f000 fb19 	bl	80096e4 <TIM_ETR_SetConfig>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	60bb      	str	r3, [r7, #8]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090c0:	60bb      	str	r3, [r7, #8]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	609a      	str	r2, [r3, #8]
 80090ca:	e04f      	b.n	800916c <HAL_TIM_ConfigClockSource+0x174>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6818      	ldr	r0, [r3, #0]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	6899      	ldr	r1, [r3, #8]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	685a      	ldr	r2, [r3, #4]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f000 fb02 	bl	80096e4 <TIM_ETR_SetConfig>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689a      	ldr	r2, [r3, #8]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090ee:	609a      	str	r2, [r3, #8]
 80090f0:	e03c      	b.n	800916c <HAL_TIM_ConfigClockSource+0x174>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6818      	ldr	r0, [r3, #0]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	6859      	ldr	r1, [r3, #4]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	461a      	mov	r2, r3
 8009100:	f000 fa76 	bl	80095f0 <TIM_TI1_ConfigInputStage>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2150      	movs	r1, #80	; 0x50
 800910a:	4618      	mov	r0, r3
 800910c:	f000 facf 	bl	80096ae <TIM_ITRx_SetConfig>
 8009110:	e02c      	b.n	800916c <HAL_TIM_ConfigClockSource+0x174>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6818      	ldr	r0, [r3, #0]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	6859      	ldr	r1, [r3, #4]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	461a      	mov	r2, r3
 8009120:	f000 fa95 	bl	800964e <TIM_TI2_ConfigInputStage>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2160      	movs	r1, #96	; 0x60
 800912a:	4618      	mov	r0, r3
 800912c:	f000 fabf 	bl	80096ae <TIM_ITRx_SetConfig>
 8009130:	e01c      	b.n	800916c <HAL_TIM_ConfigClockSource+0x174>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	6859      	ldr	r1, [r3, #4]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	461a      	mov	r2, r3
 8009140:	f000 fa56 	bl	80095f0 <TIM_TI1_ConfigInputStage>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2140      	movs	r1, #64	; 0x40
 800914a:	4618      	mov	r0, r3
 800914c:	f000 faaf 	bl	80096ae <TIM_ITRx_SetConfig>
 8009150:	e00c      	b.n	800916c <HAL_TIM_ConfigClockSource+0x174>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4619      	mov	r1, r3
 800915c:	4610      	mov	r0, r2
 800915e:	f000 faa6 	bl	80096ae <TIM_ITRx_SetConfig>
 8009162:	e003      	b.n	800916c <HAL_TIM_ConfigClockSource+0x174>
 8009164:	2301      	movs	r3, #1
 8009166:	73fb      	strb	r3, [r7, #15]
 8009168:	e000      	b.n	800916c <HAL_TIM_ConfigClockSource+0x174>
 800916a:	bf00      	nop
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <HAL_TIM_OC_DelayElapsedCallback>:
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	bf00      	nop
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <HAL_TIM_IC_CaptureCallback>:
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	bf00      	nop
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <HAL_TIM_PWM_PulseFinishedCallback>:
 80091ae:	b480      	push	{r7}
 80091b0:	b083      	sub	sp, #12
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	bf00      	nop
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <HAL_TIM_TriggerCallback>:
 80091c2:	b480      	push	{r7}
 80091c4:	b083      	sub	sp, #12
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	bf00      	nop
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
	...

080091d8 <TIM_Base_SetConfig>:
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a34      	ldr	r2, [pc, #208]	; (80092bc <TIM_Base_SetConfig+0xe4>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d00f      	beq.n	8009210 <TIM_Base_SetConfig+0x38>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091f6:	d00b      	beq.n	8009210 <TIM_Base_SetConfig+0x38>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a31      	ldr	r2, [pc, #196]	; (80092c0 <TIM_Base_SetConfig+0xe8>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d007      	beq.n	8009210 <TIM_Base_SetConfig+0x38>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a30      	ldr	r2, [pc, #192]	; (80092c4 <TIM_Base_SetConfig+0xec>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d003      	beq.n	8009210 <TIM_Base_SetConfig+0x38>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a2f      	ldr	r2, [pc, #188]	; (80092c8 <TIM_Base_SetConfig+0xf0>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d108      	bne.n	8009222 <TIM_Base_SetConfig+0x4a>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	4313      	orrs	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a25      	ldr	r2, [pc, #148]	; (80092bc <TIM_Base_SetConfig+0xe4>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d01b      	beq.n	8009262 <TIM_Base_SetConfig+0x8a>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009230:	d017      	beq.n	8009262 <TIM_Base_SetConfig+0x8a>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a22      	ldr	r2, [pc, #136]	; (80092c0 <TIM_Base_SetConfig+0xe8>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d013      	beq.n	8009262 <TIM_Base_SetConfig+0x8a>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a21      	ldr	r2, [pc, #132]	; (80092c4 <TIM_Base_SetConfig+0xec>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00f      	beq.n	8009262 <TIM_Base_SetConfig+0x8a>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a20      	ldr	r2, [pc, #128]	; (80092c8 <TIM_Base_SetConfig+0xf0>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00b      	beq.n	8009262 <TIM_Base_SetConfig+0x8a>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a1f      	ldr	r2, [pc, #124]	; (80092cc <TIM_Base_SetConfig+0xf4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d007      	beq.n	8009262 <TIM_Base_SetConfig+0x8a>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a1e      	ldr	r2, [pc, #120]	; (80092d0 <TIM_Base_SetConfig+0xf8>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d003      	beq.n	8009262 <TIM_Base_SetConfig+0x8a>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a1d      	ldr	r2, [pc, #116]	; (80092d4 <TIM_Base_SetConfig+0xfc>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d108      	bne.n	8009274 <TIM_Base_SetConfig+0x9c>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009268:	60fb      	str	r3, [r7, #12]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	4313      	orrs	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	4313      	orrs	r3, r2
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	62da      	str	r2, [r3, #44]	; 0x2c
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	629a      	str	r2, [r3, #40]	; 0x28
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a08      	ldr	r2, [pc, #32]	; (80092bc <TIM_Base_SetConfig+0xe4>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d103      	bne.n	80092a8 <TIM_Base_SetConfig+0xd0>
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	691a      	ldr	r2, [r3, #16]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	631a      	str	r2, [r3, #48]	; 0x30
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	615a      	str	r2, [r3, #20]
 80092ae:	bf00      	nop
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	40010000 	.word	0x40010000
 80092c0:	40000400 	.word	0x40000400
 80092c4:	40000800 	.word	0x40000800
 80092c8:	40000c00 	.word	0x40000c00
 80092cc:	40014000 	.word	0x40014000
 80092d0:	40014400 	.word	0x40014400
 80092d4:	40014800 	.word	0x40014800

080092d8 <TIM_OC1_SetConfig>:
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	f023 0201 	bic.w	r2, r3, #1
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	621a      	str	r2, [r3, #32]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	617b      	str	r3, [r7, #20]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	613b      	str	r3, [r7, #16]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f023 0303 	bic.w	r3, r3, #3
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	4313      	orrs	r3, r2
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f023 0302 	bic.w	r3, r3, #2
 8009320:	617b      	str	r3, [r7, #20]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	4313      	orrs	r3, r2
 800932a:	617b      	str	r3, [r7, #20]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a1c      	ldr	r2, [pc, #112]	; (80093a0 <TIM_OC1_SetConfig+0xc8>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d10c      	bne.n	800934e <TIM_OC1_SetConfig+0x76>
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f023 0308 	bic.w	r3, r3, #8
 800933a:	617b      	str	r3, [r7, #20]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	4313      	orrs	r3, r2
 8009344:	617b      	str	r3, [r7, #20]
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f023 0304 	bic.w	r3, r3, #4
 800934c:	617b      	str	r3, [r7, #20]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a13      	ldr	r2, [pc, #76]	; (80093a0 <TIM_OC1_SetConfig+0xc8>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d111      	bne.n	800937a <TIM_OC1_SetConfig+0xa2>
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800935c:	613b      	str	r3, [r7, #16]
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009364:	613b      	str	r3, [r7, #16]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	4313      	orrs	r3, r2
 800936e:	613b      	str	r3, [r7, #16]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	4313      	orrs	r3, r2
 8009378:	613b      	str	r3, [r7, #16]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	605a      	str	r2, [r3, #4]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	619a      	str	r2, [r3, #24]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	635a      	str	r2, [r3, #52]	; 0x34
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	621a      	str	r2, [r3, #32]
 8009394:	bf00      	nop
 8009396:	371c      	adds	r7, #28
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr
 80093a0:	40010000 	.word	0x40010000

080093a4 <TIM_OC2_SetConfig>:
 80093a4:	b480      	push	{r7}
 80093a6:	b087      	sub	sp, #28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	f023 0210 	bic.w	r2, r3, #16
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	621a      	str	r2, [r3, #32]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	617b      	str	r3, [r7, #20]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	613b      	str	r3, [r7, #16]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093d2:	60fb      	str	r3, [r7, #12]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	021b      	lsls	r3, r3, #8
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f023 0320 	bic.w	r3, r3, #32
 80093ee:	617b      	str	r3, [r7, #20]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	011b      	lsls	r3, r3, #4
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a1e      	ldr	r2, [pc, #120]	; (8009478 <TIM_OC2_SetConfig+0xd4>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d10d      	bne.n	8009420 <TIM_OC2_SetConfig+0x7c>
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	011b      	lsls	r3, r3, #4
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	4313      	orrs	r3, r2
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800941e:	617b      	str	r3, [r7, #20]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a15      	ldr	r2, [pc, #84]	; (8009478 <TIM_OC2_SetConfig+0xd4>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d113      	bne.n	8009450 <TIM_OC2_SetConfig+0xac>
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800942e:	613b      	str	r3, [r7, #16]
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009436:	613b      	str	r3, [r7, #16]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	4313      	orrs	r3, r2
 8009442:	613b      	str	r3, [r7, #16]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	4313      	orrs	r3, r2
 800944e:	613b      	str	r3, [r7, #16]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	605a      	str	r2, [r3, #4]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	619a      	str	r2, [r3, #24]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	639a      	str	r2, [r3, #56]	; 0x38
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	621a      	str	r2, [r3, #32]
 800946a:	bf00      	nop
 800946c:	371c      	adds	r7, #28
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	40010000 	.word	0x40010000

0800947c <TIM_OC3_SetConfig>:
 800947c:	b480      	push	{r7}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	621a      	str	r2, [r3, #32]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	617b      	str	r3, [r7, #20]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	613b      	str	r3, [r7, #16]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094aa:	60fb      	str	r3, [r7, #12]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f023 0303 	bic.w	r3, r3, #3
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094c4:	617b      	str	r3, [r7, #20]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	021b      	lsls	r3, r3, #8
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	617b      	str	r3, [r7, #20]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a1d      	ldr	r2, [pc, #116]	; (800954c <TIM_OC3_SetConfig+0xd0>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d10d      	bne.n	80094f6 <TIM_OC3_SetConfig+0x7a>
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	021b      	lsls	r3, r3, #8
 80094e8:	697a      	ldr	r2, [r7, #20]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	617b      	str	r3, [r7, #20]
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094f4:	617b      	str	r3, [r7, #20]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a14      	ldr	r2, [pc, #80]	; (800954c <TIM_OC3_SetConfig+0xd0>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d113      	bne.n	8009526 <TIM_OC3_SetConfig+0xaa>
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009504:	613b      	str	r3, [r7, #16]
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800950c:	613b      	str	r3, [r7, #16]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	011b      	lsls	r3, r3, #4
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	4313      	orrs	r3, r2
 8009518:	613b      	str	r3, [r7, #16]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	011b      	lsls	r3, r3, #4
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	4313      	orrs	r3, r2
 8009524:	613b      	str	r3, [r7, #16]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	605a      	str	r2, [r3, #4]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	61da      	str	r2, [r3, #28]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	63da      	str	r2, [r3, #60]	; 0x3c
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	621a      	str	r2, [r3, #32]
 8009540:	bf00      	nop
 8009542:	371c      	adds	r7, #28
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	40010000 	.word	0x40010000

08009550 <TIM_OC4_SetConfig>:
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	621a      	str	r2, [r3, #32]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	613b      	str	r3, [r7, #16]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	617b      	str	r3, [r7, #20]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	021b      	lsls	r3, r3, #8
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	4313      	orrs	r3, r2
 8009592:	60fb      	str	r3, [r7, #12]
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800959a:	613b      	str	r3, [r7, #16]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	031b      	lsls	r3, r3, #12
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	613b      	str	r3, [r7, #16]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a10      	ldr	r2, [pc, #64]	; (80095ec <TIM_OC4_SetConfig+0x9c>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d109      	bne.n	80095c4 <TIM_OC4_SetConfig+0x74>
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095b6:	617b      	str	r3, [r7, #20]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	019b      	lsls	r3, r3, #6
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	617b      	str	r3, [r7, #20]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	697a      	ldr	r2, [r7, #20]
 80095c8:	605a      	str	r2, [r3, #4]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	61da      	str	r2, [r3, #28]
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	641a      	str	r2, [r3, #64]	; 0x40
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	621a      	str	r2, [r3, #32]
 80095de:	bf00      	nop
 80095e0:	371c      	adds	r7, #28
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	40010000 	.word	0x40010000

080095f0 <TIM_TI1_ConfigInputStage>:
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a1b      	ldr	r3, [r3, #32]
 8009600:	617b      	str	r3, [r7, #20]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	f023 0201 	bic.w	r2, r3, #1
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	621a      	str	r2, [r3, #32]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	613b      	str	r3, [r7, #16]
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800961a:	613b      	str	r3, [r7, #16]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	011b      	lsls	r3, r3, #4
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	4313      	orrs	r3, r2
 8009624:	613b      	str	r3, [r7, #16]
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f023 030a 	bic.w	r3, r3, #10
 800962c:	617b      	str	r3, [r7, #20]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	4313      	orrs	r3, r2
 8009634:	617b      	str	r3, [r7, #20]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	619a      	str	r2, [r3, #24]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	621a      	str	r2, [r3, #32]
 8009642:	bf00      	nop
 8009644:	371c      	adds	r7, #28
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <TIM_TI2_ConfigInputStage>:
 800964e:	b480      	push	{r7}
 8009650:	b087      	sub	sp, #28
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	60b9      	str	r1, [r7, #8]
 8009658:	607a      	str	r2, [r7, #4]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	f023 0210 	bic.w	r2, r3, #16
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	621a      	str	r2, [r3, #32]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	617b      	str	r3, [r7, #20]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	613b      	str	r3, [r7, #16]
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009678:	617b      	str	r3, [r7, #20]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	031b      	lsls	r3, r3, #12
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	4313      	orrs	r3, r2
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800968a:	613b      	str	r3, [r7, #16]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	4313      	orrs	r3, r2
 8009694:	613b      	str	r3, [r7, #16]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	619a      	str	r2, [r3, #24]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	621a      	str	r2, [r3, #32]
 80096a2:	bf00      	nop
 80096a4:	371c      	adds	r7, #28
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <TIM_ITRx_SetConfig>:
 80096ae:	b480      	push	{r7}
 80096b0:	b085      	sub	sp, #20
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	6039      	str	r1, [r7, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c4:	60fb      	str	r3, [r7, #12]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	f043 0307 	orr.w	r3, r3, #7
 80096d0:	60fb      	str	r3, [r7, #12]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	609a      	str	r2, [r3, #8]
 80096d8:	bf00      	nop
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <TIM_ETR_SetConfig>:
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
 80096f0:	603b      	str	r3, [r7, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	617b      	str	r3, [r7, #20]
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096fe:	617b      	str	r3, [r7, #20]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	021a      	lsls	r2, r3, #8
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	431a      	orrs	r2, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	4313      	orrs	r3, r2
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	4313      	orrs	r3, r2
 8009710:	617b      	str	r3, [r7, #20]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	609a      	str	r2, [r3, #8]
 8009718:	bf00      	nop
 800971a:	371c      	adds	r7, #28
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <TIM_CCxChannelCmd>:
 8009724:	b480      	push	{r7}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	f003 031f 	and.w	r3, r3, #31
 8009736:	2201      	movs	r2, #1
 8009738:	fa02 f303 	lsl.w	r3, r2, r3
 800973c:	617b      	str	r3, [r7, #20]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6a1a      	ldr	r2, [r3, #32]
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	43db      	mvns	r3, r3
 8009746:	401a      	ands	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	621a      	str	r2, [r3, #32]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6a1a      	ldr	r2, [r3, #32]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f003 031f 	and.w	r3, r3, #31
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	fa01 f303 	lsl.w	r3, r1, r3
 800975c:	431a      	orrs	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	621a      	str	r2, [r3, #32]
 8009762:	bf00      	nop
 8009764:	371c      	adds	r7, #28
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
	...

08009770 <HAL_TIMEx_MasterConfigSynchronization>:
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009780:	2b01      	cmp	r3, #1
 8009782:	d101      	bne.n	8009788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009784:	2302      	movs	r3, #2
 8009786:	e050      	b.n	800982a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2202      	movs	r2, #2
 8009794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	60bb      	str	r3, [r7, #8]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ae:	60fb      	str	r3, [r7, #12]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	60fb      	str	r3, [r7, #12]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	605a      	str	r2, [r3, #4]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a1c      	ldr	r2, [pc, #112]	; (8009838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d018      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097d4:	d013      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a18      	ldr	r2, [pc, #96]	; (800983c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d00e      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a16      	ldr	r2, [pc, #88]	; (8009840 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d009      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a15      	ldr	r2, [pc, #84]	; (8009844 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d004      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a13      	ldr	r2, [pc, #76]	; (8009848 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d10c      	bne.n	8009818 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009804:	60bb      	str	r3, [r7, #8]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	4313      	orrs	r3, r2
 800980e:	60bb      	str	r3, [r7, #8]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	609a      	str	r2, [r3, #8]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009828:	2300      	movs	r3, #0
 800982a:	4618      	mov	r0, r3
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	40010000 	.word	0x40010000
 800983c:	40000400 	.word	0x40000400
 8009840:	40000800 	.word	0x40000800
 8009844:	40000c00 	.word	0x40000c00
 8009848:	40014000 	.word	0x40014000

0800984c <HAL_TIMEx_CommutCallback>:
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <HAL_TIMEx_BreakCallback>:
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_UART_Init>:
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <HAL_UART_Init+0x12>
 8009882:	2301      	movs	r3, #1
 8009884:	e03f      	b.n	8009906 <HAL_UART_Init+0x92>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b00      	cmp	r3, #0
 8009890:	d106      	bne.n	80098a0 <HAL_UART_Init+0x2c>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7fb f9d0 	bl	8004c40 <HAL_UART_MspInit>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2224      	movs	r2, #36	; 0x24
 80098a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68da      	ldr	r2, [r3, #12]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098b6:	60da      	str	r2, [r3, #12]
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fe4b 	bl	800a554 <UART_SetConfig>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	691a      	ldr	r2, [r3, #16]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098cc:	611a      	str	r2, [r3, #16]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	695a      	ldr	r2, [r3, #20]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098dc:	615a      	str	r2, [r3, #20]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68da      	ldr	r2, [r3, #12]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098ec:	60da      	str	r2, [r3, #12]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	641a      	str	r2, [r3, #64]	; 0x40
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2220      	movs	r2, #32
 80098f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2220      	movs	r2, #32
 8009900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009904:	2300      	movs	r3, #0
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <HAL_UART_DeInit>:
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d101      	bne.n	8009920 <HAL_UART_DeInit+0x12>
 800991c:	2301      	movs	r3, #1
 800991e:	e021      	b.n	8009964 <HAL_UART_DeInit+0x56>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2224      	movs	r2, #36	; 0x24
 8009924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009936:	60da      	str	r2, [r3, #12]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7fb fa37 	bl	8004dac <HAL_UART_MspDeInit>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	641a      	str	r2, [r3, #64]	; 0x40
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	631a      	str	r2, [r3, #48]	; 0x30
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009962:	2300      	movs	r3, #0
 8009964:	4618      	mov	r0, r3
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_UART_Transmit>:
 800996c:	b580      	push	{r7, lr}
 800996e:	b08a      	sub	sp, #40	; 0x28
 8009970:	af02      	add	r7, sp, #8
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	4613      	mov	r3, r2
 800997a:	80fb      	strh	r3, [r7, #6]
 800997c:	2300      	movs	r3, #0
 800997e:	617b      	str	r3, [r7, #20]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b20      	cmp	r3, #32
 800998a:	d17c      	bne.n	8009a86 <HAL_UART_Transmit+0x11a>
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d002      	beq.n	8009998 <HAL_UART_Transmit+0x2c>
 8009992:	88fb      	ldrh	r3, [r7, #6]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <HAL_UART_Transmit+0x30>
 8009998:	2301      	movs	r3, #1
 800999a:	e075      	b.n	8009a88 <HAL_UART_Transmit+0x11c>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d101      	bne.n	80099aa <HAL_UART_Transmit+0x3e>
 80099a6:	2302      	movs	r3, #2
 80099a8:	e06e      	b.n	8009a88 <HAL_UART_Transmit+0x11c>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	641a      	str	r2, [r3, #64]	; 0x40
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2221      	movs	r2, #33	; 0x21
 80099bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80099c0:	f7fb fc14 	bl	80051ec <HAL_GetTick>
 80099c4:	6178      	str	r0, [r7, #20]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	88fa      	ldrh	r2, [r7, #6]
 80099ca:	849a      	strh	r2, [r3, #36]	; 0x24
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	88fa      	ldrh	r2, [r7, #6]
 80099d0:	84da      	strh	r2, [r3, #38]	; 0x26
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099da:	d108      	bne.n	80099ee <HAL_UART_Transmit+0x82>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d104      	bne.n	80099ee <HAL_UART_Transmit+0x82>
 80099e4:	2300      	movs	r3, #0
 80099e6:	61fb      	str	r3, [r7, #28]
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	61bb      	str	r3, [r7, #24]
 80099ec:	e003      	b.n	80099f6 <HAL_UART_Transmit+0x8a>
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	61fb      	str	r3, [r7, #28]
 80099f2:	2300      	movs	r3, #0
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80099fe:	e02a      	b.n	8009a56 <HAL_UART_Transmit+0xea>
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2200      	movs	r2, #0
 8009a08:	2180      	movs	r1, #128	; 0x80
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f000 fb9a 	bl	800a144 <UART_WaitOnFlagUntilTimeout>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <HAL_UART_Transmit+0xae>
 8009a16:	2303      	movs	r3, #3
 8009a18:	e036      	b.n	8009a88 <HAL_UART_Transmit+0x11c>
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10b      	bne.n	8009a38 <HAL_UART_Transmit+0xcc>
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	461a      	mov	r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a2e:	605a      	str	r2, [r3, #4]
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	3302      	adds	r3, #2
 8009a34:	61bb      	str	r3, [r7, #24]
 8009a36:	e007      	b.n	8009a48 <HAL_UART_Transmit+0xdc>
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	781a      	ldrb	r2, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	605a      	str	r2, [r3, #4]
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	3301      	adds	r3, #1
 8009a46:	61fb      	str	r3, [r7, #28]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	84da      	strh	r2, [r3, #38]	; 0x26
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1cf      	bne.n	8009a00 <HAL_UART_Transmit+0x94>
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	2200      	movs	r2, #0
 8009a68:	2140      	movs	r1, #64	; 0x40
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 fb6a 	bl	800a144 <UART_WaitOnFlagUntilTimeout>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <HAL_UART_Transmit+0x10e>
 8009a76:	2303      	movs	r3, #3
 8009a78:	e006      	b.n	8009a88 <HAL_UART_Transmit+0x11c>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2220      	movs	r2, #32
 8009a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009a82:	2300      	movs	r3, #0
 8009a84:	e000      	b.n	8009a88 <HAL_UART_Transmit+0x11c>
 8009a86:	2302      	movs	r3, #2
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3720      	adds	r7, #32
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <HAL_UART_Receive>:
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08a      	sub	sp, #40	; 0x28
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	80fb      	strh	r3, [r7, #6]
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	617b      	str	r3, [r7, #20]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b20      	cmp	r3, #32
 8009aae:	f040 808c 	bne.w	8009bca <HAL_UART_Receive+0x13a>
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <HAL_UART_Receive+0x2e>
 8009ab8:	88fb      	ldrh	r3, [r7, #6]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <HAL_UART_Receive+0x32>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e084      	b.n	8009bcc <HAL_UART_Receive+0x13c>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d101      	bne.n	8009ad0 <HAL_UART_Receive+0x40>
 8009acc:	2302      	movs	r3, #2
 8009ace:	e07d      	b.n	8009bcc <HAL_UART_Receive+0x13c>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2200      	movs	r2, #0
 8009adc:	641a      	str	r2, [r3, #64]	; 0x40
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2222      	movs	r2, #34	; 0x22
 8009ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	631a      	str	r2, [r3, #48]	; 0x30
 8009aec:	f7fb fb7e 	bl	80051ec <HAL_GetTick>
 8009af0:	6178      	str	r0, [r7, #20]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	88fa      	ldrh	r2, [r7, #6]
 8009af6:	859a      	strh	r2, [r3, #44]	; 0x2c
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	88fa      	ldrh	r2, [r7, #6]
 8009afc:	85da      	strh	r2, [r3, #46]	; 0x2e
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b06:	d108      	bne.n	8009b1a <HAL_UART_Receive+0x8a>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d104      	bne.n	8009b1a <HAL_UART_Receive+0x8a>
 8009b10:	2300      	movs	r3, #0
 8009b12:	61fb      	str	r3, [r7, #28]
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	61bb      	str	r3, [r7, #24]
 8009b18:	e003      	b.n	8009b22 <HAL_UART_Receive+0x92>
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	61fb      	str	r3, [r7, #28]
 8009b1e:	2300      	movs	r3, #0
 8009b20:	61bb      	str	r3, [r7, #24]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009b2a:	e043      	b.n	8009bb4 <HAL_UART_Receive+0x124>
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	2200      	movs	r2, #0
 8009b34:	2120      	movs	r1, #32
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f000 fb04 	bl	800a144 <UART_WaitOnFlagUntilTimeout>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <HAL_UART_Receive+0xb6>
 8009b42:	2303      	movs	r3, #3
 8009b44:	e042      	b.n	8009bcc <HAL_UART_Receive+0x13c>
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10c      	bne.n	8009b66 <HAL_UART_Receive+0xd6>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	69bb      	ldr	r3, [r7, #24]
 8009b5c:	801a      	strh	r2, [r3, #0]
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	3302      	adds	r3, #2
 8009b62:	61bb      	str	r3, [r7, #24]
 8009b64:	e01f      	b.n	8009ba6 <HAL_UART_Receive+0x116>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b6e:	d007      	beq.n	8009b80 <HAL_UART_Receive+0xf0>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <HAL_UART_Receive+0xfe>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d106      	bne.n	8009b8e <HAL_UART_Receive+0xfe>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	b2da      	uxtb	r2, r3
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	701a      	strb	r2, [r3, #0]
 8009b8c:	e008      	b.n	8009ba0 <HAL_UART_Receive+0x110>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	701a      	strb	r2, [r3, #0]
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	61fb      	str	r3, [r7, #28]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	3b01      	subs	r3, #1
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	85da      	strh	r2, [r3, #46]	; 0x2e
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1b6      	bne.n	8009b2c <HAL_UART_Receive+0x9c>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	e000      	b.n	8009bcc <HAL_UART_Receive+0x13c>
 8009bca:	2302      	movs	r3, #2
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3720      	adds	r7, #32
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <HAL_UART_IRQHandler>:
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b0ba      	sub	sp, #232	; 0xe8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c00:	2300      	movs	r3, #0
 8009c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c0a:	f003 030f 	and.w	r3, r3, #15
 8009c0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10f      	bne.n	8009c3a <HAL_UART_IRQHandler+0x66>
 8009c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c1e:	f003 0320 	and.w	r3, r3, #32
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d009      	beq.n	8009c3a <HAL_UART_IRQHandler+0x66>
 8009c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c2a:	f003 0320 	and.w	r3, r3, #32
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d003      	beq.n	8009c3a <HAL_UART_IRQHandler+0x66>
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fbd3 	bl	800a3de <UART_Receive_IT>
 8009c38:	e256      	b.n	800a0e8 <HAL_UART_IRQHandler+0x514>
 8009c3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 80de 	beq.w	8009e00 <HAL_UART_IRQHandler+0x22c>
 8009c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d106      	bne.n	8009c5e <HAL_UART_IRQHandler+0x8a>
 8009c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c54:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 80d1 	beq.w	8009e00 <HAL_UART_IRQHandler+0x22c>
 8009c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00b      	beq.n	8009c82 <HAL_UART_IRQHandler+0xae>
 8009c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d005      	beq.n	8009c82 <HAL_UART_IRQHandler+0xae>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7a:	f043 0201 	orr.w	r2, r3, #1
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	641a      	str	r2, [r3, #64]	; 0x40
 8009c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c86:	f003 0304 	and.w	r3, r3, #4
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00b      	beq.n	8009ca6 <HAL_UART_IRQHandler+0xd2>
 8009c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d005      	beq.n	8009ca6 <HAL_UART_IRQHandler+0xd2>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9e:	f043 0202 	orr.w	r2, r3, #2
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8009ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009caa:	f003 0302 	and.w	r3, r3, #2
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00b      	beq.n	8009cca <HAL_UART_IRQHandler+0xf6>
 8009cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cb6:	f003 0301 	and.w	r3, r3, #1
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d005      	beq.n	8009cca <HAL_UART_IRQHandler+0xf6>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc2:	f043 0204 	orr.w	r2, r3, #4
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	641a      	str	r2, [r3, #64]	; 0x40
 8009cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cce:	f003 0308 	and.w	r3, r3, #8
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d011      	beq.n	8009cfa <HAL_UART_IRQHandler+0x126>
 8009cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cda:	f003 0320 	and.w	r3, r3, #32
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d105      	bne.n	8009cee <HAL_UART_IRQHandler+0x11a>
 8009ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d005      	beq.n	8009cfa <HAL_UART_IRQHandler+0x126>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf2:	f043 0208 	orr.w	r2, r3, #8
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	641a      	str	r2, [r3, #64]	; 0x40
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 81ed 	beq.w	800a0de <HAL_UART_IRQHandler+0x50a>
 8009d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d08:	f003 0320 	and.w	r3, r3, #32
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d008      	beq.n	8009d22 <HAL_UART_IRQHandler+0x14e>
 8009d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d14:	f003 0320 	and.w	r3, r3, #32
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d002      	beq.n	8009d22 <HAL_UART_IRQHandler+0x14e>
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fb5e 	bl	800a3de <UART_Receive_IT>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	695b      	ldr	r3, [r3, #20]
 8009d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2c:	2b40      	cmp	r3, #64	; 0x40
 8009d2e:	bf0c      	ite	eq
 8009d30:	2301      	moveq	r3, #1
 8009d32:	2300      	movne	r3, #0
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	f003 0308 	and.w	r3, r3, #8
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d103      	bne.n	8009d4e <HAL_UART_IRQHandler+0x17a>
 8009d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d04f      	beq.n	8009dee <HAL_UART_IRQHandler+0x21a>
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fa66 	bl	800a220 <UART_EndRxTransfer>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d5e:	2b40      	cmp	r3, #64	; 0x40
 8009d60:	d141      	bne.n	8009de6 <HAL_UART_IRQHandler+0x212>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3314      	adds	r3, #20
 8009d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d70:	e853 3f00 	ldrex	r3, [r3]
 8009d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3314      	adds	r3, #20
 8009d8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009d8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009d92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009d96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009d9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009da6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1d9      	bne.n	8009d62 <HAL_UART_IRQHandler+0x18e>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d013      	beq.n	8009dde <HAL_UART_IRQHandler+0x20a>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dba:	4a7d      	ldr	r2, [pc, #500]	; (8009fb0 <HAL_UART_IRQHandler+0x3dc>)
 8009dbc:	651a      	str	r2, [r3, #80]	; 0x50
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fb fd02 	bl	80057cc <HAL_DMA_Abort_IT>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d016      	beq.n	8009dfc <HAL_UART_IRQHandler+0x228>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009dd8:	4610      	mov	r0, r2
 8009dda:	4798      	blx	r3
 8009ddc:	e00e      	b.n	8009dfc <HAL_UART_IRQHandler+0x228>
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f99a 	bl	800a118 <HAL_UART_ErrorCallback>
 8009de4:	e00a      	b.n	8009dfc <HAL_UART_IRQHandler+0x228>
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f996 	bl	800a118 <HAL_UART_ErrorCallback>
 8009dec:	e006      	b.n	8009dfc <HAL_UART_IRQHandler+0x228>
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f992 	bl	800a118 <HAL_UART_ErrorCallback>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	641a      	str	r2, [r3, #64]	; 0x40
 8009dfa:	e170      	b.n	800a0de <HAL_UART_IRQHandler+0x50a>
 8009dfc:	bf00      	nop
 8009dfe:	e16e      	b.n	800a0de <HAL_UART_IRQHandler+0x50a>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	f040 814a 	bne.w	800a09e <HAL_UART_IRQHandler+0x4ca>
 8009e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e0e:	f003 0310 	and.w	r3, r3, #16
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 8143 	beq.w	800a09e <HAL_UART_IRQHandler+0x4ca>
 8009e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e1c:	f003 0310 	and.w	r3, r3, #16
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 813c 	beq.w	800a09e <HAL_UART_IRQHandler+0x4ca>
 8009e26:	2300      	movs	r3, #0
 8009e28:	60bb      	str	r3, [r7, #8]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	60bb      	str	r3, [r7, #8]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	60bb      	str	r3, [r7, #8]
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e46:	2b40      	cmp	r3, #64	; 0x40
 8009e48:	f040 80b4 	bne.w	8009fb4 <HAL_UART_IRQHandler+0x3e0>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8009e58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 8140 	beq.w	800a0e2 <HAL_UART_IRQHandler+0x50e>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	f080 8139 	bcs.w	800a0e2 <HAL_UART_IRQHandler+0x50e>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e76:	85da      	strh	r2, [r3, #46]	; 0x2e
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7c:	69db      	ldr	r3, [r3, #28]
 8009e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e82:	f000 8088 	beq.w	8009f96 <HAL_UART_IRQHandler+0x3c2>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	330c      	adds	r3, #12
 8009e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	330c      	adds	r3, #12
 8009eae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009eb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009eb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009eba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009ebe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ec2:	e841 2300 	strex	r3, r2, [r1]
 8009ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1d9      	bne.n	8009e86 <HAL_UART_IRQHandler+0x2b2>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3314      	adds	r3, #20
 8009ed8:	677b      	str	r3, [r7, #116]	; 0x74
 8009eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	673b      	str	r3, [r7, #112]	; 0x70
 8009ee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ee4:	f023 0301 	bic.w	r3, r3, #1
 8009ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3314      	adds	r3, #20
 8009ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009ef6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009efa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009efc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009efe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f02:	e841 2300 	strex	r3, r2, [r1]
 8009f06:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1e1      	bne.n	8009ed2 <HAL_UART_IRQHandler+0x2fe>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3314      	adds	r3, #20
 8009f14:	663b      	str	r3, [r7, #96]	; 0x60
 8009f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3314      	adds	r3, #20
 8009f2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009f34:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f3a:	e841 2300 	strex	r3, r2, [r1]
 8009f3e:	667b      	str	r3, [r7, #100]	; 0x64
 8009f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e3      	bne.n	8009f0e <HAL_UART_IRQHandler+0x33a>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2220      	movs	r2, #32
 8009f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	631a      	str	r2, [r3, #48]	; 0x30
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	330c      	adds	r3, #12
 8009f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f5e:	e853 3f00 	ldrex	r3, [r3]
 8009f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f66:	f023 0310 	bic.w	r3, r3, #16
 8009f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	330c      	adds	r3, #12
 8009f74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009f78:	65ba      	str	r2, [r7, #88]	; 0x58
 8009f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8009f7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f80:	e841 2300 	strex	r3, r2, [r1]
 8009f84:	653b      	str	r3, [r7, #80]	; 0x50
 8009f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1e3      	bne.n	8009f54 <HAL_UART_IRQHandler+0x380>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fb fbab 	bl	80056ec <HAL_DMA_Abort>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f8c0 	bl	800a12c <HAL_UARTEx_RxEventCallback>
 8009fac:	e099      	b.n	800a0e2 <HAL_UART_IRQHandler+0x50e>
 8009fae:	bf00      	nop
 8009fb0:	0800a2e7 	.word	0x0800a2e7
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f000 808b 	beq.w	800a0e6 <HAL_UART_IRQHandler+0x512>
 8009fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 8086 	beq.w	800a0e6 <HAL_UART_IRQHandler+0x512>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	330c      	adds	r3, #12
 8009fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe4:	e853 3f00 	ldrex	r3, [r3]
 8009fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8009fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	330c      	adds	r3, #12
 8009ffa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009ffe:	647a      	str	r2, [r7, #68]	; 0x44
 800a000:	643b      	str	r3, [r7, #64]	; 0x40
 800a002:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a006:	e841 2300 	strex	r3, r2, [r1]
 800a00a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e3      	bne.n	8009fda <HAL_UART_IRQHandler+0x406>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3314      	adds	r3, #20
 800a018:	627b      	str	r3, [r7, #36]	; 0x24
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	e853 3f00 	ldrex	r3, [r3]
 800a020:	623b      	str	r3, [r7, #32]
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	f023 0301 	bic.w	r3, r3, #1
 800a028:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	3314      	adds	r3, #20
 800a032:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a036:	633a      	str	r2, [r7, #48]	; 0x30
 800a038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a03a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a03c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	62bb      	str	r3, [r7, #40]	; 0x28
 800a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1e3      	bne.n	800a012 <HAL_UART_IRQHandler+0x43e>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2220      	movs	r2, #32
 800a04e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	631a      	str	r2, [r3, #48]	; 0x30
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	330c      	adds	r3, #12
 800a05e:	613b      	str	r3, [r7, #16]
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	e853 3f00 	ldrex	r3, [r3]
 800a066:	60fb      	str	r3, [r7, #12]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f023 0310 	bic.w	r3, r3, #16
 800a06e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	330c      	adds	r3, #12
 800a078:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a07c:	61fa      	str	r2, [r7, #28]
 800a07e:	61bb      	str	r3, [r7, #24]
 800a080:	69b9      	ldr	r1, [r7, #24]
 800a082:	69fa      	ldr	r2, [r7, #28]
 800a084:	e841 2300 	strex	r3, r2, [r1]
 800a088:	617b      	str	r3, [r7, #20]
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e3      	bne.n	800a058 <HAL_UART_IRQHandler+0x484>
 800a090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f848 	bl	800a12c <HAL_UARTEx_RxEventCallback>
 800a09c:	e023      	b.n	800a0e6 <HAL_UART_IRQHandler+0x512>
 800a09e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d009      	beq.n	800a0be <HAL_UART_IRQHandler+0x4ea>
 800a0aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <HAL_UART_IRQHandler+0x4ea>
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f929 	bl	800a30e <UART_Transmit_IT>
 800a0bc:	e014      	b.n	800a0e8 <HAL_UART_IRQHandler+0x514>
 800a0be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00e      	beq.n	800a0e8 <HAL_UART_IRQHandler+0x514>
 800a0ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d008      	beq.n	800a0e8 <HAL_UART_IRQHandler+0x514>
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f969 	bl	800a3ae <UART_EndTransmit_IT>
 800a0dc:	e004      	b.n	800a0e8 <HAL_UART_IRQHandler+0x514>
 800a0de:	bf00      	nop
 800a0e0:	e002      	b.n	800a0e8 <HAL_UART_IRQHandler+0x514>
 800a0e2:	bf00      	nop
 800a0e4:	e000      	b.n	800a0e8 <HAL_UART_IRQHandler+0x514>
 800a0e6:	bf00      	nop
 800a0e8:	37e8      	adds	r7, #232	; 0xe8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop

0800a0f0 <HAL_UART_TxCpltCallback>:
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_UART_RxCpltCallback>:
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_UART_ErrorCallback>:
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_UARTEx_RxEventCallback>:
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	460b      	mov	r3, r1
 800a136:	807b      	strh	r3, [r7, #2]
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <UART_WaitOnFlagUntilTimeout>:
 800a144:	b580      	push	{r7, lr}
 800a146:	b090      	sub	sp, #64	; 0x40
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	603b      	str	r3, [r7, #0]
 800a150:	4613      	mov	r3, r2
 800a152:	71fb      	strb	r3, [r7, #7]
 800a154:	e050      	b.n	800a1f8 <UART_WaitOnFlagUntilTimeout+0xb4>
 800a156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a15c:	d04c      	beq.n	800a1f8 <UART_WaitOnFlagUntilTimeout+0xb4>
 800a15e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a160:	2b00      	cmp	r3, #0
 800a162:	d007      	beq.n	800a174 <UART_WaitOnFlagUntilTimeout+0x30>
 800a164:	f7fb f842 	bl	80051ec <HAL_GetTick>
 800a168:	4602      	mov	r2, r0
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	1ad3      	subs	r3, r2, r3
 800a16e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a170:	429a      	cmp	r2, r3
 800a172:	d241      	bcs.n	800a1f8 <UART_WaitOnFlagUntilTimeout+0xb4>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	330c      	adds	r3, #12
 800a17a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17e:	e853 3f00 	ldrex	r3, [r3]
 800a182:	627b      	str	r3, [r7, #36]	; 0x24
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a18a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	330c      	adds	r3, #12
 800a192:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a194:	637a      	str	r2, [r7, #52]	; 0x34
 800a196:	633b      	str	r3, [r7, #48]	; 0x30
 800a198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a19a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a19c:	e841 2300 	strex	r3, r2, [r1]
 800a1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1e5      	bne.n	800a174 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	3314      	adds	r3, #20
 800a1ae:	617b      	str	r3, [r7, #20]
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	e853 3f00 	ldrex	r3, [r3]
 800a1b6:	613b      	str	r3, [r7, #16]
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	f023 0301 	bic.w	r3, r3, #1
 800a1be:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3314      	adds	r3, #20
 800a1c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1c8:	623a      	str	r2, [r7, #32]
 800a1ca:	61fb      	str	r3, [r7, #28]
 800a1cc:	69f9      	ldr	r1, [r7, #28]
 800a1ce:	6a3a      	ldr	r2, [r7, #32]
 800a1d0:	e841 2300 	strex	r3, r2, [r1]
 800a1d4:	61bb      	str	r3, [r7, #24]
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1e5      	bne.n	800a1a8 <UART_WaitOnFlagUntilTimeout+0x64>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2220      	movs	r2, #32
 800a1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e00f      	b.n	800a218 <UART_WaitOnFlagUntilTimeout+0xd4>
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	4013      	ands	r3, r2
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	429a      	cmp	r2, r3
 800a206:	bf0c      	ite	eq
 800a208:	2301      	moveq	r3, #1
 800a20a:	2300      	movne	r3, #0
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	461a      	mov	r2, r3
 800a210:	79fb      	ldrb	r3, [r7, #7]
 800a212:	429a      	cmp	r2, r3
 800a214:	d09f      	beq.n	800a156 <UART_WaitOnFlagUntilTimeout+0x12>
 800a216:	2300      	movs	r3, #0
 800a218:	4618      	mov	r0, r3
 800a21a:	3740      	adds	r7, #64	; 0x40
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <UART_EndRxTransfer>:
 800a220:	b480      	push	{r7}
 800a222:	b095      	sub	sp, #84	; 0x54
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	330c      	adds	r3, #12
 800a22e:	637b      	str	r3, [r7, #52]	; 0x34
 800a230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a232:	e853 3f00 	ldrex	r3, [r3]
 800a236:	633b      	str	r3, [r7, #48]	; 0x30
 800a238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a23e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	330c      	adds	r3, #12
 800a246:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a248:	643a      	str	r2, [r7, #64]	; 0x40
 800a24a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a24c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a24e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a250:	e841 2300 	strex	r3, r2, [r1]
 800a254:	63bb      	str	r3, [r7, #56]	; 0x38
 800a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1e5      	bne.n	800a228 <UART_EndRxTransfer+0x8>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	3314      	adds	r3, #20
 800a262:	623b      	str	r3, [r7, #32]
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	e853 3f00 	ldrex	r3, [r3]
 800a26a:	61fb      	str	r3, [r7, #28]
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	f023 0301 	bic.w	r3, r3, #1
 800a272:	64bb      	str	r3, [r7, #72]	; 0x48
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3314      	adds	r3, #20
 800a27a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a27c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a27e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a284:	e841 2300 	strex	r3, r2, [r1]
 800a288:	627b      	str	r3, [r7, #36]	; 0x24
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1e5      	bne.n	800a25c <UART_EndRxTransfer+0x3c>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a294:	2b01      	cmp	r3, #1
 800a296:	d119      	bne.n	800a2cc <UART_EndRxTransfer+0xac>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	330c      	adds	r3, #12
 800a29e:	60fb      	str	r3, [r7, #12]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	e853 3f00 	ldrex	r3, [r3]
 800a2a6:	60bb      	str	r3, [r7, #8]
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	f023 0310 	bic.w	r3, r3, #16
 800a2ae:	647b      	str	r3, [r7, #68]	; 0x44
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	330c      	adds	r3, #12
 800a2b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2b8:	61ba      	str	r2, [r7, #24]
 800a2ba:	617b      	str	r3, [r7, #20]
 800a2bc:	6979      	ldr	r1, [r7, #20]
 800a2be:	69ba      	ldr	r2, [r7, #24]
 800a2c0:	e841 2300 	strex	r3, r2, [r1]
 800a2c4:	613b      	str	r3, [r7, #16]
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1e5      	bne.n	800a298 <UART_EndRxTransfer+0x78>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2220      	movs	r2, #32
 800a2d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	631a      	str	r2, [r3, #48]	; 0x30
 800a2da:	bf00      	nop
 800a2dc:	3754      	adds	r7, #84	; 0x54
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <UART_DMAAbortOnError>:
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b084      	sub	sp, #16
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f2:	60fb      	str	r3, [r7, #12]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	85da      	strh	r2, [r3, #46]	; 0x2e
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	84da      	strh	r2, [r3, #38]	; 0x26
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f7ff ff09 	bl	800a118 <HAL_UART_ErrorCallback>
 800a306:	bf00      	nop
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <UART_Transmit_IT>:
 800a30e:	b480      	push	{r7}
 800a310:	b085      	sub	sp, #20
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	2b21      	cmp	r3, #33	; 0x21
 800a320:	d13e      	bne.n	800a3a0 <UART_Transmit_IT+0x92>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a32a:	d114      	bne.n	800a356 <UART_Transmit_IT+0x48>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d110      	bne.n	800a356 <UART_Transmit_IT+0x48>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6a1b      	ldr	r3, [r3, #32]
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	461a      	mov	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a348:	605a      	str	r2, [r3, #4]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	1c9a      	adds	r2, r3, #2
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	621a      	str	r2, [r3, #32]
 800a354:	e008      	b.n	800a368 <UART_Transmit_IT+0x5a>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	1c59      	adds	r1, r3, #1
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	6211      	str	r1, [r2, #32]
 800a360:	781a      	ldrb	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	605a      	str	r2, [r3, #4]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	3b01      	subs	r3, #1
 800a370:	b29b      	uxth	r3, r3
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	4619      	mov	r1, r3
 800a376:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10f      	bne.n	800a39c <UART_Transmit_IT+0x8e>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	68da      	ldr	r2, [r3, #12]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a38a:	60da      	str	r2, [r3, #12]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68da      	ldr	r2, [r3, #12]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a39a:	60da      	str	r2, [r3, #12]
 800a39c:	2300      	movs	r3, #0
 800a39e:	e000      	b.n	800a3a2 <UART_Transmit_IT+0x94>
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <UART_EndTransmit_IT>:
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b082      	sub	sp, #8
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68da      	ldr	r2, [r3, #12]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3c4:	60da      	str	r2, [r3, #12]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7ff fe8e 	bl	800a0f0 <HAL_UART_TxCpltCallback>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <UART_Receive_IT>:
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b08c      	sub	sp, #48	; 0x30
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b22      	cmp	r3, #34	; 0x22
 800a3f0:	f040 80ab 	bne.w	800a54a <UART_Receive_IT+0x16c>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3fc:	d117      	bne.n	800a42e <UART_Receive_IT+0x50>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d113      	bne.n	800a42e <UART_Receive_IT+0x50>
 800a406:	2300      	movs	r3, #0
 800a408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a40e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	b29b      	uxth	r3, r3
 800a418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a420:	801a      	strh	r2, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a426:	1c9a      	adds	r2, r3, #2
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	629a      	str	r2, [r3, #40]	; 0x28
 800a42c:	e026      	b.n	800a47c <UART_Receive_IT+0x9e>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a432:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a434:	2300      	movs	r3, #0
 800a436:	62bb      	str	r3, [r7, #40]	; 0x28
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a440:	d007      	beq.n	800a452 <UART_Receive_IT+0x74>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10a      	bne.n	800a460 <UART_Receive_IT+0x82>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d106      	bne.n	800a460 <UART_Receive_IT+0x82>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45c:	701a      	strb	r2, [r3, #0]
 800a45e:	e008      	b.n	800a472 <UART_Receive_IT+0x94>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	b2db      	uxtb	r3, r3
 800a468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a46c:	b2da      	uxtb	r2, r3
 800a46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a470:	701a      	strb	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a476:	1c5a      	adds	r2, r3, #1
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	629a      	str	r2, [r3, #40]	; 0x28
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a480:	b29b      	uxth	r3, r3
 800a482:	3b01      	subs	r3, #1
 800a484:	b29b      	uxth	r3, r3
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	4619      	mov	r1, r3
 800a48a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d15a      	bne.n	800a546 <UART_Receive_IT+0x168>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68da      	ldr	r2, [r3, #12]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f022 0220 	bic.w	r2, r2, #32
 800a49e:	60da      	str	r2, [r3, #12]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	68da      	ldr	r2, [r3, #12]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4ae:	60da      	str	r2, [r3, #12]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	695a      	ldr	r2, [r3, #20]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f022 0201 	bic.w	r2, r2, #1
 800a4be:	615a      	str	r2, [r3, #20]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d135      	bne.n	800a53c <UART_Receive_IT+0x15e>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	631a      	str	r2, [r3, #48]	; 0x30
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	330c      	adds	r3, #12
 800a4dc:	617b      	str	r3, [r7, #20]
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	e853 3f00 	ldrex	r3, [r3]
 800a4e4:	613b      	str	r3, [r7, #16]
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	f023 0310 	bic.w	r3, r3, #16
 800a4ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	330c      	adds	r3, #12
 800a4f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4f6:	623a      	str	r2, [r7, #32]
 800a4f8:	61fb      	str	r3, [r7, #28]
 800a4fa:	69f9      	ldr	r1, [r7, #28]
 800a4fc:	6a3a      	ldr	r2, [r7, #32]
 800a4fe:	e841 2300 	strex	r3, r2, [r1]
 800a502:	61bb      	str	r3, [r7, #24]
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1e5      	bne.n	800a4d6 <UART_Receive_IT+0xf8>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 0310 	and.w	r3, r3, #16
 800a514:	2b10      	cmp	r3, #16
 800a516:	d10a      	bne.n	800a52e <UART_Receive_IT+0x150>
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	60fb      	str	r3, [r7, #12]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a532:	4619      	mov	r1, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7ff fdf9 	bl	800a12c <HAL_UARTEx_RxEventCallback>
 800a53a:	e002      	b.n	800a542 <UART_Receive_IT+0x164>
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f7ff fde1 	bl	800a104 <HAL_UART_RxCpltCallback>
 800a542:	2300      	movs	r3, #0
 800a544:	e002      	b.n	800a54c <UART_Receive_IT+0x16e>
 800a546:	2300      	movs	r3, #0
 800a548:	e000      	b.n	800a54c <UART_Receive_IT+0x16e>
 800a54a:	2302      	movs	r3, #2
 800a54c:	4618      	mov	r0, r3
 800a54e:	3730      	adds	r7, #48	; 0x30
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <UART_SetConfig>:
 800a554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a558:	b0c0      	sub	sp, #256	; 0x100
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800a560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a56c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a570:	68d9      	ldr	r1, [r3, #12]
 800a572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	ea40 0301 	orr.w	r3, r0, r1
 800a57c:	6113      	str	r3, [r2, #16]
 800a57e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a582:	689a      	ldr	r2, [r3, #8]
 800a584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	431a      	orrs	r2, r3
 800a58c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	431a      	orrs	r2, r3
 800a594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a598:	69db      	ldr	r3, [r3, #28]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a5a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a5ac:	f021 010c 	bic.w	r1, r1, #12
 800a5b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a5ba:	430b      	orrs	r3, r1
 800a5bc:	60d3      	str	r3, [r2, #12]
 800a5be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a5ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5ce:	6999      	ldr	r1, [r3, #24]
 800a5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	ea40 0301 	orr.w	r3, r0, r1
 800a5da:	6153      	str	r3, [r2, #20]
 800a5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	4b8f      	ldr	r3, [pc, #572]	; (800a820 <UART_SetConfig+0x2cc>)
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d005      	beq.n	800a5f4 <UART_SetConfig+0xa0>
 800a5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	4b8d      	ldr	r3, [pc, #564]	; (800a824 <UART_SetConfig+0x2d0>)
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d104      	bne.n	800a5fe <UART_SetConfig+0xaa>
 800a5f4:	f7fe f83c 	bl	8008670 <HAL_RCC_GetPCLK2Freq>
 800a5f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a5fc:	e003      	b.n	800a606 <UART_SetConfig+0xb2>
 800a5fe:	f7fe f823 	bl	8008648 <HAL_RCC_GetPCLK1Freq>
 800a602:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a60a:	69db      	ldr	r3, [r3, #28]
 800a60c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a610:	f040 810c 	bne.w	800a82c <UART_SetConfig+0x2d8>
 800a614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a618:	2200      	movs	r2, #0
 800a61a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a61e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a622:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a626:	4622      	mov	r2, r4
 800a628:	462b      	mov	r3, r5
 800a62a:	1891      	adds	r1, r2, r2
 800a62c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a62e:	415b      	adcs	r3, r3
 800a630:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a632:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a636:	4621      	mov	r1, r4
 800a638:	eb12 0801 	adds.w	r8, r2, r1
 800a63c:	4629      	mov	r1, r5
 800a63e:	eb43 0901 	adc.w	r9, r3, r1
 800a642:	f04f 0200 	mov.w	r2, #0
 800a646:	f04f 0300 	mov.w	r3, #0
 800a64a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a64e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a656:	4690      	mov	r8, r2
 800a658:	4699      	mov	r9, r3
 800a65a:	4623      	mov	r3, r4
 800a65c:	eb18 0303 	adds.w	r3, r8, r3
 800a660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a664:	462b      	mov	r3, r5
 800a666:	eb49 0303 	adc.w	r3, r9, r3
 800a66a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a66e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a67a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a67e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a682:	460b      	mov	r3, r1
 800a684:	18db      	adds	r3, r3, r3
 800a686:	653b      	str	r3, [r7, #80]	; 0x50
 800a688:	4613      	mov	r3, r2
 800a68a:	eb42 0303 	adc.w	r3, r2, r3
 800a68e:	657b      	str	r3, [r7, #84]	; 0x54
 800a690:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a694:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a698:	f7f6 fade 	bl	8000c58 <__aeabi_uldivmod>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4b61      	ldr	r3, [pc, #388]	; (800a828 <UART_SetConfig+0x2d4>)
 800a6a2:	fba3 2302 	umull	r2, r3, r3, r2
 800a6a6:	095b      	lsrs	r3, r3, #5
 800a6a8:	011c      	lsls	r4, r3, #4
 800a6aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a6b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a6bc:	4642      	mov	r2, r8
 800a6be:	464b      	mov	r3, r9
 800a6c0:	1891      	adds	r1, r2, r2
 800a6c2:	64b9      	str	r1, [r7, #72]	; 0x48
 800a6c4:	415b      	adcs	r3, r3
 800a6c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a6cc:	4641      	mov	r1, r8
 800a6ce:	eb12 0a01 	adds.w	sl, r2, r1
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	eb43 0b01 	adc.w	fp, r3, r1
 800a6d8:	f04f 0200 	mov.w	r2, #0
 800a6dc:	f04f 0300 	mov.w	r3, #0
 800a6e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a6e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a6e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a6ec:	4692      	mov	sl, r2
 800a6ee:	469b      	mov	fp, r3
 800a6f0:	4643      	mov	r3, r8
 800a6f2:	eb1a 0303 	adds.w	r3, sl, r3
 800a6f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a6fa:	464b      	mov	r3, r9
 800a6fc:	eb4b 0303 	adc.w	r3, fp, r3
 800a700:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a710:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a714:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a718:	460b      	mov	r3, r1
 800a71a:	18db      	adds	r3, r3, r3
 800a71c:	643b      	str	r3, [r7, #64]	; 0x40
 800a71e:	4613      	mov	r3, r2
 800a720:	eb42 0303 	adc.w	r3, r2, r3
 800a724:	647b      	str	r3, [r7, #68]	; 0x44
 800a726:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a72a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a72e:	f7f6 fa93 	bl	8000c58 <__aeabi_uldivmod>
 800a732:	4602      	mov	r2, r0
 800a734:	460b      	mov	r3, r1
 800a736:	4611      	mov	r1, r2
 800a738:	4b3b      	ldr	r3, [pc, #236]	; (800a828 <UART_SetConfig+0x2d4>)
 800a73a:	fba3 2301 	umull	r2, r3, r3, r1
 800a73e:	095b      	lsrs	r3, r3, #5
 800a740:	2264      	movs	r2, #100	; 0x64
 800a742:	fb02 f303 	mul.w	r3, r2, r3
 800a746:	1acb      	subs	r3, r1, r3
 800a748:	00db      	lsls	r3, r3, #3
 800a74a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a74e:	4b36      	ldr	r3, [pc, #216]	; (800a828 <UART_SetConfig+0x2d4>)
 800a750:	fba3 2302 	umull	r2, r3, r3, r2
 800a754:	095b      	lsrs	r3, r3, #5
 800a756:	005b      	lsls	r3, r3, #1
 800a758:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a75c:	441c      	add	r4, r3
 800a75e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a762:	2200      	movs	r2, #0
 800a764:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a768:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a76c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a770:	4642      	mov	r2, r8
 800a772:	464b      	mov	r3, r9
 800a774:	1891      	adds	r1, r2, r2
 800a776:	63b9      	str	r1, [r7, #56]	; 0x38
 800a778:	415b      	adcs	r3, r3
 800a77a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a77c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a780:	4641      	mov	r1, r8
 800a782:	1851      	adds	r1, r2, r1
 800a784:	6339      	str	r1, [r7, #48]	; 0x30
 800a786:	4649      	mov	r1, r9
 800a788:	414b      	adcs	r3, r1
 800a78a:	637b      	str	r3, [r7, #52]	; 0x34
 800a78c:	f04f 0200 	mov.w	r2, #0
 800a790:	f04f 0300 	mov.w	r3, #0
 800a794:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a798:	4659      	mov	r1, fp
 800a79a:	00cb      	lsls	r3, r1, #3
 800a79c:	4651      	mov	r1, sl
 800a79e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7a2:	4651      	mov	r1, sl
 800a7a4:	00ca      	lsls	r2, r1, #3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	4642      	mov	r2, r8
 800a7ae:	189b      	adds	r3, r3, r2
 800a7b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7b4:	464b      	mov	r3, r9
 800a7b6:	460a      	mov	r2, r1
 800a7b8:	eb42 0303 	adc.w	r3, r2, r3
 800a7bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a7c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a7cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a7d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	18db      	adds	r3, r3, r3
 800a7d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7da:	4613      	mov	r3, r2
 800a7dc:	eb42 0303 	adc.w	r3, r2, r3
 800a7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a7e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a7ea:	f7f6 fa35 	bl	8000c58 <__aeabi_uldivmod>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	4b0d      	ldr	r3, [pc, #52]	; (800a828 <UART_SetConfig+0x2d4>)
 800a7f4:	fba3 1302 	umull	r1, r3, r3, r2
 800a7f8:	095b      	lsrs	r3, r3, #5
 800a7fa:	2164      	movs	r1, #100	; 0x64
 800a7fc:	fb01 f303 	mul.w	r3, r1, r3
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	00db      	lsls	r3, r3, #3
 800a804:	3332      	adds	r3, #50	; 0x32
 800a806:	4a08      	ldr	r2, [pc, #32]	; (800a828 <UART_SetConfig+0x2d4>)
 800a808:	fba2 2303 	umull	r2, r3, r2, r3
 800a80c:	095b      	lsrs	r3, r3, #5
 800a80e:	f003 0207 	and.w	r2, r3, #7
 800a812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4422      	add	r2, r4
 800a81a:	609a      	str	r2, [r3, #8]
 800a81c:	e105      	b.n	800aa2a <UART_SetConfig+0x4d6>
 800a81e:	bf00      	nop
 800a820:	40011000 	.word	0x40011000
 800a824:	40011400 	.word	0x40011400
 800a828:	51eb851f 	.word	0x51eb851f
 800a82c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a830:	2200      	movs	r2, #0
 800a832:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a836:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a83a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a83e:	4642      	mov	r2, r8
 800a840:	464b      	mov	r3, r9
 800a842:	1891      	adds	r1, r2, r2
 800a844:	6239      	str	r1, [r7, #32]
 800a846:	415b      	adcs	r3, r3
 800a848:	627b      	str	r3, [r7, #36]	; 0x24
 800a84a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a84e:	4641      	mov	r1, r8
 800a850:	1854      	adds	r4, r2, r1
 800a852:	4649      	mov	r1, r9
 800a854:	eb43 0501 	adc.w	r5, r3, r1
 800a858:	f04f 0200 	mov.w	r2, #0
 800a85c:	f04f 0300 	mov.w	r3, #0
 800a860:	00eb      	lsls	r3, r5, #3
 800a862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a866:	00e2      	lsls	r2, r4, #3
 800a868:	4614      	mov	r4, r2
 800a86a:	461d      	mov	r5, r3
 800a86c:	4643      	mov	r3, r8
 800a86e:	18e3      	adds	r3, r4, r3
 800a870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a874:	464b      	mov	r3, r9
 800a876:	eb45 0303 	adc.w	r3, r5, r3
 800a87a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a87e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a88a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a88e:	f04f 0200 	mov.w	r2, #0
 800a892:	f04f 0300 	mov.w	r3, #0
 800a896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a89a:	4629      	mov	r1, r5
 800a89c:	008b      	lsls	r3, r1, #2
 800a89e:	4621      	mov	r1, r4
 800a8a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	008a      	lsls	r2, r1, #2
 800a8a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a8ac:	f7f6 f9d4 	bl	8000c58 <__aeabi_uldivmod>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	4b60      	ldr	r3, [pc, #384]	; (800aa38 <UART_SetConfig+0x4e4>)
 800a8b6:	fba3 2302 	umull	r2, r3, r3, r2
 800a8ba:	095b      	lsrs	r3, r3, #5
 800a8bc:	011c      	lsls	r4, r3, #4
 800a8be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a8c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a8cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a8d0:	4642      	mov	r2, r8
 800a8d2:	464b      	mov	r3, r9
 800a8d4:	1891      	adds	r1, r2, r2
 800a8d6:	61b9      	str	r1, [r7, #24]
 800a8d8:	415b      	adcs	r3, r3
 800a8da:	61fb      	str	r3, [r7, #28]
 800a8dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8e0:	4641      	mov	r1, r8
 800a8e2:	1851      	adds	r1, r2, r1
 800a8e4:	6139      	str	r1, [r7, #16]
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	414b      	adcs	r3, r1
 800a8ea:	617b      	str	r3, [r7, #20]
 800a8ec:	f04f 0200 	mov.w	r2, #0
 800a8f0:	f04f 0300 	mov.w	r3, #0
 800a8f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a8f8:	4659      	mov	r1, fp
 800a8fa:	00cb      	lsls	r3, r1, #3
 800a8fc:	4651      	mov	r1, sl
 800a8fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a902:	4651      	mov	r1, sl
 800a904:	00ca      	lsls	r2, r1, #3
 800a906:	4610      	mov	r0, r2
 800a908:	4619      	mov	r1, r3
 800a90a:	4603      	mov	r3, r0
 800a90c:	4642      	mov	r2, r8
 800a90e:	189b      	adds	r3, r3, r2
 800a910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a914:	464b      	mov	r3, r9
 800a916:	460a      	mov	r2, r1
 800a918:	eb42 0303 	adc.w	r3, r2, r3
 800a91c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	67bb      	str	r3, [r7, #120]	; 0x78
 800a92a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a92c:	f04f 0200 	mov.w	r2, #0
 800a930:	f04f 0300 	mov.w	r3, #0
 800a934:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a938:	4649      	mov	r1, r9
 800a93a:	008b      	lsls	r3, r1, #2
 800a93c:	4641      	mov	r1, r8
 800a93e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a942:	4641      	mov	r1, r8
 800a944:	008a      	lsls	r2, r1, #2
 800a946:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a94a:	f7f6 f985 	bl	8000c58 <__aeabi_uldivmod>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	4b39      	ldr	r3, [pc, #228]	; (800aa38 <UART_SetConfig+0x4e4>)
 800a954:	fba3 1302 	umull	r1, r3, r3, r2
 800a958:	095b      	lsrs	r3, r3, #5
 800a95a:	2164      	movs	r1, #100	; 0x64
 800a95c:	fb01 f303 	mul.w	r3, r1, r3
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	011b      	lsls	r3, r3, #4
 800a964:	3332      	adds	r3, #50	; 0x32
 800a966:	4a34      	ldr	r2, [pc, #208]	; (800aa38 <UART_SetConfig+0x4e4>)
 800a968:	fba2 2303 	umull	r2, r3, r2, r3
 800a96c:	095b      	lsrs	r3, r3, #5
 800a96e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a972:	441c      	add	r4, r3
 800a974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a978:	2200      	movs	r2, #0
 800a97a:	673b      	str	r3, [r7, #112]	; 0x70
 800a97c:	677a      	str	r2, [r7, #116]	; 0x74
 800a97e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a982:	4642      	mov	r2, r8
 800a984:	464b      	mov	r3, r9
 800a986:	1891      	adds	r1, r2, r2
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	415b      	adcs	r3, r3
 800a98c:	60fb      	str	r3, [r7, #12]
 800a98e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a992:	4641      	mov	r1, r8
 800a994:	1851      	adds	r1, r2, r1
 800a996:	6039      	str	r1, [r7, #0]
 800a998:	4649      	mov	r1, r9
 800a99a:	414b      	adcs	r3, r1
 800a99c:	607b      	str	r3, [r7, #4]
 800a99e:	f04f 0200 	mov.w	r2, #0
 800a9a2:	f04f 0300 	mov.w	r3, #0
 800a9a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a9aa:	4659      	mov	r1, fp
 800a9ac:	00cb      	lsls	r3, r1, #3
 800a9ae:	4651      	mov	r1, sl
 800a9b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9b4:	4651      	mov	r1, sl
 800a9b6:	00ca      	lsls	r2, r1, #3
 800a9b8:	4610      	mov	r0, r2
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	4603      	mov	r3, r0
 800a9be:	4642      	mov	r2, r8
 800a9c0:	189b      	adds	r3, r3, r2
 800a9c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a9c4:	464b      	mov	r3, r9
 800a9c6:	460a      	mov	r2, r1
 800a9c8:	eb42 0303 	adc.w	r3, r2, r3
 800a9cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	663b      	str	r3, [r7, #96]	; 0x60
 800a9d8:	667a      	str	r2, [r7, #100]	; 0x64
 800a9da:	f04f 0200 	mov.w	r2, #0
 800a9de:	f04f 0300 	mov.w	r3, #0
 800a9e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a9e6:	4649      	mov	r1, r9
 800a9e8:	008b      	lsls	r3, r1, #2
 800a9ea:	4641      	mov	r1, r8
 800a9ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9f0:	4641      	mov	r1, r8
 800a9f2:	008a      	lsls	r2, r1, #2
 800a9f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a9f8:	f7f6 f92e 	bl	8000c58 <__aeabi_uldivmod>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	460b      	mov	r3, r1
 800aa00:	4b0d      	ldr	r3, [pc, #52]	; (800aa38 <UART_SetConfig+0x4e4>)
 800aa02:	fba3 1302 	umull	r1, r3, r3, r2
 800aa06:	095b      	lsrs	r3, r3, #5
 800aa08:	2164      	movs	r1, #100	; 0x64
 800aa0a:	fb01 f303 	mul.w	r3, r1, r3
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	011b      	lsls	r3, r3, #4
 800aa12:	3332      	adds	r3, #50	; 0x32
 800aa14:	4a08      	ldr	r2, [pc, #32]	; (800aa38 <UART_SetConfig+0x4e4>)
 800aa16:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1a:	095b      	lsrs	r3, r3, #5
 800aa1c:	f003 020f 	and.w	r2, r3, #15
 800aa20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4422      	add	r2, r4
 800aa28:	609a      	str	r2, [r3, #8]
 800aa2a:	bf00      	nop
 800aa2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800aa30:	46bd      	mov	sp, r7
 800aa32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa36:	bf00      	nop
 800aa38:	51eb851f 	.word	0x51eb851f

0800aa3c <_ZdlPvj>:
 800aa3c:	f000 b817 	b.w	800aa6e <_ZdlPv>

0800aa40 <_Znwj>:
 800aa40:	2801      	cmp	r0, #1
 800aa42:	bf38      	it	cc
 800aa44:	2001      	movcc	r0, #1
 800aa46:	b510      	push	{r4, lr}
 800aa48:	4604      	mov	r4, r0
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f001 fe94 	bl	800c778 <malloc>
 800aa50:	b930      	cbnz	r0, 800aa60 <_Znwj+0x20>
 800aa52:	f000 f80f 	bl	800aa74 <_ZSt15get_new_handlerv>
 800aa56:	b908      	cbnz	r0, 800aa5c <_Znwj+0x1c>
 800aa58:	f001 fe5c 	bl	800c714 <abort>
 800aa5c:	4780      	blx	r0
 800aa5e:	e7f4      	b.n	800aa4a <_Znwj+0xa>
 800aa60:	bd10      	pop	{r4, pc}

0800aa62 <_ZSt17__throw_bad_allocv>:
 800aa62:	b508      	push	{r3, lr}
 800aa64:	f001 fe56 	bl	800c714 <abort>

0800aa68 <_ZSt20__throw_length_errorPKc>:
 800aa68:	b508      	push	{r3, lr}
 800aa6a:	f001 fe53 	bl	800c714 <abort>

0800aa6e <_ZdlPv>:
 800aa6e:	f001 be8b 	b.w	800c788 <free>
	...

0800aa74 <_ZSt15get_new_handlerv>:
 800aa74:	4b02      	ldr	r3, [pc, #8]	; (800aa80 <_ZSt15get_new_handlerv+0xc>)
 800aa76:	6818      	ldr	r0, [r3, #0]
 800aa78:	f3bf 8f5b 	dmb	ish
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	20000b28 	.word	0x20000b28

0800aa84 <cosf>:
 800aa84:	ee10 3a10 	vmov	r3, s0
 800aa88:	b507      	push	{r0, r1, r2, lr}
 800aa8a:	4a1e      	ldr	r2, [pc, #120]	; (800ab04 <cosf+0x80>)
 800aa8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa90:	4293      	cmp	r3, r2
 800aa92:	dc06      	bgt.n	800aaa2 <cosf+0x1e>
 800aa94:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800ab08 <cosf+0x84>
 800aa98:	b003      	add	sp, #12
 800aa9a:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa9e:	f001 b85b 	b.w	800bb58 <__kernel_cosf>
 800aaa2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aaa6:	db04      	blt.n	800aab2 <cosf+0x2e>
 800aaa8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800aaac:	b003      	add	sp, #12
 800aaae:	f85d fb04 	ldr.w	pc, [sp], #4
 800aab2:	4668      	mov	r0, sp
 800aab4:	f000 ff14 	bl	800b8e0 <__ieee754_rem_pio2f>
 800aab8:	f000 0003 	and.w	r0, r0, #3
 800aabc:	2801      	cmp	r0, #1
 800aabe:	d009      	beq.n	800aad4 <cosf+0x50>
 800aac0:	2802      	cmp	r0, #2
 800aac2:	d010      	beq.n	800aae6 <cosf+0x62>
 800aac4:	b9b0      	cbnz	r0, 800aaf4 <cosf+0x70>
 800aac6:	eddd 0a01 	vldr	s1, [sp, #4]
 800aaca:	ed9d 0a00 	vldr	s0, [sp]
 800aace:	f001 f843 	bl	800bb58 <__kernel_cosf>
 800aad2:	e7eb      	b.n	800aaac <cosf+0x28>
 800aad4:	eddd 0a01 	vldr	s1, [sp, #4]
 800aad8:	ed9d 0a00 	vldr	s0, [sp]
 800aadc:	f001 fb12 	bl	800c104 <__kernel_sinf>
 800aae0:	eeb1 0a40 	vneg.f32	s0, s0
 800aae4:	e7e2      	b.n	800aaac <cosf+0x28>
 800aae6:	eddd 0a01 	vldr	s1, [sp, #4]
 800aaea:	ed9d 0a00 	vldr	s0, [sp]
 800aaee:	f001 f833 	bl	800bb58 <__kernel_cosf>
 800aaf2:	e7f5      	b.n	800aae0 <cosf+0x5c>
 800aaf4:	eddd 0a01 	vldr	s1, [sp, #4]
 800aaf8:	ed9d 0a00 	vldr	s0, [sp]
 800aafc:	2001      	movs	r0, #1
 800aafe:	f001 fb01 	bl	800c104 <__kernel_sinf>
 800ab02:	e7d3      	b.n	800aaac <cosf+0x28>
 800ab04:	3f490fd8 	.word	0x3f490fd8
 800ab08:	00000000 	.word	0x00000000

0800ab0c <sinf>:
 800ab0c:	ee10 3a10 	vmov	r3, s0
 800ab10:	b507      	push	{r0, r1, r2, lr}
 800ab12:	4a1f      	ldr	r2, [pc, #124]	; (800ab90 <sinf+0x84>)
 800ab14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	dc07      	bgt.n	800ab2c <sinf+0x20>
 800ab1c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ab94 <sinf+0x88>
 800ab20:	2000      	movs	r0, #0
 800ab22:	b003      	add	sp, #12
 800ab24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab28:	f001 baec 	b.w	800c104 <__kernel_sinf>
 800ab2c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ab30:	db04      	blt.n	800ab3c <sinf+0x30>
 800ab32:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ab36:	b003      	add	sp, #12
 800ab38:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab3c:	4668      	mov	r0, sp
 800ab3e:	f000 fecf 	bl	800b8e0 <__ieee754_rem_pio2f>
 800ab42:	f000 0003 	and.w	r0, r0, #3
 800ab46:	2801      	cmp	r0, #1
 800ab48:	d00a      	beq.n	800ab60 <sinf+0x54>
 800ab4a:	2802      	cmp	r0, #2
 800ab4c:	d00f      	beq.n	800ab6e <sinf+0x62>
 800ab4e:	b9c0      	cbnz	r0, 800ab82 <sinf+0x76>
 800ab50:	eddd 0a01 	vldr	s1, [sp, #4]
 800ab54:	ed9d 0a00 	vldr	s0, [sp]
 800ab58:	2001      	movs	r0, #1
 800ab5a:	f001 fad3 	bl	800c104 <__kernel_sinf>
 800ab5e:	e7ea      	b.n	800ab36 <sinf+0x2a>
 800ab60:	eddd 0a01 	vldr	s1, [sp, #4]
 800ab64:	ed9d 0a00 	vldr	s0, [sp]
 800ab68:	f000 fff6 	bl	800bb58 <__kernel_cosf>
 800ab6c:	e7e3      	b.n	800ab36 <sinf+0x2a>
 800ab6e:	eddd 0a01 	vldr	s1, [sp, #4]
 800ab72:	ed9d 0a00 	vldr	s0, [sp]
 800ab76:	2001      	movs	r0, #1
 800ab78:	f001 fac4 	bl	800c104 <__kernel_sinf>
 800ab7c:	eeb1 0a40 	vneg.f32	s0, s0
 800ab80:	e7d9      	b.n	800ab36 <sinf+0x2a>
 800ab82:	eddd 0a01 	vldr	s1, [sp, #4]
 800ab86:	ed9d 0a00 	vldr	s0, [sp]
 800ab8a:	f000 ffe5 	bl	800bb58 <__kernel_cosf>
 800ab8e:	e7f5      	b.n	800ab7c <sinf+0x70>
 800ab90:	3f490fd8 	.word	0x3f490fd8
 800ab94:	00000000 	.word	0x00000000

0800ab98 <tanhf>:
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	ee10 4a10 	vmov	r4, s0
 800ab9e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800aba2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aba6:	ed2d 8b02 	vpush	{d8}
 800abaa:	eeb0 7a40 	vmov.f32	s14, s0
 800abae:	db0c      	blt.n	800abca <tanhf+0x32>
 800abb0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800abb4:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800abb8:	2c00      	cmp	r4, #0
 800abba:	bfac      	ite	ge
 800abbc:	ee37 0a80 	vaddge.f32	s0, s15, s0
 800abc0:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 800abc4:	ecbd 8b02 	vpop	{d8}
 800abc8:	bd10      	pop	{r4, pc}
 800abca:	4a1b      	ldr	r2, [pc, #108]	; (800ac38 <tanhf+0xa0>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	dc30      	bgt.n	800ac32 <tanhf+0x9a>
 800abd0:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800abd4:	da06      	bge.n	800abe4 <tanhf+0x4c>
 800abd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800abda:	ee70 7a27 	vadd.f32	s15, s0, s15
 800abde:	ee27 0a80 	vmul.f32	s0, s15, s0
 800abe2:	e7ef      	b.n	800abc4 <tanhf+0x2c>
 800abe4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800abe8:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800abec:	db12      	blt.n	800ac14 <tanhf+0x7c>
 800abee:	f001 fcb9 	bl	800c564 <fabsf>
 800abf2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800abf6:	f001 fb99 	bl	800c32c <expm1f>
 800abfa:	ee30 0a08 	vadd.f32	s0, s0, s16
 800abfe:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800ac02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ac06:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ac0a:	2c00      	cmp	r4, #0
 800ac0c:	bfb8      	it	lt
 800ac0e:	eeb1 0a40 	vneglt.f32	s0, s0
 800ac12:	e7d7      	b.n	800abc4 <tanhf+0x2c>
 800ac14:	f001 fca6 	bl	800c564 <fabsf>
 800ac18:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800ac1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ac20:	f001 fb84 	bl	800c32c <expm1f>
 800ac24:	ee70 7a08 	vadd.f32	s15, s0, s16
 800ac28:	eeb1 7a40 	vneg.f32	s14, s0
 800ac2c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ac30:	e7eb      	b.n	800ac0a <tanhf+0x72>
 800ac32:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ac36:	e7e8      	b.n	800ac0a <tanhf+0x72>
 800ac38:	41afffff 	.word	0x41afffff

0800ac3c <pow>:
 800ac3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3e:	ed2d 8b02 	vpush	{d8}
 800ac42:	eeb0 8a40 	vmov.f32	s16, s0
 800ac46:	eef0 8a60 	vmov.f32	s17, s1
 800ac4a:	ec55 4b11 	vmov	r4, r5, d1
 800ac4e:	f000 f867 	bl	800ad20 <__ieee754_pow>
 800ac52:	4622      	mov	r2, r4
 800ac54:	462b      	mov	r3, r5
 800ac56:	4620      	mov	r0, r4
 800ac58:	4629      	mov	r1, r5
 800ac5a:	ec57 6b10 	vmov	r6, r7, d0
 800ac5e:	f7f5 ff6d 	bl	8000b3c <__aeabi_dcmpun>
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d13b      	bne.n	800acde <pow+0xa2>
 800ac66:	ec51 0b18 	vmov	r0, r1, d8
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	f7f5 ff33 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac72:	b1b8      	cbz	r0, 800aca4 <pow+0x68>
 800ac74:	2200      	movs	r2, #0
 800ac76:	2300      	movs	r3, #0
 800ac78:	4620      	mov	r0, r4
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	f7f5 ff2c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d146      	bne.n	800ad12 <pow+0xd6>
 800ac84:	ec45 4b10 	vmov	d0, r4, r5
 800ac88:	f001 fabd 	bl	800c206 <finite>
 800ac8c:	b338      	cbz	r0, 800acde <pow+0xa2>
 800ac8e:	2200      	movs	r2, #0
 800ac90:	2300      	movs	r3, #0
 800ac92:	4620      	mov	r0, r4
 800ac94:	4629      	mov	r1, r5
 800ac96:	f7f5 ff29 	bl	8000aec <__aeabi_dcmplt>
 800ac9a:	b300      	cbz	r0, 800acde <pow+0xa2>
 800ac9c:	f001 fd42 	bl	800c724 <__errno>
 800aca0:	2322      	movs	r3, #34	; 0x22
 800aca2:	e01b      	b.n	800acdc <pow+0xa0>
 800aca4:	ec47 6b10 	vmov	d0, r6, r7
 800aca8:	f001 faad 	bl	800c206 <finite>
 800acac:	b9e0      	cbnz	r0, 800ace8 <pow+0xac>
 800acae:	eeb0 0a48 	vmov.f32	s0, s16
 800acb2:	eef0 0a68 	vmov.f32	s1, s17
 800acb6:	f001 faa6 	bl	800c206 <finite>
 800acba:	b1a8      	cbz	r0, 800ace8 <pow+0xac>
 800acbc:	ec45 4b10 	vmov	d0, r4, r5
 800acc0:	f001 faa1 	bl	800c206 <finite>
 800acc4:	b180      	cbz	r0, 800ace8 <pow+0xac>
 800acc6:	4632      	mov	r2, r6
 800acc8:	463b      	mov	r3, r7
 800acca:	4630      	mov	r0, r6
 800accc:	4639      	mov	r1, r7
 800acce:	f7f5 ff35 	bl	8000b3c <__aeabi_dcmpun>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d0e2      	beq.n	800ac9c <pow+0x60>
 800acd6:	f001 fd25 	bl	800c724 <__errno>
 800acda:	2321      	movs	r3, #33	; 0x21
 800acdc:	6003      	str	r3, [r0, #0]
 800acde:	ecbd 8b02 	vpop	{d8}
 800ace2:	ec47 6b10 	vmov	d0, r6, r7
 800ace6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ace8:	2200      	movs	r2, #0
 800acea:	2300      	movs	r3, #0
 800acec:	4630      	mov	r0, r6
 800acee:	4639      	mov	r1, r7
 800acf0:	f7f5 fef2 	bl	8000ad8 <__aeabi_dcmpeq>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d0f2      	beq.n	800acde <pow+0xa2>
 800acf8:	eeb0 0a48 	vmov.f32	s0, s16
 800acfc:	eef0 0a68 	vmov.f32	s1, s17
 800ad00:	f001 fa81 	bl	800c206 <finite>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	d0ea      	beq.n	800acde <pow+0xa2>
 800ad08:	ec45 4b10 	vmov	d0, r4, r5
 800ad0c:	f001 fa7b 	bl	800c206 <finite>
 800ad10:	e7c3      	b.n	800ac9a <pow+0x5e>
 800ad12:	4f01      	ldr	r7, [pc, #4]	; (800ad18 <pow+0xdc>)
 800ad14:	2600      	movs	r6, #0
 800ad16:	e7e2      	b.n	800acde <pow+0xa2>
 800ad18:	3ff00000 	.word	0x3ff00000
 800ad1c:	00000000 	.word	0x00000000

0800ad20 <__ieee754_pow>:
 800ad20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad24:	ed2d 8b06 	vpush	{d8-d10}
 800ad28:	b089      	sub	sp, #36	; 0x24
 800ad2a:	ed8d 1b00 	vstr	d1, [sp]
 800ad2e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ad32:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ad36:	ea58 0102 	orrs.w	r1, r8, r2
 800ad3a:	ec57 6b10 	vmov	r6, r7, d0
 800ad3e:	d115      	bne.n	800ad6c <__ieee754_pow+0x4c>
 800ad40:	19b3      	adds	r3, r6, r6
 800ad42:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ad46:	4152      	adcs	r2, r2
 800ad48:	4299      	cmp	r1, r3
 800ad4a:	4b89      	ldr	r3, [pc, #548]	; (800af70 <__ieee754_pow+0x250>)
 800ad4c:	4193      	sbcs	r3, r2
 800ad4e:	f080 84d2 	bcs.w	800b6f6 <__ieee754_pow+0x9d6>
 800ad52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad56:	4630      	mov	r0, r6
 800ad58:	4639      	mov	r1, r7
 800ad5a:	f7f5 fa9f 	bl	800029c <__adddf3>
 800ad5e:	ec41 0b10 	vmov	d0, r0, r1
 800ad62:	b009      	add	sp, #36	; 0x24
 800ad64:	ecbd 8b06 	vpop	{d8-d10}
 800ad68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad6c:	4b81      	ldr	r3, [pc, #516]	; (800af74 <__ieee754_pow+0x254>)
 800ad6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ad72:	429c      	cmp	r4, r3
 800ad74:	ee10 aa10 	vmov	sl, s0
 800ad78:	463d      	mov	r5, r7
 800ad7a:	dc06      	bgt.n	800ad8a <__ieee754_pow+0x6a>
 800ad7c:	d101      	bne.n	800ad82 <__ieee754_pow+0x62>
 800ad7e:	2e00      	cmp	r6, #0
 800ad80:	d1e7      	bne.n	800ad52 <__ieee754_pow+0x32>
 800ad82:	4598      	cmp	r8, r3
 800ad84:	dc01      	bgt.n	800ad8a <__ieee754_pow+0x6a>
 800ad86:	d10f      	bne.n	800ada8 <__ieee754_pow+0x88>
 800ad88:	b172      	cbz	r2, 800ada8 <__ieee754_pow+0x88>
 800ad8a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ad8e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ad92:	ea55 050a 	orrs.w	r5, r5, sl
 800ad96:	d1dc      	bne.n	800ad52 <__ieee754_pow+0x32>
 800ad98:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad9c:	18db      	adds	r3, r3, r3
 800ad9e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ada2:	4152      	adcs	r2, r2
 800ada4:	429d      	cmp	r5, r3
 800ada6:	e7d0      	b.n	800ad4a <__ieee754_pow+0x2a>
 800ada8:	2d00      	cmp	r5, #0
 800adaa:	da3b      	bge.n	800ae24 <__ieee754_pow+0x104>
 800adac:	4b72      	ldr	r3, [pc, #456]	; (800af78 <__ieee754_pow+0x258>)
 800adae:	4598      	cmp	r8, r3
 800adb0:	dc51      	bgt.n	800ae56 <__ieee754_pow+0x136>
 800adb2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800adb6:	4598      	cmp	r8, r3
 800adb8:	f340 84ac 	ble.w	800b714 <__ieee754_pow+0x9f4>
 800adbc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800adc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800adc4:	2b14      	cmp	r3, #20
 800adc6:	dd0f      	ble.n	800ade8 <__ieee754_pow+0xc8>
 800adc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800adcc:	fa22 f103 	lsr.w	r1, r2, r3
 800add0:	fa01 f303 	lsl.w	r3, r1, r3
 800add4:	4293      	cmp	r3, r2
 800add6:	f040 849d 	bne.w	800b714 <__ieee754_pow+0x9f4>
 800adda:	f001 0101 	and.w	r1, r1, #1
 800adde:	f1c1 0302 	rsb	r3, r1, #2
 800ade2:	9304      	str	r3, [sp, #16]
 800ade4:	b182      	cbz	r2, 800ae08 <__ieee754_pow+0xe8>
 800ade6:	e05f      	b.n	800aea8 <__ieee754_pow+0x188>
 800ade8:	2a00      	cmp	r2, #0
 800adea:	d15b      	bne.n	800aea4 <__ieee754_pow+0x184>
 800adec:	f1c3 0314 	rsb	r3, r3, #20
 800adf0:	fa48 f103 	asr.w	r1, r8, r3
 800adf4:	fa01 f303 	lsl.w	r3, r1, r3
 800adf8:	4543      	cmp	r3, r8
 800adfa:	f040 8488 	bne.w	800b70e <__ieee754_pow+0x9ee>
 800adfe:	f001 0101 	and.w	r1, r1, #1
 800ae02:	f1c1 0302 	rsb	r3, r1, #2
 800ae06:	9304      	str	r3, [sp, #16]
 800ae08:	4b5c      	ldr	r3, [pc, #368]	; (800af7c <__ieee754_pow+0x25c>)
 800ae0a:	4598      	cmp	r8, r3
 800ae0c:	d132      	bne.n	800ae74 <__ieee754_pow+0x154>
 800ae0e:	f1b9 0f00 	cmp.w	r9, #0
 800ae12:	f280 8478 	bge.w	800b706 <__ieee754_pow+0x9e6>
 800ae16:	4959      	ldr	r1, [pc, #356]	; (800af7c <__ieee754_pow+0x25c>)
 800ae18:	4632      	mov	r2, r6
 800ae1a:	463b      	mov	r3, r7
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	f7f5 fd1d 	bl	800085c <__aeabi_ddiv>
 800ae22:	e79c      	b.n	800ad5e <__ieee754_pow+0x3e>
 800ae24:	2300      	movs	r3, #0
 800ae26:	9304      	str	r3, [sp, #16]
 800ae28:	2a00      	cmp	r2, #0
 800ae2a:	d13d      	bne.n	800aea8 <__ieee754_pow+0x188>
 800ae2c:	4b51      	ldr	r3, [pc, #324]	; (800af74 <__ieee754_pow+0x254>)
 800ae2e:	4598      	cmp	r8, r3
 800ae30:	d1ea      	bne.n	800ae08 <__ieee754_pow+0xe8>
 800ae32:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ae36:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ae3a:	ea53 030a 	orrs.w	r3, r3, sl
 800ae3e:	f000 845a 	beq.w	800b6f6 <__ieee754_pow+0x9d6>
 800ae42:	4b4f      	ldr	r3, [pc, #316]	; (800af80 <__ieee754_pow+0x260>)
 800ae44:	429c      	cmp	r4, r3
 800ae46:	dd08      	ble.n	800ae5a <__ieee754_pow+0x13a>
 800ae48:	f1b9 0f00 	cmp.w	r9, #0
 800ae4c:	f2c0 8457 	blt.w	800b6fe <__ieee754_pow+0x9de>
 800ae50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae54:	e783      	b.n	800ad5e <__ieee754_pow+0x3e>
 800ae56:	2302      	movs	r3, #2
 800ae58:	e7e5      	b.n	800ae26 <__ieee754_pow+0x106>
 800ae5a:	f1b9 0f00 	cmp.w	r9, #0
 800ae5e:	f04f 0000 	mov.w	r0, #0
 800ae62:	f04f 0100 	mov.w	r1, #0
 800ae66:	f6bf af7a 	bge.w	800ad5e <__ieee754_pow+0x3e>
 800ae6a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ae6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ae72:	e774      	b.n	800ad5e <__ieee754_pow+0x3e>
 800ae74:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ae78:	d106      	bne.n	800ae88 <__ieee754_pow+0x168>
 800ae7a:	4632      	mov	r2, r6
 800ae7c:	463b      	mov	r3, r7
 800ae7e:	4630      	mov	r0, r6
 800ae80:	4639      	mov	r1, r7
 800ae82:	f7f5 fbc1 	bl	8000608 <__aeabi_dmul>
 800ae86:	e76a      	b.n	800ad5e <__ieee754_pow+0x3e>
 800ae88:	4b3e      	ldr	r3, [pc, #248]	; (800af84 <__ieee754_pow+0x264>)
 800ae8a:	4599      	cmp	r9, r3
 800ae8c:	d10c      	bne.n	800aea8 <__ieee754_pow+0x188>
 800ae8e:	2d00      	cmp	r5, #0
 800ae90:	db0a      	blt.n	800aea8 <__ieee754_pow+0x188>
 800ae92:	ec47 6b10 	vmov	d0, r6, r7
 800ae96:	b009      	add	sp, #36	; 0x24
 800ae98:	ecbd 8b06 	vpop	{d8-d10}
 800ae9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea0:	f000 bc6c 	b.w	800b77c <__ieee754_sqrt>
 800aea4:	2300      	movs	r3, #0
 800aea6:	9304      	str	r3, [sp, #16]
 800aea8:	ec47 6b10 	vmov	d0, r6, r7
 800aeac:	f001 f9a2 	bl	800c1f4 <fabs>
 800aeb0:	ec51 0b10 	vmov	r0, r1, d0
 800aeb4:	f1ba 0f00 	cmp.w	sl, #0
 800aeb8:	d129      	bne.n	800af0e <__ieee754_pow+0x1ee>
 800aeba:	b124      	cbz	r4, 800aec6 <__ieee754_pow+0x1a6>
 800aebc:	4b2f      	ldr	r3, [pc, #188]	; (800af7c <__ieee754_pow+0x25c>)
 800aebe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d123      	bne.n	800af0e <__ieee754_pow+0x1ee>
 800aec6:	f1b9 0f00 	cmp.w	r9, #0
 800aeca:	da05      	bge.n	800aed8 <__ieee754_pow+0x1b8>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	2000      	movs	r0, #0
 800aed2:	492a      	ldr	r1, [pc, #168]	; (800af7c <__ieee754_pow+0x25c>)
 800aed4:	f7f5 fcc2 	bl	800085c <__aeabi_ddiv>
 800aed8:	2d00      	cmp	r5, #0
 800aeda:	f6bf af40 	bge.w	800ad5e <__ieee754_pow+0x3e>
 800aede:	9b04      	ldr	r3, [sp, #16]
 800aee0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800aee4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aee8:	4323      	orrs	r3, r4
 800aeea:	d108      	bne.n	800aefe <__ieee754_pow+0x1de>
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	4610      	mov	r0, r2
 800aef2:	4619      	mov	r1, r3
 800aef4:	f7f5 f9d0 	bl	8000298 <__aeabi_dsub>
 800aef8:	4602      	mov	r2, r0
 800aefa:	460b      	mov	r3, r1
 800aefc:	e78f      	b.n	800ae1e <__ieee754_pow+0xfe>
 800aefe:	9b04      	ldr	r3, [sp, #16]
 800af00:	2b01      	cmp	r3, #1
 800af02:	f47f af2c 	bne.w	800ad5e <__ieee754_pow+0x3e>
 800af06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af0a:	4619      	mov	r1, r3
 800af0c:	e727      	b.n	800ad5e <__ieee754_pow+0x3e>
 800af0e:	0feb      	lsrs	r3, r5, #31
 800af10:	3b01      	subs	r3, #1
 800af12:	9306      	str	r3, [sp, #24]
 800af14:	9a06      	ldr	r2, [sp, #24]
 800af16:	9b04      	ldr	r3, [sp, #16]
 800af18:	4313      	orrs	r3, r2
 800af1a:	d102      	bne.n	800af22 <__ieee754_pow+0x202>
 800af1c:	4632      	mov	r2, r6
 800af1e:	463b      	mov	r3, r7
 800af20:	e7e6      	b.n	800aef0 <__ieee754_pow+0x1d0>
 800af22:	4b19      	ldr	r3, [pc, #100]	; (800af88 <__ieee754_pow+0x268>)
 800af24:	4598      	cmp	r8, r3
 800af26:	f340 80fb 	ble.w	800b120 <__ieee754_pow+0x400>
 800af2a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800af2e:	4598      	cmp	r8, r3
 800af30:	4b13      	ldr	r3, [pc, #76]	; (800af80 <__ieee754_pow+0x260>)
 800af32:	dd0c      	ble.n	800af4e <__ieee754_pow+0x22e>
 800af34:	429c      	cmp	r4, r3
 800af36:	dc0f      	bgt.n	800af58 <__ieee754_pow+0x238>
 800af38:	f1b9 0f00 	cmp.w	r9, #0
 800af3c:	da0f      	bge.n	800af5e <__ieee754_pow+0x23e>
 800af3e:	2000      	movs	r0, #0
 800af40:	b009      	add	sp, #36	; 0x24
 800af42:	ecbd 8b06 	vpop	{d8-d10}
 800af46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4a:	f001 b94a 	b.w	800c1e2 <__math_oflow>
 800af4e:	429c      	cmp	r4, r3
 800af50:	dbf2      	blt.n	800af38 <__ieee754_pow+0x218>
 800af52:	4b0a      	ldr	r3, [pc, #40]	; (800af7c <__ieee754_pow+0x25c>)
 800af54:	429c      	cmp	r4, r3
 800af56:	dd19      	ble.n	800af8c <__ieee754_pow+0x26c>
 800af58:	f1b9 0f00 	cmp.w	r9, #0
 800af5c:	dcef      	bgt.n	800af3e <__ieee754_pow+0x21e>
 800af5e:	2000      	movs	r0, #0
 800af60:	b009      	add	sp, #36	; 0x24
 800af62:	ecbd 8b06 	vpop	{d8-d10}
 800af66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6a:	f001 b931 	b.w	800c1d0 <__math_uflow>
 800af6e:	bf00      	nop
 800af70:	fff00000 	.word	0xfff00000
 800af74:	7ff00000 	.word	0x7ff00000
 800af78:	433fffff 	.word	0x433fffff
 800af7c:	3ff00000 	.word	0x3ff00000
 800af80:	3fefffff 	.word	0x3fefffff
 800af84:	3fe00000 	.word	0x3fe00000
 800af88:	41e00000 	.word	0x41e00000
 800af8c:	4b60      	ldr	r3, [pc, #384]	; (800b110 <__ieee754_pow+0x3f0>)
 800af8e:	2200      	movs	r2, #0
 800af90:	f7f5 f982 	bl	8000298 <__aeabi_dsub>
 800af94:	a354      	add	r3, pc, #336	; (adr r3, 800b0e8 <__ieee754_pow+0x3c8>)
 800af96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9a:	4604      	mov	r4, r0
 800af9c:	460d      	mov	r5, r1
 800af9e:	f7f5 fb33 	bl	8000608 <__aeabi_dmul>
 800afa2:	a353      	add	r3, pc, #332	; (adr r3, 800b0f0 <__ieee754_pow+0x3d0>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	4606      	mov	r6, r0
 800afaa:	460f      	mov	r7, r1
 800afac:	4620      	mov	r0, r4
 800afae:	4629      	mov	r1, r5
 800afb0:	f7f5 fb2a 	bl	8000608 <__aeabi_dmul>
 800afb4:	4b57      	ldr	r3, [pc, #348]	; (800b114 <__ieee754_pow+0x3f4>)
 800afb6:	4682      	mov	sl, r0
 800afb8:	468b      	mov	fp, r1
 800afba:	2200      	movs	r2, #0
 800afbc:	4620      	mov	r0, r4
 800afbe:	4629      	mov	r1, r5
 800afc0:	f7f5 fb22 	bl	8000608 <__aeabi_dmul>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	a14b      	add	r1, pc, #300	; (adr r1, 800b0f8 <__ieee754_pow+0x3d8>)
 800afca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afce:	f7f5 f963 	bl	8000298 <__aeabi_dsub>
 800afd2:	4622      	mov	r2, r4
 800afd4:	462b      	mov	r3, r5
 800afd6:	f7f5 fb17 	bl	8000608 <__aeabi_dmul>
 800afda:	4602      	mov	r2, r0
 800afdc:	460b      	mov	r3, r1
 800afde:	2000      	movs	r0, #0
 800afe0:	494d      	ldr	r1, [pc, #308]	; (800b118 <__ieee754_pow+0x3f8>)
 800afe2:	f7f5 f959 	bl	8000298 <__aeabi_dsub>
 800afe6:	4622      	mov	r2, r4
 800afe8:	4680      	mov	r8, r0
 800afea:	4689      	mov	r9, r1
 800afec:	462b      	mov	r3, r5
 800afee:	4620      	mov	r0, r4
 800aff0:	4629      	mov	r1, r5
 800aff2:	f7f5 fb09 	bl	8000608 <__aeabi_dmul>
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
 800affa:	4640      	mov	r0, r8
 800affc:	4649      	mov	r1, r9
 800affe:	f7f5 fb03 	bl	8000608 <__aeabi_dmul>
 800b002:	a33f      	add	r3, pc, #252	; (adr r3, 800b100 <__ieee754_pow+0x3e0>)
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	f7f5 fafe 	bl	8000608 <__aeabi_dmul>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4650      	mov	r0, sl
 800b012:	4659      	mov	r1, fp
 800b014:	f7f5 f940 	bl	8000298 <__aeabi_dsub>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4680      	mov	r8, r0
 800b01e:	4689      	mov	r9, r1
 800b020:	4630      	mov	r0, r6
 800b022:	4639      	mov	r1, r7
 800b024:	f7f5 f93a 	bl	800029c <__adddf3>
 800b028:	2000      	movs	r0, #0
 800b02a:	4632      	mov	r2, r6
 800b02c:	463b      	mov	r3, r7
 800b02e:	4604      	mov	r4, r0
 800b030:	460d      	mov	r5, r1
 800b032:	f7f5 f931 	bl	8000298 <__aeabi_dsub>
 800b036:	4602      	mov	r2, r0
 800b038:	460b      	mov	r3, r1
 800b03a:	4640      	mov	r0, r8
 800b03c:	4649      	mov	r1, r9
 800b03e:	f7f5 f92b 	bl	8000298 <__aeabi_dsub>
 800b042:	9b04      	ldr	r3, [sp, #16]
 800b044:	9a06      	ldr	r2, [sp, #24]
 800b046:	3b01      	subs	r3, #1
 800b048:	4313      	orrs	r3, r2
 800b04a:	4682      	mov	sl, r0
 800b04c:	468b      	mov	fp, r1
 800b04e:	f040 81e7 	bne.w	800b420 <__ieee754_pow+0x700>
 800b052:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b108 <__ieee754_pow+0x3e8>
 800b056:	eeb0 8a47 	vmov.f32	s16, s14
 800b05a:	eef0 8a67 	vmov.f32	s17, s15
 800b05e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b062:	2600      	movs	r6, #0
 800b064:	4632      	mov	r2, r6
 800b066:	463b      	mov	r3, r7
 800b068:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b06c:	f7f5 f914 	bl	8000298 <__aeabi_dsub>
 800b070:	4622      	mov	r2, r4
 800b072:	462b      	mov	r3, r5
 800b074:	f7f5 fac8 	bl	8000608 <__aeabi_dmul>
 800b078:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b07c:	4680      	mov	r8, r0
 800b07e:	4689      	mov	r9, r1
 800b080:	4650      	mov	r0, sl
 800b082:	4659      	mov	r1, fp
 800b084:	f7f5 fac0 	bl	8000608 <__aeabi_dmul>
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	4640      	mov	r0, r8
 800b08e:	4649      	mov	r1, r9
 800b090:	f7f5 f904 	bl	800029c <__adddf3>
 800b094:	4632      	mov	r2, r6
 800b096:	463b      	mov	r3, r7
 800b098:	4680      	mov	r8, r0
 800b09a:	4689      	mov	r9, r1
 800b09c:	4620      	mov	r0, r4
 800b09e:	4629      	mov	r1, r5
 800b0a0:	f7f5 fab2 	bl	8000608 <__aeabi_dmul>
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	460d      	mov	r5, r1
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	4649      	mov	r1, r9
 800b0ae:	4640      	mov	r0, r8
 800b0b0:	f7f5 f8f4 	bl	800029c <__adddf3>
 800b0b4:	4b19      	ldr	r3, [pc, #100]	; (800b11c <__ieee754_pow+0x3fc>)
 800b0b6:	4299      	cmp	r1, r3
 800b0b8:	ec45 4b19 	vmov	d9, r4, r5
 800b0bc:	4606      	mov	r6, r0
 800b0be:	460f      	mov	r7, r1
 800b0c0:	468b      	mov	fp, r1
 800b0c2:	f340 82f1 	ble.w	800b6a8 <__ieee754_pow+0x988>
 800b0c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b0ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b0ce:	4303      	orrs	r3, r0
 800b0d0:	f000 81e4 	beq.w	800b49c <__ieee754_pow+0x77c>
 800b0d4:	ec51 0b18 	vmov	r0, r1, d8
 800b0d8:	2200      	movs	r2, #0
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f7f5 fd06 	bl	8000aec <__aeabi_dcmplt>
 800b0e0:	3800      	subs	r0, #0
 800b0e2:	bf18      	it	ne
 800b0e4:	2001      	movne	r0, #1
 800b0e6:	e72b      	b.n	800af40 <__ieee754_pow+0x220>
 800b0e8:	60000000 	.word	0x60000000
 800b0ec:	3ff71547 	.word	0x3ff71547
 800b0f0:	f85ddf44 	.word	0xf85ddf44
 800b0f4:	3e54ae0b 	.word	0x3e54ae0b
 800b0f8:	55555555 	.word	0x55555555
 800b0fc:	3fd55555 	.word	0x3fd55555
 800b100:	652b82fe 	.word	0x652b82fe
 800b104:	3ff71547 	.word	0x3ff71547
 800b108:	00000000 	.word	0x00000000
 800b10c:	bff00000 	.word	0xbff00000
 800b110:	3ff00000 	.word	0x3ff00000
 800b114:	3fd00000 	.word	0x3fd00000
 800b118:	3fe00000 	.word	0x3fe00000
 800b11c:	408fffff 	.word	0x408fffff
 800b120:	4bd5      	ldr	r3, [pc, #852]	; (800b478 <__ieee754_pow+0x758>)
 800b122:	402b      	ands	r3, r5
 800b124:	2200      	movs	r2, #0
 800b126:	b92b      	cbnz	r3, 800b134 <__ieee754_pow+0x414>
 800b128:	4bd4      	ldr	r3, [pc, #848]	; (800b47c <__ieee754_pow+0x75c>)
 800b12a:	f7f5 fa6d 	bl	8000608 <__aeabi_dmul>
 800b12e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b132:	460c      	mov	r4, r1
 800b134:	1523      	asrs	r3, r4, #20
 800b136:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b13a:	4413      	add	r3, r2
 800b13c:	9305      	str	r3, [sp, #20]
 800b13e:	4bd0      	ldr	r3, [pc, #832]	; (800b480 <__ieee754_pow+0x760>)
 800b140:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b144:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b148:	429c      	cmp	r4, r3
 800b14a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b14e:	dd08      	ble.n	800b162 <__ieee754_pow+0x442>
 800b150:	4bcc      	ldr	r3, [pc, #816]	; (800b484 <__ieee754_pow+0x764>)
 800b152:	429c      	cmp	r4, r3
 800b154:	f340 8162 	ble.w	800b41c <__ieee754_pow+0x6fc>
 800b158:	9b05      	ldr	r3, [sp, #20]
 800b15a:	3301      	adds	r3, #1
 800b15c:	9305      	str	r3, [sp, #20]
 800b15e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b162:	2400      	movs	r4, #0
 800b164:	00e3      	lsls	r3, r4, #3
 800b166:	9307      	str	r3, [sp, #28]
 800b168:	4bc7      	ldr	r3, [pc, #796]	; (800b488 <__ieee754_pow+0x768>)
 800b16a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b16e:	ed93 7b00 	vldr	d7, [r3]
 800b172:	4629      	mov	r1, r5
 800b174:	ec53 2b17 	vmov	r2, r3, d7
 800b178:	eeb0 9a47 	vmov.f32	s18, s14
 800b17c:	eef0 9a67 	vmov.f32	s19, s15
 800b180:	4682      	mov	sl, r0
 800b182:	f7f5 f889 	bl	8000298 <__aeabi_dsub>
 800b186:	4652      	mov	r2, sl
 800b188:	4606      	mov	r6, r0
 800b18a:	460f      	mov	r7, r1
 800b18c:	462b      	mov	r3, r5
 800b18e:	ec51 0b19 	vmov	r0, r1, d9
 800b192:	f7f5 f883 	bl	800029c <__adddf3>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	2000      	movs	r0, #0
 800b19c:	49bb      	ldr	r1, [pc, #748]	; (800b48c <__ieee754_pow+0x76c>)
 800b19e:	f7f5 fb5d 	bl	800085c <__aeabi_ddiv>
 800b1a2:	ec41 0b1a 	vmov	d10, r0, r1
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	4639      	mov	r1, r7
 800b1ae:	f7f5 fa2b 	bl	8000608 <__aeabi_dmul>
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1b8:	9302      	str	r3, [sp, #8]
 800b1ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b1be:	46ab      	mov	fp, r5
 800b1c0:	106d      	asrs	r5, r5, #1
 800b1c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b1c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b1ca:	ec41 0b18 	vmov	d8, r0, r1
 800b1ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	4640      	mov	r0, r8
 800b1d6:	4649      	mov	r1, r9
 800b1d8:	4614      	mov	r4, r2
 800b1da:	461d      	mov	r5, r3
 800b1dc:	f7f5 fa14 	bl	8000608 <__aeabi_dmul>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	4639      	mov	r1, r7
 800b1e8:	f7f5 f856 	bl	8000298 <__aeabi_dsub>
 800b1ec:	ec53 2b19 	vmov	r2, r3, d9
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	460f      	mov	r7, r1
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f7f5 f84e 	bl	8000298 <__aeabi_dsub>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	4650      	mov	r0, sl
 800b202:	4659      	mov	r1, fp
 800b204:	f7f5 f848 	bl	8000298 <__aeabi_dsub>
 800b208:	4642      	mov	r2, r8
 800b20a:	464b      	mov	r3, r9
 800b20c:	f7f5 f9fc 	bl	8000608 <__aeabi_dmul>
 800b210:	4602      	mov	r2, r0
 800b212:	460b      	mov	r3, r1
 800b214:	4630      	mov	r0, r6
 800b216:	4639      	mov	r1, r7
 800b218:	f7f5 f83e 	bl	8000298 <__aeabi_dsub>
 800b21c:	ec53 2b1a 	vmov	r2, r3, d10
 800b220:	f7f5 f9f2 	bl	8000608 <__aeabi_dmul>
 800b224:	ec53 2b18 	vmov	r2, r3, d8
 800b228:	ec41 0b19 	vmov	d9, r0, r1
 800b22c:	ec51 0b18 	vmov	r0, r1, d8
 800b230:	f7f5 f9ea 	bl	8000608 <__aeabi_dmul>
 800b234:	a37c      	add	r3, pc, #496	; (adr r3, 800b428 <__ieee754_pow+0x708>)
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	4604      	mov	r4, r0
 800b23c:	460d      	mov	r5, r1
 800b23e:	f7f5 f9e3 	bl	8000608 <__aeabi_dmul>
 800b242:	a37b      	add	r3, pc, #492	; (adr r3, 800b430 <__ieee754_pow+0x710>)
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	f7f5 f828 	bl	800029c <__adddf3>
 800b24c:	4622      	mov	r2, r4
 800b24e:	462b      	mov	r3, r5
 800b250:	f7f5 f9da 	bl	8000608 <__aeabi_dmul>
 800b254:	a378      	add	r3, pc, #480	; (adr r3, 800b438 <__ieee754_pow+0x718>)
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	f7f5 f81f 	bl	800029c <__adddf3>
 800b25e:	4622      	mov	r2, r4
 800b260:	462b      	mov	r3, r5
 800b262:	f7f5 f9d1 	bl	8000608 <__aeabi_dmul>
 800b266:	a376      	add	r3, pc, #472	; (adr r3, 800b440 <__ieee754_pow+0x720>)
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	f7f5 f816 	bl	800029c <__adddf3>
 800b270:	4622      	mov	r2, r4
 800b272:	462b      	mov	r3, r5
 800b274:	f7f5 f9c8 	bl	8000608 <__aeabi_dmul>
 800b278:	a373      	add	r3, pc, #460	; (adr r3, 800b448 <__ieee754_pow+0x728>)
 800b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27e:	f7f5 f80d 	bl	800029c <__adddf3>
 800b282:	4622      	mov	r2, r4
 800b284:	462b      	mov	r3, r5
 800b286:	f7f5 f9bf 	bl	8000608 <__aeabi_dmul>
 800b28a:	a371      	add	r3, pc, #452	; (adr r3, 800b450 <__ieee754_pow+0x730>)
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	f7f5 f804 	bl	800029c <__adddf3>
 800b294:	4622      	mov	r2, r4
 800b296:	4606      	mov	r6, r0
 800b298:	460f      	mov	r7, r1
 800b29a:	462b      	mov	r3, r5
 800b29c:	4620      	mov	r0, r4
 800b29e:	4629      	mov	r1, r5
 800b2a0:	f7f5 f9b2 	bl	8000608 <__aeabi_dmul>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	f7f5 f9ac 	bl	8000608 <__aeabi_dmul>
 800b2b0:	4642      	mov	r2, r8
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	460d      	mov	r5, r1
 800b2b6:	464b      	mov	r3, r9
 800b2b8:	ec51 0b18 	vmov	r0, r1, d8
 800b2bc:	f7f4 ffee 	bl	800029c <__adddf3>
 800b2c0:	ec53 2b19 	vmov	r2, r3, d9
 800b2c4:	f7f5 f9a0 	bl	8000608 <__aeabi_dmul>
 800b2c8:	4622      	mov	r2, r4
 800b2ca:	462b      	mov	r3, r5
 800b2cc:	f7f4 ffe6 	bl	800029c <__adddf3>
 800b2d0:	4642      	mov	r2, r8
 800b2d2:	4682      	mov	sl, r0
 800b2d4:	468b      	mov	fp, r1
 800b2d6:	464b      	mov	r3, r9
 800b2d8:	4640      	mov	r0, r8
 800b2da:	4649      	mov	r1, r9
 800b2dc:	f7f5 f994 	bl	8000608 <__aeabi_dmul>
 800b2e0:	4b6b      	ldr	r3, [pc, #428]	; (800b490 <__ieee754_pow+0x770>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	4606      	mov	r6, r0
 800b2e6:	460f      	mov	r7, r1
 800b2e8:	f7f4 ffd8 	bl	800029c <__adddf3>
 800b2ec:	4652      	mov	r2, sl
 800b2ee:	465b      	mov	r3, fp
 800b2f0:	f7f4 ffd4 	bl	800029c <__adddf3>
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	460d      	mov	r5, r1
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	4640      	mov	r0, r8
 800b300:	4649      	mov	r1, r9
 800b302:	f7f5 f981 	bl	8000608 <__aeabi_dmul>
 800b306:	4b62      	ldr	r3, [pc, #392]	; (800b490 <__ieee754_pow+0x770>)
 800b308:	4680      	mov	r8, r0
 800b30a:	4689      	mov	r9, r1
 800b30c:	2200      	movs	r2, #0
 800b30e:	4620      	mov	r0, r4
 800b310:	4629      	mov	r1, r5
 800b312:	f7f4 ffc1 	bl	8000298 <__aeabi_dsub>
 800b316:	4632      	mov	r2, r6
 800b318:	463b      	mov	r3, r7
 800b31a:	f7f4 ffbd 	bl	8000298 <__aeabi_dsub>
 800b31e:	4602      	mov	r2, r0
 800b320:	460b      	mov	r3, r1
 800b322:	4650      	mov	r0, sl
 800b324:	4659      	mov	r1, fp
 800b326:	f7f4 ffb7 	bl	8000298 <__aeabi_dsub>
 800b32a:	ec53 2b18 	vmov	r2, r3, d8
 800b32e:	f7f5 f96b 	bl	8000608 <__aeabi_dmul>
 800b332:	4622      	mov	r2, r4
 800b334:	4606      	mov	r6, r0
 800b336:	460f      	mov	r7, r1
 800b338:	462b      	mov	r3, r5
 800b33a:	ec51 0b19 	vmov	r0, r1, d9
 800b33e:	f7f5 f963 	bl	8000608 <__aeabi_dmul>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	4630      	mov	r0, r6
 800b348:	4639      	mov	r1, r7
 800b34a:	f7f4 ffa7 	bl	800029c <__adddf3>
 800b34e:	4606      	mov	r6, r0
 800b350:	460f      	mov	r7, r1
 800b352:	4602      	mov	r2, r0
 800b354:	460b      	mov	r3, r1
 800b356:	4640      	mov	r0, r8
 800b358:	4649      	mov	r1, r9
 800b35a:	f7f4 ff9f 	bl	800029c <__adddf3>
 800b35e:	a33e      	add	r3, pc, #248	; (adr r3, 800b458 <__ieee754_pow+0x738>)
 800b360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b364:	2000      	movs	r0, #0
 800b366:	4604      	mov	r4, r0
 800b368:	460d      	mov	r5, r1
 800b36a:	f7f5 f94d 	bl	8000608 <__aeabi_dmul>
 800b36e:	4642      	mov	r2, r8
 800b370:	ec41 0b18 	vmov	d8, r0, r1
 800b374:	464b      	mov	r3, r9
 800b376:	4620      	mov	r0, r4
 800b378:	4629      	mov	r1, r5
 800b37a:	f7f4 ff8d 	bl	8000298 <__aeabi_dsub>
 800b37e:	4602      	mov	r2, r0
 800b380:	460b      	mov	r3, r1
 800b382:	4630      	mov	r0, r6
 800b384:	4639      	mov	r1, r7
 800b386:	f7f4 ff87 	bl	8000298 <__aeabi_dsub>
 800b38a:	a335      	add	r3, pc, #212	; (adr r3, 800b460 <__ieee754_pow+0x740>)
 800b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b390:	f7f5 f93a 	bl	8000608 <__aeabi_dmul>
 800b394:	a334      	add	r3, pc, #208	; (adr r3, 800b468 <__ieee754_pow+0x748>)
 800b396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39a:	4606      	mov	r6, r0
 800b39c:	460f      	mov	r7, r1
 800b39e:	4620      	mov	r0, r4
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	f7f5 f931 	bl	8000608 <__aeabi_dmul>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	4639      	mov	r1, r7
 800b3ae:	f7f4 ff75 	bl	800029c <__adddf3>
 800b3b2:	9a07      	ldr	r2, [sp, #28]
 800b3b4:	4b37      	ldr	r3, [pc, #220]	; (800b494 <__ieee754_pow+0x774>)
 800b3b6:	4413      	add	r3, r2
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	f7f4 ff6e 	bl	800029c <__adddf3>
 800b3c0:	4682      	mov	sl, r0
 800b3c2:	9805      	ldr	r0, [sp, #20]
 800b3c4:	468b      	mov	fp, r1
 800b3c6:	f7f5 f8b5 	bl	8000534 <__aeabi_i2d>
 800b3ca:	9a07      	ldr	r2, [sp, #28]
 800b3cc:	4b32      	ldr	r3, [pc, #200]	; (800b498 <__ieee754_pow+0x778>)
 800b3ce:	4413      	add	r3, r2
 800b3d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	460f      	mov	r7, r1
 800b3d8:	4652      	mov	r2, sl
 800b3da:	465b      	mov	r3, fp
 800b3dc:	ec51 0b18 	vmov	r0, r1, d8
 800b3e0:	f7f4 ff5c 	bl	800029c <__adddf3>
 800b3e4:	4642      	mov	r2, r8
 800b3e6:	464b      	mov	r3, r9
 800b3e8:	f7f4 ff58 	bl	800029c <__adddf3>
 800b3ec:	4632      	mov	r2, r6
 800b3ee:	463b      	mov	r3, r7
 800b3f0:	f7f4 ff54 	bl	800029c <__adddf3>
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	4632      	mov	r2, r6
 800b3f8:	463b      	mov	r3, r7
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	460d      	mov	r5, r1
 800b3fe:	f7f4 ff4b 	bl	8000298 <__aeabi_dsub>
 800b402:	4642      	mov	r2, r8
 800b404:	464b      	mov	r3, r9
 800b406:	f7f4 ff47 	bl	8000298 <__aeabi_dsub>
 800b40a:	ec53 2b18 	vmov	r2, r3, d8
 800b40e:	f7f4 ff43 	bl	8000298 <__aeabi_dsub>
 800b412:	4602      	mov	r2, r0
 800b414:	460b      	mov	r3, r1
 800b416:	4650      	mov	r0, sl
 800b418:	4659      	mov	r1, fp
 800b41a:	e610      	b.n	800b03e <__ieee754_pow+0x31e>
 800b41c:	2401      	movs	r4, #1
 800b41e:	e6a1      	b.n	800b164 <__ieee754_pow+0x444>
 800b420:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b470 <__ieee754_pow+0x750>
 800b424:	e617      	b.n	800b056 <__ieee754_pow+0x336>
 800b426:	bf00      	nop
 800b428:	4a454eef 	.word	0x4a454eef
 800b42c:	3fca7e28 	.word	0x3fca7e28
 800b430:	93c9db65 	.word	0x93c9db65
 800b434:	3fcd864a 	.word	0x3fcd864a
 800b438:	a91d4101 	.word	0xa91d4101
 800b43c:	3fd17460 	.word	0x3fd17460
 800b440:	518f264d 	.word	0x518f264d
 800b444:	3fd55555 	.word	0x3fd55555
 800b448:	db6fabff 	.word	0xdb6fabff
 800b44c:	3fdb6db6 	.word	0x3fdb6db6
 800b450:	33333303 	.word	0x33333303
 800b454:	3fe33333 	.word	0x3fe33333
 800b458:	e0000000 	.word	0xe0000000
 800b45c:	3feec709 	.word	0x3feec709
 800b460:	dc3a03fd 	.word	0xdc3a03fd
 800b464:	3feec709 	.word	0x3feec709
 800b468:	145b01f5 	.word	0x145b01f5
 800b46c:	be3e2fe0 	.word	0xbe3e2fe0
 800b470:	00000000 	.word	0x00000000
 800b474:	3ff00000 	.word	0x3ff00000
 800b478:	7ff00000 	.word	0x7ff00000
 800b47c:	43400000 	.word	0x43400000
 800b480:	0003988e 	.word	0x0003988e
 800b484:	000bb679 	.word	0x000bb679
 800b488:	0800f288 	.word	0x0800f288
 800b48c:	3ff00000 	.word	0x3ff00000
 800b490:	40080000 	.word	0x40080000
 800b494:	0800f2a8 	.word	0x0800f2a8
 800b498:	0800f298 	.word	0x0800f298
 800b49c:	a3b5      	add	r3, pc, #724	; (adr r3, 800b774 <__ieee754_pow+0xa54>)
 800b49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a2:	4640      	mov	r0, r8
 800b4a4:	4649      	mov	r1, r9
 800b4a6:	f7f4 fef9 	bl	800029c <__adddf3>
 800b4aa:	4622      	mov	r2, r4
 800b4ac:	ec41 0b1a 	vmov	d10, r0, r1
 800b4b0:	462b      	mov	r3, r5
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	4639      	mov	r1, r7
 800b4b6:	f7f4 feef 	bl	8000298 <__aeabi_dsub>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	ec51 0b1a 	vmov	r0, r1, d10
 800b4c2:	f7f5 fb31 	bl	8000b28 <__aeabi_dcmpgt>
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	f47f ae04 	bne.w	800b0d4 <__ieee754_pow+0x3b4>
 800b4cc:	4aa4      	ldr	r2, [pc, #656]	; (800b760 <__ieee754_pow+0xa40>)
 800b4ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	f340 8108 	ble.w	800b6e8 <__ieee754_pow+0x9c8>
 800b4d8:	151b      	asrs	r3, r3, #20
 800b4da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b4de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b4e2:	fa4a f303 	asr.w	r3, sl, r3
 800b4e6:	445b      	add	r3, fp
 800b4e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b4ec:	4e9d      	ldr	r6, [pc, #628]	; (800b764 <__ieee754_pow+0xa44>)
 800b4ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b4f2:	4116      	asrs	r6, r2
 800b4f4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	ea23 0106 	bic.w	r1, r3, r6
 800b4fe:	f1c2 0214 	rsb	r2, r2, #20
 800b502:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b506:	fa4a fa02 	asr.w	sl, sl, r2
 800b50a:	f1bb 0f00 	cmp.w	fp, #0
 800b50e:	4602      	mov	r2, r0
 800b510:	460b      	mov	r3, r1
 800b512:	4620      	mov	r0, r4
 800b514:	4629      	mov	r1, r5
 800b516:	bfb8      	it	lt
 800b518:	f1ca 0a00 	rsblt	sl, sl, #0
 800b51c:	f7f4 febc 	bl	8000298 <__aeabi_dsub>
 800b520:	ec41 0b19 	vmov	d9, r0, r1
 800b524:	4642      	mov	r2, r8
 800b526:	464b      	mov	r3, r9
 800b528:	ec51 0b19 	vmov	r0, r1, d9
 800b52c:	f7f4 feb6 	bl	800029c <__adddf3>
 800b530:	a37b      	add	r3, pc, #492	; (adr r3, 800b720 <__ieee754_pow+0xa00>)
 800b532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b536:	2000      	movs	r0, #0
 800b538:	4604      	mov	r4, r0
 800b53a:	460d      	mov	r5, r1
 800b53c:	f7f5 f864 	bl	8000608 <__aeabi_dmul>
 800b540:	ec53 2b19 	vmov	r2, r3, d9
 800b544:	4606      	mov	r6, r0
 800b546:	460f      	mov	r7, r1
 800b548:	4620      	mov	r0, r4
 800b54a:	4629      	mov	r1, r5
 800b54c:	f7f4 fea4 	bl	8000298 <__aeabi_dsub>
 800b550:	4602      	mov	r2, r0
 800b552:	460b      	mov	r3, r1
 800b554:	4640      	mov	r0, r8
 800b556:	4649      	mov	r1, r9
 800b558:	f7f4 fe9e 	bl	8000298 <__aeabi_dsub>
 800b55c:	a372      	add	r3, pc, #456	; (adr r3, 800b728 <__ieee754_pow+0xa08>)
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	f7f5 f851 	bl	8000608 <__aeabi_dmul>
 800b566:	a372      	add	r3, pc, #456	; (adr r3, 800b730 <__ieee754_pow+0xa10>)
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	4680      	mov	r8, r0
 800b56e:	4689      	mov	r9, r1
 800b570:	4620      	mov	r0, r4
 800b572:	4629      	mov	r1, r5
 800b574:	f7f5 f848 	bl	8000608 <__aeabi_dmul>
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	4640      	mov	r0, r8
 800b57e:	4649      	mov	r1, r9
 800b580:	f7f4 fe8c 	bl	800029c <__adddf3>
 800b584:	4604      	mov	r4, r0
 800b586:	460d      	mov	r5, r1
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4630      	mov	r0, r6
 800b58e:	4639      	mov	r1, r7
 800b590:	f7f4 fe84 	bl	800029c <__adddf3>
 800b594:	4632      	mov	r2, r6
 800b596:	463b      	mov	r3, r7
 800b598:	4680      	mov	r8, r0
 800b59a:	4689      	mov	r9, r1
 800b59c:	f7f4 fe7c 	bl	8000298 <__aeabi_dsub>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	f7f4 fe76 	bl	8000298 <__aeabi_dsub>
 800b5ac:	4642      	mov	r2, r8
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	460f      	mov	r7, r1
 800b5b2:	464b      	mov	r3, r9
 800b5b4:	4640      	mov	r0, r8
 800b5b6:	4649      	mov	r1, r9
 800b5b8:	f7f5 f826 	bl	8000608 <__aeabi_dmul>
 800b5bc:	a35e      	add	r3, pc, #376	; (adr r3, 800b738 <__ieee754_pow+0xa18>)
 800b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	460d      	mov	r5, r1
 800b5c6:	f7f5 f81f 	bl	8000608 <__aeabi_dmul>
 800b5ca:	a35d      	add	r3, pc, #372	; (adr r3, 800b740 <__ieee754_pow+0xa20>)
 800b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d0:	f7f4 fe62 	bl	8000298 <__aeabi_dsub>
 800b5d4:	4622      	mov	r2, r4
 800b5d6:	462b      	mov	r3, r5
 800b5d8:	f7f5 f816 	bl	8000608 <__aeabi_dmul>
 800b5dc:	a35a      	add	r3, pc, #360	; (adr r3, 800b748 <__ieee754_pow+0xa28>)
 800b5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e2:	f7f4 fe5b 	bl	800029c <__adddf3>
 800b5e6:	4622      	mov	r2, r4
 800b5e8:	462b      	mov	r3, r5
 800b5ea:	f7f5 f80d 	bl	8000608 <__aeabi_dmul>
 800b5ee:	a358      	add	r3, pc, #352	; (adr r3, 800b750 <__ieee754_pow+0xa30>)
 800b5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f4:	f7f4 fe50 	bl	8000298 <__aeabi_dsub>
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	462b      	mov	r3, r5
 800b5fc:	f7f5 f804 	bl	8000608 <__aeabi_dmul>
 800b600:	a355      	add	r3, pc, #340	; (adr r3, 800b758 <__ieee754_pow+0xa38>)
 800b602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b606:	f7f4 fe49 	bl	800029c <__adddf3>
 800b60a:	4622      	mov	r2, r4
 800b60c:	462b      	mov	r3, r5
 800b60e:	f7f4 fffb 	bl	8000608 <__aeabi_dmul>
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
 800b616:	4640      	mov	r0, r8
 800b618:	4649      	mov	r1, r9
 800b61a:	f7f4 fe3d 	bl	8000298 <__aeabi_dsub>
 800b61e:	4604      	mov	r4, r0
 800b620:	460d      	mov	r5, r1
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	4640      	mov	r0, r8
 800b628:	4649      	mov	r1, r9
 800b62a:	f7f4 ffed 	bl	8000608 <__aeabi_dmul>
 800b62e:	2200      	movs	r2, #0
 800b630:	ec41 0b19 	vmov	d9, r0, r1
 800b634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b638:	4620      	mov	r0, r4
 800b63a:	4629      	mov	r1, r5
 800b63c:	f7f4 fe2c 	bl	8000298 <__aeabi_dsub>
 800b640:	4602      	mov	r2, r0
 800b642:	460b      	mov	r3, r1
 800b644:	ec51 0b19 	vmov	r0, r1, d9
 800b648:	f7f5 f908 	bl	800085c <__aeabi_ddiv>
 800b64c:	4632      	mov	r2, r6
 800b64e:	4604      	mov	r4, r0
 800b650:	460d      	mov	r5, r1
 800b652:	463b      	mov	r3, r7
 800b654:	4640      	mov	r0, r8
 800b656:	4649      	mov	r1, r9
 800b658:	f7f4 ffd6 	bl	8000608 <__aeabi_dmul>
 800b65c:	4632      	mov	r2, r6
 800b65e:	463b      	mov	r3, r7
 800b660:	f7f4 fe1c 	bl	800029c <__adddf3>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	4620      	mov	r0, r4
 800b66a:	4629      	mov	r1, r5
 800b66c:	f7f4 fe14 	bl	8000298 <__aeabi_dsub>
 800b670:	4642      	mov	r2, r8
 800b672:	464b      	mov	r3, r9
 800b674:	f7f4 fe10 	bl	8000298 <__aeabi_dsub>
 800b678:	460b      	mov	r3, r1
 800b67a:	4602      	mov	r2, r0
 800b67c:	493a      	ldr	r1, [pc, #232]	; (800b768 <__ieee754_pow+0xa48>)
 800b67e:	2000      	movs	r0, #0
 800b680:	f7f4 fe0a 	bl	8000298 <__aeabi_dsub>
 800b684:	ec41 0b10 	vmov	d0, r0, r1
 800b688:	ee10 3a90 	vmov	r3, s1
 800b68c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b694:	da2b      	bge.n	800b6ee <__ieee754_pow+0x9ce>
 800b696:	4650      	mov	r0, sl
 800b698:	f000 fdc2 	bl	800c220 <scalbn>
 800b69c:	ec51 0b10 	vmov	r0, r1, d0
 800b6a0:	ec53 2b18 	vmov	r2, r3, d8
 800b6a4:	f7ff bbed 	b.w	800ae82 <__ieee754_pow+0x162>
 800b6a8:	4b30      	ldr	r3, [pc, #192]	; (800b76c <__ieee754_pow+0xa4c>)
 800b6aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b6ae:	429e      	cmp	r6, r3
 800b6b0:	f77f af0c 	ble.w	800b4cc <__ieee754_pow+0x7ac>
 800b6b4:	4b2e      	ldr	r3, [pc, #184]	; (800b770 <__ieee754_pow+0xa50>)
 800b6b6:	440b      	add	r3, r1
 800b6b8:	4303      	orrs	r3, r0
 800b6ba:	d009      	beq.n	800b6d0 <__ieee754_pow+0x9b0>
 800b6bc:	ec51 0b18 	vmov	r0, r1, d8
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f7f5 fa12 	bl	8000aec <__aeabi_dcmplt>
 800b6c8:	3800      	subs	r0, #0
 800b6ca:	bf18      	it	ne
 800b6cc:	2001      	movne	r0, #1
 800b6ce:	e447      	b.n	800af60 <__ieee754_pow+0x240>
 800b6d0:	4622      	mov	r2, r4
 800b6d2:	462b      	mov	r3, r5
 800b6d4:	f7f4 fde0 	bl	8000298 <__aeabi_dsub>
 800b6d8:	4642      	mov	r2, r8
 800b6da:	464b      	mov	r3, r9
 800b6dc:	f7f5 fa1a 	bl	8000b14 <__aeabi_dcmpge>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	f43f aef3 	beq.w	800b4cc <__ieee754_pow+0x7ac>
 800b6e6:	e7e9      	b.n	800b6bc <__ieee754_pow+0x99c>
 800b6e8:	f04f 0a00 	mov.w	sl, #0
 800b6ec:	e71a      	b.n	800b524 <__ieee754_pow+0x804>
 800b6ee:	ec51 0b10 	vmov	r0, r1, d0
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	e7d4      	b.n	800b6a0 <__ieee754_pow+0x980>
 800b6f6:	491c      	ldr	r1, [pc, #112]	; (800b768 <__ieee754_pow+0xa48>)
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	f7ff bb30 	b.w	800ad5e <__ieee754_pow+0x3e>
 800b6fe:	2000      	movs	r0, #0
 800b700:	2100      	movs	r1, #0
 800b702:	f7ff bb2c 	b.w	800ad5e <__ieee754_pow+0x3e>
 800b706:	4630      	mov	r0, r6
 800b708:	4639      	mov	r1, r7
 800b70a:	f7ff bb28 	b.w	800ad5e <__ieee754_pow+0x3e>
 800b70e:	9204      	str	r2, [sp, #16]
 800b710:	f7ff bb7a 	b.w	800ae08 <__ieee754_pow+0xe8>
 800b714:	2300      	movs	r3, #0
 800b716:	f7ff bb64 	b.w	800ade2 <__ieee754_pow+0xc2>
 800b71a:	bf00      	nop
 800b71c:	f3af 8000 	nop.w
 800b720:	00000000 	.word	0x00000000
 800b724:	3fe62e43 	.word	0x3fe62e43
 800b728:	fefa39ef 	.word	0xfefa39ef
 800b72c:	3fe62e42 	.word	0x3fe62e42
 800b730:	0ca86c39 	.word	0x0ca86c39
 800b734:	be205c61 	.word	0xbe205c61
 800b738:	72bea4d0 	.word	0x72bea4d0
 800b73c:	3e663769 	.word	0x3e663769
 800b740:	c5d26bf1 	.word	0xc5d26bf1
 800b744:	3ebbbd41 	.word	0x3ebbbd41
 800b748:	af25de2c 	.word	0xaf25de2c
 800b74c:	3f11566a 	.word	0x3f11566a
 800b750:	16bebd93 	.word	0x16bebd93
 800b754:	3f66c16c 	.word	0x3f66c16c
 800b758:	5555553e 	.word	0x5555553e
 800b75c:	3fc55555 	.word	0x3fc55555
 800b760:	3fe00000 	.word	0x3fe00000
 800b764:	000fffff 	.word	0x000fffff
 800b768:	3ff00000 	.word	0x3ff00000
 800b76c:	4090cbff 	.word	0x4090cbff
 800b770:	3f6f3400 	.word	0x3f6f3400
 800b774:	652b82fe 	.word	0x652b82fe
 800b778:	3c971547 	.word	0x3c971547

0800b77c <__ieee754_sqrt>:
 800b77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b780:	ec55 4b10 	vmov	r4, r5, d0
 800b784:	4e55      	ldr	r6, [pc, #340]	; (800b8dc <__ieee754_sqrt+0x160>)
 800b786:	43ae      	bics	r6, r5
 800b788:	ee10 0a10 	vmov	r0, s0
 800b78c:	ee10 3a10 	vmov	r3, s0
 800b790:	462a      	mov	r2, r5
 800b792:	4629      	mov	r1, r5
 800b794:	d110      	bne.n	800b7b8 <__ieee754_sqrt+0x3c>
 800b796:	ee10 2a10 	vmov	r2, s0
 800b79a:	462b      	mov	r3, r5
 800b79c:	f7f4 ff34 	bl	8000608 <__aeabi_dmul>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	f7f4 fd78 	bl	800029c <__adddf3>
 800b7ac:	4604      	mov	r4, r0
 800b7ae:	460d      	mov	r5, r1
 800b7b0:	ec45 4b10 	vmov	d0, r4, r5
 800b7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b8:	2d00      	cmp	r5, #0
 800b7ba:	dc10      	bgt.n	800b7de <__ieee754_sqrt+0x62>
 800b7bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b7c0:	4330      	orrs	r0, r6
 800b7c2:	d0f5      	beq.n	800b7b0 <__ieee754_sqrt+0x34>
 800b7c4:	b15d      	cbz	r5, 800b7de <__ieee754_sqrt+0x62>
 800b7c6:	ee10 2a10 	vmov	r2, s0
 800b7ca:	462b      	mov	r3, r5
 800b7cc:	ee10 0a10 	vmov	r0, s0
 800b7d0:	f7f4 fd62 	bl	8000298 <__aeabi_dsub>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	f7f5 f840 	bl	800085c <__aeabi_ddiv>
 800b7dc:	e7e6      	b.n	800b7ac <__ieee754_sqrt+0x30>
 800b7de:	1512      	asrs	r2, r2, #20
 800b7e0:	d074      	beq.n	800b8cc <__ieee754_sqrt+0x150>
 800b7e2:	07d4      	lsls	r4, r2, #31
 800b7e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b7e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b7ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b7f0:	bf5e      	ittt	pl
 800b7f2:	0fda      	lsrpl	r2, r3, #31
 800b7f4:	005b      	lslpl	r3, r3, #1
 800b7f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b7fa:	2400      	movs	r4, #0
 800b7fc:	0fda      	lsrs	r2, r3, #31
 800b7fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b802:	107f      	asrs	r7, r7, #1
 800b804:	005b      	lsls	r3, r3, #1
 800b806:	2516      	movs	r5, #22
 800b808:	4620      	mov	r0, r4
 800b80a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b80e:	1886      	adds	r6, r0, r2
 800b810:	428e      	cmp	r6, r1
 800b812:	bfde      	ittt	le
 800b814:	1b89      	suble	r1, r1, r6
 800b816:	18b0      	addle	r0, r6, r2
 800b818:	18a4      	addle	r4, r4, r2
 800b81a:	0049      	lsls	r1, r1, #1
 800b81c:	3d01      	subs	r5, #1
 800b81e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b822:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b826:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b82a:	d1f0      	bne.n	800b80e <__ieee754_sqrt+0x92>
 800b82c:	462a      	mov	r2, r5
 800b82e:	f04f 0e20 	mov.w	lr, #32
 800b832:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b836:	4281      	cmp	r1, r0
 800b838:	eb06 0c05 	add.w	ip, r6, r5
 800b83c:	dc02      	bgt.n	800b844 <__ieee754_sqrt+0xc8>
 800b83e:	d113      	bne.n	800b868 <__ieee754_sqrt+0xec>
 800b840:	459c      	cmp	ip, r3
 800b842:	d811      	bhi.n	800b868 <__ieee754_sqrt+0xec>
 800b844:	f1bc 0f00 	cmp.w	ip, #0
 800b848:	eb0c 0506 	add.w	r5, ip, r6
 800b84c:	da43      	bge.n	800b8d6 <__ieee754_sqrt+0x15a>
 800b84e:	2d00      	cmp	r5, #0
 800b850:	db41      	blt.n	800b8d6 <__ieee754_sqrt+0x15a>
 800b852:	f100 0801 	add.w	r8, r0, #1
 800b856:	1a09      	subs	r1, r1, r0
 800b858:	459c      	cmp	ip, r3
 800b85a:	bf88      	it	hi
 800b85c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b860:	eba3 030c 	sub.w	r3, r3, ip
 800b864:	4432      	add	r2, r6
 800b866:	4640      	mov	r0, r8
 800b868:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b86c:	f1be 0e01 	subs.w	lr, lr, #1
 800b870:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b874:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b878:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b87c:	d1db      	bne.n	800b836 <__ieee754_sqrt+0xba>
 800b87e:	430b      	orrs	r3, r1
 800b880:	d006      	beq.n	800b890 <__ieee754_sqrt+0x114>
 800b882:	1c50      	adds	r0, r2, #1
 800b884:	bf13      	iteet	ne
 800b886:	3201      	addne	r2, #1
 800b888:	3401      	addeq	r4, #1
 800b88a:	4672      	moveq	r2, lr
 800b88c:	f022 0201 	bicne.w	r2, r2, #1
 800b890:	1063      	asrs	r3, r4, #1
 800b892:	0852      	lsrs	r2, r2, #1
 800b894:	07e1      	lsls	r1, r4, #31
 800b896:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b89a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b89e:	bf48      	it	mi
 800b8a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b8a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b8a8:	4614      	mov	r4, r2
 800b8aa:	e781      	b.n	800b7b0 <__ieee754_sqrt+0x34>
 800b8ac:	0ad9      	lsrs	r1, r3, #11
 800b8ae:	3815      	subs	r0, #21
 800b8b0:	055b      	lsls	r3, r3, #21
 800b8b2:	2900      	cmp	r1, #0
 800b8b4:	d0fa      	beq.n	800b8ac <__ieee754_sqrt+0x130>
 800b8b6:	02cd      	lsls	r5, r1, #11
 800b8b8:	d50a      	bpl.n	800b8d0 <__ieee754_sqrt+0x154>
 800b8ba:	f1c2 0420 	rsb	r4, r2, #32
 800b8be:	fa23 f404 	lsr.w	r4, r3, r4
 800b8c2:	1e55      	subs	r5, r2, #1
 800b8c4:	4093      	lsls	r3, r2
 800b8c6:	4321      	orrs	r1, r4
 800b8c8:	1b42      	subs	r2, r0, r5
 800b8ca:	e78a      	b.n	800b7e2 <__ieee754_sqrt+0x66>
 800b8cc:	4610      	mov	r0, r2
 800b8ce:	e7f0      	b.n	800b8b2 <__ieee754_sqrt+0x136>
 800b8d0:	0049      	lsls	r1, r1, #1
 800b8d2:	3201      	adds	r2, #1
 800b8d4:	e7ef      	b.n	800b8b6 <__ieee754_sqrt+0x13a>
 800b8d6:	4680      	mov	r8, r0
 800b8d8:	e7bd      	b.n	800b856 <__ieee754_sqrt+0xda>
 800b8da:	bf00      	nop
 800b8dc:	7ff00000 	.word	0x7ff00000

0800b8e0 <__ieee754_rem_pio2f>:
 800b8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8e2:	ee10 6a10 	vmov	r6, s0
 800b8e6:	4b8e      	ldr	r3, [pc, #568]	; (800bb20 <__ieee754_rem_pio2f+0x240>)
 800b8e8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b8ec:	429d      	cmp	r5, r3
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	eef0 7a40 	vmov.f32	s15, s0
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	dc05      	bgt.n	800b904 <__ieee754_rem_pio2f+0x24>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	ed80 0a00 	vstr	s0, [r0]
 800b8fe:	6043      	str	r3, [r0, #4]
 800b900:	2000      	movs	r0, #0
 800b902:	e01a      	b.n	800b93a <__ieee754_rem_pio2f+0x5a>
 800b904:	4b87      	ldr	r3, [pc, #540]	; (800bb24 <__ieee754_rem_pio2f+0x244>)
 800b906:	429d      	cmp	r5, r3
 800b908:	dc46      	bgt.n	800b998 <__ieee754_rem_pio2f+0xb8>
 800b90a:	2e00      	cmp	r6, #0
 800b90c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800bb28 <__ieee754_rem_pio2f+0x248>
 800b910:	4b86      	ldr	r3, [pc, #536]	; (800bb2c <__ieee754_rem_pio2f+0x24c>)
 800b912:	f025 050f 	bic.w	r5, r5, #15
 800b916:	dd1f      	ble.n	800b958 <__ieee754_rem_pio2f+0x78>
 800b918:	429d      	cmp	r5, r3
 800b91a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b91e:	d00e      	beq.n	800b93e <__ieee754_rem_pio2f+0x5e>
 800b920:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800bb30 <__ieee754_rem_pio2f+0x250>
 800b924:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b928:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b92c:	ed80 0a00 	vstr	s0, [r0]
 800b930:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b934:	2001      	movs	r0, #1
 800b936:	edc4 7a01 	vstr	s15, [r4, #4]
 800b93a:	b007      	add	sp, #28
 800b93c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b93e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800bb34 <__ieee754_rem_pio2f+0x254>
 800b942:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800bb38 <__ieee754_rem_pio2f+0x258>
 800b946:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b94a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b94e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b952:	edc0 6a00 	vstr	s13, [r0]
 800b956:	e7eb      	b.n	800b930 <__ieee754_rem_pio2f+0x50>
 800b958:	429d      	cmp	r5, r3
 800b95a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b95e:	d00e      	beq.n	800b97e <__ieee754_rem_pio2f+0x9e>
 800b960:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bb30 <__ieee754_rem_pio2f+0x250>
 800b964:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b968:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b96c:	ed80 0a00 	vstr	s0, [r0]
 800b970:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b974:	f04f 30ff 	mov.w	r0, #4294967295
 800b978:	edc4 7a01 	vstr	s15, [r4, #4]
 800b97c:	e7dd      	b.n	800b93a <__ieee754_rem_pio2f+0x5a>
 800b97e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800bb34 <__ieee754_rem_pio2f+0x254>
 800b982:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800bb38 <__ieee754_rem_pio2f+0x258>
 800b986:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b98a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b98e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b992:	edc0 6a00 	vstr	s13, [r0]
 800b996:	e7eb      	b.n	800b970 <__ieee754_rem_pio2f+0x90>
 800b998:	4b68      	ldr	r3, [pc, #416]	; (800bb3c <__ieee754_rem_pio2f+0x25c>)
 800b99a:	429d      	cmp	r5, r3
 800b99c:	dc72      	bgt.n	800ba84 <__ieee754_rem_pio2f+0x1a4>
 800b99e:	f000 fde1 	bl	800c564 <fabsf>
 800b9a2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800bb40 <__ieee754_rem_pio2f+0x260>
 800b9a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b9aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b9ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b9b6:	ee17 0a90 	vmov	r0, s15
 800b9ba:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800bb28 <__ieee754_rem_pio2f+0x248>
 800b9be:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b9c2:	281f      	cmp	r0, #31
 800b9c4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800bb30 <__ieee754_rem_pio2f+0x250>
 800b9c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9cc:	eeb1 6a47 	vneg.f32	s12, s14
 800b9d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b9d4:	ee16 2a90 	vmov	r2, s13
 800b9d8:	dc1c      	bgt.n	800ba14 <__ieee754_rem_pio2f+0x134>
 800b9da:	495a      	ldr	r1, [pc, #360]	; (800bb44 <__ieee754_rem_pio2f+0x264>)
 800b9dc:	1e47      	subs	r7, r0, #1
 800b9de:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b9e2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b9e6:	428b      	cmp	r3, r1
 800b9e8:	d014      	beq.n	800ba14 <__ieee754_rem_pio2f+0x134>
 800b9ea:	6022      	str	r2, [r4, #0]
 800b9ec:	ed94 7a00 	vldr	s14, [r4]
 800b9f0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b9f4:	2e00      	cmp	r6, #0
 800b9f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b9fa:	ed84 0a01 	vstr	s0, [r4, #4]
 800b9fe:	da9c      	bge.n	800b93a <__ieee754_rem_pio2f+0x5a>
 800ba00:	eeb1 7a47 	vneg.f32	s14, s14
 800ba04:	eeb1 0a40 	vneg.f32	s0, s0
 800ba08:	ed84 7a00 	vstr	s14, [r4]
 800ba0c:	ed84 0a01 	vstr	s0, [r4, #4]
 800ba10:	4240      	negs	r0, r0
 800ba12:	e792      	b.n	800b93a <__ieee754_rem_pio2f+0x5a>
 800ba14:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ba18:	15eb      	asrs	r3, r5, #23
 800ba1a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800ba1e:	2d08      	cmp	r5, #8
 800ba20:	dde3      	ble.n	800b9ea <__ieee754_rem_pio2f+0x10a>
 800ba22:	eddf 7a44 	vldr	s15, [pc, #272]	; 800bb34 <__ieee754_rem_pio2f+0x254>
 800ba26:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bb38 <__ieee754_rem_pio2f+0x258>
 800ba2a:	eef0 6a40 	vmov.f32	s13, s0
 800ba2e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ba32:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ba36:	eea6 0a27 	vfma.f32	s0, s12, s15
 800ba3a:	eef0 7a40 	vmov.f32	s15, s0
 800ba3e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800ba42:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ba46:	ee15 2a90 	vmov	r2, s11
 800ba4a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ba4e:	1a5b      	subs	r3, r3, r1
 800ba50:	2b19      	cmp	r3, #25
 800ba52:	dc04      	bgt.n	800ba5e <__ieee754_rem_pio2f+0x17e>
 800ba54:	edc4 5a00 	vstr	s11, [r4]
 800ba58:	eeb0 0a66 	vmov.f32	s0, s13
 800ba5c:	e7c6      	b.n	800b9ec <__ieee754_rem_pio2f+0x10c>
 800ba5e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800bb48 <__ieee754_rem_pio2f+0x268>
 800ba62:	eeb0 0a66 	vmov.f32	s0, s13
 800ba66:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ba6a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ba6e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800bb4c <__ieee754_rem_pio2f+0x26c>
 800ba72:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ba76:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ba7a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ba7e:	ed84 7a00 	vstr	s14, [r4]
 800ba82:	e7b3      	b.n	800b9ec <__ieee754_rem_pio2f+0x10c>
 800ba84:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ba88:	db06      	blt.n	800ba98 <__ieee754_rem_pio2f+0x1b8>
 800ba8a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ba8e:	edc0 7a01 	vstr	s15, [r0, #4]
 800ba92:	edc0 7a00 	vstr	s15, [r0]
 800ba96:	e733      	b.n	800b900 <__ieee754_rem_pio2f+0x20>
 800ba98:	15ea      	asrs	r2, r5, #23
 800ba9a:	3a86      	subs	r2, #134	; 0x86
 800ba9c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800baa0:	ee07 3a90 	vmov	s15, r3
 800baa4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800baa8:	eddf 6a29 	vldr	s13, [pc, #164]	; 800bb50 <__ieee754_rem_pio2f+0x270>
 800baac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bab4:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bab8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800babc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bac0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bac4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bac8:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bacc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bad0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad8:	edcd 7a05 	vstr	s15, [sp, #20]
 800badc:	d11e      	bne.n	800bb1c <__ieee754_rem_pio2f+0x23c>
 800bade:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bae6:	bf14      	ite	ne
 800bae8:	2302      	movne	r3, #2
 800baea:	2301      	moveq	r3, #1
 800baec:	4919      	ldr	r1, [pc, #100]	; (800bb54 <__ieee754_rem_pio2f+0x274>)
 800baee:	9101      	str	r1, [sp, #4]
 800baf0:	2102      	movs	r1, #2
 800baf2:	9100      	str	r1, [sp, #0]
 800baf4:	a803      	add	r0, sp, #12
 800baf6:	4621      	mov	r1, r4
 800baf8:	f000 f88e 	bl	800bc18 <__kernel_rem_pio2f>
 800bafc:	2e00      	cmp	r6, #0
 800bafe:	f6bf af1c 	bge.w	800b93a <__ieee754_rem_pio2f+0x5a>
 800bb02:	edd4 7a00 	vldr	s15, [r4]
 800bb06:	eef1 7a67 	vneg.f32	s15, s15
 800bb0a:	edc4 7a00 	vstr	s15, [r4]
 800bb0e:	edd4 7a01 	vldr	s15, [r4, #4]
 800bb12:	eef1 7a67 	vneg.f32	s15, s15
 800bb16:	edc4 7a01 	vstr	s15, [r4, #4]
 800bb1a:	e779      	b.n	800ba10 <__ieee754_rem_pio2f+0x130>
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	e7e5      	b.n	800baec <__ieee754_rem_pio2f+0x20c>
 800bb20:	3f490fd8 	.word	0x3f490fd8
 800bb24:	4016cbe3 	.word	0x4016cbe3
 800bb28:	3fc90f80 	.word	0x3fc90f80
 800bb2c:	3fc90fd0 	.word	0x3fc90fd0
 800bb30:	37354443 	.word	0x37354443
 800bb34:	37354400 	.word	0x37354400
 800bb38:	2e85a308 	.word	0x2e85a308
 800bb3c:	43490f80 	.word	0x43490f80
 800bb40:	3f22f984 	.word	0x3f22f984
 800bb44:	0800f2b8 	.word	0x0800f2b8
 800bb48:	2e85a300 	.word	0x2e85a300
 800bb4c:	248d3132 	.word	0x248d3132
 800bb50:	43800000 	.word	0x43800000
 800bb54:	0800f338 	.word	0x0800f338

0800bb58 <__kernel_cosf>:
 800bb58:	ee10 3a10 	vmov	r3, s0
 800bb5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb60:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bb64:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bb68:	da05      	bge.n	800bb76 <__kernel_cosf+0x1e>
 800bb6a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bb6e:	ee17 2a90 	vmov	r2, s15
 800bb72:	2a00      	cmp	r2, #0
 800bb74:	d03d      	beq.n	800bbf2 <__kernel_cosf+0x9a>
 800bb76:	ee60 5a00 	vmul.f32	s11, s0, s0
 800bb7a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bbf8 <__kernel_cosf+0xa0>
 800bb7e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800bbfc <__kernel_cosf+0xa4>
 800bb82:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800bc00 <__kernel_cosf+0xa8>
 800bb86:	4a1f      	ldr	r2, [pc, #124]	; (800bc04 <__kernel_cosf+0xac>)
 800bb88:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800bc08 <__kernel_cosf+0xb0>
 800bb92:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bb96:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800bc0c <__kernel_cosf+0xb4>
 800bb9a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bb9e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800bc10 <__kernel_cosf+0xb8>
 800bba2:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bba6:	eeb0 7a66 	vmov.f32	s14, s13
 800bbaa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bbae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bbb2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800bbb6:	ee67 6a25 	vmul.f32	s13, s14, s11
 800bbba:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800bbbe:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bbc2:	dc04      	bgt.n	800bbce <__kernel_cosf+0x76>
 800bbc4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800bbc8:	ee36 0a47 	vsub.f32	s0, s12, s14
 800bbcc:	4770      	bx	lr
 800bbce:	4a11      	ldr	r2, [pc, #68]	; (800bc14 <__kernel_cosf+0xbc>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	bfda      	itte	le
 800bbd4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800bbd8:	ee06 3a90 	vmovle	s13, r3
 800bbdc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800bbe0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bbe4:	ee36 0a66 	vsub.f32	s0, s12, s13
 800bbe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbec:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bbf0:	4770      	bx	lr
 800bbf2:	eeb0 0a46 	vmov.f32	s0, s12
 800bbf6:	4770      	bx	lr
 800bbf8:	ad47d74e 	.word	0xad47d74e
 800bbfc:	310f74f6 	.word	0x310f74f6
 800bc00:	3d2aaaab 	.word	0x3d2aaaab
 800bc04:	3e999999 	.word	0x3e999999
 800bc08:	b493f27c 	.word	0xb493f27c
 800bc0c:	37d00d01 	.word	0x37d00d01
 800bc10:	bab60b61 	.word	0xbab60b61
 800bc14:	3f480000 	.word	0x3f480000

0800bc18 <__kernel_rem_pio2f>:
 800bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	ed2d 8b04 	vpush	{d8-d9}
 800bc20:	b0d9      	sub	sp, #356	; 0x164
 800bc22:	4688      	mov	r8, r1
 800bc24:	9002      	str	r0, [sp, #8]
 800bc26:	49bb      	ldr	r1, [pc, #748]	; (800bf14 <__kernel_rem_pio2f+0x2fc>)
 800bc28:	9866      	ldr	r0, [sp, #408]	; 0x198
 800bc2a:	9301      	str	r3, [sp, #4]
 800bc2c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800bc30:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800bc34:	1e59      	subs	r1, r3, #1
 800bc36:	1d13      	adds	r3, r2, #4
 800bc38:	db27      	blt.n	800bc8a <__kernel_rem_pio2f+0x72>
 800bc3a:	f1b2 0b03 	subs.w	fp, r2, #3
 800bc3e:	bf48      	it	mi
 800bc40:	f102 0b04 	addmi.w	fp, r2, #4
 800bc44:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800bc48:	1c45      	adds	r5, r0, #1
 800bc4a:	00ec      	lsls	r4, r5, #3
 800bc4c:	1a47      	subs	r7, r0, r1
 800bc4e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800bf24 <__kernel_rem_pio2f+0x30c>
 800bc52:	9403      	str	r4, [sp, #12]
 800bc54:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800bc58:	eb0a 0c01 	add.w	ip, sl, r1
 800bc5c:	ae1c      	add	r6, sp, #112	; 0x70
 800bc5e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800bc62:	2400      	movs	r4, #0
 800bc64:	4564      	cmp	r4, ip
 800bc66:	dd12      	ble.n	800bc8e <__kernel_rem_pio2f+0x76>
 800bc68:	9b01      	ldr	r3, [sp, #4]
 800bc6a:	ac1c      	add	r4, sp, #112	; 0x70
 800bc6c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800bc70:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800bc74:	f04f 0c00 	mov.w	ip, #0
 800bc78:	45d4      	cmp	ip, sl
 800bc7a:	dc27      	bgt.n	800bccc <__kernel_rem_pio2f+0xb4>
 800bc7c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800bc80:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800bf24 <__kernel_rem_pio2f+0x30c>
 800bc84:	4627      	mov	r7, r4
 800bc86:	2600      	movs	r6, #0
 800bc88:	e016      	b.n	800bcb8 <__kernel_rem_pio2f+0xa0>
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	e7dc      	b.n	800bc48 <__kernel_rem_pio2f+0x30>
 800bc8e:	42e7      	cmn	r7, r4
 800bc90:	bf5d      	ittte	pl
 800bc92:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800bc96:	ee07 3a90 	vmovpl	s15, r3
 800bc9a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bc9e:	eef0 7a47 	vmovmi.f32	s15, s14
 800bca2:	ece6 7a01 	vstmia	r6!, {s15}
 800bca6:	3401      	adds	r4, #1
 800bca8:	e7dc      	b.n	800bc64 <__kernel_rem_pio2f+0x4c>
 800bcaa:	ecf9 6a01 	vldmia	r9!, {s13}
 800bcae:	ed97 7a00 	vldr	s14, [r7]
 800bcb2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bcb6:	3601      	adds	r6, #1
 800bcb8:	428e      	cmp	r6, r1
 800bcba:	f1a7 0704 	sub.w	r7, r7, #4
 800bcbe:	ddf4      	ble.n	800bcaa <__kernel_rem_pio2f+0x92>
 800bcc0:	eceb 7a01 	vstmia	fp!, {s15}
 800bcc4:	f10c 0c01 	add.w	ip, ip, #1
 800bcc8:	3404      	adds	r4, #4
 800bcca:	e7d5      	b.n	800bc78 <__kernel_rem_pio2f+0x60>
 800bccc:	ab08      	add	r3, sp, #32
 800bcce:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800bcd2:	eddf 8a93 	vldr	s17, [pc, #588]	; 800bf20 <__kernel_rem_pio2f+0x308>
 800bcd6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800bf1c <__kernel_rem_pio2f+0x304>
 800bcda:	9304      	str	r3, [sp, #16]
 800bcdc:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800bce0:	4656      	mov	r6, sl
 800bce2:	00b3      	lsls	r3, r6, #2
 800bce4:	9305      	str	r3, [sp, #20]
 800bce6:	ab58      	add	r3, sp, #352	; 0x160
 800bce8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800bcec:	ac08      	add	r4, sp, #32
 800bcee:	ab44      	add	r3, sp, #272	; 0x110
 800bcf0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800bcf4:	46a4      	mov	ip, r4
 800bcf6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800bcfa:	4637      	mov	r7, r6
 800bcfc:	2f00      	cmp	r7, #0
 800bcfe:	f1a0 0004 	sub.w	r0, r0, #4
 800bd02:	dc4f      	bgt.n	800bda4 <__kernel_rem_pio2f+0x18c>
 800bd04:	4628      	mov	r0, r5
 800bd06:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800bd0a:	f000 fc75 	bl	800c5f8 <scalbnf>
 800bd0e:	eeb0 8a40 	vmov.f32	s16, s0
 800bd12:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800bd16:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bd1a:	f000 fc2b 	bl	800c574 <floorf>
 800bd1e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800bd22:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bd26:	2d00      	cmp	r5, #0
 800bd28:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800bd2c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bd30:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800bd34:	ee17 9a90 	vmov	r9, s15
 800bd38:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bd3c:	dd44      	ble.n	800bdc8 <__kernel_rem_pio2f+0x1b0>
 800bd3e:	f106 3cff 	add.w	ip, r6, #4294967295
 800bd42:	ab08      	add	r3, sp, #32
 800bd44:	f1c5 0e08 	rsb	lr, r5, #8
 800bd48:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800bd4c:	fa47 f00e 	asr.w	r0, r7, lr
 800bd50:	4481      	add	r9, r0
 800bd52:	fa00 f00e 	lsl.w	r0, r0, lr
 800bd56:	1a3f      	subs	r7, r7, r0
 800bd58:	f1c5 0007 	rsb	r0, r5, #7
 800bd5c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800bd60:	4107      	asrs	r7, r0
 800bd62:	2f00      	cmp	r7, #0
 800bd64:	dd3f      	ble.n	800bde6 <__kernel_rem_pio2f+0x1ce>
 800bd66:	f04f 0e00 	mov.w	lr, #0
 800bd6a:	f109 0901 	add.w	r9, r9, #1
 800bd6e:	4673      	mov	r3, lr
 800bd70:	4576      	cmp	r6, lr
 800bd72:	dc6b      	bgt.n	800be4c <__kernel_rem_pio2f+0x234>
 800bd74:	2d00      	cmp	r5, #0
 800bd76:	dd04      	ble.n	800bd82 <__kernel_rem_pio2f+0x16a>
 800bd78:	2d01      	cmp	r5, #1
 800bd7a:	d078      	beq.n	800be6e <__kernel_rem_pio2f+0x256>
 800bd7c:	2d02      	cmp	r5, #2
 800bd7e:	f000 8081 	beq.w	800be84 <__kernel_rem_pio2f+0x26c>
 800bd82:	2f02      	cmp	r7, #2
 800bd84:	d12f      	bne.n	800bde6 <__kernel_rem_pio2f+0x1ce>
 800bd86:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bd8a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800bd8e:	b353      	cbz	r3, 800bde6 <__kernel_rem_pio2f+0x1ce>
 800bd90:	4628      	mov	r0, r5
 800bd92:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800bd96:	f000 fc2f 	bl	800c5f8 <scalbnf>
 800bd9a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800bd9e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bda2:	e020      	b.n	800bde6 <__kernel_rem_pio2f+0x1ce>
 800bda4:	ee60 7a28 	vmul.f32	s15, s0, s17
 800bda8:	3f01      	subs	r7, #1
 800bdaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdb2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bdb6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bdba:	ecac 0a01 	vstmia	ip!, {s0}
 800bdbe:	ed90 0a00 	vldr	s0, [r0]
 800bdc2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bdc6:	e799      	b.n	800bcfc <__kernel_rem_pio2f+0xe4>
 800bdc8:	d105      	bne.n	800bdd6 <__kernel_rem_pio2f+0x1be>
 800bdca:	1e70      	subs	r0, r6, #1
 800bdcc:	ab08      	add	r3, sp, #32
 800bdce:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800bdd2:	11ff      	asrs	r7, r7, #7
 800bdd4:	e7c5      	b.n	800bd62 <__kernel_rem_pio2f+0x14a>
 800bdd6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bdda:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bdde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde2:	da31      	bge.n	800be48 <__kernel_rem_pio2f+0x230>
 800bde4:	2700      	movs	r7, #0
 800bde6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bdea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdee:	f040 809b 	bne.w	800bf28 <__kernel_rem_pio2f+0x310>
 800bdf2:	1e74      	subs	r4, r6, #1
 800bdf4:	46a4      	mov	ip, r4
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	45d4      	cmp	ip, sl
 800bdfa:	da4a      	bge.n	800be92 <__kernel_rem_pio2f+0x27a>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d07a      	beq.n	800bef6 <__kernel_rem_pio2f+0x2de>
 800be00:	ab08      	add	r3, sp, #32
 800be02:	3d08      	subs	r5, #8
 800be04:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	f000 8081 	beq.w	800bf10 <__kernel_rem_pio2f+0x2f8>
 800be0e:	4628      	mov	r0, r5
 800be10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800be14:	00a5      	lsls	r5, r4, #2
 800be16:	f000 fbef 	bl	800c5f8 <scalbnf>
 800be1a:	aa44      	add	r2, sp, #272	; 0x110
 800be1c:	1d2b      	adds	r3, r5, #4
 800be1e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800bf20 <__kernel_rem_pio2f+0x308>
 800be22:	18d1      	adds	r1, r2, r3
 800be24:	4622      	mov	r2, r4
 800be26:	2a00      	cmp	r2, #0
 800be28:	f280 80ae 	bge.w	800bf88 <__kernel_rem_pio2f+0x370>
 800be2c:	4622      	mov	r2, r4
 800be2e:	2a00      	cmp	r2, #0
 800be30:	f2c0 80cc 	blt.w	800bfcc <__kernel_rem_pio2f+0x3b4>
 800be34:	a944      	add	r1, sp, #272	; 0x110
 800be36:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800be3a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800bf18 <__kernel_rem_pio2f+0x300>
 800be3e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800bf24 <__kernel_rem_pio2f+0x30c>
 800be42:	2000      	movs	r0, #0
 800be44:	1aa1      	subs	r1, r4, r2
 800be46:	e0b6      	b.n	800bfb6 <__kernel_rem_pio2f+0x39e>
 800be48:	2702      	movs	r7, #2
 800be4a:	e78c      	b.n	800bd66 <__kernel_rem_pio2f+0x14e>
 800be4c:	6820      	ldr	r0, [r4, #0]
 800be4e:	b94b      	cbnz	r3, 800be64 <__kernel_rem_pio2f+0x24c>
 800be50:	b118      	cbz	r0, 800be5a <__kernel_rem_pio2f+0x242>
 800be52:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800be56:	6020      	str	r0, [r4, #0]
 800be58:	2001      	movs	r0, #1
 800be5a:	f10e 0e01 	add.w	lr, lr, #1
 800be5e:	3404      	adds	r4, #4
 800be60:	4603      	mov	r3, r0
 800be62:	e785      	b.n	800bd70 <__kernel_rem_pio2f+0x158>
 800be64:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800be68:	6020      	str	r0, [r4, #0]
 800be6a:	4618      	mov	r0, r3
 800be6c:	e7f5      	b.n	800be5a <__kernel_rem_pio2f+0x242>
 800be6e:	1e74      	subs	r4, r6, #1
 800be70:	a808      	add	r0, sp, #32
 800be72:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800be76:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800be7a:	f10d 0c20 	add.w	ip, sp, #32
 800be7e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800be82:	e77e      	b.n	800bd82 <__kernel_rem_pio2f+0x16a>
 800be84:	1e74      	subs	r4, r6, #1
 800be86:	a808      	add	r0, sp, #32
 800be88:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800be8c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800be90:	e7f3      	b.n	800be7a <__kernel_rem_pio2f+0x262>
 800be92:	ab08      	add	r3, sp, #32
 800be94:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800be98:	f10c 3cff 	add.w	ip, ip, #4294967295
 800be9c:	4318      	orrs	r0, r3
 800be9e:	e7ab      	b.n	800bdf8 <__kernel_rem_pio2f+0x1e0>
 800bea0:	f10c 0c01 	add.w	ip, ip, #1
 800bea4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800bea8:	2c00      	cmp	r4, #0
 800beaa:	d0f9      	beq.n	800bea0 <__kernel_rem_pio2f+0x288>
 800beac:	9b05      	ldr	r3, [sp, #20]
 800beae:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800beb2:	eb0d 0003 	add.w	r0, sp, r3
 800beb6:	9b01      	ldr	r3, [sp, #4]
 800beb8:	18f4      	adds	r4, r6, r3
 800beba:	ab1c      	add	r3, sp, #112	; 0x70
 800bebc:	1c77      	adds	r7, r6, #1
 800bebe:	384c      	subs	r0, #76	; 0x4c
 800bec0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bec4:	4466      	add	r6, ip
 800bec6:	42be      	cmp	r6, r7
 800bec8:	f6ff af0b 	blt.w	800bce2 <__kernel_rem_pio2f+0xca>
 800becc:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800bed0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bed4:	ee07 3a90 	vmov	s15, r3
 800bed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bedc:	f04f 0c00 	mov.w	ip, #0
 800bee0:	ece4 7a01 	vstmia	r4!, {s15}
 800bee4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800bf24 <__kernel_rem_pio2f+0x30c>
 800bee8:	46a1      	mov	r9, r4
 800beea:	458c      	cmp	ip, r1
 800beec:	dd07      	ble.n	800befe <__kernel_rem_pio2f+0x2e6>
 800beee:	ece0 7a01 	vstmia	r0!, {s15}
 800bef2:	3701      	adds	r7, #1
 800bef4:	e7e7      	b.n	800bec6 <__kernel_rem_pio2f+0x2ae>
 800bef6:	9804      	ldr	r0, [sp, #16]
 800bef8:	f04f 0c01 	mov.w	ip, #1
 800befc:	e7d2      	b.n	800bea4 <__kernel_rem_pio2f+0x28c>
 800befe:	ecfe 6a01 	vldmia	lr!, {s13}
 800bf02:	ed39 7a01 	vldmdb	r9!, {s14}
 800bf06:	f10c 0c01 	add.w	ip, ip, #1
 800bf0a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bf0e:	e7ec      	b.n	800beea <__kernel_rem_pio2f+0x2d2>
 800bf10:	3c01      	subs	r4, #1
 800bf12:	e775      	b.n	800be00 <__kernel_rem_pio2f+0x1e8>
 800bf14:	0800f67c 	.word	0x0800f67c
 800bf18:	0800f650 	.word	0x0800f650
 800bf1c:	43800000 	.word	0x43800000
 800bf20:	3b800000 	.word	0x3b800000
 800bf24:	00000000 	.word	0x00000000
 800bf28:	9b03      	ldr	r3, [sp, #12]
 800bf2a:	eeb0 0a48 	vmov.f32	s0, s16
 800bf2e:	1a98      	subs	r0, r3, r2
 800bf30:	f000 fb62 	bl	800c5f8 <scalbnf>
 800bf34:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800bf1c <__kernel_rem_pio2f+0x304>
 800bf38:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bf3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf40:	db19      	blt.n	800bf76 <__kernel_rem_pio2f+0x35e>
 800bf42:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800bf20 <__kernel_rem_pio2f+0x308>
 800bf46:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bf4a:	aa08      	add	r2, sp, #32
 800bf4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf50:	1c74      	adds	r4, r6, #1
 800bf52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf56:	3508      	adds	r5, #8
 800bf58:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bf5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf60:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bf64:	ee10 3a10 	vmov	r3, s0
 800bf68:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800bf6c:	ee17 3a90 	vmov	r3, s15
 800bf70:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bf74:	e74b      	b.n	800be0e <__kernel_rem_pio2f+0x1f6>
 800bf76:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bf7a:	aa08      	add	r2, sp, #32
 800bf7c:	ee10 3a10 	vmov	r3, s0
 800bf80:	4634      	mov	r4, r6
 800bf82:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800bf86:	e742      	b.n	800be0e <__kernel_rem_pio2f+0x1f6>
 800bf88:	a808      	add	r0, sp, #32
 800bf8a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800bf8e:	9001      	str	r0, [sp, #4]
 800bf90:	ee07 0a90 	vmov	s15, r0
 800bf94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf98:	3a01      	subs	r2, #1
 800bf9a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bf9e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bfa2:	ed61 7a01 	vstmdb	r1!, {s15}
 800bfa6:	e73e      	b.n	800be26 <__kernel_rem_pio2f+0x20e>
 800bfa8:	ecfc 6a01 	vldmia	ip!, {s13}
 800bfac:	ecb6 7a01 	vldmia	r6!, {s14}
 800bfb0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bfb4:	3001      	adds	r0, #1
 800bfb6:	4550      	cmp	r0, sl
 800bfb8:	dc01      	bgt.n	800bfbe <__kernel_rem_pio2f+0x3a6>
 800bfba:	4288      	cmp	r0, r1
 800bfbc:	ddf4      	ble.n	800bfa8 <__kernel_rem_pio2f+0x390>
 800bfbe:	a858      	add	r0, sp, #352	; 0x160
 800bfc0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bfc4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800bfc8:	3a01      	subs	r2, #1
 800bfca:	e730      	b.n	800be2e <__kernel_rem_pio2f+0x216>
 800bfcc:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800bfce:	2a02      	cmp	r2, #2
 800bfd0:	dc09      	bgt.n	800bfe6 <__kernel_rem_pio2f+0x3ce>
 800bfd2:	2a00      	cmp	r2, #0
 800bfd4:	dc2a      	bgt.n	800c02c <__kernel_rem_pio2f+0x414>
 800bfd6:	d043      	beq.n	800c060 <__kernel_rem_pio2f+0x448>
 800bfd8:	f009 0007 	and.w	r0, r9, #7
 800bfdc:	b059      	add	sp, #356	; 0x164
 800bfde:	ecbd 8b04 	vpop	{d8-d9}
 800bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800bfe8:	2b03      	cmp	r3, #3
 800bfea:	d1f5      	bne.n	800bfd8 <__kernel_rem_pio2f+0x3c0>
 800bfec:	ab30      	add	r3, sp, #192	; 0xc0
 800bfee:	442b      	add	r3, r5
 800bff0:	461a      	mov	r2, r3
 800bff2:	4619      	mov	r1, r3
 800bff4:	4620      	mov	r0, r4
 800bff6:	2800      	cmp	r0, #0
 800bff8:	f1a1 0104 	sub.w	r1, r1, #4
 800bffc:	dc51      	bgt.n	800c0a2 <__kernel_rem_pio2f+0x48a>
 800bffe:	4621      	mov	r1, r4
 800c000:	2901      	cmp	r1, #1
 800c002:	f1a2 0204 	sub.w	r2, r2, #4
 800c006:	dc5c      	bgt.n	800c0c2 <__kernel_rem_pio2f+0x4aa>
 800c008:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800bf24 <__kernel_rem_pio2f+0x30c>
 800c00c:	3304      	adds	r3, #4
 800c00e:	2c01      	cmp	r4, #1
 800c010:	dc67      	bgt.n	800c0e2 <__kernel_rem_pio2f+0x4ca>
 800c012:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800c016:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800c01a:	2f00      	cmp	r7, #0
 800c01c:	d167      	bne.n	800c0ee <__kernel_rem_pio2f+0x4d6>
 800c01e:	edc8 6a00 	vstr	s13, [r8]
 800c022:	ed88 7a01 	vstr	s14, [r8, #4]
 800c026:	edc8 7a02 	vstr	s15, [r8, #8]
 800c02a:	e7d5      	b.n	800bfd8 <__kernel_rem_pio2f+0x3c0>
 800c02c:	aa30      	add	r2, sp, #192	; 0xc0
 800c02e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800bf24 <__kernel_rem_pio2f+0x30c>
 800c032:	4413      	add	r3, r2
 800c034:	4622      	mov	r2, r4
 800c036:	2a00      	cmp	r2, #0
 800c038:	da24      	bge.n	800c084 <__kernel_rem_pio2f+0x46c>
 800c03a:	b34f      	cbz	r7, 800c090 <__kernel_rem_pio2f+0x478>
 800c03c:	eef1 7a47 	vneg.f32	s15, s14
 800c040:	edc8 7a00 	vstr	s15, [r8]
 800c044:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800c048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c04c:	aa31      	add	r2, sp, #196	; 0xc4
 800c04e:	2301      	movs	r3, #1
 800c050:	429c      	cmp	r4, r3
 800c052:	da20      	bge.n	800c096 <__kernel_rem_pio2f+0x47e>
 800c054:	b10f      	cbz	r7, 800c05a <__kernel_rem_pio2f+0x442>
 800c056:	eef1 7a67 	vneg.f32	s15, s15
 800c05a:	edc8 7a01 	vstr	s15, [r8, #4]
 800c05e:	e7bb      	b.n	800bfd8 <__kernel_rem_pio2f+0x3c0>
 800c060:	aa30      	add	r2, sp, #192	; 0xc0
 800c062:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800bf24 <__kernel_rem_pio2f+0x30c>
 800c066:	4413      	add	r3, r2
 800c068:	2c00      	cmp	r4, #0
 800c06a:	da05      	bge.n	800c078 <__kernel_rem_pio2f+0x460>
 800c06c:	b10f      	cbz	r7, 800c072 <__kernel_rem_pio2f+0x45a>
 800c06e:	eef1 7a67 	vneg.f32	s15, s15
 800c072:	edc8 7a00 	vstr	s15, [r8]
 800c076:	e7af      	b.n	800bfd8 <__kernel_rem_pio2f+0x3c0>
 800c078:	ed33 7a01 	vldmdb	r3!, {s14}
 800c07c:	3c01      	subs	r4, #1
 800c07e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c082:	e7f1      	b.n	800c068 <__kernel_rem_pio2f+0x450>
 800c084:	ed73 7a01 	vldmdb	r3!, {s15}
 800c088:	3a01      	subs	r2, #1
 800c08a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c08e:	e7d2      	b.n	800c036 <__kernel_rem_pio2f+0x41e>
 800c090:	eef0 7a47 	vmov.f32	s15, s14
 800c094:	e7d4      	b.n	800c040 <__kernel_rem_pio2f+0x428>
 800c096:	ecb2 7a01 	vldmia	r2!, {s14}
 800c09a:	3301      	adds	r3, #1
 800c09c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c0a0:	e7d6      	b.n	800c050 <__kernel_rem_pio2f+0x438>
 800c0a2:	edd1 7a00 	vldr	s15, [r1]
 800c0a6:	edd1 6a01 	vldr	s13, [r1, #4]
 800c0aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c0ae:	3801      	subs	r0, #1
 800c0b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0b4:	ed81 7a00 	vstr	s14, [r1]
 800c0b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0bc:	edc1 7a01 	vstr	s15, [r1, #4]
 800c0c0:	e799      	b.n	800bff6 <__kernel_rem_pio2f+0x3de>
 800c0c2:	edd2 7a00 	vldr	s15, [r2]
 800c0c6:	edd2 6a01 	vldr	s13, [r2, #4]
 800c0ca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c0ce:	3901      	subs	r1, #1
 800c0d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0d4:	ed82 7a00 	vstr	s14, [r2]
 800c0d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0dc:	edc2 7a01 	vstr	s15, [r2, #4]
 800c0e0:	e78e      	b.n	800c000 <__kernel_rem_pio2f+0x3e8>
 800c0e2:	ed33 7a01 	vldmdb	r3!, {s14}
 800c0e6:	3c01      	subs	r4, #1
 800c0e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c0ec:	e78f      	b.n	800c00e <__kernel_rem_pio2f+0x3f6>
 800c0ee:	eef1 6a66 	vneg.f32	s13, s13
 800c0f2:	eeb1 7a47 	vneg.f32	s14, s14
 800c0f6:	edc8 6a00 	vstr	s13, [r8]
 800c0fa:	ed88 7a01 	vstr	s14, [r8, #4]
 800c0fe:	eef1 7a67 	vneg.f32	s15, s15
 800c102:	e790      	b.n	800c026 <__kernel_rem_pio2f+0x40e>

0800c104 <__kernel_sinf>:
 800c104:	ee10 3a10 	vmov	r3, s0
 800c108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c10c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c110:	da04      	bge.n	800c11c <__kernel_sinf+0x18>
 800c112:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c116:	ee17 3a90 	vmov	r3, s15
 800c11a:	b35b      	cbz	r3, 800c174 <__kernel_sinf+0x70>
 800c11c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c120:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c178 <__kernel_sinf+0x74>
 800c124:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c17c <__kernel_sinf+0x78>
 800c128:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c12c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c180 <__kernel_sinf+0x7c>
 800c130:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c134:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c184 <__kernel_sinf+0x80>
 800c138:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c13c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c188 <__kernel_sinf+0x84>
 800c140:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c144:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c148:	b930      	cbnz	r0, 800c158 <__kernel_sinf+0x54>
 800c14a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c18c <__kernel_sinf+0x88>
 800c14e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c152:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c156:	4770      	bx	lr
 800c158:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c15c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c160:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c164:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c168:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c190 <__kernel_sinf+0x8c>
 800c16c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c170:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	2f2ec9d3 	.word	0x2f2ec9d3
 800c17c:	b2d72f34 	.word	0xb2d72f34
 800c180:	3638ef1b 	.word	0x3638ef1b
 800c184:	b9500d01 	.word	0xb9500d01
 800c188:	3c088889 	.word	0x3c088889
 800c18c:	be2aaaab 	.word	0xbe2aaaab
 800c190:	3e2aaaab 	.word	0x3e2aaaab

0800c194 <with_errno>:
 800c194:	b570      	push	{r4, r5, r6, lr}
 800c196:	4604      	mov	r4, r0
 800c198:	460d      	mov	r5, r1
 800c19a:	4616      	mov	r6, r2
 800c19c:	f000 fac2 	bl	800c724 <__errno>
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	6006      	str	r6, [r0, #0]
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	bd70      	pop	{r4, r5, r6, pc}

0800c1a8 <xflow>:
 800c1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1aa:	4614      	mov	r4, r2
 800c1ac:	461d      	mov	r5, r3
 800c1ae:	b108      	cbz	r0, 800c1b4 <xflow+0xc>
 800c1b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c1b4:	e9cd 2300 	strd	r2, r3, [sp]
 800c1b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1bc:	4620      	mov	r0, r4
 800c1be:	4629      	mov	r1, r5
 800c1c0:	f7f4 fa22 	bl	8000608 <__aeabi_dmul>
 800c1c4:	2222      	movs	r2, #34	; 0x22
 800c1c6:	b003      	add	sp, #12
 800c1c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1cc:	f7ff bfe2 	b.w	800c194 <with_errno>

0800c1d0 <__math_uflow>:
 800c1d0:	b508      	push	{r3, lr}
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c1d8:	f7ff ffe6 	bl	800c1a8 <xflow>
 800c1dc:	ec41 0b10 	vmov	d0, r0, r1
 800c1e0:	bd08      	pop	{r3, pc}

0800c1e2 <__math_oflow>:
 800c1e2:	b508      	push	{r3, lr}
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c1ea:	f7ff ffdd 	bl	800c1a8 <xflow>
 800c1ee:	ec41 0b10 	vmov	d0, r0, r1
 800c1f2:	bd08      	pop	{r3, pc}

0800c1f4 <fabs>:
 800c1f4:	ec51 0b10 	vmov	r0, r1, d0
 800c1f8:	ee10 2a10 	vmov	r2, s0
 800c1fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c200:	ec43 2b10 	vmov	d0, r2, r3
 800c204:	4770      	bx	lr

0800c206 <finite>:
 800c206:	b082      	sub	sp, #8
 800c208:	ed8d 0b00 	vstr	d0, [sp]
 800c20c:	9801      	ldr	r0, [sp, #4]
 800c20e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c212:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c216:	0fc0      	lsrs	r0, r0, #31
 800c218:	b002      	add	sp, #8
 800c21a:	4770      	bx	lr
 800c21c:	0000      	movs	r0, r0
	...

0800c220 <scalbn>:
 800c220:	b570      	push	{r4, r5, r6, lr}
 800c222:	ec55 4b10 	vmov	r4, r5, d0
 800c226:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c22a:	4606      	mov	r6, r0
 800c22c:	462b      	mov	r3, r5
 800c22e:	b99a      	cbnz	r2, 800c258 <scalbn+0x38>
 800c230:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c234:	4323      	orrs	r3, r4
 800c236:	d036      	beq.n	800c2a6 <scalbn+0x86>
 800c238:	4b39      	ldr	r3, [pc, #228]	; (800c320 <scalbn+0x100>)
 800c23a:	4629      	mov	r1, r5
 800c23c:	ee10 0a10 	vmov	r0, s0
 800c240:	2200      	movs	r2, #0
 800c242:	f7f4 f9e1 	bl	8000608 <__aeabi_dmul>
 800c246:	4b37      	ldr	r3, [pc, #220]	; (800c324 <scalbn+0x104>)
 800c248:	429e      	cmp	r6, r3
 800c24a:	4604      	mov	r4, r0
 800c24c:	460d      	mov	r5, r1
 800c24e:	da10      	bge.n	800c272 <scalbn+0x52>
 800c250:	a32b      	add	r3, pc, #172	; (adr r3, 800c300 <scalbn+0xe0>)
 800c252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c256:	e03a      	b.n	800c2ce <scalbn+0xae>
 800c258:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c25c:	428a      	cmp	r2, r1
 800c25e:	d10c      	bne.n	800c27a <scalbn+0x5a>
 800c260:	ee10 2a10 	vmov	r2, s0
 800c264:	4620      	mov	r0, r4
 800c266:	4629      	mov	r1, r5
 800c268:	f7f4 f818 	bl	800029c <__adddf3>
 800c26c:	4604      	mov	r4, r0
 800c26e:	460d      	mov	r5, r1
 800c270:	e019      	b.n	800c2a6 <scalbn+0x86>
 800c272:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c276:	460b      	mov	r3, r1
 800c278:	3a36      	subs	r2, #54	; 0x36
 800c27a:	4432      	add	r2, r6
 800c27c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c280:	428a      	cmp	r2, r1
 800c282:	dd08      	ble.n	800c296 <scalbn+0x76>
 800c284:	2d00      	cmp	r5, #0
 800c286:	a120      	add	r1, pc, #128	; (adr r1, 800c308 <scalbn+0xe8>)
 800c288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c28c:	da1c      	bge.n	800c2c8 <scalbn+0xa8>
 800c28e:	a120      	add	r1, pc, #128	; (adr r1, 800c310 <scalbn+0xf0>)
 800c290:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c294:	e018      	b.n	800c2c8 <scalbn+0xa8>
 800c296:	2a00      	cmp	r2, #0
 800c298:	dd08      	ble.n	800c2ac <scalbn+0x8c>
 800c29a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c29e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c2a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c2a6:	ec45 4b10 	vmov	d0, r4, r5
 800c2aa:	bd70      	pop	{r4, r5, r6, pc}
 800c2ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c2b0:	da19      	bge.n	800c2e6 <scalbn+0xc6>
 800c2b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c2b6:	429e      	cmp	r6, r3
 800c2b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c2bc:	dd0a      	ble.n	800c2d4 <scalbn+0xb4>
 800c2be:	a112      	add	r1, pc, #72	; (adr r1, 800c308 <scalbn+0xe8>)
 800c2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d1e2      	bne.n	800c28e <scalbn+0x6e>
 800c2c8:	a30f      	add	r3, pc, #60	; (adr r3, 800c308 <scalbn+0xe8>)
 800c2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ce:	f7f4 f99b 	bl	8000608 <__aeabi_dmul>
 800c2d2:	e7cb      	b.n	800c26c <scalbn+0x4c>
 800c2d4:	a10a      	add	r1, pc, #40	; (adr r1, 800c300 <scalbn+0xe0>)
 800c2d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d0b8      	beq.n	800c250 <scalbn+0x30>
 800c2de:	a10e      	add	r1, pc, #56	; (adr r1, 800c318 <scalbn+0xf8>)
 800c2e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2e4:	e7b4      	b.n	800c250 <scalbn+0x30>
 800c2e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c2ea:	3236      	adds	r2, #54	; 0x36
 800c2ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c2f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	4b0c      	ldr	r3, [pc, #48]	; (800c328 <scalbn+0x108>)
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	e7e8      	b.n	800c2ce <scalbn+0xae>
 800c2fc:	f3af 8000 	nop.w
 800c300:	c2f8f359 	.word	0xc2f8f359
 800c304:	01a56e1f 	.word	0x01a56e1f
 800c308:	8800759c 	.word	0x8800759c
 800c30c:	7e37e43c 	.word	0x7e37e43c
 800c310:	8800759c 	.word	0x8800759c
 800c314:	fe37e43c 	.word	0xfe37e43c
 800c318:	c2f8f359 	.word	0xc2f8f359
 800c31c:	81a56e1f 	.word	0x81a56e1f
 800c320:	43500000 	.word	0x43500000
 800c324:	ffff3cb0 	.word	0xffff3cb0
 800c328:	3c900000 	.word	0x3c900000

0800c32c <expm1f>:
 800c32c:	ee10 2a10 	vmov	r2, s0
 800c330:	497d      	ldr	r1, [pc, #500]	; (800c528 <expm1f+0x1fc>)
 800c332:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c336:	428b      	cmp	r3, r1
 800c338:	d921      	bls.n	800c37e <expm1f+0x52>
 800c33a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c33e:	d902      	bls.n	800c346 <expm1f+0x1a>
 800c340:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c344:	4770      	bx	lr
 800c346:	d106      	bne.n	800c356 <expm1f+0x2a>
 800c348:	2a00      	cmp	r2, #0
 800c34a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c34e:	bfb8      	it	lt
 800c350:	eeb0 0a67 	vmovlt.f32	s0, s15
 800c354:	4770      	bx	lr
 800c356:	2a00      	cmp	r2, #0
 800c358:	db05      	blt.n	800c366 <expm1f+0x3a>
 800c35a:	4974      	ldr	r1, [pc, #464]	; (800c52c <expm1f+0x200>)
 800c35c:	428b      	cmp	r3, r1
 800c35e:	d95c      	bls.n	800c41a <expm1f+0xee>
 800c360:	2000      	movs	r0, #0
 800c362:	f000 b9d1 	b.w	800c708 <__math_oflowf>
 800c366:	eddf 7a72 	vldr	s15, [pc, #456]	; 800c530 <expm1f+0x204>
 800c36a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c36e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c376:	d550      	bpl.n	800c41a <expm1f+0xee>
 800c378:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c37c:	4770      	bx	lr
 800c37e:	496d      	ldr	r1, [pc, #436]	; (800c534 <expm1f+0x208>)
 800c380:	428b      	cmp	r3, r1
 800c382:	d967      	bls.n	800c454 <expm1f+0x128>
 800c384:	496c      	ldr	r1, [pc, #432]	; (800c538 <expm1f+0x20c>)
 800c386:	428b      	cmp	r3, r1
 800c388:	d847      	bhi.n	800c41a <expm1f+0xee>
 800c38a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800c53c <expm1f+0x210>
 800c38e:	2a00      	cmp	r2, #0
 800c390:	bfa7      	ittee	ge
 800c392:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800c396:	eddf 7a6a 	vldrge	s15, [pc, #424]	; 800c540 <expm1f+0x214>
 800c39a:	eddf 7a6a 	vldrlt	s15, [pc, #424]	; 800c544 <expm1f+0x218>
 800c39e:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800c3a2:	bfac      	ite	ge
 800c3a4:	2301      	movge	r3, #1
 800c3a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3aa:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c3ae:	ee37 7a40 	vsub.f32	s14, s14, s0
 800c3b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3b6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800c3ba:	ee20 4a25 	vmul.f32	s8, s0, s11
 800c3be:	ed9f 6a62 	vldr	s12, [pc, #392]	; 800c548 <expm1f+0x21c>
 800c3c2:	eddf 6a62 	vldr	s13, [pc, #392]	; 800c54c <expm1f+0x220>
 800c3c6:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800c550 <expm1f+0x224>
 800c3ca:	ee20 7a04 	vmul.f32	s14, s0, s8
 800c3ce:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800c3d2:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c3d6:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 800c554 <expm1f+0x228>
 800c3da:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c3de:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c558 <expm1f+0x22c>
 800c3e2:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c3e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c3ea:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c3ee:	eef0 6a46 	vmov.f32	s13, s12
 800c3f2:	eee5 6a07 	vfma.f32	s13, s10, s14
 800c3f6:	eee4 4a66 	vfms.f32	s9, s8, s13
 800c3fa:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800c3fe:	eea0 4a64 	vfms.f32	s8, s0, s9
 800c402:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800c406:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800c40a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800c40e:	bb7b      	cbnz	r3, 800c470 <expm1f+0x144>
 800c410:	eef0 7a47 	vmov.f32	s15, s14
 800c414:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800c418:	e025      	b.n	800c466 <expm1f+0x13a>
 800c41a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800c41e:	2a00      	cmp	r2, #0
 800c420:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c424:	bfb8      	it	lt
 800c426:	eef0 7a47 	vmovlt.f32	s15, s14
 800c42a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c55c <expm1f+0x230>
 800c42e:	eddf 6a43 	vldr	s13, [pc, #268]	; 800c53c <expm1f+0x210>
 800c432:	ee40 7a07 	vmla.f32	s15, s0, s14
 800c436:	eeb0 7a40 	vmov.f32	s14, s0
 800c43a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c43e:	ee17 3a90 	vmov	r3, s15
 800c442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c446:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c44a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c540 <expm1f+0x214>
 800c44e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c452:	e7aa      	b.n	800c3aa <expm1f+0x7e>
 800c454:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800c458:	d208      	bcs.n	800c46c <expm1f+0x140>
 800c45a:	eddf 7a41 	vldr	s15, [pc, #260]	; 800c560 <expm1f+0x234>
 800c45e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c462:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800c466:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c46a:	4770      	bx	lr
 800c46c:	2300      	movs	r3, #0
 800c46e:	e7a2      	b.n	800c3b6 <expm1f+0x8a>
 800c470:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c474:	1c5a      	adds	r2, r3, #1
 800c476:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800c47a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c47e:	d106      	bne.n	800c48e <expm1f+0x162>
 800c480:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c484:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800c488:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800c48c:	4770      	bx	lr
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d118      	bne.n	800c4c4 <expm1f+0x198>
 800c492:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800c496:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c49e:	bf5b      	ittet	pl
 800c4a0:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800c4a4:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 800c4a8:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800c4ac:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800c4b0:	bf43      	ittte	mi
 800c4b2:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 800c4b6:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 800c4ba:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800c4be:	eeb0 0a46 	vmovpl.f32	s0, s12
 800c4c2:	4770      	bx	lr
 800c4c4:	1c5a      	adds	r2, r3, #1
 800c4c6:	2a39      	cmp	r2, #57	; 0x39
 800c4c8:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800c4cc:	d90b      	bls.n	800c4e6 <expm1f+0x1ba>
 800c4ce:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c4d2:	ee36 0a40 	vsub.f32	s0, s12, s0
 800c4d6:	ee10 3a10 	vmov	r3, s0
 800c4da:	440b      	add	r3, r1
 800c4dc:	ee00 3a10 	vmov	s0, r3
 800c4e0:	ee30 0a46 	vsub.f32	s0, s0, s12
 800c4e4:	4770      	bx	lr
 800c4e6:	2b16      	cmp	r3, #22
 800c4e8:	dc11      	bgt.n	800c50e <expm1f+0x1e2>
 800c4ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c4ee:	fa42 f303 	asr.w	r3, r2, r3
 800c4f2:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800c4f6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c4fa:	ee07 3a90 	vmov	s15, r3
 800c4fe:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c502:	ee10 3a10 	vmov	r3, s0
 800c506:	440b      	add	r3, r1
 800c508:	ee00 3a10 	vmov	s0, r3
 800c50c:	4770      	bx	lr
 800c50e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800c512:	05db      	lsls	r3, r3, #23
 800c514:	ee07 3a10 	vmov	s14, r3
 800c518:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c51c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c520:	ee37 0a86 	vadd.f32	s0, s15, s12
 800c524:	e7ed      	b.n	800c502 <expm1f+0x1d6>
 800c526:	bf00      	nop
 800c528:	4195b843 	.word	0x4195b843
 800c52c:	42b17217 	.word	0x42b17217
 800c530:	0da24260 	.word	0x0da24260
 800c534:	3eb17218 	.word	0x3eb17218
 800c538:	3f851591 	.word	0x3f851591
 800c53c:	3f317180 	.word	0x3f317180
 800c540:	3717f7d1 	.word	0x3717f7d1
 800c544:	b717f7d1 	.word	0xb717f7d1
 800c548:	b457edbb 	.word	0xb457edbb
 800c54c:	36867e54 	.word	0x36867e54
 800c550:	bd088889 	.word	0xbd088889
 800c554:	b8a670cd 	.word	0xb8a670cd
 800c558:	3ad00d01 	.word	0x3ad00d01
 800c55c:	3fb8aa3b 	.word	0x3fb8aa3b
 800c560:	7149f2ca 	.word	0x7149f2ca

0800c564 <fabsf>:
 800c564:	ee10 3a10 	vmov	r3, s0
 800c568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c56c:	ee00 3a10 	vmov	s0, r3
 800c570:	4770      	bx	lr
	...

0800c574 <floorf>:
 800c574:	ee10 3a10 	vmov	r3, s0
 800c578:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c57c:	3a7f      	subs	r2, #127	; 0x7f
 800c57e:	2a16      	cmp	r2, #22
 800c580:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c584:	dc2a      	bgt.n	800c5dc <floorf+0x68>
 800c586:	2a00      	cmp	r2, #0
 800c588:	da11      	bge.n	800c5ae <floorf+0x3a>
 800c58a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c5ec <floorf+0x78>
 800c58e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c592:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59a:	dd05      	ble.n	800c5a8 <floorf+0x34>
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	da23      	bge.n	800c5e8 <floorf+0x74>
 800c5a0:	4a13      	ldr	r2, [pc, #76]	; (800c5f0 <floorf+0x7c>)
 800c5a2:	2900      	cmp	r1, #0
 800c5a4:	bf18      	it	ne
 800c5a6:	4613      	movne	r3, r2
 800c5a8:	ee00 3a10 	vmov	s0, r3
 800c5ac:	4770      	bx	lr
 800c5ae:	4911      	ldr	r1, [pc, #68]	; (800c5f4 <floorf+0x80>)
 800c5b0:	4111      	asrs	r1, r2
 800c5b2:	420b      	tst	r3, r1
 800c5b4:	d0fa      	beq.n	800c5ac <floorf+0x38>
 800c5b6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c5ec <floorf+0x78>
 800c5ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c5be:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c6:	ddef      	ble.n	800c5a8 <floorf+0x34>
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	bfbe      	ittt	lt
 800c5cc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c5d0:	fa40 f202 	asrlt.w	r2, r0, r2
 800c5d4:	189b      	addlt	r3, r3, r2
 800c5d6:	ea23 0301 	bic.w	r3, r3, r1
 800c5da:	e7e5      	b.n	800c5a8 <floorf+0x34>
 800c5dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c5e0:	d3e4      	bcc.n	800c5ac <floorf+0x38>
 800c5e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c5e6:	4770      	bx	lr
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	e7dd      	b.n	800c5a8 <floorf+0x34>
 800c5ec:	7149f2ca 	.word	0x7149f2ca
 800c5f0:	bf800000 	.word	0xbf800000
 800c5f4:	007fffff 	.word	0x007fffff

0800c5f8 <scalbnf>:
 800c5f8:	ee10 3a10 	vmov	r3, s0
 800c5fc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c600:	d025      	beq.n	800c64e <scalbnf+0x56>
 800c602:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c606:	d302      	bcc.n	800c60e <scalbnf+0x16>
 800c608:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c60c:	4770      	bx	lr
 800c60e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c612:	d122      	bne.n	800c65a <scalbnf+0x62>
 800c614:	4b2a      	ldr	r3, [pc, #168]	; (800c6c0 <scalbnf+0xc8>)
 800c616:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c6c4 <scalbnf+0xcc>
 800c61a:	4298      	cmp	r0, r3
 800c61c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c620:	db16      	blt.n	800c650 <scalbnf+0x58>
 800c622:	ee10 3a10 	vmov	r3, s0
 800c626:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c62a:	3a19      	subs	r2, #25
 800c62c:	4402      	add	r2, r0
 800c62e:	2afe      	cmp	r2, #254	; 0xfe
 800c630:	dd15      	ble.n	800c65e <scalbnf+0x66>
 800c632:	ee10 3a10 	vmov	r3, s0
 800c636:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c6c8 <scalbnf+0xd0>
 800c63a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c6cc <scalbnf+0xd4>
 800c63e:	2b00      	cmp	r3, #0
 800c640:	eeb0 7a67 	vmov.f32	s14, s15
 800c644:	bfb8      	it	lt
 800c646:	eef0 7a66 	vmovlt.f32	s15, s13
 800c64a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c64e:	4770      	bx	lr
 800c650:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c6d0 <scalbnf+0xd8>
 800c654:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c658:	4770      	bx	lr
 800c65a:	0dd2      	lsrs	r2, r2, #23
 800c65c:	e7e6      	b.n	800c62c <scalbnf+0x34>
 800c65e:	2a00      	cmp	r2, #0
 800c660:	dd06      	ble.n	800c670 <scalbnf+0x78>
 800c662:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c666:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c66a:	ee00 3a10 	vmov	s0, r3
 800c66e:	4770      	bx	lr
 800c670:	f112 0f16 	cmn.w	r2, #22
 800c674:	da1a      	bge.n	800c6ac <scalbnf+0xb4>
 800c676:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c67a:	4298      	cmp	r0, r3
 800c67c:	ee10 3a10 	vmov	r3, s0
 800c680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c684:	dd0a      	ble.n	800c69c <scalbnf+0xa4>
 800c686:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c6c8 <scalbnf+0xd0>
 800c68a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c6cc <scalbnf+0xd4>
 800c68e:	eef0 7a40 	vmov.f32	s15, s0
 800c692:	2b00      	cmp	r3, #0
 800c694:	bf18      	it	ne
 800c696:	eeb0 0a47 	vmovne.f32	s0, s14
 800c69a:	e7db      	b.n	800c654 <scalbnf+0x5c>
 800c69c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c6d0 <scalbnf+0xd8>
 800c6a0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c6d4 <scalbnf+0xdc>
 800c6a4:	eef0 7a40 	vmov.f32	s15, s0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	e7f3      	b.n	800c694 <scalbnf+0x9c>
 800c6ac:	3219      	adds	r2, #25
 800c6ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6b2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c6b6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c6d8 <scalbnf+0xe0>
 800c6ba:	ee07 3a10 	vmov	s14, r3
 800c6be:	e7c4      	b.n	800c64a <scalbnf+0x52>
 800c6c0:	ffff3cb0 	.word	0xffff3cb0
 800c6c4:	4c000000 	.word	0x4c000000
 800c6c8:	7149f2ca 	.word	0x7149f2ca
 800c6cc:	f149f2ca 	.word	0xf149f2ca
 800c6d0:	0da24260 	.word	0x0da24260
 800c6d4:	8da24260 	.word	0x8da24260
 800c6d8:	33000000 	.word	0x33000000

0800c6dc <with_errnof>:
 800c6dc:	b513      	push	{r0, r1, r4, lr}
 800c6de:	4604      	mov	r4, r0
 800c6e0:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c6e4:	f000 f81e 	bl	800c724 <__errno>
 800c6e8:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c6ec:	6004      	str	r4, [r0, #0]
 800c6ee:	b002      	add	sp, #8
 800c6f0:	bd10      	pop	{r4, pc}

0800c6f2 <xflowf>:
 800c6f2:	b130      	cbz	r0, 800c702 <xflowf+0x10>
 800c6f4:	eef1 7a40 	vneg.f32	s15, s0
 800c6f8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c6fc:	2022      	movs	r0, #34	; 0x22
 800c6fe:	f7ff bfed 	b.w	800c6dc <with_errnof>
 800c702:	eef0 7a40 	vmov.f32	s15, s0
 800c706:	e7f7      	b.n	800c6f8 <xflowf+0x6>

0800c708 <__math_oflowf>:
 800c708:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c710 <__math_oflowf+0x8>
 800c70c:	f7ff bff1 	b.w	800c6f2 <xflowf>
 800c710:	70000000 	.word	0x70000000

0800c714 <abort>:
 800c714:	b508      	push	{r3, lr}
 800c716:	2006      	movs	r0, #6
 800c718:	f000 fdf0 	bl	800d2fc <raise>
 800c71c:	2001      	movs	r0, #1
 800c71e:	f7f8 fc15 	bl	8004f4c <_exit>
	...

0800c724 <__errno>:
 800c724:	4b01      	ldr	r3, [pc, #4]	; (800c72c <__errno+0x8>)
 800c726:	6818      	ldr	r0, [r3, #0]
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	2000000c 	.word	0x2000000c

0800c730 <__libc_init_array>:
 800c730:	b570      	push	{r4, r5, r6, lr}
 800c732:	4d0d      	ldr	r5, [pc, #52]	; (800c768 <__libc_init_array+0x38>)
 800c734:	4c0d      	ldr	r4, [pc, #52]	; (800c76c <__libc_init_array+0x3c>)
 800c736:	1b64      	subs	r4, r4, r5
 800c738:	10a4      	asrs	r4, r4, #2
 800c73a:	2600      	movs	r6, #0
 800c73c:	42a6      	cmp	r6, r4
 800c73e:	d109      	bne.n	800c754 <__libc_init_array+0x24>
 800c740:	4d0b      	ldr	r5, [pc, #44]	; (800c770 <__libc_init_array+0x40>)
 800c742:	4c0c      	ldr	r4, [pc, #48]	; (800c774 <__libc_init_array+0x44>)
 800c744:	f002 fd50 	bl	800f1e8 <_init>
 800c748:	1b64      	subs	r4, r4, r5
 800c74a:	10a4      	asrs	r4, r4, #2
 800c74c:	2600      	movs	r6, #0
 800c74e:	42a6      	cmp	r6, r4
 800c750:	d105      	bne.n	800c75e <__libc_init_array+0x2e>
 800c752:	bd70      	pop	{r4, r5, r6, pc}
 800c754:	f855 3b04 	ldr.w	r3, [r5], #4
 800c758:	4798      	blx	r3
 800c75a:	3601      	adds	r6, #1
 800c75c:	e7ee      	b.n	800c73c <__libc_init_array+0xc>
 800c75e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c762:	4798      	blx	r3
 800c764:	3601      	adds	r6, #1
 800c766:	e7f2      	b.n	800c74e <__libc_init_array+0x1e>
 800c768:	0800fa6c 	.word	0x0800fa6c
 800c76c:	0800fa6c 	.word	0x0800fa6c
 800c770:	0800fa6c 	.word	0x0800fa6c
 800c774:	0800fa74 	.word	0x0800fa74

0800c778 <malloc>:
 800c778:	4b02      	ldr	r3, [pc, #8]	; (800c784 <malloc+0xc>)
 800c77a:	4601      	mov	r1, r0
 800c77c:	6818      	ldr	r0, [r3, #0]
 800c77e:	f000 b8a7 	b.w	800c8d0 <_malloc_r>
 800c782:	bf00      	nop
 800c784:	2000000c 	.word	0x2000000c

0800c788 <free>:
 800c788:	4b02      	ldr	r3, [pc, #8]	; (800c794 <free+0xc>)
 800c78a:	4601      	mov	r1, r0
 800c78c:	6818      	ldr	r0, [r3, #0]
 800c78e:	f000 b833 	b.w	800c7f8 <_free_r>
 800c792:	bf00      	nop
 800c794:	2000000c 	.word	0x2000000c

0800c798 <memcpy>:
 800c798:	440a      	add	r2, r1
 800c79a:	4291      	cmp	r1, r2
 800c79c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7a0:	d100      	bne.n	800c7a4 <memcpy+0xc>
 800c7a2:	4770      	bx	lr
 800c7a4:	b510      	push	{r4, lr}
 800c7a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7ae:	4291      	cmp	r1, r2
 800c7b0:	d1f9      	bne.n	800c7a6 <memcpy+0xe>
 800c7b2:	bd10      	pop	{r4, pc}

0800c7b4 <memmove>:
 800c7b4:	4288      	cmp	r0, r1
 800c7b6:	b510      	push	{r4, lr}
 800c7b8:	eb01 0402 	add.w	r4, r1, r2
 800c7bc:	d902      	bls.n	800c7c4 <memmove+0x10>
 800c7be:	4284      	cmp	r4, r0
 800c7c0:	4623      	mov	r3, r4
 800c7c2:	d807      	bhi.n	800c7d4 <memmove+0x20>
 800c7c4:	1e43      	subs	r3, r0, #1
 800c7c6:	42a1      	cmp	r1, r4
 800c7c8:	d008      	beq.n	800c7dc <memmove+0x28>
 800c7ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7d2:	e7f8      	b.n	800c7c6 <memmove+0x12>
 800c7d4:	4402      	add	r2, r0
 800c7d6:	4601      	mov	r1, r0
 800c7d8:	428a      	cmp	r2, r1
 800c7da:	d100      	bne.n	800c7de <memmove+0x2a>
 800c7dc:	bd10      	pop	{r4, pc}
 800c7de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7e6:	e7f7      	b.n	800c7d8 <memmove+0x24>

0800c7e8 <memset>:
 800c7e8:	4402      	add	r2, r0
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d100      	bne.n	800c7f2 <memset+0xa>
 800c7f0:	4770      	bx	lr
 800c7f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c7f6:	e7f9      	b.n	800c7ec <memset+0x4>

0800c7f8 <_free_r>:
 800c7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7fa:	2900      	cmp	r1, #0
 800c7fc:	d044      	beq.n	800c888 <_free_r+0x90>
 800c7fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c802:	9001      	str	r0, [sp, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	f1a1 0404 	sub.w	r4, r1, #4
 800c80a:	bfb8      	it	lt
 800c80c:	18e4      	addlt	r4, r4, r3
 800c80e:	f001 fc11 	bl	800e034 <__malloc_lock>
 800c812:	4a1e      	ldr	r2, [pc, #120]	; (800c88c <_free_r+0x94>)
 800c814:	9801      	ldr	r0, [sp, #4]
 800c816:	6813      	ldr	r3, [r2, #0]
 800c818:	b933      	cbnz	r3, 800c828 <_free_r+0x30>
 800c81a:	6063      	str	r3, [r4, #4]
 800c81c:	6014      	str	r4, [r2, #0]
 800c81e:	b003      	add	sp, #12
 800c820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c824:	f001 bc0c 	b.w	800e040 <__malloc_unlock>
 800c828:	42a3      	cmp	r3, r4
 800c82a:	d908      	bls.n	800c83e <_free_r+0x46>
 800c82c:	6825      	ldr	r5, [r4, #0]
 800c82e:	1961      	adds	r1, r4, r5
 800c830:	428b      	cmp	r3, r1
 800c832:	bf01      	itttt	eq
 800c834:	6819      	ldreq	r1, [r3, #0]
 800c836:	685b      	ldreq	r3, [r3, #4]
 800c838:	1949      	addeq	r1, r1, r5
 800c83a:	6021      	streq	r1, [r4, #0]
 800c83c:	e7ed      	b.n	800c81a <_free_r+0x22>
 800c83e:	461a      	mov	r2, r3
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	b10b      	cbz	r3, 800c848 <_free_r+0x50>
 800c844:	42a3      	cmp	r3, r4
 800c846:	d9fa      	bls.n	800c83e <_free_r+0x46>
 800c848:	6811      	ldr	r1, [r2, #0]
 800c84a:	1855      	adds	r5, r2, r1
 800c84c:	42a5      	cmp	r5, r4
 800c84e:	d10b      	bne.n	800c868 <_free_r+0x70>
 800c850:	6824      	ldr	r4, [r4, #0]
 800c852:	4421      	add	r1, r4
 800c854:	1854      	adds	r4, r2, r1
 800c856:	42a3      	cmp	r3, r4
 800c858:	6011      	str	r1, [r2, #0]
 800c85a:	d1e0      	bne.n	800c81e <_free_r+0x26>
 800c85c:	681c      	ldr	r4, [r3, #0]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	6053      	str	r3, [r2, #4]
 800c862:	4421      	add	r1, r4
 800c864:	6011      	str	r1, [r2, #0]
 800c866:	e7da      	b.n	800c81e <_free_r+0x26>
 800c868:	d902      	bls.n	800c870 <_free_r+0x78>
 800c86a:	230c      	movs	r3, #12
 800c86c:	6003      	str	r3, [r0, #0]
 800c86e:	e7d6      	b.n	800c81e <_free_r+0x26>
 800c870:	6825      	ldr	r5, [r4, #0]
 800c872:	1961      	adds	r1, r4, r5
 800c874:	428b      	cmp	r3, r1
 800c876:	bf04      	itt	eq
 800c878:	6819      	ldreq	r1, [r3, #0]
 800c87a:	685b      	ldreq	r3, [r3, #4]
 800c87c:	6063      	str	r3, [r4, #4]
 800c87e:	bf04      	itt	eq
 800c880:	1949      	addeq	r1, r1, r5
 800c882:	6021      	streq	r1, [r4, #0]
 800c884:	6054      	str	r4, [r2, #4]
 800c886:	e7ca      	b.n	800c81e <_free_r+0x26>
 800c888:	b003      	add	sp, #12
 800c88a:	bd30      	pop	{r4, r5, pc}
 800c88c:	20000b2c 	.word	0x20000b2c

0800c890 <sbrk_aligned>:
 800c890:	b570      	push	{r4, r5, r6, lr}
 800c892:	4e0e      	ldr	r6, [pc, #56]	; (800c8cc <sbrk_aligned+0x3c>)
 800c894:	460c      	mov	r4, r1
 800c896:	6831      	ldr	r1, [r6, #0]
 800c898:	4605      	mov	r5, r0
 800c89a:	b911      	cbnz	r1, 800c8a2 <sbrk_aligned+0x12>
 800c89c:	f000 fcf6 	bl	800d28c <_sbrk_r>
 800c8a0:	6030      	str	r0, [r6, #0]
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	f000 fcf1 	bl	800d28c <_sbrk_r>
 800c8aa:	1c43      	adds	r3, r0, #1
 800c8ac:	d00a      	beq.n	800c8c4 <sbrk_aligned+0x34>
 800c8ae:	1cc4      	adds	r4, r0, #3
 800c8b0:	f024 0403 	bic.w	r4, r4, #3
 800c8b4:	42a0      	cmp	r0, r4
 800c8b6:	d007      	beq.n	800c8c8 <sbrk_aligned+0x38>
 800c8b8:	1a21      	subs	r1, r4, r0
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	f000 fce6 	bl	800d28c <_sbrk_r>
 800c8c0:	3001      	adds	r0, #1
 800c8c2:	d101      	bne.n	800c8c8 <sbrk_aligned+0x38>
 800c8c4:	f04f 34ff 	mov.w	r4, #4294967295
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	bd70      	pop	{r4, r5, r6, pc}
 800c8cc:	20000b30 	.word	0x20000b30

0800c8d0 <_malloc_r>:
 800c8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d4:	1ccd      	adds	r5, r1, #3
 800c8d6:	f025 0503 	bic.w	r5, r5, #3
 800c8da:	3508      	adds	r5, #8
 800c8dc:	2d0c      	cmp	r5, #12
 800c8de:	bf38      	it	cc
 800c8e0:	250c      	movcc	r5, #12
 800c8e2:	2d00      	cmp	r5, #0
 800c8e4:	4607      	mov	r7, r0
 800c8e6:	db01      	blt.n	800c8ec <_malloc_r+0x1c>
 800c8e8:	42a9      	cmp	r1, r5
 800c8ea:	d905      	bls.n	800c8f8 <_malloc_r+0x28>
 800c8ec:	230c      	movs	r3, #12
 800c8ee:	603b      	str	r3, [r7, #0]
 800c8f0:	2600      	movs	r6, #0
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f8:	4e2e      	ldr	r6, [pc, #184]	; (800c9b4 <_malloc_r+0xe4>)
 800c8fa:	f001 fb9b 	bl	800e034 <__malloc_lock>
 800c8fe:	6833      	ldr	r3, [r6, #0]
 800c900:	461c      	mov	r4, r3
 800c902:	bb34      	cbnz	r4, 800c952 <_malloc_r+0x82>
 800c904:	4629      	mov	r1, r5
 800c906:	4638      	mov	r0, r7
 800c908:	f7ff ffc2 	bl	800c890 <sbrk_aligned>
 800c90c:	1c43      	adds	r3, r0, #1
 800c90e:	4604      	mov	r4, r0
 800c910:	d14d      	bne.n	800c9ae <_malloc_r+0xde>
 800c912:	6834      	ldr	r4, [r6, #0]
 800c914:	4626      	mov	r6, r4
 800c916:	2e00      	cmp	r6, #0
 800c918:	d140      	bne.n	800c99c <_malloc_r+0xcc>
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	4631      	mov	r1, r6
 800c91e:	4638      	mov	r0, r7
 800c920:	eb04 0803 	add.w	r8, r4, r3
 800c924:	f000 fcb2 	bl	800d28c <_sbrk_r>
 800c928:	4580      	cmp	r8, r0
 800c92a:	d13a      	bne.n	800c9a2 <_malloc_r+0xd2>
 800c92c:	6821      	ldr	r1, [r4, #0]
 800c92e:	3503      	adds	r5, #3
 800c930:	1a6d      	subs	r5, r5, r1
 800c932:	f025 0503 	bic.w	r5, r5, #3
 800c936:	3508      	adds	r5, #8
 800c938:	2d0c      	cmp	r5, #12
 800c93a:	bf38      	it	cc
 800c93c:	250c      	movcc	r5, #12
 800c93e:	4629      	mov	r1, r5
 800c940:	4638      	mov	r0, r7
 800c942:	f7ff ffa5 	bl	800c890 <sbrk_aligned>
 800c946:	3001      	adds	r0, #1
 800c948:	d02b      	beq.n	800c9a2 <_malloc_r+0xd2>
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	442b      	add	r3, r5
 800c94e:	6023      	str	r3, [r4, #0]
 800c950:	e00e      	b.n	800c970 <_malloc_r+0xa0>
 800c952:	6822      	ldr	r2, [r4, #0]
 800c954:	1b52      	subs	r2, r2, r5
 800c956:	d41e      	bmi.n	800c996 <_malloc_r+0xc6>
 800c958:	2a0b      	cmp	r2, #11
 800c95a:	d916      	bls.n	800c98a <_malloc_r+0xba>
 800c95c:	1961      	adds	r1, r4, r5
 800c95e:	42a3      	cmp	r3, r4
 800c960:	6025      	str	r5, [r4, #0]
 800c962:	bf18      	it	ne
 800c964:	6059      	strne	r1, [r3, #4]
 800c966:	6863      	ldr	r3, [r4, #4]
 800c968:	bf08      	it	eq
 800c96a:	6031      	streq	r1, [r6, #0]
 800c96c:	5162      	str	r2, [r4, r5]
 800c96e:	604b      	str	r3, [r1, #4]
 800c970:	4638      	mov	r0, r7
 800c972:	f104 060b 	add.w	r6, r4, #11
 800c976:	f001 fb63 	bl	800e040 <__malloc_unlock>
 800c97a:	f026 0607 	bic.w	r6, r6, #7
 800c97e:	1d23      	adds	r3, r4, #4
 800c980:	1af2      	subs	r2, r6, r3
 800c982:	d0b6      	beq.n	800c8f2 <_malloc_r+0x22>
 800c984:	1b9b      	subs	r3, r3, r6
 800c986:	50a3      	str	r3, [r4, r2]
 800c988:	e7b3      	b.n	800c8f2 <_malloc_r+0x22>
 800c98a:	6862      	ldr	r2, [r4, #4]
 800c98c:	42a3      	cmp	r3, r4
 800c98e:	bf0c      	ite	eq
 800c990:	6032      	streq	r2, [r6, #0]
 800c992:	605a      	strne	r2, [r3, #4]
 800c994:	e7ec      	b.n	800c970 <_malloc_r+0xa0>
 800c996:	4623      	mov	r3, r4
 800c998:	6864      	ldr	r4, [r4, #4]
 800c99a:	e7b2      	b.n	800c902 <_malloc_r+0x32>
 800c99c:	4634      	mov	r4, r6
 800c99e:	6876      	ldr	r6, [r6, #4]
 800c9a0:	e7b9      	b.n	800c916 <_malloc_r+0x46>
 800c9a2:	230c      	movs	r3, #12
 800c9a4:	603b      	str	r3, [r7, #0]
 800c9a6:	4638      	mov	r0, r7
 800c9a8:	f001 fb4a 	bl	800e040 <__malloc_unlock>
 800c9ac:	e7a1      	b.n	800c8f2 <_malloc_r+0x22>
 800c9ae:	6025      	str	r5, [r4, #0]
 800c9b0:	e7de      	b.n	800c970 <_malloc_r+0xa0>
 800c9b2:	bf00      	nop
 800c9b4:	20000b2c 	.word	0x20000b2c

0800c9b8 <__cvt>:
 800c9b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9bc:	ec55 4b10 	vmov	r4, r5, d0
 800c9c0:	2d00      	cmp	r5, #0
 800c9c2:	460e      	mov	r6, r1
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	462b      	mov	r3, r5
 800c9c8:	bfbb      	ittet	lt
 800c9ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c9ce:	461d      	movlt	r5, r3
 800c9d0:	2300      	movge	r3, #0
 800c9d2:	232d      	movlt	r3, #45	; 0x2d
 800c9d4:	700b      	strb	r3, [r1, #0]
 800c9d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c9dc:	4691      	mov	r9, r2
 800c9de:	f023 0820 	bic.w	r8, r3, #32
 800c9e2:	bfbc      	itt	lt
 800c9e4:	4622      	movlt	r2, r4
 800c9e6:	4614      	movlt	r4, r2
 800c9e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c9ec:	d005      	beq.n	800c9fa <__cvt+0x42>
 800c9ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c9f2:	d100      	bne.n	800c9f6 <__cvt+0x3e>
 800c9f4:	3601      	adds	r6, #1
 800c9f6:	2102      	movs	r1, #2
 800c9f8:	e000      	b.n	800c9fc <__cvt+0x44>
 800c9fa:	2103      	movs	r1, #3
 800c9fc:	ab03      	add	r3, sp, #12
 800c9fe:	9301      	str	r3, [sp, #4]
 800ca00:	ab02      	add	r3, sp, #8
 800ca02:	9300      	str	r3, [sp, #0]
 800ca04:	ec45 4b10 	vmov	d0, r4, r5
 800ca08:	4653      	mov	r3, sl
 800ca0a:	4632      	mov	r2, r6
 800ca0c:	f000 fd20 	bl	800d450 <_dtoa_r>
 800ca10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ca14:	4607      	mov	r7, r0
 800ca16:	d102      	bne.n	800ca1e <__cvt+0x66>
 800ca18:	f019 0f01 	tst.w	r9, #1
 800ca1c:	d022      	beq.n	800ca64 <__cvt+0xac>
 800ca1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca22:	eb07 0906 	add.w	r9, r7, r6
 800ca26:	d110      	bne.n	800ca4a <__cvt+0x92>
 800ca28:	783b      	ldrb	r3, [r7, #0]
 800ca2a:	2b30      	cmp	r3, #48	; 0x30
 800ca2c:	d10a      	bne.n	800ca44 <__cvt+0x8c>
 800ca2e:	2200      	movs	r2, #0
 800ca30:	2300      	movs	r3, #0
 800ca32:	4620      	mov	r0, r4
 800ca34:	4629      	mov	r1, r5
 800ca36:	f7f4 f84f 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca3a:	b918      	cbnz	r0, 800ca44 <__cvt+0x8c>
 800ca3c:	f1c6 0601 	rsb	r6, r6, #1
 800ca40:	f8ca 6000 	str.w	r6, [sl]
 800ca44:	f8da 3000 	ldr.w	r3, [sl]
 800ca48:	4499      	add	r9, r3
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	4620      	mov	r0, r4
 800ca50:	4629      	mov	r1, r5
 800ca52:	f7f4 f841 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca56:	b108      	cbz	r0, 800ca5c <__cvt+0xa4>
 800ca58:	f8cd 900c 	str.w	r9, [sp, #12]
 800ca5c:	2230      	movs	r2, #48	; 0x30
 800ca5e:	9b03      	ldr	r3, [sp, #12]
 800ca60:	454b      	cmp	r3, r9
 800ca62:	d307      	bcc.n	800ca74 <__cvt+0xbc>
 800ca64:	9b03      	ldr	r3, [sp, #12]
 800ca66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca68:	1bdb      	subs	r3, r3, r7
 800ca6a:	4638      	mov	r0, r7
 800ca6c:	6013      	str	r3, [r2, #0]
 800ca6e:	b004      	add	sp, #16
 800ca70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca74:	1c59      	adds	r1, r3, #1
 800ca76:	9103      	str	r1, [sp, #12]
 800ca78:	701a      	strb	r2, [r3, #0]
 800ca7a:	e7f0      	b.n	800ca5e <__cvt+0xa6>

0800ca7c <__exponent>:
 800ca7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2900      	cmp	r1, #0
 800ca82:	bfb8      	it	lt
 800ca84:	4249      	neglt	r1, r1
 800ca86:	f803 2b02 	strb.w	r2, [r3], #2
 800ca8a:	bfb4      	ite	lt
 800ca8c:	222d      	movlt	r2, #45	; 0x2d
 800ca8e:	222b      	movge	r2, #43	; 0x2b
 800ca90:	2909      	cmp	r1, #9
 800ca92:	7042      	strb	r2, [r0, #1]
 800ca94:	dd2a      	ble.n	800caec <__exponent+0x70>
 800ca96:	f10d 0407 	add.w	r4, sp, #7
 800ca9a:	46a4      	mov	ip, r4
 800ca9c:	270a      	movs	r7, #10
 800ca9e:	46a6      	mov	lr, r4
 800caa0:	460a      	mov	r2, r1
 800caa2:	fb91 f6f7 	sdiv	r6, r1, r7
 800caa6:	fb07 1516 	mls	r5, r7, r6, r1
 800caaa:	3530      	adds	r5, #48	; 0x30
 800caac:	2a63      	cmp	r2, #99	; 0x63
 800caae:	f104 34ff 	add.w	r4, r4, #4294967295
 800cab2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cab6:	4631      	mov	r1, r6
 800cab8:	dcf1      	bgt.n	800ca9e <__exponent+0x22>
 800caba:	3130      	adds	r1, #48	; 0x30
 800cabc:	f1ae 0502 	sub.w	r5, lr, #2
 800cac0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cac4:	1c44      	adds	r4, r0, #1
 800cac6:	4629      	mov	r1, r5
 800cac8:	4561      	cmp	r1, ip
 800caca:	d30a      	bcc.n	800cae2 <__exponent+0x66>
 800cacc:	f10d 0209 	add.w	r2, sp, #9
 800cad0:	eba2 020e 	sub.w	r2, r2, lr
 800cad4:	4565      	cmp	r5, ip
 800cad6:	bf88      	it	hi
 800cad8:	2200      	movhi	r2, #0
 800cada:	4413      	add	r3, r2
 800cadc:	1a18      	subs	r0, r3, r0
 800cade:	b003      	add	sp, #12
 800cae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cae6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800caea:	e7ed      	b.n	800cac8 <__exponent+0x4c>
 800caec:	2330      	movs	r3, #48	; 0x30
 800caee:	3130      	adds	r1, #48	; 0x30
 800caf0:	7083      	strb	r3, [r0, #2]
 800caf2:	70c1      	strb	r1, [r0, #3]
 800caf4:	1d03      	adds	r3, r0, #4
 800caf6:	e7f1      	b.n	800cadc <__exponent+0x60>

0800caf8 <_printf_float>:
 800caf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafc:	ed2d 8b02 	vpush	{d8}
 800cb00:	b08d      	sub	sp, #52	; 0x34
 800cb02:	460c      	mov	r4, r1
 800cb04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cb08:	4616      	mov	r6, r2
 800cb0a:	461f      	mov	r7, r3
 800cb0c:	4605      	mov	r5, r0
 800cb0e:	f001 fa8d 	bl	800e02c <_localeconv_r>
 800cb12:	f8d0 a000 	ldr.w	sl, [r0]
 800cb16:	4650      	mov	r0, sl
 800cb18:	f7f3 fb62 	bl	80001e0 <strlen>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	930a      	str	r3, [sp, #40]	; 0x28
 800cb20:	6823      	ldr	r3, [r4, #0]
 800cb22:	9305      	str	r3, [sp, #20]
 800cb24:	f8d8 3000 	ldr.w	r3, [r8]
 800cb28:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cb2c:	3307      	adds	r3, #7
 800cb2e:	f023 0307 	bic.w	r3, r3, #7
 800cb32:	f103 0208 	add.w	r2, r3, #8
 800cb36:	f8c8 2000 	str.w	r2, [r8]
 800cb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cb42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cb46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb4a:	9307      	str	r3, [sp, #28]
 800cb4c:	f8cd 8018 	str.w	r8, [sp, #24]
 800cb50:	ee08 0a10 	vmov	s16, r0
 800cb54:	4b9f      	ldr	r3, [pc, #636]	; (800cdd4 <_printf_float+0x2dc>)
 800cb56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb5a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb5e:	f7f3 ffed 	bl	8000b3c <__aeabi_dcmpun>
 800cb62:	bb88      	cbnz	r0, 800cbc8 <_printf_float+0xd0>
 800cb64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb68:	4b9a      	ldr	r3, [pc, #616]	; (800cdd4 <_printf_float+0x2dc>)
 800cb6a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb6e:	f7f3 ffc7 	bl	8000b00 <__aeabi_dcmple>
 800cb72:	bb48      	cbnz	r0, 800cbc8 <_printf_float+0xd0>
 800cb74:	2200      	movs	r2, #0
 800cb76:	2300      	movs	r3, #0
 800cb78:	4640      	mov	r0, r8
 800cb7a:	4649      	mov	r1, r9
 800cb7c:	f7f3 ffb6 	bl	8000aec <__aeabi_dcmplt>
 800cb80:	b110      	cbz	r0, 800cb88 <_printf_float+0x90>
 800cb82:	232d      	movs	r3, #45	; 0x2d
 800cb84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb88:	4b93      	ldr	r3, [pc, #588]	; (800cdd8 <_printf_float+0x2e0>)
 800cb8a:	4894      	ldr	r0, [pc, #592]	; (800cddc <_printf_float+0x2e4>)
 800cb8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cb90:	bf94      	ite	ls
 800cb92:	4698      	movls	r8, r3
 800cb94:	4680      	movhi	r8, r0
 800cb96:	2303      	movs	r3, #3
 800cb98:	6123      	str	r3, [r4, #16]
 800cb9a:	9b05      	ldr	r3, [sp, #20]
 800cb9c:	f023 0204 	bic.w	r2, r3, #4
 800cba0:	6022      	str	r2, [r4, #0]
 800cba2:	f04f 0900 	mov.w	r9, #0
 800cba6:	9700      	str	r7, [sp, #0]
 800cba8:	4633      	mov	r3, r6
 800cbaa:	aa0b      	add	r2, sp, #44	; 0x2c
 800cbac:	4621      	mov	r1, r4
 800cbae:	4628      	mov	r0, r5
 800cbb0:	f000 f9d8 	bl	800cf64 <_printf_common>
 800cbb4:	3001      	adds	r0, #1
 800cbb6:	f040 8090 	bne.w	800ccda <_printf_float+0x1e2>
 800cbba:	f04f 30ff 	mov.w	r0, #4294967295
 800cbbe:	b00d      	add	sp, #52	; 0x34
 800cbc0:	ecbd 8b02 	vpop	{d8}
 800cbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc8:	4642      	mov	r2, r8
 800cbca:	464b      	mov	r3, r9
 800cbcc:	4640      	mov	r0, r8
 800cbce:	4649      	mov	r1, r9
 800cbd0:	f7f3 ffb4 	bl	8000b3c <__aeabi_dcmpun>
 800cbd4:	b140      	cbz	r0, 800cbe8 <_printf_float+0xf0>
 800cbd6:	464b      	mov	r3, r9
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	bfbc      	itt	lt
 800cbdc:	232d      	movlt	r3, #45	; 0x2d
 800cbde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cbe2:	487f      	ldr	r0, [pc, #508]	; (800cde0 <_printf_float+0x2e8>)
 800cbe4:	4b7f      	ldr	r3, [pc, #508]	; (800cde4 <_printf_float+0x2ec>)
 800cbe6:	e7d1      	b.n	800cb8c <_printf_float+0x94>
 800cbe8:	6863      	ldr	r3, [r4, #4]
 800cbea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cbee:	9206      	str	r2, [sp, #24]
 800cbf0:	1c5a      	adds	r2, r3, #1
 800cbf2:	d13f      	bne.n	800cc74 <_printf_float+0x17c>
 800cbf4:	2306      	movs	r3, #6
 800cbf6:	6063      	str	r3, [r4, #4]
 800cbf8:	9b05      	ldr	r3, [sp, #20]
 800cbfa:	6861      	ldr	r1, [r4, #4]
 800cbfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cc00:	2300      	movs	r3, #0
 800cc02:	9303      	str	r3, [sp, #12]
 800cc04:	ab0a      	add	r3, sp, #40	; 0x28
 800cc06:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cc0a:	ab09      	add	r3, sp, #36	; 0x24
 800cc0c:	ec49 8b10 	vmov	d0, r8, r9
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	6022      	str	r2, [r4, #0]
 800cc14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cc18:	4628      	mov	r0, r5
 800cc1a:	f7ff fecd 	bl	800c9b8 <__cvt>
 800cc1e:	9b06      	ldr	r3, [sp, #24]
 800cc20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc22:	2b47      	cmp	r3, #71	; 0x47
 800cc24:	4680      	mov	r8, r0
 800cc26:	d108      	bne.n	800cc3a <_printf_float+0x142>
 800cc28:	1cc8      	adds	r0, r1, #3
 800cc2a:	db02      	blt.n	800cc32 <_printf_float+0x13a>
 800cc2c:	6863      	ldr	r3, [r4, #4]
 800cc2e:	4299      	cmp	r1, r3
 800cc30:	dd41      	ble.n	800ccb6 <_printf_float+0x1be>
 800cc32:	f1ab 0b02 	sub.w	fp, fp, #2
 800cc36:	fa5f fb8b 	uxtb.w	fp, fp
 800cc3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc3e:	d820      	bhi.n	800cc82 <_printf_float+0x18a>
 800cc40:	3901      	subs	r1, #1
 800cc42:	465a      	mov	r2, fp
 800cc44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cc48:	9109      	str	r1, [sp, #36]	; 0x24
 800cc4a:	f7ff ff17 	bl	800ca7c <__exponent>
 800cc4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc50:	1813      	adds	r3, r2, r0
 800cc52:	2a01      	cmp	r2, #1
 800cc54:	4681      	mov	r9, r0
 800cc56:	6123      	str	r3, [r4, #16]
 800cc58:	dc02      	bgt.n	800cc60 <_printf_float+0x168>
 800cc5a:	6822      	ldr	r2, [r4, #0]
 800cc5c:	07d2      	lsls	r2, r2, #31
 800cc5e:	d501      	bpl.n	800cc64 <_printf_float+0x16c>
 800cc60:	3301      	adds	r3, #1
 800cc62:	6123      	str	r3, [r4, #16]
 800cc64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d09c      	beq.n	800cba6 <_printf_float+0xae>
 800cc6c:	232d      	movs	r3, #45	; 0x2d
 800cc6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc72:	e798      	b.n	800cba6 <_printf_float+0xae>
 800cc74:	9a06      	ldr	r2, [sp, #24]
 800cc76:	2a47      	cmp	r2, #71	; 0x47
 800cc78:	d1be      	bne.n	800cbf8 <_printf_float+0x100>
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1bc      	bne.n	800cbf8 <_printf_float+0x100>
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e7b9      	b.n	800cbf6 <_printf_float+0xfe>
 800cc82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cc86:	d118      	bne.n	800ccba <_printf_float+0x1c2>
 800cc88:	2900      	cmp	r1, #0
 800cc8a:	6863      	ldr	r3, [r4, #4]
 800cc8c:	dd0b      	ble.n	800cca6 <_printf_float+0x1ae>
 800cc8e:	6121      	str	r1, [r4, #16]
 800cc90:	b913      	cbnz	r3, 800cc98 <_printf_float+0x1a0>
 800cc92:	6822      	ldr	r2, [r4, #0]
 800cc94:	07d0      	lsls	r0, r2, #31
 800cc96:	d502      	bpl.n	800cc9e <_printf_float+0x1a6>
 800cc98:	3301      	adds	r3, #1
 800cc9a:	440b      	add	r3, r1
 800cc9c:	6123      	str	r3, [r4, #16]
 800cc9e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cca0:	f04f 0900 	mov.w	r9, #0
 800cca4:	e7de      	b.n	800cc64 <_printf_float+0x16c>
 800cca6:	b913      	cbnz	r3, 800ccae <_printf_float+0x1b6>
 800cca8:	6822      	ldr	r2, [r4, #0]
 800ccaa:	07d2      	lsls	r2, r2, #31
 800ccac:	d501      	bpl.n	800ccb2 <_printf_float+0x1ba>
 800ccae:	3302      	adds	r3, #2
 800ccb0:	e7f4      	b.n	800cc9c <_printf_float+0x1a4>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e7f2      	b.n	800cc9c <_printf_float+0x1a4>
 800ccb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ccba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccbc:	4299      	cmp	r1, r3
 800ccbe:	db05      	blt.n	800cccc <_printf_float+0x1d4>
 800ccc0:	6823      	ldr	r3, [r4, #0]
 800ccc2:	6121      	str	r1, [r4, #16]
 800ccc4:	07d8      	lsls	r0, r3, #31
 800ccc6:	d5ea      	bpl.n	800cc9e <_printf_float+0x1a6>
 800ccc8:	1c4b      	adds	r3, r1, #1
 800ccca:	e7e7      	b.n	800cc9c <_printf_float+0x1a4>
 800cccc:	2900      	cmp	r1, #0
 800ccce:	bfd4      	ite	le
 800ccd0:	f1c1 0202 	rsble	r2, r1, #2
 800ccd4:	2201      	movgt	r2, #1
 800ccd6:	4413      	add	r3, r2
 800ccd8:	e7e0      	b.n	800cc9c <_printf_float+0x1a4>
 800ccda:	6823      	ldr	r3, [r4, #0]
 800ccdc:	055a      	lsls	r2, r3, #21
 800ccde:	d407      	bmi.n	800ccf0 <_printf_float+0x1f8>
 800cce0:	6923      	ldr	r3, [r4, #16]
 800cce2:	4642      	mov	r2, r8
 800cce4:	4631      	mov	r1, r6
 800cce6:	4628      	mov	r0, r5
 800cce8:	47b8      	blx	r7
 800ccea:	3001      	adds	r0, #1
 800ccec:	d12c      	bne.n	800cd48 <_printf_float+0x250>
 800ccee:	e764      	b.n	800cbba <_printf_float+0xc2>
 800ccf0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ccf4:	f240 80e0 	bls.w	800ceb8 <_printf_float+0x3c0>
 800ccf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	2300      	movs	r3, #0
 800cd00:	f7f3 feea 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d034      	beq.n	800cd72 <_printf_float+0x27a>
 800cd08:	4a37      	ldr	r2, [pc, #220]	; (800cde8 <_printf_float+0x2f0>)
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	4631      	mov	r1, r6
 800cd0e:	4628      	mov	r0, r5
 800cd10:	47b8      	blx	r7
 800cd12:	3001      	adds	r0, #1
 800cd14:	f43f af51 	beq.w	800cbba <_printf_float+0xc2>
 800cd18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	db02      	blt.n	800cd26 <_printf_float+0x22e>
 800cd20:	6823      	ldr	r3, [r4, #0]
 800cd22:	07d8      	lsls	r0, r3, #31
 800cd24:	d510      	bpl.n	800cd48 <_printf_float+0x250>
 800cd26:	ee18 3a10 	vmov	r3, s16
 800cd2a:	4652      	mov	r2, sl
 800cd2c:	4631      	mov	r1, r6
 800cd2e:	4628      	mov	r0, r5
 800cd30:	47b8      	blx	r7
 800cd32:	3001      	adds	r0, #1
 800cd34:	f43f af41 	beq.w	800cbba <_printf_float+0xc2>
 800cd38:	f04f 0800 	mov.w	r8, #0
 800cd3c:	f104 091a 	add.w	r9, r4, #26
 800cd40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd42:	3b01      	subs	r3, #1
 800cd44:	4543      	cmp	r3, r8
 800cd46:	dc09      	bgt.n	800cd5c <_printf_float+0x264>
 800cd48:	6823      	ldr	r3, [r4, #0]
 800cd4a:	079b      	lsls	r3, r3, #30
 800cd4c:	f100 8105 	bmi.w	800cf5a <_printf_float+0x462>
 800cd50:	68e0      	ldr	r0, [r4, #12]
 800cd52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd54:	4298      	cmp	r0, r3
 800cd56:	bfb8      	it	lt
 800cd58:	4618      	movlt	r0, r3
 800cd5a:	e730      	b.n	800cbbe <_printf_float+0xc6>
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	464a      	mov	r2, r9
 800cd60:	4631      	mov	r1, r6
 800cd62:	4628      	mov	r0, r5
 800cd64:	47b8      	blx	r7
 800cd66:	3001      	adds	r0, #1
 800cd68:	f43f af27 	beq.w	800cbba <_printf_float+0xc2>
 800cd6c:	f108 0801 	add.w	r8, r8, #1
 800cd70:	e7e6      	b.n	800cd40 <_printf_float+0x248>
 800cd72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	dc39      	bgt.n	800cdec <_printf_float+0x2f4>
 800cd78:	4a1b      	ldr	r2, [pc, #108]	; (800cde8 <_printf_float+0x2f0>)
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	4631      	mov	r1, r6
 800cd7e:	4628      	mov	r0, r5
 800cd80:	47b8      	blx	r7
 800cd82:	3001      	adds	r0, #1
 800cd84:	f43f af19 	beq.w	800cbba <_printf_float+0xc2>
 800cd88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	d102      	bne.n	800cd96 <_printf_float+0x29e>
 800cd90:	6823      	ldr	r3, [r4, #0]
 800cd92:	07d9      	lsls	r1, r3, #31
 800cd94:	d5d8      	bpl.n	800cd48 <_printf_float+0x250>
 800cd96:	ee18 3a10 	vmov	r3, s16
 800cd9a:	4652      	mov	r2, sl
 800cd9c:	4631      	mov	r1, r6
 800cd9e:	4628      	mov	r0, r5
 800cda0:	47b8      	blx	r7
 800cda2:	3001      	adds	r0, #1
 800cda4:	f43f af09 	beq.w	800cbba <_printf_float+0xc2>
 800cda8:	f04f 0900 	mov.w	r9, #0
 800cdac:	f104 0a1a 	add.w	sl, r4, #26
 800cdb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdb2:	425b      	negs	r3, r3
 800cdb4:	454b      	cmp	r3, r9
 800cdb6:	dc01      	bgt.n	800cdbc <_printf_float+0x2c4>
 800cdb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdba:	e792      	b.n	800cce2 <_printf_float+0x1ea>
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	4652      	mov	r2, sl
 800cdc0:	4631      	mov	r1, r6
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	47b8      	blx	r7
 800cdc6:	3001      	adds	r0, #1
 800cdc8:	f43f aef7 	beq.w	800cbba <_printf_float+0xc2>
 800cdcc:	f109 0901 	add.w	r9, r9, #1
 800cdd0:	e7ee      	b.n	800cdb0 <_printf_float+0x2b8>
 800cdd2:	bf00      	nop
 800cdd4:	7fefffff 	.word	0x7fefffff
 800cdd8:	0800f68c 	.word	0x0800f68c
 800cddc:	0800f690 	.word	0x0800f690
 800cde0:	0800f698 	.word	0x0800f698
 800cde4:	0800f694 	.word	0x0800f694
 800cde8:	0800f69c 	.word	0x0800f69c
 800cdec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	bfa8      	it	ge
 800cdf4:	461a      	movge	r2, r3
 800cdf6:	2a00      	cmp	r2, #0
 800cdf8:	4691      	mov	r9, r2
 800cdfa:	dc37      	bgt.n	800ce6c <_printf_float+0x374>
 800cdfc:	f04f 0b00 	mov.w	fp, #0
 800ce00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce04:	f104 021a 	add.w	r2, r4, #26
 800ce08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce0a:	9305      	str	r3, [sp, #20]
 800ce0c:	eba3 0309 	sub.w	r3, r3, r9
 800ce10:	455b      	cmp	r3, fp
 800ce12:	dc33      	bgt.n	800ce7c <_printf_float+0x384>
 800ce14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	db3b      	blt.n	800ce94 <_printf_float+0x39c>
 800ce1c:	6823      	ldr	r3, [r4, #0]
 800ce1e:	07da      	lsls	r2, r3, #31
 800ce20:	d438      	bmi.n	800ce94 <_printf_float+0x39c>
 800ce22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce24:	9a05      	ldr	r2, [sp, #20]
 800ce26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce28:	1a9a      	subs	r2, r3, r2
 800ce2a:	eba3 0901 	sub.w	r9, r3, r1
 800ce2e:	4591      	cmp	r9, r2
 800ce30:	bfa8      	it	ge
 800ce32:	4691      	movge	r9, r2
 800ce34:	f1b9 0f00 	cmp.w	r9, #0
 800ce38:	dc35      	bgt.n	800cea6 <_printf_float+0x3ae>
 800ce3a:	f04f 0800 	mov.w	r8, #0
 800ce3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce42:	f104 0a1a 	add.w	sl, r4, #26
 800ce46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce4a:	1a9b      	subs	r3, r3, r2
 800ce4c:	eba3 0309 	sub.w	r3, r3, r9
 800ce50:	4543      	cmp	r3, r8
 800ce52:	f77f af79 	ble.w	800cd48 <_printf_float+0x250>
 800ce56:	2301      	movs	r3, #1
 800ce58:	4652      	mov	r2, sl
 800ce5a:	4631      	mov	r1, r6
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	47b8      	blx	r7
 800ce60:	3001      	adds	r0, #1
 800ce62:	f43f aeaa 	beq.w	800cbba <_printf_float+0xc2>
 800ce66:	f108 0801 	add.w	r8, r8, #1
 800ce6a:	e7ec      	b.n	800ce46 <_printf_float+0x34e>
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	4631      	mov	r1, r6
 800ce70:	4642      	mov	r2, r8
 800ce72:	4628      	mov	r0, r5
 800ce74:	47b8      	blx	r7
 800ce76:	3001      	adds	r0, #1
 800ce78:	d1c0      	bne.n	800cdfc <_printf_float+0x304>
 800ce7a:	e69e      	b.n	800cbba <_printf_float+0xc2>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	4631      	mov	r1, r6
 800ce80:	4628      	mov	r0, r5
 800ce82:	9205      	str	r2, [sp, #20]
 800ce84:	47b8      	blx	r7
 800ce86:	3001      	adds	r0, #1
 800ce88:	f43f ae97 	beq.w	800cbba <_printf_float+0xc2>
 800ce8c:	9a05      	ldr	r2, [sp, #20]
 800ce8e:	f10b 0b01 	add.w	fp, fp, #1
 800ce92:	e7b9      	b.n	800ce08 <_printf_float+0x310>
 800ce94:	ee18 3a10 	vmov	r3, s16
 800ce98:	4652      	mov	r2, sl
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	47b8      	blx	r7
 800cea0:	3001      	adds	r0, #1
 800cea2:	d1be      	bne.n	800ce22 <_printf_float+0x32a>
 800cea4:	e689      	b.n	800cbba <_printf_float+0xc2>
 800cea6:	9a05      	ldr	r2, [sp, #20]
 800cea8:	464b      	mov	r3, r9
 800ceaa:	4442      	add	r2, r8
 800ceac:	4631      	mov	r1, r6
 800ceae:	4628      	mov	r0, r5
 800ceb0:	47b8      	blx	r7
 800ceb2:	3001      	adds	r0, #1
 800ceb4:	d1c1      	bne.n	800ce3a <_printf_float+0x342>
 800ceb6:	e680      	b.n	800cbba <_printf_float+0xc2>
 800ceb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ceba:	2a01      	cmp	r2, #1
 800cebc:	dc01      	bgt.n	800cec2 <_printf_float+0x3ca>
 800cebe:	07db      	lsls	r3, r3, #31
 800cec0:	d538      	bpl.n	800cf34 <_printf_float+0x43c>
 800cec2:	2301      	movs	r3, #1
 800cec4:	4642      	mov	r2, r8
 800cec6:	4631      	mov	r1, r6
 800cec8:	4628      	mov	r0, r5
 800ceca:	47b8      	blx	r7
 800cecc:	3001      	adds	r0, #1
 800cece:	f43f ae74 	beq.w	800cbba <_printf_float+0xc2>
 800ced2:	ee18 3a10 	vmov	r3, s16
 800ced6:	4652      	mov	r2, sl
 800ced8:	4631      	mov	r1, r6
 800ceda:	4628      	mov	r0, r5
 800cedc:	47b8      	blx	r7
 800cede:	3001      	adds	r0, #1
 800cee0:	f43f ae6b 	beq.w	800cbba <_printf_float+0xc2>
 800cee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cee8:	2200      	movs	r2, #0
 800ceea:	2300      	movs	r3, #0
 800ceec:	f7f3 fdf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800cef0:	b9d8      	cbnz	r0, 800cf2a <_printf_float+0x432>
 800cef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cef4:	f108 0201 	add.w	r2, r8, #1
 800cef8:	3b01      	subs	r3, #1
 800cefa:	4631      	mov	r1, r6
 800cefc:	4628      	mov	r0, r5
 800cefe:	47b8      	blx	r7
 800cf00:	3001      	adds	r0, #1
 800cf02:	d10e      	bne.n	800cf22 <_printf_float+0x42a>
 800cf04:	e659      	b.n	800cbba <_printf_float+0xc2>
 800cf06:	2301      	movs	r3, #1
 800cf08:	4652      	mov	r2, sl
 800cf0a:	4631      	mov	r1, r6
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	47b8      	blx	r7
 800cf10:	3001      	adds	r0, #1
 800cf12:	f43f ae52 	beq.w	800cbba <_printf_float+0xc2>
 800cf16:	f108 0801 	add.w	r8, r8, #1
 800cf1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	4543      	cmp	r3, r8
 800cf20:	dcf1      	bgt.n	800cf06 <_printf_float+0x40e>
 800cf22:	464b      	mov	r3, r9
 800cf24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cf28:	e6dc      	b.n	800cce4 <_printf_float+0x1ec>
 800cf2a:	f04f 0800 	mov.w	r8, #0
 800cf2e:	f104 0a1a 	add.w	sl, r4, #26
 800cf32:	e7f2      	b.n	800cf1a <_printf_float+0x422>
 800cf34:	2301      	movs	r3, #1
 800cf36:	4642      	mov	r2, r8
 800cf38:	e7df      	b.n	800cefa <_printf_float+0x402>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	464a      	mov	r2, r9
 800cf3e:	4631      	mov	r1, r6
 800cf40:	4628      	mov	r0, r5
 800cf42:	47b8      	blx	r7
 800cf44:	3001      	adds	r0, #1
 800cf46:	f43f ae38 	beq.w	800cbba <_printf_float+0xc2>
 800cf4a:	f108 0801 	add.w	r8, r8, #1
 800cf4e:	68e3      	ldr	r3, [r4, #12]
 800cf50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cf52:	1a5b      	subs	r3, r3, r1
 800cf54:	4543      	cmp	r3, r8
 800cf56:	dcf0      	bgt.n	800cf3a <_printf_float+0x442>
 800cf58:	e6fa      	b.n	800cd50 <_printf_float+0x258>
 800cf5a:	f04f 0800 	mov.w	r8, #0
 800cf5e:	f104 0919 	add.w	r9, r4, #25
 800cf62:	e7f4      	b.n	800cf4e <_printf_float+0x456>

0800cf64 <_printf_common>:
 800cf64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf68:	4616      	mov	r6, r2
 800cf6a:	4699      	mov	r9, r3
 800cf6c:	688a      	ldr	r2, [r1, #8]
 800cf6e:	690b      	ldr	r3, [r1, #16]
 800cf70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf74:	4293      	cmp	r3, r2
 800cf76:	bfb8      	it	lt
 800cf78:	4613      	movlt	r3, r2
 800cf7a:	6033      	str	r3, [r6, #0]
 800cf7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf80:	4607      	mov	r7, r0
 800cf82:	460c      	mov	r4, r1
 800cf84:	b10a      	cbz	r2, 800cf8a <_printf_common+0x26>
 800cf86:	3301      	adds	r3, #1
 800cf88:	6033      	str	r3, [r6, #0]
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	0699      	lsls	r1, r3, #26
 800cf8e:	bf42      	ittt	mi
 800cf90:	6833      	ldrmi	r3, [r6, #0]
 800cf92:	3302      	addmi	r3, #2
 800cf94:	6033      	strmi	r3, [r6, #0]
 800cf96:	6825      	ldr	r5, [r4, #0]
 800cf98:	f015 0506 	ands.w	r5, r5, #6
 800cf9c:	d106      	bne.n	800cfac <_printf_common+0x48>
 800cf9e:	f104 0a19 	add.w	sl, r4, #25
 800cfa2:	68e3      	ldr	r3, [r4, #12]
 800cfa4:	6832      	ldr	r2, [r6, #0]
 800cfa6:	1a9b      	subs	r3, r3, r2
 800cfa8:	42ab      	cmp	r3, r5
 800cfaa:	dc26      	bgt.n	800cffa <_printf_common+0x96>
 800cfac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cfb0:	1e13      	subs	r3, r2, #0
 800cfb2:	6822      	ldr	r2, [r4, #0]
 800cfb4:	bf18      	it	ne
 800cfb6:	2301      	movne	r3, #1
 800cfb8:	0692      	lsls	r2, r2, #26
 800cfba:	d42b      	bmi.n	800d014 <_printf_common+0xb0>
 800cfbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cfc0:	4649      	mov	r1, r9
 800cfc2:	4638      	mov	r0, r7
 800cfc4:	47c0      	blx	r8
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	d01e      	beq.n	800d008 <_printf_common+0xa4>
 800cfca:	6823      	ldr	r3, [r4, #0]
 800cfcc:	68e5      	ldr	r5, [r4, #12]
 800cfce:	6832      	ldr	r2, [r6, #0]
 800cfd0:	f003 0306 	and.w	r3, r3, #6
 800cfd4:	2b04      	cmp	r3, #4
 800cfd6:	bf08      	it	eq
 800cfd8:	1aad      	subeq	r5, r5, r2
 800cfda:	68a3      	ldr	r3, [r4, #8]
 800cfdc:	6922      	ldr	r2, [r4, #16]
 800cfde:	bf0c      	ite	eq
 800cfe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfe4:	2500      	movne	r5, #0
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	bfc4      	itt	gt
 800cfea:	1a9b      	subgt	r3, r3, r2
 800cfec:	18ed      	addgt	r5, r5, r3
 800cfee:	2600      	movs	r6, #0
 800cff0:	341a      	adds	r4, #26
 800cff2:	42b5      	cmp	r5, r6
 800cff4:	d11a      	bne.n	800d02c <_printf_common+0xc8>
 800cff6:	2000      	movs	r0, #0
 800cff8:	e008      	b.n	800d00c <_printf_common+0xa8>
 800cffa:	2301      	movs	r3, #1
 800cffc:	4652      	mov	r2, sl
 800cffe:	4649      	mov	r1, r9
 800d000:	4638      	mov	r0, r7
 800d002:	47c0      	blx	r8
 800d004:	3001      	adds	r0, #1
 800d006:	d103      	bne.n	800d010 <_printf_common+0xac>
 800d008:	f04f 30ff 	mov.w	r0, #4294967295
 800d00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d010:	3501      	adds	r5, #1
 800d012:	e7c6      	b.n	800cfa2 <_printf_common+0x3e>
 800d014:	18e1      	adds	r1, r4, r3
 800d016:	1c5a      	adds	r2, r3, #1
 800d018:	2030      	movs	r0, #48	; 0x30
 800d01a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d01e:	4422      	add	r2, r4
 800d020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d028:	3302      	adds	r3, #2
 800d02a:	e7c7      	b.n	800cfbc <_printf_common+0x58>
 800d02c:	2301      	movs	r3, #1
 800d02e:	4622      	mov	r2, r4
 800d030:	4649      	mov	r1, r9
 800d032:	4638      	mov	r0, r7
 800d034:	47c0      	blx	r8
 800d036:	3001      	adds	r0, #1
 800d038:	d0e6      	beq.n	800d008 <_printf_common+0xa4>
 800d03a:	3601      	adds	r6, #1
 800d03c:	e7d9      	b.n	800cff2 <_printf_common+0x8e>
	...

0800d040 <_printf_i>:
 800d040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d044:	7e0f      	ldrb	r7, [r1, #24]
 800d046:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d048:	2f78      	cmp	r7, #120	; 0x78
 800d04a:	4691      	mov	r9, r2
 800d04c:	4680      	mov	r8, r0
 800d04e:	460c      	mov	r4, r1
 800d050:	469a      	mov	sl, r3
 800d052:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d056:	d807      	bhi.n	800d068 <_printf_i+0x28>
 800d058:	2f62      	cmp	r7, #98	; 0x62
 800d05a:	d80a      	bhi.n	800d072 <_printf_i+0x32>
 800d05c:	2f00      	cmp	r7, #0
 800d05e:	f000 80d8 	beq.w	800d212 <_printf_i+0x1d2>
 800d062:	2f58      	cmp	r7, #88	; 0x58
 800d064:	f000 80a3 	beq.w	800d1ae <_printf_i+0x16e>
 800d068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d06c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d070:	e03a      	b.n	800d0e8 <_printf_i+0xa8>
 800d072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d076:	2b15      	cmp	r3, #21
 800d078:	d8f6      	bhi.n	800d068 <_printf_i+0x28>
 800d07a:	a101      	add	r1, pc, #4	; (adr r1, 800d080 <_printf_i+0x40>)
 800d07c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d080:	0800d0d9 	.word	0x0800d0d9
 800d084:	0800d0ed 	.word	0x0800d0ed
 800d088:	0800d069 	.word	0x0800d069
 800d08c:	0800d069 	.word	0x0800d069
 800d090:	0800d069 	.word	0x0800d069
 800d094:	0800d069 	.word	0x0800d069
 800d098:	0800d0ed 	.word	0x0800d0ed
 800d09c:	0800d069 	.word	0x0800d069
 800d0a0:	0800d069 	.word	0x0800d069
 800d0a4:	0800d069 	.word	0x0800d069
 800d0a8:	0800d069 	.word	0x0800d069
 800d0ac:	0800d1f9 	.word	0x0800d1f9
 800d0b0:	0800d11d 	.word	0x0800d11d
 800d0b4:	0800d1db 	.word	0x0800d1db
 800d0b8:	0800d069 	.word	0x0800d069
 800d0bc:	0800d069 	.word	0x0800d069
 800d0c0:	0800d21b 	.word	0x0800d21b
 800d0c4:	0800d069 	.word	0x0800d069
 800d0c8:	0800d11d 	.word	0x0800d11d
 800d0cc:	0800d069 	.word	0x0800d069
 800d0d0:	0800d069 	.word	0x0800d069
 800d0d4:	0800d1e3 	.word	0x0800d1e3
 800d0d8:	682b      	ldr	r3, [r5, #0]
 800d0da:	1d1a      	adds	r2, r3, #4
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	602a      	str	r2, [r5, #0]
 800d0e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e0a3      	b.n	800d234 <_printf_i+0x1f4>
 800d0ec:	6820      	ldr	r0, [r4, #0]
 800d0ee:	6829      	ldr	r1, [r5, #0]
 800d0f0:	0606      	lsls	r6, r0, #24
 800d0f2:	f101 0304 	add.w	r3, r1, #4
 800d0f6:	d50a      	bpl.n	800d10e <_printf_i+0xce>
 800d0f8:	680e      	ldr	r6, [r1, #0]
 800d0fa:	602b      	str	r3, [r5, #0]
 800d0fc:	2e00      	cmp	r6, #0
 800d0fe:	da03      	bge.n	800d108 <_printf_i+0xc8>
 800d100:	232d      	movs	r3, #45	; 0x2d
 800d102:	4276      	negs	r6, r6
 800d104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d108:	485e      	ldr	r0, [pc, #376]	; (800d284 <_printf_i+0x244>)
 800d10a:	230a      	movs	r3, #10
 800d10c:	e019      	b.n	800d142 <_printf_i+0x102>
 800d10e:	680e      	ldr	r6, [r1, #0]
 800d110:	602b      	str	r3, [r5, #0]
 800d112:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d116:	bf18      	it	ne
 800d118:	b236      	sxthne	r6, r6
 800d11a:	e7ef      	b.n	800d0fc <_printf_i+0xbc>
 800d11c:	682b      	ldr	r3, [r5, #0]
 800d11e:	6820      	ldr	r0, [r4, #0]
 800d120:	1d19      	adds	r1, r3, #4
 800d122:	6029      	str	r1, [r5, #0]
 800d124:	0601      	lsls	r1, r0, #24
 800d126:	d501      	bpl.n	800d12c <_printf_i+0xec>
 800d128:	681e      	ldr	r6, [r3, #0]
 800d12a:	e002      	b.n	800d132 <_printf_i+0xf2>
 800d12c:	0646      	lsls	r6, r0, #25
 800d12e:	d5fb      	bpl.n	800d128 <_printf_i+0xe8>
 800d130:	881e      	ldrh	r6, [r3, #0]
 800d132:	4854      	ldr	r0, [pc, #336]	; (800d284 <_printf_i+0x244>)
 800d134:	2f6f      	cmp	r7, #111	; 0x6f
 800d136:	bf0c      	ite	eq
 800d138:	2308      	moveq	r3, #8
 800d13a:	230a      	movne	r3, #10
 800d13c:	2100      	movs	r1, #0
 800d13e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d142:	6865      	ldr	r5, [r4, #4]
 800d144:	60a5      	str	r5, [r4, #8]
 800d146:	2d00      	cmp	r5, #0
 800d148:	bfa2      	ittt	ge
 800d14a:	6821      	ldrge	r1, [r4, #0]
 800d14c:	f021 0104 	bicge.w	r1, r1, #4
 800d150:	6021      	strge	r1, [r4, #0]
 800d152:	b90e      	cbnz	r6, 800d158 <_printf_i+0x118>
 800d154:	2d00      	cmp	r5, #0
 800d156:	d04d      	beq.n	800d1f4 <_printf_i+0x1b4>
 800d158:	4615      	mov	r5, r2
 800d15a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d15e:	fb03 6711 	mls	r7, r3, r1, r6
 800d162:	5dc7      	ldrb	r7, [r0, r7]
 800d164:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d168:	4637      	mov	r7, r6
 800d16a:	42bb      	cmp	r3, r7
 800d16c:	460e      	mov	r6, r1
 800d16e:	d9f4      	bls.n	800d15a <_printf_i+0x11a>
 800d170:	2b08      	cmp	r3, #8
 800d172:	d10b      	bne.n	800d18c <_printf_i+0x14c>
 800d174:	6823      	ldr	r3, [r4, #0]
 800d176:	07de      	lsls	r6, r3, #31
 800d178:	d508      	bpl.n	800d18c <_printf_i+0x14c>
 800d17a:	6923      	ldr	r3, [r4, #16]
 800d17c:	6861      	ldr	r1, [r4, #4]
 800d17e:	4299      	cmp	r1, r3
 800d180:	bfde      	ittt	le
 800d182:	2330      	movle	r3, #48	; 0x30
 800d184:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d188:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d18c:	1b52      	subs	r2, r2, r5
 800d18e:	6122      	str	r2, [r4, #16]
 800d190:	f8cd a000 	str.w	sl, [sp]
 800d194:	464b      	mov	r3, r9
 800d196:	aa03      	add	r2, sp, #12
 800d198:	4621      	mov	r1, r4
 800d19a:	4640      	mov	r0, r8
 800d19c:	f7ff fee2 	bl	800cf64 <_printf_common>
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	d14c      	bne.n	800d23e <_printf_i+0x1fe>
 800d1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a8:	b004      	add	sp, #16
 800d1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ae:	4835      	ldr	r0, [pc, #212]	; (800d284 <_printf_i+0x244>)
 800d1b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d1b4:	6829      	ldr	r1, [r5, #0]
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d1bc:	6029      	str	r1, [r5, #0]
 800d1be:	061d      	lsls	r5, r3, #24
 800d1c0:	d514      	bpl.n	800d1ec <_printf_i+0x1ac>
 800d1c2:	07df      	lsls	r7, r3, #31
 800d1c4:	bf44      	itt	mi
 800d1c6:	f043 0320 	orrmi.w	r3, r3, #32
 800d1ca:	6023      	strmi	r3, [r4, #0]
 800d1cc:	b91e      	cbnz	r6, 800d1d6 <_printf_i+0x196>
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	f023 0320 	bic.w	r3, r3, #32
 800d1d4:	6023      	str	r3, [r4, #0]
 800d1d6:	2310      	movs	r3, #16
 800d1d8:	e7b0      	b.n	800d13c <_printf_i+0xfc>
 800d1da:	6823      	ldr	r3, [r4, #0]
 800d1dc:	f043 0320 	orr.w	r3, r3, #32
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	2378      	movs	r3, #120	; 0x78
 800d1e4:	4828      	ldr	r0, [pc, #160]	; (800d288 <_printf_i+0x248>)
 800d1e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d1ea:	e7e3      	b.n	800d1b4 <_printf_i+0x174>
 800d1ec:	0659      	lsls	r1, r3, #25
 800d1ee:	bf48      	it	mi
 800d1f0:	b2b6      	uxthmi	r6, r6
 800d1f2:	e7e6      	b.n	800d1c2 <_printf_i+0x182>
 800d1f4:	4615      	mov	r5, r2
 800d1f6:	e7bb      	b.n	800d170 <_printf_i+0x130>
 800d1f8:	682b      	ldr	r3, [r5, #0]
 800d1fa:	6826      	ldr	r6, [r4, #0]
 800d1fc:	6961      	ldr	r1, [r4, #20]
 800d1fe:	1d18      	adds	r0, r3, #4
 800d200:	6028      	str	r0, [r5, #0]
 800d202:	0635      	lsls	r5, r6, #24
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	d501      	bpl.n	800d20c <_printf_i+0x1cc>
 800d208:	6019      	str	r1, [r3, #0]
 800d20a:	e002      	b.n	800d212 <_printf_i+0x1d2>
 800d20c:	0670      	lsls	r0, r6, #25
 800d20e:	d5fb      	bpl.n	800d208 <_printf_i+0x1c8>
 800d210:	8019      	strh	r1, [r3, #0]
 800d212:	2300      	movs	r3, #0
 800d214:	6123      	str	r3, [r4, #16]
 800d216:	4615      	mov	r5, r2
 800d218:	e7ba      	b.n	800d190 <_printf_i+0x150>
 800d21a:	682b      	ldr	r3, [r5, #0]
 800d21c:	1d1a      	adds	r2, r3, #4
 800d21e:	602a      	str	r2, [r5, #0]
 800d220:	681d      	ldr	r5, [r3, #0]
 800d222:	6862      	ldr	r2, [r4, #4]
 800d224:	2100      	movs	r1, #0
 800d226:	4628      	mov	r0, r5
 800d228:	f7f2 ffe2 	bl	80001f0 <memchr>
 800d22c:	b108      	cbz	r0, 800d232 <_printf_i+0x1f2>
 800d22e:	1b40      	subs	r0, r0, r5
 800d230:	6060      	str	r0, [r4, #4]
 800d232:	6863      	ldr	r3, [r4, #4]
 800d234:	6123      	str	r3, [r4, #16]
 800d236:	2300      	movs	r3, #0
 800d238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d23c:	e7a8      	b.n	800d190 <_printf_i+0x150>
 800d23e:	6923      	ldr	r3, [r4, #16]
 800d240:	462a      	mov	r2, r5
 800d242:	4649      	mov	r1, r9
 800d244:	4640      	mov	r0, r8
 800d246:	47d0      	blx	sl
 800d248:	3001      	adds	r0, #1
 800d24a:	d0ab      	beq.n	800d1a4 <_printf_i+0x164>
 800d24c:	6823      	ldr	r3, [r4, #0]
 800d24e:	079b      	lsls	r3, r3, #30
 800d250:	d413      	bmi.n	800d27a <_printf_i+0x23a>
 800d252:	68e0      	ldr	r0, [r4, #12]
 800d254:	9b03      	ldr	r3, [sp, #12]
 800d256:	4298      	cmp	r0, r3
 800d258:	bfb8      	it	lt
 800d25a:	4618      	movlt	r0, r3
 800d25c:	e7a4      	b.n	800d1a8 <_printf_i+0x168>
 800d25e:	2301      	movs	r3, #1
 800d260:	4632      	mov	r2, r6
 800d262:	4649      	mov	r1, r9
 800d264:	4640      	mov	r0, r8
 800d266:	47d0      	blx	sl
 800d268:	3001      	adds	r0, #1
 800d26a:	d09b      	beq.n	800d1a4 <_printf_i+0x164>
 800d26c:	3501      	adds	r5, #1
 800d26e:	68e3      	ldr	r3, [r4, #12]
 800d270:	9903      	ldr	r1, [sp, #12]
 800d272:	1a5b      	subs	r3, r3, r1
 800d274:	42ab      	cmp	r3, r5
 800d276:	dcf2      	bgt.n	800d25e <_printf_i+0x21e>
 800d278:	e7eb      	b.n	800d252 <_printf_i+0x212>
 800d27a:	2500      	movs	r5, #0
 800d27c:	f104 0619 	add.w	r6, r4, #25
 800d280:	e7f5      	b.n	800d26e <_printf_i+0x22e>
 800d282:	bf00      	nop
 800d284:	0800f69e 	.word	0x0800f69e
 800d288:	0800f6af 	.word	0x0800f6af

0800d28c <_sbrk_r>:
 800d28c:	b538      	push	{r3, r4, r5, lr}
 800d28e:	4d06      	ldr	r5, [pc, #24]	; (800d2a8 <_sbrk_r+0x1c>)
 800d290:	2300      	movs	r3, #0
 800d292:	4604      	mov	r4, r0
 800d294:	4608      	mov	r0, r1
 800d296:	602b      	str	r3, [r5, #0]
 800d298:	f7f7 fed0 	bl	800503c <_sbrk>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	d102      	bne.n	800d2a6 <_sbrk_r+0x1a>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	b103      	cbz	r3, 800d2a6 <_sbrk_r+0x1a>
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	20000b34 	.word	0x20000b34

0800d2ac <_raise_r>:
 800d2ac:	291f      	cmp	r1, #31
 800d2ae:	b538      	push	{r3, r4, r5, lr}
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	460d      	mov	r5, r1
 800d2b4:	d904      	bls.n	800d2c0 <_raise_r+0x14>
 800d2b6:	2316      	movs	r3, #22
 800d2b8:	6003      	str	r3, [r0, #0]
 800d2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d2be:	bd38      	pop	{r3, r4, r5, pc}
 800d2c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d2c2:	b112      	cbz	r2, 800d2ca <_raise_r+0x1e>
 800d2c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2c8:	b94b      	cbnz	r3, 800d2de <_raise_r+0x32>
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	f000 f830 	bl	800d330 <_getpid_r>
 800d2d0:	462a      	mov	r2, r5
 800d2d2:	4601      	mov	r1, r0
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2da:	f000 b817 	b.w	800d30c <_kill_r>
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d00a      	beq.n	800d2f8 <_raise_r+0x4c>
 800d2e2:	1c59      	adds	r1, r3, #1
 800d2e4:	d103      	bne.n	800d2ee <_raise_r+0x42>
 800d2e6:	2316      	movs	r3, #22
 800d2e8:	6003      	str	r3, [r0, #0]
 800d2ea:	2001      	movs	r0, #1
 800d2ec:	e7e7      	b.n	800d2be <_raise_r+0x12>
 800d2ee:	2400      	movs	r4, #0
 800d2f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	4798      	blx	r3
 800d2f8:	2000      	movs	r0, #0
 800d2fa:	e7e0      	b.n	800d2be <_raise_r+0x12>

0800d2fc <raise>:
 800d2fc:	4b02      	ldr	r3, [pc, #8]	; (800d308 <raise+0xc>)
 800d2fe:	4601      	mov	r1, r0
 800d300:	6818      	ldr	r0, [r3, #0]
 800d302:	f7ff bfd3 	b.w	800d2ac <_raise_r>
 800d306:	bf00      	nop
 800d308:	2000000c 	.word	0x2000000c

0800d30c <_kill_r>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	4d07      	ldr	r5, [pc, #28]	; (800d32c <_kill_r+0x20>)
 800d310:	2300      	movs	r3, #0
 800d312:	4604      	mov	r4, r0
 800d314:	4608      	mov	r0, r1
 800d316:	4611      	mov	r1, r2
 800d318:	602b      	str	r3, [r5, #0]
 800d31a:	f7f7 fe07 	bl	8004f2c <_kill>
 800d31e:	1c43      	adds	r3, r0, #1
 800d320:	d102      	bne.n	800d328 <_kill_r+0x1c>
 800d322:	682b      	ldr	r3, [r5, #0]
 800d324:	b103      	cbz	r3, 800d328 <_kill_r+0x1c>
 800d326:	6023      	str	r3, [r4, #0]
 800d328:	bd38      	pop	{r3, r4, r5, pc}
 800d32a:	bf00      	nop
 800d32c:	20000b34 	.word	0x20000b34

0800d330 <_getpid_r>:
 800d330:	f7f7 bdf4 	b.w	8004f1c <_getpid>

0800d334 <quorem>:
 800d334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d338:	6903      	ldr	r3, [r0, #16]
 800d33a:	690c      	ldr	r4, [r1, #16]
 800d33c:	42a3      	cmp	r3, r4
 800d33e:	4607      	mov	r7, r0
 800d340:	f2c0 8081 	blt.w	800d446 <quorem+0x112>
 800d344:	3c01      	subs	r4, #1
 800d346:	f101 0814 	add.w	r8, r1, #20
 800d34a:	f100 0514 	add.w	r5, r0, #20
 800d34e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d352:	9301      	str	r3, [sp, #4]
 800d354:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d358:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d35c:	3301      	adds	r3, #1
 800d35e:	429a      	cmp	r2, r3
 800d360:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d364:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d368:	fbb2 f6f3 	udiv	r6, r2, r3
 800d36c:	d331      	bcc.n	800d3d2 <quorem+0x9e>
 800d36e:	f04f 0e00 	mov.w	lr, #0
 800d372:	4640      	mov	r0, r8
 800d374:	46ac      	mov	ip, r5
 800d376:	46f2      	mov	sl, lr
 800d378:	f850 2b04 	ldr.w	r2, [r0], #4
 800d37c:	b293      	uxth	r3, r2
 800d37e:	fb06 e303 	mla	r3, r6, r3, lr
 800d382:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d386:	b29b      	uxth	r3, r3
 800d388:	ebaa 0303 	sub.w	r3, sl, r3
 800d38c:	f8dc a000 	ldr.w	sl, [ip]
 800d390:	0c12      	lsrs	r2, r2, #16
 800d392:	fa13 f38a 	uxtah	r3, r3, sl
 800d396:	fb06 e202 	mla	r2, r6, r2, lr
 800d39a:	9300      	str	r3, [sp, #0]
 800d39c:	9b00      	ldr	r3, [sp, #0]
 800d39e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d3a2:	b292      	uxth	r2, r2
 800d3a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d3a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d3ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800d3b0:	4581      	cmp	r9, r0
 800d3b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3b6:	f84c 3b04 	str.w	r3, [ip], #4
 800d3ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d3be:	d2db      	bcs.n	800d378 <quorem+0x44>
 800d3c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800d3c4:	b92b      	cbnz	r3, 800d3d2 <quorem+0x9e>
 800d3c6:	9b01      	ldr	r3, [sp, #4]
 800d3c8:	3b04      	subs	r3, #4
 800d3ca:	429d      	cmp	r5, r3
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	d32e      	bcc.n	800d42e <quorem+0xfa>
 800d3d0:	613c      	str	r4, [r7, #16]
 800d3d2:	4638      	mov	r0, r7
 800d3d4:	f001 f8bc 	bl	800e550 <__mcmp>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	db24      	blt.n	800d426 <quorem+0xf2>
 800d3dc:	3601      	adds	r6, #1
 800d3de:	4628      	mov	r0, r5
 800d3e0:	f04f 0c00 	mov.w	ip, #0
 800d3e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d3e8:	f8d0 e000 	ldr.w	lr, [r0]
 800d3ec:	b293      	uxth	r3, r2
 800d3ee:	ebac 0303 	sub.w	r3, ip, r3
 800d3f2:	0c12      	lsrs	r2, r2, #16
 800d3f4:	fa13 f38e 	uxtah	r3, r3, lr
 800d3f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d3fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d400:	b29b      	uxth	r3, r3
 800d402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d406:	45c1      	cmp	r9, r8
 800d408:	f840 3b04 	str.w	r3, [r0], #4
 800d40c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d410:	d2e8      	bcs.n	800d3e4 <quorem+0xb0>
 800d412:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d416:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d41a:	b922      	cbnz	r2, 800d426 <quorem+0xf2>
 800d41c:	3b04      	subs	r3, #4
 800d41e:	429d      	cmp	r5, r3
 800d420:	461a      	mov	r2, r3
 800d422:	d30a      	bcc.n	800d43a <quorem+0x106>
 800d424:	613c      	str	r4, [r7, #16]
 800d426:	4630      	mov	r0, r6
 800d428:	b003      	add	sp, #12
 800d42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42e:	6812      	ldr	r2, [r2, #0]
 800d430:	3b04      	subs	r3, #4
 800d432:	2a00      	cmp	r2, #0
 800d434:	d1cc      	bne.n	800d3d0 <quorem+0x9c>
 800d436:	3c01      	subs	r4, #1
 800d438:	e7c7      	b.n	800d3ca <quorem+0x96>
 800d43a:	6812      	ldr	r2, [r2, #0]
 800d43c:	3b04      	subs	r3, #4
 800d43e:	2a00      	cmp	r2, #0
 800d440:	d1f0      	bne.n	800d424 <quorem+0xf0>
 800d442:	3c01      	subs	r4, #1
 800d444:	e7eb      	b.n	800d41e <quorem+0xea>
 800d446:	2000      	movs	r0, #0
 800d448:	e7ee      	b.n	800d428 <quorem+0xf4>
 800d44a:	0000      	movs	r0, r0
 800d44c:	0000      	movs	r0, r0
	...

0800d450 <_dtoa_r>:
 800d450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d454:	ed2d 8b04 	vpush	{d8-d9}
 800d458:	ec57 6b10 	vmov	r6, r7, d0
 800d45c:	b093      	sub	sp, #76	; 0x4c
 800d45e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d460:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d464:	9106      	str	r1, [sp, #24]
 800d466:	ee10 aa10 	vmov	sl, s0
 800d46a:	4604      	mov	r4, r0
 800d46c:	9209      	str	r2, [sp, #36]	; 0x24
 800d46e:	930c      	str	r3, [sp, #48]	; 0x30
 800d470:	46bb      	mov	fp, r7
 800d472:	b975      	cbnz	r5, 800d492 <_dtoa_r+0x42>
 800d474:	2010      	movs	r0, #16
 800d476:	f7ff f97f 	bl	800c778 <malloc>
 800d47a:	4602      	mov	r2, r0
 800d47c:	6260      	str	r0, [r4, #36]	; 0x24
 800d47e:	b920      	cbnz	r0, 800d48a <_dtoa_r+0x3a>
 800d480:	4ba7      	ldr	r3, [pc, #668]	; (800d720 <_dtoa_r+0x2d0>)
 800d482:	21ea      	movs	r1, #234	; 0xea
 800d484:	48a7      	ldr	r0, [pc, #668]	; (800d724 <_dtoa_r+0x2d4>)
 800d486:	f001 f97b 	bl	800e780 <__assert_func>
 800d48a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d48e:	6005      	str	r5, [r0, #0]
 800d490:	60c5      	str	r5, [r0, #12]
 800d492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d494:	6819      	ldr	r1, [r3, #0]
 800d496:	b151      	cbz	r1, 800d4ae <_dtoa_r+0x5e>
 800d498:	685a      	ldr	r2, [r3, #4]
 800d49a:	604a      	str	r2, [r1, #4]
 800d49c:	2301      	movs	r3, #1
 800d49e:	4093      	lsls	r3, r2
 800d4a0:	608b      	str	r3, [r1, #8]
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f000 fe12 	bl	800e0cc <_Bfree>
 800d4a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	601a      	str	r2, [r3, #0]
 800d4ae:	1e3b      	subs	r3, r7, #0
 800d4b0:	bfaa      	itet	ge
 800d4b2:	2300      	movge	r3, #0
 800d4b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d4b8:	f8c8 3000 	strge.w	r3, [r8]
 800d4bc:	4b9a      	ldr	r3, [pc, #616]	; (800d728 <_dtoa_r+0x2d8>)
 800d4be:	bfbc      	itt	lt
 800d4c0:	2201      	movlt	r2, #1
 800d4c2:	f8c8 2000 	strlt.w	r2, [r8]
 800d4c6:	ea33 030b 	bics.w	r3, r3, fp
 800d4ca:	d11b      	bne.n	800d504 <_dtoa_r+0xb4>
 800d4cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800d4d2:	6013      	str	r3, [r2, #0]
 800d4d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4d8:	4333      	orrs	r3, r6
 800d4da:	f000 8592 	beq.w	800e002 <_dtoa_r+0xbb2>
 800d4de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4e0:	b963      	cbnz	r3, 800d4fc <_dtoa_r+0xac>
 800d4e2:	4b92      	ldr	r3, [pc, #584]	; (800d72c <_dtoa_r+0x2dc>)
 800d4e4:	e022      	b.n	800d52c <_dtoa_r+0xdc>
 800d4e6:	4b92      	ldr	r3, [pc, #584]	; (800d730 <_dtoa_r+0x2e0>)
 800d4e8:	9301      	str	r3, [sp, #4]
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d4ee:	6013      	str	r3, [r2, #0]
 800d4f0:	9801      	ldr	r0, [sp, #4]
 800d4f2:	b013      	add	sp, #76	; 0x4c
 800d4f4:	ecbd 8b04 	vpop	{d8-d9}
 800d4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fc:	4b8b      	ldr	r3, [pc, #556]	; (800d72c <_dtoa_r+0x2dc>)
 800d4fe:	9301      	str	r3, [sp, #4]
 800d500:	3303      	adds	r3, #3
 800d502:	e7f3      	b.n	800d4ec <_dtoa_r+0x9c>
 800d504:	2200      	movs	r2, #0
 800d506:	2300      	movs	r3, #0
 800d508:	4650      	mov	r0, sl
 800d50a:	4659      	mov	r1, fp
 800d50c:	f7f3 fae4 	bl	8000ad8 <__aeabi_dcmpeq>
 800d510:	ec4b ab19 	vmov	d9, sl, fp
 800d514:	4680      	mov	r8, r0
 800d516:	b158      	cbz	r0, 800d530 <_dtoa_r+0xe0>
 800d518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d51a:	2301      	movs	r3, #1
 800d51c:	6013      	str	r3, [r2, #0]
 800d51e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d520:	2b00      	cmp	r3, #0
 800d522:	f000 856b 	beq.w	800dffc <_dtoa_r+0xbac>
 800d526:	4883      	ldr	r0, [pc, #524]	; (800d734 <_dtoa_r+0x2e4>)
 800d528:	6018      	str	r0, [r3, #0]
 800d52a:	1e43      	subs	r3, r0, #1
 800d52c:	9301      	str	r3, [sp, #4]
 800d52e:	e7df      	b.n	800d4f0 <_dtoa_r+0xa0>
 800d530:	ec4b ab10 	vmov	d0, sl, fp
 800d534:	aa10      	add	r2, sp, #64	; 0x40
 800d536:	a911      	add	r1, sp, #68	; 0x44
 800d538:	4620      	mov	r0, r4
 800d53a:	f001 f8af 	bl	800e69c <__d2b>
 800d53e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d542:	ee08 0a10 	vmov	s16, r0
 800d546:	2d00      	cmp	r5, #0
 800d548:	f000 8084 	beq.w	800d654 <_dtoa_r+0x204>
 800d54c:	ee19 3a90 	vmov	r3, s19
 800d550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d554:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d558:	4656      	mov	r6, sl
 800d55a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d55e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d562:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d566:	4b74      	ldr	r3, [pc, #464]	; (800d738 <_dtoa_r+0x2e8>)
 800d568:	2200      	movs	r2, #0
 800d56a:	4630      	mov	r0, r6
 800d56c:	4639      	mov	r1, r7
 800d56e:	f7f2 fe93 	bl	8000298 <__aeabi_dsub>
 800d572:	a365      	add	r3, pc, #404	; (adr r3, 800d708 <_dtoa_r+0x2b8>)
 800d574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d578:	f7f3 f846 	bl	8000608 <__aeabi_dmul>
 800d57c:	a364      	add	r3, pc, #400	; (adr r3, 800d710 <_dtoa_r+0x2c0>)
 800d57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d582:	f7f2 fe8b 	bl	800029c <__adddf3>
 800d586:	4606      	mov	r6, r0
 800d588:	4628      	mov	r0, r5
 800d58a:	460f      	mov	r7, r1
 800d58c:	f7f2 ffd2 	bl	8000534 <__aeabi_i2d>
 800d590:	a361      	add	r3, pc, #388	; (adr r3, 800d718 <_dtoa_r+0x2c8>)
 800d592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d596:	f7f3 f837 	bl	8000608 <__aeabi_dmul>
 800d59a:	4602      	mov	r2, r0
 800d59c:	460b      	mov	r3, r1
 800d59e:	4630      	mov	r0, r6
 800d5a0:	4639      	mov	r1, r7
 800d5a2:	f7f2 fe7b 	bl	800029c <__adddf3>
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	460f      	mov	r7, r1
 800d5aa:	f7f3 fadd 	bl	8000b68 <__aeabi_d2iz>
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	9000      	str	r0, [sp, #0]
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	4639      	mov	r1, r7
 800d5b8:	f7f3 fa98 	bl	8000aec <__aeabi_dcmplt>
 800d5bc:	b150      	cbz	r0, 800d5d4 <_dtoa_r+0x184>
 800d5be:	9800      	ldr	r0, [sp, #0]
 800d5c0:	f7f2 ffb8 	bl	8000534 <__aeabi_i2d>
 800d5c4:	4632      	mov	r2, r6
 800d5c6:	463b      	mov	r3, r7
 800d5c8:	f7f3 fa86 	bl	8000ad8 <__aeabi_dcmpeq>
 800d5cc:	b910      	cbnz	r0, 800d5d4 <_dtoa_r+0x184>
 800d5ce:	9b00      	ldr	r3, [sp, #0]
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	9b00      	ldr	r3, [sp, #0]
 800d5d6:	2b16      	cmp	r3, #22
 800d5d8:	d85a      	bhi.n	800d690 <_dtoa_r+0x240>
 800d5da:	9a00      	ldr	r2, [sp, #0]
 800d5dc:	4b57      	ldr	r3, [pc, #348]	; (800d73c <_dtoa_r+0x2ec>)
 800d5de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e6:	ec51 0b19 	vmov	r0, r1, d9
 800d5ea:	f7f3 fa7f 	bl	8000aec <__aeabi_dcmplt>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d050      	beq.n	800d694 <_dtoa_r+0x244>
 800d5f2:	9b00      	ldr	r3, [sp, #0]
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5fe:	1b5d      	subs	r5, r3, r5
 800d600:	1e6b      	subs	r3, r5, #1
 800d602:	9305      	str	r3, [sp, #20]
 800d604:	bf45      	ittet	mi
 800d606:	f1c5 0301 	rsbmi	r3, r5, #1
 800d60a:	9304      	strmi	r3, [sp, #16]
 800d60c:	2300      	movpl	r3, #0
 800d60e:	2300      	movmi	r3, #0
 800d610:	bf4c      	ite	mi
 800d612:	9305      	strmi	r3, [sp, #20]
 800d614:	9304      	strpl	r3, [sp, #16]
 800d616:	9b00      	ldr	r3, [sp, #0]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	db3d      	blt.n	800d698 <_dtoa_r+0x248>
 800d61c:	9b05      	ldr	r3, [sp, #20]
 800d61e:	9a00      	ldr	r2, [sp, #0]
 800d620:	920a      	str	r2, [sp, #40]	; 0x28
 800d622:	4413      	add	r3, r2
 800d624:	9305      	str	r3, [sp, #20]
 800d626:	2300      	movs	r3, #0
 800d628:	9307      	str	r3, [sp, #28]
 800d62a:	9b06      	ldr	r3, [sp, #24]
 800d62c:	2b09      	cmp	r3, #9
 800d62e:	f200 8089 	bhi.w	800d744 <_dtoa_r+0x2f4>
 800d632:	2b05      	cmp	r3, #5
 800d634:	bfc4      	itt	gt
 800d636:	3b04      	subgt	r3, #4
 800d638:	9306      	strgt	r3, [sp, #24]
 800d63a:	9b06      	ldr	r3, [sp, #24]
 800d63c:	f1a3 0302 	sub.w	r3, r3, #2
 800d640:	bfcc      	ite	gt
 800d642:	2500      	movgt	r5, #0
 800d644:	2501      	movle	r5, #1
 800d646:	2b03      	cmp	r3, #3
 800d648:	f200 8087 	bhi.w	800d75a <_dtoa_r+0x30a>
 800d64c:	e8df f003 	tbb	[pc, r3]
 800d650:	59383a2d 	.word	0x59383a2d
 800d654:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d658:	441d      	add	r5, r3
 800d65a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d65e:	2b20      	cmp	r3, #32
 800d660:	bfc1      	itttt	gt
 800d662:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d666:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d66a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d66e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d672:	bfda      	itte	le
 800d674:	f1c3 0320 	rsble	r3, r3, #32
 800d678:	fa06 f003 	lslle.w	r0, r6, r3
 800d67c:	4318      	orrgt	r0, r3
 800d67e:	f7f2 ff49 	bl	8000514 <__aeabi_ui2d>
 800d682:	2301      	movs	r3, #1
 800d684:	4606      	mov	r6, r0
 800d686:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d68a:	3d01      	subs	r5, #1
 800d68c:	930e      	str	r3, [sp, #56]	; 0x38
 800d68e:	e76a      	b.n	800d566 <_dtoa_r+0x116>
 800d690:	2301      	movs	r3, #1
 800d692:	e7b2      	b.n	800d5fa <_dtoa_r+0x1aa>
 800d694:	900b      	str	r0, [sp, #44]	; 0x2c
 800d696:	e7b1      	b.n	800d5fc <_dtoa_r+0x1ac>
 800d698:	9b04      	ldr	r3, [sp, #16]
 800d69a:	9a00      	ldr	r2, [sp, #0]
 800d69c:	1a9b      	subs	r3, r3, r2
 800d69e:	9304      	str	r3, [sp, #16]
 800d6a0:	4253      	negs	r3, r2
 800d6a2:	9307      	str	r3, [sp, #28]
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d6a8:	e7bf      	b.n	800d62a <_dtoa_r+0x1da>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	9308      	str	r3, [sp, #32]
 800d6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	dc55      	bgt.n	800d760 <_dtoa_r+0x310>
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d6be:	e00c      	b.n	800d6da <_dtoa_r+0x28a>
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	e7f3      	b.n	800d6ac <_dtoa_r+0x25c>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6c8:	9308      	str	r3, [sp, #32]
 800d6ca:	9b00      	ldr	r3, [sp, #0]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	9302      	str	r3, [sp, #8]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	9303      	str	r3, [sp, #12]
 800d6d6:	bfb8      	it	lt
 800d6d8:	2301      	movlt	r3, #1
 800d6da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d6dc:	2200      	movs	r2, #0
 800d6de:	6042      	str	r2, [r0, #4]
 800d6e0:	2204      	movs	r2, #4
 800d6e2:	f102 0614 	add.w	r6, r2, #20
 800d6e6:	429e      	cmp	r6, r3
 800d6e8:	6841      	ldr	r1, [r0, #4]
 800d6ea:	d93d      	bls.n	800d768 <_dtoa_r+0x318>
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f000 fcad 	bl	800e04c <_Balloc>
 800d6f2:	9001      	str	r0, [sp, #4]
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d13b      	bne.n	800d770 <_dtoa_r+0x320>
 800d6f8:	4b11      	ldr	r3, [pc, #68]	; (800d740 <_dtoa_r+0x2f0>)
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d700:	e6c0      	b.n	800d484 <_dtoa_r+0x34>
 800d702:	2301      	movs	r3, #1
 800d704:	e7df      	b.n	800d6c6 <_dtoa_r+0x276>
 800d706:	bf00      	nop
 800d708:	636f4361 	.word	0x636f4361
 800d70c:	3fd287a7 	.word	0x3fd287a7
 800d710:	8b60c8b3 	.word	0x8b60c8b3
 800d714:	3fc68a28 	.word	0x3fc68a28
 800d718:	509f79fb 	.word	0x509f79fb
 800d71c:	3fd34413 	.word	0x3fd34413
 800d720:	0800f6cd 	.word	0x0800f6cd
 800d724:	0800f6e4 	.word	0x0800f6e4
 800d728:	7ff00000 	.word	0x7ff00000
 800d72c:	0800f6c9 	.word	0x0800f6c9
 800d730:	0800f6c0 	.word	0x0800f6c0
 800d734:	0800f69d 	.word	0x0800f69d
 800d738:	3ff80000 	.word	0x3ff80000
 800d73c:	0800f7d8 	.word	0x0800f7d8
 800d740:	0800f73f 	.word	0x0800f73f
 800d744:	2501      	movs	r5, #1
 800d746:	2300      	movs	r3, #0
 800d748:	9306      	str	r3, [sp, #24]
 800d74a:	9508      	str	r5, [sp, #32]
 800d74c:	f04f 33ff 	mov.w	r3, #4294967295
 800d750:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d754:	2200      	movs	r2, #0
 800d756:	2312      	movs	r3, #18
 800d758:	e7b0      	b.n	800d6bc <_dtoa_r+0x26c>
 800d75a:	2301      	movs	r3, #1
 800d75c:	9308      	str	r3, [sp, #32]
 800d75e:	e7f5      	b.n	800d74c <_dtoa_r+0x2fc>
 800d760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d762:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d766:	e7b8      	b.n	800d6da <_dtoa_r+0x28a>
 800d768:	3101      	adds	r1, #1
 800d76a:	6041      	str	r1, [r0, #4]
 800d76c:	0052      	lsls	r2, r2, #1
 800d76e:	e7b8      	b.n	800d6e2 <_dtoa_r+0x292>
 800d770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d772:	9a01      	ldr	r2, [sp, #4]
 800d774:	601a      	str	r2, [r3, #0]
 800d776:	9b03      	ldr	r3, [sp, #12]
 800d778:	2b0e      	cmp	r3, #14
 800d77a:	f200 809d 	bhi.w	800d8b8 <_dtoa_r+0x468>
 800d77e:	2d00      	cmp	r5, #0
 800d780:	f000 809a 	beq.w	800d8b8 <_dtoa_r+0x468>
 800d784:	9b00      	ldr	r3, [sp, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	dd32      	ble.n	800d7f0 <_dtoa_r+0x3a0>
 800d78a:	4ab7      	ldr	r2, [pc, #732]	; (800da68 <_dtoa_r+0x618>)
 800d78c:	f003 030f 	and.w	r3, r3, #15
 800d790:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d794:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d798:	9b00      	ldr	r3, [sp, #0]
 800d79a:	05d8      	lsls	r0, r3, #23
 800d79c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d7a0:	d516      	bpl.n	800d7d0 <_dtoa_r+0x380>
 800d7a2:	4bb2      	ldr	r3, [pc, #712]	; (800da6c <_dtoa_r+0x61c>)
 800d7a4:	ec51 0b19 	vmov	r0, r1, d9
 800d7a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7ac:	f7f3 f856 	bl	800085c <__aeabi_ddiv>
 800d7b0:	f007 070f 	and.w	r7, r7, #15
 800d7b4:	4682      	mov	sl, r0
 800d7b6:	468b      	mov	fp, r1
 800d7b8:	2503      	movs	r5, #3
 800d7ba:	4eac      	ldr	r6, [pc, #688]	; (800da6c <_dtoa_r+0x61c>)
 800d7bc:	b957      	cbnz	r7, 800d7d4 <_dtoa_r+0x384>
 800d7be:	4642      	mov	r2, r8
 800d7c0:	464b      	mov	r3, r9
 800d7c2:	4650      	mov	r0, sl
 800d7c4:	4659      	mov	r1, fp
 800d7c6:	f7f3 f849 	bl	800085c <__aeabi_ddiv>
 800d7ca:	4682      	mov	sl, r0
 800d7cc:	468b      	mov	fp, r1
 800d7ce:	e028      	b.n	800d822 <_dtoa_r+0x3d2>
 800d7d0:	2502      	movs	r5, #2
 800d7d2:	e7f2      	b.n	800d7ba <_dtoa_r+0x36a>
 800d7d4:	07f9      	lsls	r1, r7, #31
 800d7d6:	d508      	bpl.n	800d7ea <_dtoa_r+0x39a>
 800d7d8:	4640      	mov	r0, r8
 800d7da:	4649      	mov	r1, r9
 800d7dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d7e0:	f7f2 ff12 	bl	8000608 <__aeabi_dmul>
 800d7e4:	3501      	adds	r5, #1
 800d7e6:	4680      	mov	r8, r0
 800d7e8:	4689      	mov	r9, r1
 800d7ea:	107f      	asrs	r7, r7, #1
 800d7ec:	3608      	adds	r6, #8
 800d7ee:	e7e5      	b.n	800d7bc <_dtoa_r+0x36c>
 800d7f0:	f000 809b 	beq.w	800d92a <_dtoa_r+0x4da>
 800d7f4:	9b00      	ldr	r3, [sp, #0]
 800d7f6:	4f9d      	ldr	r7, [pc, #628]	; (800da6c <_dtoa_r+0x61c>)
 800d7f8:	425e      	negs	r6, r3
 800d7fa:	4b9b      	ldr	r3, [pc, #620]	; (800da68 <_dtoa_r+0x618>)
 800d7fc:	f006 020f 	and.w	r2, r6, #15
 800d800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d808:	ec51 0b19 	vmov	r0, r1, d9
 800d80c:	f7f2 fefc 	bl	8000608 <__aeabi_dmul>
 800d810:	1136      	asrs	r6, r6, #4
 800d812:	4682      	mov	sl, r0
 800d814:	468b      	mov	fp, r1
 800d816:	2300      	movs	r3, #0
 800d818:	2502      	movs	r5, #2
 800d81a:	2e00      	cmp	r6, #0
 800d81c:	d17a      	bne.n	800d914 <_dtoa_r+0x4c4>
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d1d3      	bne.n	800d7ca <_dtoa_r+0x37a>
 800d822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 8082 	beq.w	800d92e <_dtoa_r+0x4de>
 800d82a:	4b91      	ldr	r3, [pc, #580]	; (800da70 <_dtoa_r+0x620>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	4650      	mov	r0, sl
 800d830:	4659      	mov	r1, fp
 800d832:	f7f3 f95b 	bl	8000aec <__aeabi_dcmplt>
 800d836:	2800      	cmp	r0, #0
 800d838:	d079      	beq.n	800d92e <_dtoa_r+0x4de>
 800d83a:	9b03      	ldr	r3, [sp, #12]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d076      	beq.n	800d92e <_dtoa_r+0x4de>
 800d840:	9b02      	ldr	r3, [sp, #8]
 800d842:	2b00      	cmp	r3, #0
 800d844:	dd36      	ble.n	800d8b4 <_dtoa_r+0x464>
 800d846:	9b00      	ldr	r3, [sp, #0]
 800d848:	4650      	mov	r0, sl
 800d84a:	4659      	mov	r1, fp
 800d84c:	1e5f      	subs	r7, r3, #1
 800d84e:	2200      	movs	r2, #0
 800d850:	4b88      	ldr	r3, [pc, #544]	; (800da74 <_dtoa_r+0x624>)
 800d852:	f7f2 fed9 	bl	8000608 <__aeabi_dmul>
 800d856:	9e02      	ldr	r6, [sp, #8]
 800d858:	4682      	mov	sl, r0
 800d85a:	468b      	mov	fp, r1
 800d85c:	3501      	adds	r5, #1
 800d85e:	4628      	mov	r0, r5
 800d860:	f7f2 fe68 	bl	8000534 <__aeabi_i2d>
 800d864:	4652      	mov	r2, sl
 800d866:	465b      	mov	r3, fp
 800d868:	f7f2 fece 	bl	8000608 <__aeabi_dmul>
 800d86c:	4b82      	ldr	r3, [pc, #520]	; (800da78 <_dtoa_r+0x628>)
 800d86e:	2200      	movs	r2, #0
 800d870:	f7f2 fd14 	bl	800029c <__adddf3>
 800d874:	46d0      	mov	r8, sl
 800d876:	46d9      	mov	r9, fp
 800d878:	4682      	mov	sl, r0
 800d87a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d87e:	2e00      	cmp	r6, #0
 800d880:	d158      	bne.n	800d934 <_dtoa_r+0x4e4>
 800d882:	4b7e      	ldr	r3, [pc, #504]	; (800da7c <_dtoa_r+0x62c>)
 800d884:	2200      	movs	r2, #0
 800d886:	4640      	mov	r0, r8
 800d888:	4649      	mov	r1, r9
 800d88a:	f7f2 fd05 	bl	8000298 <__aeabi_dsub>
 800d88e:	4652      	mov	r2, sl
 800d890:	465b      	mov	r3, fp
 800d892:	4680      	mov	r8, r0
 800d894:	4689      	mov	r9, r1
 800d896:	f7f3 f947 	bl	8000b28 <__aeabi_dcmpgt>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	f040 8295 	bne.w	800ddca <_dtoa_r+0x97a>
 800d8a0:	4652      	mov	r2, sl
 800d8a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d8a6:	4640      	mov	r0, r8
 800d8a8:	4649      	mov	r1, r9
 800d8aa:	f7f3 f91f 	bl	8000aec <__aeabi_dcmplt>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	f040 8289 	bne.w	800ddc6 <_dtoa_r+0x976>
 800d8b4:	ec5b ab19 	vmov	sl, fp, d9
 800d8b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	f2c0 8148 	blt.w	800db50 <_dtoa_r+0x700>
 800d8c0:	9a00      	ldr	r2, [sp, #0]
 800d8c2:	2a0e      	cmp	r2, #14
 800d8c4:	f300 8144 	bgt.w	800db50 <_dtoa_r+0x700>
 800d8c8:	4b67      	ldr	r3, [pc, #412]	; (800da68 <_dtoa_r+0x618>)
 800d8ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f280 80d5 	bge.w	800da84 <_dtoa_r+0x634>
 800d8da:	9b03      	ldr	r3, [sp, #12]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f300 80d1 	bgt.w	800da84 <_dtoa_r+0x634>
 800d8e2:	f040 826f 	bne.w	800ddc4 <_dtoa_r+0x974>
 800d8e6:	4b65      	ldr	r3, [pc, #404]	; (800da7c <_dtoa_r+0x62c>)
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	4640      	mov	r0, r8
 800d8ec:	4649      	mov	r1, r9
 800d8ee:	f7f2 fe8b 	bl	8000608 <__aeabi_dmul>
 800d8f2:	4652      	mov	r2, sl
 800d8f4:	465b      	mov	r3, fp
 800d8f6:	f7f3 f90d 	bl	8000b14 <__aeabi_dcmpge>
 800d8fa:	9e03      	ldr	r6, [sp, #12]
 800d8fc:	4637      	mov	r7, r6
 800d8fe:	2800      	cmp	r0, #0
 800d900:	f040 8245 	bne.w	800dd8e <_dtoa_r+0x93e>
 800d904:	9d01      	ldr	r5, [sp, #4]
 800d906:	2331      	movs	r3, #49	; 0x31
 800d908:	f805 3b01 	strb.w	r3, [r5], #1
 800d90c:	9b00      	ldr	r3, [sp, #0]
 800d90e:	3301      	adds	r3, #1
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	e240      	b.n	800dd96 <_dtoa_r+0x946>
 800d914:	07f2      	lsls	r2, r6, #31
 800d916:	d505      	bpl.n	800d924 <_dtoa_r+0x4d4>
 800d918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d91c:	f7f2 fe74 	bl	8000608 <__aeabi_dmul>
 800d920:	3501      	adds	r5, #1
 800d922:	2301      	movs	r3, #1
 800d924:	1076      	asrs	r6, r6, #1
 800d926:	3708      	adds	r7, #8
 800d928:	e777      	b.n	800d81a <_dtoa_r+0x3ca>
 800d92a:	2502      	movs	r5, #2
 800d92c:	e779      	b.n	800d822 <_dtoa_r+0x3d2>
 800d92e:	9f00      	ldr	r7, [sp, #0]
 800d930:	9e03      	ldr	r6, [sp, #12]
 800d932:	e794      	b.n	800d85e <_dtoa_r+0x40e>
 800d934:	9901      	ldr	r1, [sp, #4]
 800d936:	4b4c      	ldr	r3, [pc, #304]	; (800da68 <_dtoa_r+0x618>)
 800d938:	4431      	add	r1, r6
 800d93a:	910d      	str	r1, [sp, #52]	; 0x34
 800d93c:	9908      	ldr	r1, [sp, #32]
 800d93e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d942:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d946:	2900      	cmp	r1, #0
 800d948:	d043      	beq.n	800d9d2 <_dtoa_r+0x582>
 800d94a:	494d      	ldr	r1, [pc, #308]	; (800da80 <_dtoa_r+0x630>)
 800d94c:	2000      	movs	r0, #0
 800d94e:	f7f2 ff85 	bl	800085c <__aeabi_ddiv>
 800d952:	4652      	mov	r2, sl
 800d954:	465b      	mov	r3, fp
 800d956:	f7f2 fc9f 	bl	8000298 <__aeabi_dsub>
 800d95a:	9d01      	ldr	r5, [sp, #4]
 800d95c:	4682      	mov	sl, r0
 800d95e:	468b      	mov	fp, r1
 800d960:	4649      	mov	r1, r9
 800d962:	4640      	mov	r0, r8
 800d964:	f7f3 f900 	bl	8000b68 <__aeabi_d2iz>
 800d968:	4606      	mov	r6, r0
 800d96a:	f7f2 fde3 	bl	8000534 <__aeabi_i2d>
 800d96e:	4602      	mov	r2, r0
 800d970:	460b      	mov	r3, r1
 800d972:	4640      	mov	r0, r8
 800d974:	4649      	mov	r1, r9
 800d976:	f7f2 fc8f 	bl	8000298 <__aeabi_dsub>
 800d97a:	3630      	adds	r6, #48	; 0x30
 800d97c:	f805 6b01 	strb.w	r6, [r5], #1
 800d980:	4652      	mov	r2, sl
 800d982:	465b      	mov	r3, fp
 800d984:	4680      	mov	r8, r0
 800d986:	4689      	mov	r9, r1
 800d988:	f7f3 f8b0 	bl	8000aec <__aeabi_dcmplt>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d163      	bne.n	800da58 <_dtoa_r+0x608>
 800d990:	4642      	mov	r2, r8
 800d992:	464b      	mov	r3, r9
 800d994:	4936      	ldr	r1, [pc, #216]	; (800da70 <_dtoa_r+0x620>)
 800d996:	2000      	movs	r0, #0
 800d998:	f7f2 fc7e 	bl	8000298 <__aeabi_dsub>
 800d99c:	4652      	mov	r2, sl
 800d99e:	465b      	mov	r3, fp
 800d9a0:	f7f3 f8a4 	bl	8000aec <__aeabi_dcmplt>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	f040 80b5 	bne.w	800db14 <_dtoa_r+0x6c4>
 800d9aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9ac:	429d      	cmp	r5, r3
 800d9ae:	d081      	beq.n	800d8b4 <_dtoa_r+0x464>
 800d9b0:	4b30      	ldr	r3, [pc, #192]	; (800da74 <_dtoa_r+0x624>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	4650      	mov	r0, sl
 800d9b6:	4659      	mov	r1, fp
 800d9b8:	f7f2 fe26 	bl	8000608 <__aeabi_dmul>
 800d9bc:	4b2d      	ldr	r3, [pc, #180]	; (800da74 <_dtoa_r+0x624>)
 800d9be:	4682      	mov	sl, r0
 800d9c0:	468b      	mov	fp, r1
 800d9c2:	4640      	mov	r0, r8
 800d9c4:	4649      	mov	r1, r9
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f7f2 fe1e 	bl	8000608 <__aeabi_dmul>
 800d9cc:	4680      	mov	r8, r0
 800d9ce:	4689      	mov	r9, r1
 800d9d0:	e7c6      	b.n	800d960 <_dtoa_r+0x510>
 800d9d2:	4650      	mov	r0, sl
 800d9d4:	4659      	mov	r1, fp
 800d9d6:	f7f2 fe17 	bl	8000608 <__aeabi_dmul>
 800d9da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9dc:	9d01      	ldr	r5, [sp, #4]
 800d9de:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9e0:	4682      	mov	sl, r0
 800d9e2:	468b      	mov	fp, r1
 800d9e4:	4649      	mov	r1, r9
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	f7f3 f8be 	bl	8000b68 <__aeabi_d2iz>
 800d9ec:	4606      	mov	r6, r0
 800d9ee:	f7f2 fda1 	bl	8000534 <__aeabi_i2d>
 800d9f2:	3630      	adds	r6, #48	; 0x30
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4640      	mov	r0, r8
 800d9fa:	4649      	mov	r1, r9
 800d9fc:	f7f2 fc4c 	bl	8000298 <__aeabi_dsub>
 800da00:	f805 6b01 	strb.w	r6, [r5], #1
 800da04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da06:	429d      	cmp	r5, r3
 800da08:	4680      	mov	r8, r0
 800da0a:	4689      	mov	r9, r1
 800da0c:	f04f 0200 	mov.w	r2, #0
 800da10:	d124      	bne.n	800da5c <_dtoa_r+0x60c>
 800da12:	4b1b      	ldr	r3, [pc, #108]	; (800da80 <_dtoa_r+0x630>)
 800da14:	4650      	mov	r0, sl
 800da16:	4659      	mov	r1, fp
 800da18:	f7f2 fc40 	bl	800029c <__adddf3>
 800da1c:	4602      	mov	r2, r0
 800da1e:	460b      	mov	r3, r1
 800da20:	4640      	mov	r0, r8
 800da22:	4649      	mov	r1, r9
 800da24:	f7f3 f880 	bl	8000b28 <__aeabi_dcmpgt>
 800da28:	2800      	cmp	r0, #0
 800da2a:	d173      	bne.n	800db14 <_dtoa_r+0x6c4>
 800da2c:	4652      	mov	r2, sl
 800da2e:	465b      	mov	r3, fp
 800da30:	4913      	ldr	r1, [pc, #76]	; (800da80 <_dtoa_r+0x630>)
 800da32:	2000      	movs	r0, #0
 800da34:	f7f2 fc30 	bl	8000298 <__aeabi_dsub>
 800da38:	4602      	mov	r2, r0
 800da3a:	460b      	mov	r3, r1
 800da3c:	4640      	mov	r0, r8
 800da3e:	4649      	mov	r1, r9
 800da40:	f7f3 f854 	bl	8000aec <__aeabi_dcmplt>
 800da44:	2800      	cmp	r0, #0
 800da46:	f43f af35 	beq.w	800d8b4 <_dtoa_r+0x464>
 800da4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800da4c:	1e6b      	subs	r3, r5, #1
 800da4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800da50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da54:	2b30      	cmp	r3, #48	; 0x30
 800da56:	d0f8      	beq.n	800da4a <_dtoa_r+0x5fa>
 800da58:	9700      	str	r7, [sp, #0]
 800da5a:	e049      	b.n	800daf0 <_dtoa_r+0x6a0>
 800da5c:	4b05      	ldr	r3, [pc, #20]	; (800da74 <_dtoa_r+0x624>)
 800da5e:	f7f2 fdd3 	bl	8000608 <__aeabi_dmul>
 800da62:	4680      	mov	r8, r0
 800da64:	4689      	mov	r9, r1
 800da66:	e7bd      	b.n	800d9e4 <_dtoa_r+0x594>
 800da68:	0800f7d8 	.word	0x0800f7d8
 800da6c:	0800f7b0 	.word	0x0800f7b0
 800da70:	3ff00000 	.word	0x3ff00000
 800da74:	40240000 	.word	0x40240000
 800da78:	401c0000 	.word	0x401c0000
 800da7c:	40140000 	.word	0x40140000
 800da80:	3fe00000 	.word	0x3fe00000
 800da84:	9d01      	ldr	r5, [sp, #4]
 800da86:	4656      	mov	r6, sl
 800da88:	465f      	mov	r7, fp
 800da8a:	4642      	mov	r2, r8
 800da8c:	464b      	mov	r3, r9
 800da8e:	4630      	mov	r0, r6
 800da90:	4639      	mov	r1, r7
 800da92:	f7f2 fee3 	bl	800085c <__aeabi_ddiv>
 800da96:	f7f3 f867 	bl	8000b68 <__aeabi_d2iz>
 800da9a:	4682      	mov	sl, r0
 800da9c:	f7f2 fd4a 	bl	8000534 <__aeabi_i2d>
 800daa0:	4642      	mov	r2, r8
 800daa2:	464b      	mov	r3, r9
 800daa4:	f7f2 fdb0 	bl	8000608 <__aeabi_dmul>
 800daa8:	4602      	mov	r2, r0
 800daaa:	460b      	mov	r3, r1
 800daac:	4630      	mov	r0, r6
 800daae:	4639      	mov	r1, r7
 800dab0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dab4:	f7f2 fbf0 	bl	8000298 <__aeabi_dsub>
 800dab8:	f805 6b01 	strb.w	r6, [r5], #1
 800dabc:	9e01      	ldr	r6, [sp, #4]
 800dabe:	9f03      	ldr	r7, [sp, #12]
 800dac0:	1bae      	subs	r6, r5, r6
 800dac2:	42b7      	cmp	r7, r6
 800dac4:	4602      	mov	r2, r0
 800dac6:	460b      	mov	r3, r1
 800dac8:	d135      	bne.n	800db36 <_dtoa_r+0x6e6>
 800daca:	f7f2 fbe7 	bl	800029c <__adddf3>
 800dace:	4642      	mov	r2, r8
 800dad0:	464b      	mov	r3, r9
 800dad2:	4606      	mov	r6, r0
 800dad4:	460f      	mov	r7, r1
 800dad6:	f7f3 f827 	bl	8000b28 <__aeabi_dcmpgt>
 800dada:	b9d0      	cbnz	r0, 800db12 <_dtoa_r+0x6c2>
 800dadc:	4642      	mov	r2, r8
 800dade:	464b      	mov	r3, r9
 800dae0:	4630      	mov	r0, r6
 800dae2:	4639      	mov	r1, r7
 800dae4:	f7f2 fff8 	bl	8000ad8 <__aeabi_dcmpeq>
 800dae8:	b110      	cbz	r0, 800daf0 <_dtoa_r+0x6a0>
 800daea:	f01a 0f01 	tst.w	sl, #1
 800daee:	d110      	bne.n	800db12 <_dtoa_r+0x6c2>
 800daf0:	4620      	mov	r0, r4
 800daf2:	ee18 1a10 	vmov	r1, s16
 800daf6:	f000 fae9 	bl	800e0cc <_Bfree>
 800dafa:	2300      	movs	r3, #0
 800dafc:	9800      	ldr	r0, [sp, #0]
 800dafe:	702b      	strb	r3, [r5, #0]
 800db00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db02:	3001      	adds	r0, #1
 800db04:	6018      	str	r0, [r3, #0]
 800db06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db08:	2b00      	cmp	r3, #0
 800db0a:	f43f acf1 	beq.w	800d4f0 <_dtoa_r+0xa0>
 800db0e:	601d      	str	r5, [r3, #0]
 800db10:	e4ee      	b.n	800d4f0 <_dtoa_r+0xa0>
 800db12:	9f00      	ldr	r7, [sp, #0]
 800db14:	462b      	mov	r3, r5
 800db16:	461d      	mov	r5, r3
 800db18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db1c:	2a39      	cmp	r2, #57	; 0x39
 800db1e:	d106      	bne.n	800db2e <_dtoa_r+0x6de>
 800db20:	9a01      	ldr	r2, [sp, #4]
 800db22:	429a      	cmp	r2, r3
 800db24:	d1f7      	bne.n	800db16 <_dtoa_r+0x6c6>
 800db26:	9901      	ldr	r1, [sp, #4]
 800db28:	2230      	movs	r2, #48	; 0x30
 800db2a:	3701      	adds	r7, #1
 800db2c:	700a      	strb	r2, [r1, #0]
 800db2e:	781a      	ldrb	r2, [r3, #0]
 800db30:	3201      	adds	r2, #1
 800db32:	701a      	strb	r2, [r3, #0]
 800db34:	e790      	b.n	800da58 <_dtoa_r+0x608>
 800db36:	4ba6      	ldr	r3, [pc, #664]	; (800ddd0 <_dtoa_r+0x980>)
 800db38:	2200      	movs	r2, #0
 800db3a:	f7f2 fd65 	bl	8000608 <__aeabi_dmul>
 800db3e:	2200      	movs	r2, #0
 800db40:	2300      	movs	r3, #0
 800db42:	4606      	mov	r6, r0
 800db44:	460f      	mov	r7, r1
 800db46:	f7f2 ffc7 	bl	8000ad8 <__aeabi_dcmpeq>
 800db4a:	2800      	cmp	r0, #0
 800db4c:	d09d      	beq.n	800da8a <_dtoa_r+0x63a>
 800db4e:	e7cf      	b.n	800daf0 <_dtoa_r+0x6a0>
 800db50:	9a08      	ldr	r2, [sp, #32]
 800db52:	2a00      	cmp	r2, #0
 800db54:	f000 80d7 	beq.w	800dd06 <_dtoa_r+0x8b6>
 800db58:	9a06      	ldr	r2, [sp, #24]
 800db5a:	2a01      	cmp	r2, #1
 800db5c:	f300 80ba 	bgt.w	800dcd4 <_dtoa_r+0x884>
 800db60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db62:	2a00      	cmp	r2, #0
 800db64:	f000 80b2 	beq.w	800dccc <_dtoa_r+0x87c>
 800db68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800db6c:	9e07      	ldr	r6, [sp, #28]
 800db6e:	9d04      	ldr	r5, [sp, #16]
 800db70:	9a04      	ldr	r2, [sp, #16]
 800db72:	441a      	add	r2, r3
 800db74:	9204      	str	r2, [sp, #16]
 800db76:	9a05      	ldr	r2, [sp, #20]
 800db78:	2101      	movs	r1, #1
 800db7a:	441a      	add	r2, r3
 800db7c:	4620      	mov	r0, r4
 800db7e:	9205      	str	r2, [sp, #20]
 800db80:	f000 fb5c 	bl	800e23c <__i2b>
 800db84:	4607      	mov	r7, r0
 800db86:	2d00      	cmp	r5, #0
 800db88:	dd0c      	ble.n	800dba4 <_dtoa_r+0x754>
 800db8a:	9b05      	ldr	r3, [sp, #20]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	dd09      	ble.n	800dba4 <_dtoa_r+0x754>
 800db90:	42ab      	cmp	r3, r5
 800db92:	9a04      	ldr	r2, [sp, #16]
 800db94:	bfa8      	it	ge
 800db96:	462b      	movge	r3, r5
 800db98:	1ad2      	subs	r2, r2, r3
 800db9a:	9204      	str	r2, [sp, #16]
 800db9c:	9a05      	ldr	r2, [sp, #20]
 800db9e:	1aed      	subs	r5, r5, r3
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	9305      	str	r3, [sp, #20]
 800dba4:	9b07      	ldr	r3, [sp, #28]
 800dba6:	b31b      	cbz	r3, 800dbf0 <_dtoa_r+0x7a0>
 800dba8:	9b08      	ldr	r3, [sp, #32]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	f000 80af 	beq.w	800dd0e <_dtoa_r+0x8be>
 800dbb0:	2e00      	cmp	r6, #0
 800dbb2:	dd13      	ble.n	800dbdc <_dtoa_r+0x78c>
 800dbb4:	4639      	mov	r1, r7
 800dbb6:	4632      	mov	r2, r6
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f000 fbff 	bl	800e3bc <__pow5mult>
 800dbbe:	ee18 2a10 	vmov	r2, s16
 800dbc2:	4601      	mov	r1, r0
 800dbc4:	4607      	mov	r7, r0
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f000 fb4e 	bl	800e268 <__multiply>
 800dbcc:	ee18 1a10 	vmov	r1, s16
 800dbd0:	4680      	mov	r8, r0
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f000 fa7a 	bl	800e0cc <_Bfree>
 800dbd8:	ee08 8a10 	vmov	s16, r8
 800dbdc:	9b07      	ldr	r3, [sp, #28]
 800dbde:	1b9a      	subs	r2, r3, r6
 800dbe0:	d006      	beq.n	800dbf0 <_dtoa_r+0x7a0>
 800dbe2:	ee18 1a10 	vmov	r1, s16
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	f000 fbe8 	bl	800e3bc <__pow5mult>
 800dbec:	ee08 0a10 	vmov	s16, r0
 800dbf0:	2101      	movs	r1, #1
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f000 fb22 	bl	800e23c <__i2b>
 800dbf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	f340 8088 	ble.w	800dd12 <_dtoa_r+0x8c2>
 800dc02:	461a      	mov	r2, r3
 800dc04:	4601      	mov	r1, r0
 800dc06:	4620      	mov	r0, r4
 800dc08:	f000 fbd8 	bl	800e3bc <__pow5mult>
 800dc0c:	9b06      	ldr	r3, [sp, #24]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	4606      	mov	r6, r0
 800dc12:	f340 8081 	ble.w	800dd18 <_dtoa_r+0x8c8>
 800dc16:	f04f 0800 	mov.w	r8, #0
 800dc1a:	6933      	ldr	r3, [r6, #16]
 800dc1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dc20:	6918      	ldr	r0, [r3, #16]
 800dc22:	f000 fabb 	bl	800e19c <__hi0bits>
 800dc26:	f1c0 0020 	rsb	r0, r0, #32
 800dc2a:	9b05      	ldr	r3, [sp, #20]
 800dc2c:	4418      	add	r0, r3
 800dc2e:	f010 001f 	ands.w	r0, r0, #31
 800dc32:	f000 8092 	beq.w	800dd5a <_dtoa_r+0x90a>
 800dc36:	f1c0 0320 	rsb	r3, r0, #32
 800dc3a:	2b04      	cmp	r3, #4
 800dc3c:	f340 808a 	ble.w	800dd54 <_dtoa_r+0x904>
 800dc40:	f1c0 001c 	rsb	r0, r0, #28
 800dc44:	9b04      	ldr	r3, [sp, #16]
 800dc46:	4403      	add	r3, r0
 800dc48:	9304      	str	r3, [sp, #16]
 800dc4a:	9b05      	ldr	r3, [sp, #20]
 800dc4c:	4403      	add	r3, r0
 800dc4e:	4405      	add	r5, r0
 800dc50:	9305      	str	r3, [sp, #20]
 800dc52:	9b04      	ldr	r3, [sp, #16]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	dd07      	ble.n	800dc68 <_dtoa_r+0x818>
 800dc58:	ee18 1a10 	vmov	r1, s16
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	4620      	mov	r0, r4
 800dc60:	f000 fc06 	bl	800e470 <__lshift>
 800dc64:	ee08 0a10 	vmov	s16, r0
 800dc68:	9b05      	ldr	r3, [sp, #20]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	dd05      	ble.n	800dc7a <_dtoa_r+0x82a>
 800dc6e:	4631      	mov	r1, r6
 800dc70:	461a      	mov	r2, r3
 800dc72:	4620      	mov	r0, r4
 800dc74:	f000 fbfc 	bl	800e470 <__lshift>
 800dc78:	4606      	mov	r6, r0
 800dc7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d06e      	beq.n	800dd5e <_dtoa_r+0x90e>
 800dc80:	ee18 0a10 	vmov	r0, s16
 800dc84:	4631      	mov	r1, r6
 800dc86:	f000 fc63 	bl	800e550 <__mcmp>
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	da67      	bge.n	800dd5e <_dtoa_r+0x90e>
 800dc8e:	9b00      	ldr	r3, [sp, #0]
 800dc90:	3b01      	subs	r3, #1
 800dc92:	ee18 1a10 	vmov	r1, s16
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	220a      	movs	r2, #10
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	f000 fa37 	bl	800e110 <__multadd>
 800dca2:	9b08      	ldr	r3, [sp, #32]
 800dca4:	ee08 0a10 	vmov	s16, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	f000 81b1 	beq.w	800e010 <_dtoa_r+0xbc0>
 800dcae:	2300      	movs	r3, #0
 800dcb0:	4639      	mov	r1, r7
 800dcb2:	220a      	movs	r2, #10
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f000 fa2b 	bl	800e110 <__multadd>
 800dcba:	9b02      	ldr	r3, [sp, #8]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	4607      	mov	r7, r0
 800dcc0:	f300 808e 	bgt.w	800dde0 <_dtoa_r+0x990>
 800dcc4:	9b06      	ldr	r3, [sp, #24]
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	dc51      	bgt.n	800dd6e <_dtoa_r+0x91e>
 800dcca:	e089      	b.n	800dde0 <_dtoa_r+0x990>
 800dccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dcce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dcd2:	e74b      	b.n	800db6c <_dtoa_r+0x71c>
 800dcd4:	9b03      	ldr	r3, [sp, #12]
 800dcd6:	1e5e      	subs	r6, r3, #1
 800dcd8:	9b07      	ldr	r3, [sp, #28]
 800dcda:	42b3      	cmp	r3, r6
 800dcdc:	bfbf      	itttt	lt
 800dcde:	9b07      	ldrlt	r3, [sp, #28]
 800dce0:	9607      	strlt	r6, [sp, #28]
 800dce2:	1af2      	sublt	r2, r6, r3
 800dce4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dce6:	bfb6      	itet	lt
 800dce8:	189b      	addlt	r3, r3, r2
 800dcea:	1b9e      	subge	r6, r3, r6
 800dcec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dcee:	9b03      	ldr	r3, [sp, #12]
 800dcf0:	bfb8      	it	lt
 800dcf2:	2600      	movlt	r6, #0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	bfb7      	itett	lt
 800dcf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dcfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dd00:	1a9d      	sublt	r5, r3, r2
 800dd02:	2300      	movlt	r3, #0
 800dd04:	e734      	b.n	800db70 <_dtoa_r+0x720>
 800dd06:	9e07      	ldr	r6, [sp, #28]
 800dd08:	9d04      	ldr	r5, [sp, #16]
 800dd0a:	9f08      	ldr	r7, [sp, #32]
 800dd0c:	e73b      	b.n	800db86 <_dtoa_r+0x736>
 800dd0e:	9a07      	ldr	r2, [sp, #28]
 800dd10:	e767      	b.n	800dbe2 <_dtoa_r+0x792>
 800dd12:	9b06      	ldr	r3, [sp, #24]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	dc18      	bgt.n	800dd4a <_dtoa_r+0x8fa>
 800dd18:	f1ba 0f00 	cmp.w	sl, #0
 800dd1c:	d115      	bne.n	800dd4a <_dtoa_r+0x8fa>
 800dd1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd22:	b993      	cbnz	r3, 800dd4a <_dtoa_r+0x8fa>
 800dd24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd28:	0d1b      	lsrs	r3, r3, #20
 800dd2a:	051b      	lsls	r3, r3, #20
 800dd2c:	b183      	cbz	r3, 800dd50 <_dtoa_r+0x900>
 800dd2e:	9b04      	ldr	r3, [sp, #16]
 800dd30:	3301      	adds	r3, #1
 800dd32:	9304      	str	r3, [sp, #16]
 800dd34:	9b05      	ldr	r3, [sp, #20]
 800dd36:	3301      	adds	r3, #1
 800dd38:	9305      	str	r3, [sp, #20]
 800dd3a:	f04f 0801 	mov.w	r8, #1
 800dd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	f47f af6a 	bne.w	800dc1a <_dtoa_r+0x7ca>
 800dd46:	2001      	movs	r0, #1
 800dd48:	e76f      	b.n	800dc2a <_dtoa_r+0x7da>
 800dd4a:	f04f 0800 	mov.w	r8, #0
 800dd4e:	e7f6      	b.n	800dd3e <_dtoa_r+0x8ee>
 800dd50:	4698      	mov	r8, r3
 800dd52:	e7f4      	b.n	800dd3e <_dtoa_r+0x8ee>
 800dd54:	f43f af7d 	beq.w	800dc52 <_dtoa_r+0x802>
 800dd58:	4618      	mov	r0, r3
 800dd5a:	301c      	adds	r0, #28
 800dd5c:	e772      	b.n	800dc44 <_dtoa_r+0x7f4>
 800dd5e:	9b03      	ldr	r3, [sp, #12]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	dc37      	bgt.n	800ddd4 <_dtoa_r+0x984>
 800dd64:	9b06      	ldr	r3, [sp, #24]
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	dd34      	ble.n	800ddd4 <_dtoa_r+0x984>
 800dd6a:	9b03      	ldr	r3, [sp, #12]
 800dd6c:	9302      	str	r3, [sp, #8]
 800dd6e:	9b02      	ldr	r3, [sp, #8]
 800dd70:	b96b      	cbnz	r3, 800dd8e <_dtoa_r+0x93e>
 800dd72:	4631      	mov	r1, r6
 800dd74:	2205      	movs	r2, #5
 800dd76:	4620      	mov	r0, r4
 800dd78:	f000 f9ca 	bl	800e110 <__multadd>
 800dd7c:	4601      	mov	r1, r0
 800dd7e:	4606      	mov	r6, r0
 800dd80:	ee18 0a10 	vmov	r0, s16
 800dd84:	f000 fbe4 	bl	800e550 <__mcmp>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	f73f adbb 	bgt.w	800d904 <_dtoa_r+0x4b4>
 800dd8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd90:	9d01      	ldr	r5, [sp, #4]
 800dd92:	43db      	mvns	r3, r3
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	f04f 0800 	mov.w	r8, #0
 800dd9a:	4631      	mov	r1, r6
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	f000 f995 	bl	800e0cc <_Bfree>
 800dda2:	2f00      	cmp	r7, #0
 800dda4:	f43f aea4 	beq.w	800daf0 <_dtoa_r+0x6a0>
 800dda8:	f1b8 0f00 	cmp.w	r8, #0
 800ddac:	d005      	beq.n	800ddba <_dtoa_r+0x96a>
 800ddae:	45b8      	cmp	r8, r7
 800ddb0:	d003      	beq.n	800ddba <_dtoa_r+0x96a>
 800ddb2:	4641      	mov	r1, r8
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f000 f989 	bl	800e0cc <_Bfree>
 800ddba:	4639      	mov	r1, r7
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	f000 f985 	bl	800e0cc <_Bfree>
 800ddc2:	e695      	b.n	800daf0 <_dtoa_r+0x6a0>
 800ddc4:	2600      	movs	r6, #0
 800ddc6:	4637      	mov	r7, r6
 800ddc8:	e7e1      	b.n	800dd8e <_dtoa_r+0x93e>
 800ddca:	9700      	str	r7, [sp, #0]
 800ddcc:	4637      	mov	r7, r6
 800ddce:	e599      	b.n	800d904 <_dtoa_r+0x4b4>
 800ddd0:	40240000 	.word	0x40240000
 800ddd4:	9b08      	ldr	r3, [sp, #32]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f000 80ca 	beq.w	800df70 <_dtoa_r+0xb20>
 800dddc:	9b03      	ldr	r3, [sp, #12]
 800ddde:	9302      	str	r3, [sp, #8]
 800dde0:	2d00      	cmp	r5, #0
 800dde2:	dd05      	ble.n	800ddf0 <_dtoa_r+0x9a0>
 800dde4:	4639      	mov	r1, r7
 800dde6:	462a      	mov	r2, r5
 800dde8:	4620      	mov	r0, r4
 800ddea:	f000 fb41 	bl	800e470 <__lshift>
 800ddee:	4607      	mov	r7, r0
 800ddf0:	f1b8 0f00 	cmp.w	r8, #0
 800ddf4:	d05b      	beq.n	800deae <_dtoa_r+0xa5e>
 800ddf6:	6879      	ldr	r1, [r7, #4]
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f000 f927 	bl	800e04c <_Balloc>
 800ddfe:	4605      	mov	r5, r0
 800de00:	b928      	cbnz	r0, 800de0e <_dtoa_r+0x9be>
 800de02:	4b87      	ldr	r3, [pc, #540]	; (800e020 <_dtoa_r+0xbd0>)
 800de04:	4602      	mov	r2, r0
 800de06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de0a:	f7ff bb3b 	b.w	800d484 <_dtoa_r+0x34>
 800de0e:	693a      	ldr	r2, [r7, #16]
 800de10:	3202      	adds	r2, #2
 800de12:	0092      	lsls	r2, r2, #2
 800de14:	f107 010c 	add.w	r1, r7, #12
 800de18:	300c      	adds	r0, #12
 800de1a:	f7fe fcbd 	bl	800c798 <memcpy>
 800de1e:	2201      	movs	r2, #1
 800de20:	4629      	mov	r1, r5
 800de22:	4620      	mov	r0, r4
 800de24:	f000 fb24 	bl	800e470 <__lshift>
 800de28:	9b01      	ldr	r3, [sp, #4]
 800de2a:	f103 0901 	add.w	r9, r3, #1
 800de2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800de32:	4413      	add	r3, r2
 800de34:	9305      	str	r3, [sp, #20]
 800de36:	f00a 0301 	and.w	r3, sl, #1
 800de3a:	46b8      	mov	r8, r7
 800de3c:	9304      	str	r3, [sp, #16]
 800de3e:	4607      	mov	r7, r0
 800de40:	4631      	mov	r1, r6
 800de42:	ee18 0a10 	vmov	r0, s16
 800de46:	f7ff fa75 	bl	800d334 <quorem>
 800de4a:	4641      	mov	r1, r8
 800de4c:	9002      	str	r0, [sp, #8]
 800de4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800de52:	ee18 0a10 	vmov	r0, s16
 800de56:	f000 fb7b 	bl	800e550 <__mcmp>
 800de5a:	463a      	mov	r2, r7
 800de5c:	9003      	str	r0, [sp, #12]
 800de5e:	4631      	mov	r1, r6
 800de60:	4620      	mov	r0, r4
 800de62:	f000 fb91 	bl	800e588 <__mdiff>
 800de66:	68c2      	ldr	r2, [r0, #12]
 800de68:	f109 3bff 	add.w	fp, r9, #4294967295
 800de6c:	4605      	mov	r5, r0
 800de6e:	bb02      	cbnz	r2, 800deb2 <_dtoa_r+0xa62>
 800de70:	4601      	mov	r1, r0
 800de72:	ee18 0a10 	vmov	r0, s16
 800de76:	f000 fb6b 	bl	800e550 <__mcmp>
 800de7a:	4602      	mov	r2, r0
 800de7c:	4629      	mov	r1, r5
 800de7e:	4620      	mov	r0, r4
 800de80:	9207      	str	r2, [sp, #28]
 800de82:	f000 f923 	bl	800e0cc <_Bfree>
 800de86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800de8a:	ea43 0102 	orr.w	r1, r3, r2
 800de8e:	9b04      	ldr	r3, [sp, #16]
 800de90:	430b      	orrs	r3, r1
 800de92:	464d      	mov	r5, r9
 800de94:	d10f      	bne.n	800deb6 <_dtoa_r+0xa66>
 800de96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de9a:	d02a      	beq.n	800def2 <_dtoa_r+0xaa2>
 800de9c:	9b03      	ldr	r3, [sp, #12]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	dd02      	ble.n	800dea8 <_dtoa_r+0xa58>
 800dea2:	9b02      	ldr	r3, [sp, #8]
 800dea4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dea8:	f88b a000 	strb.w	sl, [fp]
 800deac:	e775      	b.n	800dd9a <_dtoa_r+0x94a>
 800deae:	4638      	mov	r0, r7
 800deb0:	e7ba      	b.n	800de28 <_dtoa_r+0x9d8>
 800deb2:	2201      	movs	r2, #1
 800deb4:	e7e2      	b.n	800de7c <_dtoa_r+0xa2c>
 800deb6:	9b03      	ldr	r3, [sp, #12]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	db04      	blt.n	800dec6 <_dtoa_r+0xa76>
 800debc:	9906      	ldr	r1, [sp, #24]
 800debe:	430b      	orrs	r3, r1
 800dec0:	9904      	ldr	r1, [sp, #16]
 800dec2:	430b      	orrs	r3, r1
 800dec4:	d122      	bne.n	800df0c <_dtoa_r+0xabc>
 800dec6:	2a00      	cmp	r2, #0
 800dec8:	ddee      	ble.n	800dea8 <_dtoa_r+0xa58>
 800deca:	ee18 1a10 	vmov	r1, s16
 800dece:	2201      	movs	r2, #1
 800ded0:	4620      	mov	r0, r4
 800ded2:	f000 facd 	bl	800e470 <__lshift>
 800ded6:	4631      	mov	r1, r6
 800ded8:	ee08 0a10 	vmov	s16, r0
 800dedc:	f000 fb38 	bl	800e550 <__mcmp>
 800dee0:	2800      	cmp	r0, #0
 800dee2:	dc03      	bgt.n	800deec <_dtoa_r+0xa9c>
 800dee4:	d1e0      	bne.n	800dea8 <_dtoa_r+0xa58>
 800dee6:	f01a 0f01 	tst.w	sl, #1
 800deea:	d0dd      	beq.n	800dea8 <_dtoa_r+0xa58>
 800deec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800def0:	d1d7      	bne.n	800dea2 <_dtoa_r+0xa52>
 800def2:	2339      	movs	r3, #57	; 0x39
 800def4:	f88b 3000 	strb.w	r3, [fp]
 800def8:	462b      	mov	r3, r5
 800defa:	461d      	mov	r5, r3
 800defc:	3b01      	subs	r3, #1
 800defe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df02:	2a39      	cmp	r2, #57	; 0x39
 800df04:	d071      	beq.n	800dfea <_dtoa_r+0xb9a>
 800df06:	3201      	adds	r2, #1
 800df08:	701a      	strb	r2, [r3, #0]
 800df0a:	e746      	b.n	800dd9a <_dtoa_r+0x94a>
 800df0c:	2a00      	cmp	r2, #0
 800df0e:	dd07      	ble.n	800df20 <_dtoa_r+0xad0>
 800df10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df14:	d0ed      	beq.n	800def2 <_dtoa_r+0xaa2>
 800df16:	f10a 0301 	add.w	r3, sl, #1
 800df1a:	f88b 3000 	strb.w	r3, [fp]
 800df1e:	e73c      	b.n	800dd9a <_dtoa_r+0x94a>
 800df20:	9b05      	ldr	r3, [sp, #20]
 800df22:	f809 ac01 	strb.w	sl, [r9, #-1]
 800df26:	4599      	cmp	r9, r3
 800df28:	d047      	beq.n	800dfba <_dtoa_r+0xb6a>
 800df2a:	ee18 1a10 	vmov	r1, s16
 800df2e:	2300      	movs	r3, #0
 800df30:	220a      	movs	r2, #10
 800df32:	4620      	mov	r0, r4
 800df34:	f000 f8ec 	bl	800e110 <__multadd>
 800df38:	45b8      	cmp	r8, r7
 800df3a:	ee08 0a10 	vmov	s16, r0
 800df3e:	f04f 0300 	mov.w	r3, #0
 800df42:	f04f 020a 	mov.w	r2, #10
 800df46:	4641      	mov	r1, r8
 800df48:	4620      	mov	r0, r4
 800df4a:	d106      	bne.n	800df5a <_dtoa_r+0xb0a>
 800df4c:	f000 f8e0 	bl	800e110 <__multadd>
 800df50:	4680      	mov	r8, r0
 800df52:	4607      	mov	r7, r0
 800df54:	f109 0901 	add.w	r9, r9, #1
 800df58:	e772      	b.n	800de40 <_dtoa_r+0x9f0>
 800df5a:	f000 f8d9 	bl	800e110 <__multadd>
 800df5e:	4639      	mov	r1, r7
 800df60:	4680      	mov	r8, r0
 800df62:	2300      	movs	r3, #0
 800df64:	220a      	movs	r2, #10
 800df66:	4620      	mov	r0, r4
 800df68:	f000 f8d2 	bl	800e110 <__multadd>
 800df6c:	4607      	mov	r7, r0
 800df6e:	e7f1      	b.n	800df54 <_dtoa_r+0xb04>
 800df70:	9b03      	ldr	r3, [sp, #12]
 800df72:	9302      	str	r3, [sp, #8]
 800df74:	9d01      	ldr	r5, [sp, #4]
 800df76:	ee18 0a10 	vmov	r0, s16
 800df7a:	4631      	mov	r1, r6
 800df7c:	f7ff f9da 	bl	800d334 <quorem>
 800df80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800df84:	9b01      	ldr	r3, [sp, #4]
 800df86:	f805 ab01 	strb.w	sl, [r5], #1
 800df8a:	1aea      	subs	r2, r5, r3
 800df8c:	9b02      	ldr	r3, [sp, #8]
 800df8e:	4293      	cmp	r3, r2
 800df90:	dd09      	ble.n	800dfa6 <_dtoa_r+0xb56>
 800df92:	ee18 1a10 	vmov	r1, s16
 800df96:	2300      	movs	r3, #0
 800df98:	220a      	movs	r2, #10
 800df9a:	4620      	mov	r0, r4
 800df9c:	f000 f8b8 	bl	800e110 <__multadd>
 800dfa0:	ee08 0a10 	vmov	s16, r0
 800dfa4:	e7e7      	b.n	800df76 <_dtoa_r+0xb26>
 800dfa6:	9b02      	ldr	r3, [sp, #8]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	bfc8      	it	gt
 800dfac:	461d      	movgt	r5, r3
 800dfae:	9b01      	ldr	r3, [sp, #4]
 800dfb0:	bfd8      	it	le
 800dfb2:	2501      	movle	r5, #1
 800dfb4:	441d      	add	r5, r3
 800dfb6:	f04f 0800 	mov.w	r8, #0
 800dfba:	ee18 1a10 	vmov	r1, s16
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f000 fa55 	bl	800e470 <__lshift>
 800dfc6:	4631      	mov	r1, r6
 800dfc8:	ee08 0a10 	vmov	s16, r0
 800dfcc:	f000 fac0 	bl	800e550 <__mcmp>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	dc91      	bgt.n	800def8 <_dtoa_r+0xaa8>
 800dfd4:	d102      	bne.n	800dfdc <_dtoa_r+0xb8c>
 800dfd6:	f01a 0f01 	tst.w	sl, #1
 800dfda:	d18d      	bne.n	800def8 <_dtoa_r+0xaa8>
 800dfdc:	462b      	mov	r3, r5
 800dfde:	461d      	mov	r5, r3
 800dfe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfe4:	2a30      	cmp	r2, #48	; 0x30
 800dfe6:	d0fa      	beq.n	800dfde <_dtoa_r+0xb8e>
 800dfe8:	e6d7      	b.n	800dd9a <_dtoa_r+0x94a>
 800dfea:	9a01      	ldr	r2, [sp, #4]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d184      	bne.n	800defa <_dtoa_r+0xaaa>
 800dff0:	9b00      	ldr	r3, [sp, #0]
 800dff2:	3301      	adds	r3, #1
 800dff4:	9300      	str	r3, [sp, #0]
 800dff6:	2331      	movs	r3, #49	; 0x31
 800dff8:	7013      	strb	r3, [r2, #0]
 800dffa:	e6ce      	b.n	800dd9a <_dtoa_r+0x94a>
 800dffc:	4b09      	ldr	r3, [pc, #36]	; (800e024 <_dtoa_r+0xbd4>)
 800dffe:	f7ff ba95 	b.w	800d52c <_dtoa_r+0xdc>
 800e002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e004:	2b00      	cmp	r3, #0
 800e006:	f47f aa6e 	bne.w	800d4e6 <_dtoa_r+0x96>
 800e00a:	4b07      	ldr	r3, [pc, #28]	; (800e028 <_dtoa_r+0xbd8>)
 800e00c:	f7ff ba8e 	b.w	800d52c <_dtoa_r+0xdc>
 800e010:	9b02      	ldr	r3, [sp, #8]
 800e012:	2b00      	cmp	r3, #0
 800e014:	dcae      	bgt.n	800df74 <_dtoa_r+0xb24>
 800e016:	9b06      	ldr	r3, [sp, #24]
 800e018:	2b02      	cmp	r3, #2
 800e01a:	f73f aea8 	bgt.w	800dd6e <_dtoa_r+0x91e>
 800e01e:	e7a9      	b.n	800df74 <_dtoa_r+0xb24>
 800e020:	0800f73f 	.word	0x0800f73f
 800e024:	0800f69c 	.word	0x0800f69c
 800e028:	0800f6c0 	.word	0x0800f6c0

0800e02c <_localeconv_r>:
 800e02c:	4800      	ldr	r0, [pc, #0]	; (800e030 <_localeconv_r+0x4>)
 800e02e:	4770      	bx	lr
 800e030:	20000160 	.word	0x20000160

0800e034 <__malloc_lock>:
 800e034:	4801      	ldr	r0, [pc, #4]	; (800e03c <__malloc_lock+0x8>)
 800e036:	f000 bbd4 	b.w	800e7e2 <__retarget_lock_acquire_recursive>
 800e03a:	bf00      	nop
 800e03c:	20000b38 	.word	0x20000b38

0800e040 <__malloc_unlock>:
 800e040:	4801      	ldr	r0, [pc, #4]	; (800e048 <__malloc_unlock+0x8>)
 800e042:	f000 bbcf 	b.w	800e7e4 <__retarget_lock_release_recursive>
 800e046:	bf00      	nop
 800e048:	20000b38 	.word	0x20000b38

0800e04c <_Balloc>:
 800e04c:	b570      	push	{r4, r5, r6, lr}
 800e04e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e050:	4604      	mov	r4, r0
 800e052:	460d      	mov	r5, r1
 800e054:	b976      	cbnz	r6, 800e074 <_Balloc+0x28>
 800e056:	2010      	movs	r0, #16
 800e058:	f7fe fb8e 	bl	800c778 <malloc>
 800e05c:	4602      	mov	r2, r0
 800e05e:	6260      	str	r0, [r4, #36]	; 0x24
 800e060:	b920      	cbnz	r0, 800e06c <_Balloc+0x20>
 800e062:	4b18      	ldr	r3, [pc, #96]	; (800e0c4 <_Balloc+0x78>)
 800e064:	4818      	ldr	r0, [pc, #96]	; (800e0c8 <_Balloc+0x7c>)
 800e066:	2166      	movs	r1, #102	; 0x66
 800e068:	f000 fb8a 	bl	800e780 <__assert_func>
 800e06c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e070:	6006      	str	r6, [r0, #0]
 800e072:	60c6      	str	r6, [r0, #12]
 800e074:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e076:	68f3      	ldr	r3, [r6, #12]
 800e078:	b183      	cbz	r3, 800e09c <_Balloc+0x50>
 800e07a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e07c:	68db      	ldr	r3, [r3, #12]
 800e07e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e082:	b9b8      	cbnz	r0, 800e0b4 <_Balloc+0x68>
 800e084:	2101      	movs	r1, #1
 800e086:	fa01 f605 	lsl.w	r6, r1, r5
 800e08a:	1d72      	adds	r2, r6, #5
 800e08c:	0092      	lsls	r2, r2, #2
 800e08e:	4620      	mov	r0, r4
 800e090:	f000 fb60 	bl	800e754 <_calloc_r>
 800e094:	b160      	cbz	r0, 800e0b0 <_Balloc+0x64>
 800e096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e09a:	e00e      	b.n	800e0ba <_Balloc+0x6e>
 800e09c:	2221      	movs	r2, #33	; 0x21
 800e09e:	2104      	movs	r1, #4
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f000 fb57 	bl	800e754 <_calloc_r>
 800e0a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0a8:	60f0      	str	r0, [r6, #12]
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1e4      	bne.n	800e07a <_Balloc+0x2e>
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	bd70      	pop	{r4, r5, r6, pc}
 800e0b4:	6802      	ldr	r2, [r0, #0]
 800e0b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e0c0:	e7f7      	b.n	800e0b2 <_Balloc+0x66>
 800e0c2:	bf00      	nop
 800e0c4:	0800f6cd 	.word	0x0800f6cd
 800e0c8:	0800f750 	.word	0x0800f750

0800e0cc <_Bfree>:
 800e0cc:	b570      	push	{r4, r5, r6, lr}
 800e0ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0d0:	4605      	mov	r5, r0
 800e0d2:	460c      	mov	r4, r1
 800e0d4:	b976      	cbnz	r6, 800e0f4 <_Bfree+0x28>
 800e0d6:	2010      	movs	r0, #16
 800e0d8:	f7fe fb4e 	bl	800c778 <malloc>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	6268      	str	r0, [r5, #36]	; 0x24
 800e0e0:	b920      	cbnz	r0, 800e0ec <_Bfree+0x20>
 800e0e2:	4b09      	ldr	r3, [pc, #36]	; (800e108 <_Bfree+0x3c>)
 800e0e4:	4809      	ldr	r0, [pc, #36]	; (800e10c <_Bfree+0x40>)
 800e0e6:	218a      	movs	r1, #138	; 0x8a
 800e0e8:	f000 fb4a 	bl	800e780 <__assert_func>
 800e0ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0f0:	6006      	str	r6, [r0, #0]
 800e0f2:	60c6      	str	r6, [r0, #12]
 800e0f4:	b13c      	cbz	r4, 800e106 <_Bfree+0x3a>
 800e0f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e0f8:	6862      	ldr	r2, [r4, #4]
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e100:	6021      	str	r1, [r4, #0]
 800e102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e106:	bd70      	pop	{r4, r5, r6, pc}
 800e108:	0800f6cd 	.word	0x0800f6cd
 800e10c:	0800f750 	.word	0x0800f750

0800e110 <__multadd>:
 800e110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e114:	690d      	ldr	r5, [r1, #16]
 800e116:	4607      	mov	r7, r0
 800e118:	460c      	mov	r4, r1
 800e11a:	461e      	mov	r6, r3
 800e11c:	f101 0c14 	add.w	ip, r1, #20
 800e120:	2000      	movs	r0, #0
 800e122:	f8dc 3000 	ldr.w	r3, [ip]
 800e126:	b299      	uxth	r1, r3
 800e128:	fb02 6101 	mla	r1, r2, r1, r6
 800e12c:	0c1e      	lsrs	r6, r3, #16
 800e12e:	0c0b      	lsrs	r3, r1, #16
 800e130:	fb02 3306 	mla	r3, r2, r6, r3
 800e134:	b289      	uxth	r1, r1
 800e136:	3001      	adds	r0, #1
 800e138:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e13c:	4285      	cmp	r5, r0
 800e13e:	f84c 1b04 	str.w	r1, [ip], #4
 800e142:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e146:	dcec      	bgt.n	800e122 <__multadd+0x12>
 800e148:	b30e      	cbz	r6, 800e18e <__multadd+0x7e>
 800e14a:	68a3      	ldr	r3, [r4, #8]
 800e14c:	42ab      	cmp	r3, r5
 800e14e:	dc19      	bgt.n	800e184 <__multadd+0x74>
 800e150:	6861      	ldr	r1, [r4, #4]
 800e152:	4638      	mov	r0, r7
 800e154:	3101      	adds	r1, #1
 800e156:	f7ff ff79 	bl	800e04c <_Balloc>
 800e15a:	4680      	mov	r8, r0
 800e15c:	b928      	cbnz	r0, 800e16a <__multadd+0x5a>
 800e15e:	4602      	mov	r2, r0
 800e160:	4b0c      	ldr	r3, [pc, #48]	; (800e194 <__multadd+0x84>)
 800e162:	480d      	ldr	r0, [pc, #52]	; (800e198 <__multadd+0x88>)
 800e164:	21b5      	movs	r1, #181	; 0xb5
 800e166:	f000 fb0b 	bl	800e780 <__assert_func>
 800e16a:	6922      	ldr	r2, [r4, #16]
 800e16c:	3202      	adds	r2, #2
 800e16e:	f104 010c 	add.w	r1, r4, #12
 800e172:	0092      	lsls	r2, r2, #2
 800e174:	300c      	adds	r0, #12
 800e176:	f7fe fb0f 	bl	800c798 <memcpy>
 800e17a:	4621      	mov	r1, r4
 800e17c:	4638      	mov	r0, r7
 800e17e:	f7ff ffa5 	bl	800e0cc <_Bfree>
 800e182:	4644      	mov	r4, r8
 800e184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e188:	3501      	adds	r5, #1
 800e18a:	615e      	str	r6, [r3, #20]
 800e18c:	6125      	str	r5, [r4, #16]
 800e18e:	4620      	mov	r0, r4
 800e190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e194:	0800f73f 	.word	0x0800f73f
 800e198:	0800f750 	.word	0x0800f750

0800e19c <__hi0bits>:
 800e19c:	0c03      	lsrs	r3, r0, #16
 800e19e:	041b      	lsls	r3, r3, #16
 800e1a0:	b9d3      	cbnz	r3, 800e1d8 <__hi0bits+0x3c>
 800e1a2:	0400      	lsls	r0, r0, #16
 800e1a4:	2310      	movs	r3, #16
 800e1a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e1aa:	bf04      	itt	eq
 800e1ac:	0200      	lsleq	r0, r0, #8
 800e1ae:	3308      	addeq	r3, #8
 800e1b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e1b4:	bf04      	itt	eq
 800e1b6:	0100      	lsleq	r0, r0, #4
 800e1b8:	3304      	addeq	r3, #4
 800e1ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e1be:	bf04      	itt	eq
 800e1c0:	0080      	lsleq	r0, r0, #2
 800e1c2:	3302      	addeq	r3, #2
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	db05      	blt.n	800e1d4 <__hi0bits+0x38>
 800e1c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e1cc:	f103 0301 	add.w	r3, r3, #1
 800e1d0:	bf08      	it	eq
 800e1d2:	2320      	moveq	r3, #32
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	4770      	bx	lr
 800e1d8:	2300      	movs	r3, #0
 800e1da:	e7e4      	b.n	800e1a6 <__hi0bits+0xa>

0800e1dc <__lo0bits>:
 800e1dc:	6803      	ldr	r3, [r0, #0]
 800e1de:	f013 0207 	ands.w	r2, r3, #7
 800e1e2:	4601      	mov	r1, r0
 800e1e4:	d00b      	beq.n	800e1fe <__lo0bits+0x22>
 800e1e6:	07da      	lsls	r2, r3, #31
 800e1e8:	d423      	bmi.n	800e232 <__lo0bits+0x56>
 800e1ea:	0798      	lsls	r0, r3, #30
 800e1ec:	bf49      	itett	mi
 800e1ee:	085b      	lsrmi	r3, r3, #1
 800e1f0:	089b      	lsrpl	r3, r3, #2
 800e1f2:	2001      	movmi	r0, #1
 800e1f4:	600b      	strmi	r3, [r1, #0]
 800e1f6:	bf5c      	itt	pl
 800e1f8:	600b      	strpl	r3, [r1, #0]
 800e1fa:	2002      	movpl	r0, #2
 800e1fc:	4770      	bx	lr
 800e1fe:	b298      	uxth	r0, r3
 800e200:	b9a8      	cbnz	r0, 800e22e <__lo0bits+0x52>
 800e202:	0c1b      	lsrs	r3, r3, #16
 800e204:	2010      	movs	r0, #16
 800e206:	b2da      	uxtb	r2, r3
 800e208:	b90a      	cbnz	r2, 800e20e <__lo0bits+0x32>
 800e20a:	3008      	adds	r0, #8
 800e20c:	0a1b      	lsrs	r3, r3, #8
 800e20e:	071a      	lsls	r2, r3, #28
 800e210:	bf04      	itt	eq
 800e212:	091b      	lsreq	r3, r3, #4
 800e214:	3004      	addeq	r0, #4
 800e216:	079a      	lsls	r2, r3, #30
 800e218:	bf04      	itt	eq
 800e21a:	089b      	lsreq	r3, r3, #2
 800e21c:	3002      	addeq	r0, #2
 800e21e:	07da      	lsls	r2, r3, #31
 800e220:	d403      	bmi.n	800e22a <__lo0bits+0x4e>
 800e222:	085b      	lsrs	r3, r3, #1
 800e224:	f100 0001 	add.w	r0, r0, #1
 800e228:	d005      	beq.n	800e236 <__lo0bits+0x5a>
 800e22a:	600b      	str	r3, [r1, #0]
 800e22c:	4770      	bx	lr
 800e22e:	4610      	mov	r0, r2
 800e230:	e7e9      	b.n	800e206 <__lo0bits+0x2a>
 800e232:	2000      	movs	r0, #0
 800e234:	4770      	bx	lr
 800e236:	2020      	movs	r0, #32
 800e238:	4770      	bx	lr
	...

0800e23c <__i2b>:
 800e23c:	b510      	push	{r4, lr}
 800e23e:	460c      	mov	r4, r1
 800e240:	2101      	movs	r1, #1
 800e242:	f7ff ff03 	bl	800e04c <_Balloc>
 800e246:	4602      	mov	r2, r0
 800e248:	b928      	cbnz	r0, 800e256 <__i2b+0x1a>
 800e24a:	4b05      	ldr	r3, [pc, #20]	; (800e260 <__i2b+0x24>)
 800e24c:	4805      	ldr	r0, [pc, #20]	; (800e264 <__i2b+0x28>)
 800e24e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e252:	f000 fa95 	bl	800e780 <__assert_func>
 800e256:	2301      	movs	r3, #1
 800e258:	6144      	str	r4, [r0, #20]
 800e25a:	6103      	str	r3, [r0, #16]
 800e25c:	bd10      	pop	{r4, pc}
 800e25e:	bf00      	nop
 800e260:	0800f73f 	.word	0x0800f73f
 800e264:	0800f750 	.word	0x0800f750

0800e268 <__multiply>:
 800e268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e26c:	4691      	mov	r9, r2
 800e26e:	690a      	ldr	r2, [r1, #16]
 800e270:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e274:	429a      	cmp	r2, r3
 800e276:	bfb8      	it	lt
 800e278:	460b      	movlt	r3, r1
 800e27a:	460c      	mov	r4, r1
 800e27c:	bfbc      	itt	lt
 800e27e:	464c      	movlt	r4, r9
 800e280:	4699      	movlt	r9, r3
 800e282:	6927      	ldr	r7, [r4, #16]
 800e284:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e288:	68a3      	ldr	r3, [r4, #8]
 800e28a:	6861      	ldr	r1, [r4, #4]
 800e28c:	eb07 060a 	add.w	r6, r7, sl
 800e290:	42b3      	cmp	r3, r6
 800e292:	b085      	sub	sp, #20
 800e294:	bfb8      	it	lt
 800e296:	3101      	addlt	r1, #1
 800e298:	f7ff fed8 	bl	800e04c <_Balloc>
 800e29c:	b930      	cbnz	r0, 800e2ac <__multiply+0x44>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	4b44      	ldr	r3, [pc, #272]	; (800e3b4 <__multiply+0x14c>)
 800e2a2:	4845      	ldr	r0, [pc, #276]	; (800e3b8 <__multiply+0x150>)
 800e2a4:	f240 115d 	movw	r1, #349	; 0x15d
 800e2a8:	f000 fa6a 	bl	800e780 <__assert_func>
 800e2ac:	f100 0514 	add.w	r5, r0, #20
 800e2b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e2b4:	462b      	mov	r3, r5
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	4543      	cmp	r3, r8
 800e2ba:	d321      	bcc.n	800e300 <__multiply+0x98>
 800e2bc:	f104 0314 	add.w	r3, r4, #20
 800e2c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e2c4:	f109 0314 	add.w	r3, r9, #20
 800e2c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e2cc:	9202      	str	r2, [sp, #8]
 800e2ce:	1b3a      	subs	r2, r7, r4
 800e2d0:	3a15      	subs	r2, #21
 800e2d2:	f022 0203 	bic.w	r2, r2, #3
 800e2d6:	3204      	adds	r2, #4
 800e2d8:	f104 0115 	add.w	r1, r4, #21
 800e2dc:	428f      	cmp	r7, r1
 800e2de:	bf38      	it	cc
 800e2e0:	2204      	movcc	r2, #4
 800e2e2:	9201      	str	r2, [sp, #4]
 800e2e4:	9a02      	ldr	r2, [sp, #8]
 800e2e6:	9303      	str	r3, [sp, #12]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d80c      	bhi.n	800e306 <__multiply+0x9e>
 800e2ec:	2e00      	cmp	r6, #0
 800e2ee:	dd03      	ble.n	800e2f8 <__multiply+0x90>
 800e2f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d05a      	beq.n	800e3ae <__multiply+0x146>
 800e2f8:	6106      	str	r6, [r0, #16]
 800e2fa:	b005      	add	sp, #20
 800e2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e300:	f843 2b04 	str.w	r2, [r3], #4
 800e304:	e7d8      	b.n	800e2b8 <__multiply+0x50>
 800e306:	f8b3 a000 	ldrh.w	sl, [r3]
 800e30a:	f1ba 0f00 	cmp.w	sl, #0
 800e30e:	d024      	beq.n	800e35a <__multiply+0xf2>
 800e310:	f104 0e14 	add.w	lr, r4, #20
 800e314:	46a9      	mov	r9, r5
 800e316:	f04f 0c00 	mov.w	ip, #0
 800e31a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e31e:	f8d9 1000 	ldr.w	r1, [r9]
 800e322:	fa1f fb82 	uxth.w	fp, r2
 800e326:	b289      	uxth	r1, r1
 800e328:	fb0a 110b 	mla	r1, sl, fp, r1
 800e32c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e330:	f8d9 2000 	ldr.w	r2, [r9]
 800e334:	4461      	add	r1, ip
 800e336:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e33a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e33e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e342:	b289      	uxth	r1, r1
 800e344:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e348:	4577      	cmp	r7, lr
 800e34a:	f849 1b04 	str.w	r1, [r9], #4
 800e34e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e352:	d8e2      	bhi.n	800e31a <__multiply+0xb2>
 800e354:	9a01      	ldr	r2, [sp, #4]
 800e356:	f845 c002 	str.w	ip, [r5, r2]
 800e35a:	9a03      	ldr	r2, [sp, #12]
 800e35c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e360:	3304      	adds	r3, #4
 800e362:	f1b9 0f00 	cmp.w	r9, #0
 800e366:	d020      	beq.n	800e3aa <__multiply+0x142>
 800e368:	6829      	ldr	r1, [r5, #0]
 800e36a:	f104 0c14 	add.w	ip, r4, #20
 800e36e:	46ae      	mov	lr, r5
 800e370:	f04f 0a00 	mov.w	sl, #0
 800e374:	f8bc b000 	ldrh.w	fp, [ip]
 800e378:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e37c:	fb09 220b 	mla	r2, r9, fp, r2
 800e380:	4492      	add	sl, r2
 800e382:	b289      	uxth	r1, r1
 800e384:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e388:	f84e 1b04 	str.w	r1, [lr], #4
 800e38c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e390:	f8be 1000 	ldrh.w	r1, [lr]
 800e394:	0c12      	lsrs	r2, r2, #16
 800e396:	fb09 1102 	mla	r1, r9, r2, r1
 800e39a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e39e:	4567      	cmp	r7, ip
 800e3a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e3a4:	d8e6      	bhi.n	800e374 <__multiply+0x10c>
 800e3a6:	9a01      	ldr	r2, [sp, #4]
 800e3a8:	50a9      	str	r1, [r5, r2]
 800e3aa:	3504      	adds	r5, #4
 800e3ac:	e79a      	b.n	800e2e4 <__multiply+0x7c>
 800e3ae:	3e01      	subs	r6, #1
 800e3b0:	e79c      	b.n	800e2ec <__multiply+0x84>
 800e3b2:	bf00      	nop
 800e3b4:	0800f73f 	.word	0x0800f73f
 800e3b8:	0800f750 	.word	0x0800f750

0800e3bc <__pow5mult>:
 800e3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3c0:	4615      	mov	r5, r2
 800e3c2:	f012 0203 	ands.w	r2, r2, #3
 800e3c6:	4606      	mov	r6, r0
 800e3c8:	460f      	mov	r7, r1
 800e3ca:	d007      	beq.n	800e3dc <__pow5mult+0x20>
 800e3cc:	4c25      	ldr	r4, [pc, #148]	; (800e464 <__pow5mult+0xa8>)
 800e3ce:	3a01      	subs	r2, #1
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e3d6:	f7ff fe9b 	bl	800e110 <__multadd>
 800e3da:	4607      	mov	r7, r0
 800e3dc:	10ad      	asrs	r5, r5, #2
 800e3de:	d03d      	beq.n	800e45c <__pow5mult+0xa0>
 800e3e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e3e2:	b97c      	cbnz	r4, 800e404 <__pow5mult+0x48>
 800e3e4:	2010      	movs	r0, #16
 800e3e6:	f7fe f9c7 	bl	800c778 <malloc>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	6270      	str	r0, [r6, #36]	; 0x24
 800e3ee:	b928      	cbnz	r0, 800e3fc <__pow5mult+0x40>
 800e3f0:	4b1d      	ldr	r3, [pc, #116]	; (800e468 <__pow5mult+0xac>)
 800e3f2:	481e      	ldr	r0, [pc, #120]	; (800e46c <__pow5mult+0xb0>)
 800e3f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e3f8:	f000 f9c2 	bl	800e780 <__assert_func>
 800e3fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e400:	6004      	str	r4, [r0, #0]
 800e402:	60c4      	str	r4, [r0, #12]
 800e404:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e40c:	b94c      	cbnz	r4, 800e422 <__pow5mult+0x66>
 800e40e:	f240 2171 	movw	r1, #625	; 0x271
 800e412:	4630      	mov	r0, r6
 800e414:	f7ff ff12 	bl	800e23c <__i2b>
 800e418:	2300      	movs	r3, #0
 800e41a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e41e:	4604      	mov	r4, r0
 800e420:	6003      	str	r3, [r0, #0]
 800e422:	f04f 0900 	mov.w	r9, #0
 800e426:	07eb      	lsls	r3, r5, #31
 800e428:	d50a      	bpl.n	800e440 <__pow5mult+0x84>
 800e42a:	4639      	mov	r1, r7
 800e42c:	4622      	mov	r2, r4
 800e42e:	4630      	mov	r0, r6
 800e430:	f7ff ff1a 	bl	800e268 <__multiply>
 800e434:	4639      	mov	r1, r7
 800e436:	4680      	mov	r8, r0
 800e438:	4630      	mov	r0, r6
 800e43a:	f7ff fe47 	bl	800e0cc <_Bfree>
 800e43e:	4647      	mov	r7, r8
 800e440:	106d      	asrs	r5, r5, #1
 800e442:	d00b      	beq.n	800e45c <__pow5mult+0xa0>
 800e444:	6820      	ldr	r0, [r4, #0]
 800e446:	b938      	cbnz	r0, 800e458 <__pow5mult+0x9c>
 800e448:	4622      	mov	r2, r4
 800e44a:	4621      	mov	r1, r4
 800e44c:	4630      	mov	r0, r6
 800e44e:	f7ff ff0b 	bl	800e268 <__multiply>
 800e452:	6020      	str	r0, [r4, #0]
 800e454:	f8c0 9000 	str.w	r9, [r0]
 800e458:	4604      	mov	r4, r0
 800e45a:	e7e4      	b.n	800e426 <__pow5mult+0x6a>
 800e45c:	4638      	mov	r0, r7
 800e45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e462:	bf00      	nop
 800e464:	0800f8a0 	.word	0x0800f8a0
 800e468:	0800f6cd 	.word	0x0800f6cd
 800e46c:	0800f750 	.word	0x0800f750

0800e470 <__lshift>:
 800e470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e474:	460c      	mov	r4, r1
 800e476:	6849      	ldr	r1, [r1, #4]
 800e478:	6923      	ldr	r3, [r4, #16]
 800e47a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e47e:	68a3      	ldr	r3, [r4, #8]
 800e480:	4607      	mov	r7, r0
 800e482:	4691      	mov	r9, r2
 800e484:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e488:	f108 0601 	add.w	r6, r8, #1
 800e48c:	42b3      	cmp	r3, r6
 800e48e:	db0b      	blt.n	800e4a8 <__lshift+0x38>
 800e490:	4638      	mov	r0, r7
 800e492:	f7ff fddb 	bl	800e04c <_Balloc>
 800e496:	4605      	mov	r5, r0
 800e498:	b948      	cbnz	r0, 800e4ae <__lshift+0x3e>
 800e49a:	4602      	mov	r2, r0
 800e49c:	4b2a      	ldr	r3, [pc, #168]	; (800e548 <__lshift+0xd8>)
 800e49e:	482b      	ldr	r0, [pc, #172]	; (800e54c <__lshift+0xdc>)
 800e4a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e4a4:	f000 f96c 	bl	800e780 <__assert_func>
 800e4a8:	3101      	adds	r1, #1
 800e4aa:	005b      	lsls	r3, r3, #1
 800e4ac:	e7ee      	b.n	800e48c <__lshift+0x1c>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	f100 0114 	add.w	r1, r0, #20
 800e4b4:	f100 0210 	add.w	r2, r0, #16
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	4553      	cmp	r3, sl
 800e4bc:	db37      	blt.n	800e52e <__lshift+0xbe>
 800e4be:	6920      	ldr	r0, [r4, #16]
 800e4c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e4c4:	f104 0314 	add.w	r3, r4, #20
 800e4c8:	f019 091f 	ands.w	r9, r9, #31
 800e4cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e4d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e4d4:	d02f      	beq.n	800e536 <__lshift+0xc6>
 800e4d6:	f1c9 0e20 	rsb	lr, r9, #32
 800e4da:	468a      	mov	sl, r1
 800e4dc:	f04f 0c00 	mov.w	ip, #0
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	fa02 f209 	lsl.w	r2, r2, r9
 800e4e6:	ea42 020c 	orr.w	r2, r2, ip
 800e4ea:	f84a 2b04 	str.w	r2, [sl], #4
 800e4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4f2:	4298      	cmp	r0, r3
 800e4f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e4f8:	d8f2      	bhi.n	800e4e0 <__lshift+0x70>
 800e4fa:	1b03      	subs	r3, r0, r4
 800e4fc:	3b15      	subs	r3, #21
 800e4fe:	f023 0303 	bic.w	r3, r3, #3
 800e502:	3304      	adds	r3, #4
 800e504:	f104 0215 	add.w	r2, r4, #21
 800e508:	4290      	cmp	r0, r2
 800e50a:	bf38      	it	cc
 800e50c:	2304      	movcc	r3, #4
 800e50e:	f841 c003 	str.w	ip, [r1, r3]
 800e512:	f1bc 0f00 	cmp.w	ip, #0
 800e516:	d001      	beq.n	800e51c <__lshift+0xac>
 800e518:	f108 0602 	add.w	r6, r8, #2
 800e51c:	3e01      	subs	r6, #1
 800e51e:	4638      	mov	r0, r7
 800e520:	612e      	str	r6, [r5, #16]
 800e522:	4621      	mov	r1, r4
 800e524:	f7ff fdd2 	bl	800e0cc <_Bfree>
 800e528:	4628      	mov	r0, r5
 800e52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e52e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e532:	3301      	adds	r3, #1
 800e534:	e7c1      	b.n	800e4ba <__lshift+0x4a>
 800e536:	3904      	subs	r1, #4
 800e538:	f853 2b04 	ldr.w	r2, [r3], #4
 800e53c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e540:	4298      	cmp	r0, r3
 800e542:	d8f9      	bhi.n	800e538 <__lshift+0xc8>
 800e544:	e7ea      	b.n	800e51c <__lshift+0xac>
 800e546:	bf00      	nop
 800e548:	0800f73f 	.word	0x0800f73f
 800e54c:	0800f750 	.word	0x0800f750

0800e550 <__mcmp>:
 800e550:	b530      	push	{r4, r5, lr}
 800e552:	6902      	ldr	r2, [r0, #16]
 800e554:	690c      	ldr	r4, [r1, #16]
 800e556:	1b12      	subs	r2, r2, r4
 800e558:	d10e      	bne.n	800e578 <__mcmp+0x28>
 800e55a:	f100 0314 	add.w	r3, r0, #20
 800e55e:	3114      	adds	r1, #20
 800e560:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e564:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e568:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e56c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e570:	42a5      	cmp	r5, r4
 800e572:	d003      	beq.n	800e57c <__mcmp+0x2c>
 800e574:	d305      	bcc.n	800e582 <__mcmp+0x32>
 800e576:	2201      	movs	r2, #1
 800e578:	4610      	mov	r0, r2
 800e57a:	bd30      	pop	{r4, r5, pc}
 800e57c:	4283      	cmp	r3, r0
 800e57e:	d3f3      	bcc.n	800e568 <__mcmp+0x18>
 800e580:	e7fa      	b.n	800e578 <__mcmp+0x28>
 800e582:	f04f 32ff 	mov.w	r2, #4294967295
 800e586:	e7f7      	b.n	800e578 <__mcmp+0x28>

0800e588 <__mdiff>:
 800e588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e58c:	460c      	mov	r4, r1
 800e58e:	4606      	mov	r6, r0
 800e590:	4611      	mov	r1, r2
 800e592:	4620      	mov	r0, r4
 800e594:	4690      	mov	r8, r2
 800e596:	f7ff ffdb 	bl	800e550 <__mcmp>
 800e59a:	1e05      	subs	r5, r0, #0
 800e59c:	d110      	bne.n	800e5c0 <__mdiff+0x38>
 800e59e:	4629      	mov	r1, r5
 800e5a0:	4630      	mov	r0, r6
 800e5a2:	f7ff fd53 	bl	800e04c <_Balloc>
 800e5a6:	b930      	cbnz	r0, 800e5b6 <__mdiff+0x2e>
 800e5a8:	4b3a      	ldr	r3, [pc, #232]	; (800e694 <__mdiff+0x10c>)
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	f240 2132 	movw	r1, #562	; 0x232
 800e5b0:	4839      	ldr	r0, [pc, #228]	; (800e698 <__mdiff+0x110>)
 800e5b2:	f000 f8e5 	bl	800e780 <__assert_func>
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e5bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5c0:	bfa4      	itt	ge
 800e5c2:	4643      	movge	r3, r8
 800e5c4:	46a0      	movge	r8, r4
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e5cc:	bfa6      	itte	ge
 800e5ce:	461c      	movge	r4, r3
 800e5d0:	2500      	movge	r5, #0
 800e5d2:	2501      	movlt	r5, #1
 800e5d4:	f7ff fd3a 	bl	800e04c <_Balloc>
 800e5d8:	b920      	cbnz	r0, 800e5e4 <__mdiff+0x5c>
 800e5da:	4b2e      	ldr	r3, [pc, #184]	; (800e694 <__mdiff+0x10c>)
 800e5dc:	4602      	mov	r2, r0
 800e5de:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e5e2:	e7e5      	b.n	800e5b0 <__mdiff+0x28>
 800e5e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e5e8:	6926      	ldr	r6, [r4, #16]
 800e5ea:	60c5      	str	r5, [r0, #12]
 800e5ec:	f104 0914 	add.w	r9, r4, #20
 800e5f0:	f108 0514 	add.w	r5, r8, #20
 800e5f4:	f100 0e14 	add.w	lr, r0, #20
 800e5f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e5fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e600:	f108 0210 	add.w	r2, r8, #16
 800e604:	46f2      	mov	sl, lr
 800e606:	2100      	movs	r1, #0
 800e608:	f859 3b04 	ldr.w	r3, [r9], #4
 800e60c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e610:	fa1f f883 	uxth.w	r8, r3
 800e614:	fa11 f18b 	uxtah	r1, r1, fp
 800e618:	0c1b      	lsrs	r3, r3, #16
 800e61a:	eba1 0808 	sub.w	r8, r1, r8
 800e61e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e622:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e626:	fa1f f888 	uxth.w	r8, r8
 800e62a:	1419      	asrs	r1, r3, #16
 800e62c:	454e      	cmp	r6, r9
 800e62e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e632:	f84a 3b04 	str.w	r3, [sl], #4
 800e636:	d8e7      	bhi.n	800e608 <__mdiff+0x80>
 800e638:	1b33      	subs	r3, r6, r4
 800e63a:	3b15      	subs	r3, #21
 800e63c:	f023 0303 	bic.w	r3, r3, #3
 800e640:	3304      	adds	r3, #4
 800e642:	3415      	adds	r4, #21
 800e644:	42a6      	cmp	r6, r4
 800e646:	bf38      	it	cc
 800e648:	2304      	movcc	r3, #4
 800e64a:	441d      	add	r5, r3
 800e64c:	4473      	add	r3, lr
 800e64e:	469e      	mov	lr, r3
 800e650:	462e      	mov	r6, r5
 800e652:	4566      	cmp	r6, ip
 800e654:	d30e      	bcc.n	800e674 <__mdiff+0xec>
 800e656:	f10c 0203 	add.w	r2, ip, #3
 800e65a:	1b52      	subs	r2, r2, r5
 800e65c:	f022 0203 	bic.w	r2, r2, #3
 800e660:	3d03      	subs	r5, #3
 800e662:	45ac      	cmp	ip, r5
 800e664:	bf38      	it	cc
 800e666:	2200      	movcc	r2, #0
 800e668:	441a      	add	r2, r3
 800e66a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e66e:	b17b      	cbz	r3, 800e690 <__mdiff+0x108>
 800e670:	6107      	str	r7, [r0, #16]
 800e672:	e7a3      	b.n	800e5bc <__mdiff+0x34>
 800e674:	f856 8b04 	ldr.w	r8, [r6], #4
 800e678:	fa11 f288 	uxtah	r2, r1, r8
 800e67c:	1414      	asrs	r4, r2, #16
 800e67e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e682:	b292      	uxth	r2, r2
 800e684:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e688:	f84e 2b04 	str.w	r2, [lr], #4
 800e68c:	1421      	asrs	r1, r4, #16
 800e68e:	e7e0      	b.n	800e652 <__mdiff+0xca>
 800e690:	3f01      	subs	r7, #1
 800e692:	e7ea      	b.n	800e66a <__mdiff+0xe2>
 800e694:	0800f73f 	.word	0x0800f73f
 800e698:	0800f750 	.word	0x0800f750

0800e69c <__d2b>:
 800e69c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6a0:	4689      	mov	r9, r1
 800e6a2:	2101      	movs	r1, #1
 800e6a4:	ec57 6b10 	vmov	r6, r7, d0
 800e6a8:	4690      	mov	r8, r2
 800e6aa:	f7ff fccf 	bl	800e04c <_Balloc>
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	b930      	cbnz	r0, 800e6c0 <__d2b+0x24>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	4b25      	ldr	r3, [pc, #148]	; (800e74c <__d2b+0xb0>)
 800e6b6:	4826      	ldr	r0, [pc, #152]	; (800e750 <__d2b+0xb4>)
 800e6b8:	f240 310a 	movw	r1, #778	; 0x30a
 800e6bc:	f000 f860 	bl	800e780 <__assert_func>
 800e6c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e6c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e6c8:	bb35      	cbnz	r5, 800e718 <__d2b+0x7c>
 800e6ca:	2e00      	cmp	r6, #0
 800e6cc:	9301      	str	r3, [sp, #4]
 800e6ce:	d028      	beq.n	800e722 <__d2b+0x86>
 800e6d0:	4668      	mov	r0, sp
 800e6d2:	9600      	str	r6, [sp, #0]
 800e6d4:	f7ff fd82 	bl	800e1dc <__lo0bits>
 800e6d8:	9900      	ldr	r1, [sp, #0]
 800e6da:	b300      	cbz	r0, 800e71e <__d2b+0x82>
 800e6dc:	9a01      	ldr	r2, [sp, #4]
 800e6de:	f1c0 0320 	rsb	r3, r0, #32
 800e6e2:	fa02 f303 	lsl.w	r3, r2, r3
 800e6e6:	430b      	orrs	r3, r1
 800e6e8:	40c2      	lsrs	r2, r0
 800e6ea:	6163      	str	r3, [r4, #20]
 800e6ec:	9201      	str	r2, [sp, #4]
 800e6ee:	9b01      	ldr	r3, [sp, #4]
 800e6f0:	61a3      	str	r3, [r4, #24]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	bf14      	ite	ne
 800e6f6:	2202      	movne	r2, #2
 800e6f8:	2201      	moveq	r2, #1
 800e6fa:	6122      	str	r2, [r4, #16]
 800e6fc:	b1d5      	cbz	r5, 800e734 <__d2b+0x98>
 800e6fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e702:	4405      	add	r5, r0
 800e704:	f8c9 5000 	str.w	r5, [r9]
 800e708:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e70c:	f8c8 0000 	str.w	r0, [r8]
 800e710:	4620      	mov	r0, r4
 800e712:	b003      	add	sp, #12
 800e714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e71c:	e7d5      	b.n	800e6ca <__d2b+0x2e>
 800e71e:	6161      	str	r1, [r4, #20]
 800e720:	e7e5      	b.n	800e6ee <__d2b+0x52>
 800e722:	a801      	add	r0, sp, #4
 800e724:	f7ff fd5a 	bl	800e1dc <__lo0bits>
 800e728:	9b01      	ldr	r3, [sp, #4]
 800e72a:	6163      	str	r3, [r4, #20]
 800e72c:	2201      	movs	r2, #1
 800e72e:	6122      	str	r2, [r4, #16]
 800e730:	3020      	adds	r0, #32
 800e732:	e7e3      	b.n	800e6fc <__d2b+0x60>
 800e734:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e738:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e73c:	f8c9 0000 	str.w	r0, [r9]
 800e740:	6918      	ldr	r0, [r3, #16]
 800e742:	f7ff fd2b 	bl	800e19c <__hi0bits>
 800e746:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e74a:	e7df      	b.n	800e70c <__d2b+0x70>
 800e74c:	0800f73f 	.word	0x0800f73f
 800e750:	0800f750 	.word	0x0800f750

0800e754 <_calloc_r>:
 800e754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e756:	fba1 2402 	umull	r2, r4, r1, r2
 800e75a:	b94c      	cbnz	r4, 800e770 <_calloc_r+0x1c>
 800e75c:	4611      	mov	r1, r2
 800e75e:	9201      	str	r2, [sp, #4]
 800e760:	f7fe f8b6 	bl	800c8d0 <_malloc_r>
 800e764:	9a01      	ldr	r2, [sp, #4]
 800e766:	4605      	mov	r5, r0
 800e768:	b930      	cbnz	r0, 800e778 <_calloc_r+0x24>
 800e76a:	4628      	mov	r0, r5
 800e76c:	b003      	add	sp, #12
 800e76e:	bd30      	pop	{r4, r5, pc}
 800e770:	220c      	movs	r2, #12
 800e772:	6002      	str	r2, [r0, #0]
 800e774:	2500      	movs	r5, #0
 800e776:	e7f8      	b.n	800e76a <_calloc_r+0x16>
 800e778:	4621      	mov	r1, r4
 800e77a:	f7fe f835 	bl	800c7e8 <memset>
 800e77e:	e7f4      	b.n	800e76a <_calloc_r+0x16>

0800e780 <__assert_func>:
 800e780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e782:	4614      	mov	r4, r2
 800e784:	461a      	mov	r2, r3
 800e786:	4b09      	ldr	r3, [pc, #36]	; (800e7ac <__assert_func+0x2c>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4605      	mov	r5, r0
 800e78c:	68d8      	ldr	r0, [r3, #12]
 800e78e:	b14c      	cbz	r4, 800e7a4 <__assert_func+0x24>
 800e790:	4b07      	ldr	r3, [pc, #28]	; (800e7b0 <__assert_func+0x30>)
 800e792:	9100      	str	r1, [sp, #0]
 800e794:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e798:	4906      	ldr	r1, [pc, #24]	; (800e7b4 <__assert_func+0x34>)
 800e79a:	462b      	mov	r3, r5
 800e79c:	f000 f80e 	bl	800e7bc <fiprintf>
 800e7a0:	f7fd ffb8 	bl	800c714 <abort>
 800e7a4:	4b04      	ldr	r3, [pc, #16]	; (800e7b8 <__assert_func+0x38>)
 800e7a6:	461c      	mov	r4, r3
 800e7a8:	e7f3      	b.n	800e792 <__assert_func+0x12>
 800e7aa:	bf00      	nop
 800e7ac:	2000000c 	.word	0x2000000c
 800e7b0:	0800f8ac 	.word	0x0800f8ac
 800e7b4:	0800f8b9 	.word	0x0800f8b9
 800e7b8:	0800f8e7 	.word	0x0800f8e7

0800e7bc <fiprintf>:
 800e7bc:	b40e      	push	{r1, r2, r3}
 800e7be:	b503      	push	{r0, r1, lr}
 800e7c0:	4601      	mov	r1, r0
 800e7c2:	ab03      	add	r3, sp, #12
 800e7c4:	4805      	ldr	r0, [pc, #20]	; (800e7dc <fiprintf+0x20>)
 800e7c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ca:	6800      	ldr	r0, [r0, #0]
 800e7cc:	9301      	str	r3, [sp, #4]
 800e7ce:	f000 f845 	bl	800e85c <_vfiprintf_r>
 800e7d2:	b002      	add	sp, #8
 800e7d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7d8:	b003      	add	sp, #12
 800e7da:	4770      	bx	lr
 800e7dc:	2000000c 	.word	0x2000000c

0800e7e0 <__retarget_lock_init_recursive>:
 800e7e0:	4770      	bx	lr

0800e7e2 <__retarget_lock_acquire_recursive>:
 800e7e2:	4770      	bx	lr

0800e7e4 <__retarget_lock_release_recursive>:
 800e7e4:	4770      	bx	lr

0800e7e6 <__ascii_mbtowc>:
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	b901      	cbnz	r1, 800e7ec <__ascii_mbtowc+0x6>
 800e7ea:	a901      	add	r1, sp, #4
 800e7ec:	b142      	cbz	r2, 800e800 <__ascii_mbtowc+0x1a>
 800e7ee:	b14b      	cbz	r3, 800e804 <__ascii_mbtowc+0x1e>
 800e7f0:	7813      	ldrb	r3, [r2, #0]
 800e7f2:	600b      	str	r3, [r1, #0]
 800e7f4:	7812      	ldrb	r2, [r2, #0]
 800e7f6:	1e10      	subs	r0, r2, #0
 800e7f8:	bf18      	it	ne
 800e7fa:	2001      	movne	r0, #1
 800e7fc:	b002      	add	sp, #8
 800e7fe:	4770      	bx	lr
 800e800:	4610      	mov	r0, r2
 800e802:	e7fb      	b.n	800e7fc <__ascii_mbtowc+0x16>
 800e804:	f06f 0001 	mvn.w	r0, #1
 800e808:	e7f8      	b.n	800e7fc <__ascii_mbtowc+0x16>

0800e80a <__sfputc_r>:
 800e80a:	6893      	ldr	r3, [r2, #8]
 800e80c:	3b01      	subs	r3, #1
 800e80e:	2b00      	cmp	r3, #0
 800e810:	b410      	push	{r4}
 800e812:	6093      	str	r3, [r2, #8]
 800e814:	da08      	bge.n	800e828 <__sfputc_r+0x1e>
 800e816:	6994      	ldr	r4, [r2, #24]
 800e818:	42a3      	cmp	r3, r4
 800e81a:	db01      	blt.n	800e820 <__sfputc_r+0x16>
 800e81c:	290a      	cmp	r1, #10
 800e81e:	d103      	bne.n	800e828 <__sfputc_r+0x1e>
 800e820:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e824:	f000 b94a 	b.w	800eabc <__swbuf_r>
 800e828:	6813      	ldr	r3, [r2, #0]
 800e82a:	1c58      	adds	r0, r3, #1
 800e82c:	6010      	str	r0, [r2, #0]
 800e82e:	7019      	strb	r1, [r3, #0]
 800e830:	4608      	mov	r0, r1
 800e832:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <__sfputs_r>:
 800e838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e83a:	4606      	mov	r6, r0
 800e83c:	460f      	mov	r7, r1
 800e83e:	4614      	mov	r4, r2
 800e840:	18d5      	adds	r5, r2, r3
 800e842:	42ac      	cmp	r4, r5
 800e844:	d101      	bne.n	800e84a <__sfputs_r+0x12>
 800e846:	2000      	movs	r0, #0
 800e848:	e007      	b.n	800e85a <__sfputs_r+0x22>
 800e84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e84e:	463a      	mov	r2, r7
 800e850:	4630      	mov	r0, r6
 800e852:	f7ff ffda 	bl	800e80a <__sfputc_r>
 800e856:	1c43      	adds	r3, r0, #1
 800e858:	d1f3      	bne.n	800e842 <__sfputs_r+0xa>
 800e85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e85c <_vfiprintf_r>:
 800e85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e860:	460d      	mov	r5, r1
 800e862:	b09d      	sub	sp, #116	; 0x74
 800e864:	4614      	mov	r4, r2
 800e866:	4698      	mov	r8, r3
 800e868:	4606      	mov	r6, r0
 800e86a:	b118      	cbz	r0, 800e874 <_vfiprintf_r+0x18>
 800e86c:	6983      	ldr	r3, [r0, #24]
 800e86e:	b90b      	cbnz	r3, 800e874 <_vfiprintf_r+0x18>
 800e870:	f000 fb0c 	bl	800ee8c <__sinit>
 800e874:	4b89      	ldr	r3, [pc, #548]	; (800ea9c <_vfiprintf_r+0x240>)
 800e876:	429d      	cmp	r5, r3
 800e878:	d11b      	bne.n	800e8b2 <_vfiprintf_r+0x56>
 800e87a:	6875      	ldr	r5, [r6, #4]
 800e87c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e87e:	07d9      	lsls	r1, r3, #31
 800e880:	d405      	bmi.n	800e88e <_vfiprintf_r+0x32>
 800e882:	89ab      	ldrh	r3, [r5, #12]
 800e884:	059a      	lsls	r2, r3, #22
 800e886:	d402      	bmi.n	800e88e <_vfiprintf_r+0x32>
 800e888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e88a:	f7ff ffaa 	bl	800e7e2 <__retarget_lock_acquire_recursive>
 800e88e:	89ab      	ldrh	r3, [r5, #12]
 800e890:	071b      	lsls	r3, r3, #28
 800e892:	d501      	bpl.n	800e898 <_vfiprintf_r+0x3c>
 800e894:	692b      	ldr	r3, [r5, #16]
 800e896:	b9eb      	cbnz	r3, 800e8d4 <_vfiprintf_r+0x78>
 800e898:	4629      	mov	r1, r5
 800e89a:	4630      	mov	r0, r6
 800e89c:	f000 f96e 	bl	800eb7c <__swsetup_r>
 800e8a0:	b1c0      	cbz	r0, 800e8d4 <_vfiprintf_r+0x78>
 800e8a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8a4:	07dc      	lsls	r4, r3, #31
 800e8a6:	d50e      	bpl.n	800e8c6 <_vfiprintf_r+0x6a>
 800e8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ac:	b01d      	add	sp, #116	; 0x74
 800e8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b2:	4b7b      	ldr	r3, [pc, #492]	; (800eaa0 <_vfiprintf_r+0x244>)
 800e8b4:	429d      	cmp	r5, r3
 800e8b6:	d101      	bne.n	800e8bc <_vfiprintf_r+0x60>
 800e8b8:	68b5      	ldr	r5, [r6, #8]
 800e8ba:	e7df      	b.n	800e87c <_vfiprintf_r+0x20>
 800e8bc:	4b79      	ldr	r3, [pc, #484]	; (800eaa4 <_vfiprintf_r+0x248>)
 800e8be:	429d      	cmp	r5, r3
 800e8c0:	bf08      	it	eq
 800e8c2:	68f5      	ldreq	r5, [r6, #12]
 800e8c4:	e7da      	b.n	800e87c <_vfiprintf_r+0x20>
 800e8c6:	89ab      	ldrh	r3, [r5, #12]
 800e8c8:	0598      	lsls	r0, r3, #22
 800e8ca:	d4ed      	bmi.n	800e8a8 <_vfiprintf_r+0x4c>
 800e8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8ce:	f7ff ff89 	bl	800e7e4 <__retarget_lock_release_recursive>
 800e8d2:	e7e9      	b.n	800e8a8 <_vfiprintf_r+0x4c>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8d8:	2320      	movs	r3, #32
 800e8da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8de:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8e2:	2330      	movs	r3, #48	; 0x30
 800e8e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eaa8 <_vfiprintf_r+0x24c>
 800e8e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8ec:	f04f 0901 	mov.w	r9, #1
 800e8f0:	4623      	mov	r3, r4
 800e8f2:	469a      	mov	sl, r3
 800e8f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8f8:	b10a      	cbz	r2, 800e8fe <_vfiprintf_r+0xa2>
 800e8fa:	2a25      	cmp	r2, #37	; 0x25
 800e8fc:	d1f9      	bne.n	800e8f2 <_vfiprintf_r+0x96>
 800e8fe:	ebba 0b04 	subs.w	fp, sl, r4
 800e902:	d00b      	beq.n	800e91c <_vfiprintf_r+0xc0>
 800e904:	465b      	mov	r3, fp
 800e906:	4622      	mov	r2, r4
 800e908:	4629      	mov	r1, r5
 800e90a:	4630      	mov	r0, r6
 800e90c:	f7ff ff94 	bl	800e838 <__sfputs_r>
 800e910:	3001      	adds	r0, #1
 800e912:	f000 80aa 	beq.w	800ea6a <_vfiprintf_r+0x20e>
 800e916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e918:	445a      	add	r2, fp
 800e91a:	9209      	str	r2, [sp, #36]	; 0x24
 800e91c:	f89a 3000 	ldrb.w	r3, [sl]
 800e920:	2b00      	cmp	r3, #0
 800e922:	f000 80a2 	beq.w	800ea6a <_vfiprintf_r+0x20e>
 800e926:	2300      	movs	r3, #0
 800e928:	f04f 32ff 	mov.w	r2, #4294967295
 800e92c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e930:	f10a 0a01 	add.w	sl, sl, #1
 800e934:	9304      	str	r3, [sp, #16]
 800e936:	9307      	str	r3, [sp, #28]
 800e938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e93c:	931a      	str	r3, [sp, #104]	; 0x68
 800e93e:	4654      	mov	r4, sl
 800e940:	2205      	movs	r2, #5
 800e942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e946:	4858      	ldr	r0, [pc, #352]	; (800eaa8 <_vfiprintf_r+0x24c>)
 800e948:	f7f1 fc52 	bl	80001f0 <memchr>
 800e94c:	9a04      	ldr	r2, [sp, #16]
 800e94e:	b9d8      	cbnz	r0, 800e988 <_vfiprintf_r+0x12c>
 800e950:	06d1      	lsls	r1, r2, #27
 800e952:	bf44      	itt	mi
 800e954:	2320      	movmi	r3, #32
 800e956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e95a:	0713      	lsls	r3, r2, #28
 800e95c:	bf44      	itt	mi
 800e95e:	232b      	movmi	r3, #43	; 0x2b
 800e960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e964:	f89a 3000 	ldrb.w	r3, [sl]
 800e968:	2b2a      	cmp	r3, #42	; 0x2a
 800e96a:	d015      	beq.n	800e998 <_vfiprintf_r+0x13c>
 800e96c:	9a07      	ldr	r2, [sp, #28]
 800e96e:	4654      	mov	r4, sl
 800e970:	2000      	movs	r0, #0
 800e972:	f04f 0c0a 	mov.w	ip, #10
 800e976:	4621      	mov	r1, r4
 800e978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e97c:	3b30      	subs	r3, #48	; 0x30
 800e97e:	2b09      	cmp	r3, #9
 800e980:	d94e      	bls.n	800ea20 <_vfiprintf_r+0x1c4>
 800e982:	b1b0      	cbz	r0, 800e9b2 <_vfiprintf_r+0x156>
 800e984:	9207      	str	r2, [sp, #28]
 800e986:	e014      	b.n	800e9b2 <_vfiprintf_r+0x156>
 800e988:	eba0 0308 	sub.w	r3, r0, r8
 800e98c:	fa09 f303 	lsl.w	r3, r9, r3
 800e990:	4313      	orrs	r3, r2
 800e992:	9304      	str	r3, [sp, #16]
 800e994:	46a2      	mov	sl, r4
 800e996:	e7d2      	b.n	800e93e <_vfiprintf_r+0xe2>
 800e998:	9b03      	ldr	r3, [sp, #12]
 800e99a:	1d19      	adds	r1, r3, #4
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	9103      	str	r1, [sp, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	bfbb      	ittet	lt
 800e9a4:	425b      	neglt	r3, r3
 800e9a6:	f042 0202 	orrlt.w	r2, r2, #2
 800e9aa:	9307      	strge	r3, [sp, #28]
 800e9ac:	9307      	strlt	r3, [sp, #28]
 800e9ae:	bfb8      	it	lt
 800e9b0:	9204      	strlt	r2, [sp, #16]
 800e9b2:	7823      	ldrb	r3, [r4, #0]
 800e9b4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9b6:	d10c      	bne.n	800e9d2 <_vfiprintf_r+0x176>
 800e9b8:	7863      	ldrb	r3, [r4, #1]
 800e9ba:	2b2a      	cmp	r3, #42	; 0x2a
 800e9bc:	d135      	bne.n	800ea2a <_vfiprintf_r+0x1ce>
 800e9be:	9b03      	ldr	r3, [sp, #12]
 800e9c0:	1d1a      	adds	r2, r3, #4
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	9203      	str	r2, [sp, #12]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	bfb8      	it	lt
 800e9ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9ce:	3402      	adds	r4, #2
 800e9d0:	9305      	str	r3, [sp, #20]
 800e9d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eab8 <_vfiprintf_r+0x25c>
 800e9d6:	7821      	ldrb	r1, [r4, #0]
 800e9d8:	2203      	movs	r2, #3
 800e9da:	4650      	mov	r0, sl
 800e9dc:	f7f1 fc08 	bl	80001f0 <memchr>
 800e9e0:	b140      	cbz	r0, 800e9f4 <_vfiprintf_r+0x198>
 800e9e2:	2340      	movs	r3, #64	; 0x40
 800e9e4:	eba0 000a 	sub.w	r0, r0, sl
 800e9e8:	fa03 f000 	lsl.w	r0, r3, r0
 800e9ec:	9b04      	ldr	r3, [sp, #16]
 800e9ee:	4303      	orrs	r3, r0
 800e9f0:	3401      	adds	r4, #1
 800e9f2:	9304      	str	r3, [sp, #16]
 800e9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9f8:	482c      	ldr	r0, [pc, #176]	; (800eaac <_vfiprintf_r+0x250>)
 800e9fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9fe:	2206      	movs	r2, #6
 800ea00:	f7f1 fbf6 	bl	80001f0 <memchr>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d03f      	beq.n	800ea88 <_vfiprintf_r+0x22c>
 800ea08:	4b29      	ldr	r3, [pc, #164]	; (800eab0 <_vfiprintf_r+0x254>)
 800ea0a:	bb1b      	cbnz	r3, 800ea54 <_vfiprintf_r+0x1f8>
 800ea0c:	9b03      	ldr	r3, [sp, #12]
 800ea0e:	3307      	adds	r3, #7
 800ea10:	f023 0307 	bic.w	r3, r3, #7
 800ea14:	3308      	adds	r3, #8
 800ea16:	9303      	str	r3, [sp, #12]
 800ea18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea1a:	443b      	add	r3, r7
 800ea1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea1e:	e767      	b.n	800e8f0 <_vfiprintf_r+0x94>
 800ea20:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea24:	460c      	mov	r4, r1
 800ea26:	2001      	movs	r0, #1
 800ea28:	e7a5      	b.n	800e976 <_vfiprintf_r+0x11a>
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	3401      	adds	r4, #1
 800ea2e:	9305      	str	r3, [sp, #20]
 800ea30:	4619      	mov	r1, r3
 800ea32:	f04f 0c0a 	mov.w	ip, #10
 800ea36:	4620      	mov	r0, r4
 800ea38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea3c:	3a30      	subs	r2, #48	; 0x30
 800ea3e:	2a09      	cmp	r2, #9
 800ea40:	d903      	bls.n	800ea4a <_vfiprintf_r+0x1ee>
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d0c5      	beq.n	800e9d2 <_vfiprintf_r+0x176>
 800ea46:	9105      	str	r1, [sp, #20]
 800ea48:	e7c3      	b.n	800e9d2 <_vfiprintf_r+0x176>
 800ea4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea4e:	4604      	mov	r4, r0
 800ea50:	2301      	movs	r3, #1
 800ea52:	e7f0      	b.n	800ea36 <_vfiprintf_r+0x1da>
 800ea54:	ab03      	add	r3, sp, #12
 800ea56:	9300      	str	r3, [sp, #0]
 800ea58:	462a      	mov	r2, r5
 800ea5a:	4b16      	ldr	r3, [pc, #88]	; (800eab4 <_vfiprintf_r+0x258>)
 800ea5c:	a904      	add	r1, sp, #16
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f7fe f84a 	bl	800caf8 <_printf_float>
 800ea64:	4607      	mov	r7, r0
 800ea66:	1c78      	adds	r0, r7, #1
 800ea68:	d1d6      	bne.n	800ea18 <_vfiprintf_r+0x1bc>
 800ea6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea6c:	07d9      	lsls	r1, r3, #31
 800ea6e:	d405      	bmi.n	800ea7c <_vfiprintf_r+0x220>
 800ea70:	89ab      	ldrh	r3, [r5, #12]
 800ea72:	059a      	lsls	r2, r3, #22
 800ea74:	d402      	bmi.n	800ea7c <_vfiprintf_r+0x220>
 800ea76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea78:	f7ff feb4 	bl	800e7e4 <__retarget_lock_release_recursive>
 800ea7c:	89ab      	ldrh	r3, [r5, #12]
 800ea7e:	065b      	lsls	r3, r3, #25
 800ea80:	f53f af12 	bmi.w	800e8a8 <_vfiprintf_r+0x4c>
 800ea84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea86:	e711      	b.n	800e8ac <_vfiprintf_r+0x50>
 800ea88:	ab03      	add	r3, sp, #12
 800ea8a:	9300      	str	r3, [sp, #0]
 800ea8c:	462a      	mov	r2, r5
 800ea8e:	4b09      	ldr	r3, [pc, #36]	; (800eab4 <_vfiprintf_r+0x258>)
 800ea90:	a904      	add	r1, sp, #16
 800ea92:	4630      	mov	r0, r6
 800ea94:	f7fe fad4 	bl	800d040 <_printf_i>
 800ea98:	e7e4      	b.n	800ea64 <_vfiprintf_r+0x208>
 800ea9a:	bf00      	nop
 800ea9c:	0800fa24 	.word	0x0800fa24
 800eaa0:	0800fa44 	.word	0x0800fa44
 800eaa4:	0800fa04 	.word	0x0800fa04
 800eaa8:	0800f8f2 	.word	0x0800f8f2
 800eaac:	0800f8fc 	.word	0x0800f8fc
 800eab0:	0800caf9 	.word	0x0800caf9
 800eab4:	0800e839 	.word	0x0800e839
 800eab8:	0800f8f8 	.word	0x0800f8f8

0800eabc <__swbuf_r>:
 800eabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eabe:	460e      	mov	r6, r1
 800eac0:	4614      	mov	r4, r2
 800eac2:	4605      	mov	r5, r0
 800eac4:	b118      	cbz	r0, 800eace <__swbuf_r+0x12>
 800eac6:	6983      	ldr	r3, [r0, #24]
 800eac8:	b90b      	cbnz	r3, 800eace <__swbuf_r+0x12>
 800eaca:	f000 f9df 	bl	800ee8c <__sinit>
 800eace:	4b21      	ldr	r3, [pc, #132]	; (800eb54 <__swbuf_r+0x98>)
 800ead0:	429c      	cmp	r4, r3
 800ead2:	d12b      	bne.n	800eb2c <__swbuf_r+0x70>
 800ead4:	686c      	ldr	r4, [r5, #4]
 800ead6:	69a3      	ldr	r3, [r4, #24]
 800ead8:	60a3      	str	r3, [r4, #8]
 800eada:	89a3      	ldrh	r3, [r4, #12]
 800eadc:	071a      	lsls	r2, r3, #28
 800eade:	d52f      	bpl.n	800eb40 <__swbuf_r+0x84>
 800eae0:	6923      	ldr	r3, [r4, #16]
 800eae2:	b36b      	cbz	r3, 800eb40 <__swbuf_r+0x84>
 800eae4:	6923      	ldr	r3, [r4, #16]
 800eae6:	6820      	ldr	r0, [r4, #0]
 800eae8:	1ac0      	subs	r0, r0, r3
 800eaea:	6963      	ldr	r3, [r4, #20]
 800eaec:	b2f6      	uxtb	r6, r6
 800eaee:	4283      	cmp	r3, r0
 800eaf0:	4637      	mov	r7, r6
 800eaf2:	dc04      	bgt.n	800eafe <__swbuf_r+0x42>
 800eaf4:	4621      	mov	r1, r4
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f000 f934 	bl	800ed64 <_fflush_r>
 800eafc:	bb30      	cbnz	r0, 800eb4c <__swbuf_r+0x90>
 800eafe:	68a3      	ldr	r3, [r4, #8]
 800eb00:	3b01      	subs	r3, #1
 800eb02:	60a3      	str	r3, [r4, #8]
 800eb04:	6823      	ldr	r3, [r4, #0]
 800eb06:	1c5a      	adds	r2, r3, #1
 800eb08:	6022      	str	r2, [r4, #0]
 800eb0a:	701e      	strb	r6, [r3, #0]
 800eb0c:	6963      	ldr	r3, [r4, #20]
 800eb0e:	3001      	adds	r0, #1
 800eb10:	4283      	cmp	r3, r0
 800eb12:	d004      	beq.n	800eb1e <__swbuf_r+0x62>
 800eb14:	89a3      	ldrh	r3, [r4, #12]
 800eb16:	07db      	lsls	r3, r3, #31
 800eb18:	d506      	bpl.n	800eb28 <__swbuf_r+0x6c>
 800eb1a:	2e0a      	cmp	r6, #10
 800eb1c:	d104      	bne.n	800eb28 <__swbuf_r+0x6c>
 800eb1e:	4621      	mov	r1, r4
 800eb20:	4628      	mov	r0, r5
 800eb22:	f000 f91f 	bl	800ed64 <_fflush_r>
 800eb26:	b988      	cbnz	r0, 800eb4c <__swbuf_r+0x90>
 800eb28:	4638      	mov	r0, r7
 800eb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb2c:	4b0a      	ldr	r3, [pc, #40]	; (800eb58 <__swbuf_r+0x9c>)
 800eb2e:	429c      	cmp	r4, r3
 800eb30:	d101      	bne.n	800eb36 <__swbuf_r+0x7a>
 800eb32:	68ac      	ldr	r4, [r5, #8]
 800eb34:	e7cf      	b.n	800ead6 <__swbuf_r+0x1a>
 800eb36:	4b09      	ldr	r3, [pc, #36]	; (800eb5c <__swbuf_r+0xa0>)
 800eb38:	429c      	cmp	r4, r3
 800eb3a:	bf08      	it	eq
 800eb3c:	68ec      	ldreq	r4, [r5, #12]
 800eb3e:	e7ca      	b.n	800ead6 <__swbuf_r+0x1a>
 800eb40:	4621      	mov	r1, r4
 800eb42:	4628      	mov	r0, r5
 800eb44:	f000 f81a 	bl	800eb7c <__swsetup_r>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d0cb      	beq.n	800eae4 <__swbuf_r+0x28>
 800eb4c:	f04f 37ff 	mov.w	r7, #4294967295
 800eb50:	e7ea      	b.n	800eb28 <__swbuf_r+0x6c>
 800eb52:	bf00      	nop
 800eb54:	0800fa24 	.word	0x0800fa24
 800eb58:	0800fa44 	.word	0x0800fa44
 800eb5c:	0800fa04 	.word	0x0800fa04

0800eb60 <__ascii_wctomb>:
 800eb60:	b149      	cbz	r1, 800eb76 <__ascii_wctomb+0x16>
 800eb62:	2aff      	cmp	r2, #255	; 0xff
 800eb64:	bf85      	ittet	hi
 800eb66:	238a      	movhi	r3, #138	; 0x8a
 800eb68:	6003      	strhi	r3, [r0, #0]
 800eb6a:	700a      	strbls	r2, [r1, #0]
 800eb6c:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb70:	bf98      	it	ls
 800eb72:	2001      	movls	r0, #1
 800eb74:	4770      	bx	lr
 800eb76:	4608      	mov	r0, r1
 800eb78:	4770      	bx	lr
	...

0800eb7c <__swsetup_r>:
 800eb7c:	4b32      	ldr	r3, [pc, #200]	; (800ec48 <__swsetup_r+0xcc>)
 800eb7e:	b570      	push	{r4, r5, r6, lr}
 800eb80:	681d      	ldr	r5, [r3, #0]
 800eb82:	4606      	mov	r6, r0
 800eb84:	460c      	mov	r4, r1
 800eb86:	b125      	cbz	r5, 800eb92 <__swsetup_r+0x16>
 800eb88:	69ab      	ldr	r3, [r5, #24]
 800eb8a:	b913      	cbnz	r3, 800eb92 <__swsetup_r+0x16>
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f000 f97d 	bl	800ee8c <__sinit>
 800eb92:	4b2e      	ldr	r3, [pc, #184]	; (800ec4c <__swsetup_r+0xd0>)
 800eb94:	429c      	cmp	r4, r3
 800eb96:	d10f      	bne.n	800ebb8 <__swsetup_r+0x3c>
 800eb98:	686c      	ldr	r4, [r5, #4]
 800eb9a:	89a3      	ldrh	r3, [r4, #12]
 800eb9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eba0:	0719      	lsls	r1, r3, #28
 800eba2:	d42c      	bmi.n	800ebfe <__swsetup_r+0x82>
 800eba4:	06dd      	lsls	r5, r3, #27
 800eba6:	d411      	bmi.n	800ebcc <__swsetup_r+0x50>
 800eba8:	2309      	movs	r3, #9
 800ebaa:	6033      	str	r3, [r6, #0]
 800ebac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ebb0:	81a3      	strh	r3, [r4, #12]
 800ebb2:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb6:	e03e      	b.n	800ec36 <__swsetup_r+0xba>
 800ebb8:	4b25      	ldr	r3, [pc, #148]	; (800ec50 <__swsetup_r+0xd4>)
 800ebba:	429c      	cmp	r4, r3
 800ebbc:	d101      	bne.n	800ebc2 <__swsetup_r+0x46>
 800ebbe:	68ac      	ldr	r4, [r5, #8]
 800ebc0:	e7eb      	b.n	800eb9a <__swsetup_r+0x1e>
 800ebc2:	4b24      	ldr	r3, [pc, #144]	; (800ec54 <__swsetup_r+0xd8>)
 800ebc4:	429c      	cmp	r4, r3
 800ebc6:	bf08      	it	eq
 800ebc8:	68ec      	ldreq	r4, [r5, #12]
 800ebca:	e7e6      	b.n	800eb9a <__swsetup_r+0x1e>
 800ebcc:	0758      	lsls	r0, r3, #29
 800ebce:	d512      	bpl.n	800ebf6 <__swsetup_r+0x7a>
 800ebd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebd2:	b141      	cbz	r1, 800ebe6 <__swsetup_r+0x6a>
 800ebd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebd8:	4299      	cmp	r1, r3
 800ebda:	d002      	beq.n	800ebe2 <__swsetup_r+0x66>
 800ebdc:	4630      	mov	r0, r6
 800ebde:	f7fd fe0b 	bl	800c7f8 <_free_r>
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	6363      	str	r3, [r4, #52]	; 0x34
 800ebe6:	89a3      	ldrh	r3, [r4, #12]
 800ebe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ebec:	81a3      	strh	r3, [r4, #12]
 800ebee:	2300      	movs	r3, #0
 800ebf0:	6063      	str	r3, [r4, #4]
 800ebf2:	6923      	ldr	r3, [r4, #16]
 800ebf4:	6023      	str	r3, [r4, #0]
 800ebf6:	89a3      	ldrh	r3, [r4, #12]
 800ebf8:	f043 0308 	orr.w	r3, r3, #8
 800ebfc:	81a3      	strh	r3, [r4, #12]
 800ebfe:	6923      	ldr	r3, [r4, #16]
 800ec00:	b94b      	cbnz	r3, 800ec16 <__swsetup_r+0x9a>
 800ec02:	89a3      	ldrh	r3, [r4, #12]
 800ec04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec0c:	d003      	beq.n	800ec16 <__swsetup_r+0x9a>
 800ec0e:	4621      	mov	r1, r4
 800ec10:	4630      	mov	r0, r6
 800ec12:	f000 f9fd 	bl	800f010 <__smakebuf_r>
 800ec16:	89a0      	ldrh	r0, [r4, #12]
 800ec18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec1c:	f010 0301 	ands.w	r3, r0, #1
 800ec20:	d00a      	beq.n	800ec38 <__swsetup_r+0xbc>
 800ec22:	2300      	movs	r3, #0
 800ec24:	60a3      	str	r3, [r4, #8]
 800ec26:	6963      	ldr	r3, [r4, #20]
 800ec28:	425b      	negs	r3, r3
 800ec2a:	61a3      	str	r3, [r4, #24]
 800ec2c:	6923      	ldr	r3, [r4, #16]
 800ec2e:	b943      	cbnz	r3, 800ec42 <__swsetup_r+0xc6>
 800ec30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec34:	d1ba      	bne.n	800ebac <__swsetup_r+0x30>
 800ec36:	bd70      	pop	{r4, r5, r6, pc}
 800ec38:	0781      	lsls	r1, r0, #30
 800ec3a:	bf58      	it	pl
 800ec3c:	6963      	ldrpl	r3, [r4, #20]
 800ec3e:	60a3      	str	r3, [r4, #8]
 800ec40:	e7f4      	b.n	800ec2c <__swsetup_r+0xb0>
 800ec42:	2000      	movs	r0, #0
 800ec44:	e7f7      	b.n	800ec36 <__swsetup_r+0xba>
 800ec46:	bf00      	nop
 800ec48:	2000000c 	.word	0x2000000c
 800ec4c:	0800fa24 	.word	0x0800fa24
 800ec50:	0800fa44 	.word	0x0800fa44
 800ec54:	0800fa04 	.word	0x0800fa04

0800ec58 <__sflush_r>:
 800ec58:	898a      	ldrh	r2, [r1, #12]
 800ec5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec5e:	4605      	mov	r5, r0
 800ec60:	0710      	lsls	r0, r2, #28
 800ec62:	460c      	mov	r4, r1
 800ec64:	d458      	bmi.n	800ed18 <__sflush_r+0xc0>
 800ec66:	684b      	ldr	r3, [r1, #4]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	dc05      	bgt.n	800ec78 <__sflush_r+0x20>
 800ec6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	dc02      	bgt.n	800ec78 <__sflush_r+0x20>
 800ec72:	2000      	movs	r0, #0
 800ec74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec7a:	2e00      	cmp	r6, #0
 800ec7c:	d0f9      	beq.n	800ec72 <__sflush_r+0x1a>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec84:	682f      	ldr	r7, [r5, #0]
 800ec86:	602b      	str	r3, [r5, #0]
 800ec88:	d032      	beq.n	800ecf0 <__sflush_r+0x98>
 800ec8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec8c:	89a3      	ldrh	r3, [r4, #12]
 800ec8e:	075a      	lsls	r2, r3, #29
 800ec90:	d505      	bpl.n	800ec9e <__sflush_r+0x46>
 800ec92:	6863      	ldr	r3, [r4, #4]
 800ec94:	1ac0      	subs	r0, r0, r3
 800ec96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec98:	b10b      	cbz	r3, 800ec9e <__sflush_r+0x46>
 800ec9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec9c:	1ac0      	subs	r0, r0, r3
 800ec9e:	2300      	movs	r3, #0
 800eca0:	4602      	mov	r2, r0
 800eca2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eca4:	6a21      	ldr	r1, [r4, #32]
 800eca6:	4628      	mov	r0, r5
 800eca8:	47b0      	blx	r6
 800ecaa:	1c43      	adds	r3, r0, #1
 800ecac:	89a3      	ldrh	r3, [r4, #12]
 800ecae:	d106      	bne.n	800ecbe <__sflush_r+0x66>
 800ecb0:	6829      	ldr	r1, [r5, #0]
 800ecb2:	291d      	cmp	r1, #29
 800ecb4:	d82c      	bhi.n	800ed10 <__sflush_r+0xb8>
 800ecb6:	4a2a      	ldr	r2, [pc, #168]	; (800ed60 <__sflush_r+0x108>)
 800ecb8:	40ca      	lsrs	r2, r1
 800ecba:	07d6      	lsls	r6, r2, #31
 800ecbc:	d528      	bpl.n	800ed10 <__sflush_r+0xb8>
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	6062      	str	r2, [r4, #4]
 800ecc2:	04d9      	lsls	r1, r3, #19
 800ecc4:	6922      	ldr	r2, [r4, #16]
 800ecc6:	6022      	str	r2, [r4, #0]
 800ecc8:	d504      	bpl.n	800ecd4 <__sflush_r+0x7c>
 800ecca:	1c42      	adds	r2, r0, #1
 800eccc:	d101      	bne.n	800ecd2 <__sflush_r+0x7a>
 800ecce:	682b      	ldr	r3, [r5, #0]
 800ecd0:	b903      	cbnz	r3, 800ecd4 <__sflush_r+0x7c>
 800ecd2:	6560      	str	r0, [r4, #84]	; 0x54
 800ecd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecd6:	602f      	str	r7, [r5, #0]
 800ecd8:	2900      	cmp	r1, #0
 800ecda:	d0ca      	beq.n	800ec72 <__sflush_r+0x1a>
 800ecdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ece0:	4299      	cmp	r1, r3
 800ece2:	d002      	beq.n	800ecea <__sflush_r+0x92>
 800ece4:	4628      	mov	r0, r5
 800ece6:	f7fd fd87 	bl	800c7f8 <_free_r>
 800ecea:	2000      	movs	r0, #0
 800ecec:	6360      	str	r0, [r4, #52]	; 0x34
 800ecee:	e7c1      	b.n	800ec74 <__sflush_r+0x1c>
 800ecf0:	6a21      	ldr	r1, [r4, #32]
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	4628      	mov	r0, r5
 800ecf6:	47b0      	blx	r6
 800ecf8:	1c41      	adds	r1, r0, #1
 800ecfa:	d1c7      	bne.n	800ec8c <__sflush_r+0x34>
 800ecfc:	682b      	ldr	r3, [r5, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d0c4      	beq.n	800ec8c <__sflush_r+0x34>
 800ed02:	2b1d      	cmp	r3, #29
 800ed04:	d001      	beq.n	800ed0a <__sflush_r+0xb2>
 800ed06:	2b16      	cmp	r3, #22
 800ed08:	d101      	bne.n	800ed0e <__sflush_r+0xb6>
 800ed0a:	602f      	str	r7, [r5, #0]
 800ed0c:	e7b1      	b.n	800ec72 <__sflush_r+0x1a>
 800ed0e:	89a3      	ldrh	r3, [r4, #12]
 800ed10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed14:	81a3      	strh	r3, [r4, #12]
 800ed16:	e7ad      	b.n	800ec74 <__sflush_r+0x1c>
 800ed18:	690f      	ldr	r7, [r1, #16]
 800ed1a:	2f00      	cmp	r7, #0
 800ed1c:	d0a9      	beq.n	800ec72 <__sflush_r+0x1a>
 800ed1e:	0793      	lsls	r3, r2, #30
 800ed20:	680e      	ldr	r6, [r1, #0]
 800ed22:	bf08      	it	eq
 800ed24:	694b      	ldreq	r3, [r1, #20]
 800ed26:	600f      	str	r7, [r1, #0]
 800ed28:	bf18      	it	ne
 800ed2a:	2300      	movne	r3, #0
 800ed2c:	eba6 0807 	sub.w	r8, r6, r7
 800ed30:	608b      	str	r3, [r1, #8]
 800ed32:	f1b8 0f00 	cmp.w	r8, #0
 800ed36:	dd9c      	ble.n	800ec72 <__sflush_r+0x1a>
 800ed38:	6a21      	ldr	r1, [r4, #32]
 800ed3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed3c:	4643      	mov	r3, r8
 800ed3e:	463a      	mov	r2, r7
 800ed40:	4628      	mov	r0, r5
 800ed42:	47b0      	blx	r6
 800ed44:	2800      	cmp	r0, #0
 800ed46:	dc06      	bgt.n	800ed56 <__sflush_r+0xfe>
 800ed48:	89a3      	ldrh	r3, [r4, #12]
 800ed4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed4e:	81a3      	strh	r3, [r4, #12]
 800ed50:	f04f 30ff 	mov.w	r0, #4294967295
 800ed54:	e78e      	b.n	800ec74 <__sflush_r+0x1c>
 800ed56:	4407      	add	r7, r0
 800ed58:	eba8 0800 	sub.w	r8, r8, r0
 800ed5c:	e7e9      	b.n	800ed32 <__sflush_r+0xda>
 800ed5e:	bf00      	nop
 800ed60:	20400001 	.word	0x20400001

0800ed64 <_fflush_r>:
 800ed64:	b538      	push	{r3, r4, r5, lr}
 800ed66:	690b      	ldr	r3, [r1, #16]
 800ed68:	4605      	mov	r5, r0
 800ed6a:	460c      	mov	r4, r1
 800ed6c:	b913      	cbnz	r3, 800ed74 <_fflush_r+0x10>
 800ed6e:	2500      	movs	r5, #0
 800ed70:	4628      	mov	r0, r5
 800ed72:	bd38      	pop	{r3, r4, r5, pc}
 800ed74:	b118      	cbz	r0, 800ed7e <_fflush_r+0x1a>
 800ed76:	6983      	ldr	r3, [r0, #24]
 800ed78:	b90b      	cbnz	r3, 800ed7e <_fflush_r+0x1a>
 800ed7a:	f000 f887 	bl	800ee8c <__sinit>
 800ed7e:	4b14      	ldr	r3, [pc, #80]	; (800edd0 <_fflush_r+0x6c>)
 800ed80:	429c      	cmp	r4, r3
 800ed82:	d11b      	bne.n	800edbc <_fflush_r+0x58>
 800ed84:	686c      	ldr	r4, [r5, #4]
 800ed86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d0ef      	beq.n	800ed6e <_fflush_r+0xa>
 800ed8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed90:	07d0      	lsls	r0, r2, #31
 800ed92:	d404      	bmi.n	800ed9e <_fflush_r+0x3a>
 800ed94:	0599      	lsls	r1, r3, #22
 800ed96:	d402      	bmi.n	800ed9e <_fflush_r+0x3a>
 800ed98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed9a:	f7ff fd22 	bl	800e7e2 <__retarget_lock_acquire_recursive>
 800ed9e:	4628      	mov	r0, r5
 800eda0:	4621      	mov	r1, r4
 800eda2:	f7ff ff59 	bl	800ec58 <__sflush_r>
 800eda6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eda8:	07da      	lsls	r2, r3, #31
 800edaa:	4605      	mov	r5, r0
 800edac:	d4e0      	bmi.n	800ed70 <_fflush_r+0xc>
 800edae:	89a3      	ldrh	r3, [r4, #12]
 800edb0:	059b      	lsls	r3, r3, #22
 800edb2:	d4dd      	bmi.n	800ed70 <_fflush_r+0xc>
 800edb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edb6:	f7ff fd15 	bl	800e7e4 <__retarget_lock_release_recursive>
 800edba:	e7d9      	b.n	800ed70 <_fflush_r+0xc>
 800edbc:	4b05      	ldr	r3, [pc, #20]	; (800edd4 <_fflush_r+0x70>)
 800edbe:	429c      	cmp	r4, r3
 800edc0:	d101      	bne.n	800edc6 <_fflush_r+0x62>
 800edc2:	68ac      	ldr	r4, [r5, #8]
 800edc4:	e7df      	b.n	800ed86 <_fflush_r+0x22>
 800edc6:	4b04      	ldr	r3, [pc, #16]	; (800edd8 <_fflush_r+0x74>)
 800edc8:	429c      	cmp	r4, r3
 800edca:	bf08      	it	eq
 800edcc:	68ec      	ldreq	r4, [r5, #12]
 800edce:	e7da      	b.n	800ed86 <_fflush_r+0x22>
 800edd0:	0800fa24 	.word	0x0800fa24
 800edd4:	0800fa44 	.word	0x0800fa44
 800edd8:	0800fa04 	.word	0x0800fa04

0800eddc <std>:
 800eddc:	2300      	movs	r3, #0
 800edde:	b510      	push	{r4, lr}
 800ede0:	4604      	mov	r4, r0
 800ede2:	e9c0 3300 	strd	r3, r3, [r0]
 800ede6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800edea:	6083      	str	r3, [r0, #8]
 800edec:	8181      	strh	r1, [r0, #12]
 800edee:	6643      	str	r3, [r0, #100]	; 0x64
 800edf0:	81c2      	strh	r2, [r0, #14]
 800edf2:	6183      	str	r3, [r0, #24]
 800edf4:	4619      	mov	r1, r3
 800edf6:	2208      	movs	r2, #8
 800edf8:	305c      	adds	r0, #92	; 0x5c
 800edfa:	f7fd fcf5 	bl	800c7e8 <memset>
 800edfe:	4b05      	ldr	r3, [pc, #20]	; (800ee14 <std+0x38>)
 800ee00:	6263      	str	r3, [r4, #36]	; 0x24
 800ee02:	4b05      	ldr	r3, [pc, #20]	; (800ee18 <std+0x3c>)
 800ee04:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee06:	4b05      	ldr	r3, [pc, #20]	; (800ee1c <std+0x40>)
 800ee08:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee0a:	4b05      	ldr	r3, [pc, #20]	; (800ee20 <std+0x44>)
 800ee0c:	6224      	str	r4, [r4, #32]
 800ee0e:	6323      	str	r3, [r4, #48]	; 0x30
 800ee10:	bd10      	pop	{r4, pc}
 800ee12:	bf00      	nop
 800ee14:	0800f091 	.word	0x0800f091
 800ee18:	0800f0b3 	.word	0x0800f0b3
 800ee1c:	0800f0eb 	.word	0x0800f0eb
 800ee20:	0800f10f 	.word	0x0800f10f

0800ee24 <_cleanup_r>:
 800ee24:	4901      	ldr	r1, [pc, #4]	; (800ee2c <_cleanup_r+0x8>)
 800ee26:	f000 b8af 	b.w	800ef88 <_fwalk_reent>
 800ee2a:	bf00      	nop
 800ee2c:	0800ed65 	.word	0x0800ed65

0800ee30 <__sfmoreglue>:
 800ee30:	b570      	push	{r4, r5, r6, lr}
 800ee32:	2268      	movs	r2, #104	; 0x68
 800ee34:	1e4d      	subs	r5, r1, #1
 800ee36:	4355      	muls	r5, r2
 800ee38:	460e      	mov	r6, r1
 800ee3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee3e:	f7fd fd47 	bl	800c8d0 <_malloc_r>
 800ee42:	4604      	mov	r4, r0
 800ee44:	b140      	cbz	r0, 800ee58 <__sfmoreglue+0x28>
 800ee46:	2100      	movs	r1, #0
 800ee48:	e9c0 1600 	strd	r1, r6, [r0]
 800ee4c:	300c      	adds	r0, #12
 800ee4e:	60a0      	str	r0, [r4, #8]
 800ee50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee54:	f7fd fcc8 	bl	800c7e8 <memset>
 800ee58:	4620      	mov	r0, r4
 800ee5a:	bd70      	pop	{r4, r5, r6, pc}

0800ee5c <__sfp_lock_acquire>:
 800ee5c:	4801      	ldr	r0, [pc, #4]	; (800ee64 <__sfp_lock_acquire+0x8>)
 800ee5e:	f7ff bcc0 	b.w	800e7e2 <__retarget_lock_acquire_recursive>
 800ee62:	bf00      	nop
 800ee64:	20000b39 	.word	0x20000b39

0800ee68 <__sfp_lock_release>:
 800ee68:	4801      	ldr	r0, [pc, #4]	; (800ee70 <__sfp_lock_release+0x8>)
 800ee6a:	f7ff bcbb 	b.w	800e7e4 <__retarget_lock_release_recursive>
 800ee6e:	bf00      	nop
 800ee70:	20000b39 	.word	0x20000b39

0800ee74 <__sinit_lock_acquire>:
 800ee74:	4801      	ldr	r0, [pc, #4]	; (800ee7c <__sinit_lock_acquire+0x8>)
 800ee76:	f7ff bcb4 	b.w	800e7e2 <__retarget_lock_acquire_recursive>
 800ee7a:	bf00      	nop
 800ee7c:	20000b3a 	.word	0x20000b3a

0800ee80 <__sinit_lock_release>:
 800ee80:	4801      	ldr	r0, [pc, #4]	; (800ee88 <__sinit_lock_release+0x8>)
 800ee82:	f7ff bcaf 	b.w	800e7e4 <__retarget_lock_release_recursive>
 800ee86:	bf00      	nop
 800ee88:	20000b3a 	.word	0x20000b3a

0800ee8c <__sinit>:
 800ee8c:	b510      	push	{r4, lr}
 800ee8e:	4604      	mov	r4, r0
 800ee90:	f7ff fff0 	bl	800ee74 <__sinit_lock_acquire>
 800ee94:	69a3      	ldr	r3, [r4, #24]
 800ee96:	b11b      	cbz	r3, 800eea0 <__sinit+0x14>
 800ee98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee9c:	f7ff bff0 	b.w	800ee80 <__sinit_lock_release>
 800eea0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eea4:	6523      	str	r3, [r4, #80]	; 0x50
 800eea6:	4b13      	ldr	r3, [pc, #76]	; (800eef4 <__sinit+0x68>)
 800eea8:	4a13      	ldr	r2, [pc, #76]	; (800eef8 <__sinit+0x6c>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	62a2      	str	r2, [r4, #40]	; 0x28
 800eeae:	42a3      	cmp	r3, r4
 800eeb0:	bf04      	itt	eq
 800eeb2:	2301      	moveq	r3, #1
 800eeb4:	61a3      	streq	r3, [r4, #24]
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	f000 f820 	bl	800eefc <__sfp>
 800eebc:	6060      	str	r0, [r4, #4]
 800eebe:	4620      	mov	r0, r4
 800eec0:	f000 f81c 	bl	800eefc <__sfp>
 800eec4:	60a0      	str	r0, [r4, #8]
 800eec6:	4620      	mov	r0, r4
 800eec8:	f000 f818 	bl	800eefc <__sfp>
 800eecc:	2200      	movs	r2, #0
 800eece:	60e0      	str	r0, [r4, #12]
 800eed0:	2104      	movs	r1, #4
 800eed2:	6860      	ldr	r0, [r4, #4]
 800eed4:	f7ff ff82 	bl	800eddc <std>
 800eed8:	68a0      	ldr	r0, [r4, #8]
 800eeda:	2201      	movs	r2, #1
 800eedc:	2109      	movs	r1, #9
 800eede:	f7ff ff7d 	bl	800eddc <std>
 800eee2:	68e0      	ldr	r0, [r4, #12]
 800eee4:	2202      	movs	r2, #2
 800eee6:	2112      	movs	r1, #18
 800eee8:	f7ff ff78 	bl	800eddc <std>
 800eeec:	2301      	movs	r3, #1
 800eeee:	61a3      	str	r3, [r4, #24]
 800eef0:	e7d2      	b.n	800ee98 <__sinit+0xc>
 800eef2:	bf00      	nop
 800eef4:	0800f688 	.word	0x0800f688
 800eef8:	0800ee25 	.word	0x0800ee25

0800eefc <__sfp>:
 800eefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eefe:	4607      	mov	r7, r0
 800ef00:	f7ff ffac 	bl	800ee5c <__sfp_lock_acquire>
 800ef04:	4b1e      	ldr	r3, [pc, #120]	; (800ef80 <__sfp+0x84>)
 800ef06:	681e      	ldr	r6, [r3, #0]
 800ef08:	69b3      	ldr	r3, [r6, #24]
 800ef0a:	b913      	cbnz	r3, 800ef12 <__sfp+0x16>
 800ef0c:	4630      	mov	r0, r6
 800ef0e:	f7ff ffbd 	bl	800ee8c <__sinit>
 800ef12:	3648      	adds	r6, #72	; 0x48
 800ef14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef18:	3b01      	subs	r3, #1
 800ef1a:	d503      	bpl.n	800ef24 <__sfp+0x28>
 800ef1c:	6833      	ldr	r3, [r6, #0]
 800ef1e:	b30b      	cbz	r3, 800ef64 <__sfp+0x68>
 800ef20:	6836      	ldr	r6, [r6, #0]
 800ef22:	e7f7      	b.n	800ef14 <__sfp+0x18>
 800ef24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef28:	b9d5      	cbnz	r5, 800ef60 <__sfp+0x64>
 800ef2a:	4b16      	ldr	r3, [pc, #88]	; (800ef84 <__sfp+0x88>)
 800ef2c:	60e3      	str	r3, [r4, #12]
 800ef2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ef32:	6665      	str	r5, [r4, #100]	; 0x64
 800ef34:	f7ff fc54 	bl	800e7e0 <__retarget_lock_init_recursive>
 800ef38:	f7ff ff96 	bl	800ee68 <__sfp_lock_release>
 800ef3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ef40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ef44:	6025      	str	r5, [r4, #0]
 800ef46:	61a5      	str	r5, [r4, #24]
 800ef48:	2208      	movs	r2, #8
 800ef4a:	4629      	mov	r1, r5
 800ef4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef50:	f7fd fc4a 	bl	800c7e8 <memset>
 800ef54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef60:	3468      	adds	r4, #104	; 0x68
 800ef62:	e7d9      	b.n	800ef18 <__sfp+0x1c>
 800ef64:	2104      	movs	r1, #4
 800ef66:	4638      	mov	r0, r7
 800ef68:	f7ff ff62 	bl	800ee30 <__sfmoreglue>
 800ef6c:	4604      	mov	r4, r0
 800ef6e:	6030      	str	r0, [r6, #0]
 800ef70:	2800      	cmp	r0, #0
 800ef72:	d1d5      	bne.n	800ef20 <__sfp+0x24>
 800ef74:	f7ff ff78 	bl	800ee68 <__sfp_lock_release>
 800ef78:	230c      	movs	r3, #12
 800ef7a:	603b      	str	r3, [r7, #0]
 800ef7c:	e7ee      	b.n	800ef5c <__sfp+0x60>
 800ef7e:	bf00      	nop
 800ef80:	0800f688 	.word	0x0800f688
 800ef84:	ffff0001 	.word	0xffff0001

0800ef88 <_fwalk_reent>:
 800ef88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef8c:	4606      	mov	r6, r0
 800ef8e:	4688      	mov	r8, r1
 800ef90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef94:	2700      	movs	r7, #0
 800ef96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef9a:	f1b9 0901 	subs.w	r9, r9, #1
 800ef9e:	d505      	bpl.n	800efac <_fwalk_reent+0x24>
 800efa0:	6824      	ldr	r4, [r4, #0]
 800efa2:	2c00      	cmp	r4, #0
 800efa4:	d1f7      	bne.n	800ef96 <_fwalk_reent+0xe>
 800efa6:	4638      	mov	r0, r7
 800efa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efac:	89ab      	ldrh	r3, [r5, #12]
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d907      	bls.n	800efc2 <_fwalk_reent+0x3a>
 800efb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800efb6:	3301      	adds	r3, #1
 800efb8:	d003      	beq.n	800efc2 <_fwalk_reent+0x3a>
 800efba:	4629      	mov	r1, r5
 800efbc:	4630      	mov	r0, r6
 800efbe:	47c0      	blx	r8
 800efc0:	4307      	orrs	r7, r0
 800efc2:	3568      	adds	r5, #104	; 0x68
 800efc4:	e7e9      	b.n	800ef9a <_fwalk_reent+0x12>

0800efc6 <__swhatbuf_r>:
 800efc6:	b570      	push	{r4, r5, r6, lr}
 800efc8:	460e      	mov	r6, r1
 800efca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efce:	2900      	cmp	r1, #0
 800efd0:	b096      	sub	sp, #88	; 0x58
 800efd2:	4614      	mov	r4, r2
 800efd4:	461d      	mov	r5, r3
 800efd6:	da08      	bge.n	800efea <__swhatbuf_r+0x24>
 800efd8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800efdc:	2200      	movs	r2, #0
 800efde:	602a      	str	r2, [r5, #0]
 800efe0:	061a      	lsls	r2, r3, #24
 800efe2:	d410      	bmi.n	800f006 <__swhatbuf_r+0x40>
 800efe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efe8:	e00e      	b.n	800f008 <__swhatbuf_r+0x42>
 800efea:	466a      	mov	r2, sp
 800efec:	f000 f8b6 	bl	800f15c <_fstat_r>
 800eff0:	2800      	cmp	r0, #0
 800eff2:	dbf1      	blt.n	800efd8 <__swhatbuf_r+0x12>
 800eff4:	9a01      	ldr	r2, [sp, #4]
 800eff6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800effa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800effe:	425a      	negs	r2, r3
 800f000:	415a      	adcs	r2, r3
 800f002:	602a      	str	r2, [r5, #0]
 800f004:	e7ee      	b.n	800efe4 <__swhatbuf_r+0x1e>
 800f006:	2340      	movs	r3, #64	; 0x40
 800f008:	2000      	movs	r0, #0
 800f00a:	6023      	str	r3, [r4, #0]
 800f00c:	b016      	add	sp, #88	; 0x58
 800f00e:	bd70      	pop	{r4, r5, r6, pc}

0800f010 <__smakebuf_r>:
 800f010:	898b      	ldrh	r3, [r1, #12]
 800f012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f014:	079d      	lsls	r5, r3, #30
 800f016:	4606      	mov	r6, r0
 800f018:	460c      	mov	r4, r1
 800f01a:	d507      	bpl.n	800f02c <__smakebuf_r+0x1c>
 800f01c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f020:	6023      	str	r3, [r4, #0]
 800f022:	6123      	str	r3, [r4, #16]
 800f024:	2301      	movs	r3, #1
 800f026:	6163      	str	r3, [r4, #20]
 800f028:	b002      	add	sp, #8
 800f02a:	bd70      	pop	{r4, r5, r6, pc}
 800f02c:	ab01      	add	r3, sp, #4
 800f02e:	466a      	mov	r2, sp
 800f030:	f7ff ffc9 	bl	800efc6 <__swhatbuf_r>
 800f034:	9900      	ldr	r1, [sp, #0]
 800f036:	4605      	mov	r5, r0
 800f038:	4630      	mov	r0, r6
 800f03a:	f7fd fc49 	bl	800c8d0 <_malloc_r>
 800f03e:	b948      	cbnz	r0, 800f054 <__smakebuf_r+0x44>
 800f040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f044:	059a      	lsls	r2, r3, #22
 800f046:	d4ef      	bmi.n	800f028 <__smakebuf_r+0x18>
 800f048:	f023 0303 	bic.w	r3, r3, #3
 800f04c:	f043 0302 	orr.w	r3, r3, #2
 800f050:	81a3      	strh	r3, [r4, #12]
 800f052:	e7e3      	b.n	800f01c <__smakebuf_r+0xc>
 800f054:	4b0d      	ldr	r3, [pc, #52]	; (800f08c <__smakebuf_r+0x7c>)
 800f056:	62b3      	str	r3, [r6, #40]	; 0x28
 800f058:	89a3      	ldrh	r3, [r4, #12]
 800f05a:	6020      	str	r0, [r4, #0]
 800f05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f060:	81a3      	strh	r3, [r4, #12]
 800f062:	9b00      	ldr	r3, [sp, #0]
 800f064:	6163      	str	r3, [r4, #20]
 800f066:	9b01      	ldr	r3, [sp, #4]
 800f068:	6120      	str	r0, [r4, #16]
 800f06a:	b15b      	cbz	r3, 800f084 <__smakebuf_r+0x74>
 800f06c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f070:	4630      	mov	r0, r6
 800f072:	f000 f885 	bl	800f180 <_isatty_r>
 800f076:	b128      	cbz	r0, 800f084 <__smakebuf_r+0x74>
 800f078:	89a3      	ldrh	r3, [r4, #12]
 800f07a:	f023 0303 	bic.w	r3, r3, #3
 800f07e:	f043 0301 	orr.w	r3, r3, #1
 800f082:	81a3      	strh	r3, [r4, #12]
 800f084:	89a0      	ldrh	r0, [r4, #12]
 800f086:	4305      	orrs	r5, r0
 800f088:	81a5      	strh	r5, [r4, #12]
 800f08a:	e7cd      	b.n	800f028 <__smakebuf_r+0x18>
 800f08c:	0800ee25 	.word	0x0800ee25

0800f090 <__sread>:
 800f090:	b510      	push	{r4, lr}
 800f092:	460c      	mov	r4, r1
 800f094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f098:	f000 f894 	bl	800f1c4 <_read_r>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	bfab      	itete	ge
 800f0a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0a2:	89a3      	ldrhlt	r3, [r4, #12]
 800f0a4:	181b      	addge	r3, r3, r0
 800f0a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f0aa:	bfac      	ite	ge
 800f0ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800f0ae:	81a3      	strhlt	r3, [r4, #12]
 800f0b0:	bd10      	pop	{r4, pc}

0800f0b2 <__swrite>:
 800f0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b6:	461f      	mov	r7, r3
 800f0b8:	898b      	ldrh	r3, [r1, #12]
 800f0ba:	05db      	lsls	r3, r3, #23
 800f0bc:	4605      	mov	r5, r0
 800f0be:	460c      	mov	r4, r1
 800f0c0:	4616      	mov	r6, r2
 800f0c2:	d505      	bpl.n	800f0d0 <__swrite+0x1e>
 800f0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0c8:	2302      	movs	r3, #2
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f000 f868 	bl	800f1a0 <_lseek_r>
 800f0d0:	89a3      	ldrh	r3, [r4, #12]
 800f0d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f0da:	81a3      	strh	r3, [r4, #12]
 800f0dc:	4632      	mov	r2, r6
 800f0de:	463b      	mov	r3, r7
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0e6:	f000 b817 	b.w	800f118 <_write_r>

0800f0ea <__sseek>:
 800f0ea:	b510      	push	{r4, lr}
 800f0ec:	460c      	mov	r4, r1
 800f0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0f2:	f000 f855 	bl	800f1a0 <_lseek_r>
 800f0f6:	1c43      	adds	r3, r0, #1
 800f0f8:	89a3      	ldrh	r3, [r4, #12]
 800f0fa:	bf15      	itete	ne
 800f0fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f0fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f106:	81a3      	strheq	r3, [r4, #12]
 800f108:	bf18      	it	ne
 800f10a:	81a3      	strhne	r3, [r4, #12]
 800f10c:	bd10      	pop	{r4, pc}

0800f10e <__sclose>:
 800f10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f112:	f000 b813 	b.w	800f13c <_close_r>
	...

0800f118 <_write_r>:
 800f118:	b538      	push	{r3, r4, r5, lr}
 800f11a:	4d07      	ldr	r5, [pc, #28]	; (800f138 <_write_r+0x20>)
 800f11c:	4604      	mov	r4, r0
 800f11e:	4608      	mov	r0, r1
 800f120:	4611      	mov	r1, r2
 800f122:	2200      	movs	r2, #0
 800f124:	602a      	str	r2, [r5, #0]
 800f126:	461a      	mov	r2, r3
 800f128:	f7f5 ff37 	bl	8004f9a <_write>
 800f12c:	1c43      	adds	r3, r0, #1
 800f12e:	d102      	bne.n	800f136 <_write_r+0x1e>
 800f130:	682b      	ldr	r3, [r5, #0]
 800f132:	b103      	cbz	r3, 800f136 <_write_r+0x1e>
 800f134:	6023      	str	r3, [r4, #0]
 800f136:	bd38      	pop	{r3, r4, r5, pc}
 800f138:	20000b34 	.word	0x20000b34

0800f13c <_close_r>:
 800f13c:	b538      	push	{r3, r4, r5, lr}
 800f13e:	4d06      	ldr	r5, [pc, #24]	; (800f158 <_close_r+0x1c>)
 800f140:	2300      	movs	r3, #0
 800f142:	4604      	mov	r4, r0
 800f144:	4608      	mov	r0, r1
 800f146:	602b      	str	r3, [r5, #0]
 800f148:	f7f5 ff43 	bl	8004fd2 <_close>
 800f14c:	1c43      	adds	r3, r0, #1
 800f14e:	d102      	bne.n	800f156 <_close_r+0x1a>
 800f150:	682b      	ldr	r3, [r5, #0]
 800f152:	b103      	cbz	r3, 800f156 <_close_r+0x1a>
 800f154:	6023      	str	r3, [r4, #0]
 800f156:	bd38      	pop	{r3, r4, r5, pc}
 800f158:	20000b34 	.word	0x20000b34

0800f15c <_fstat_r>:
 800f15c:	b538      	push	{r3, r4, r5, lr}
 800f15e:	4d07      	ldr	r5, [pc, #28]	; (800f17c <_fstat_r+0x20>)
 800f160:	2300      	movs	r3, #0
 800f162:	4604      	mov	r4, r0
 800f164:	4608      	mov	r0, r1
 800f166:	4611      	mov	r1, r2
 800f168:	602b      	str	r3, [r5, #0]
 800f16a:	f7f5 ff3e 	bl	8004fea <_fstat>
 800f16e:	1c43      	adds	r3, r0, #1
 800f170:	d102      	bne.n	800f178 <_fstat_r+0x1c>
 800f172:	682b      	ldr	r3, [r5, #0]
 800f174:	b103      	cbz	r3, 800f178 <_fstat_r+0x1c>
 800f176:	6023      	str	r3, [r4, #0]
 800f178:	bd38      	pop	{r3, r4, r5, pc}
 800f17a:	bf00      	nop
 800f17c:	20000b34 	.word	0x20000b34

0800f180 <_isatty_r>:
 800f180:	b538      	push	{r3, r4, r5, lr}
 800f182:	4d06      	ldr	r5, [pc, #24]	; (800f19c <_isatty_r+0x1c>)
 800f184:	2300      	movs	r3, #0
 800f186:	4604      	mov	r4, r0
 800f188:	4608      	mov	r0, r1
 800f18a:	602b      	str	r3, [r5, #0]
 800f18c:	f7f5 ff3d 	bl	800500a <_isatty>
 800f190:	1c43      	adds	r3, r0, #1
 800f192:	d102      	bne.n	800f19a <_isatty_r+0x1a>
 800f194:	682b      	ldr	r3, [r5, #0]
 800f196:	b103      	cbz	r3, 800f19a <_isatty_r+0x1a>
 800f198:	6023      	str	r3, [r4, #0]
 800f19a:	bd38      	pop	{r3, r4, r5, pc}
 800f19c:	20000b34 	.word	0x20000b34

0800f1a0 <_lseek_r>:
 800f1a0:	b538      	push	{r3, r4, r5, lr}
 800f1a2:	4d07      	ldr	r5, [pc, #28]	; (800f1c0 <_lseek_r+0x20>)
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	4608      	mov	r0, r1
 800f1a8:	4611      	mov	r1, r2
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	602a      	str	r2, [r5, #0]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	f7f5 ff36 	bl	8005020 <_lseek>
 800f1b4:	1c43      	adds	r3, r0, #1
 800f1b6:	d102      	bne.n	800f1be <_lseek_r+0x1e>
 800f1b8:	682b      	ldr	r3, [r5, #0]
 800f1ba:	b103      	cbz	r3, 800f1be <_lseek_r+0x1e>
 800f1bc:	6023      	str	r3, [r4, #0]
 800f1be:	bd38      	pop	{r3, r4, r5, pc}
 800f1c0:	20000b34 	.word	0x20000b34

0800f1c4 <_read_r>:
 800f1c4:	b538      	push	{r3, r4, r5, lr}
 800f1c6:	4d07      	ldr	r5, [pc, #28]	; (800f1e4 <_read_r+0x20>)
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	4608      	mov	r0, r1
 800f1cc:	4611      	mov	r1, r2
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	602a      	str	r2, [r5, #0]
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	f7f5 fec4 	bl	8004f60 <_read>
 800f1d8:	1c43      	adds	r3, r0, #1
 800f1da:	d102      	bne.n	800f1e2 <_read_r+0x1e>
 800f1dc:	682b      	ldr	r3, [r5, #0]
 800f1de:	b103      	cbz	r3, 800f1e2 <_read_r+0x1e>
 800f1e0:	6023      	str	r3, [r4, #0]
 800f1e2:	bd38      	pop	{r3, r4, r5, pc}
 800f1e4:	20000b34 	.word	0x20000b34

0800f1e8 <_init>:
 800f1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ea:	bf00      	nop
 800f1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ee:	bc08      	pop	{r3}
 800f1f0:	469e      	mov	lr, r3
 800f1f2:	4770      	bx	lr

0800f1f4 <_fini>:
 800f1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f6:	bf00      	nop
 800f1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1fa:	bc08      	pop	{r3}
 800f1fc:	469e      	mov	lr, r3
 800f1fe:	4770      	bx	lr
