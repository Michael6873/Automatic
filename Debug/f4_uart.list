
f4_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800d388  0800d388  0001d388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d984  0800d984  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d984  0800d984  0001d984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d98c  0800d98c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d98c  0800d98c  0001d98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d994  0800d994  0001d994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d99c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b4  200001e0  0800db7c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a94  0800db7c  00020a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a00  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d92  00000000  00000000  00037c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0003a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001390  00000000  00000000  0003bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b23a  00000000  00000000  0003d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014dc4  00000000  00000000  000583c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ef48  00000000  00000000  0006d186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c0ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eb8  00000000  00000000  0010c120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d370 	.word	0x0800d370

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800d370 	.word	0x0800d370

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <_ZN7RPLidar3endEv>:

extern UART_HandleTypeDef huart2; // Дескриптор UART1
static bool uart1_is_open = false;

// Закрытие UART1
void RPLidar::end() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    if (isOpen()) {
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f811 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <_ZN7RPLidar3endEv+0x20>
        HAL_UART_DeInit(&huart2); // Деинициализация UART1
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <_ZN7RPLidar3endEv+0x28>)
 8000f72:	f007 f86c 	bl	800804e <HAL_UART_DeInit>
        uart1_is_open = false;    // Отмечаем UART как закрытый
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <_ZN7RPLidar3endEv+0x2c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
    }
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000a34 	.word	0x20000a34
 8000f88:	200001fc 	.word	0x200001fc

08000f8c <_ZN7RPLidar6isOpenEv>:

// Проверка состояния UART1 (открыт или закрыт)
bool RPLidar::isOpen() {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
    return uart1_is_open; // Возвращаем текущее состояние UART1
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <_ZN7RPLidar6isOpenEv+0x18>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	200001fc 	.word	0x200001fc

08000fa8 <_ZN7RPLidarC1Ev>:

RPLidar::RPLidar() {
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < sizeof(distances) / sizeof(distances[0]); ++i) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000fba:	d80b      	bhi.n	8000fd4 <_ZN7RPLidarC1Ev+0x2c>
        distances[i] = 10000;
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <_ZN7RPLidarC1Ev+0x58>)
 8000fca:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(distances) / sizeof(distances[0]); ++i) {
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	e7ef      	b.n	8000fb4 <_ZN7RPLidarC1Ev+0xc>
    }
    _currentMeasurement.distance = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
    _currentMeasurement.angle = 0;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
    _currentMeasurement.quality = 0;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	721a      	strb	r2, [r3, #8]
    _currentMeasurement.startBit = 0;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	725a      	strb	r2, [r3, #9]
}
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	461c4000 	.word	0x461c4000

08001004 <_ZN7RPLidarD1Ev>:


RPLidar::~RPLidar()
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
{
    end();
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ffa5 	bl	8000f5c <_ZN7RPLidar3endEv>
}
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <_ZN7RPLidar5beginEv>:


// Инициализация UART1 для работы с RPLIDAR
bool RPLidar::begin() {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    // Если UART уже открыт, завершаем его работу
    if (isOpen()) {
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ffb1 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <_ZN7RPLidar5beginEv+0x1a>
        end();
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff93 	bl	8000f5c <_ZN7RPLidar3endEv>
    }

    // Настройка UART1 для работы с RPLIDAR
    huart2.Instance = USART2;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <_ZN7RPLidar5beginEv+0x7c>)
 800103a:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 800103e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001042:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 8001058:	220c      	movs	r2, #12
 800105a:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 8001064:	2200      	movs	r2, #0
 8001066:	61da      	str	r2, [r3, #28]

    // Инициализация UART1
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001068:	480a      	ldr	r0, [pc, #40]	; (8001094 <_ZN7RPLidar5beginEv+0x78>)
 800106a:	f006 ffa3 	bl	8007fb4 <HAL_UART_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	bf14      	ite	ne
 8001074:	2301      	movne	r3, #1
 8001076:	2300      	moveq	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <_ZN7RPLidar5beginEv+0x66>
        return false; // Если инициализация не удалась
 800107e:	2300      	movs	r3, #0
 8001080:	e003      	b.n	800108a <_ZN7RPLidar5beginEv+0x6e>
    }

    // Отмечаем UART как открытый
    uart1_is_open = true;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <_ZN7RPLidar5beginEv+0x80>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
    return true;
 8001088:	2301      	movs	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000a34 	.word	0x20000a34
 8001098:	40004400 	.word	0x40004400
 800109c:	200001fc 	.word	0x200001fc

080010a0 <_ZN7RPLidar12_sendCommandEhPKvj>:

uint32_t RPLidar::_sendCommand(uint8_t cmd, const void *payload, size_t payloadsize) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	460b      	mov	r3, r1
 80010ae:	72fb      	strb	r3, [r7, #11]
    rplidar_cmd_packet_t pkt_header;
    uint8_t checksum = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	75fb      	strb	r3, [r7, #23]
    HAL_StatusTypeDef status;

    // Проверяем наличие полезной нагрузки
    if (payloadsize && payload) {
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <_ZN7RPLidar12_sendCommandEhPKvj+0x28>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <_ZN7RPLidar12_sendCommandEhPKvj+0x28>
        cmd |= RPLIDAR_CMDFLAG_HAS_PAYLOAD;
 80010c0:	7afb      	ldrb	r3, [r7, #11]
 80010c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010c6:	72fb      	strb	r3, [r7, #11]
    }

    // Формируем заголовок команды
    pkt_header.syncByte = RPLIDAR_CMD_SYNC_BYTE;
 80010c8:	23a5      	movs	r3, #165	; 0xa5
 80010ca:	763b      	strb	r3, [r7, #24]
    pkt_header.cmd_flag = cmd;
 80010cc:	7afb      	ldrb	r3, [r7, #11]
 80010ce:	767b      	strb	r3, [r7, #25]

    // Отправляем заголовок (2 байта)
    status = HAL_UART_Transmit(&huart2, (uint8_t *)&pkt_header, sizeof(pkt_header), HAL_MAX_DELAY);
 80010d0:	f107 0118 	add.w	r1, r7, #24
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	2203      	movs	r2, #3
 80010da:	4833      	ldr	r0, [pc, #204]	; (80011a8 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 80010dc:	f006 ffe6 	bl	80080ac <HAL_UART_Transmit>
 80010e0:	4603      	mov	r3, r0
 80010e2:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) {
 80010e4:	7efb      	ldrb	r3, [r7, #27]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <_ZN7RPLidar12_sendCommandEhPKvj+0x4e>
        return RESULT_OPERATION_FAIL; // Если произошла ошибка при передаче, возвращаем ошибку
 80010ea:	4b30      	ldr	r3, [pc, #192]	; (80011ac <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 80010ec:	e057      	b.n	800119e <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
    }

    // Если есть полезная нагрузка
    if (cmd & RPLIDAR_CMDFLAG_HAS_PAYLOAD) {
 80010ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	da52      	bge.n	800119c <_ZN7RPLidar12_sendCommandEhPKvj+0xfc>
        // Инициализируем контрольную сумму
        checksum ^= RPLIDAR_CMD_SYNC_BYTE;
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	f083 035a 	eor.w	r3, r3, #90	; 0x5a
 80010fc:	43db      	mvns	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	75fb      	strb	r3, [r7, #23]
        checksum ^= cmd;
 8001102:	7dfa      	ldrb	r2, [r7, #23]
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	4053      	eors	r3, r2
 8001108:	b2db      	uxtb	r3, r3
 800110a:	75fb      	strb	r3, [r7, #23]
        checksum ^= (payloadsize & 0xFF);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	4053      	eors	r3, r2
 8001114:	b2db      	uxtb	r3, r3
 8001116:	75fb      	strb	r3, [r7, #23]

        // Вычисляем контрольную сумму для полезной нагрузки
        for (size_t pos = 0; pos < payloadsize; ++pos) {
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d20b      	bcs.n	800113c <_ZN7RPLidar12_sendCommandEhPKvj+0x9c>
            checksum ^= ((uint8_t *)payload)[pos];
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	4413      	add	r3, r2
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	4053      	eors	r3, r2
 8001130:	b2db      	uxtb	r3, r3
 8001132:	75fb      	strb	r3, [r7, #23]
        for (size_t pos = 0; pos < payloadsize; ++pos) {
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	3301      	adds	r3, #1
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e7ef      	b.n	800111c <_ZN7RPLidar12_sendCommandEhPKvj+0x7c>
        }

        // Отправляем размер полезной нагрузки (1 байт)
        uint8_t sizebyte = (uint8_t)payloadsize;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	75bb      	strb	r3, [r7, #22]
        status = HAL_UART_Transmit(&huart2, &sizebyte, 1, HAL_MAX_DELAY);
 8001142:	f107 0116 	add.w	r1, r7, #22
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	2201      	movs	r2, #1
 800114c:	4816      	ldr	r0, [pc, #88]	; (80011a8 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 800114e:	f006 ffad 	bl	80080ac <HAL_UART_Transmit>
 8001152:	4603      	mov	r3, r0
 8001154:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 8001156:	7efb      	ldrb	r3, [r7, #27]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <_ZN7RPLidar12_sendCommandEhPKvj+0xc0>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 800115e:	e01e      	b.n	800119e <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }

        // Отправляем полезную нагрузку
        status = HAL_UART_Transmit(&huart2, (uint8_t *)payload, payloadsize, HAL_MAX_DELAY);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	b29a      	uxth	r2, r3
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	480f      	ldr	r0, [pc, #60]	; (80011a8 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 800116c:	f006 ff9e 	bl	80080ac <HAL_UART_Transmit>
 8001170:	4603      	mov	r3, r0
 8001172:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 8001174:	7efb      	ldrb	r3, [r7, #27]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <_ZN7RPLidar12_sendCommandEhPKvj+0xde>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 800117c:	e00f      	b.n	800119e <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }

        // Отправляем контрольную сумму (1 байт)
        status = HAL_UART_Transmit(&huart2, &checksum, 1, HAL_MAX_DELAY);
 800117e:	f107 0117 	add.w	r1, r7, #23
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	2201      	movs	r2, #1
 8001188:	4807      	ldr	r0, [pc, #28]	; (80011a8 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 800118a:	f006 ff8f 	bl	80080ac <HAL_UART_Transmit>
 800118e:	4603      	mov	r3, r0
 8001190:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 8001192:	7efb      	ldrb	r3, [r7, #27]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <_ZN7RPLidar12_sendCommandEhPKvj+0xfc>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 800119a:	e000      	b.n	800119e <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }
    }

    return RESULT_OK; // Если все данные успешно отправлены
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000a34 	.word	0x20000a34
 80011ac:	80008001 	.word	0x80008001

080011b0 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>:


uint32_t RPLidar::_waitResponseHeader(rplidar_ans_header_t *header, uint32_t timeout) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
    uint32_t startTick = HAL_GetTick(); // Запоминаем начальное время
 80011bc:	f002 fefe 	bl	8003fbc <HAL_GetTick>
 80011c0:	61b8      	str	r0, [r7, #24]
    uint8_t recvPos = 0; // Текущая позиция приёмного буфера
 80011c2:	2300      	movs	r3, #0
 80011c4:	77fb      	strb	r3, [r7, #31]
    uint8_t *headerbuf = (uint8_t *)header; // Преобразуем указатель на заголовок к массиву байтов
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	617b      	str	r3, [r7, #20]
    uint8_t currentByte;

    while ((HAL_GetTick() - startTick) < timeout) { // Пока не истёк таймаут
 80011ca:	f002 fef7 	bl	8003fbc <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	bf8c      	ite	hi
 80011da:	2301      	movhi	r3, #1
 80011dc:	2300      	movls	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d039      	beq.n	8001258 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa8>
        // Считываем один байт через UART
        HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, &currentByte, 1, timeout - (HAL_GetTick() - startTick));
 80011e4:	f002 feea 	bl	8003fbc <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	1a9a      	subs	r2, r3, r2
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	f107 0112 	add.w	r1, r7, #18
 80011f6:	2201      	movs	r2, #1
 80011f8:	481a      	ldr	r0, [pc, #104]	; (8001264 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb4>)
 80011fa:	f006 ffe9 	bl	80081d0 <HAL_UART_Receive>
 80011fe:	4603      	mov	r3, r0
 8001200:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK) { // Если байт успешно прочитан
 8001202:	7cfb      	ldrb	r3, [r7, #19]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d11f      	bne.n	8001248 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x98>
            switch (recvPos) {
 8001208:	7ffb      	ldrb	r3, [r7, #31]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x64>
 800120e:	2b01      	cmp	r3, #1
 8001210:	d004      	beq.n	800121c <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x6c>
 8001212:	e00c      	b.n	800122e <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7e>
                case 0:
                    // Проверяем первый синхронизирующий байт
                    if (currentByte != RPLIDAR_ANS_SYNC_BYTE1) {
 8001214:	7cbb      	ldrb	r3, [r7, #18]
 8001216:	2ba5      	cmp	r3, #165	; 0xa5
 8001218:	d006      	beq.n	8001228 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x78>
                        continue; // Если не совпадает, игнорируем байт и продолжаем
 800121a:	e01c      	b.n	8001256 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa6>
                    }
                    break;
                case 1:
                    // Проверяем второй синхронизирующий байт
                    if (currentByte != RPLIDAR_ANS_SYNC_BYTE2) {
 800121c:	7cbb      	ldrb	r3, [r7, #18]
 800121e:	2b5a      	cmp	r3, #90	; 0x5a
 8001220:	d004      	beq.n	800122c <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7c>
                        recvPos = 0; // Если не совпадает, сбрасываем позицию
 8001222:	2300      	movs	r3, #0
 8001224:	77fb      	strb	r3, [r7, #31]
                        continue;
 8001226:	e016      	b.n	8001256 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa6>
                    break;
 8001228:	bf00      	nop
 800122a:	e000      	b.n	800122e <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7e>
                    }
                    break;
 800122c:	bf00      	nop
            }
            // Записываем байт в буфер заголовка
            headerbuf[recvPos++] = currentByte;
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	77fa      	strb	r2, [r7, #31]
 8001234:	461a      	mov	r2, r3
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	4413      	add	r3, r2
 800123a:	7cba      	ldrb	r2, [r7, #18]
 800123c:	701a      	strb	r2, [r3, #0]

            // Если заголовок полностью считан
            if (recvPos == sizeof(rplidar_ans_header_t)) return RESULT_OK; // Возвращаем успешный результат
 800123e:	7ffb      	ldrb	r3, [r7, #31]
 8001240:	2b07      	cmp	r3, #7
 8001242:	d1c2      	bne.n	80011ca <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x1a>
 8001244:	2300      	movs	r3, #0
 8001246:	e008      	b.n	800125a <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
        }
        else if (status == HAL_TIMEOUT) return RESULT_OPERATION_TIMEOUT; // Если истёк таймаут
 8001248:	7cfb      	ldrb	r3, [r7, #19]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d101      	bne.n	8001252 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa2>
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb8>)
 8001250:	e003      	b.n	800125a <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
        else return RESULT_OPERATION_FAIL; // Если произошла ошибка
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xbc>)
 8001254:	e001      	b.n	800125a <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
    while ((HAL_GetTick() - startTick) < timeout) { // Пока не истёк таймаут
 8001256:	e7b8      	b.n	80011ca <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x1a>
    }

    return RESULT_OPERATION_TIMEOUT; // Если цикл завершился без успешного завершения
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb8>)
}
 800125a:	4618      	mov	r0, r3
 800125c:	3720      	adds	r7, #32
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000a34 	.word	0x20000a34
 8001268:	80008002 	.word	0x80008002
 800126c:	80008001 	.word	0x80008001

08001270 <_ZN7RPLidar4stopEv>:
    // Если время ожидания истекло
    return RESULT_OPERATION_TIMEOUT;
}

uint32_t RPLidar::stop()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    if (!isOpen()) return RESULT_OPERATION_FAIL;
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fe87 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 800127e:	4603      	mov	r3, r0
 8001280:	f083 0301 	eor.w	r3, r3, #1
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <_ZN7RPLidar4stopEv+0x1e>
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <_ZN7RPLidar4stopEv+0x38>)
 800128c:	e007      	b.n	800129e <_ZN7RPLidar4stopEv+0x2e>
    uint32_t ans = _sendCommand(RPLIDAR_CMD_STOP,NULL,0);
 800128e:	2300      	movs	r3, #0
 8001290:	2200      	movs	r2, #0
 8001292:	2125      	movs	r1, #37	; 0x25
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff03 	bl	80010a0 <_ZN7RPLidar12_sendCommandEhPKvj>
 800129a:	60f8      	str	r0, [r7, #12]
    return ans;
 800129c:	68fb      	ldr	r3, [r7, #12]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	80008001 	.word	0x80008001

080012ac <_ZN7RPLidar9startScanEbm>:

uint32_t RPLidar::startScan(bool force, uint32_t timeout) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	460b      	mov	r3, r1
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	72fb      	strb	r3, [r7, #11]
    uint32_t ans;

    // Проверяем, открыт ли UART
    if (!isOpen()) return RESULT_OPERATION_FAIL;
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff fe66 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f083 0301 	eor.w	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <_ZN7RPLidar9startScanEbm+0x24>
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <_ZN7RPLidar9startScanEbm+0x9c>)
 80012ce:	e036      	b.n	800133e <_ZN7RPLidar9startScanEbm+0x92>

    // Останавливаем предыдущую операцию
    stop();
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f7ff ffcd 	bl	8001270 <_ZN7RPLidar4stopEv>

    // Отправляем команду на сканирование

        uint8_t command = force ? RPLIDAR_CMD_FORCE_SCAN : RPLIDAR_CMD_SCAN;
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <_ZN7RPLidar9startScanEbm+0x34>
 80012dc:	2321      	movs	r3, #33	; 0x21
 80012de:	e000      	b.n	80012e2 <_ZN7RPLidar9startScanEbm+0x36>
 80012e0:	2320      	movs	r3, #32
 80012e2:	77fb      	strb	r3, [r7, #31]
        ans = _sendCommand(command, NULL, 0);
 80012e4:	7ff9      	ldrb	r1, [r7, #31]
 80012e6:	2300      	movs	r3, #0
 80012e8:	2200      	movs	r2, #0
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7ff fed8 	bl	80010a0 <_ZN7RPLidar12_sendCommandEhPKvj>
 80012f0:	61b8      	str	r0, [r7, #24]
        if (IS_FAIL(ans)) return ans;
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	da01      	bge.n	80012fc <_ZN7RPLidar9startScanEbm+0x50>
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	e020      	b.n	800133e <_ZN7RPLidar9startScanEbm+0x92>

        // Ожидание заголовка подтверждения
        rplidar_ans_header_t response_header;
        if (IS_FAIL(ans = _waitResponseHeader(&response_header, timeout))) return ans;
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4619      	mov	r1, r3
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f7ff ff53 	bl	80011b0 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>
 800130a:	61b8      	str	r0, [r7, #24]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	0fdb      	lsrs	r3, r3, #31
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <_ZN7RPLidar9startScanEbm+0x6e>
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	e011      	b.n	800133e <_ZN7RPLidar9startScanEbm+0x92>

        // Проверяем тип заголовка
        if (response_header.type != RPLIDAR_ANS_TYPE_MEASUREMENT) return RESULT_INVALID_DATA;
 800131a:	7dbb      	ldrb	r3, [r7, #22]
 800131c:	2b81      	cmp	r3, #129	; 0x81
 800131e:	d002      	beq.n	8001326 <_ZN7RPLidar9startScanEbm+0x7a>
 8001320:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8001324:	e00b      	b.n	800133e <_ZN7RPLidar9startScanEbm+0x92>

        // Проверяем размер заголовка
        if (response_header.size < sizeof(rplidar_response_measurement_node_t)) return RESULT_INVALID_DATA;
 8001326:	8a7b      	ldrh	r3, [r7, #18]
 8001328:	8aba      	ldrh	r2, [r7, #20]
 800132a:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800132e:	0412      	lsls	r2, r2, #16
 8001330:	4313      	orrs	r3, r2
 8001332:	2b04      	cmp	r3, #4
 8001334:	d802      	bhi.n	800133c <_ZN7RPLidar9startScanEbm+0x90>
 8001336:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 800133a:	e000      	b.n	800133e <_ZN7RPLidar9startScanEbm+0x92>


    return RESULT_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	80008001 	.word	0x80008001

0800134c <_ZN7RPLidar12getDistancesEv>:
float* RPLidar::getDistances() {  // Аргумент по умолчанию здесь не указывается
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    return distances;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	330c      	adds	r3, #12
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_ZN7RPLidar12getDistancesEi>:

float RPLidar::getDistances(int i) {  // Аргумент по умолчанию здесь не указывается
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
    return distances[i];
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	3302      	adds	r3, #2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	3304      	adds	r3, #4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	ee07 3a90 	vmov	s15, r3
}
 8001380:	eeb0 0a67 	vmov.f32	s0, s15
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <_ZN7RPLidar9constrainElll>:
float RPLidar::constrain(int32_t value,int32_t num1,int32_t num2){
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	603b      	str	r3, [r7, #0]
	if (value>num2) value = num2;
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dd01      	ble.n	80013a8 <_ZN7RPLidar9constrainElll+0x1a>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	60bb      	str	r3, [r7, #8]
	if (value<num1) value = num1;
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	da01      	bge.n	80013b4 <_ZN7RPLidar9constrainElll+0x26>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	60bb      	str	r3, [r7, #8]
	return value;
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <_ZN7RPLidar9waitPointEm>:

uint32_t RPLidar::waitPoint(uint32_t timeout) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
    uint32_t currentTs = HAL_GetTick(); // Получаем текущее время
 80013d6:	f002 fdf1 	bl	8003fbc <HAL_GetTick>
 80013da:	62b8      	str	r0, [r7, #40]	; 0x28
    uint32_t remainingtime;
    rplidar_response_measurement_node_t node;
    uint8_t *nodebuf = (uint8_t *)&node;
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t recvPos = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    while ((remainingtime = HAL_GetTick() - currentTs) <= timeout) {
 80013e8:	f002 fde8 	bl	8003fbc <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	6a3a      	ldr	r2, [r7, #32]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	bf94      	ite	ls
 80013fc:	2301      	movls	r3, #1
 80013fe:	2300      	movhi	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 80b7 	beq.w	8001576 <_ZN7RPLidar9waitPointEm+0x1aa>
        uint8_t currentbyte;
        HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, &currentbyte, 1, timeout);
 8001408:	f107 010b 	add.w	r1, r7, #11
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2201      	movs	r2, #1
 8001410:	485b      	ldr	r0, [pc, #364]	; (8001580 <_ZN7RPLidar9waitPointEm+0x1b4>)
 8001412:	f006 fedd 	bl	80081d0 <HAL_UART_Receive>
 8001416:	4603      	mov	r3, r0
 8001418:	77fb      	strb	r3, [r7, #31]

        // Проверяем, успешно ли получен байт
        if (status != HAL_OK) continue; // Пропускаем итерацию, если байт не был получен
 800141a:	7ffb      	ldrb	r3, [r7, #31]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f040 80a8 	bne.w	8001572 <_ZN7RPLidar9waitPointEm+0x1a6>

        switch (recvPos) {
 8001422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <_ZN7RPLidar9waitPointEm+0x64>
 800142a:	2b01      	cmp	r3, #1
 800142c:	d00c      	beq.n	8001448 <_ZN7RPLidar9waitPointEm+0x7c>
 800142e:	e017      	b.n	8001460 <_ZN7RPLidar9waitPointEm+0x94>
            case 0: // Ожидаем бит синхронизации и его инверсии
                {
                    uint8_t tmp = (currentbyte >> 1);
 8001430:	7afb      	ldrb	r3, [r7, #11]
 8001432:	085b      	lsrs	r3, r3, #1
 8001434:	77bb      	strb	r3, [r7, #30]
                    if ((tmp ^ currentbyte) & 0x1){} // Проходит проверку
 8001436:	7afa      	ldrb	r2, [r7, #11]
 8001438:	7fbb      	ldrb	r3, [r7, #30]
 800143a:	4053      	eors	r3, r2
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <_ZN7RPLidar9waitPointEm+0x8e>
                    else continue; // Если проверка не прошла, ждём следующий байт
 8001446:	e095      	b.n	8001574 <_ZN7RPLidar9waitPointEm+0x1a8>
                }
                break;

            case 1: // Ожидаем, что самый старший бит равен 1
                {
                    if (currentbyte & RPLIDAR_RESP_MEASUREMENT_CHECKBIT) {} // Проходит проверку
 8001448:	7afb      	ldrb	r3, [r7, #11]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <_ZN7RPLidar9waitPointEm+0x92>
                    else {
                        recvPos = 0; // Сбрасываем позицию и начинаем заново
 8001452:	2300      	movs	r3, #0
 8001454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        continue;
 8001458:	e08c      	b.n	8001574 <_ZN7RPLidar9waitPointEm+0x1a8>
                break;
 800145a:	bf00      	nop
 800145c:	e000      	b.n	8001460 <_ZN7RPLidar9waitPointEm+0x94>
                    }
                }
                break;
 800145e:	bf00      	nop
        }

        // Сохраняем текущий байт
        nodebuf[recvPos++] = currentbyte;
 8001460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800146a:	461a      	mov	r2, r3
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	4413      	add	r3, r2
 8001470:	7afa      	ldrb	r2, [r7, #11]
 8001472:	701a      	strb	r2, [r3, #0]

        // Если все байты структуры считаны
        if (recvPos == sizeof(rplidar_response_measurement_node_t)) {
 8001474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001478:	2b05      	cmp	r3, #5
 800147a:	d1b5      	bne.n	80013e8 <_ZN7RPLidar9waitPointEm+0x1c>
            // Вычисляем значения измерений
            _currentMeasurement.distance = node.distance_q2 / 4.0f;
 800147c:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8001480:	b29b      	uxth	r3, r3
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800148e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	edc3 7a00 	vstr	s15, [r3]
            _currentMeasurement.angle = constrain((node.angle_q6_checkbit >> RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT) / 64.0f,0,360);
 8001498:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800149c:	b29b      	uxth	r3, r3
 800149e:	085b      	lsrs	r3, r3, #1
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014aa:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001584 <_ZN7RPLidar9waitPointEm+0x1b8>
 80014ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80014ba:	2200      	movs	r2, #0
 80014bc:	ee17 1a90 	vmov	r1, s15
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff64 	bl	800138e <_ZN7RPLidar9constrainElll>
 80014c6:	eef0 7a40 	vmov.f32	s15, s0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edc3 7a01 	vstr	s15, [r3, #4]
            _currentMeasurement.quality = (node.sync_quality >> RPLIDAR_RESP_MEASUREMENT_QUALITY_SHIFT);
 80014d0:	7b3b      	ldrb	r3, [r7, #12]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	721a      	strb	r2, [r3, #8]
            _currentMeasurement.startBit = (node.sync_quality & RPLIDAR_RESP_MEASUREMENT_SYNCBIT);
 80014da:	7b3b      	ldrb	r3, [r7, #12]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf14      	ite	ne
 80014e4:	2301      	movne	r3, #1
 80014e6:	2300      	moveq	r3, #0
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	725a      	strb	r2, [r3, #9]

            // Сохраняем минимальное расстояние для каждого угла (от 0 до 360 градусов)
            float newAngle = _currentMeasurement.angle;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	61bb      	str	r3, [r7, #24]
            float newDistance = _currentMeasurement.distance;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	617b      	str	r3, [r7, #20]

            if (newDistance>150){
 80014fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80014fe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001588 <_ZN7RPLidar9waitPointEm+0x1bc>
 8001502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	dd30      	ble.n	800156e <_ZN7RPLidar9waitPointEm+0x1a2>
				if (newAngle>=0&&newAngle<=360)
 800150c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001518:	db29      	blt.n	800156e <_ZN7RPLidar9waitPointEm+0x1a2>
 800151a:	edd7 7a06 	vldr	s15, [r7, #24]
 800151e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800158c <_ZN7RPLidar9waitPointEm+0x1c0>
 8001522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	d820      	bhi.n	800156e <_ZN7RPLidar9waitPointEm+0x1a2>
					if (newDistance != distances[(int)newAngle]) {
 800152c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001534:	ee17 3a90 	vmov	r3, s15
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	3302      	adds	r3, #2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	3304      	adds	r3, #4
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ed97 7a05 	vldr	s14, [r7, #20]
 800154a:	eeb4 7a67 	vcmp.f32	s14, s15
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	d00c      	beq.n	800156e <_ZN7RPLidar9waitPointEm+0x1a2>
						distances[(int)newAngle] = newDistance; // Сохраняем  расстояние
 8001554:	edd7 7a06 	vldr	s15, [r7, #24]
 8001558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155c:	ee17 3a90 	vmov	r3, s15
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	3302      	adds	r3, #2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	3304      	adds	r3, #4
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	601a      	str	r2, [r3, #0]
				}
            }


            return RESULT_OK; // Успешное завершение
 800156e:	2300      	movs	r3, #0
 8001570:	e002      	b.n	8001578 <_ZN7RPLidar9waitPointEm+0x1ac>
        if (status != HAL_OK) continue; // Пропускаем итерацию, если байт не был получен
 8001572:	bf00      	nop
    while ((remainingtime = HAL_GetTick() - currentTs) <= timeout) {
 8001574:	e738      	b.n	80013e8 <_ZN7RPLidar9waitPointEm+0x1c>
        }
    }

    // Если таймаут истёк
    return RESULT_OPERATION_TIMEOUT;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <_ZN7RPLidar9waitPointEm+0x1c4>)
}
 8001578:	4618      	mov	r0, r3
 800157a:	3730      	adds	r7, #48	; 0x30
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000a34 	.word	0x20000a34
 8001584:	42800000 	.word	0x42800000
 8001588:	43160000 	.word	0x43160000
 800158c:	43b40000 	.word	0x43b40000
 8001590:	80008002 	.word	0x80008002

08001594 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ba:	d205      	bcs.n	80015c8 <_ZSt16__deque_buf_sizej+0x1c>
 80015bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	e000      	b.n	80015ca <_ZSt16__deque_buf_sizej+0x1e>
 80015c8:	2301      	movs	r3, #1
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_ZN7EncoderC1EP17TIM_HandleTypeDef>:
#include  <cmath>

class Encoder
{
public:
	Encoder(TIM_HandleTypeDef* _encTim)
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
		:encTim(_encTim)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	60da      	str	r2, [r3, #12]
	{
		//HAL_TIM_Encoder_Start(_encTim, TIM_CHANNEL_1);
	};
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_ZN7Encoder7handlerEv>:

	void handler() {
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
		encoderValue = (int32_t)__HAL_TIM_GET_COUNTER(encTim);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	461a      	mov	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(encTim, 0);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_ZN7Encoder15getEncoderValueEv>:

	int32_t getEncoderValue(){
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
		return encoderValue;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
	}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_ZN3PIDC1Eddd>:


class PID {
public:
    PID(double kp, double ki, double kd)
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	61f8      	str	r0, [r7, #28]
 8001640:	ed87 0b04 	vstr	d0, [r7, #16]
 8001644:	ed87 1b02 	vstr	d1, [r7, #8]
 8001648:	ed87 2b00 	vstr	d2, [r7]
        : kp(kp), ki(ki), kd(kd), prevError(0), integral(0) {
 800164c:	69f9      	ldr	r1, [r7, #28]
 800164e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001652:	e9c1 2300 	strd	r2, r3, [r1]
 8001656:	69f9      	ldr	r1, [r7, #28]
 8001658:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800165c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001660:	69f9      	ldr	r1, [r7, #28]
 8001662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001666:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800166a:	69f9      	ldr	r1, [r7, #28]
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001678:	69f9      	ldr	r1, [r7, #28]
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	e9c1 2308 	strd	r2, r3, [r1, #32]
    }
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	4618      	mov	r0, r3
 800168a:	3724      	adds	r7, #36	; 0x24
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_ZN3PID9calculateEdd>:

    // Метод для расчета управляющего воздействия
    double calculate(double target, double current) {
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6178      	str	r0, [r7, #20]
 800169c:	ed87 0b02 	vstr	d0, [r7, #8]
 80016a0:	ed87 1b00 	vstr	d1, [r7]
        double error = target - current;
 80016a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016ac:	f7fe fdf4 	bl	8000298 <__aeabi_dsub>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        integral += error; // Накопление интегральной ошибки
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80016be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016c2:	f7fe fdeb 	bl	800029c <__adddf3>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	6979      	ldr	r1, [r7, #20]
 80016cc:	e9c1 2308 	strd	r2, r3, [r1, #32]
        double derivative = error - prevError; // Разница ошибок
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016da:	f7fe fddd 	bl	8000298 <__aeabi_dsub>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        prevError = error;
 80016e6:	6979      	ldr	r1, [r7, #20]
 80016e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016ec:	e9c1 2306 	strd	r2, r3, [r1, #24]

        return kp * error + ki * integral + kd * derivative;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016fa:	f7fe ff85 	bl	8000608 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4614      	mov	r4, r2
 8001704:	461d      	mov	r5, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001712:	f7fe ff79 	bl	8000608 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4620      	mov	r0, r4
 800171c:	4629      	mov	r1, r5
 800171e:	f7fe fdbd 	bl	800029c <__adddf3>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4614      	mov	r4, r2
 8001728:	461d      	mov	r5, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001730:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001734:	f7fe ff68 	bl	8000608 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4620      	mov	r0, r4
 800173e:	4629      	mov	r1, r5
 8001740:	f7fe fdac 	bl	800029c <__adddf3>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	ec43 2b17 	vmov	d7, r2, r3
    }
 800174c:	eeb0 0a47 	vmov.f32	s0, s14
 8001750:	eef0 0a67 	vmov.f32	s1, s15
 8001754:	3728      	adds	r7, #40	; 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bdb0      	pop	{r4, r5, r7, pc}

0800175a <_ZN3PID5clearEv>:
    void clear(){
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
    	prevError = 0;
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    	integral = 0;
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    }
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_Z9constrainlll>:
#include  <cmath>

#ifndef INC_MOTOR_H_
#define INC_MOTOR_H_

	int32_t constrain(int32_t value,int32_t num1,int32_t num2){
 800178a:	b480      	push	{r7}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
		if (value>num2) value = num2;
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	429a      	cmp	r2, r3
 800179c:	dd01      	ble.n	80017a2 <_Z9constrainlll+0x18>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60fb      	str	r3, [r7, #12]
		if (value<num1) value = num1;
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	da01      	bge.n	80017ae <_Z9constrainlll+0x24>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	60fb      	str	r3, [r7, #12]
		return value;
 80017ae:	68fb      	ldr	r3, [r7, #12]
	}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>:

class Motor{

public:

	Motor(TIM_HandleTypeDef* _encTim,TIM_HandleTypeDef* _ctrlTim, uint8_t _ctrlTimCh):
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	70fb      	strb	r3, [r7, #3]
		ctrlTim(_ctrlTim),ctrlTimCh(_ctrlTimCh),enc(_encTim),pid(10,0.0005,1)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff feff 	bl	80015d6 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3310      	adds	r3, #16
 80017dc:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8001808 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h+0x48>
 80017e0:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8001810 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h+0x50>
 80017e4:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001818 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h+0x58>
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff25 	bl	8001638 <_ZN3PIDC1Eddd>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	639a      	str	r2, [r3, #56]	; 0x38
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	63da      	str	r2, [r3, #60]	; 0x3c
	{};
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	f3af 8000 	nop.w
 8001808:	00000000 	.word	0x00000000
 800180c:	3ff00000 	.word	0x3ff00000
 8001810:	d2f1a9fc 	.word	0xd2f1a9fc
 8001814:	3f40624d 	.word	0x3f40624d
 8001818:	00000000 	.word	0x00000000
 800181c:	40240000 	.word	0x40240000

08001820 <_ZN5Motor14setTargetSpeedEl>:
		return targetSpeed;
	}
	int32_t getCurrentSpeed(){
		return currentSpeed;
	}
	void setTargetSpeed(int32_t speed){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
		targetSpeed = speed;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	64da      	str	r2, [r3, #76]	; 0x4c
		targetSpeed = constrain(targetSpeed,-MAX_MOT_SPEED,MAX_MOT_SPEED);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001834:	2264      	movs	r2, #100	; 0x64
 8001836:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ffa5 	bl	800178a <_Z9constrainlll>
 8001840:	4602      	mov	r2, r0
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	64da      	str	r2, [r3, #76]	; 0x4c
	}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_ZN5Motor7handlerEv>:
	void handler(){
 800184e:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
		calcCurSpeedMotor();
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f849 	bl	80018f0 <_ZN5Motor17calcCurSpeedMotorEv>
		pidClear();
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f828 	bl	80018b4 <_ZN5Motor8pidClearEv>
		setMotorPWM(pid.calculate(targetSpeed, currentSpeed));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f103 0410 	add.w	r4, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe60 	bl	8000534 <__aeabi_i2d>
 8001874:	4680      	mov	r8, r0
 8001876:	4689      	mov	r9, r1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe59 	bl	8000534 <__aeabi_i2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	ec43 2b11 	vmov	d1, r2, r3
 800188a:	ec49 8b10 	vmov	d0, r8, r9
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff ff00 	bl	8001694 <_ZN3PID9calculateEdd>
 8001894:	ec53 2b10 	vmov	r2, r3, d0
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f964 	bl	8000b68 <__aeabi_d2iz>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f84b 	bl	8001940 <_ZN5Motor11setMotorPWMEl>
	}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}

080018b4 <_ZN5Motor8pidClearEv>:

	void pidClear(){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
		static bool helpFlag = true;
		bool targFlag = (bool)targetSpeed;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	73fb      	strb	r3, [r7, #15]
		if(helpFlag!=targFlag) {
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <_ZN5Motor8pidClearEv+0x38>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d007      	beq.n	80018e4 <_ZN5Motor8pidClearEv+0x30>
			pid.clear();
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3310      	adds	r3, #16
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff3e 	bl	800175a <_ZN3PID5clearEv>
			helpFlag = targFlag;
 80018de:	4a03      	ldr	r2, [pc, #12]	; (80018ec <_ZN5Motor8pidClearEv+0x38>)
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	7013      	strb	r3, [r2, #0]
		}
	}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000000 	.word	0x20000000

080018f0 <_ZN5Motor17calcCurSpeedMotorEv>:

private:

	void calcCurSpeedMotor(){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
				enc.handler();
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fe7a 	bl	80015f4 <_ZN7Encoder7handlerEv>
				currentSpeed = constrain(((enc.getEncoderValue())*60000)/(ENC_MAX*FAST_CYCLE),-MAX_MOT_SPEED,MAX_MOT_SPEED);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fe8c 	bl	8001620 <_ZN7Encoder15getEncoderValueEv>
 8001908:	4603      	mov	r3, r0
 800190a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800190e:	fb02 f303 	mul.w	r3, r2, r3
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <_ZN5Motor17calcCurSpeedMotorEv+0x4c>)
 8001914:	fb82 1203 	smull	r1, r2, r2, r3
 8001918:	441a      	add	r2, r3
 800191a:	1292      	asrs	r2, r2, #10
 800191c:	17db      	asrs	r3, r3, #31
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2264      	movs	r2, #100	; 0x64
 8001922:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff2f 	bl	800178a <_Z9constrainlll>
 800192c:	4602      	mov	r2, r0
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	649a      	str	r2, [r3, #72]	; 0x48
		}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	91a2b3c5 	.word	0x91a2b3c5

08001940 <_ZN5Motor11setMotorPWMEl>:
	void setMotorPWM(int32_t PWM){
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]


		if (ctrlTimCh == CHANNEL1||ctrlTimCh == CHANNEL2){
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194e:	2b01      	cmp	r3, #1
 8001950:	d003      	beq.n	800195a <_ZN5Motor11setMotorPWMEl+0x1a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001956:	2b02      	cmp	r3, #2
 8001958:	d11f      	bne.n	800199a <_ZN5Motor11setMotorPWMEl+0x5a>
			if (PWM>0){
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	dd0a      	ble.n	8001976 <_ZN5Motor11setMotorPWMEl+0x36>
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_1, ZERO);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2200      	movs	r2, #0
 8001968:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_2, PWM);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	639a      	str	r2, [r3, #56]	; 0x38
 8001974:	e011      	b.n	800199a <_ZN5Motor11setMotorPWMEl+0x5a>
			}

			else if (PWM<0){
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	da0e      	bge.n	800199a <_ZN5Motor11setMotorPWMEl+0x5a>
				PWM = abs(PWM);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	bfb8      	it	lt
 8001982:	425b      	neglt	r3, r3
 8001984:	603b      	str	r3, [r7, #0]
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_2, ZERO);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2200      	movs	r2, #0
 800198e:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_1, PWM);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}

		if (ctrlTimCh == CHANNEL3||ctrlTimCh == CHANNEL4){
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d003      	beq.n	80019aa <_ZN5Motor11setMotorPWMEl+0x6a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d11f      	bne.n	80019ea <_ZN5Motor11setMotorPWMEl+0xaa>
			if (PWM>0){
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	dd0a      	ble.n	80019c6 <_ZN5Motor11setMotorPWMEl+0x86>
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, ZERO);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2200      	movs	r2, #0
 80019b8:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, PWM);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40
				PWM = abs(PWM);
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, ZERO);
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, PWM);
			}
		}
	}
 80019c4:	e011      	b.n	80019ea <_ZN5Motor11setMotorPWMEl+0xaa>
			else if (PWM<0){
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da0e      	bge.n	80019ea <_ZN5Motor11setMotorPWMEl+0xaa>
				PWM = abs(PWM);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	bfb8      	it	lt
 80019d2:	425b      	neglt	r3, r3
 80019d4:	603b      	str	r3, [r7, #0]
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, ZERO);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2200      	movs	r2, #0
 80019de:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, PWM);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <_ZN6TelegaC1Ev>:

class Telega{

public:

	Telega():
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
		leftMotor(ENC_LEFT_TIM,MOT_L_PWM_TIM,CHANNEL3),
		rightMotor(ENC_RIGHT_TIM,MOT_R_PWM_TIM,CHANNEL1)
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	2303      	movs	r3, #3
 8001a04:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <_ZN6TelegaC1Ev+0x30>)
 8001a06:	4909      	ldr	r1, [pc, #36]	; (8001a2c <_ZN6TelegaC1Ev+0x34>)
 8001a08:	f7ff feda 	bl	80017c0 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8001a12:	2301      	movs	r3, #1
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <_ZN6TelegaC1Ev+0x30>)
 8001a16:	4906      	ldr	r1, [pc, #24]	; (8001a30 <_ZN6TelegaC1Ev+0x38>)
 8001a18:	f7ff fed2 	bl	80017c0 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>
	{};
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200009a4 	.word	0x200009a4
 8001a2c:	2000095c 	.word	0x2000095c
 8001a30:	200009ec 	.word	0x200009ec

08001a34 <_ZN6Telega7handlerEv>:

	void handler(){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
			leftMotor.handler();
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff05 	bl	800184e <_ZN5Motor7handlerEv>
			rightMotor.handler();
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3350      	adds	r3, #80	; 0x50
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff00 	bl	800184e <_ZN5Motor7handlerEv>
	}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <_ZN6Telega13setRobotSpeedEll>:
	void setRobotSpeed(int32_t linSpeed, int32_t angSpeed){
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b084      	sub	sp, #16
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
		setMotorSpeed(linSpeed-angSpeed,linSpeed+angSpeed);
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1ad1      	subs	r1, r2, r3
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 f804 	bl	8001a7e <_ZN6Telega13setMotorSpeedEll>
	}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_ZN6Telega13setMotorSpeedEll>:


private:

	void setMotorSpeed(int32_t lSpd, int32_t rSpd){
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b084      	sub	sp, #16
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
			leftMotor.setTargetSpeed(lSpd);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fec6 	bl	8001820 <_ZN5Motor14setTargetSpeedEl>
			rightMotor.setTargetSpeed(-rSpd);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	425b      	negs	r3, r3
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	f7ff febd 	bl	8001820 <_ZN5Motor14setTargetSpeedEl>
	}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <_ZN10TanControl16calcTgtRobotSpdsEff>:
	float ang;
};

class TanControl{
public:
	Spd calcTgtRobotSpds(float dist, float ang) {
 8001ab0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ab4:	b088      	sub	sp, #32
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6178      	str	r0, [r7, #20]
 8001aba:	ed87 0a04 	vstr	s0, [r7, #16]
 8001abe:	edc7 0a03 	vstr	s1, [r7, #12]
		clearSpd();
 8001ac2:	6978      	ldr	r0, [r7, #20]
 8001ac4:	f000 f8fa 	bl	8001cbc <_ZN10TanControl8clearSpdEv>
		spd.lin = MAX_MOT_SPEED * tanh(dist) * cos(ang);
 8001ac8:	6938      	ldr	r0, [r7, #16]
 8001aca:	f7fe fd45 	bl	8000558 <__aeabi_f2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	ec43 2b10 	vmov	d0, r2, r3
 8001ad6:	f007 fc23 	bl	8009320 <tanh>
 8001ada:	ec51 0b10 	vmov	r0, r1, d0
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <_ZN10TanControl16calcTgtRobotSpdsEff+0x120>)
 8001ae4:	f7fe fd90 	bl	8000608 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4614      	mov	r4, r2
 8001aee:	461d      	mov	r5, r3
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f7fe fd31 	bl	8000558 <__aeabi_f2d>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	ec43 2b10 	vmov	d0, r2, r3
 8001afe:	f007 fb63 	bl	80091c8 <cos>
 8001b02:	ec53 2b10 	vmov	r2, r3, d0
 8001b06:	4620      	mov	r0, r4
 8001b08:	4629      	mov	r1, r5
 8001b0a:	f7fe fd7d 	bl	8000608 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7ff f84f 	bl	8000bb8 <__aeabi_d2f>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	601a      	str	r2, [r3, #0]
		spd.ang = K_ANG * ang + spd.lin * sin(ang) / dist;
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f7fe fd19 	bl	8000558 <__aeabi_f2d>
 8001b26:	a328      	add	r3, pc, #160	; (adr r3, 8001bc8 <_ZN10TanControl16calcTgtRobotSpdsEff+0x118>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	f7fe fd6c 	bl	8000608 <__aeabi_dmul>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4690      	mov	r8, r2
 8001b36:	4699      	mov	r9, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fd0b 	bl	8000558 <__aeabi_f2d>
 8001b42:	4604      	mov	r4, r0
 8001b44:	460d      	mov	r5, r1
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f7fe fd06 	bl	8000558 <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	ec43 2b10 	vmov	d0, r2, r3
 8001b54:	f007 fb8c 	bl	8009270 <sin>
 8001b58:	ec53 2b10 	vmov	r2, r3, d0
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	4629      	mov	r1, r5
 8001b60:	f7fe fd52 	bl	8000608 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4614      	mov	r4, r2
 8001b6a:	461d      	mov	r5, r3
 8001b6c:	6938      	ldr	r0, [r7, #16]
 8001b6e:	f7fe fcf3 	bl	8000558 <__aeabi_f2d>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4620      	mov	r0, r4
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f7fe fe6f 	bl	800085c <__aeabi_ddiv>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4640      	mov	r0, r8
 8001b84:	4649      	mov	r1, r9
 8001b86:	f7fe fb89 	bl	800029c <__adddf3>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	f7ff f811 	bl	8000bb8 <__aeabi_d2f>
 8001b96:	4602      	mov	r2, r0
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	605a      	str	r2, [r3, #4]
		return spd;
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	f107 0318 	add.w	r3, r7, #24
 8001ba2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba6:	e883 0003 	stmia.w	r3, {r0, r1}
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	ee07 2a10 	vmov	s14, r2
 8001bb2:	ee07 3a90 	vmov	s15, r3
	}
 8001bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bba:	eef0 0a67 	vmov.f32	s1, s15
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bc6:	bf00      	nop
 8001bc8:	47ae147b 	.word	0x47ae147b
 8001bcc:	3fb47ae1 	.word	0x3fb47ae1
 8001bd0:	40590000 	.word	0x40590000

08001bd4 <_ZN10TanControl13getErrorAngleEPf>:

	float getErrorAngle(float *distances){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
		int32_t errorAngle = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
		int32_t minDistance = 10000;
 8001be2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001be6:	613b      	str	r3, [r7, #16]
		  for(int i = 0;i<=360;i++){
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001bf2:	dc2f      	bgt.n	8001c54 <_ZN10TanControl13getErrorAngleEPf+0x80>

			  if(distances[i]<minDistance){
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	ed93 7a00 	vldr	s14, [r3]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c12:	d51b      	bpl.n	8001c4c <_ZN10TanControl13getErrorAngleEPf+0x78>
				  minDistance = distances[i];
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c24:	ee17 3a90 	vmov	r3, s15
 8001c28:	613b      	str	r3, [r7, #16]
				  errorAngle = limitAng(i);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	eeb0 0a67 	vmov.f32	s0, s15
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f815 	bl	8001c68 <_ZN10TanControl8limitAngEf>
 8001c3e:	eef0 7a40 	vmov.f32	s15, s0
 8001c42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c46:	ee17 3a90 	vmov	r3, s15
 8001c4a:	617b      	str	r3, [r7, #20]
		  for(int i = 0;i<=360;i++){
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	e7cb      	b.n	8001bec <_ZN10TanControl13getErrorAngleEPf+0x18>
			  }
		  }
		  return errorAngle;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	}
 8001c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_ZN10TanControl8limitAngEf>:
private:
	float limitAng(float ang){
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	ed87 0a00 	vstr	s0, [r7]
		int32_t inAng = ang;
 8001c74:	edd7 7a00 	vldr	s15, [r7]
 8001c78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c7c:	ee17 3a90 	vmov	r3, s15
 8001c80:	60fb      	str	r3, [r7, #12]
		while (inAng >= HALF_CIRCLE) {
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2bb3      	cmp	r3, #179	; 0xb3
 8001c86:	dd04      	ble.n	8001c92 <_ZN10TanControl8limitAngEf+0x2a>
			inAng -= 2 * HALF_CIRCLE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c8e:	60fb      	str	r3, [r7, #12]
		while (inAng >= HALF_CIRCLE) {
 8001c90:	e7f7      	b.n	8001c82 <_ZN10TanControl8limitAngEf+0x1a>
		}
		while (inAng <= -HALF_CIRCLE) {
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 8001c98:	da04      	bge.n	8001ca4 <_ZN10TanControl8limitAngEf+0x3c>
			inAng += 2 * HALF_CIRCLE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ca0:	60fb      	str	r3, [r7, #12]
		while (inAng <= -HALF_CIRCLE) {
 8001ca2:	e7f6      	b.n	8001c92 <_ZN10TanControl8limitAngEf+0x2a>
		}
		return inAng;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	ee07 3a90 	vmov	s15, r3
 8001caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	}
 8001cae:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_ZN10TanControl8clearSpdEv>:
	void clearSpd(){
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
		spd.lin = 0;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
		spd.ang = 0;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	605a      	str	r2, [r3, #4]
	}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 fda0 	bl	8002830 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	0000      	movs	r0, r0
 8001cfc:	0000      	movs	r0, r0
	...

08001d00 <_ZN12ActionsQueueC1Ev>:

class ActionsQueue
{
public:
	
	ActionsQueue():pidl(10,0.0005,1){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fd7c 	bl	8002808 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3328      	adds	r3, #40	; 0x28
 8001d14:	ed9f 2b0e 	vldr	d2, [pc, #56]	; 8001d50 <_ZN12ActionsQueueC1Ev+0x50>
 8001d18:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8001d58 <_ZN12ActionsQueueC1Ev+0x58>
 8001d1c:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8001d60 <_ZN12ActionsQueueC1Ev+0x60>
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fc89 	bl	8001638 <_ZN3PIDC1Eddd>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3350      	adds	r3, #80	; 0x50
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f93c 	bl	8000fa8 <_ZN7RPLidarC1Ev>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fe5e 	bl	80019f8 <_ZN6TelegaC1Ev>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
	};
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	00000000 	.word	0x00000000
 8001d54:	3ff00000 	.word	0x3ff00000
 8001d58:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d5c:	3f40624d 	.word	0x3f40624d
 8001d60:	00000000 	.word	0x00000000
 8001d64:	40240000 	.word	0x40240000

08001d68 <_ZN12ActionsQueue4initEv>:
	void init(){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
		lid.begin();
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3350      	adds	r3, #80	; 0x50
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f951 	bl	800101c <_ZN7RPLidar5beginEv>
		lid.startScan();
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3350      	adds	r3, #80	; 0x50
 8001d7e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fa91 	bl	80012ac <_ZN7RPLidar9startScanEbm>
	}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_ZN12ActionsQueue4pushE7ACTIONS>:

	void push(ACTIONS action) {
 8001d92:	b590      	push	{r4, r7, lr}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	70fb      	strb	r3, [r7, #3]
		rQueue.push(RobotInstruction(action));
 8001d9e:	687c      	ldr	r4, [r7, #4]
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	f107 0308 	add.w	r3, r7, #8
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f963 	bl	8002074 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	4619      	mov	r1, r3
 8001db4:	4620      	mov	r0, r4
 8001db6:	f000 fd60 	bl	800287a <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>
	};
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}

08001dc2 <_ZN12ActionsQueue7isClearEv>:
		while (!rQueue.empty()) {
			rQueue.pop();
		}
		delayInit = false;
	}
	bool isClear() {
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
		if (rQueue.size() == 0) {
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fd66 	bl	800289e <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <_ZN12ActionsQueue7isClearEv+0x24>
			return true;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <_ZN12ActionsQueue7isClearEv+0x44>
		}
		else if (rQueue.front().robotAction == ACTIONS::IDLE) {
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 fd7e 	bl	80028ea <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 8001dee:	4603      	mov	r3, r0
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	bf0c      	ite	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	2300      	movne	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <_ZN12ActionsQueue7isClearEv+0x42>
			return true;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <_ZN12ActionsQueue7isClearEv+0x44>
		}
		else {
			return false;
 8001e04:	2300      	movs	r3, #0
		};
	}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_ZN12ActionsQueue7handlerEv>:

	void handler(){
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
		telega.handler();
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fe09 	bl	8001a34 <_ZN6Telega7handlerEv>
	}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <_ZN12ActionsQueue9fastCycleEv>:

	void fastCycle() {
 8001e2c:	b5b0      	push	{r4, r5, r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

		float K,Y;
		if (rQueue.empty()) {
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fd3e 	bl	80028b8 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5emptyEv>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00d      	beq.n	8001e5e <_ZN12ActionsQueue9fastCycleEv+0x32>
			rQueue.push(RobotInstruction(IDLE));
 8001e42:	687c      	ldr	r4, [r7, #4]
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f912 	bl	8002074 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	4620      	mov	r0, r4
 8001e58:	f000 fd0f 	bl	800287a <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>
				break;
			default:
				break;
			}
		}
	};
 8001e5c:	e104      	b.n	8002068 <_ZN12ActionsQueue9fastCycleEv+0x23c>
		else if ((rQueue.size() > 1) && (rQueue.front().robotAction == IDLE)) {
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fd1c 	bl	800289e <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d909      	bls.n	8001e80 <_ZN12ActionsQueue9fastCycleEv+0x54>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fd3b 	bl	80028ea <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 8001e74:	4603      	mov	r3, r0
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <_ZN12ActionsQueue9fastCycleEv+0x54>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <_ZN12ActionsQueue9fastCycleEv+0x56>
 8001e80:	2300      	movs	r3, #0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <_ZN12ActionsQueue9fastCycleEv+0x64>
			rQueue.pop();
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fd22 	bl	80028d2 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
	};
 8001e8e:	e0eb      	b.n	8002068 <_ZN12ActionsQueue9fastCycleEv+0x23c>
			RobotInstruction _curInstr = rQueue.front();
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fd29 	bl	80028ea <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ea2:	e883 0003 	stmia.w	r3, {r0, r1}
			if(IS_OK(lid.waitPoint())) ;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3350      	adds	r3, #80	; 0x50
 8001eaa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fa8c 	bl	80013cc <_ZN7RPLidar9waitPointEm>
			switch (_curInstr.robotAction)
 8001eb4:	7b3b      	ldrb	r3, [r7, #12]
 8001eb6:	2b07      	cmp	r3, #7
 8001eb8:	f200 80d3 	bhi.w	8002062 <_ZN12ActionsQueue9fastCycleEv+0x236>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <_ZN12ActionsQueue9fastCycleEv+0x98>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08002063 	.word	0x08002063
 8001ec8:	08001ee5 	.word	0x08001ee5
 8001ecc:	08001eff 	.word	0x08001eff
 8001ed0:	08001f19 	.word	0x08001f19
 8001ed4:	08001f35 	.word	0x08001f35
 8001ed8:	08001f4f 	.word	0x08001f4f
 8001edc:	08001f6b 	.word	0x08001f6b
 8001ee0:	08002005 	.word	0x08002005
				telega.setRobotSpeed(0,0);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fdb1 	bl	8001a56 <_ZN6Telega13setRobotSpeedEll>
				rQueue.pop();
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fceb 	bl	80028d2 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8001efc:	e0b4      	b.n	8002068 <_ZN12ActionsQueue9fastCycleEv+0x23c>
				telega.setRobotSpeed(0,TURN_SPEED);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001f04:	2264      	movs	r2, #100	; 0x64
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fda4 	bl	8001a56 <_ZN6Telega13setRobotSpeedEll>
				rQueue.pop();
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fcde 	bl	80028d2 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8001f16:	e0a7      	b.n	8002068 <_ZN12ActionsQueue9fastCycleEv+0x23c>
				telega.setRobotSpeed(0,-TURN_SPEED);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001f1e:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fd96 	bl	8001a56 <_ZN6Telega13setRobotSpeedEll>
				rQueue.pop();
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fcd0 	bl	80028d2 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8001f32:	e099      	b.n	8002068 <_ZN12ActionsQueue9fastCycleEv+0x23c>
				telega.setRobotSpeed(MAX_MOT_SPEED*0.8,0);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2150      	movs	r1, #80	; 0x50
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fd89 	bl	8001a56 <_ZN6Telega13setRobotSpeedEll>
				rQueue.pop();
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fcc3 	bl	80028d2 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8001f4c:	e08c      	b.n	8002068 <_ZN12ActionsQueue9fastCycleEv+0x23c>
				telega.setRobotSpeed(-MAX_MOT_SPEED*0.8, 0);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8001f54:	2200      	movs	r2, #0
 8001f56:	f06f 014f 	mvn.w	r1, #79	; 0x4f
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fd7b 	bl	8001a56 <_ZN6Telega13setRobotSpeedEll>
				rQueue.pop();
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fcb5 	bl	80028d2 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8001f68:	e07e      	b.n	8002068 <_ZN12ActionsQueue9fastCycleEv+0x23c>
				K = tan.getErrorAngle(lid.getDistances());
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f503 64d4 	add.w	r4, r3, #1696	; 0x6a0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3350      	adds	r3, #80	; 0x50
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff f9e9 	bl	800134c <_ZN7RPLidar12getDistancesEv>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f7ff fe28 	bl	8001bd4 <_ZN10TanControl13getErrorAngleEPf>
 8001f84:	ed87 0a07 	vstr	s0, [r7, #28]
				spd = tan.calcTgtRobotSpds(lid.getDistances((int32_t)K), K);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f503 64d4 	add.w	r4, r3, #1696	; 0x6a0
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3350      	adds	r3, #80	; 0x50
 8001f92:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f9a:	ee17 1a90 	vmov	r1, s15
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f9e0 	bl	8001364 <_ZN7RPLidar12getDistancesEi>
 8001fa4:	eef0 7a40 	vmov.f32	s15, s0
 8001fa8:	687d      	ldr	r5, [r7, #4]
 8001faa:	edd7 0a07 	vldr	s1, [r7, #28]
 8001fae:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7ff fd7c 	bl	8001ab0 <_ZN10TanControl16calcTgtRobotSpdsEff>
 8001fb8:	eeb0 7a40 	vmov.f32	s14, s0
 8001fbc:	eef0 7a60 	vmov.f32	s15, s1
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 8001fc6:	ed83 7a00 	vstr	s14, [r3]
 8001fca:	462b      	mov	r3, r5
 8001fcc:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 8001fd0:	edc3 7a00 	vstr	s15, [r3]
				telega.setRobotSpeed(spd.lin,spd.ang);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f503 60c0 	add.w	r0, r3, #1536	; 0x600
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff6:	ee17 2a90 	vmov	r2, s15
 8001ffa:	ee17 1a10 	vmov	r1, s14
 8001ffe:	f7ff fd2a 	bl	8001a56 <_ZN6Telega13setRobotSpeedEll>
				break;
 8002002:	e031      	b.n	8002068 <_ZN12ActionsQueue9fastCycleEv+0x23c>
				if (!delayInit) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 36b0 	ldrb.w	r3, [r3, #1712]	; 0x6b0
 800200a:	f083 0301 	eor.w	r3, r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <_ZN12ActionsQueue9fastCycleEv+0x1fc>
					delayInit = true;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
					delayBegin = HAL_GetTick();
 800201c:	f001 ffce 	bl	8003fbc <HAL_GetTick>
 8002020:	4603      	mov	r3, r0
 8002022:	4a13      	ldr	r2, [pc, #76]	; (8002070 <_ZN12ActionsQueue9fastCycleEv+0x244>)
 8002024:	6013      	str	r3, [r2, #0]
				break;
 8002026:	e01e      	b.n	8002066 <_ZN12ActionsQueue9fastCycleEv+0x23a>
				else if (HAL_GetTick() - delayBegin >= (uint16_t)_curInstr.parametr) {
 8002028:	f001 ffc8 	bl	8003fbc <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <_ZN12ActionsQueue9fastCycleEv+0x244>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	edd7 7a04 	vldr	s15, [r7, #16]
 8002038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800203c:	ee17 2a90 	vmov	r2, s15
 8002040:	b292      	uxth	r2, r2
 8002042:	4293      	cmp	r3, r2
 8002044:	bf2c      	ite	cs
 8002046:	2301      	movcs	r3, #1
 8002048:	2300      	movcc	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <_ZN12ActionsQueue9fastCycleEv+0x23a>
					rQueue.pop();
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fc3d 	bl	80028d2 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
					delayInit = false;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
				break;
 8002060:	e001      	b.n	8002066 <_ZN12ActionsQueue9fastCycleEv+0x23a>
				break;
 8002062:	bf00      	nop
 8002064:	e000      	b.n	8002068 <_ZN12ActionsQueue9fastCycleEv+0x23c>
				break;
 8002066:	bf00      	nop
	};
 8002068:	bf00      	nop
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bdb0      	pop	{r4, r5, r7, pc}
 8002070:	20000200 	.word	0x20000200

08002074 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>:
		bool paramAvalible = false;
		bool pointAvalible = false;
		float parametr = 0;

		RobotInstruction() {};
		RobotInstruction(ACTIONS _action)
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
			: robotAction(_action) {};
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	705a      	strb	r2, [r3, #1]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	709a      	strb	r2, [r3, #2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) // Проверяем, что прерывание от TIM3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d102      	bne.n	80020c0 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        // Действия при срабатывании прерывания
    	Queue.handler();
 80020ba:	4804      	ldr	r0, [pc, #16]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80020bc:	f7ff fea7 	bl	8001e0e <_ZN12ActionsQueue7handlerEv>
    }
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40010000 	.word	0x40010000
 80020cc:	20000208 	.word	0x20000208

080020d0 <_Z4initv>:
void init(){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	  //питание для левого энкодера
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020da:	481c      	ldr	r0, [pc, #112]	; (800214c <_Z4initv+0x7c>)
 80020dc:	f002 fbea 	bl	80048b4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020e6:	4819      	ldr	r0, [pc, #100]	; (800214c <_Z4initv+0x7c>)
 80020e8:	f002 fbe4 	bl	80048b4 <HAL_GPIO_WritePin>

	  //питание для правого энкодера
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2110      	movs	r1, #16
 80020f0:	4817      	ldr	r0, [pc, #92]	; (8002150 <_Z4initv+0x80>)
 80020f2:	f002 fbdf 	bl	80048b4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80020f6:	2201      	movs	r2, #1
 80020f8:	2120      	movs	r1, #32
 80020fa:	4815      	ldr	r0, [pc, #84]	; (8002150 <_Z4initv+0x80>)
 80020fc:	f002 fbda 	bl	80048b4 <HAL_GPIO_WritePin>

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002100:	2100      	movs	r1, #0
 8002102:	4814      	ldr	r0, [pc, #80]	; (8002154 <_Z4initv+0x84>)
 8002104:	f004 ff6a 	bl	8006fdc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002108:	2104      	movs	r1, #4
 800210a:	4812      	ldr	r0, [pc, #72]	; (8002154 <_Z4initv+0x84>)
 800210c:	f004 ff66 	bl	8006fdc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002110:	2108      	movs	r1, #8
 8002112:	4810      	ldr	r0, [pc, #64]	; (8002154 <_Z4initv+0x84>)
 8002114:	f004 ff62 	bl	8006fdc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002118:	210c      	movs	r1, #12
 800211a:	480e      	ldr	r0, [pc, #56]	; (8002154 <_Z4initv+0x84>)
 800211c:	f004 ff5e 	bl	8006fdc <HAL_TIM_PWM_Start>

	  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8002120:	2100      	movs	r1, #0
 8002122:	480d      	ldr	r0, [pc, #52]	; (8002158 <_Z4initv+0x88>)
 8002124:	f005 f8b0 	bl	8007288 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 8002128:	2104      	movs	r1, #4
 800212a:	480b      	ldr	r0, [pc, #44]	; (8002158 <_Z4initv+0x88>)
 800212c:	f005 f8ac 	bl	8007288 <HAL_TIM_Encoder_Start>

	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8002130:	2100      	movs	r1, #0
 8002132:	480a      	ldr	r0, [pc, #40]	; (800215c <_Z4initv+0x8c>)
 8002134:	f005 f8a8 	bl	8007288 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8002138:	2104      	movs	r1, #4
 800213a:	4808      	ldr	r0, [pc, #32]	; (800215c <_Z4initv+0x8c>)
 800213c:	f005 f8a4 	bl	8007288 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Base_Start_IT(&htim1);
 8002140:	4807      	ldr	r0, [pc, #28]	; (8002160 <_Z4initv+0x90>)
 8002142:	f004 fe99 	bl	8006e78 <HAL_TIM_Base_Start_IT>

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40020000 	.word	0x40020000
 8002150:	40020400 	.word	0x40020400
 8002154:	200009a4 	.word	0x200009a4
 8002158:	2000095c 	.word	0x2000095c
 800215c:	200009ec 	.word	0x200009ec
 8002160:	20000914 	.word	0x20000914

08002164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002168:	f001 fec2 	bl	8003ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800216c:	f000 f826 	bl	80021bc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002170:	f000 faac 	bl	80026cc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8002174:	f000 fa7c 	bl	8002670 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8002178:	f000 f892 	bl	80022a0 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 800217c:	f000 f924 	bl	80023c8 <_ZL12MX_TIM2_Initv>
  MX_TIM4_Init();
 8002180:	f000 fa18 	bl	80025b4 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 8002184:	f000 f97e 	bl	8002484 <_ZL12MX_TIM3_Initv>
  MX_TIM1_Init();
 8002188:	f000 f8be 	bl	8002308 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */

  init();
 800218c:	f7ff ffa0 	bl	80020d0 <_Z4initv>
  Queue.init();
 8002190:	4809      	ldr	r0, [pc, #36]	; (80021b8 <main+0x54>)
 8002192:	f7ff fde9 	bl	8001d68 <_ZN12ActionsQueue4initEv>
  HAL_Delay(100);
 8002196:	2064      	movs	r0, #100	; 0x64
 8002198:	f001 ff1c 	bl	8003fd4 <HAL_Delay>
	  green = tcs.getColorGreen();
	  blue = tcs.getColorBlue();
	  white = tcs.getColorWhite();
	*/

	  if(Queue.isClear()){
 800219c:	4806      	ldr	r0, [pc, #24]	; (80021b8 <main+0x54>)
 800219e:	f7ff fe10 	bl	8001dc2 <_ZN12ActionsQueue7isClearEv>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <main+0x4c>
		  Queue.push(TURN_RIGHT); // Движение вперёд
 80021a8:	2103      	movs	r1, #3
 80021aa:	4803      	ldr	r0, [pc, #12]	; (80021b8 <main+0x54>)
 80021ac:	f7ff fdf1 	bl	8001d92 <_ZN12ActionsQueue4pushE7ACTIONS>
	  }

      Queue.fastCycle();
 80021b0:	4801      	ldr	r0, [pc, #4]	; (80021b8 <main+0x54>)
 80021b2:	f7ff fe3b 	bl	8001e2c <_ZN12ActionsQueue9fastCycleEv>
	  if(Queue.isClear()){
 80021b6:	e7f1      	b.n	800219c <main+0x38>
 80021b8:	20000208 	.word	0x20000208

080021bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b094      	sub	sp, #80	; 0x50
 80021c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021c2:	f107 0320 	add.w	r3, r7, #32
 80021c6:	2230      	movs	r2, #48	; 0x30
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f008 fbd2 	bl	800a974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <_Z18SystemClock_Configv+0xdc>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	4a2b      	ldr	r2, [pc, #172]	; (8002298 <_Z18SystemClock_Configv+0xdc>)
 80021ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ee:	6413      	str	r3, [r2, #64]	; 0x40
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <_Z18SystemClock_Configv+0xdc>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021fc:	2300      	movs	r3, #0
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	4b26      	ldr	r3, [pc, #152]	; (800229c <_Z18SystemClock_Configv+0xe0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a25      	ldr	r2, [pc, #148]	; (800229c <_Z18SystemClock_Configv+0xe0>)
 8002206:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b23      	ldr	r3, [pc, #140]	; (800229c <_Z18SystemClock_Configv+0xe0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002218:	2301      	movs	r3, #1
 800221a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800221c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002222:	2302      	movs	r3, #2
 8002224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800222a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800222c:	230c      	movs	r3, #12
 800222e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002230:	2360      	movs	r3, #96	; 0x60
 8002232:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002234:	2302      	movs	r3, #2
 8002236:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002238:	2304      	movs	r3, #4
 800223a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800223c:	f107 0320 	add.w	r3, r7, #32
 8002240:	4618      	mov	r0, r3
 8002242:	f004 f971 	bl	8006528 <HAL_RCC_OscConfig>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002256:	f000 fac5 	bl	80027e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800225a:	230f      	movs	r3, #15
 800225c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800225e:	2302      	movs	r3, #2
 8002260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	2103      	movs	r1, #3
 8002276:	4618      	mov	r0, r3
 8002278:	f004 fbce 	bl	8006a18 <HAL_RCC_ClockConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	bf14      	ite	ne
 8002282:	2301      	movne	r3, #1
 8002284:	2300      	moveq	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 800228c:	f000 faaa 	bl	80027e4 <Error_Handler>
  }
}
 8002290:	bf00      	nop
 8002292:	3750      	adds	r7, #80	; 0x50
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40023800 	.word	0x40023800
 800229c:	40007000 	.word	0x40007000

080022a0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <_ZL12MX_I2C1_Initv+0x5c>)
 80022a6:	4a16      	ldr	r2, [pc, #88]	; (8002300 <_ZL12MX_I2C1_Initv+0x60>)
 80022a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <_ZL12MX_I2C1_Initv+0x5c>)
 80022ac:	4a15      	ldr	r2, [pc, #84]	; (8002304 <_ZL12MX_I2C1_Initv+0x64>)
 80022ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <_ZL12MX_I2C1_Initv+0x5c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <_ZL12MX_I2C1_Initv+0x5c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <_ZL12MX_I2C1_Initv+0x5c>)
 80022be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <_ZL12MX_I2C1_Initv+0x5c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <_ZL12MX_I2C1_Initv+0x5c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <_ZL12MX_I2C1_Initv+0x5c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <_ZL12MX_I2C1_Initv+0x5c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022dc:	4807      	ldr	r0, [pc, #28]	; (80022fc <_ZL12MX_I2C1_Initv+0x5c>)
 80022de:	f002 fb03 	bl	80048e8 <HAL_I2C_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf14      	ite	ne
 80022e8:	2301      	movne	r3, #1
 80022ea:	2300      	moveq	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80022f2:	f000 fa77 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200008c0 	.word	0x200008c0
 8002300:	40005400 	.word	0x40005400
 8002304:	000186a0 	.word	0x000186a0

08002308 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800230e:	f107 0308 	add.w	r3, r7, #8
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800231c:	463b      	mov	r3, r7
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002324:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <_ZL12MX_TIM1_Initv+0xb8>)
 8002326:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <_ZL12MX_TIM1_Initv+0xbc>)
 8002328:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 800232a:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <_ZL12MX_TIM1_Initv+0xb8>)
 800232c:	2263      	movs	r2, #99	; 0x63
 800232e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002330:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <_ZL12MX_TIM1_Initv+0xb8>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002336:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <_ZL12MX_TIM1_Initv+0xb8>)
 8002338:	f240 32e7 	movw	r2, #999	; 0x3e7
 800233c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <_ZL12MX_TIM1_Initv+0xb8>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002344:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <_ZL12MX_TIM1_Initv+0xb8>)
 8002346:	2200      	movs	r2, #0
 8002348:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <_ZL12MX_TIM1_Initv+0xb8>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002350:	481b      	ldr	r0, [pc, #108]	; (80023c0 <_ZL12MX_TIM1_Initv+0xb8>)
 8002352:	f004 fd41 	bl	8006dd8 <HAL_TIM_Base_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf14      	ite	ne
 800235c:	2301      	movne	r3, #1
 800235e:	2300      	moveq	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8002366:	f000 fa3d 	bl	80027e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800236a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800236e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002370:	f107 0308 	add.w	r3, r7, #8
 8002374:	4619      	mov	r1, r3
 8002376:	4812      	ldr	r0, [pc, #72]	; (80023c0 <_ZL12MX_TIM1_Initv+0xb8>)
 8002378:	f005 f9de 	bl	8007738 <HAL_TIM_ConfigClockSource>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	bf14      	ite	ne
 8002382:	2301      	movne	r3, #1
 8002384:	2300      	moveq	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 800238c:	f000 fa2a 	bl	80027e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002390:	2300      	movs	r3, #0
 8002392:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002398:	463b      	mov	r3, r7
 800239a:	4619      	mov	r1, r3
 800239c:	4808      	ldr	r0, [pc, #32]	; (80023c0 <_ZL12MX_TIM1_Initv+0xb8>)
 800239e:	f005 fd87 	bl	8007eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	bf14      	ite	ne
 80023a8:	2301      	movne	r3, #1
 80023aa:	2300      	moveq	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 80023b2:	f000 fa17 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000914 	.word	0x20000914
 80023c4:	40010000 	.word	0x40010000

080023c8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	; 0x30
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	2224      	movs	r2, #36	; 0x24
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f008 facc 	bl	800a974 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023e4:	4b26      	ldr	r3, [pc, #152]	; (8002480 <_ZL12MX_TIM2_Initv+0xb8>)
 80023e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <_ZL12MX_TIM2_Initv+0xb8>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f2:	4b23      	ldr	r3, [pc, #140]	; (8002480 <_ZL12MX_TIM2_Initv+0xb8>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80023f8:	4b21      	ldr	r3, [pc, #132]	; (8002480 <_ZL12MX_TIM2_Initv+0xb8>)
 80023fa:	f04f 32ff 	mov.w	r2, #4294967295
 80023fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <_ZL12MX_TIM2_Initv+0xb8>)
 8002402:	2200      	movs	r2, #0
 8002404:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002406:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <_ZL12MX_TIM2_Initv+0xb8>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800240c:	2301      	movs	r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002414:	2301      	movs	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002420:	2300      	movs	r3, #0
 8002422:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002424:	2301      	movs	r3, #1
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002428:	2300      	movs	r3, #0
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	4619      	mov	r1, r3
 8002436:	4812      	ldr	r0, [pc, #72]	; (8002480 <_ZL12MX_TIM2_Initv+0xb8>)
 8002438:	f004 fe80 	bl	800713c <HAL_TIM_Encoder_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 800244c:	f000 f9ca 	bl	80027e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002450:	2300      	movs	r3, #0
 8002452:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	4619      	mov	r1, r3
 800245c:	4808      	ldr	r0, [pc, #32]	; (8002480 <_ZL12MX_TIM2_Initv+0xb8>)
 800245e:	f005 fd27 	bl	8007eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	bf14      	ite	ne
 8002468:	2301      	movne	r3, #1
 800246a:	2300      	moveq	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8002472:	f000 f9b7 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	3730      	adds	r7, #48	; 0x30
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000095c 	.word	0x2000095c

08002484 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248a:	f107 0320 	add.w	r3, r7, #32
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
 80024a0:	611a      	str	r2, [r3, #16]
 80024a2:	615a      	str	r2, [r3, #20]
 80024a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024a6:	4b41      	ldr	r3, [pc, #260]	; (80025ac <_ZL12MX_TIM3_Initv+0x128>)
 80024a8:	4a41      	ldr	r2, [pc, #260]	; (80025b0 <_ZL12MX_TIM3_Initv+0x12c>)
 80024aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024ac:	4b3f      	ldr	r3, [pc, #252]	; (80025ac <_ZL12MX_TIM3_Initv+0x128>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b3e      	ldr	r3, [pc, #248]	; (80025ac <_ZL12MX_TIM3_Initv+0x128>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80024b8:	4b3c      	ldr	r3, [pc, #240]	; (80025ac <_ZL12MX_TIM3_Initv+0x128>)
 80024ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80024be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c0:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <_ZL12MX_TIM3_Initv+0x128>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c6:	4b39      	ldr	r3, [pc, #228]	; (80025ac <_ZL12MX_TIM3_Initv+0x128>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024cc:	4837      	ldr	r0, [pc, #220]	; (80025ac <_ZL12MX_TIM3_Initv+0x128>)
 80024ce:	f004 fd35 	bl	8006f3c <HAL_TIM_PWM_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf14      	ite	ne
 80024d8:	2301      	movne	r3, #1
 80024da:	2300      	moveq	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80024e2:	f000 f97f 	bl	80027e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024ee:	f107 0320 	add.w	r3, r7, #32
 80024f2:	4619      	mov	r1, r3
 80024f4:	482d      	ldr	r0, [pc, #180]	; (80025ac <_ZL12MX_TIM3_Initv+0x128>)
 80024f6:	f005 fcdb 	bl	8007eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 800250a:	f000 f96b 	bl	80027e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800250e:	2360      	movs	r3, #96	; 0x60
 8002510:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800251e:	1d3b      	adds	r3, r7, #4
 8002520:	2200      	movs	r2, #0
 8002522:	4619      	mov	r1, r3
 8002524:	4821      	ldr	r0, [pc, #132]	; (80025ac <_ZL12MX_TIM3_Initv+0x128>)
 8002526:	f005 f845 	bl	80075b4 <HAL_TIM_PWM_ConfigChannel>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800253a:	f000 f953 	bl	80027e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	2204      	movs	r2, #4
 8002542:	4619      	mov	r1, r3
 8002544:	4819      	ldr	r0, [pc, #100]	; (80025ac <_ZL12MX_TIM3_Initv+0x128>)
 8002546:	f005 f835 	bl	80075b4 <HAL_TIM_PWM_ConfigChannel>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf14      	ite	ne
 8002550:	2301      	movne	r3, #1
 8002552:	2300      	moveq	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 800255a:	f000 f943 	bl	80027e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	2208      	movs	r2, #8
 8002562:	4619      	mov	r1, r3
 8002564:	4811      	ldr	r0, [pc, #68]	; (80025ac <_ZL12MX_TIM3_Initv+0x128>)
 8002566:	f005 f825 	bl	80075b4 <HAL_TIM_PWM_ConfigChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 800257a:	f000 f933 	bl	80027e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	220c      	movs	r2, #12
 8002582:	4619      	mov	r1, r3
 8002584:	4809      	ldr	r0, [pc, #36]	; (80025ac <_ZL12MX_TIM3_Initv+0x128>)
 8002586:	f005 f815 	bl	80075b4 <HAL_TIM_PWM_ConfigChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 800259a:	f000 f923 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800259e:	4803      	ldr	r0, [pc, #12]	; (80025ac <_ZL12MX_TIM3_Initv+0x128>)
 80025a0:	f001 fa60 	bl	8003a64 <HAL_TIM_MspPostInit>

}
 80025a4:	bf00      	nop
 80025a6:	3728      	adds	r7, #40	; 0x28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200009a4 	.word	0x200009a4
 80025b0:	40000400 	.word	0x40000400

080025b4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	; 0x30
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025ba:	f107 030c 	add.w	r3, r7, #12
 80025be:	2224      	movs	r2, #36	; 0x24
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f008 f9d6 	bl	800a974 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025d0:	4b25      	ldr	r3, [pc, #148]	; (8002668 <_ZL12MX_TIM4_Initv+0xb4>)
 80025d2:	4a26      	ldr	r2, [pc, #152]	; (800266c <_ZL12MX_TIM4_Initv+0xb8>)
 80025d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025d6:	4b24      	ldr	r3, [pc, #144]	; (8002668 <_ZL12MX_TIM4_Initv+0xb4>)
 80025d8:	2200      	movs	r2, #0
 80025da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025dc:	4b22      	ldr	r3, [pc, #136]	; (8002668 <_ZL12MX_TIM4_Initv+0xb4>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80025e2:	4b21      	ldr	r3, [pc, #132]	; (8002668 <_ZL12MX_TIM4_Initv+0xb4>)
 80025e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ea:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <_ZL12MX_TIM4_Initv+0xb4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <_ZL12MX_TIM4_Initv+0xb4>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025fe:	2301      	movs	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002602:	2300      	movs	r3, #0
 8002604:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800260a:	2300      	movs	r3, #0
 800260c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800260e:	2301      	movs	r3, #1
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002612:	2300      	movs	r3, #0
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800261a:	f107 030c 	add.w	r3, r7, #12
 800261e:	4619      	mov	r1, r3
 8002620:	4811      	ldr	r0, [pc, #68]	; (8002668 <_ZL12MX_TIM4_Initv+0xb4>)
 8002622:	f004 fd8b 	bl	800713c <HAL_TIM_Encoder_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8002636:	f000 f8d5 	bl	80027e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	4619      	mov	r1, r3
 8002646:	4808      	ldr	r0, [pc, #32]	; (8002668 <_ZL12MX_TIM4_Initv+0xb4>)
 8002648:	f005 fc32 	bl	8007eb0 <HAL_TIMEx_MasterConfigSynchronization>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 800265c:	f000 f8c2 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002660:	bf00      	nop
 8002662:	3730      	adds	r7, #48	; 0x30
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200009ec 	.word	0x200009ec
 800266c:	40000800 	.word	0x40000800

08002670 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002676:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800267c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002696:	220c      	movs	r2, #12
 8002698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026a6:	4807      	ldr	r0, [pc, #28]	; (80026c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80026a8:	f005 fc84 	bl	8007fb4 <HAL_UART_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bf14      	ite	ne
 80026b2:	2301      	movne	r3, #1
 80026b4:	2300      	moveq	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80026bc:	f000 f892 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000a34 	.word	0x20000a34
 80026c8:	40004400 	.word	0x40004400

080026cc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	60da      	str	r2, [r3, #12]
 80026e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	4b3b      	ldr	r3, [pc, #236]	; (80027d4 <_ZL12MX_GPIO_Initv+0x108>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a3a      	ldr	r2, [pc, #232]	; (80027d4 <_ZL12MX_GPIO_Initv+0x108>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b38      	ldr	r3, [pc, #224]	; (80027d4 <_ZL12MX_GPIO_Initv+0x108>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <_ZL12MX_GPIO_Initv+0x108>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a33      	ldr	r2, [pc, #204]	; (80027d4 <_ZL12MX_GPIO_Initv+0x108>)
 8002708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <_ZL12MX_GPIO_Initv+0x108>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <_ZL12MX_GPIO_Initv+0x108>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a2c      	ldr	r2, [pc, #176]	; (80027d4 <_ZL12MX_GPIO_Initv+0x108>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <_ZL12MX_GPIO_Initv+0x108>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <_ZL12MX_GPIO_Initv+0x108>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <_ZL12MX_GPIO_Initv+0x108>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <_ZL12MX_GPIO_Initv+0x108>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002752:	2200      	movs	r2, #0
 8002754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002758:	481f      	ldr	r0, [pc, #124]	; (80027d8 <_ZL12MX_GPIO_Initv+0x10c>)
 800275a:	f002 f8ab 	bl	80048b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800275e:	2200      	movs	r2, #0
 8002760:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002764:	481d      	ldr	r0, [pc, #116]	; (80027dc <_ZL12MX_GPIO_Initv+0x110>)
 8002766:	f002 f8a5 	bl	80048b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800276a:	2200      	movs	r2, #0
 800276c:	2130      	movs	r1, #48	; 0x30
 800276e:	481c      	ldr	r0, [pc, #112]	; (80027e0 <_ZL12MX_GPIO_Initv+0x114>)
 8002770:	f002 f8a0 	bl	80048b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277a:	2301      	movs	r3, #1
 800277c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	4619      	mov	r1, r3
 800278c:	4812      	ldr	r0, [pc, #72]	; (80027d8 <_ZL12MX_GPIO_Initv+0x10c>)
 800278e:	f001 fe29 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002792:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002798:	2301      	movs	r3, #1
 800279a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	480c      	ldr	r0, [pc, #48]	; (80027dc <_ZL12MX_GPIO_Initv+0x110>)
 80027ac:	f001 fe1a 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027b0:	2330      	movs	r3, #48	; 0x30
 80027b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b4:	2301      	movs	r3, #1
 80027b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	4619      	mov	r1, r3
 80027c6:	4806      	ldr	r0, [pc, #24]	; (80027e0 <_ZL12MX_GPIO_Initv+0x114>)
 80027c8:	f001 fe0c 	bl	80043e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027cc:	bf00      	nop
 80027ce:	3728      	adds	r7, #40	; 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020800 	.word	0x40020800
 80027dc:	40020000 	.word	0x40020000
 80027e0:	40020400 	.word	0x40020400

080027e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027e8:	b672      	cpsid	i
}
 80027ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027ec:	e7fe      	b.n	80027ec <Error_Handler+0x8>

080027ee <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f88f 	bl	800291c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	: c() { }
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	2328      	movs	r3, #40	; 0x28
 8002816:	461a      	mov	r2, r3
 8002818:	2100      	movs	r1, #0
 800281a:	f008 f8ab 	bl	800a974 <memset>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ffe4 	bl	80027ee <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8002838:	f107 0308 	add.w	r3, r7, #8
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f89f 	bl	8002982 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>
 8002844:	f107 0318 	add.w	r3, r7, #24
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f8a8 	bl	80029a0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE3endEv>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f8b3 	bl	80029be <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8002858:	4603      	mov	r3, r0
 800285a:	f107 0218 	add.w	r2, r7, #24
 800285e:	f107 0108 	add.w	r1, r7, #8
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f8d2 	bl	8002a0c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f867 	bl	800293e <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4618      	mov	r0, r3
 8002874:	3728      	adds	r7, #40	; 0x28
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>:
      push(const value_type& __x)
      { c.push_back(__x); }

#if __cplusplus >= 201103L
      void
      push(value_type&& __x)
 800287a:	b590      	push	{r4, r7, lr}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8002884:	687c      	ldr	r4, [r7, #4]
 8002886:	6838      	ldr	r0, [r7, #0]
 8002888:	f000 f8cd 	bl	8002a26 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>
 800288c:	4603      	mov	r3, r0
 800288e:	4619      	mov	r1, r3
 8002890:	4620      	mov	r0, r4
 8002892:	f000 f8d3 	bl	8002a3c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9push_backEOS1_>
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bd90      	pop	{r4, r7, pc}

0800289e <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>:
      size() const
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 f8d8 	bl	8002a5e <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5emptyEv>:
      empty() const
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f8dd 	bl	8002a82 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5emptyEv>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f8e2 	bl	8002aa6 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv>
      }
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>:
      front()
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
	return c.front();
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 f8fa 	bl	8002aee <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5frontEv>
 80028fa:	4603      	mov	r3, r0
      }
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f912 	bl	8002b36 <_ZNSaIN12ActionsQueue16RobotInstructionEED1Ev>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>:
      _Deque_base()
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f8f5 	bl	8002b16 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800292c:	2100      	movs	r1, #0
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f90d 	bl	8002b4e <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_initialize_mapEj>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d010      	beq.n	8002970 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002956:	3304      	adds	r3, #4
 8002958:	461a      	mov	r2, r3
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f95a 	bl	8002c14 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6819      	ldr	r1, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	461a      	mov	r2, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f96c 	bl	8002c48 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff ffc6 	bl	8002904 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implD1Ev>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	3308      	adds	r3, #8
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f81e 	bl	80029d4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	3318      	adds	r3, #24
 80029ae:	4619      	mov	r1, r3
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f80f 	bl	80029d4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8002a0c:	b480      	push	{r7}
 8002a0e:	b08d      	sub	sp, #52	; 0x34
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8002a1a:	bf00      	nop
 8002a1c:	3734      	adds	r7, #52	; 0x34
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8002a46:	6838      	ldr	r0, [r7, #0]
 8002a48:	f7ff ffed 	bl	8002a26 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4619      	mov	r1, r3
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f915 	bl	8002c80 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f103 0218 	add.w	r2, r3, #24
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3308      	adds	r3, #8
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f000 f92f 	bl	8002cd6 <_ZStmiRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f103 0218 	add.w	r2, r3, #24
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3308      	adds	r3, #8
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f000 f941 	bl	8002d1e <_ZSteqRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	3b08      	subs	r3, #8
	if (this->_M_impl._M_start._M_cur
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d011      	beq.n	8002ae0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff ff7d 	bl	80029be <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	4619      	mov	r1, r3
 8002acc:	4610      	mov	r0, r2
 8002ace:	f000 f93a 	bl	8002d46 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f103 0208 	add.w	r2, r3, #8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	609a      	str	r2, [r3, #8]
      }
 8002ade:	e002      	b.n	8002ae6 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f93d 	bl	8002d60 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_pop_front_auxEv>
      }
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
	return *begin();
 8002af6:	f107 0308 	add.w	r3, r7, #8
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff40 	bl	8002982 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>
 8002b02:	f107 0308 	add.w	r3, r7, #8
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 f952 	bl	8002db0 <_ZNKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EdeEv>
 8002b0c:	4603      	mov	r3, r0
      }
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f952 	bl	8002dc8 <_ZNSaIN12ActionsQueue16RobotInstructionEEC1Ev>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f95a 	bl	8002de0 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <_ZNSaIN12ActionsQueue16RobotInstructionEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f967 	bl	8002e12 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEED1Ev>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8002b4e:	b590      	push	{r4, r7, lr}
 8002b50:	b089      	sub	sp, #36	; 0x24
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8002b58:	2008      	movs	r0, #8
 8002b5a:	f7fe fd27 	bl	80015ac <_ZSt16__deque_buf_sizej>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b66:	3301      	adds	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3302      	adds	r3, #2
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	f107 0210 	add.w	r2, r7, #16
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f952 	bl	8002e28 <_ZSt3maxIjERKT_S2_S2_>
 8002b84:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4619      	mov	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f95c 	bl	8002e50 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	1acb      	subs	r3, r1, r3
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002bae:	4413      	add	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4413      	add	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	69b9      	ldr	r1, [r7, #24]
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f962 	bl	8002e8a <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3308      	adds	r3, #8
 8002bca:	69b9      	ldr	r1, [r7, #24]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f976 	bl	8002ebe <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f103 0218 	add.w	r2, r3, #24
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4610      	mov	r0, r2
 8002be0:	f000 f96d 	bl	8002ebe <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8002bf0:	2008      	movs	r0, #8
 8002bf2:	f7fe fcdb 	bl	80015ac <_ZSt16__deque_buf_sizej>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bfe:	fb01 f202 	mul.w	r2, r1, r2
 8002c02:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	619a      	str	r2, [r3, #24]
    }
 8002c0c:	bf00      	nop
 8002c0e:	3724      	adds	r7, #36	; 0x24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd90      	pop	{r4, r7, pc}

08002c14 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d209      	bcs.n	8002c40 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4619      	mov	r1, r3
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f95c 	bl	8002ef0 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e7f1      	b.n	8002c24 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8002c40:	bf00      	nop
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002c54:	f107 0314 	add.w	r3, r7, #20
 8002c58:	68f9      	ldr	r1, [r7, #12]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f95b 	bl	8002f16 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 f971 	bl	8002f50 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f960 	bl	8002f38 <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>
      }
 8002c78:	bf00      	nop
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 8002c80:	b5b0      	push	{r4, r5, r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	3b08      	subs	r3, #8
	if (this->_M_impl._M_finish._M_cur
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d012      	beq.n	8002cbe <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8002c98:	687c      	ldr	r4, [r7, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699d      	ldr	r5, [r3, #24]
 8002c9e:	6838      	ldr	r0, [r7, #0]
 8002ca0:	f000 f965 	bl	8002f6e <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4629      	mov	r1, r5
 8002caa:	4620      	mov	r0, r4
 8002cac:	f000 f96a 	bl	8002f84 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f103 0208 	add.w	r2, r3, #8
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8002cbc:	e007      	b.n	8002cce <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8002cbe:	6838      	ldr	r0, [r7, #0]
 8002cc0:	f000 f955 	bl	8002f6e <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f96f 	bl	8002fac <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>
      }
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bdb0      	pop	{r4, r5, r7, pc}

08002cd6 <_ZStmiRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8002ce0:	f000 f9a8 	bl	8003034 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	109b      	asrs	r3, r3, #2
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6811      	ldr	r1, [r2, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6852      	ldr	r2, [r2, #4]
 8002d02:	1a8a      	subs	r2, r1, r2
 8002d04:	10d2      	asrs	r2, r2, #3
 8002d06:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	6891      	ldr	r1, [r2, #8]
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	1a8a      	subs	r2, r1, r2
 8002d12:	10d2      	asrs	r2, r2, #3
 8002d14:	4413      	add	r3, r2
      }
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <_ZSteqRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f976 	bl	8003044 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE7destroyIS2_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fe27 	bl	80029be <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8002d70:	4602      	mov	r2, r0
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4619      	mov	r1, r3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	f7ff ffe4 	bl	8002d46 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4619      	mov	r1, r3
 8002d86:	4610      	mov	r0, r2
 8002d88:	f000 f8b2 	bl	8002ef0 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f103 0208 	add.w	r2, r3, #8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	3304      	adds	r3, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f000 f88f 	bl	8002ebe <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]
    }
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <_ZNKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <_ZNSaIN12ActionsQueue16RobotInstructionEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f942 	bl	800305a <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEEC1Ev>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3308      	adds	r3, #8
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 f939 	bl	8003070 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3318      	adds	r3, #24
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f934 	bl	8003070 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>
	{ }
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d201      	bcs.n	8002e42 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	e000      	b.n	8002e44 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002e42:	687b      	ldr	r3, [r7, #4]
    }
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002e5a:	f107 030c 	add.w	r3, r7, #12
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f858 	bl	8002f16 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002e66:	f107 030c 	add.w	r3, r7, #12
 8002e6a:	6839      	ldr	r1, [r7, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 f916 	bl	800309e <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE8allocateERS3_j>
 8002e72:	4604      	mov	r4, r0
 8002e74:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002e76:	f107 030c 	add.w	r3, r7, #12
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f85c 	bl	8002f38 <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002e80:	4623      	mov	r3, r4
      }
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd90      	pop	{r4, r7, pc}

08002e8a <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d209      	bcs.n	8002eb6 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f90a 	bl	80030bc <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e7f1      	b.n	8002e9a <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8002eb6:	bf00      	nop
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8002ebe:	b590      	push	{r4, r7, lr}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685c      	ldr	r4, [r3, #4]
 8002eda:	f000 f8ab 	bl	8003034 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	18e2      	adds	r2, r4, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
      }
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd90      	pop	{r4, r7, pc}

08002ef0 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8002efa:	687c      	ldr	r4, [r7, #4]
 8002efc:	2008      	movs	r0, #8
 8002efe:	f7fe fb55 	bl	80015ac <_ZSt16__deque_buf_sizej>
 8002f02:	4603      	mov	r3, r0
 8002f04:	461a      	mov	r2, r3
 8002f06:	6839      	ldr	r1, [r7, #0]
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f000 f8e9 	bl	80030e0 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE10deallocateERS2_PS1_j>
      }
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd90      	pop	{r4, r7, pc}

08002f16 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8002f20:	6838      	ldr	r0, [r7, #0]
 8002f22:	f000 f8ec 	bl	80030fe <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8002f26:	4603      	mov	r3, r0
 8002f28:	4619      	mov	r1, r3
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8f2 	bl	8003114 <_ZNSaIPN12ActionsQueue16RobotInstructionEEC1IS0_EERKSaIT_E>
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f8f4 	bl	800312e <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEED1Ev>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f8ef 	bl	8003144 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE10deallocateEPS3_j>
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ffec 	bl	8002f6e <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f8e1 	bl	8003164 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002fac:	b5b0      	push	{r4, r5, r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff fd51 	bl	8002a5e <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f8e9 	bl	8003196 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE8max_sizeEv>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	429c      	cmp	r4, r3
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8002fd4:	4816      	ldr	r0, [pc, #88]	; (8003030 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x84>)
 8002fd6:	f006 f8e7 	bl	80091a8 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8002fda:	2101      	movs	r1, #1
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f8eb 	bl	80031b8 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	1d1c      	adds	r4, r3, #4
 8002fea:	4610      	mov	r0, r2
 8002fec:	f000 f866 	bl	80030bc <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8002ff4:	687c      	ldr	r4, [r7, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699d      	ldr	r5, [r3, #24]
 8002ffa:	6838      	ldr	r0, [r7, #0]
 8002ffc:	f7ff ffb7 	bl	8002f6e <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	4629      	mov	r1, r5
 8003006:	4620      	mov	r0, r4
 8003008:	f7ff ffbc 	bl	8002f84 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f103 0218 	add.w	r2, r3, #24
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f7ff ff4f 	bl	8002ebe <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
      }
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bdb0      	pop	{r4, r5, r7, pc}
 8003030:	0800d388 	.word	0x0800d388

08003034 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8003038:	2008      	movs	r0, #8
 800303a:	f7fe fab7 	bl	80015ac <_ZSt16__deque_buf_sizej>
 800303e:	4603      	mov	r3, r0
 8003040:	4618      	mov	r0, r3
 8003042:	bd80      	pop	{r7, pc}

08003044 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE7destroyIS2_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4618      	mov	r0, r3
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	60da      	str	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80030a8:	2200      	movs	r2, #0
 80030aa:	6839      	ldr	r1, [r7, #0]
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f89e 	bl	80031ee <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv>
 80030b2:	4603      	mov	r3, r0
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80030c4:	687c      	ldr	r4, [r7, #4]
 80030c6:	2008      	movs	r0, #8
 80030c8:	f7fe fa70 	bl	80015ac <_ZSt16__deque_buf_sizej>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4619      	mov	r1, r3
 80030d0:	4620      	mov	r0, r4
 80030d2:	f000 f8aa 	bl	800322a <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8allocateERS2_j>
 80030d6:	4603      	mov	r3, r0
      }
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}

080030e0 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f8a9 	bl	8003248 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE10deallocateEPS2_j>
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <_ZNSaIPN12ActionsQueue16RobotInstructionEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f8a2 	bl	8003268 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEEC1Ev>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4619      	mov	r1, r3
 8003156:	68b8      	ldr	r0, [r7, #8]
 8003158:	f006 f810 	bl	800917c <_ZdlPvj>
      }
 800315c:	bf00      	nop
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff fefc 	bl	8002f6e <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003176:	4604      	mov	r4, r0
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4619      	mov	r1, r3
 800317c:	2008      	movs	r0, #8
 800317e:	f7fe fa09 	bl	8001594 <_ZnwjPv>
 8003182:	4603      	mov	r3, r0
 8003184:	4622      	mov	r2, r4
 8003186:	e892 0003 	ldmia.w	r2, {r0, r1}
 800318a:	e883 0003 	stmia.w	r3, {r0, r1}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	bd90      	pop	{r4, r7, pc}

08003196 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ffac 	bl	80030fe <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f868 	bl	800327e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE11_S_max_sizeERKS2_>
 80031ae:	4603      	mov	r3, r0
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	6809      	ldr	r1, [r1, #0]
 80031d2:	1a41      	subs	r1, r0, r1
 80031d4:	1089      	asrs	r1, r1, #2
 80031d6:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80031d8:	429a      	cmp	r2, r3
 80031da:	d904      	bls.n	80031e6 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80031dc:	2200      	movs	r2, #0
 80031de:	6839      	ldr	r1, [r7, #0]
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f866 	bl	80032b2 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb>
      }
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f8f3 	bl	80033e6 <_ZNK9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 8003200:	4602      	mov	r2, r0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4293      	cmp	r3, r2
 8003206:	bf8c      	ite	hi
 8003208:	2301      	movhi	r3, #1
 800320a:	2300      	movls	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003212:	f005 ffc6 	bl	80091a2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4618      	mov	r0, r3
 800321c:	f005 ffb0 	bl	8009180 <_Znwj>
 8003220:	4603      	mov	r3, r0
      }
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003234:	2200      	movs	r2, #0
 8003236:	6839      	ldr	r1, [r7, #0]
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f8e0 	bl	80033fe <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv>
 800323e:	4603      	mov	r3, r0
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4619      	mov	r1, r3
 800325a:	68b8      	ldr	r0, [r7, #8]
 800325c:	f005 ff8e 	bl	800917c <_ZdlPvj>
      }
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8003286:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800328a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f8d4 	bl	800343a <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8max_sizeERKS2_>
 8003292:	4603      	mov	r3, r0
 8003294:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003296:	f107 0208 	add.w	r2, r7, #8
 800329a:	f107 030c 	add.w	r3, r7, #12
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 f8d6 	bl	8003452 <_ZSt3minIjERKT_S2_S2_>
 80032a6:	4603      	mov	r3, r0
 80032a8:	681b      	ldr	r3, [r3, #0]
      }
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80032b2:	b590      	push	{r4, r7, lr}
 80032b4:	b08b      	sub	sp, #44	; 0x2c
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	4613      	mov	r3, r2
 80032be:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	109b      	asrs	r3, r3, #2
 80032cc:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80032ce:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	6a3a      	ldr	r2, [r7, #32]
 80032d4:	4413      	add	r3, r2
 80032d6:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d92d      	bls.n	8003340 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	1acb      	subs	r3, r1, r3
 80032f0:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80032f2:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	e000      	b.n	8003302 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x50>
 8003300:	2300      	movs	r3, #0
 8003302:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003304:	4413      	add	r3, r2
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330e:	429a      	cmp	r2, r3
 8003310:	d209      	bcs.n	8003326 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800331a:	3304      	adds	r3, #4
 800331c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331e:	4619      	mov	r1, r3
 8003320:	f000 f8ab 	bl	800347a <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
 8003324:	e048      	b.n	80033b8 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800332e:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003336:	4413      	add	r3, r2
 8003338:	461a      	mov	r2, r3
 800333a:	f000 f8b6 	bl	80034aa <_ZSt13copy_backwardIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
 800333e:	e03b      	b.n	80033b8 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3304      	adds	r3, #4
 8003348:	f107 0208 	add.w	r2, r7, #8
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fd6a 	bl	8002e28 <_ZSt3maxIjERKT_S2_S2_>
 8003354:	4603      	mov	r3, r0
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 800335a:	3302      	adds	r3, #2
 800335c:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	69b9      	ldr	r1, [r7, #24]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fd74 	bl	8002e50 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>
 8003368:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	085b      	lsrs	r3, r3, #1
 8003372:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0xce>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	e000      	b.n	8003382 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 8003380:	2300      	movs	r3, #0
 8003382:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4413      	add	r3, r2
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8003392:	3304      	adds	r3, #4
 8003394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003396:	4619      	mov	r1, r3
 8003398:	f000 f86f 	bl	800347a <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f7ff fc4e 	bl	8002c48 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	3308      	adds	r3, #8
 80033bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fd7d 	bl	8002ebe <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f103 0018 	add.w	r0, r3, #24
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033d0:	3b01      	subs	r3, #1
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d6:	4413      	add	r3, r2
 80033d8:	4619      	mov	r1, r3
 80033da:	f7ff fd70 	bl	8002ebe <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
    }
 80033de:	bf00      	nop
 80033e0:	372c      	adds	r7, #44	; 0x2c
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd90      	pop	{r4, r7, pc}

080033e6 <_ZNK9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80033ee:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f865 	bl	80034da <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 8003410:	4602      	mov	r2, r0
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	4293      	cmp	r3, r2
 8003416:	bf8c      	ite	hi
 8003418:	2301      	movhi	r3, #1
 800341a:	2300      	movls	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003422:	f005 febe 	bl	80091a2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4618      	mov	r0, r3
 800342c:	f005 fea8 	bl	8009180 <_Znwj>
 8003430:	4603      	mov	r3, r0
      }
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f855 	bl	80034f2 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8max_sizeEv>
 8003448:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d201      	bcs.n	800346c <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	e000      	b.n	800346e <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800346c:	687b      	ldr	r3, [r7, #4]
    }
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800347a:	b590      	push	{r4, r7, lr}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f83f 	bl	800350a <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 800348c:	4604      	mov	r4, r0
 800348e:	68b8      	ldr	r0, [r7, #8]
 8003490:	f000 f83b 	bl	800350a <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8003494:	4603      	mov	r3, r0
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	4619      	mov	r1, r3
 800349a:	4620      	mov	r0, r4
 800349c:	f000 f840 	bl	8003520 <_ZSt13__copy_move_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 80034a0:	4603      	mov	r3, r0
    }
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd90      	pop	{r4, r7, pc}

080034aa <_ZSt13copy_backwardIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80034aa:	b590      	push	{r4, r7, lr}
 80034ac:	b085      	sub	sp, #20
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f827 	bl	800350a <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 80034bc:	4604      	mov	r4, r0
 80034be:	68b8      	ldr	r0, [r7, #8]
 80034c0:	f000 f823 	bl	800350a <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 80034c4:	4603      	mov	r3, r0
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4619      	mov	r1, r3
 80034ca:	4620      	mov	r0, r4
 80034cc:	f000 f84b 	bl	8003566 <_ZSt22__copy_move_backward_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 80034d0:	4603      	mov	r3, r0
    }
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd90      	pop	{r4, r7, pc}

080034da <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80034e2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ffed 	bl	80034da <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 8003500:	4603      	mov	r3, r0
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <_ZSt13__copy_move_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003520:	b5b0      	push	{r4, r5, r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f83d 	bl	80035ac <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8003532:	4604      	mov	r4, r0
 8003534:	68b8      	ldr	r0, [r7, #8]
 8003536:	f000 f839 	bl	80035ac <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 800353a:	4605      	mov	r5, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f834 	bl	80035ac <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8003544:	4603      	mov	r3, r0
 8003546:	461a      	mov	r2, r3
 8003548:	4629      	mov	r1, r5
 800354a:	4620      	mov	r0, r4
 800354c:	f000 f839 	bl	80035c2 <_ZSt14__copy_move_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8003550:	4602      	mov	r2, r0
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f843 	bl	80035e2 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>
 800355c:	4603      	mov	r3, r0
    }
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bdb0      	pop	{r4, r5, r7, pc}

08003566 <_ZSt22__copy_move_backward_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8003566:	b5b0      	push	{r4, r5, r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f81a 	bl	80035ac <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8003578:	4604      	mov	r4, r0
 800357a:	68b8      	ldr	r0, [r7, #8]
 800357c:	f000 f816 	bl	80035ac <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8003580:	4605      	mov	r5, r0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f811 	bl	80035ac <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 800358a:	4603      	mov	r3, r0
 800358c:	461a      	mov	r2, r3
 800358e:	4629      	mov	r1, r5
 8003590:	4620      	mov	r0, r4
 8003592:	f000 f832 	bl	80035fa <_ZSt23__copy_move_backward_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8003596:	4602      	mov	r2, r0
 8003598:	1d3b      	adds	r3, r7, #4
 800359a:	4611      	mov	r1, r2
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f820 	bl	80035e2 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>
 80035a2:	4603      	mov	r3, r0
    }
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bdb0      	pop	{r4, r5, r7, pc}

080035ac <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>:
    __niter_base(_Iterator __it)
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <_ZSt14__copy_move_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f821 	bl	800361a <_ZSt14__copy_move_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 80035d8:	4603      	mov	r3, r0
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]
    { return __res; }
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <_ZSt23__copy_move_backward_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f815 	bl	800363a <_ZSt23__copy_move_backward_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8003610:	4603      	mov	r3, r0
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <_ZSt14__copy_move_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f815 	bl	800365a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>
 8003630:	4603      	mov	r3, r0
    }
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <_ZSt23__copy_move_backward_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f822 	bl	8003694 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>
 8003650:	4603      	mov	r3, r0
    }
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	109b      	asrs	r3, r3, #2
 800366e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	461a      	mov	r2, r3
 800367c:	68f9      	ldr	r1, [r7, #12]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f007 f95e 	bl	800a940 <memmove>
	  return __result + _Num;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	4413      	add	r3, r2
	}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	109b      	asrs	r3, r3, #2
 80036a8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	425b      	negs	r3, r3
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	18d0      	adds	r0, r2, r3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	461a      	mov	r2, r3
 80036c0:	68f9      	ldr	r1, [r7, #12]
 80036c2:	f007 f93d 	bl	800a940 <memmove>
	  return __result - _Num;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	425b      	negs	r3, r3
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	4413      	add	r3, r2
	}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <_ZN12ActionsQueueD1Ev>:
class ActionsQueue
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3350      	adds	r3, #80	; 0x50
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fd fc8d 	bl	8001004 <_ZN7RPLidarD1Ev>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fe faf7 	bl	8001ce0 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEED1Ev>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4618      	mov	r0, r3
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d107      	bne.n	800371c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003712:	4293      	cmp	r3, r2
 8003714:	d102      	bne.n	800371c <_Z41__static_initialization_and_destruction_0ii+0x20>
ActionsQueue Queue;
 8003716:	4809      	ldr	r0, [pc, #36]	; (800373c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003718:	f7fe faf2 	bl	8001d00 <_ZN12ActionsQueueC1Ev>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d107      	bne.n	8003732 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003728:	4293      	cmp	r3, r2
 800372a:	d102      	bne.n	8003732 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800372c:	4803      	ldr	r0, [pc, #12]	; (800373c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800372e:	f7ff ffd3 	bl	80036d8 <_ZN12ActionsQueueD1Ev>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20000208 	.word	0x20000208

08003740 <_GLOBAL__sub_I__Z9constrainlll>:
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
 8003744:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003748:	2001      	movs	r0, #1
 800374a:	f7ff ffd7 	bl	80036fc <_Z41__static_initialization_and_destruction_0ii>
 800374e:	bd80      	pop	{r7, pc}

08003750 <_GLOBAL__sub_D__Z9constrainlll>:
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
 8003754:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003758:	2000      	movs	r0, #0
 800375a:	f7ff ffcf 	bl	80036fc <_Z41__static_initialization_and_destruction_0ii>
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	4b10      	ldr	r3, [pc, #64]	; (80037ac <HAL_MspInit+0x4c>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4a0f      	ldr	r2, [pc, #60]	; (80037ac <HAL_MspInit+0x4c>)
 8003770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
 8003776:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <HAL_MspInit+0x4c>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377e:	607b      	str	r3, [r7, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <HAL_MspInit+0x4c>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4a08      	ldr	r2, [pc, #32]	; (80037ac <HAL_MspInit+0x4c>)
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	6413      	str	r3, [r2, #64]	; 0x40
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_MspInit+0x4c>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800

080037b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a21      	ldr	r2, [pc, #132]	; (8003854 <HAL_I2C_MspInit+0xa4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d13c      	bne.n	800384c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	4b20      	ldr	r3, [pc, #128]	; (8003858 <HAL_I2C_MspInit+0xa8>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HAL_I2C_MspInit+0xa8>)
 80037dc:	f043 0302 	orr.w	r3, r3, #2
 80037e0:	6313      	str	r3, [r2, #48]	; 0x30
 80037e2:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <HAL_I2C_MspInit+0xa8>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80037ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037f4:	2312      	movs	r3, #18
 80037f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fc:	2303      	movs	r3, #3
 80037fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003800:	2304      	movs	r3, #4
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	4619      	mov	r1, r3
 800380a:	4814      	ldr	r0, [pc, #80]	; (800385c <HAL_I2C_MspInit+0xac>)
 800380c:	f000 fdea 	bl	80043e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	4b10      	ldr	r3, [pc, #64]	; (8003858 <HAL_I2C_MspInit+0xa8>)
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	4a0f      	ldr	r2, [pc, #60]	; (8003858 <HAL_I2C_MspInit+0xa8>)
 800381a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800381e:	6413      	str	r3, [r2, #64]	; 0x40
 8003820:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <HAL_I2C_MspInit+0xa8>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800382c:	2200      	movs	r2, #0
 800382e:	2100      	movs	r1, #0
 8003830:	201f      	movs	r0, #31
 8003832:	f000 fcf2 	bl	800421a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003836:	201f      	movs	r0, #31
 8003838:	f000 fd0b 	bl	8004252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800383c:	2200      	movs	r2, #0
 800383e:	2100      	movs	r1, #0
 8003840:	2020      	movs	r0, #32
 8003842:	f000 fcea 	bl	800421a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003846:	2020      	movs	r0, #32
 8003848:	f000 fd03 	bl	8004252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800384c:	bf00      	nop
 800384e:	3728      	adds	r7, #40	; 0x28
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40005400 	.word	0x40005400
 8003858:	40023800 	.word	0x40023800
 800385c:	40020400 	.word	0x40020400

08003860 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1a      	ldr	r2, [pc, #104]	; (80038d8 <HAL_TIM_Base_MspInit+0x78>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d12d      	bne.n	80038ce <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_TIM_Base_MspInit+0x7c>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	4a18      	ldr	r2, [pc, #96]	; (80038dc <HAL_TIM_Base_MspInit+0x7c>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	6453      	str	r3, [r2, #68]	; 0x44
 8003882:	4b16      	ldr	r3, [pc, #88]	; (80038dc <HAL_TIM_Base_MspInit+0x7c>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800388e:	2200      	movs	r2, #0
 8003890:	2100      	movs	r1, #0
 8003892:	2018      	movs	r0, #24
 8003894:	f000 fcc1 	bl	800421a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003898:	2018      	movs	r0, #24
 800389a:	f000 fcda 	bl	8004252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800389e:	2200      	movs	r2, #0
 80038a0:	2100      	movs	r1, #0
 80038a2:	2019      	movs	r0, #25
 80038a4:	f000 fcb9 	bl	800421a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80038a8:	2019      	movs	r0, #25
 80038aa:	f000 fcd2 	bl	8004252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80038ae:	2200      	movs	r2, #0
 80038b0:	2100      	movs	r1, #0
 80038b2:	201a      	movs	r0, #26
 80038b4:	f000 fcb1 	bl	800421a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80038b8:	201a      	movs	r0, #26
 80038ba:	f000 fcca 	bl	8004252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80038be:	2200      	movs	r2, #0
 80038c0:	2100      	movs	r1, #0
 80038c2:	201b      	movs	r0, #27
 80038c4:	f000 fca9 	bl	800421a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80038c8:	201b      	movs	r0, #27
 80038ca:	f000 fcc2 	bl	8004252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40010000 	.word	0x40010000
 80038dc:	40023800 	.word	0x40023800

080038e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08c      	sub	sp, #48	; 0x30
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 031c 	add.w	r3, r7, #28
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003900:	d14b      	bne.n	800399a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	4b3f      	ldr	r3, [pc, #252]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	4a3e      	ldr	r2, [pc, #248]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6413      	str	r3, [r2, #64]	; 0x40
 8003912:	4b3c      	ldr	r3, [pc, #240]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	61bb      	str	r3, [r7, #24]
 800391c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	4b38      	ldr	r3, [pc, #224]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a37      	ldr	r2, [pc, #220]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b35      	ldr	r3, [pc, #212]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a30      	ldr	r2, [pc, #192]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 8003944:	f043 0302 	orr.w	r3, r3, #2
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800395a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395c:	2302      	movs	r3, #2
 800395e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003964:	2300      	movs	r3, #0
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003968:	2301      	movs	r3, #1
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396c:	f107 031c 	add.w	r3, r7, #28
 8003970:	4619      	mov	r1, r3
 8003972:	4825      	ldr	r0, [pc, #148]	; (8003a08 <HAL_TIM_Encoder_MspInit+0x128>)
 8003974:	f000 fd36 	bl	80043e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003978:	2308      	movs	r3, #8
 800397a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003984:	2300      	movs	r3, #0
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003988:	2301      	movs	r3, #1
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398c:	f107 031c 	add.w	r3, r7, #28
 8003990:	4619      	mov	r1, r3
 8003992:	481e      	ldr	r0, [pc, #120]	; (8003a0c <HAL_TIM_Encoder_MspInit+0x12c>)
 8003994:	f000 fd26 	bl	80043e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003998:	e030      	b.n	80039fc <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <HAL_TIM_Encoder_MspInit+0x130>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d12b      	bne.n	80039fc <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	4a15      	ldr	r2, [pc, #84]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 80039ae:	f043 0304 	orr.w	r3, r3, #4
 80039b2:	6413      	str	r3, [r2, #64]	; 0x40
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c0:	2300      	movs	r3, #0
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	4a0e      	ldr	r2, [pc, #56]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 80039ca:	f043 0302 	orr.w	r3, r3, #2
 80039ce:	6313      	str	r3, [r2, #48]	; 0x30
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <HAL_TIM_Encoder_MspInit+0x124>)
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039dc:	23c0      	movs	r3, #192	; 0xc0
 80039de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e0:	2302      	movs	r3, #2
 80039e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e8:	2300      	movs	r3, #0
 80039ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80039ec:	2302      	movs	r3, #2
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f0:	f107 031c 	add.w	r3, r7, #28
 80039f4:	4619      	mov	r1, r3
 80039f6:	4805      	ldr	r0, [pc, #20]	; (8003a0c <HAL_TIM_Encoder_MspInit+0x12c>)
 80039f8:	f000 fcf4 	bl	80043e4 <HAL_GPIO_Init>
}
 80039fc:	bf00      	nop
 80039fe:	3730      	adds	r7, #48	; 0x30
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40020000 	.word	0x40020000
 8003a0c:	40020400 	.word	0x40020400
 8003a10:	40000800 	.word	0x40000800

08003a14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a0e      	ldr	r2, [pc, #56]	; (8003a5c <HAL_TIM_PWM_MspInit+0x48>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d115      	bne.n	8003a52 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	; (8003a60 <HAL_TIM_PWM_MspInit+0x4c>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	4a0c      	ldr	r2, [pc, #48]	; (8003a60 <HAL_TIM_PWM_MspInit+0x4c>)
 8003a30:	f043 0302 	orr.w	r3, r3, #2
 8003a34:	6413      	str	r3, [r2, #64]	; 0x40
 8003a36:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <HAL_TIM_PWM_MspInit+0x4c>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003a42:	2200      	movs	r2, #0
 8003a44:	2100      	movs	r1, #0
 8003a46:	201d      	movs	r0, #29
 8003a48:	f000 fbe7 	bl	800421a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a4c:	201d      	movs	r0, #29
 8003a4e:	f000 fc00 	bl	8004252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	40023800 	.word	0x40023800

08003a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a6c:	f107 0314 	add.w	r3, r7, #20
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <HAL_TIM_MspPostInit+0xa4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d13b      	bne.n	8003afe <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <HAL_TIM_MspPostInit+0xa8>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	4a1f      	ldr	r2, [pc, #124]	; (8003b0c <HAL_TIM_MspPostInit+0xa8>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6313      	str	r3, [r2, #48]	; 0x30
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_TIM_MspPostInit+0xa8>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <HAL_TIM_MspPostInit+0xa8>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	4a18      	ldr	r2, [pc, #96]	; (8003b0c <HAL_TIM_MspPostInit+0xa8>)
 8003aac:	f043 0302 	orr.w	r3, r3, #2
 8003ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab2:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <HAL_TIM_MspPostInit+0xa8>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003abe:	23c0      	movs	r3, #192	; 0xc0
 8003ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aca:	2300      	movs	r3, #0
 8003acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad2:	f107 0314 	add.w	r3, r7, #20
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	480d      	ldr	r0, [pc, #52]	; (8003b10 <HAL_TIM_MspPostInit+0xac>)
 8003ada:	f000 fc83 	bl	80043e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aea:	2300      	movs	r3, #0
 8003aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003aee:	2302      	movs	r3, #2
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af2:	f107 0314 	add.w	r3, r7, #20
 8003af6:	4619      	mov	r1, r3
 8003af8:	4806      	ldr	r0, [pc, #24]	; (8003b14 <HAL_TIM_MspPostInit+0xb0>)
 8003afa:	f000 fc73 	bl	80043e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003afe:	bf00      	nop
 8003b00:	3728      	adds	r7, #40	; 0x28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40020000 	.word	0x40020000
 8003b14:	40020400 	.word	0x40020400

08003b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <HAL_UART_MspInit+0x94>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d133      	bne.n	8003ba2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <HAL_UART_MspInit+0x98>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a1b      	ldr	r2, [pc, #108]	; (8003bb0 <HAL_UART_MspInit+0x98>)
 8003b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <HAL_UART_MspInit+0x98>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <HAL_UART_MspInit+0x98>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	4a14      	ldr	r2, [pc, #80]	; (8003bb0 <HAL_UART_MspInit+0x98>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6313      	str	r3, [r2, #48]	; 0x30
 8003b66:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_UART_MspInit+0x98>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b72:	230c      	movs	r3, #12
 8003b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b76:	2302      	movs	r3, #2
 8003b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b82:	2307      	movs	r3, #7
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b86:	f107 0314 	add.w	r3, r7, #20
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4809      	ldr	r0, [pc, #36]	; (8003bb4 <HAL_UART_MspInit+0x9c>)
 8003b8e:	f000 fc29 	bl	80043e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b92:	2200      	movs	r2, #0
 8003b94:	2100      	movs	r1, #0
 8003b96:	2026      	movs	r0, #38	; 0x26
 8003b98:	f000 fb3f 	bl	800421a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b9c:	2026      	movs	r0, #38	; 0x26
 8003b9e:	f000 fb58 	bl	8004252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ba2:	bf00      	nop
 8003ba4:	3728      	adds	r7, #40	; 0x28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40004400 	.word	0x40004400
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40020000 	.word	0x40020000

08003bb8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HAL_UART_MspDeInit+0x34>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10c      	bne.n	8003be4 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <HAL_UART_MspDeInit+0x38>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <HAL_UART_MspDeInit+0x38>)
 8003bd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003bd4:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003bd6:	210c      	movs	r1, #12
 8003bd8:	4806      	ldr	r0, [pc, #24]	; (8003bf4 <HAL_UART_MspDeInit+0x3c>)
 8003bda:	f000 fd87 	bl	80046ec <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003bde:	2026      	movs	r0, #38	; 0x26
 8003be0:	f000 fb45 	bl	800426e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40004400 	.word	0x40004400
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40020000 	.word	0x40020000

08003bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bfc:	e7fe      	b.n	8003bfc <NMI_Handler+0x4>

08003bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c02:	e7fe      	b.n	8003c02 <HardFault_Handler+0x4>

08003c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c08:	e7fe      	b.n	8003c08 <MemManage_Handler+0x4>

08003c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c0e:	e7fe      	b.n	8003c0e <BusFault_Handler+0x4>

08003c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c14:	e7fe      	b.n	8003c14 <UsageFault_Handler+0x4>

08003c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c16:	b480      	push	{r7}
 8003c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c32:	b480      	push	{r7}
 8003c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c44:	f000 f9a6 	bl	8003f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c48:	bf00      	nop
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c50:	4802      	ldr	r0, [pc, #8]	; (8003c5c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003c52:	f003 fba7 	bl	80073a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000914 	.word	0x20000914

08003c60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c64:	4802      	ldr	r0, [pc, #8]	; (8003c70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003c66:	f003 fb9d 	bl	80073a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000914 	.word	0x20000914

08003c74 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c78:	4802      	ldr	r0, [pc, #8]	; (8003c84 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003c7a:	f003 fb93 	bl	80073a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000914 	.word	0x20000914

08003c88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c8c:	4802      	ldr	r0, [pc, #8]	; (8003c98 <TIM1_CC_IRQHandler+0x10>)
 8003c8e:	f003 fb89 	bl	80073a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000914 	.word	0x20000914

08003c9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ca0:	4802      	ldr	r0, [pc, #8]	; (8003cac <TIM3_IRQHandler+0x10>)
 8003ca2:	f003 fb7f 	bl	80073a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	200009a4 	.word	0x200009a4

08003cb0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003cb4:	4802      	ldr	r0, [pc, #8]	; (8003cc0 <I2C1_EV_IRQHandler+0x10>)
 8003cb6:	f000 ff5b 	bl	8004b70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	200008c0 	.word	0x200008c0

08003cc4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003cc8:	4802      	ldr	r0, [pc, #8]	; (8003cd4 <I2C1_ER_IRQHandler+0x10>)
 8003cca:	f001 f8c2 	bl	8004e52 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003cce:	bf00      	nop
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200008c0 	.word	0x200008c0

08003cd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003cdc:	4802      	ldr	r0, [pc, #8]	; (8003ce8 <USART2_IRQHandler+0x10>)
 8003cde:	f004 fb19 	bl	8008314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000a34 	.word	0x20000a34

08003cec <_getpid>:
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_kill>:
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
 8003d06:	f006 fdd3 	bl	800a8b0 <__errno>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2216      	movs	r2, #22
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <_exit>:
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	f04f 31ff 	mov.w	r1, #4294967295
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ffe7 	bl	8003cfc <_kill>
 8003d2e:	e7fe      	b.n	8003d2e <_exit+0x12>

08003d30 <_read>:
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e00a      	b.n	8003d58 <_read+0x28>
 8003d42:	f3af 8000 	nop.w
 8003d46:	4601      	mov	r1, r0
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	60ba      	str	r2, [r7, #8]
 8003d4e:	b2ca      	uxtb	r2, r1
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	3301      	adds	r3, #1
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	dbf0      	blt.n	8003d42 <_read+0x12>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <_write>:
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b086      	sub	sp, #24
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e009      	b.n	8003d90 <_write+0x26>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	60ba      	str	r2, [r7, #8]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f3af 8000 	nop.w
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	dbf1      	blt.n	8003d7c <_write+0x12>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <_close>:
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <_fstat>:
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	6039      	str	r1, [r7, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <_isatty>:
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	2301      	movs	r3, #1
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <_lseek>:
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <_sbrk>:
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	4a14      	ldr	r2, [pc, #80]	; (8003e68 <_sbrk+0x5c>)
 8003e16:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <_sbrk+0x60>)
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <_sbrk+0x64>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d102      	bne.n	8003e2e <_sbrk+0x22>
 8003e28:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <_sbrk+0x64>)
 8003e2a:	4a12      	ldr	r2, [pc, #72]	; (8003e74 <_sbrk+0x68>)
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <_sbrk+0x64>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d207      	bcs.n	8003e4c <_sbrk+0x40>
 8003e3c:	f006 fd38 	bl	800a8b0 <__errno>
 8003e40:	4603      	mov	r3, r0
 8003e42:	220c      	movs	r2, #12
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4a:	e009      	b.n	8003e60 <_sbrk+0x54>
 8003e4c:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <_sbrk+0x64>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <_sbrk+0x64>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4413      	add	r3, r2
 8003e5a:	4a05      	ldr	r2, [pc, #20]	; (8003e70 <_sbrk+0x64>)
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20020000 	.word	0x20020000
 8003e6c:	00000400 	.word	0x00000400
 8003e70:	20000a78 	.word	0x20000a78
 8003e74:	20000a98 	.word	0x20000a98

08003e78 <SystemInit>:
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <SystemInit+0x20>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	4a05      	ldr	r2, [pc, #20]	; (8003e98 <SystemInit+0x20>)
 8003e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <Reset_Handler>:
 8003e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ed4 <LoopFillZerobss+0x12>
 8003ea0:	480d      	ldr	r0, [pc, #52]	; (8003ed8 <LoopFillZerobss+0x16>)
 8003ea2:	490e      	ldr	r1, [pc, #56]	; (8003edc <LoopFillZerobss+0x1a>)
 8003ea4:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <LoopFillZerobss+0x1e>)
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	e002      	b.n	8003eb0 <LoopCopyDataInit>

08003eaa <CopyDataInit>:
 8003eaa:	58d4      	ldr	r4, [r2, r3]
 8003eac:	50c4      	str	r4, [r0, r3]
 8003eae:	3304      	adds	r3, #4

08003eb0 <LoopCopyDataInit>:
 8003eb0:	18c4      	adds	r4, r0, r3
 8003eb2:	428c      	cmp	r4, r1
 8003eb4:	d3f9      	bcc.n	8003eaa <CopyDataInit>
 8003eb6:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <LoopFillZerobss+0x22>)
 8003eb8:	4c0b      	ldr	r4, [pc, #44]	; (8003ee8 <LoopFillZerobss+0x26>)
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e001      	b.n	8003ec2 <LoopFillZerobss>

08003ebe <FillZerobss>:
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	3204      	adds	r2, #4

08003ec2 <LoopFillZerobss>:
 8003ec2:	42a2      	cmp	r2, r4
 8003ec4:	d3fb      	bcc.n	8003ebe <FillZerobss>
 8003ec6:	f7ff ffd7 	bl	8003e78 <SystemInit>
 8003eca:	f006 fcf7 	bl	800a8bc <__libc_init_array>
 8003ece:	f7fe f949 	bl	8002164 <main>
 8003ed2:	4770      	bx	lr
 8003ed4:	20020000 	.word	0x20020000
 8003ed8:	20000000 	.word	0x20000000
 8003edc:	200001e0 	.word	0x200001e0
 8003ee0:	0800d99c 	.word	0x0800d99c
 8003ee4:	200001e0 	.word	0x200001e0
 8003ee8:	20000a94 	.word	0x20000a94

08003eec <ADC_IRQHandler>:
 8003eec:	e7fe      	b.n	8003eec <ADC_IRQHandler>
	...

08003ef0 <HAL_Init>:
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <HAL_Init+0x40>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <HAL_Init+0x40>)
 8003efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_Init+0x40>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a0a      	ldr	r2, [pc, #40]	; (8003f30 <HAL_Init+0x40>)
 8003f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_Init+0x40>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a07      	ldr	r2, [pc, #28]	; (8003f30 <HAL_Init+0x40>)
 8003f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	2003      	movs	r0, #3
 8003f1a:	f000 f973 	bl	8004204 <HAL_NVIC_SetPriorityGrouping>
 8003f1e:	200f      	movs	r0, #15
 8003f20:	f000 f808 	bl	8003f34 <HAL_InitTick>
 8003f24:	f7ff fc1c 	bl	8003760 <HAL_MspInit>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023c00 	.word	0x40023c00

08003f34 <HAL_InitTick>:
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <HAL_InitTick+0x54>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <HAL_InitTick+0x58>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	4619      	mov	r1, r3
 8003f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f999 	bl	800428a <HAL_SYSTICK_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_InitTick+0x2e>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e00e      	b.n	8003f80 <HAL_InitTick+0x4c>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b0f      	cmp	r3, #15
 8003f66:	d80a      	bhi.n	8003f7e <HAL_InitTick+0x4a>
 8003f68:	2200      	movs	r2, #0
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f70:	f000 f953 	bl	800421a <HAL_NVIC_SetPriority>
 8003f74:	4a06      	ldr	r2, [pc, #24]	; (8003f90 <HAL_InitTick+0x5c>)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e000      	b.n	8003f80 <HAL_InitTick+0x4c>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000004 	.word	0x20000004
 8003f8c:	2000000c 	.word	0x2000000c
 8003f90:	20000008 	.word	0x20000008

08003f94 <HAL_IncTick>:
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_IncTick+0x20>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <HAL_IncTick+0x24>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <HAL_IncTick+0x24>)
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	bf00      	nop
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	2000000c 	.word	0x2000000c
 8003fb8:	20000a7c 	.word	0x20000a7c

08003fbc <HAL_GetTick>:
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <HAL_GetTick+0x14>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000a7c 	.word	0x20000a7c

08003fd4 <HAL_Delay>:
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	f7ff ffee 	bl	8003fbc <HAL_GetTick>
 8003fe0:	60b8      	str	r0, [r7, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d005      	beq.n	8003ffa <HAL_Delay+0x26>
 8003fee:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <HAL_Delay+0x44>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	bf00      	nop
 8003ffc:	f7ff ffde 	bl	8003fbc <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	429a      	cmp	r2, r3
 800400a:	d8f7      	bhi.n	8003ffc <HAL_Delay+0x28>
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	2000000c 	.word	0x2000000c

0800401c <__NVIC_SetPriorityGrouping>:
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <__NVIC_SetPriorityGrouping+0x44>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004038:	4013      	ands	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	021a      	lsls	r2, r3, #8
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4313      	orrs	r3, r2
 8004044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	4a04      	ldr	r2, [pc, #16]	; (8004060 <__NVIC_SetPriorityGrouping+0x44>)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	60d3      	str	r3, [r2, #12]
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	e000ed00 	.word	0xe000ed00

08004064 <__NVIC_GetPriorityGrouping>:
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <__NVIC_GetPriorityGrouping+0x18>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	0a1b      	lsrs	r3, r3, #8
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	4618      	mov	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	e000ed00 	.word	0xe000ed00

08004080 <__NVIC_EnableIRQ>:
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
 800408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408e:	2b00      	cmp	r3, #0
 8004090:	db0b      	blt.n	80040aa <__NVIC_EnableIRQ+0x2a>
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	f003 021f 	and.w	r2, r3, #31
 8004098:	4907      	ldr	r1, [pc, #28]	; (80040b8 <__NVIC_EnableIRQ+0x38>)
 800409a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2001      	movs	r0, #1
 80040a2:	fa00 f202 	lsl.w	r2, r0, r2
 80040a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	e000e100 	.word	0xe000e100

080040bc <__NVIC_DisableIRQ>:
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	71fb      	strb	r3, [r7, #7]
 80040c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	db12      	blt.n	80040f4 <__NVIC_DisableIRQ+0x38>
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	f003 021f 	and.w	r2, r3, #31
 80040d4:	490a      	ldr	r1, [pc, #40]	; (8004100 <__NVIC_DisableIRQ+0x44>)
 80040d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	2001      	movs	r0, #1
 80040de:	fa00 f202 	lsl.w	r2, r0, r2
 80040e2:	3320      	adds	r3, #32
 80040e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	bf00      	nop
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000e100 	.word	0xe000e100

08004104 <__NVIC_SetPriority>:
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	6039      	str	r1, [r7, #0]
 800410e:	71fb      	strb	r3, [r7, #7]
 8004110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004114:	2b00      	cmp	r3, #0
 8004116:	db0a      	blt.n	800412e <__NVIC_SetPriority+0x2a>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	b2da      	uxtb	r2, r3
 800411c:	490c      	ldr	r1, [pc, #48]	; (8004150 <__NVIC_SetPriority+0x4c>)
 800411e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004122:	0112      	lsls	r2, r2, #4
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	440b      	add	r3, r1
 8004128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800412c:	e00a      	b.n	8004144 <__NVIC_SetPriority+0x40>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	b2da      	uxtb	r2, r3
 8004132:	4908      	ldr	r1, [pc, #32]	; (8004154 <__NVIC_SetPriority+0x50>)
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	3b04      	subs	r3, #4
 800413c:	0112      	lsls	r2, r2, #4
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	440b      	add	r3, r1
 8004142:	761a      	strb	r2, [r3, #24]
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	e000e100 	.word	0xe000e100
 8004154:	e000ed00 	.word	0xe000ed00

08004158 <NVIC_EncodePriority>:
 8004158:	b480      	push	{r7}
 800415a:	b089      	sub	sp, #36	; 0x24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f1c3 0307 	rsb	r3, r3, #7
 8004172:	2b04      	cmp	r3, #4
 8004174:	bf28      	it	cs
 8004176:	2304      	movcs	r3, #4
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3304      	adds	r3, #4
 800417e:	2b06      	cmp	r3, #6
 8004180:	d902      	bls.n	8004188 <NVIC_EncodePriority+0x30>
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3b03      	subs	r3, #3
 8004186:	e000      	b.n	800418a <NVIC_EncodePriority+0x32>
 8004188:	2300      	movs	r3, #0
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	f04f 32ff 	mov.w	r2, #4294967295
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	43da      	mvns	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	401a      	ands	r2, r3
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	409a      	lsls	r2, r3
 80041a0:	f04f 31ff 	mov.w	r1, #4294967295
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	fa01 f303 	lsl.w	r3, r1, r3
 80041aa:	43d9      	mvns	r1, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	400b      	ands	r3, r1
 80041b0:	4313      	orrs	r3, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	3724      	adds	r7, #36	; 0x24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <SysTick_Config>:
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041d0:	d301      	bcc.n	80041d6 <SysTick_Config+0x16>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e00f      	b.n	80041f6 <SysTick_Config+0x36>
 80041d6:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <SysTick_Config+0x40>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3b01      	subs	r3, #1
 80041dc:	6053      	str	r3, [r2, #4]
 80041de:	210f      	movs	r1, #15
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295
 80041e4:	f7ff ff8e 	bl	8004104 <__NVIC_SetPriority>
 80041e8:	4b05      	ldr	r3, [pc, #20]	; (8004200 <SysTick_Config+0x40>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	609a      	str	r2, [r3, #8]
 80041ee:	4b04      	ldr	r3, [pc, #16]	; (8004200 <SysTick_Config+0x40>)
 80041f0:	2207      	movs	r2, #7
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	2300      	movs	r3, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	e000e010 	.word	0xe000e010

08004204 <HAL_NVIC_SetPriorityGrouping>:
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff ff05 	bl	800401c <__NVIC_SetPriorityGrouping>
 8004212:	bf00      	nop
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_NVIC_SetPriority>:
 800421a:	b580      	push	{r7, lr}
 800421c:	b086      	sub	sp, #24
 800421e:	af00      	add	r7, sp, #0
 8004220:	4603      	mov	r3, r0
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	f7ff ff1a 	bl	8004064 <__NVIC_GetPriorityGrouping>
 8004230:	6178      	str	r0, [r7, #20]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68b9      	ldr	r1, [r7, #8]
 8004236:	6978      	ldr	r0, [r7, #20]
 8004238:	f7ff ff8e 	bl	8004158 <NVIC_EncodePriority>
 800423c:	4602      	mov	r2, r0
 800423e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004242:	4611      	mov	r1, r2
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff ff5d 	bl	8004104 <__NVIC_SetPriority>
 800424a:	bf00      	nop
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_NVIC_EnableIRQ>:
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	4603      	mov	r3, r0
 800425a:	71fb      	strb	r3, [r7, #7]
 800425c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff ff0d 	bl	8004080 <__NVIC_EnableIRQ>
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_NVIC_DisableIRQ>:
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	4603      	mov	r3, r0
 8004276:	71fb      	strb	r3, [r7, #7]
 8004278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff ff1d 	bl	80040bc <__NVIC_DisableIRQ>
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_SYSTICK_Config>:
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff ff94 	bl	80041c0 <SysTick_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_DMA_Abort>:
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	f7ff fe84 	bl	8003fbc <HAL_GetTick>
 80042b4:	60b8      	str	r0, [r7, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d008      	beq.n	80042d4 <HAL_DMA_Abort+0x32>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2280      	movs	r2, #128	; 0x80
 80042c6:	655a      	str	r2, [r3, #84]	; 0x54
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80042d0:	2301      	movs	r3, #1
 80042d2:	e052      	b.n	800437a <HAL_DMA_Abort+0xd8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0216 	bic.w	r2, r2, #22
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695a      	ldr	r2, [r3, #20]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042f2:	615a      	str	r2, [r3, #20]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d103      	bne.n	8004304 <HAL_DMA_Abort+0x62>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <HAL_DMA_Abort+0x72>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0208 	bic.w	r2, r2, #8
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e013      	b.n	800434e <HAL_DMA_Abort+0xac>
 8004326:	f7ff fe49 	bl	8003fbc <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b05      	cmp	r3, #5
 8004332:	d90c      	bls.n	800434e <HAL_DMA_Abort+0xac>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	655a      	str	r2, [r3, #84]	; 0x54
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2203      	movs	r2, #3
 800433e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800434a:	2303      	movs	r3, #3
 800434c:	e015      	b.n	800437a <HAL_DMA_Abort+0xd8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e4      	bne.n	8004326 <HAL_DMA_Abort+0x84>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	223f      	movs	r2, #63	; 0x3f
 8004362:	409a      	lsls	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004378:	2300      	movs	r3, #0
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_DMA_Abort_IT>:
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d004      	beq.n	80043a0 <HAL_DMA_Abort_IT+0x1e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2280      	movs	r2, #128	; 0x80
 800439a:	655a      	str	r2, [r3, #84]	; 0x54
 800439c:	2301      	movs	r3, #1
 800439e:	e00c      	b.n	80043ba <HAL_DMA_Abort_IT+0x38>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2205      	movs	r2, #5
 80043a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0201 	bic.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	2300      	movs	r3, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <HAL_DMA_GetState>:
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <HAL_GPIO_Init>:
 80043e4:	b480      	push	{r7}
 80043e6:	b089      	sub	sp, #36	; 0x24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	2300      	movs	r3, #0
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	e159      	b.n	80046b4 <HAL_GPIO_Init+0x2d0>
 8004400:	2201      	movs	r2, #1
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4013      	ands	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	429a      	cmp	r2, r3
 800441a:	f040 8148 	bne.w	80046ae <HAL_GPIO_Init+0x2ca>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	2b01      	cmp	r3, #1
 8004428:	d005      	beq.n	8004436 <HAL_GPIO_Init+0x52>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d130      	bne.n	8004498 <HAL_GPIO_Init+0xb4>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	2203      	movs	r2, #3
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	609a      	str	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	61bb      	str	r3, [r7, #24]
 800446c:	2201      	movs	r2, #1
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 0201 	and.w	r2, r3, #1
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	605a      	str	r2, [r3, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d017      	beq.n	80044d4 <HAL_GPIO_Init+0xf0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	2203      	movs	r2, #3
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	60da      	str	r2, [r3, #12]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d123      	bne.n	8004528 <HAL_GPIO_Init+0x144>
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	08da      	lsrs	r2, r3, #3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3208      	adds	r2, #8
 80044e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	220f      	movs	r2, #15
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4313      	orrs	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	08da      	lsrs	r2, r3, #3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3208      	adds	r2, #8
 8004522:	69b9      	ldr	r1, [r7, #24]
 8004524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	2203      	movs	r2, #3
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 0203 	and.w	r2, r3, #3
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80a2 	beq.w	80046ae <HAL_GPIO_Init+0x2ca>
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	4b57      	ldr	r3, [pc, #348]	; (80046cc <HAL_GPIO_Init+0x2e8>)
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	4a56      	ldr	r2, [pc, #344]	; (80046cc <HAL_GPIO_Init+0x2e8>)
 8004574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004578:	6453      	str	r3, [r2, #68]	; 0x44
 800457a:	4b54      	ldr	r3, [pc, #336]	; (80046cc <HAL_GPIO_Init+0x2e8>)
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a52      	ldr	r2, [pc, #328]	; (80046d0 <HAL_GPIO_Init+0x2ec>)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	089b      	lsrs	r3, r3, #2
 800458c:	3302      	adds	r3, #2
 800458e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	220f      	movs	r2, #15
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a49      	ldr	r2, [pc, #292]	; (80046d4 <HAL_GPIO_Init+0x2f0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d019      	beq.n	80045e6 <HAL_GPIO_Init+0x202>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a48      	ldr	r2, [pc, #288]	; (80046d8 <HAL_GPIO_Init+0x2f4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <HAL_GPIO_Init+0x1fe>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a47      	ldr	r2, [pc, #284]	; (80046dc <HAL_GPIO_Init+0x2f8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00d      	beq.n	80045de <HAL_GPIO_Init+0x1fa>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a46      	ldr	r2, [pc, #280]	; (80046e0 <HAL_GPIO_Init+0x2fc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d007      	beq.n	80045da <HAL_GPIO_Init+0x1f6>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a45      	ldr	r2, [pc, #276]	; (80046e4 <HAL_GPIO_Init+0x300>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d101      	bne.n	80045d6 <HAL_GPIO_Init+0x1f2>
 80045d2:	2304      	movs	r3, #4
 80045d4:	e008      	b.n	80045e8 <HAL_GPIO_Init+0x204>
 80045d6:	2307      	movs	r3, #7
 80045d8:	e006      	b.n	80045e8 <HAL_GPIO_Init+0x204>
 80045da:	2303      	movs	r3, #3
 80045dc:	e004      	b.n	80045e8 <HAL_GPIO_Init+0x204>
 80045de:	2302      	movs	r3, #2
 80045e0:	e002      	b.n	80045e8 <HAL_GPIO_Init+0x204>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <HAL_GPIO_Init+0x204>
 80045e6:	2300      	movs	r3, #0
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	f002 0203 	and.w	r2, r2, #3
 80045ee:	0092      	lsls	r2, r2, #2
 80045f0:	4093      	lsls	r3, r2
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
 80045f8:	4935      	ldr	r1, [pc, #212]	; (80046d0 <HAL_GPIO_Init+0x2ec>)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	089b      	lsrs	r3, r3, #2
 80045fe:	3302      	adds	r3, #2
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004606:	4b38      	ldr	r3, [pc, #224]	; (80046e8 <HAL_GPIO_Init+0x304>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	61bb      	str	r3, [r7, #24]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	43db      	mvns	r3, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4013      	ands	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_Init+0x246>
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	4a2f      	ldr	r2, [pc, #188]	; (80046e8 <HAL_GPIO_Init+0x304>)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	6093      	str	r3, [r2, #8]
 8004630:	4b2d      	ldr	r3, [pc, #180]	; (80046e8 <HAL_GPIO_Init+0x304>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_GPIO_Init+0x270>
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	4a24      	ldr	r2, [pc, #144]	; (80046e8 <HAL_GPIO_Init+0x304>)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	60d3      	str	r3, [r2, #12]
 800465a:	4b23      	ldr	r3, [pc, #140]	; (80046e8 <HAL_GPIO_Init+0x304>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	43db      	mvns	r3, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_GPIO_Init+0x29a>
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	4a1a      	ldr	r2, [pc, #104]	; (80046e8 <HAL_GPIO_Init+0x304>)
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	6053      	str	r3, [r2, #4]
 8004684:	4b18      	ldr	r3, [pc, #96]	; (80046e8 <HAL_GPIO_Init+0x304>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	43db      	mvns	r3, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4013      	ands	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <HAL_GPIO_Init+0x2c4>
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	4a0f      	ldr	r2, [pc, #60]	; (80046e8 <HAL_GPIO_Init+0x304>)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3301      	adds	r3, #1
 80046b2:	61fb      	str	r3, [r7, #28]
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	f67f aea2 	bls.w	8004400 <HAL_GPIO_Init+0x1c>
 80046bc:	bf00      	nop
 80046be:	bf00      	nop
 80046c0:	3724      	adds	r7, #36	; 0x24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40013800 	.word	0x40013800
 80046d4:	40020000 	.word	0x40020000
 80046d8:	40020400 	.word	0x40020400
 80046dc:	40020800 	.word	0x40020800
 80046e0:	40020c00 	.word	0x40020c00
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40013c00 	.word	0x40013c00

080046ec <HAL_GPIO_DeInit>:
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
 80046f6:	2300      	movs	r3, #0
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	2300      	movs	r3, #0
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e0bb      	b.n	8004880 <HAL_GPIO_DeInit+0x194>
 8004708:	2201      	movs	r2, #1
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4013      	ands	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	429a      	cmp	r2, r3
 8004720:	f040 80ab 	bne.w	800487a <HAL_GPIO_DeInit+0x18e>
 8004724:	4a5c      	ldr	r2, [pc, #368]	; (8004898 <HAL_GPIO_DeInit+0x1ac>)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	089b      	lsrs	r3, r3, #2
 800472a:	3302      	adds	r3, #2
 800472c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	220f      	movs	r2, #15
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	4013      	ands	r3, r2
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a54      	ldr	r2, [pc, #336]	; (800489c <HAL_GPIO_DeInit+0x1b0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d019      	beq.n	8004782 <HAL_GPIO_DeInit+0x96>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a53      	ldr	r2, [pc, #332]	; (80048a0 <HAL_GPIO_DeInit+0x1b4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_GPIO_DeInit+0x92>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a52      	ldr	r2, [pc, #328]	; (80048a4 <HAL_GPIO_DeInit+0x1b8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00d      	beq.n	800477a <HAL_GPIO_DeInit+0x8e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a51      	ldr	r2, [pc, #324]	; (80048a8 <HAL_GPIO_DeInit+0x1bc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <HAL_GPIO_DeInit+0x8a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a50      	ldr	r2, [pc, #320]	; (80048ac <HAL_GPIO_DeInit+0x1c0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <HAL_GPIO_DeInit+0x86>
 800476e:	2304      	movs	r3, #4
 8004770:	e008      	b.n	8004784 <HAL_GPIO_DeInit+0x98>
 8004772:	2307      	movs	r3, #7
 8004774:	e006      	b.n	8004784 <HAL_GPIO_DeInit+0x98>
 8004776:	2303      	movs	r3, #3
 8004778:	e004      	b.n	8004784 <HAL_GPIO_DeInit+0x98>
 800477a:	2302      	movs	r3, #2
 800477c:	e002      	b.n	8004784 <HAL_GPIO_DeInit+0x98>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_GPIO_DeInit+0x98>
 8004782:	2300      	movs	r3, #0
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	f002 0203 	and.w	r2, r2, #3
 800478a:	0092      	lsls	r2, r2, #2
 800478c:	4093      	lsls	r3, r2
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	429a      	cmp	r2, r3
 8004792:	d132      	bne.n	80047fa <HAL_GPIO_DeInit+0x10e>
 8004794:	4b46      	ldr	r3, [pc, #280]	; (80048b0 <HAL_GPIO_DeInit+0x1c4>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	43db      	mvns	r3, r3
 800479c:	4944      	ldr	r1, [pc, #272]	; (80048b0 <HAL_GPIO_DeInit+0x1c4>)
 800479e:	4013      	ands	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]
 80047a2:	4b43      	ldr	r3, [pc, #268]	; (80048b0 <HAL_GPIO_DeInit+0x1c4>)
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	4941      	ldr	r1, [pc, #260]	; (80048b0 <HAL_GPIO_DeInit+0x1c4>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
 80047b0:	4b3f      	ldr	r3, [pc, #252]	; (80048b0 <HAL_GPIO_DeInit+0x1c4>)
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	493d      	ldr	r1, [pc, #244]	; (80048b0 <HAL_GPIO_DeInit+0x1c4>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	60cb      	str	r3, [r1, #12]
 80047be:	4b3c      	ldr	r3, [pc, #240]	; (80048b0 <HAL_GPIO_DeInit+0x1c4>)
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	43db      	mvns	r3, r3
 80047c6:	493a      	ldr	r1, [pc, #232]	; (80048b0 <HAL_GPIO_DeInit+0x1c4>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	608b      	str	r3, [r1, #8]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	220f      	movs	r2, #15
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	4a2e      	ldr	r2, [pc, #184]	; (8004898 <HAL_GPIO_DeInit+0x1ac>)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	089b      	lsrs	r3, r3, #2
 80047e2:	3302      	adds	r3, #2
 80047e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	43da      	mvns	r2, r3
 80047ec:	482a      	ldr	r0, [pc, #168]	; (8004898 <HAL_GPIO_DeInit+0x1ac>)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	089b      	lsrs	r3, r3, #2
 80047f2:	400a      	ands	r2, r1
 80047f4:	3302      	adds	r3, #2
 80047f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	2103      	movs	r1, #3
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	401a      	ands	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	08da      	lsrs	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3208      	adds	r2, #8
 8004818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	220f      	movs	r2, #15
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43db      	mvns	r3, r3
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	08d2      	lsrs	r2, r2, #3
 8004830:	4019      	ands	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3208      	adds	r2, #8
 8004836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	2103      	movs	r1, #3
 8004844:	fa01 f303 	lsl.w	r3, r1, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	401a      	ands	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	60da      	str	r2, [r3, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	2101      	movs	r1, #1
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	fa01 f303 	lsl.w	r3, r1, r3
 800485c:	43db      	mvns	r3, r3
 800485e:	401a      	ands	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	605a      	str	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	2103      	movs	r1, #3
 800486e:	fa01 f303 	lsl.w	r3, r1, r3
 8004872:	43db      	mvns	r3, r3
 8004874:	401a      	ands	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	609a      	str	r2, [r3, #8]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	3301      	adds	r3, #1
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b0f      	cmp	r3, #15
 8004884:	f67f af40 	bls.w	8004708 <HAL_GPIO_DeInit+0x1c>
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40013800 	.word	0x40013800
 800489c:	40020000 	.word	0x40020000
 80048a0:	40020400 	.word	0x40020400
 80048a4:	40020800 	.word	0x40020800
 80048a8:	40020c00 	.word	0x40020c00
 80048ac:	40021000 	.word	0x40021000
 80048b0:	40013c00 	.word	0x40013c00

080048b4 <HAL_GPIO_WritePin>:
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	807b      	strh	r3, [r7, #2]
 80048c0:	4613      	mov	r3, r2
 80048c2:	707b      	strb	r3, [r7, #1]
 80048c4:	787b      	ldrb	r3, [r7, #1]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_WritePin+0x1e>
 80048ca:	887a      	ldrh	r2, [r7, #2]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	619a      	str	r2, [r3, #24]
 80048d0:	e003      	b.n	80048da <HAL_GPIO_WritePin+0x26>
 80048d2:	887b      	ldrh	r3, [r7, #2]
 80048d4:	041a      	lsls	r2, r3, #16
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	619a      	str	r2, [r3, #24]
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
	...

080048e8 <HAL_I2C_Init>:
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_I2C_Init+0x12>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e12b      	b.n	8004b52 <HAL_I2C_Init+0x26a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_I2C_Init+0x2c>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fe ff4e 	bl	80037b0 <HAL_I2C_MspInit>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2224      	movs	r2, #36	; 0x24
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	f002 fa1c 	bl	8006d88 <HAL_RCC_GetPCLK1Freq>
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4a81      	ldr	r2, [pc, #516]	; (8004b5c <HAL_I2C_Init+0x274>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d807      	bhi.n	800496c <HAL_I2C_Init+0x84>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a80      	ldr	r2, [pc, #512]	; (8004b60 <HAL_I2C_Init+0x278>)
 8004960:	4293      	cmp	r3, r2
 8004962:	bf94      	ite	ls
 8004964:	2301      	movls	r3, #1
 8004966:	2300      	movhi	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e006      	b.n	800497a <HAL_I2C_Init+0x92>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a7d      	ldr	r2, [pc, #500]	; (8004b64 <HAL_I2C_Init+0x27c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	bf94      	ite	ls
 8004974:	2301      	movls	r3, #1
 8004976:	2300      	movhi	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_I2C_Init+0x9a>
 800497e:	2301      	movs	r3, #1
 8004980:	e0e7      	b.n	8004b52 <HAL_I2C_Init+0x26a>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a78      	ldr	r2, [pc, #480]	; (8004b68 <HAL_I2C_Init+0x280>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	0c9b      	lsrs	r3, r3, #18
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a6a      	ldr	r2, [pc, #424]	; (8004b5c <HAL_I2C_Init+0x274>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d802      	bhi.n	80049bc <HAL_I2C_Init+0xd4>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	3301      	adds	r3, #1
 80049ba:	e009      	b.n	80049d0 <HAL_I2C_Init+0xe8>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	4a69      	ldr	r2, [pc, #420]	; (8004b6c <HAL_I2C_Init+0x284>)
 80049c8:	fba2 2303 	umull	r2, r3, r2, r3
 80049cc:	099b      	lsrs	r3, r3, #6
 80049ce:	3301      	adds	r3, #1
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6213      	str	r3, [r2, #32]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	495c      	ldr	r1, [pc, #368]	; (8004b5c <HAL_I2C_Init+0x274>)
 80049ec:	428b      	cmp	r3, r1
 80049ee:	d819      	bhi.n	8004a24 <HAL_I2C_Init+0x13c>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1e59      	subs	r1, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80049fe:	1c59      	adds	r1, r3, #1
 8004a00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a04:	400b      	ands	r3, r1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_I2C_Init+0x138>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1e59      	subs	r1, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1e:	e051      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a20:	2304      	movs	r3, #4
 8004a22:	e04f      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d111      	bne.n	8004a50 <HAL_I2C_Init+0x168>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	1e58      	subs	r0, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6859      	ldr	r1, [r3, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	440b      	add	r3, r1
 8004a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e012      	b.n	8004a76 <HAL_I2C_Init+0x18e>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1e58      	subs	r0, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6859      	ldr	r1, [r3, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	0099      	lsls	r1, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a66:	3301      	adds	r3, #1
 8004a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Init+0x196>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e022      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10e      	bne.n	8004aa4 <HAL_I2C_Init+0x1bc>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1e58      	subs	r0, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6859      	ldr	r1, [r3, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	440b      	add	r3, r1
 8004a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa2:	e00f      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1e58      	subs	r0, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6859      	ldr	r1, [r3, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	0099      	lsls	r1, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aba:	3301      	adds	r3, #1
 8004abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	6809      	ldr	r1, [r1, #0]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61cb      	str	r3, [r1, #28]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6911      	ldr	r1, [r2, #16]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68d2      	ldr	r2, [r2, #12]
 8004afe:	4311      	orrs	r1, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6093      	str	r3, [r2, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	60da      	str	r2, [r3, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b50:	2300      	movs	r3, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	000186a0 	.word	0x000186a0
 8004b60:	001e847f 	.word	0x001e847f
 8004b64:	003d08ff 	.word	0x003d08ff
 8004b68:	431bde83 	.word	0x431bde83
 8004b6c:	10624dd3 	.word	0x10624dd3

08004b70 <HAL_I2C_EV_IRQHandler>:
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b90:	73fb      	strb	r3, [r7, #15]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	73bb      	strb	r3, [r7, #14]
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d003      	beq.n	8004ba8 <HAL_I2C_EV_IRQHandler+0x38>
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	2b40      	cmp	r3, #64	; 0x40
 8004ba4:	f040 80c1 	bne.w	8004d2a <HAL_I2C_EV_IRQHandler+0x1ba>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	61fb      	str	r3, [r7, #28]
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10d      	bne.n	8004bde <HAL_I2C_EV_IRQHandler+0x6e>
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004bc8:	d003      	beq.n	8004bd2 <HAL_I2C_EV_IRQHandler+0x62>
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004bd0:	d101      	bne.n	8004bd6 <HAL_I2C_EV_IRQHandler+0x66>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <HAL_I2C_EV_IRQHandler+0x68>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	f000 8132 	beq.w	8004e42 <HAL_I2C_EV_IRQHandler+0x2d2>
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00c      	beq.n	8004c02 <HAL_I2C_EV_IRQHandler+0x92>
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	0a5b      	lsrs	r3, r3, #9
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d006      	beq.n	8004c02 <HAL_I2C_EV_IRQHandler+0x92>
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f001 fc7b 	bl	80064f0 <I2C_ConvertOtherXferOptions>
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fd83 	bl	8005706 <I2C_Master_SB>
 8004c00:	e092      	b.n	8004d28 <HAL_I2C_EV_IRQHandler+0x1b8>
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <HAL_I2C_EV_IRQHandler+0xb2>
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	0a5b      	lsrs	r3, r3, #9
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_I2C_EV_IRQHandler+0xb2>
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fdf9 	bl	8005812 <I2C_Master_ADD10>
 8004c20:	e082      	b.n	8004d28 <HAL_I2C_EV_IRQHandler+0x1b8>
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	085b      	lsrs	r3, r3, #1
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <HAL_I2C_EV_IRQHandler+0xd2>
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	0a5b      	lsrs	r3, r3, #9
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_I2C_EV_IRQHandler+0xd2>
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fe13 	bl	8005866 <I2C_Master_ADDR>
 8004c40:	e072      	b.n	8004d28 <HAL_I2C_EV_IRQHandler+0x1b8>
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	089b      	lsrs	r3, r3, #2
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d03b      	beq.n	8004cc6 <HAL_I2C_EV_IRQHandler+0x156>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c5c:	f000 80f3 	beq.w	8004e46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	09db      	lsrs	r3, r3, #7
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00f      	beq.n	8004c8c <HAL_I2C_EV_IRQHandler+0x11c>
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	0a9b      	lsrs	r3, r3, #10
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d009      	beq.n	8004c8c <HAL_I2C_EV_IRQHandler+0x11c>
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	089b      	lsrs	r3, r3, #2
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d103      	bne.n	8004c8c <HAL_I2C_EV_IRQHandler+0x11c>
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f9f3 	bl	8005070 <I2C_MasterTransmit_TXE>
 8004c8a:	e04d      	b.n	8004d28 <HAL_I2C_EV_IRQHandler+0x1b8>
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	089b      	lsrs	r3, r3, #2
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80d6 	beq.w	8004e46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	0a5b      	lsrs	r3, r3, #9
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 80cf 	beq.w	8004e46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004ca8:	7bbb      	ldrb	r3, [r7, #14]
 8004caa:	2b21      	cmp	r3, #33	; 0x21
 8004cac:	d103      	bne.n	8004cb6 <HAL_I2C_EV_IRQHandler+0x146>
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fa7a 	bl	80051a8 <I2C_MasterTransmit_BTF>
 8004cb4:	e0c7      	b.n	8004e46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	f040 80c4 	bne.w	8004e46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fae8 	bl	8005294 <I2C_MemoryTransmit_TXE_BTF>
 8004cc4:	e0bf      	b.n	8004e46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd4:	f000 80b7 	beq.w	8004e46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	099b      	lsrs	r3, r3, #6
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00f      	beq.n	8004d04 <HAL_I2C_EV_IRQHandler+0x194>
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	0a9b      	lsrs	r3, r3, #10
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <HAL_I2C_EV_IRQHandler+0x194>
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	089b      	lsrs	r3, r3, #2
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d103      	bne.n	8004d04 <HAL_I2C_EV_IRQHandler+0x194>
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fb5d 	bl	80053bc <I2C_MasterReceive_RXNE>
 8004d02:	e011      	b.n	8004d28 <HAL_I2C_EV_IRQHandler+0x1b8>
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	089b      	lsrs	r3, r3, #2
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 809a 	beq.w	8004e46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	0a5b      	lsrs	r3, r3, #9
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 8093 	beq.w	8004e46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fc06 	bl	8005532 <I2C_MasterReceive_BTF>
 8004d26:	e08e      	b.n	8004e46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d28:	e08d      	b.n	8004e46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d004      	beq.n	8004d3c <HAL_I2C_EV_IRQHandler+0x1cc>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	e007      	b.n	8004d4c <HAL_I2C_EV_IRQHandler+0x1dc>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d012      	beq.n	8004d7e <HAL_I2C_EV_IRQHandler+0x20e>
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	0a5b      	lsrs	r3, r3, #9
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00c      	beq.n	8004d7e <HAL_I2C_EV_IRQHandler+0x20e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <HAL_I2C_EV_IRQHandler+0x204>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	61bb      	str	r3, [r7, #24]
 8004d74:	69b9      	ldr	r1, [r7, #24]
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 ffc4 	bl	8005d04 <I2C_Slave_ADDR>
 8004d7c:	e066      	b.n	8004e4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <HAL_I2C_EV_IRQHandler+0x22e>
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	0a5b      	lsrs	r3, r3, #9
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_I2C_EV_IRQHandler+0x22e>
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fffe 	bl	8005d98 <I2C_Slave_STOPF>
 8004d9c:	e056      	b.n	8004e4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004d9e:	7bbb      	ldrb	r3, [r7, #14]
 8004da0:	2b21      	cmp	r3, #33	; 0x21
 8004da2:	d002      	beq.n	8004daa <HAL_I2C_EV_IRQHandler+0x23a>
 8004da4:	7bbb      	ldrb	r3, [r7, #14]
 8004da6:	2b29      	cmp	r3, #41	; 0x29
 8004da8:	d125      	bne.n	8004df6 <HAL_I2C_EV_IRQHandler+0x286>
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	09db      	lsrs	r3, r3, #7
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00f      	beq.n	8004dd6 <HAL_I2C_EV_IRQHandler+0x266>
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	0a9b      	lsrs	r3, r3, #10
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <HAL_I2C_EV_IRQHandler+0x266>
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	089b      	lsrs	r3, r3, #2
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d103      	bne.n	8004dd6 <HAL_I2C_EV_IRQHandler+0x266>
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 feda 	bl	8005b88 <I2C_SlaveTransmit_TXE>
 8004dd4:	e039      	b.n	8004e4a <HAL_I2C_EV_IRQHandler+0x2da>
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	089b      	lsrs	r3, r3, #2
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d033      	beq.n	8004e4a <HAL_I2C_EV_IRQHandler+0x2da>
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	0a5b      	lsrs	r3, r3, #9
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d02d      	beq.n	8004e4a <HAL_I2C_EV_IRQHandler+0x2da>
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 ff07 	bl	8005c02 <I2C_SlaveTransmit_BTF>
 8004df4:	e029      	b.n	8004e4a <HAL_I2C_EV_IRQHandler+0x2da>
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	099b      	lsrs	r3, r3, #6
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00f      	beq.n	8004e22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	0a9b      	lsrs	r3, r3, #10
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d103      	bne.n	8004e22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 ff12 	bl	8005c44 <I2C_SlaveReceive_RXNE>
 8004e20:	e014      	b.n	8004e4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	089b      	lsrs	r3, r3, #2
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00e      	beq.n	8004e4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	0a5b      	lsrs	r3, r3, #9
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 ff40 	bl	8005cc0 <I2C_SlaveReceive_BTF>
 8004e40:	e004      	b.n	8004e4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004e42:	bf00      	nop
 8004e44:	e002      	b.n	8004e4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004e46:	bf00      	nop
 8004e48:	e000      	b.n	8004e4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004e4a:	bf00      	nop
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_I2C_ER_IRQHandler>:
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b08a      	sub	sp, #40	; 0x28
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	623b      	str	r3, [r7, #32]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	61fb      	str	r3, [r7, #28]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e74:	76fb      	strb	r3, [r7, #27]
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	0a1b      	lsrs	r3, r3, #8
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00e      	beq.n	8004ea0 <HAL_I2C_ER_IRQHandler+0x4e>
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	0a1b      	lsrs	r3, r3, #8
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d008      	beq.n	8004ea0 <HAL_I2C_ER_IRQHandler+0x4e>
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e9e:	615a      	str	r2, [r3, #20]
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	0a5b      	lsrs	r3, r3, #9
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00e      	beq.n	8004eca <HAL_I2C_ER_IRQHandler+0x78>
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_I2C_ER_IRQHandler+0x78>
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	f043 0302 	orr.w	r3, r3, #2
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004ec8:	615a      	str	r2, [r3, #20]
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	0a9b      	lsrs	r3, r3, #10
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d03f      	beq.n	8004f56 <HAL_I2C_ER_IRQHandler+0x104>
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	0a1b      	lsrs	r3, r3, #8
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d039      	beq.n	8004f56 <HAL_I2C_ER_IRQHandler+0x104>
 8004ee2:	7efb      	ldrb	r3, [r7, #27]
 8004ee4:	76bb      	strb	r3, [r7, #26]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef4:	74fb      	strb	r3, [r7, #19]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	7ebb      	ldrb	r3, [r7, #26]
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d112      	bne.n	8004f28 <HAL_I2C_ER_IRQHandler+0xd6>
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10f      	bne.n	8004f28 <HAL_I2C_ER_IRQHandler+0xd6>
 8004f08:	7cfb      	ldrb	r3, [r7, #19]
 8004f0a:	2b21      	cmp	r3, #33	; 0x21
 8004f0c:	d008      	beq.n	8004f20 <HAL_I2C_ER_IRQHandler+0xce>
 8004f0e:	7cfb      	ldrb	r3, [r7, #19]
 8004f10:	2b29      	cmp	r3, #41	; 0x29
 8004f12:	d005      	beq.n	8004f20 <HAL_I2C_ER_IRQHandler+0xce>
 8004f14:	7cfb      	ldrb	r3, [r7, #19]
 8004f16:	2b28      	cmp	r3, #40	; 0x28
 8004f18:	d106      	bne.n	8004f28 <HAL_I2C_ER_IRQHandler+0xd6>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b21      	cmp	r3, #33	; 0x21
 8004f1e:	d103      	bne.n	8004f28 <HAL_I2C_ER_IRQHandler+0xd6>
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f001 f869 	bl	8005ff8 <I2C_Slave_AF>
 8004f26:	e016      	b.n	8004f56 <HAL_I2C_ER_IRQHandler+0x104>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f30:	615a      	str	r2, [r3, #20]
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	f043 0304 	orr.w	r3, r3, #4
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3a:	7efb      	ldrb	r3, [r7, #27]
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d002      	beq.n	8004f46 <HAL_I2C_ER_IRQHandler+0xf4>
 8004f40:	7efb      	ldrb	r3, [r7, #27]
 8004f42:	2b40      	cmp	r3, #64	; 0x40
 8004f44:	d107      	bne.n	8004f56 <HAL_I2C_ER_IRQHandler+0x104>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	0adb      	lsrs	r3, r3, #11
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00e      	beq.n	8004f80 <HAL_I2C_ER_IRQHandler+0x12e>
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	0a1b      	lsrs	r3, r3, #8
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d008      	beq.n	8004f80 <HAL_I2C_ER_IRQHandler+0x12e>
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	f043 0308 	orr.w	r3, r3, #8
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004f7e:	615a      	str	r2, [r3, #20]
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <HAL_I2C_ER_IRQHandler+0x146>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f001 f8a0 	bl	80060d8 <I2C_ITError>
 8004f98:	bf00      	nop
 8004f9a:	3728      	adds	r7, #40	; 0x28
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_I2C_MasterTxCpltCallback>:
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_I2C_MasterRxCpltCallback>:
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_I2C_SlaveTxCpltCallback>:
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_I2C_SlaveRxCpltCallback>:
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_I2C_AddrCallback>:
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	70fb      	strb	r3, [r7, #3]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	803b      	strh	r3, [r7, #0]
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_I2C_ListenCpltCallback>:
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_I2C_MemTxCpltCallback>:
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_I2C_MemRxCpltCallback>:
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_I2C_ErrorCallback>:
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_I2C_AbortCpltCallback>:
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <I2C_MasterTransmit_TXE>:
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507e:	73fb      	strb	r3, [r7, #15]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005086:	73bb      	strb	r3, [r7, #14]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	60bb      	str	r3, [r7, #8]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005092:	2b00      	cmp	r3, #0
 8005094:	d150      	bne.n	8005138 <I2C_MasterTransmit_TXE+0xc8>
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	2b21      	cmp	r3, #33	; 0x21
 800509a:	d14d      	bne.n	8005138 <I2C_MasterTransmit_TXE+0xc8>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d01d      	beq.n	80050de <I2C_MasterTransmit_TXE+0x6e>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d01a      	beq.n	80050de <I2C_MasterTransmit_TXE+0x6e>
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050ae:	d016      	beq.n	80050de <I2C_MasterTransmit_TXE+0x6e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050be:	605a      	str	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2211      	movs	r2, #17
 80050c4:	631a      	str	r2, [r3, #48]	; 0x30
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff ff62 	bl	8004fa0 <HAL_I2C_MasterTxCpltCallback>
 80050dc:	e060      	b.n	80051a0 <I2C_MasterTransmit_TXE+0x130>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050ec:	605a      	str	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	631a      	str	r2, [r3, #48]	; 0x30
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d107      	bne.n	8005128 <I2C_MasterTransmit_TXE+0xb8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff ff7d 	bl	8005020 <HAL_I2C_MemTxCpltCallback>
 8005126:	e03b      	b.n	80051a0 <I2C_MasterTransmit_TXE+0x130>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff ff35 	bl	8004fa0 <HAL_I2C_MasterTxCpltCallback>
 8005136:	e033      	b.n	80051a0 <I2C_MasterTransmit_TXE+0x130>
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	2b21      	cmp	r3, #33	; 0x21
 800513c:	d005      	beq.n	800514a <I2C_MasterTransmit_TXE+0xda>
 800513e:	7bbb      	ldrb	r3, [r7, #14]
 8005140:	2b40      	cmp	r3, #64	; 0x40
 8005142:	d12d      	bne.n	80051a0 <I2C_MasterTransmit_TXE+0x130>
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	2b22      	cmp	r3, #34	; 0x22
 8005148:	d12a      	bne.n	80051a0 <I2C_MasterTransmit_TXE+0x130>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d108      	bne.n	8005166 <I2C_MasterTransmit_TXE+0xf6>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005162:	605a      	str	r2, [r3, #4]
 8005164:	e01c      	b.n	80051a0 <I2C_MasterTransmit_TXE+0x130>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b40      	cmp	r3, #64	; 0x40
 8005170:	d103      	bne.n	800517a <I2C_MasterTransmit_TXE+0x10a>
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f88e 	bl	8005294 <I2C_MemoryTransmit_TXE_BTF>
 8005178:	e012      	b.n	80051a0 <I2C_MasterTransmit_TXE+0x130>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	611a      	str	r2, [r3, #16]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800519e:	e7ff      	b.n	80051a0 <I2C_MasterTransmit_TXE+0x130>
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <I2C_MasterTransmit_BTF>:
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b21      	cmp	r3, #33	; 0x21
 80051c0:	d164      	bne.n	800528c <I2C_MasterTransmit_BTF+0xe4>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d012      	beq.n	80051f2 <I2C_MasterTransmit_BTF+0x4a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	781a      	ldrb	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	611a      	str	r2, [r3, #16]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051f0:	e04c      	b.n	800528c <I2C_MasterTransmit_BTF+0xe4>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d01d      	beq.n	8005234 <I2C_MasterTransmit_BTF+0x8c>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d01a      	beq.n	8005234 <I2C_MasterTransmit_BTF+0x8c>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005204:	d016      	beq.n	8005234 <I2C_MasterTransmit_BTF+0x8c>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005214:	605a      	str	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2211      	movs	r2, #17
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff feb7 	bl	8004fa0 <HAL_I2C_MasterTxCpltCallback>
 8005232:	e02b      	b.n	800528c <I2C_MasterTransmit_BTF+0xe4>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005242:	605a      	str	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	631a      	str	r2, [r3, #48]	; 0x30
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b40      	cmp	r3, #64	; 0x40
 800526c:	d107      	bne.n	800527e <I2C_MasterTransmit_BTF+0xd6>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fed2 	bl	8005020 <HAL_I2C_MemTxCpltCallback>
 800527c:	e006      	b.n	800528c <I2C_MasterTransmit_BTF+0xe4>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff fe8a 	bl	8004fa0 <HAL_I2C_MasterTxCpltCallback>
 800528c:	bf00      	nop
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <I2C_MemoryTransmit_TXE_BTF>:
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a2:	73fb      	strb	r3, [r7, #15]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d11d      	bne.n	80052e8 <I2C_MemoryTransmit_TXE_BTF+0x54>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d10b      	bne.n	80052cc <I2C_MemoryTransmit_TXE_BTF+0x38>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	611a      	str	r2, [r3, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c4:	1c9a      	adds	r2, r3, #2
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	651a      	str	r2, [r3, #80]	; 0x50
 80052ca:	e073      	b.n	80053b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	121b      	asrs	r3, r3, #8
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	611a      	str	r2, [r3, #16]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	651a      	str	r2, [r3, #80]	; 0x50
 80052e6:	e065      	b.n	80053b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d10b      	bne.n	8005308 <I2C_MemoryTransmit_TXE_BTF+0x74>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	611a      	str	r2, [r3, #16]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	651a      	str	r2, [r3, #80]	; 0x50
 8005306:	e055      	b.n	80053b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530c:	2b02      	cmp	r3, #2
 800530e:	d151      	bne.n	80053b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	2b22      	cmp	r3, #34	; 0x22
 8005314:	d10d      	bne.n	8005332 <I2C_MemoryTransmit_TXE_BTF+0x9e>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	651a      	str	r2, [r3, #80]	; 0x50
 8005330:	e040      	b.n	80053b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d015      	beq.n	8005368 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2b21      	cmp	r3, #33	; 0x21
 8005340:	d112      	bne.n	8005368 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	781a      	ldrb	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	611a      	str	r2, [r3, #16]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	625a      	str	r2, [r3, #36]	; 0x24
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535c:	b29b      	uxth	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005366:	e025      	b.n	80053b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d120      	bne.n	80053b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	2b21      	cmp	r3, #33	; 0x21
 8005376:	d11d      	bne.n	80053b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005386:	605a      	str	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff fe36 	bl	8005020 <HAL_I2C_MemTxCpltCallback>
 80053b4:	bf00      	nop
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <I2C_MasterReceive_RXNE>:
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b22      	cmp	r3, #34	; 0x22
 80053ce:	f040 80ac 	bne.w	800552a <I2C_MasterReceive_RXNE+0x16e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d921      	bls.n	8005424 <I2C_MasterReceive_RXNE+0x68>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	625a      	str	r2, [r3, #36]	; 0x24
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b03      	cmp	r3, #3
 800540e:	f040 808c 	bne.w	800552a <I2C_MasterReceive_RXNE+0x16e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005420:	605a      	str	r2, [r3, #4]
 8005422:	e082      	b.n	800552a <I2C_MasterReceive_RXNE+0x16e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	2b02      	cmp	r3, #2
 800542a:	d075      	beq.n	8005518 <I2C_MasterReceive_RXNE+0x15c>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d002      	beq.n	8005438 <I2C_MasterReceive_RXNE+0x7c>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d16f      	bne.n	8005518 <I2C_MasterReceive_RXNE+0x15c>
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 f827 	bl	800648c <I2C_WaitOnSTOPRequestThroughIT>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d142      	bne.n	80054ca <I2C_MasterReceive_RXNE+0x10e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	625a      	str	r2, [r3, #36]	; 0x24
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	855a      	strh	r2, [r3, #42]	; 0x2a
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b40      	cmp	r3, #64	; 0x40
 800549c:	d10a      	bne.n	80054b4 <I2C_MasterReceive_RXNE+0xf8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff fdc1 	bl	8005034 <HAL_I2C_MemRxCpltCallback>
 80054b2:	e03a      	b.n	800552a <I2C_MasterReceive_RXNE+0x16e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2212      	movs	r2, #18
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff fd76 	bl	8004fb4 <HAL_I2C_MasterRxCpltCallback>
 80054c8:	e02f      	b.n	800552a <I2C_MasterReceive_RXNE+0x16e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054d8:	605a      	str	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	625a      	str	r2, [r3, #36]	; 0x24
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7ff fd99 	bl	8005048 <HAL_I2C_ErrorCallback>
 8005516:	e008      	b.n	800552a <I2C_MasterReceive_RXNE+0x16e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005526:	605a      	str	r2, [r3, #4]
 8005528:	e7ff      	b.n	800552a <I2C_MasterReceive_RXNE+0x16e>
 800552a:	bf00      	nop
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <I2C_MasterReceive_BTF>:
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b04      	cmp	r3, #4
 8005548:	d11b      	bne.n	8005582 <I2C_MasterReceive_BTF+0x50>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	625a      	str	r2, [r3, #36]	; 0x24
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005580:	e0bd      	b.n	80056fe <I2C_MasterReceive_BTF+0x1cc>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b03      	cmp	r3, #3
 800558a:	d129      	bne.n	80055e0 <I2C_MasterReceive_BTF+0xae>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800559a:	605a      	str	r2, [r3, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d00a      	beq.n	80055b8 <I2C_MasterReceive_BTF+0x86>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d007      	beq.n	80055b8 <I2C_MasterReceive_BTF+0x86>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055de:	e08e      	b.n	80056fe <I2C_MasterReceive_BTF+0x1cc>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d176      	bne.n	80056d8 <I2C_MasterReceive_BTF+0x1a6>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d002      	beq.n	80055f6 <I2C_MasterReceive_BTF+0xc4>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b10      	cmp	r3, #16
 80055f4:	d108      	bne.n	8005608 <I2C_MasterReceive_BTF+0xd6>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	e019      	b.n	800563c <I2C_MasterReceive_BTF+0x10a>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b04      	cmp	r3, #4
 800560c:	d002      	beq.n	8005614 <I2C_MasterReceive_BTF+0xe2>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b02      	cmp	r3, #2
 8005612:	d108      	bne.n	8005626 <I2C_MasterReceive_BTF+0xf4>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	e00a      	b.n	800563c <I2C_MasterReceive_BTF+0x10a>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b10      	cmp	r3, #16
 800562a:	d007      	beq.n	800563c <I2C_MasterReceive_BTF+0x10a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691a      	ldr	r2, [r3, #16]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	625a      	str	r2, [r3, #36]	; 0x24
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	701a      	strb	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	625a      	str	r2, [r3, #36]	; 0x24
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005696:	605a      	str	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b40      	cmp	r3, #64	; 0x40
 80056aa:	d10a      	bne.n	80056c2 <I2C_MasterReceive_BTF+0x190>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff fcba 	bl	8005034 <HAL_I2C_MemRxCpltCallback>
 80056c0:	e01d      	b.n	80056fe <I2C_MasterReceive_BTF+0x1cc>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2212      	movs	r2, #18
 80056ce:	631a      	str	r2, [r3, #48]	; 0x30
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff fc6f 	bl	8004fb4 <HAL_I2C_MasterRxCpltCallback>
 80056d6:	e012      	b.n	80056fe <I2C_MasterReceive_BTF+0x1cc>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	b2d2      	uxtb	r2, r2
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	625a      	str	r2, [r3, #36]	; 0x24
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <I2C_Master_SB>:
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b40      	cmp	r3, #64	; 0x40
 8005718:	d117      	bne.n	800574a <I2C_Master_SB+0x44>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <I2C_Master_SB+0x30>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005732:	611a      	str	r2, [r3, #16]
 8005734:	e067      	b.n	8005806 <I2C_Master_SB+0x100>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573a:	b2db      	uxtb	r3, r3
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	b2da      	uxtb	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	611a      	str	r2, [r3, #16]
 8005748:	e05d      	b.n	8005806 <I2C_Master_SB+0x100>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005752:	d133      	bne.n	80057bc <I2C_Master_SB+0xb6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b21      	cmp	r3, #33	; 0x21
 800575e:	d109      	bne.n	8005774 <I2C_Master_SB+0x6e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005764:	b2db      	uxtb	r3, r3
 8005766:	461a      	mov	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005770:	611a      	str	r2, [r3, #16]
 8005772:	e008      	b.n	8005786 <I2C_Master_SB+0x80>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005778:	b2db      	uxtb	r3, r3
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	b2da      	uxtb	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	611a      	str	r2, [r3, #16]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578a:	2b00      	cmp	r3, #0
 800578c:	d004      	beq.n	8005798 <I2C_Master_SB+0x92>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d108      	bne.n	80057aa <I2C_Master_SB+0xa4>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	2b00      	cmp	r3, #0
 800579e:	d032      	beq.n	8005806 <I2C_Master_SB+0x100>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d02d      	beq.n	8005806 <I2C_Master_SB+0x100>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057b8:	605a      	str	r2, [r3, #4]
 80057ba:	e024      	b.n	8005806 <I2C_Master_SB+0x100>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10e      	bne.n	80057e2 <I2C_Master_SB+0xdc>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	11db      	asrs	r3, r3, #7
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	f003 0306 	and.w	r3, r3, #6
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f063 030f 	orn	r3, r3, #15
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	611a      	str	r2, [r3, #16]
 80057e0:	e011      	b.n	8005806 <I2C_Master_SB+0x100>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d10d      	bne.n	8005806 <I2C_Master_SB+0x100>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	11db      	asrs	r3, r3, #7
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f003 0306 	and.w	r3, r3, #6
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	f063 030e 	orn	r3, r3, #14
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	611a      	str	r2, [r3, #16]
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <I2C_Master_ADD10>:
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581e:	b2da      	uxtb	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	611a      	str	r2, [r3, #16]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582a:	2b00      	cmp	r3, #0
 800582c:	d004      	beq.n	8005838 <I2C_Master_ADD10+0x26>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005834:	2b00      	cmp	r3, #0
 8005836:	d108      	bne.n	800584a <I2C_Master_ADD10+0x38>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00c      	beq.n	800585a <I2C_Master_ADD10+0x48>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	2b00      	cmp	r3, #0
 8005848:	d007      	beq.n	800585a <I2C_Master_ADD10+0x48>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005858:	605a      	str	r2, [r3, #4]
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <I2C_Master_ADDR>:
 8005866:	b480      	push	{r7}
 8005868:	b091      	sub	sp, #68	; 0x44
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005874:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	63bb      	str	r3, [r7, #56]	; 0x38
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b22      	cmp	r3, #34	; 0x22
 800588e:	f040 8169 	bne.w	8005b64 <I2C_Master_ADDR+0x2fe>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10f      	bne.n	80058ba <I2C_Master_ADDR+0x54>
 800589a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800589e:	2b40      	cmp	r3, #64	; 0x40
 80058a0:	d10b      	bne.n	80058ba <I2C_Master_ADDR+0x54>
 80058a2:	2300      	movs	r3, #0
 80058a4:	633b      	str	r3, [r7, #48]	; 0x30
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	633b      	str	r3, [r7, #48]	; 0x30
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	633b      	str	r3, [r7, #48]	; 0x30
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	e160      	b.n	8005b7c <I2C_Master_ADDR+0x316>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d11d      	bne.n	80058fe <I2C_Master_ADDR+0x98>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058ca:	d118      	bne.n	80058fe <I2C_Master_ADDR+0x98>
 80058cc:	2300      	movs	r3, #0
 80058ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	651a      	str	r2, [r3, #80]	; 0x50
 80058fc:	e13e      	b.n	8005b7c <I2C_Master_ADDR+0x316>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005902:	b29b      	uxth	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d113      	bne.n	8005930 <I2C_Master_ADDR+0xca>
 8005908:	2300      	movs	r3, #0
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	e115      	b.n	8005b5c <I2C_Master_ADDR+0x2f6>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b01      	cmp	r3, #1
 8005938:	f040 808a 	bne.w	8005a50 <I2C_Master_ADDR+0x1ea>
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005942:	d137      	bne.n	80059b4 <I2C_Master_ADDR+0x14e>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800595e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005962:	d113      	bne.n	800598c <I2C_Master_ADDR+0x126>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	2300      	movs	r3, #0
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	e0e7      	b.n	8005b5c <I2C_Master_ADDR+0x2f6>
 800598c:	2300      	movs	r3, #0
 800598e:	623b      	str	r3, [r7, #32]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	623b      	str	r3, [r7, #32]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	623b      	str	r3, [r7, #32]
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	e0d3      	b.n	8005b5c <I2C_Master_ADDR+0x2f6>
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d02e      	beq.n	8005a18 <I2C_Master_ADDR+0x1b2>
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d02b      	beq.n	8005a18 <I2C_Master_ADDR+0x1b2>
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	2b12      	cmp	r3, #18
 80059c4:	d102      	bne.n	80059cc <I2C_Master_ADDR+0x166>
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d125      	bne.n	8005a18 <I2C_Master_ADDR+0x1b2>
 80059cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d00e      	beq.n	80059f0 <I2C_Master_ADDR+0x18a>
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d00b      	beq.n	80059f0 <I2C_Master_ADDR+0x18a>
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	2b10      	cmp	r3, #16
 80059dc:	d008      	beq.n	80059f0 <I2C_Master_ADDR+0x18a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	e007      	b.n	8005a00 <I2C_Master_ADDR+0x19a>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	2300      	movs	r3, #0
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	61fb      	str	r3, [r7, #28]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	e0a1      	b.n	8005b5c <I2C_Master_ADDR+0x2f6>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	61bb      	str	r3, [r7, #24]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	61bb      	str	r3, [r7, #24]
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	e085      	b.n	8005b5c <I2C_Master_ADDR+0x2f6>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d14d      	bne.n	8005af6 <I2C_Master_ADDR+0x290>
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d016      	beq.n	8005a8e <I2C_Master_ADDR+0x228>
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d013      	beq.n	8005a8e <I2C_Master_ADDR+0x228>
 8005a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a68:	2b10      	cmp	r3, #16
 8005a6a:	d010      	beq.n	8005a8e <I2C_Master_ADDR+0x228>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	e007      	b.n	8005a9e <I2C_Master_ADDR+0x238>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aac:	d117      	bne.n	8005ade <I2C_Master_ADDR+0x278>
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ab4:	d00b      	beq.n	8005ace <I2C_Master_ADDR+0x268>
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d008      	beq.n	8005ace <I2C_Master_ADDR+0x268>
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d005      	beq.n	8005ace <I2C_Master_ADDR+0x268>
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	2b10      	cmp	r3, #16
 8005ac6:	d002      	beq.n	8005ace <I2C_Master_ADDR+0x268>
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d107      	bne.n	8005ade <I2C_Master_ADDR+0x278>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005adc:	605a      	str	r2, [r3, #4]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	e032      	b.n	8005b5c <I2C_Master_ADDR+0x2f6>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b14:	d117      	bne.n	8005b46 <I2C_Master_ADDR+0x2e0>
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b1c:	d00b      	beq.n	8005b36 <I2C_Master_ADDR+0x2d0>
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d008      	beq.n	8005b36 <I2C_Master_ADDR+0x2d0>
 8005b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d005      	beq.n	8005b36 <I2C_Master_ADDR+0x2d0>
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	2b10      	cmp	r3, #16
 8005b2e:	d002      	beq.n	8005b36 <I2C_Master_ADDR+0x2d0>
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d107      	bne.n	8005b46 <I2C_Master_ADDR+0x2e0>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b44:	605a      	str	r2, [r3, #4]
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	613b      	str	r3, [r7, #16]
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	651a      	str	r2, [r3, #80]	; 0x50
 8005b62:	e00b      	b.n	8005b7c <I2C_Master_ADDR+0x316>
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	e7ff      	b.n	8005b7c <I2C_Master_ADDR+0x316>
 8005b7c:	bf00      	nop
 8005b7e:	3744      	adds	r7, #68	; 0x44
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <I2C_SlaveTransmit_TXE>:
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b96:	73fb      	strb	r3, [r7, #15]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d02b      	beq.n	8005bfa <I2C_SlaveTransmit_TXE+0x72>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	781a      	ldrb	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	611a      	str	r2, [r3, #16]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	625a      	str	r2, [r3, #36]	; 0x24
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d114      	bne.n	8005bfa <I2C_SlaveTransmit_TXE+0x72>
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	2b29      	cmp	r3, #41	; 0x29
 8005bd4:	d111      	bne.n	8005bfa <I2C_SlaveTransmit_TXE+0x72>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2221      	movs	r2, #33	; 0x21
 8005bea:	631a      	str	r2, [r3, #48]	; 0x30
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2228      	movs	r2, #40	; 0x28
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff f9e7 	bl	8004fc8 <HAL_I2C_SlaveTxCpltCallback>
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <I2C_SlaveTransmit_BTF>:
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d011      	beq.n	8005c38 <I2C_SlaveTransmit_BTF+0x36>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	781a      	ldrb	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	611a      	str	r2, [r3, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <I2C_SlaveReceive_RXNE>:
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c52:	73fb      	strb	r3, [r7, #15]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d02c      	beq.n	8005cb8 <I2C_SlaveReceive_RXNE+0x74>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691a      	ldr	r2, [r3, #16]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	625a      	str	r2, [r3, #36]	; 0x24
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d114      	bne.n	8005cb8 <I2C_SlaveReceive_RXNE+0x74>
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	2b2a      	cmp	r3, #42	; 0x2a
 8005c92:	d111      	bne.n	8005cb8 <I2C_SlaveReceive_RXNE+0x74>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca2:	605a      	str	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2222      	movs	r2, #34	; 0x22
 8005ca8:	631a      	str	r2, [r3, #48]	; 0x30
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2228      	movs	r2, #40	; 0x28
 8005cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff f992 	bl	8004fdc <HAL_I2C_SlaveRxCpltCallback>
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <I2C_SlaveReceive_BTF>:
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d012      	beq.n	8005cf8 <I2C_SlaveReceive_BTF+0x38>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691a      	ldr	r2, [r3, #16]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	701a      	strb	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <I2C_Slave_ADDR>:
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	73fb      	strb	r3, [r7, #15]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d1e:	2b28      	cmp	r3, #40	; 0x28
 8005d20:	d127      	bne.n	8005d72 <I2C_Slave_ADDR+0x6e>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	089b      	lsrs	r3, r3, #2
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <I2C_Slave_ADDR+0x3e>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	73fb      	strb	r3, [r7, #15]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	09db      	lsrs	r3, r3, #7
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d103      	bne.n	8005d56 <I2C_Slave_ADDR+0x52>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	81bb      	strh	r3, [r7, #12]
 8005d54:	e002      	b.n	8005d5c <I2C_Slave_ADDR+0x58>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	81bb      	strh	r3, [r7, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d64:	89ba      	ldrh	r2, [r7, #12]
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7ff f940 	bl	8004ff0 <HAL_I2C_AddrCallback>
 8005d70:	e00e      	b.n	8005d90 <I2C_Slave_ADDR+0x8c>
 8005d72:	2300      	movs	r3, #0
 8005d74:	60bb      	str	r3, [r7, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	60bb      	str	r3, [r7, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	60bb      	str	r3, [r7, #8]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d90:	bf00      	nop
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <I2C_Slave_STOPF>:
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da6:	73fb      	strb	r3, [r7, #15]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005db6:	605a      	str	r2, [r3, #4]
 8005db8:	2300      	movs	r3, #0
 8005dba:	60bb      	str	r3, [r7, #8]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	60bb      	str	r3, [r7, #8]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df4:	d172      	bne.n	8005edc <I2C_Slave_STOPF+0x144>
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
 8005df8:	2b22      	cmp	r3, #34	; 0x22
 8005dfa:	d002      	beq.n	8005e02 <I2C_Slave_STOPF+0x6a>
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8005e00:	d135      	bne.n	8005e6e <I2C_Slave_STOPF+0xd6>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <I2C_Slave_STOPF+0x8e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f043 0204 	orr.w	r2, r3, #4
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	641a      	str	r2, [r3, #64]	; 0x40
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e34:	605a      	str	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe fac3 	bl	80043c6 <HAL_DMA_GetState>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d049      	beq.n	8005eda <I2C_Slave_STOPF+0x142>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4a:	4a69      	ldr	r2, [pc, #420]	; (8005ff0 <I2C_Slave_STOPF+0x258>)
 8005e4c:	651a      	str	r2, [r3, #80]	; 0x50
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe fa95 	bl	8004382 <HAL_DMA_Abort_IT>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d03d      	beq.n	8005eda <I2C_Slave_STOPF+0x142>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4798      	blx	r3
 8005e6c:	e035      	b.n	8005eda <I2C_Slave_STOPF+0x142>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <I2C_Slave_STOPF+0xfa>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	f043 0204 	orr.w	r2, r3, #4
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	641a      	str	r2, [r3, #64]	; 0x40
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ea0:	605a      	str	r2, [r3, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fa8d 	bl	80043c6 <HAL_DMA_GetState>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d014      	beq.n	8005edc <I2C_Slave_STOPF+0x144>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb6:	4a4e      	ldr	r2, [pc, #312]	; (8005ff0 <I2C_Slave_STOPF+0x258>)
 8005eb8:	651a      	str	r2, [r3, #80]	; 0x50
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fe fa5f 	bl	8004382 <HAL_DMA_Abort_IT>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d008      	beq.n	8005edc <I2C_Slave_STOPF+0x144>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	4798      	blx	r3
 8005ed8:	e000      	b.n	8005edc <I2C_Slave_STOPF+0x144>
 8005eda:	bf00      	nop
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d03e      	beq.n	8005f64 <I2C_Slave_STOPF+0x1cc>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d112      	bne.n	8005f1a <I2C_Slave_STOPF+0x182>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	701a      	strb	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	625a      	str	r2, [r3, #36]	; 0x24
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b40      	cmp	r3, #64	; 0x40
 8005f26:	d112      	bne.n	8005f4e <I2C_Slave_STOPF+0x1b6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	625a      	str	r2, [r3, #36]	; 0x24
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <I2C_Slave_STOPF+0x1cc>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	f043 0204 	orr.w	r2, r3, #4
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	641a      	str	r2, [r3, #64]	; 0x40
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <I2C_Slave_STOPF+0x1dc>
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f8b3 	bl	80060d8 <I2C_ITError>
 8005f72:	e039      	b.n	8005fe8 <I2C_Slave_STOPF+0x250>
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b2a      	cmp	r3, #42	; 0x2a
 8005f78:	d109      	bne.n	8005f8e <I2C_Slave_STOPF+0x1f6>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2228      	movs	r2, #40	; 0x28
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff f827 	bl	8004fdc <HAL_I2C_SlaveRxCpltCallback>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b28      	cmp	r3, #40	; 0x28
 8005f98:	d111      	bne.n	8005fbe <I2C_Slave_STOPF+0x226>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a15      	ldr	r2, [pc, #84]	; (8005ff4 <I2C_Slave_STOPF+0x25c>)
 8005f9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff f828 	bl	800500c <HAL_I2C_ListenCpltCallback>
 8005fbc:	e014      	b.n	8005fe8 <I2C_Slave_STOPF+0x250>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	2b22      	cmp	r3, #34	; 0x22
 8005fc4:	d002      	beq.n	8005fcc <I2C_Slave_STOPF+0x234>
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	2b22      	cmp	r3, #34	; 0x22
 8005fca:	d10d      	bne.n	8005fe8 <I2C_Slave_STOPF+0x250>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fe fffa 	bl	8004fdc <HAL_I2C_SlaveRxCpltCallback>
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	0800633d 	.word	0x0800633d
 8005ff4:	ffff0000 	.word	0xffff0000

08005ff8 <I2C_Slave_AF>:
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006006:	73fb      	strb	r3, [r7, #15]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b08      	cmp	r3, #8
 8006012:	d002      	beq.n	800601a <I2C_Slave_AF+0x22>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b20      	cmp	r3, #32
 8006018:	d129      	bne.n	800606e <I2C_Slave_AF+0x76>
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	2b28      	cmp	r3, #40	; 0x28
 800601e:	d126      	bne.n	800606e <I2C_Slave_AF+0x76>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a2c      	ldr	r2, [pc, #176]	; (80060d4 <I2C_Slave_AF+0xdc>)
 8006024:	62da      	str	r2, [r3, #44]	; 0x2c
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800603e:	615a      	str	r2, [r3, #20]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	; 0x30
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fe ffd0 	bl	800500c <HAL_I2C_ListenCpltCallback>
 800606c:	e02e      	b.n	80060cc <I2C_Slave_AF+0xd4>
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	2b21      	cmp	r3, #33	; 0x21
 8006072:	d126      	bne.n	80060c2 <I2C_Slave_AF+0xca>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a17      	ldr	r2, [pc, #92]	; (80060d4 <I2C_Slave_AF+0xdc>)
 8006078:	62da      	str	r2, [r3, #44]	; 0x2c
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2221      	movs	r2, #33	; 0x21
 800607e:	631a      	str	r2, [r3, #48]	; 0x30
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800609e:	605a      	str	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060a8:	615a      	str	r2, [r3, #20]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fe ff84 	bl	8004fc8 <HAL_I2C_SlaveTxCpltCallback>
 80060c0:	e004      	b.n	80060cc <I2C_Slave_AF+0xd4>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060ca:	615a      	str	r2, [r3, #20]
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	ffff0000 	.word	0xffff0000

080060d8 <I2C_ITError>:
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e6:	73fb      	strb	r3, [r7, #15]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060ee:	73bb      	strb	r3, [r7, #14]
 80060f0:	7bbb      	ldrb	r3, [r7, #14]
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d002      	beq.n	80060fc <I2C_ITError+0x24>
 80060f6:	7bbb      	ldrb	r3, [r7, #14]
 80060f8:	2b40      	cmp	r3, #64	; 0x40
 80060fa:	d10a      	bne.n	8006112 <I2C_ITError+0x3a>
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	2b22      	cmp	r3, #34	; 0x22
 8006100:	d107      	bne.n	8006112 <I2C_ITError+0x3a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006118:	2b28      	cmp	r3, #40	; 0x28
 800611a:	d107      	bne.n	800612c <I2C_ITError+0x54>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	631a      	str	r2, [r3, #48]	; 0x30
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2228      	movs	r2, #40	; 0x28
 8006126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800612a:	e015      	b.n	8006158 <I2C_ITError+0x80>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800613a:	d00a      	beq.n	8006152 <I2C_ITError+0x7a>
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	2b60      	cmp	r3, #96	; 0x60
 8006140:	d007      	beq.n	8006152 <I2C_ITError+0x7a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	631a      	str	r2, [r3, #48]	; 0x30
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006166:	d162      	bne.n	800622e <I2C_ITError+0x156>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006176:	605a      	str	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b01      	cmp	r3, #1
 8006184:	d020      	beq.n	80061c8 <I2C_ITError+0xf0>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618a:	4a6a      	ldr	r2, [pc, #424]	; (8006334 <I2C_ITError+0x25c>)
 800618c:	651a      	str	r2, [r3, #80]	; 0x50
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe f8f5 	bl	8004382 <HAL_DMA_Abort_IT>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 8089 	beq.w	80062b2 <I2C_ITError+0x1da>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0201 	bic.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061c2:	4610      	mov	r0, r2
 80061c4:	4798      	blx	r3
 80061c6:	e074      	b.n	80062b2 <I2C_ITError+0x1da>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	4a59      	ldr	r2, [pc, #356]	; (8006334 <I2C_ITError+0x25c>)
 80061ce:	651a      	str	r2, [r3, #80]	; 0x50
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fe f8d4 	bl	8004382 <HAL_DMA_Abort_IT>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d068      	beq.n	80062b2 <I2C_ITError+0x1da>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	d10b      	bne.n	8006206 <I2C_ITError+0x12e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	625a      	str	r2, [r3, #36]	; 0x24
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0201 	bic.w	r2, r2, #1
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
 800622c:	e041      	b.n	80062b2 <I2C_ITError+0x1da>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b60      	cmp	r3, #96	; 0x60
 8006238:	d125      	bne.n	8006286 <I2C_ITError+0x1ae>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	641a      	str	r2, [r3, #64]	; 0x40
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	d10b      	bne.n	800626e <I2C_ITError+0x196>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	625a      	str	r2, [r3, #36]	; 0x24
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0201 	bic.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fe feec 	bl	800505c <HAL_I2C_AbortCpltCallback>
 8006284:	e015      	b.n	80062b2 <I2C_ITError+0x1da>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b40      	cmp	r3, #64	; 0x40
 8006292:	d10b      	bne.n	80062ac <I2C_ITError+0x1d4>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	625a      	str	r2, [r3, #36]	; 0x24
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7fe fecb 	bl	8005048 <HAL_I2C_ErrorCallback>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	60bb      	str	r3, [r7, #8]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10e      	bne.n	80062e0 <I2C_ITError+0x208>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <I2C_ITError+0x208>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d104      	bne.n	80062e0 <I2C_ITError+0x208>
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <I2C_ITError+0x218>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062ee:	605a      	str	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f6:	73fb      	strb	r3, [r7, #15]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b04      	cmp	r3, #4
 8006302:	d113      	bne.n	800632c <I2C_ITError+0x254>
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	2b28      	cmp	r3, #40	; 0x28
 8006308:	d110      	bne.n	800632c <I2C_ITError+0x254>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a0a      	ldr	r2, [pc, #40]	; (8006338 <I2C_ITError+0x260>)
 800630e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	631a      	str	r2, [r3, #48]	; 0x30
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fe fe70 	bl	800500c <HAL_I2C_ListenCpltCallback>
 800632c:	bf00      	nop
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	0800633d 	.word	0x0800633d
 8006338:	ffff0000 	.word	0xffff0000

0800633c <I2C_DMAAbort>:
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	2300      	movs	r3, #0
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006354:	74fb      	strb	r3, [r7, #19]
 8006356:	4b4b      	ldr	r3, [pc, #300]	; (8006484 <I2C_DMAAbort+0x148>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	08db      	lsrs	r3, r3, #3
 800635c:	4a4a      	ldr	r2, [pc, #296]	; (8006488 <I2C_DMAAbort+0x14c>)
 800635e:	fba2 2303 	umull	r2, r3, r2, r3
 8006362:	0a1a      	lsrs	r2, r3, #8
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	00da      	lsls	r2, r3, #3
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <I2C_DMAAbort+0x48>
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	f043 0220 	orr.w	r2, r3, #32
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	641a      	str	r2, [r3, #64]	; 0x40
 8006382:	e00a      	b.n	800639a <I2C_DMAAbort+0x5e>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3b01      	subs	r3, #1
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006398:	d0ea      	beq.n	8006370 <I2C_DMAAbort+0x34>
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <I2C_DMAAbort+0x6e>
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a6:	2200      	movs	r2, #0
 80063a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <I2C_DMAAbort+0x7e>
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b6:	2200      	movs	r2, #0
 80063b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2200      	movs	r2, #0
 80063ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <I2C_DMAAbort+0xa4>
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063dc:	2200      	movs	r2, #0
 80063de:	651a      	str	r2, [r3, #80]	; 0x50
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <I2C_DMAAbort+0xb4>
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	2200      	movs	r2, #0
 80063ee:	651a      	str	r2, [r3, #80]	; 0x50
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0201 	bic.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b60      	cmp	r3, #96	; 0x60
 800640a:	d10e      	bne.n	800642a <I2C_DMAAbort+0xee>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2200      	movs	r2, #0
 8006420:	641a      	str	r2, [r3, #64]	; 0x40
 8006422:	6978      	ldr	r0, [r7, #20]
 8006424:	f7fe fe1a 	bl	800505c <HAL_I2C_AbortCpltCallback>
 8006428:	e027      	b.n	800647a <I2C_DMAAbort+0x13e>
 800642a:	7cfb      	ldrb	r3, [r7, #19]
 800642c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006430:	2b28      	cmp	r3, #40	; 0x28
 8006432:	d117      	bne.n	8006464 <I2C_DMAAbort+0x128>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0201 	orr.w	r2, r2, #1
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2200      	movs	r2, #0
 8006458:	631a      	str	r2, [r3, #48]	; 0x30
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2228      	movs	r2, #40	; 0x28
 800645e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006462:	e007      	b.n	8006474 <I2C_DMAAbort+0x138>
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006474:	6978      	ldr	r0, [r7, #20]
 8006476:	f7fe fde7 	bl	8005048 <HAL_I2C_ErrorCallback>
 800647a:	bf00      	nop
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	20000004 	.word	0x20000004
 8006488:	14f8b589 	.word	0x14f8b589

0800648c <I2C_WaitOnSTOPRequestThroughIT>:
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	4b13      	ldr	r3, [pc, #76]	; (80064e8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	08db      	lsrs	r3, r3, #3
 800649e:	4a13      	ldr	r2, [pc, #76]	; (80064ec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80064a0:	fba2 2303 	umull	r2, r3, r2, r3
 80064a4:	0a1a      	lsrs	r2, r3, #8
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	3b01      	subs	r3, #1
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d107      	bne.n	80064ca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	f043 0220 	orr.w	r2, r3, #32
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	641a      	str	r2, [r3, #64]	; 0x40
 80064c6:	2301      	movs	r3, #1
 80064c8:	e008      	b.n	80064dc <I2C_WaitOnSTOPRequestThroughIT+0x50>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d8:	d0e9      	beq.n	80064ae <I2C_WaitOnSTOPRequestThroughIT+0x22>
 80064da:	2300      	movs	r3, #0
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	20000004 	.word	0x20000004
 80064ec:	14f8b589 	.word	0x14f8b589

080064f0 <I2C_ConvertOtherXferOptions>:
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006500:	d103      	bne.n	800650a <I2C_ConvertOtherXferOptions+0x1a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	62da      	str	r2, [r3, #44]	; 0x2c
 8006508:	e007      	b.n	800651a <I2C_ConvertOtherXferOptions+0x2a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006512:	d102      	bne.n	800651a <I2C_ConvertOtherXferOptions+0x2a>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2208      	movs	r2, #8
 8006518:	62da      	str	r2, [r3, #44]	; 0x2c
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <HAL_RCC_OscConfig>:
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_RCC_OscConfig+0x12>
 8006536:	2301      	movs	r3, #1
 8006538:	e267      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d075      	beq.n	8006632 <HAL_RCC_OscConfig+0x10a>
 8006546:	4b88      	ldr	r3, [pc, #544]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 030c 	and.w	r3, r3, #12
 800654e:	2b04      	cmp	r3, #4
 8006550:	d00c      	beq.n	800656c <HAL_RCC_OscConfig+0x44>
 8006552:	4b85      	ldr	r3, [pc, #532]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 030c 	and.w	r3, r3, #12
 800655a:	2b08      	cmp	r3, #8
 800655c:	d112      	bne.n	8006584 <HAL_RCC_OscConfig+0x5c>
 800655e:	4b82      	ldr	r3, [pc, #520]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800656a:	d10b      	bne.n	8006584 <HAL_RCC_OscConfig+0x5c>
 800656c:	4b7e      	ldr	r3, [pc, #504]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d05b      	beq.n	8006630 <HAL_RCC_OscConfig+0x108>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d157      	bne.n	8006630 <HAL_RCC_OscConfig+0x108>
 8006580:	2301      	movs	r3, #1
 8006582:	e242      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800658c:	d106      	bne.n	800659c <HAL_RCC_OscConfig+0x74>
 800658e:	4b76      	ldr	r3, [pc, #472]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a75      	ldr	r2, [pc, #468]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 8006594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	e01d      	b.n	80065d8 <HAL_RCC_OscConfig+0xb0>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065a4:	d10c      	bne.n	80065c0 <HAL_RCC_OscConfig+0x98>
 80065a6:	4b70      	ldr	r3, [pc, #448]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a6f      	ldr	r2, [pc, #444]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 80065ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	4b6d      	ldr	r3, [pc, #436]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a6c      	ldr	r2, [pc, #432]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 80065b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	e00b      	b.n	80065d8 <HAL_RCC_OscConfig+0xb0>
 80065c0:	4b69      	ldr	r3, [pc, #420]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a68      	ldr	r2, [pc, #416]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 80065c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	4b66      	ldr	r3, [pc, #408]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a65      	ldr	r2, [pc, #404]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 80065d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d013      	beq.n	8006608 <HAL_RCC_OscConfig+0xe0>
 80065e0:	f7fd fcec 	bl	8003fbc <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]
 80065e6:	e008      	b.n	80065fa <HAL_RCC_OscConfig+0xd2>
 80065e8:	f7fd fce8 	bl	8003fbc <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b64      	cmp	r3, #100	; 0x64
 80065f4:	d901      	bls.n	80065fa <HAL_RCC_OscConfig+0xd2>
 80065f6:	2303      	movs	r3, #3
 80065f8:	e207      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 80065fa:	4b5b      	ldr	r3, [pc, #364]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0f0      	beq.n	80065e8 <HAL_RCC_OscConfig+0xc0>
 8006606:	e014      	b.n	8006632 <HAL_RCC_OscConfig+0x10a>
 8006608:	f7fd fcd8 	bl	8003fbc <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]
 800660e:	e008      	b.n	8006622 <HAL_RCC_OscConfig+0xfa>
 8006610:	f7fd fcd4 	bl	8003fbc <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b64      	cmp	r3, #100	; 0x64
 800661c:	d901      	bls.n	8006622 <HAL_RCC_OscConfig+0xfa>
 800661e:	2303      	movs	r3, #3
 8006620:	e1f3      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 8006622:	4b51      	ldr	r3, [pc, #324]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1f0      	bne.n	8006610 <HAL_RCC_OscConfig+0xe8>
 800662e:	e000      	b.n	8006632 <HAL_RCC_OscConfig+0x10a>
 8006630:	bf00      	nop
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d063      	beq.n	8006706 <HAL_RCC_OscConfig+0x1de>
 800663e:	4b4a      	ldr	r3, [pc, #296]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 030c 	and.w	r3, r3, #12
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00b      	beq.n	8006662 <HAL_RCC_OscConfig+0x13a>
 800664a:	4b47      	ldr	r3, [pc, #284]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 030c 	and.w	r3, r3, #12
 8006652:	2b08      	cmp	r3, #8
 8006654:	d11c      	bne.n	8006690 <HAL_RCC_OscConfig+0x168>
 8006656:	4b44      	ldr	r3, [pc, #272]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d116      	bne.n	8006690 <HAL_RCC_OscConfig+0x168>
 8006662:	4b41      	ldr	r3, [pc, #260]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <HAL_RCC_OscConfig+0x152>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d001      	beq.n	800667a <HAL_RCC_OscConfig+0x152>
 8006676:	2301      	movs	r3, #1
 8006678:	e1c7      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 800667a:	4b3b      	ldr	r3, [pc, #236]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	4937      	ldr	r1, [pc, #220]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 800668a:	4313      	orrs	r3, r2
 800668c:	600b      	str	r3, [r1, #0]
 800668e:	e03a      	b.n	8006706 <HAL_RCC_OscConfig+0x1de>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d020      	beq.n	80066da <HAL_RCC_OscConfig+0x1b2>
 8006698:	4b34      	ldr	r3, [pc, #208]	; (800676c <HAL_RCC_OscConfig+0x244>)
 800669a:	2201      	movs	r2, #1
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	f7fd fc8d 	bl	8003fbc <HAL_GetTick>
 80066a2:	6138      	str	r0, [r7, #16]
 80066a4:	e008      	b.n	80066b8 <HAL_RCC_OscConfig+0x190>
 80066a6:	f7fd fc89 	bl	8003fbc <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCC_OscConfig+0x190>
 80066b4:	2303      	movs	r3, #3
 80066b6:	e1a8      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 80066b8:	4b2b      	ldr	r3, [pc, #172]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0f0      	beq.n	80066a6 <HAL_RCC_OscConfig+0x17e>
 80066c4:	4b28      	ldr	r3, [pc, #160]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	4925      	ldr	r1, [pc, #148]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	600b      	str	r3, [r1, #0]
 80066d8:	e015      	b.n	8006706 <HAL_RCC_OscConfig+0x1de>
 80066da:	4b24      	ldr	r3, [pc, #144]	; (800676c <HAL_RCC_OscConfig+0x244>)
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	f7fd fc6c 	bl	8003fbc <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x1d2>
 80066e8:	f7fd fc68 	bl	8003fbc <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x1d2>
 80066f6:	2303      	movs	r3, #3
 80066f8:	e187      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 80066fa:	4b1b      	ldr	r3, [pc, #108]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f0      	bne.n	80066e8 <HAL_RCC_OscConfig+0x1c0>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d036      	beq.n	8006780 <HAL_RCC_OscConfig+0x258>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d016      	beq.n	8006748 <HAL_RCC_OscConfig+0x220>
 800671a:	4b15      	ldr	r3, [pc, #84]	; (8006770 <HAL_RCC_OscConfig+0x248>)
 800671c:	2201      	movs	r2, #1
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	f7fd fc4c 	bl	8003fbc <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0x212>
 8006728:	f7fd fc48 	bl	8003fbc <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x212>
 8006736:	2303      	movs	r3, #3
 8006738:	e167      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 800673a:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <HAL_RCC_OscConfig+0x240>)
 800673c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0f0      	beq.n	8006728 <HAL_RCC_OscConfig+0x200>
 8006746:	e01b      	b.n	8006780 <HAL_RCC_OscConfig+0x258>
 8006748:	4b09      	ldr	r3, [pc, #36]	; (8006770 <HAL_RCC_OscConfig+0x248>)
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	f7fd fc35 	bl	8003fbc <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]
 8006754:	e00e      	b.n	8006774 <HAL_RCC_OscConfig+0x24c>
 8006756:	f7fd fc31 	bl	8003fbc <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d907      	bls.n	8006774 <HAL_RCC_OscConfig+0x24c>
 8006764:	2303      	movs	r3, #3
 8006766:	e150      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 8006768:	40023800 	.word	0x40023800
 800676c:	42470000 	.word	0x42470000
 8006770:	42470e80 	.word	0x42470e80
 8006774:	4b88      	ldr	r3, [pc, #544]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 8006776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1ea      	bne.n	8006756 <HAL_RCC_OscConfig+0x22e>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 8097 	beq.w	80068bc <HAL_RCC_OscConfig+0x394>
 800678e:	2300      	movs	r3, #0
 8006790:	75fb      	strb	r3, [r7, #23]
 8006792:	4b81      	ldr	r3, [pc, #516]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10f      	bne.n	80067be <HAL_RCC_OscConfig+0x296>
 800679e:	2300      	movs	r3, #0
 80067a0:	60bb      	str	r3, [r7, #8]
 80067a2:	4b7d      	ldr	r3, [pc, #500]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	4a7c      	ldr	r2, [pc, #496]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 80067a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ac:	6413      	str	r3, [r2, #64]	; 0x40
 80067ae:	4b7a      	ldr	r3, [pc, #488]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b6:	60bb      	str	r3, [r7, #8]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2301      	movs	r3, #1
 80067bc:	75fb      	strb	r3, [r7, #23]
 80067be:	4b77      	ldr	r3, [pc, #476]	; (800699c <HAL_RCC_OscConfig+0x474>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d118      	bne.n	80067fc <HAL_RCC_OscConfig+0x2d4>
 80067ca:	4b74      	ldr	r3, [pc, #464]	; (800699c <HAL_RCC_OscConfig+0x474>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a73      	ldr	r2, [pc, #460]	; (800699c <HAL_RCC_OscConfig+0x474>)
 80067d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	f7fd fbf1 	bl	8003fbc <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]
 80067dc:	e008      	b.n	80067f0 <HAL_RCC_OscConfig+0x2c8>
 80067de:	f7fd fbed 	bl	8003fbc <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x2c8>
 80067ec:	2303      	movs	r3, #3
 80067ee:	e10c      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 80067f0:	4b6a      	ldr	r3, [pc, #424]	; (800699c <HAL_RCC_OscConfig+0x474>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0f0      	beq.n	80067de <HAL_RCC_OscConfig+0x2b6>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d106      	bne.n	8006812 <HAL_RCC_OscConfig+0x2ea>
 8006804:	4b64      	ldr	r3, [pc, #400]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006808:	4a63      	ldr	r2, [pc, #396]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	6713      	str	r3, [r2, #112]	; 0x70
 8006810:	e01c      	b.n	800684c <HAL_RCC_OscConfig+0x324>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b05      	cmp	r3, #5
 8006818:	d10c      	bne.n	8006834 <HAL_RCC_OscConfig+0x30c>
 800681a:	4b5f      	ldr	r3, [pc, #380]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 800681c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681e:	4a5e      	ldr	r2, [pc, #376]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 8006820:	f043 0304 	orr.w	r3, r3, #4
 8006824:	6713      	str	r3, [r2, #112]	; 0x70
 8006826:	4b5c      	ldr	r3, [pc, #368]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 8006828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682a:	4a5b      	ldr	r2, [pc, #364]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 800682c:	f043 0301 	orr.w	r3, r3, #1
 8006830:	6713      	str	r3, [r2, #112]	; 0x70
 8006832:	e00b      	b.n	800684c <HAL_RCC_OscConfig+0x324>
 8006834:	4b58      	ldr	r3, [pc, #352]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 8006836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006838:	4a57      	ldr	r2, [pc, #348]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 800683a:	f023 0301 	bic.w	r3, r3, #1
 800683e:	6713      	str	r3, [r2, #112]	; 0x70
 8006840:	4b55      	ldr	r3, [pc, #340]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 8006842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006844:	4a54      	ldr	r2, [pc, #336]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 8006846:	f023 0304 	bic.w	r3, r3, #4
 800684a:	6713      	str	r3, [r2, #112]	; 0x70
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d015      	beq.n	8006880 <HAL_RCC_OscConfig+0x358>
 8006854:	f7fd fbb2 	bl	8003fbc <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]
 800685a:	e00a      	b.n	8006872 <HAL_RCC_OscConfig+0x34a>
 800685c:	f7fd fbae 	bl	8003fbc <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	f241 3288 	movw	r2, #5000	; 0x1388
 800686a:	4293      	cmp	r3, r2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x34a>
 800686e:	2303      	movs	r3, #3
 8006870:	e0cb      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 8006872:	4b49      	ldr	r3, [pc, #292]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0ee      	beq.n	800685c <HAL_RCC_OscConfig+0x334>
 800687e:	e014      	b.n	80068aa <HAL_RCC_OscConfig+0x382>
 8006880:	f7fd fb9c 	bl	8003fbc <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]
 8006886:	e00a      	b.n	800689e <HAL_RCC_OscConfig+0x376>
 8006888:	f7fd fb98 	bl	8003fbc <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	f241 3288 	movw	r2, #5000	; 0x1388
 8006896:	4293      	cmp	r3, r2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x376>
 800689a:	2303      	movs	r3, #3
 800689c:	e0b5      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 800689e:	4b3e      	ldr	r3, [pc, #248]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1ee      	bne.n	8006888 <HAL_RCC_OscConfig+0x360>
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d105      	bne.n	80068bc <HAL_RCC_OscConfig+0x394>
 80068b0:	4b39      	ldr	r3, [pc, #228]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	4a38      	ldr	r2, [pc, #224]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 80068b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ba:	6413      	str	r3, [r2, #64]	; 0x40
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80a1 	beq.w	8006a08 <HAL_RCC_OscConfig+0x4e0>
 80068c6:	4b34      	ldr	r3, [pc, #208]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 030c 	and.w	r3, r3, #12
 80068ce:	2b08      	cmp	r3, #8
 80068d0:	d05c      	beq.n	800698c <HAL_RCC_OscConfig+0x464>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d141      	bne.n	800695e <HAL_RCC_OscConfig+0x436>
 80068da:	4b31      	ldr	r3, [pc, #196]	; (80069a0 <HAL_RCC_OscConfig+0x478>)
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	f7fd fb6c 	bl	8003fbc <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x3d2>
 80068e8:	f7fd fb68 	bl	8003fbc <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x3d2>
 80068f6:	2303      	movs	r3, #3
 80068f8:	e087      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 80068fa:	4b27      	ldr	r3, [pc, #156]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f0      	bne.n	80068e8 <HAL_RCC_OscConfig+0x3c0>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69da      	ldr	r2, [r3, #28]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	019b      	lsls	r3, r3, #6
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691c:	085b      	lsrs	r3, r3, #1
 800691e:	3b01      	subs	r3, #1
 8006920:	041b      	lsls	r3, r3, #16
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	061b      	lsls	r3, r3, #24
 800692a:	491b      	ldr	r1, [pc, #108]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 800692c:	4313      	orrs	r3, r2
 800692e:	604b      	str	r3, [r1, #4]
 8006930:	4b1b      	ldr	r3, [pc, #108]	; (80069a0 <HAL_RCC_OscConfig+0x478>)
 8006932:	2201      	movs	r2, #1
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	f7fd fb41 	bl	8003fbc <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]
 800693c:	e008      	b.n	8006950 <HAL_RCC_OscConfig+0x428>
 800693e:	f7fd fb3d 	bl	8003fbc <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x428>
 800694c:	2303      	movs	r3, #3
 800694e:	e05c      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 8006950:	4b11      	ldr	r3, [pc, #68]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0f0      	beq.n	800693e <HAL_RCC_OscConfig+0x416>
 800695c:	e054      	b.n	8006a08 <HAL_RCC_OscConfig+0x4e0>
 800695e:	4b10      	ldr	r3, [pc, #64]	; (80069a0 <HAL_RCC_OscConfig+0x478>)
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	f7fd fb2a 	bl	8003fbc <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x456>
 800696c:	f7fd fb26 	bl	8003fbc <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x456>
 800697a:	2303      	movs	r3, #3
 800697c:	e045      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 800697e:	4b06      	ldr	r3, [pc, #24]	; (8006998 <HAL_RCC_OscConfig+0x470>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x444>
 800698a:	e03d      	b.n	8006a08 <HAL_RCC_OscConfig+0x4e0>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d107      	bne.n	80069a4 <HAL_RCC_OscConfig+0x47c>
 8006994:	2301      	movs	r3, #1
 8006996:	e038      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 8006998:	40023800 	.word	0x40023800
 800699c:	40007000 	.word	0x40007000
 80069a0:	42470060 	.word	0x42470060
 80069a4:	4b1b      	ldr	r3, [pc, #108]	; (8006a14 <HAL_RCC_OscConfig+0x4ec>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d028      	beq.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d121      	bne.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d11a      	bne.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069d4:	4013      	ands	r3, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069da:	0192      	lsls	r2, r2, #6
 80069dc:	4293      	cmp	r3, r2
 80069de:	d111      	bne.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	3b01      	subs	r3, #1
 80069ee:	041b      	lsls	r3, r3, #16
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d107      	bne.n	8006a04 <HAL_RCC_OscConfig+0x4dc>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fe:	061b      	lsls	r3, r3, #24
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d001      	beq.n	8006a08 <HAL_RCC_OscConfig+0x4e0>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <HAL_RCC_OscConfig+0x4e2>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40023800 	.word	0x40023800

08006a18 <HAL_RCC_ClockConfig>:
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <HAL_RCC_ClockConfig+0x14>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e0cc      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
 8006a2c:	4b68      	ldr	r3, [pc, #416]	; (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d90c      	bls.n	8006a54 <HAL_RCC_ClockConfig+0x3c>
 8006a3a:	4b65      	ldr	r3, [pc, #404]	; (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	4b63      	ldr	r3, [pc, #396]	; (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d001      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x3c>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e0b8      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d020      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0x8a>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x60>
 8006a6c:	4b59      	ldr	r3, [pc, #356]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	4a58      	ldr	r2, [pc, #352]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a76:	6093      	str	r3, [r2, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d005      	beq.n	8006a90 <HAL_RCC_ClockConfig+0x78>
 8006a84:	4b53      	ldr	r3, [pc, #332]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	4a52      	ldr	r2, [pc, #328]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a8e:	6093      	str	r3, [r2, #8]
 8006a90:	4b50      	ldr	r3, [pc, #320]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	494d      	ldr	r1, [pc, #308]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	608b      	str	r3, [r1, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d044      	beq.n	8006b38 <HAL_RCC_ClockConfig+0x120>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d107      	bne.n	8006ac6 <HAL_RCC_ClockConfig+0xae>
 8006ab6:	4b47      	ldr	r3, [pc, #284]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d119      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xde>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e07f      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d003      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0xbe>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d107      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0xce>
 8006ad6:	4b3f      	ldr	r3, [pc, #252]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d109      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xde>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e06f      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
 8006ae6:	4b3b      	ldr	r3, [pc, #236]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xde>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e067      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
 8006af6:	4b37      	ldr	r3, [pc, #220]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f023 0203 	bic.w	r2, r3, #3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	4934      	ldr	r1, [pc, #208]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	608b      	str	r3, [r1, #8]
 8006b08:	f7fd fa58 	bl	8003fbc <HAL_GetTick>
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	e00a      	b.n	8006b26 <HAL_RCC_ClockConfig+0x10e>
 8006b10:	f7fd fa54 	bl	8003fbc <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_ClockConfig+0x10e>
 8006b22:	2303      	movs	r3, #3
 8006b24:	e04f      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
 8006b26:	4b2b      	ldr	r3, [pc, #172]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 020c 	and.w	r2, r3, #12
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d1eb      	bne.n	8006b10 <HAL_RCC_ClockConfig+0xf8>
 8006b38:	4b25      	ldr	r3, [pc, #148]	; (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d20c      	bcs.n	8006b60 <HAL_RCC_ClockConfig+0x148>
 8006b46:	4b22      	ldr	r3, [pc, #136]	; (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	4b20      	ldr	r3, [pc, #128]	; (8006bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d001      	beq.n	8006b60 <HAL_RCC_ClockConfig+0x148>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e032      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x1ae>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_RCC_ClockConfig+0x166>
 8006b6c:	4b19      	ldr	r3, [pc, #100]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	4916      	ldr	r1, [pc, #88]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	608b      	str	r3, [r1, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0308 	and.w	r3, r3, #8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x186>
 8006b8a:	4b12      	ldr	r3, [pc, #72]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	490e      	ldr	r1, [pc, #56]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	608b      	str	r3, [r1, #8]
 8006b9e:	f000 f821 	bl	8006be4 <HAL_RCC_GetSysClockFreq>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	4b0b      	ldr	r3, [pc, #44]	; (8006bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	091b      	lsrs	r3, r3, #4
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	490a      	ldr	r1, [pc, #40]	; (8006bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8006bb0:	5ccb      	ldrb	r3, [r1, r3]
 8006bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb6:	4a09      	ldr	r2, [pc, #36]	; (8006bdc <HAL_RCC_ClockConfig+0x1c4>)
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <HAL_RCC_ClockConfig+0x1c8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fd f9b8 	bl	8003f34 <HAL_InitTick>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	40023c00 	.word	0x40023c00
 8006bd4:	40023800 	.word	0x40023800
 8006bd8:	0800d3b8 	.word	0x0800d3b8
 8006bdc:	20000004 	.word	0x20000004
 8006be0:	20000008 	.word	0x20000008

08006be4 <HAL_RCC_GetSysClockFreq>:
 8006be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be8:	b090      	sub	sp, #64	; 0x40
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	2300      	movs	r3, #0
 8006bee:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bfc:	4b59      	ldr	r3, [pc, #356]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f003 030c 	and.w	r3, r3, #12
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d00d      	beq.n	8006c24 <HAL_RCC_GetSysClockFreq+0x40>
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	f200 80a1 	bhi.w	8006d50 <HAL_RCC_GetSysClockFreq+0x16c>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d002      	beq.n	8006c18 <HAL_RCC_GetSysClockFreq+0x34>
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d003      	beq.n	8006c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8006c16:	e09b      	b.n	8006d50 <HAL_RCC_GetSysClockFreq+0x16c>
 8006c18:	4b53      	ldr	r3, [pc, #332]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x184>)
 8006c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c1c:	e09b      	b.n	8006d56 <HAL_RCC_GetSysClockFreq+0x172>
 8006c1e:	4b53      	ldr	r3, [pc, #332]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8006c20:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c22:	e098      	b.n	8006d56 <HAL_RCC_GetSysClockFreq+0x172>
 8006c24:	4b4f      	ldr	r3, [pc, #316]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2e:	4b4d      	ldr	r3, [pc, #308]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d028      	beq.n	8006c8c <HAL_RCC_GetSysClockFreq+0xa8>
 8006c3a:	4b4a      	ldr	r3, [pc, #296]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	099b      	lsrs	r3, r3, #6
 8006c40:	2200      	movs	r2, #0
 8006c42:	623b      	str	r3, [r7, #32]
 8006c44:	627a      	str	r2, [r7, #36]	; 0x24
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4b47      	ldr	r3, [pc, #284]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8006c50:	fb03 f201 	mul.w	r2, r3, r1
 8006c54:	2300      	movs	r3, #0
 8006c56:	fb00 f303 	mul.w	r3, r0, r3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	4a43      	ldr	r2, [pc, #268]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8006c5e:	fba0 1202 	umull	r1, r2, r0, r2
 8006c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c64:	460a      	mov	r2, r1
 8006c66:	62ba      	str	r2, [r7, #40]	; 0x28
 8006c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c6a:	4413      	add	r3, r2
 8006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c70:	2200      	movs	r2, #0
 8006c72:	61bb      	str	r3, [r7, #24]
 8006c74:	61fa      	str	r2, [r7, #28]
 8006c76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006c7e:	f7f9 ffeb 	bl	8000c58 <__aeabi_uldivmod>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4613      	mov	r3, r2
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c8a:	e053      	b.n	8006d34 <HAL_RCC_GetSysClockFreq+0x150>
 8006c8c:	4b35      	ldr	r3, [pc, #212]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	099b      	lsrs	r3, r3, #6
 8006c92:	2200      	movs	r2, #0
 8006c94:	613b      	str	r3, [r7, #16]
 8006c96:	617a      	str	r2, [r7, #20]
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006c9e:	f04f 0b00 	mov.w	fp, #0
 8006ca2:	4652      	mov	r2, sl
 8006ca4:	465b      	mov	r3, fp
 8006ca6:	f04f 0000 	mov.w	r0, #0
 8006caa:	f04f 0100 	mov.w	r1, #0
 8006cae:	0159      	lsls	r1, r3, #5
 8006cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cb4:	0150      	lsls	r0, r2, #5
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	ebb2 080a 	subs.w	r8, r2, sl
 8006cbe:	eb63 090b 	sbc.w	r9, r3, fp
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006cce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006cd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006cd6:	ebb2 0408 	subs.w	r4, r2, r8
 8006cda:	eb63 0509 	sbc.w	r5, r3, r9
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	00eb      	lsls	r3, r5, #3
 8006ce8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cec:	00e2      	lsls	r2, r4, #3
 8006cee:	4614      	mov	r4, r2
 8006cf0:	461d      	mov	r5, r3
 8006cf2:	eb14 030a 	adds.w	r3, r4, sl
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	eb45 030b 	adc.w	r3, r5, fp
 8006cfc:	607b      	str	r3, [r7, #4]
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	028b      	lsls	r3, r1, #10
 8006d0e:	4621      	mov	r1, r4
 8006d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d14:	4621      	mov	r1, r4
 8006d16:	028a      	lsls	r2, r1, #10
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1e:	2200      	movs	r2, #0
 8006d20:	60bb      	str	r3, [r7, #8]
 8006d22:	60fa      	str	r2, [r7, #12]
 8006d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d28:	f7f9 ff96 	bl	8000c58 <__aeabi_uldivmod>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4613      	mov	r3, r2
 8006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d34:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	0c1b      	lsrs	r3, r3, #16
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	3301      	adds	r3, #1
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	633b      	str	r3, [r7, #48]	; 0x30
 8006d44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d4e:	e002      	b.n	8006d56 <HAL_RCC_GetSysClockFreq+0x172>
 8006d50:	4b05      	ldr	r3, [pc, #20]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d54:	bf00      	nop
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3740      	adds	r7, #64	; 0x40
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d62:	bf00      	nop
 8006d64:	40023800 	.word	0x40023800
 8006d68:	00f42400 	.word	0x00f42400
 8006d6c:	017d7840 	.word	0x017d7840

08006d70 <HAL_RCC_GetHCLKFreq>:
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	4b03      	ldr	r3, [pc, #12]	; (8006d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20000004 	.word	0x20000004

08006d88 <HAL_RCC_GetPCLK1Freq>:
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	f7ff fff0 	bl	8006d70 <HAL_RCC_GetHCLKFreq>
 8006d90:	4602      	mov	r2, r0
 8006d92:	4b05      	ldr	r3, [pc, #20]	; (8006da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	0a9b      	lsrs	r3, r3, #10
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	4903      	ldr	r1, [pc, #12]	; (8006dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d9e:	5ccb      	ldrb	r3, [r1, r3]
 8006da0:	fa22 f303 	lsr.w	r3, r2, r3
 8006da4:	4618      	mov	r0, r3
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	40023800 	.word	0x40023800
 8006dac:	0800d3c8 	.word	0x0800d3c8

08006db0 <HAL_RCC_GetPCLK2Freq>:
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	f7ff ffdc 	bl	8006d70 <HAL_RCC_GetHCLKFreq>
 8006db8:	4602      	mov	r2, r0
 8006dba:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	0b5b      	lsrs	r3, r3, #13
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	4903      	ldr	r1, [pc, #12]	; (8006dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dc6:	5ccb      	ldrb	r3, [r1, r3]
 8006dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dcc:	4618      	mov	r0, r3
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	0800d3c8 	.word	0x0800d3c8

08006dd8 <HAL_TIM_Base_Init>:
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_TIM_Base_Init+0x12>
 8006de6:	2301      	movs	r3, #1
 8006de8:	e041      	b.n	8006e6e <HAL_TIM_Base_Init+0x96>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <HAL_TIM_Base_Init+0x2c>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fc fd2e 	bl	8003860 <HAL_TIM_Base_MspInit>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3304      	adds	r3, #4
 8006e14:	4619      	mov	r1, r3
 8006e16:	4610      	mov	r0, r2
 8006e18:	f000 fd7e 	bl	8007918 <TIM_Base_SetConfig>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <HAL_TIM_Base_Start_IT>:
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d001      	beq.n	8006e90 <HAL_TIM_Base_Start_IT+0x18>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e044      	b.n	8006f1a <HAL_TIM_Base_Start_IT+0xa2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0201 	orr.w	r2, r2, #1
 8006ea6:	60da      	str	r2, [r3, #12]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a1e      	ldr	r2, [pc, #120]	; (8006f28 <HAL_TIM_Base_Start_IT+0xb0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d018      	beq.n	8006ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eba:	d013      	beq.n	8006ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a1a      	ldr	r2, [pc, #104]	; (8006f2c <HAL_TIM_Base_Start_IT+0xb4>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d00e      	beq.n	8006ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a19      	ldr	r2, [pc, #100]	; (8006f30 <HAL_TIM_Base_Start_IT+0xb8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d009      	beq.n	8006ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a17      	ldr	r2, [pc, #92]	; (8006f34 <HAL_TIM_Base_Start_IT+0xbc>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d004      	beq.n	8006ee4 <HAL_TIM_Base_Start_IT+0x6c>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a16      	ldr	r2, [pc, #88]	; (8006f38 <HAL_TIM_Base_Start_IT+0xc0>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d111      	bne.n	8006f08 <HAL_TIM_Base_Start_IT+0x90>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2b06      	cmp	r3, #6
 8006ef4:	d010      	beq.n	8006f18 <HAL_TIM_Base_Start_IT+0xa0>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0201 	orr.w	r2, r2, #1
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	e007      	b.n	8006f18 <HAL_TIM_Base_Start_IT+0xa0>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0201 	orr.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	40010000 	.word	0x40010000
 8006f2c:	40000400 	.word	0x40000400
 8006f30:	40000800 	.word	0x40000800
 8006f34:	40000c00 	.word	0x40000c00
 8006f38:	40014000 	.word	0x40014000

08006f3c <HAL_TIM_PWM_Init>:
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_TIM_PWM_Init+0x12>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e041      	b.n	8006fd2 <HAL_TIM_PWM_Init+0x96>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d106      	bne.n	8006f68 <HAL_TIM_PWM_Init+0x2c>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fc fd56 	bl	8003a14 <HAL_TIM_PWM_MspInit>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3304      	adds	r3, #4
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	f000 fccc 	bl	8007918 <TIM_Base_SetConfig>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <HAL_TIM_PWM_Start>:
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d109      	bne.n	8007000 <HAL_TIM_PWM_Start+0x24>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	bf14      	ite	ne
 8006ff8:	2301      	movne	r3, #1
 8006ffa:	2300      	moveq	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	e022      	b.n	8007046 <HAL_TIM_PWM_Start+0x6a>
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2b04      	cmp	r3, #4
 8007004:	d109      	bne.n	800701a <HAL_TIM_PWM_Start+0x3e>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b01      	cmp	r3, #1
 8007010:	bf14      	ite	ne
 8007012:	2301      	movne	r3, #1
 8007014:	2300      	moveq	r3, #0
 8007016:	b2db      	uxtb	r3, r3
 8007018:	e015      	b.n	8007046 <HAL_TIM_PWM_Start+0x6a>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b08      	cmp	r3, #8
 800701e:	d109      	bne.n	8007034 <HAL_TIM_PWM_Start+0x58>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b01      	cmp	r3, #1
 800702a:	bf14      	ite	ne
 800702c:	2301      	movne	r3, #1
 800702e:	2300      	moveq	r3, #0
 8007030:	b2db      	uxtb	r3, r3
 8007032:	e008      	b.n	8007046 <HAL_TIM_PWM_Start+0x6a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b01      	cmp	r3, #1
 800703e:	bf14      	ite	ne
 8007040:	2301      	movne	r3, #1
 8007042:	2300      	moveq	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <HAL_TIM_PWM_Start+0x72>
 800704a:	2301      	movs	r3, #1
 800704c:	e068      	b.n	8007120 <HAL_TIM_PWM_Start+0x144>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <HAL_TIM_PWM_Start+0x82>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800705c:	e013      	b.n	8007086 <HAL_TIM_PWM_Start+0xaa>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b04      	cmp	r3, #4
 8007062:	d104      	bne.n	800706e <HAL_TIM_PWM_Start+0x92>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800706c:	e00b      	b.n	8007086 <HAL_TIM_PWM_Start+0xaa>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b08      	cmp	r3, #8
 8007072:	d104      	bne.n	800707e <HAL_TIM_PWM_Start+0xa2>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800707c:	e003      	b.n	8007086 <HAL_TIM_PWM_Start+0xaa>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2201      	movs	r2, #1
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fee8 	bl	8007e64 <TIM_CCxChannelCmd>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a23      	ldr	r2, [pc, #140]	; (8007128 <HAL_TIM_PWM_Start+0x14c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d107      	bne.n	80070ae <HAL_TIM_PWM_Start+0xd2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070ac:	645a      	str	r2, [r3, #68]	; 0x44
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1d      	ldr	r2, [pc, #116]	; (8007128 <HAL_TIM_PWM_Start+0x14c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d018      	beq.n	80070ea <HAL_TIM_PWM_Start+0x10e>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c0:	d013      	beq.n	80070ea <HAL_TIM_PWM_Start+0x10e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a19      	ldr	r2, [pc, #100]	; (800712c <HAL_TIM_PWM_Start+0x150>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00e      	beq.n	80070ea <HAL_TIM_PWM_Start+0x10e>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a17      	ldr	r2, [pc, #92]	; (8007130 <HAL_TIM_PWM_Start+0x154>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d009      	beq.n	80070ea <HAL_TIM_PWM_Start+0x10e>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a16      	ldr	r2, [pc, #88]	; (8007134 <HAL_TIM_PWM_Start+0x158>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d004      	beq.n	80070ea <HAL_TIM_PWM_Start+0x10e>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a14      	ldr	r2, [pc, #80]	; (8007138 <HAL_TIM_PWM_Start+0x15c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d111      	bne.n	800710e <HAL_TIM_PWM_Start+0x132>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b06      	cmp	r3, #6
 80070fa:	d010      	beq.n	800711e <HAL_TIM_PWM_Start+0x142>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f042 0201 	orr.w	r2, r2, #1
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	e007      	b.n	800711e <HAL_TIM_PWM_Start+0x142>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0201 	orr.w	r2, r2, #1
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	2300      	movs	r3, #0
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40010000 	.word	0x40010000
 800712c:	40000400 	.word	0x40000400
 8007130:	40000800 	.word	0x40000800
 8007134:	40000c00 	.word	0x40000c00
 8007138:	40014000 	.word	0x40014000

0800713c <HAL_TIM_Encoder_Init>:
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <HAL_TIM_Encoder_Init+0x14>
 800714c:	2301      	movs	r3, #1
 800714e:	e097      	b.n	8007280 <HAL_TIM_Encoder_Init+0x144>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d106      	bne.n	800716a <HAL_TIM_Encoder_Init+0x2e>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7fc fbbb 	bl	80038e0 <HAL_TIM_Encoder_MspInit>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2202      	movs	r2, #2
 800716e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6812      	ldr	r2, [r2, #0]
 800717c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007180:	f023 0307 	bic.w	r3, r3, #7
 8007184:	6093      	str	r3, [r2, #8]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3304      	adds	r3, #4
 800718e:	4619      	mov	r1, r3
 8007190:	4610      	mov	r0, r2
 8007192:	f000 fbc1 	bl	8007918 <TIM_Base_SetConfig>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	617b      	str	r3, [r7, #20]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	613b      	str	r3, [r7, #16]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071be:	f023 0303 	bic.w	r3, r3, #3
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	021b      	lsls	r3, r3, #8
 80071ce:	4313      	orrs	r3, r2
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80071dc:	f023 030c 	bic.w	r3, r3, #12
 80071e0:	613b      	str	r3, [r7, #16]
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ec:	613b      	str	r3, [r7, #16]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	021b      	lsls	r3, r3, #8
 80071f8:	4313      	orrs	r3, r2
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	011a      	lsls	r2, r3, #4
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	031b      	lsls	r3, r3, #12
 800720c:	4313      	orrs	r3, r2
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	4313      	orrs	r3, r2
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	011b      	lsls	r3, r3, #4
 800722e:	4313      	orrs	r3, r2
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	609a      	str	r2, [r3, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	619a      	str	r2, [r3, #24]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	621a      	str	r2, [r3, #32]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800727e:	2300      	movs	r3, #0
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_TIM_Encoder_Start>:
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007298:	73fb      	strb	r3, [r7, #15]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072a0:	73bb      	strb	r3, [r7, #14]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072a8:	737b      	strb	r3, [r7, #13]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072b0:	733b      	strb	r3, [r7, #12]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d110      	bne.n	80072da <HAL_TIM_Encoder_Start+0x52>
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d102      	bne.n	80072c4 <HAL_TIM_Encoder_Start+0x3c>
 80072be:	7b7b      	ldrb	r3, [r7, #13]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d001      	beq.n	80072c8 <HAL_TIM_Encoder_Start+0x40>
 80072c4:	2301      	movs	r3, #1
 80072c6:	e069      	b.n	800739c <HAL_TIM_Encoder_Start+0x114>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072d8:	e031      	b.n	800733e <HAL_TIM_Encoder_Start+0xb6>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d110      	bne.n	8007302 <HAL_TIM_Encoder_Start+0x7a>
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d102      	bne.n	80072ec <HAL_TIM_Encoder_Start+0x64>
 80072e6:	7b3b      	ldrb	r3, [r7, #12]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d001      	beq.n	80072f0 <HAL_TIM_Encoder_Start+0x68>
 80072ec:	2301      	movs	r3, #1
 80072ee:	e055      	b.n	800739c <HAL_TIM_Encoder_Start+0x114>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007300:	e01d      	b.n	800733e <HAL_TIM_Encoder_Start+0xb6>
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d108      	bne.n	800731a <HAL_TIM_Encoder_Start+0x92>
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d105      	bne.n	800731a <HAL_TIM_Encoder_Start+0x92>
 800730e:	7b7b      	ldrb	r3, [r7, #13]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d102      	bne.n	800731a <HAL_TIM_Encoder_Start+0x92>
 8007314:	7b3b      	ldrb	r3, [r7, #12]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d001      	beq.n	800731e <HAL_TIM_Encoder_Start+0x96>
 800731a:	2301      	movs	r3, #1
 800731c:	e03e      	b.n	800739c <HAL_TIM_Encoder_Start+0x114>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2202      	movs	r2, #2
 8007322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2202      	movs	r2, #2
 800732a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2202      	movs	r2, #2
 8007332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2202      	movs	r2, #2
 800733a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d003      	beq.n	800734c <HAL_TIM_Encoder_Start+0xc4>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2b04      	cmp	r3, #4
 8007348:	d008      	beq.n	800735c <HAL_TIM_Encoder_Start+0xd4>
 800734a:	e00f      	b.n	800736c <HAL_TIM_Encoder_Start+0xe4>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2201      	movs	r2, #1
 8007352:	2100      	movs	r1, #0
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fd85 	bl	8007e64 <TIM_CCxChannelCmd>
 800735a:	e016      	b.n	800738a <HAL_TIM_Encoder_Start+0x102>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2201      	movs	r2, #1
 8007362:	2104      	movs	r1, #4
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fd7d 	bl	8007e64 <TIM_CCxChannelCmd>
 800736a:	e00e      	b.n	800738a <HAL_TIM_Encoder_Start+0x102>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2201      	movs	r2, #1
 8007372:	2100      	movs	r1, #0
 8007374:	4618      	mov	r0, r3
 8007376:	f000 fd75 	bl	8007e64 <TIM_CCxChannelCmd>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2201      	movs	r2, #1
 8007380:	2104      	movs	r1, #4
 8007382:	4618      	mov	r0, r3
 8007384:	f000 fd6e 	bl	8007e64 <TIM_CCxChannelCmd>
 8007388:	bf00      	nop
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f042 0201 	orr.w	r2, r2, #1
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	2300      	movs	r3, #0
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_TIM_IRQHandler>:
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d122      	bne.n	8007400 <HAL_TIM_IRQHandler+0x5c>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d11b      	bne.n	8007400 <HAL_TIM_IRQHandler+0x5c>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f06f 0202 	mvn.w	r2, #2
 80073d0:	611a      	str	r2, [r3, #16]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	771a      	strb	r2, [r3, #28]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_TIM_IRQHandler+0x4a>
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fa77 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 80073ec:	e005      	b.n	80073fa <HAL_TIM_IRQHandler+0x56>
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fa69 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fa7a 	bl	80078ee <HAL_TIM_PWM_PulseFinishedCallback>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	771a      	strb	r2, [r3, #28]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f003 0304 	and.w	r3, r3, #4
 800740a:	2b04      	cmp	r3, #4
 800740c:	d122      	bne.n	8007454 <HAL_TIM_IRQHandler+0xb0>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b04      	cmp	r3, #4
 800741a:	d11b      	bne.n	8007454 <HAL_TIM_IRQHandler+0xb0>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f06f 0204 	mvn.w	r2, #4
 8007424:	611a      	str	r2, [r3, #16]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2202      	movs	r2, #2
 800742a:	771a      	strb	r2, [r3, #28]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <HAL_TIM_IRQHandler+0x9e>
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fa4d 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 8007440:	e005      	b.n	800744e <HAL_TIM_IRQHandler+0xaa>
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fa3f 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fa50 	bl	80078ee <HAL_TIM_PWM_PulseFinishedCallback>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	771a      	strb	r2, [r3, #28]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	2b08      	cmp	r3, #8
 8007460:	d122      	bne.n	80074a8 <HAL_TIM_IRQHandler+0x104>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b08      	cmp	r3, #8
 800746e:	d11b      	bne.n	80074a8 <HAL_TIM_IRQHandler+0x104>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0208 	mvn.w	r2, #8
 8007478:	611a      	str	r2, [r3, #16]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2204      	movs	r2, #4
 800747e:	771a      	strb	r2, [r3, #28]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	f003 0303 	and.w	r3, r3, #3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <HAL_TIM_IRQHandler+0xf2>
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa23 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 8007494:	e005      	b.n	80074a2 <HAL_TIM_IRQHandler+0xfe>
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fa15 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fa26 	bl	80078ee <HAL_TIM_PWM_PulseFinishedCallback>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	771a      	strb	r2, [r3, #28]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	f003 0310 	and.w	r3, r3, #16
 80074b2:	2b10      	cmp	r3, #16
 80074b4:	d122      	bne.n	80074fc <HAL_TIM_IRQHandler+0x158>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f003 0310 	and.w	r3, r3, #16
 80074c0:	2b10      	cmp	r3, #16
 80074c2:	d11b      	bne.n	80074fc <HAL_TIM_IRQHandler+0x158>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f06f 0210 	mvn.w	r2, #16
 80074cc:	611a      	str	r2, [r3, #16]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2208      	movs	r2, #8
 80074d2:	771a      	strb	r2, [r3, #28]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_TIM_IRQHandler+0x146>
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f9f9 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 80074e8:	e005      	b.n	80074f6 <HAL_TIM_IRQHandler+0x152>
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f9eb 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f9fc 	bl	80078ee <HAL_TIM_PWM_PulseFinishedCallback>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	771a      	strb	r2, [r3, #28]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b01      	cmp	r3, #1
 8007508:	d10e      	bne.n	8007528 <HAL_TIM_IRQHandler+0x184>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	2b01      	cmp	r3, #1
 8007516:	d107      	bne.n	8007528 <HAL_TIM_IRQHandler+0x184>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f06f 0201 	mvn.w	r2, #1
 8007520:	611a      	str	r2, [r3, #16]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fa fdc0 	bl	80020a8 <HAL_TIM_PeriodElapsedCallback>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007532:	2b80      	cmp	r3, #128	; 0x80
 8007534:	d10e      	bne.n	8007554 <HAL_TIM_IRQHandler+0x1b0>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007540:	2b80      	cmp	r3, #128	; 0x80
 8007542:	d107      	bne.n	8007554 <HAL_TIM_IRQHandler+0x1b0>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800754c:	611a      	str	r2, [r3, #16]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fd26 	bl	8007fa0 <HAL_TIMEx_BreakCallback>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d10e      	bne.n	8007580 <HAL_TIM_IRQHandler+0x1dc>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756c:	2b40      	cmp	r3, #64	; 0x40
 800756e:	d107      	bne.n	8007580 <HAL_TIM_IRQHandler+0x1dc>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007578:	611a      	str	r2, [r3, #16]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f9c1 	bl	8007902 <HAL_TIM_TriggerCallback>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b20      	cmp	r3, #32
 800758c:	d10e      	bne.n	80075ac <HAL_TIM_IRQHandler+0x208>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f003 0320 	and.w	r3, r3, #32
 8007598:	2b20      	cmp	r3, #32
 800759a:	d107      	bne.n	80075ac <HAL_TIM_IRQHandler+0x208>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f06f 0220 	mvn.w	r2, #32
 80075a4:	611a      	str	r2, [r3, #16]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fcf0 	bl	8007f8c <HAL_TIMEx_CommutCallback>
 80075ac:	bf00      	nop
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_TIM_PWM_ConfigChannel>:
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	2300      	movs	r3, #0
 80075c2:	75fb      	strb	r3, [r7, #23]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d101      	bne.n	80075d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075ce:	2302      	movs	r3, #2
 80075d0:	e0ae      	b.n	8007730 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b0c      	cmp	r3, #12
 80075de:	f200 809f 	bhi.w	8007720 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80075e2:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	0800761d 	.word	0x0800761d
 80075ec:	08007721 	.word	0x08007721
 80075f0:	08007721 	.word	0x08007721
 80075f4:	08007721 	.word	0x08007721
 80075f8:	0800765d 	.word	0x0800765d
 80075fc:	08007721 	.word	0x08007721
 8007600:	08007721 	.word	0x08007721
 8007604:	08007721 	.word	0x08007721
 8007608:	0800769f 	.word	0x0800769f
 800760c:	08007721 	.word	0x08007721
 8007610:	08007721 	.word	0x08007721
 8007614:	08007721 	.word	0x08007721
 8007618:	080076df 	.word	0x080076df
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	4618      	mov	r0, r3
 8007624:	f000 f9f8 	bl	8007a18 <TIM_OC1_SetConfig>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0208 	orr.w	r2, r2, #8
 8007636:	619a      	str	r2, [r3, #24]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699a      	ldr	r2, [r3, #24]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0204 	bic.w	r2, r2, #4
 8007646:	619a      	str	r2, [r3, #24]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6999      	ldr	r1, [r3, #24]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	691a      	ldr	r2, [r3, #16]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	619a      	str	r2, [r3, #24]
 800765a:	e064      	b.n	8007726 <HAL_TIM_PWM_ConfigChannel+0x172>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fa3e 	bl	8007ae4 <TIM_OC2_SetConfig>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007676:	619a      	str	r2, [r3, #24]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007686:	619a      	str	r2, [r3, #24]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6999      	ldr	r1, [r3, #24]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	021a      	lsls	r2, r3, #8
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	619a      	str	r2, [r3, #24]
 800769c:	e043      	b.n	8007726 <HAL_TIM_PWM_ConfigChannel+0x172>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68b9      	ldr	r1, [r7, #8]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 fa89 	bl	8007bbc <TIM_OC3_SetConfig>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69da      	ldr	r2, [r3, #28]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f042 0208 	orr.w	r2, r2, #8
 80076b8:	61da      	str	r2, [r3, #28]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69da      	ldr	r2, [r3, #28]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f022 0204 	bic.w	r2, r2, #4
 80076c8:	61da      	str	r2, [r3, #28]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69d9      	ldr	r1, [r3, #28]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	691a      	ldr	r2, [r3, #16]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	61da      	str	r2, [r3, #28]
 80076dc:	e023      	b.n	8007726 <HAL_TIM_PWM_ConfigChannel+0x172>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68b9      	ldr	r1, [r7, #8]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 fad3 	bl	8007c90 <TIM_OC4_SetConfig>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076f8:	61da      	str	r2, [r3, #28]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69da      	ldr	r2, [r3, #28]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007708:	61da      	str	r2, [r3, #28]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69d9      	ldr	r1, [r3, #28]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	021a      	lsls	r2, r3, #8
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	61da      	str	r2, [r3, #28]
 800771e:	e002      	b.n	8007726 <HAL_TIM_PWM_ConfigChannel+0x172>
 8007720:	2301      	movs	r3, #1
 8007722:	75fb      	strb	r3, [r7, #23]
 8007724:	bf00      	nop
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_TIM_ConfigClockSource>:
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_TIM_ConfigClockSource+0x1c>
 8007750:	2302      	movs	r3, #2
 8007752:	e0b4      	b.n	80078be <HAL_TIM_ConfigClockSource+0x186>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	60bb      	str	r3, [r7, #8]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007772:	60bb      	str	r3, [r7, #8]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800777a:	60bb      	str	r3, [r7, #8]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	609a      	str	r2, [r3, #8]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800778c:	d03e      	beq.n	800780c <HAL_TIM_ConfigClockSource+0xd4>
 800778e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007792:	f200 8087 	bhi.w	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 8007796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800779a:	f000 8086 	beq.w	80078aa <HAL_TIM_ConfigClockSource+0x172>
 800779e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077a2:	d87f      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077a4:	2b70      	cmp	r3, #112	; 0x70
 80077a6:	d01a      	beq.n	80077de <HAL_TIM_ConfigClockSource+0xa6>
 80077a8:	2b70      	cmp	r3, #112	; 0x70
 80077aa:	d87b      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077ac:	2b60      	cmp	r3, #96	; 0x60
 80077ae:	d050      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x11a>
 80077b0:	2b60      	cmp	r3, #96	; 0x60
 80077b2:	d877      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077b4:	2b50      	cmp	r3, #80	; 0x50
 80077b6:	d03c      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0xfa>
 80077b8:	2b50      	cmp	r3, #80	; 0x50
 80077ba:	d873      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077bc:	2b40      	cmp	r3, #64	; 0x40
 80077be:	d058      	beq.n	8007872 <HAL_TIM_ConfigClockSource+0x13a>
 80077c0:	2b40      	cmp	r3, #64	; 0x40
 80077c2:	d86f      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077c4:	2b30      	cmp	r3, #48	; 0x30
 80077c6:	d064      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x15a>
 80077c8:	2b30      	cmp	r3, #48	; 0x30
 80077ca:	d86b      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d060      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x15a>
 80077d0:	2b20      	cmp	r3, #32
 80077d2:	d867      	bhi.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d05c      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x15a>
 80077d8:	2b10      	cmp	r3, #16
 80077da:	d05a      	beq.n	8007892 <HAL_TIM_ConfigClockSource+0x15a>
 80077dc:	e062      	b.n	80078a4 <HAL_TIM_ConfigClockSource+0x16c>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	6899      	ldr	r1, [r3, #8]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f000 fb19 	bl	8007e24 <TIM_ETR_SetConfig>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	60bb      	str	r3, [r7, #8]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007800:	60bb      	str	r3, [r7, #8]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	609a      	str	r2, [r3, #8]
 800780a:	e04f      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	6899      	ldr	r1, [r3, #8]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f000 fb02 	bl	8007e24 <TIM_ETR_SetConfig>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800782e:	609a      	str	r2, [r3, #8]
 8007830:	e03c      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6818      	ldr	r0, [r3, #0]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	6859      	ldr	r1, [r3, #4]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	461a      	mov	r2, r3
 8007840:	f000 fa76 	bl	8007d30 <TIM_TI1_ConfigInputStage>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2150      	movs	r1, #80	; 0x50
 800784a:	4618      	mov	r0, r3
 800784c:	f000 facf 	bl	8007dee <TIM_ITRx_SetConfig>
 8007850:	e02c      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6818      	ldr	r0, [r3, #0]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	6859      	ldr	r1, [r3, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	461a      	mov	r2, r3
 8007860:	f000 fa95 	bl	8007d8e <TIM_TI2_ConfigInputStage>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2160      	movs	r1, #96	; 0x60
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fabf 	bl	8007dee <TIM_ITRx_SetConfig>
 8007870:	e01c      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6818      	ldr	r0, [r3, #0]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	6859      	ldr	r1, [r3, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	461a      	mov	r2, r3
 8007880:	f000 fa56 	bl	8007d30 <TIM_TI1_ConfigInputStage>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2140      	movs	r1, #64	; 0x40
 800788a:	4618      	mov	r0, r3
 800788c:	f000 faaf 	bl	8007dee <TIM_ITRx_SetConfig>
 8007890:	e00c      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4619      	mov	r1, r3
 800789c:	4610      	mov	r0, r2
 800789e:	f000 faa6 	bl	8007dee <TIM_ITRx_SetConfig>
 80078a2:	e003      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
 80078a4:	2301      	movs	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
 80078a8:	e000      	b.n	80078ac <HAL_TIM_ConfigClockSource+0x174>
 80078aa:	bf00      	nop
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <HAL_TIM_OC_DelayElapsedCallback>:
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <HAL_TIM_IC_CaptureCallback>:
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <HAL_TIM_PWM_PulseFinishedCallback>:
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	bf00      	nop
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <HAL_TIM_TriggerCallback>:
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	bf00      	nop
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
	...

08007918 <TIM_Base_SetConfig>:
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a34      	ldr	r2, [pc, #208]	; (80079fc <TIM_Base_SetConfig+0xe4>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00f      	beq.n	8007950 <TIM_Base_SetConfig+0x38>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007936:	d00b      	beq.n	8007950 <TIM_Base_SetConfig+0x38>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a31      	ldr	r2, [pc, #196]	; (8007a00 <TIM_Base_SetConfig+0xe8>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d007      	beq.n	8007950 <TIM_Base_SetConfig+0x38>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a30      	ldr	r2, [pc, #192]	; (8007a04 <TIM_Base_SetConfig+0xec>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d003      	beq.n	8007950 <TIM_Base_SetConfig+0x38>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a2f      	ldr	r2, [pc, #188]	; (8007a08 <TIM_Base_SetConfig+0xf0>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d108      	bne.n	8007962 <TIM_Base_SetConfig+0x4a>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a25      	ldr	r2, [pc, #148]	; (80079fc <TIM_Base_SetConfig+0xe4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d01b      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007970:	d017      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a22      	ldr	r2, [pc, #136]	; (8007a00 <TIM_Base_SetConfig+0xe8>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d013      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a21      	ldr	r2, [pc, #132]	; (8007a04 <TIM_Base_SetConfig+0xec>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00f      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a20      	ldr	r2, [pc, #128]	; (8007a08 <TIM_Base_SetConfig+0xf0>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00b      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a1f      	ldr	r2, [pc, #124]	; (8007a0c <TIM_Base_SetConfig+0xf4>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d007      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a1e      	ldr	r2, [pc, #120]	; (8007a10 <TIM_Base_SetConfig+0xf8>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d003      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1d      	ldr	r2, [pc, #116]	; (8007a14 <TIM_Base_SetConfig+0xfc>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d108      	bne.n	80079b4 <TIM_Base_SetConfig+0x9c>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079a8:	60fb      	str	r3, [r7, #12]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	629a      	str	r2, [r3, #40]	; 0x28
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a08      	ldr	r2, [pc, #32]	; (80079fc <TIM_Base_SetConfig+0xe4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d103      	bne.n	80079e8 <TIM_Base_SetConfig+0xd0>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	691a      	ldr	r2, [r3, #16]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	631a      	str	r2, [r3, #48]	; 0x30
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	615a      	str	r2, [r3, #20]
 80079ee:	bf00      	nop
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	40010000 	.word	0x40010000
 8007a00:	40000400 	.word	0x40000400
 8007a04:	40000800 	.word	0x40000800
 8007a08:	40000c00 	.word	0x40000c00
 8007a0c:	40014000 	.word	0x40014000
 8007a10:	40014400 	.word	0x40014400
 8007a14:	40014800 	.word	0x40014800

08007a18 <TIM_OC1_SetConfig>:
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f023 0201 	bic.w	r2, r3, #1
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	621a      	str	r2, [r3, #32]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	613b      	str	r3, [r7, #16]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	60fb      	str	r3, [r7, #12]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f023 0302 	bic.w	r3, r3, #2
 8007a60:	617b      	str	r3, [r7, #20]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ae0 <TIM_OC1_SetConfig+0xc8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d10c      	bne.n	8007a8e <TIM_OC1_SetConfig+0x76>
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f023 0308 	bic.w	r3, r3, #8
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f023 0304 	bic.w	r3, r3, #4
 8007a8c:	617b      	str	r3, [r7, #20]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a13      	ldr	r2, [pc, #76]	; (8007ae0 <TIM_OC1_SetConfig+0xc8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d111      	bne.n	8007aba <TIM_OC1_SetConfig+0xa2>
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a9c:	613b      	str	r3, [r7, #16]
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007aa4:	613b      	str	r3, [r7, #16]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	613b      	str	r3, [r7, #16]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	605a      	str	r2, [r3, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	619a      	str	r2, [r3, #24]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	635a      	str	r2, [r3, #52]	; 0x34
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	621a      	str	r2, [r3, #32]
 8007ad4:	bf00      	nop
 8007ad6:	371c      	adds	r7, #28
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	40010000 	.word	0x40010000

08007ae4 <TIM_OC2_SetConfig>:
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	f023 0210 	bic.w	r2, r3, #16
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	621a      	str	r2, [r3, #32]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	613b      	str	r3, [r7, #16]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	021b      	lsls	r3, r3, #8
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f023 0320 	bic.w	r3, r3, #32
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a1e      	ldr	r2, [pc, #120]	; (8007bb8 <TIM_OC2_SetConfig+0xd4>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d10d      	bne.n	8007b60 <TIM_OC2_SetConfig+0x7c>
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a15      	ldr	r2, [pc, #84]	; (8007bb8 <TIM_OC2_SetConfig+0xd4>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d113      	bne.n	8007b90 <TIM_OC2_SetConfig+0xac>
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b6e:	613b      	str	r3, [r7, #16]
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b76:	613b      	str	r3, [r7, #16]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	605a      	str	r2, [r3, #4]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	619a      	str	r2, [r3, #24]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	639a      	str	r2, [r3, #56]	; 0x38
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	621a      	str	r2, [r3, #32]
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	40010000 	.word	0x40010000

08007bbc <TIM_OC3_SetConfig>:
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	621a      	str	r2, [r3, #32]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	613b      	str	r3, [r7, #16]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c04:	617b      	str	r3, [r7, #20]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a1d      	ldr	r2, [pc, #116]	; (8007c8c <TIM_OC3_SetConfig+0xd0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d10d      	bne.n	8007c36 <TIM_OC3_SetConfig+0x7a>
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a14      	ldr	r2, [pc, #80]	; (8007c8c <TIM_OC3_SetConfig+0xd0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d113      	bne.n	8007c66 <TIM_OC3_SetConfig+0xaa>
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c44:	613b      	str	r3, [r7, #16]
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c4c:	613b      	str	r3, [r7, #16]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	613b      	str	r3, [r7, #16]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	605a      	str	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	61da      	str	r2, [r3, #28]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	63da      	str	r2, [r3, #60]	; 0x3c
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	621a      	str	r2, [r3, #32]
 8007c80:	bf00      	nop
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	40010000 	.word	0x40010000

08007c90 <TIM_OC4_SetConfig>:
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	621a      	str	r2, [r3, #32]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	613b      	str	r3, [r7, #16]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	031b      	lsls	r3, r3, #12
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a10      	ldr	r2, [pc, #64]	; (8007d2c <TIM_OC4_SetConfig+0x9c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d109      	bne.n	8007d04 <TIM_OC4_SetConfig+0x74>
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cf6:	617b      	str	r3, [r7, #20]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	019b      	lsls	r3, r3, #6
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	605a      	str	r2, [r3, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	61da      	str	r2, [r3, #28]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	641a      	str	r2, [r3, #64]	; 0x40
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	621a      	str	r2, [r3, #32]
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	40010000 	.word	0x40010000

08007d30 <TIM_TI1_ConfigInputStage>:
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	617b      	str	r3, [r7, #20]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	f023 0201 	bic.w	r2, r3, #1
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	621a      	str	r2, [r3, #32]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	613b      	str	r3, [r7, #16]
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d5a:	613b      	str	r3, [r7, #16]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	613b      	str	r3, [r7, #16]
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f023 030a 	bic.w	r3, r3, #10
 8007d6c:	617b      	str	r3, [r7, #20]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	617b      	str	r3, [r7, #20]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	619a      	str	r2, [r3, #24]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	621a      	str	r2, [r3, #32]
 8007d82:	bf00      	nop
 8007d84:	371c      	adds	r7, #28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <TIM_TI2_ConfigInputStage>:
 8007d8e:	b480      	push	{r7}
 8007d90:	b087      	sub	sp, #28
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	607a      	str	r2, [r7, #4]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	f023 0210 	bic.w	r2, r3, #16
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	621a      	str	r2, [r3, #32]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007db8:	617b      	str	r3, [r7, #20]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	031b      	lsls	r3, r3, #12
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dca:	613b      	str	r3, [r7, #16]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	613b      	str	r3, [r7, #16]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	619a      	str	r2, [r3, #24]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	621a      	str	r2, [r3, #32]
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <TIM_ITRx_SetConfig>:
 8007dee:	b480      	push	{r7}
 8007df0:	b085      	sub	sp, #20
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	6039      	str	r1, [r7, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f043 0307 	orr.w	r3, r3, #7
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	609a      	str	r2, [r3, #8]
 8007e18:	bf00      	nop
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <TIM_ETR_SetConfig>:
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	617b      	str	r3, [r7, #20]
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e3e:	617b      	str	r3, [r7, #20]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	021a      	lsls	r2, r3, #8
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	431a      	orrs	r2, r3
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	609a      	str	r2, [r3, #8]
 8007e58:	bf00      	nop
 8007e5a:	371c      	adds	r7, #28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <TIM_CCxChannelCmd>:
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	2201      	movs	r2, #1
 8007e78:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7c:	617b      	str	r3, [r7, #20]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6a1a      	ldr	r2, [r3, #32]
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	43db      	mvns	r3, r3
 8007e86:	401a      	ands	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	621a      	str	r2, [r3, #32]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a1a      	ldr	r2, [r3, #32]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f003 031f 	and.w	r3, r3, #31
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	fa01 f303 	lsl.w	r3, r1, r3
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	621a      	str	r2, [r3, #32]
 8007ea2:	bf00      	nop
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
	...

08007eb0 <HAL_TIMEx_MasterConfigSynchronization>:
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d101      	bne.n	8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e050      	b.n	8007f6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	60bb      	str	r3, [r7, #8]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	605a      	str	r2, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1c      	ldr	r2, [pc, #112]	; (8007f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d018      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f14:	d013      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a18      	ldr	r2, [pc, #96]	; (8007f7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00e      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a16      	ldr	r2, [pc, #88]	; (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d009      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d004      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a13      	ldr	r2, [pc, #76]	; (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d10c      	bne.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f44:	60bb      	str	r3, [r7, #8]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60bb      	str	r3, [r7, #8]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	609a      	str	r2, [r3, #8]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	40010000 	.word	0x40010000
 8007f7c:	40000400 	.word	0x40000400
 8007f80:	40000800 	.word	0x40000800
 8007f84:	40000c00 	.word	0x40000c00
 8007f88:	40014000 	.word	0x40014000

08007f8c <HAL_TIMEx_CommutCallback>:
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_TIMEx_BreakCallback>:
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_UART_Init>:
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <HAL_UART_Init+0x12>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e03f      	b.n	8008046 <HAL_UART_Init+0x92>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d106      	bne.n	8007fe0 <HAL_UART_Init+0x2c>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7fb fd9c 	bl	8003b18 <HAL_UART_MspInit>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2224      	movs	r2, #36	; 0x24
 8007fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ff6:	60da      	str	r2, [r3, #12]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fe4b 	bl	8008c94 <UART_SetConfig>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	691a      	ldr	r2, [r3, #16]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800800c:	611a      	str	r2, [r3, #16]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	695a      	ldr	r2, [r3, #20]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800801c:	615a      	str	r2, [r3, #20]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68da      	ldr	r2, [r3, #12]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800802c:	60da      	str	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	641a      	str	r2, [r3, #64]	; 0x40
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2220      	movs	r2, #32
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2220      	movs	r2, #32
 8008040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008044:	2300      	movs	r3, #0
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <HAL_UART_DeInit>:
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <HAL_UART_DeInit+0x12>
 800805c:	2301      	movs	r3, #1
 800805e:	e021      	b.n	80080a4 <HAL_UART_DeInit+0x56>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2224      	movs	r2, #36	; 0x24
 8008064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008076:	60da      	str	r2, [r3, #12]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7fb fd9d 	bl	8003bb8 <HAL_UART_MspDeInit>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	641a      	str	r2, [r3, #64]	; 0x40
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	631a      	str	r2, [r3, #48]	; 0x30
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80080a2:	2300      	movs	r3, #0
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <HAL_UART_Transmit>:
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b08a      	sub	sp, #40	; 0x28
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	603b      	str	r3, [r7, #0]
 80080b8:	4613      	mov	r3, r2
 80080ba:	80fb      	strh	r3, [r7, #6]
 80080bc:	2300      	movs	r3, #0
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b20      	cmp	r3, #32
 80080ca:	d17c      	bne.n	80081c6 <HAL_UART_Transmit+0x11a>
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <HAL_UART_Transmit+0x2c>
 80080d2:	88fb      	ldrh	r3, [r7, #6]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <HAL_UART_Transmit+0x30>
 80080d8:	2301      	movs	r3, #1
 80080da:	e075      	b.n	80081c8 <HAL_UART_Transmit+0x11c>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d101      	bne.n	80080ea <HAL_UART_Transmit+0x3e>
 80080e6:	2302      	movs	r3, #2
 80080e8:	e06e      	b.n	80081c8 <HAL_UART_Transmit+0x11c>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	641a      	str	r2, [r3, #64]	; 0x40
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2221      	movs	r2, #33	; 0x21
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008100:	f7fb ff5c 	bl	8003fbc <HAL_GetTick>
 8008104:	6178      	str	r0, [r7, #20]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	88fa      	ldrh	r2, [r7, #6]
 800810a:	849a      	strh	r2, [r3, #36]	; 0x24
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	88fa      	ldrh	r2, [r7, #6]
 8008110:	84da      	strh	r2, [r3, #38]	; 0x26
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800811a:	d108      	bne.n	800812e <HAL_UART_Transmit+0x82>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d104      	bne.n	800812e <HAL_UART_Transmit+0x82>
 8008124:	2300      	movs	r3, #0
 8008126:	61fb      	str	r3, [r7, #28]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	61bb      	str	r3, [r7, #24]
 800812c:	e003      	b.n	8008136 <HAL_UART_Transmit+0x8a>
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	61fb      	str	r3, [r7, #28]
 8008132:	2300      	movs	r3, #0
 8008134:	61bb      	str	r3, [r7, #24]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800813e:	e02a      	b.n	8008196 <HAL_UART_Transmit+0xea>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2200      	movs	r2, #0
 8008148:	2180      	movs	r1, #128	; 0x80
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 fb9a 	bl	8008884 <UART_WaitOnFlagUntilTimeout>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <HAL_UART_Transmit+0xae>
 8008156:	2303      	movs	r3, #3
 8008158:	e036      	b.n	80081c8 <HAL_UART_Transmit+0x11c>
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10b      	bne.n	8008178 <HAL_UART_Transmit+0xcc>
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	881b      	ldrh	r3, [r3, #0]
 8008164:	461a      	mov	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800816e:	605a      	str	r2, [r3, #4]
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	3302      	adds	r3, #2
 8008174:	61bb      	str	r3, [r7, #24]
 8008176:	e007      	b.n	8008188 <HAL_UART_Transmit+0xdc>
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	781a      	ldrb	r2, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	605a      	str	r2, [r3, #4]
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	3301      	adds	r3, #1
 8008186:	61fb      	str	r3, [r7, #28]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800818c:	b29b      	uxth	r3, r3
 800818e:	3b01      	subs	r3, #1
 8008190:	b29a      	uxth	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	84da      	strh	r2, [r3, #38]	; 0x26
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800819a:	b29b      	uxth	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1cf      	bne.n	8008140 <HAL_UART_Transmit+0x94>
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	2200      	movs	r2, #0
 80081a8:	2140      	movs	r1, #64	; 0x40
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 fb6a 	bl	8008884 <UART_WaitOnFlagUntilTimeout>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <HAL_UART_Transmit+0x10e>
 80081b6:	2303      	movs	r3, #3
 80081b8:	e006      	b.n	80081c8 <HAL_UART_Transmit+0x11c>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2220      	movs	r2, #32
 80081be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80081c2:	2300      	movs	r3, #0
 80081c4:	e000      	b.n	80081c8 <HAL_UART_Transmit+0x11c>
 80081c6:	2302      	movs	r3, #2
 80081c8:	4618      	mov	r0, r3
 80081ca:	3720      	adds	r7, #32
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <HAL_UART_Receive>:
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08a      	sub	sp, #40	; 0x28
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	4613      	mov	r3, r2
 80081de:	80fb      	strh	r3, [r7, #6]
 80081e0:	2300      	movs	r3, #0
 80081e2:	617b      	str	r3, [r7, #20]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b20      	cmp	r3, #32
 80081ee:	f040 808c 	bne.w	800830a <HAL_UART_Receive+0x13a>
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <HAL_UART_Receive+0x2e>
 80081f8:	88fb      	ldrh	r3, [r7, #6]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <HAL_UART_Receive+0x32>
 80081fe:	2301      	movs	r3, #1
 8008200:	e084      	b.n	800830c <HAL_UART_Receive+0x13c>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008208:	2b01      	cmp	r3, #1
 800820a:	d101      	bne.n	8008210 <HAL_UART_Receive+0x40>
 800820c:	2302      	movs	r3, #2
 800820e:	e07d      	b.n	800830c <HAL_UART_Receive+0x13c>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	641a      	str	r2, [r3, #64]	; 0x40
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2222      	movs	r2, #34	; 0x22
 8008222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	631a      	str	r2, [r3, #48]	; 0x30
 800822c:	f7fb fec6 	bl	8003fbc <HAL_GetTick>
 8008230:	6178      	str	r0, [r7, #20]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	88fa      	ldrh	r2, [r7, #6]
 8008236:	859a      	strh	r2, [r3, #44]	; 0x2c
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	88fa      	ldrh	r2, [r7, #6]
 800823c:	85da      	strh	r2, [r3, #46]	; 0x2e
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008246:	d108      	bne.n	800825a <HAL_UART_Receive+0x8a>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d104      	bne.n	800825a <HAL_UART_Receive+0x8a>
 8008250:	2300      	movs	r3, #0
 8008252:	61fb      	str	r3, [r7, #28]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	61bb      	str	r3, [r7, #24]
 8008258:	e003      	b.n	8008262 <HAL_UART_Receive+0x92>
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	61fb      	str	r3, [r7, #28]
 800825e:	2300      	movs	r3, #0
 8008260:	61bb      	str	r3, [r7, #24]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800826a:	e043      	b.n	80082f4 <HAL_UART_Receive+0x124>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	2200      	movs	r2, #0
 8008274:	2120      	movs	r1, #32
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f000 fb04 	bl	8008884 <UART_WaitOnFlagUntilTimeout>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <HAL_UART_Receive+0xb6>
 8008282:	2303      	movs	r3, #3
 8008284:	e042      	b.n	800830c <HAL_UART_Receive+0x13c>
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10c      	bne.n	80082a6 <HAL_UART_Receive+0xd6>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	b29b      	uxth	r3, r3
 8008294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008298:	b29a      	uxth	r2, r3
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	801a      	strh	r2, [r3, #0]
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	3302      	adds	r3, #2
 80082a2:	61bb      	str	r3, [r7, #24]
 80082a4:	e01f      	b.n	80082e6 <HAL_UART_Receive+0x116>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ae:	d007      	beq.n	80082c0 <HAL_UART_Receive+0xf0>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <HAL_UART_Receive+0xfe>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d106      	bne.n	80082ce <HAL_UART_Receive+0xfe>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	701a      	strb	r2, [r3, #0]
 80082cc:	e008      	b.n	80082e0 <HAL_UART_Receive+0x110>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	701a      	strb	r2, [r3, #0]
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	3301      	adds	r3, #1
 80082e4:	61fb      	str	r3, [r7, #28]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	85da      	strh	r2, [r3, #46]	; 0x2e
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1b6      	bne.n	800826c <HAL_UART_Receive+0x9c>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2220      	movs	r2, #32
 8008302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008306:	2300      	movs	r3, #0
 8008308:	e000      	b.n	800830c <HAL_UART_Receive+0x13c>
 800830a:	2302      	movs	r3, #2
 800830c:	4618      	mov	r0, r3
 800830e:	3720      	adds	r7, #32
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <HAL_UART_IRQHandler>:
 8008314:	b580      	push	{r7, lr}
 8008316:	b0ba      	sub	sp, #232	; 0xe8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800833a:	2300      	movs	r3, #0
 800833c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008340:	2300      	movs	r3, #0
 8008342:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834a:	f003 030f 	and.w	r3, r3, #15
 800834e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10f      	bne.n	800837a <HAL_UART_IRQHandler+0x66>
 800835a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	d009      	beq.n	800837a <HAL_UART_IRQHandler+0x66>
 8008366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_UART_IRQHandler+0x66>
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fbd3 	bl	8008b1e <UART_Receive_IT>
 8008378:	e256      	b.n	8008828 <HAL_UART_IRQHandler+0x514>
 800837a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800837e:	2b00      	cmp	r3, #0
 8008380:	f000 80de 	beq.w	8008540 <HAL_UART_IRQHandler+0x22c>
 8008384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	2b00      	cmp	r3, #0
 800838e:	d106      	bne.n	800839e <HAL_UART_IRQHandler+0x8a>
 8008390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008394:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 80d1 	beq.w	8008540 <HAL_UART_IRQHandler+0x22c>
 800839e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00b      	beq.n	80083c2 <HAL_UART_IRQHandler+0xae>
 80083aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <HAL_UART_IRQHandler+0xae>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	f043 0201 	orr.w	r2, r3, #1
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	641a      	str	r2, [r3, #64]	; 0x40
 80083c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c6:	f003 0304 	and.w	r3, r3, #4
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00b      	beq.n	80083e6 <HAL_UART_IRQHandler+0xd2>
 80083ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d005      	beq.n	80083e6 <HAL_UART_IRQHandler+0xd2>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	f043 0202 	orr.w	r2, r3, #2
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	641a      	str	r2, [r3, #64]	; 0x40
 80083e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <HAL_UART_IRQHandler+0xf6>
 80083f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d005      	beq.n	800840a <HAL_UART_IRQHandler+0xf6>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	f043 0204 	orr.w	r2, r3, #4
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	641a      	str	r2, [r3, #64]	; 0x40
 800840a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800840e:	f003 0308 	and.w	r3, r3, #8
 8008412:	2b00      	cmp	r3, #0
 8008414:	d011      	beq.n	800843a <HAL_UART_IRQHandler+0x126>
 8008416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b00      	cmp	r3, #0
 8008420:	d105      	bne.n	800842e <HAL_UART_IRQHandler+0x11a>
 8008422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d005      	beq.n	800843a <HAL_UART_IRQHandler+0x126>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	f043 0208 	orr.w	r2, r3, #8
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	641a      	str	r2, [r3, #64]	; 0x40
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 81ed 	beq.w	800881e <HAL_UART_IRQHandler+0x50a>
 8008444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008448:	f003 0320 	and.w	r3, r3, #32
 800844c:	2b00      	cmp	r3, #0
 800844e:	d008      	beq.n	8008462 <HAL_UART_IRQHandler+0x14e>
 8008450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008454:	f003 0320 	and.w	r3, r3, #32
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <HAL_UART_IRQHandler+0x14e>
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fb5e 	bl	8008b1e <UART_Receive_IT>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846c:	2b40      	cmp	r3, #64	; 0x40
 800846e:	bf0c      	ite	eq
 8008470:	2301      	moveq	r3, #1
 8008472:	2300      	movne	r3, #0
 8008474:	b2db      	uxtb	r3, r3
 8008476:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	f003 0308 	and.w	r3, r3, #8
 8008482:	2b00      	cmp	r3, #0
 8008484:	d103      	bne.n	800848e <HAL_UART_IRQHandler+0x17a>
 8008486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800848a:	2b00      	cmp	r3, #0
 800848c:	d04f      	beq.n	800852e <HAL_UART_IRQHandler+0x21a>
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa66 	bl	8008960 <UART_EndRxTransfer>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849e:	2b40      	cmp	r3, #64	; 0x40
 80084a0:	d141      	bne.n	8008526 <HAL_UART_IRQHandler+0x212>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3314      	adds	r3, #20
 80084a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80084ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3314      	adds	r3, #20
 80084ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80084ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80084d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80084d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80084de:	e841 2300 	strex	r3, r2, [r1]
 80084e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1d9      	bne.n	80084a2 <HAL_UART_IRQHandler+0x18e>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d013      	beq.n	800851e <HAL_UART_IRQHandler+0x20a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fa:	4a7d      	ldr	r2, [pc, #500]	; (80086f0 <HAL_UART_IRQHandler+0x3dc>)
 80084fc:	651a      	str	r2, [r3, #80]	; 0x50
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008502:	4618      	mov	r0, r3
 8008504:	f7fb ff3d 	bl	8004382 <HAL_DMA_Abort_IT>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d016      	beq.n	800853c <HAL_UART_IRQHandler+0x228>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008518:	4610      	mov	r0, r2
 800851a:	4798      	blx	r3
 800851c:	e00e      	b.n	800853c <HAL_UART_IRQHandler+0x228>
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f99a 	bl	8008858 <HAL_UART_ErrorCallback>
 8008524:	e00a      	b.n	800853c <HAL_UART_IRQHandler+0x228>
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f996 	bl	8008858 <HAL_UART_ErrorCallback>
 800852c:	e006      	b.n	800853c <HAL_UART_IRQHandler+0x228>
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f992 	bl	8008858 <HAL_UART_ErrorCallback>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	641a      	str	r2, [r3, #64]	; 0x40
 800853a:	e170      	b.n	800881e <HAL_UART_IRQHandler+0x50a>
 800853c:	bf00      	nop
 800853e:	e16e      	b.n	800881e <HAL_UART_IRQHandler+0x50a>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	2b01      	cmp	r3, #1
 8008546:	f040 814a 	bne.w	80087de <HAL_UART_IRQHandler+0x4ca>
 800854a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800854e:	f003 0310 	and.w	r3, r3, #16
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 8143 	beq.w	80087de <HAL_UART_IRQHandler+0x4ca>
 8008558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800855c:	f003 0310 	and.w	r3, r3, #16
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 813c 	beq.w	80087de <HAL_UART_IRQHandler+0x4ca>
 8008566:	2300      	movs	r3, #0
 8008568:	60bb      	str	r3, [r7, #8]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	60bb      	str	r3, [r7, #8]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	60bb      	str	r3, [r7, #8]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008586:	2b40      	cmp	r3, #64	; 0x40
 8008588:	f040 80b4 	bne.w	80086f4 <HAL_UART_IRQHandler+0x3e0>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8008598:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 8140 	beq.w	8008822 <HAL_UART_IRQHandler+0x50e>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085aa:	429a      	cmp	r2, r3
 80085ac:	f080 8139 	bcs.w	8008822 <HAL_UART_IRQHandler+0x50e>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085b6:	85da      	strh	r2, [r3, #46]	; 0x2e
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c2:	f000 8088 	beq.w	80086d6 <HAL_UART_IRQHandler+0x3c2>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	330c      	adds	r3, #12
 80085cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80085d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	330c      	adds	r3, #12
 80085ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80085f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80085fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800860a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1d9      	bne.n	80085c6 <HAL_UART_IRQHandler+0x2b2>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3314      	adds	r3, #20
 8008618:	677b      	str	r3, [r7, #116]	; 0x74
 800861a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	673b      	str	r3, [r7, #112]	; 0x70
 8008622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3314      	adds	r3, #20
 8008632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008636:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800863a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800863c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800863e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	67bb      	str	r3, [r7, #120]	; 0x78
 8008648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e1      	bne.n	8008612 <HAL_UART_IRQHandler+0x2fe>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3314      	adds	r3, #20
 8008654:	663b      	str	r3, [r7, #96]	; 0x60
 8008656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008658:	e853 3f00 	ldrex	r3, [r3]
 800865c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800865e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3314      	adds	r3, #20
 800866e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008672:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008674:	66bb      	str	r3, [r7, #104]	; 0x68
 8008676:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008678:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	667b      	str	r3, [r7, #100]	; 0x64
 8008680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e3      	bne.n	800864e <HAL_UART_IRQHandler+0x33a>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2220      	movs	r2, #32
 800868a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	631a      	str	r2, [r3, #48]	; 0x30
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	330c      	adds	r3, #12
 800869a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800869c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800869e:	e853 3f00 	ldrex	r3, [r3]
 80086a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80086a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086a6:	f023 0310 	bic.w	r3, r3, #16
 80086aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	330c      	adds	r3, #12
 80086b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80086b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80086ba:	657b      	str	r3, [r7, #84]	; 0x54
 80086bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086c0:	e841 2300 	strex	r3, r2, [r1]
 80086c4:	653b      	str	r3, [r7, #80]	; 0x50
 80086c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e3      	bne.n	8008694 <HAL_UART_IRQHandler+0x380>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fb fde6 	bl	80042a2 <HAL_DMA_Abort>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086de:	b29b      	uxth	r3, r3
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f8c0 	bl	800886c <HAL_UARTEx_RxEventCallback>
 80086ec:	e099      	b.n	8008822 <HAL_UART_IRQHandler+0x50e>
 80086ee:	bf00      	nop
 80086f0:	08008a27 	.word	0x08008a27
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008708:	b29b      	uxth	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 808b 	beq.w	8008826 <HAL_UART_IRQHandler+0x512>
 8008710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 8086 	beq.w	8008826 <HAL_UART_IRQHandler+0x512>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	330c      	adds	r3, #12
 8008720:	63bb      	str	r3, [r7, #56]	; 0x38
 8008722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	637b      	str	r3, [r7, #52]	; 0x34
 800872a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800872c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008730:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	330c      	adds	r3, #12
 800873a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800873e:	647a      	str	r2, [r7, #68]	; 0x44
 8008740:	643b      	str	r3, [r7, #64]	; 0x40
 8008742:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008744:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008746:	e841 2300 	strex	r3, r2, [r1]
 800874a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800874c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1e3      	bne.n	800871a <HAL_UART_IRQHandler+0x406>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3314      	adds	r3, #20
 8008758:	627b      	str	r3, [r7, #36]	; 0x24
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	623b      	str	r3, [r7, #32]
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	f023 0301 	bic.w	r3, r3, #1
 8008768:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	3314      	adds	r3, #20
 8008772:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008776:	633a      	str	r2, [r7, #48]	; 0x30
 8008778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800877a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800877c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	62bb      	str	r3, [r7, #40]	; 0x28
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e3      	bne.n	8008752 <HAL_UART_IRQHandler+0x43e>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2220      	movs	r2, #32
 800878e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	631a      	str	r2, [r3, #48]	; 0x30
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	330c      	adds	r3, #12
 800879e:	613b      	str	r3, [r7, #16]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	e853 3f00 	ldrex	r3, [r3]
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 0310 	bic.w	r3, r3, #16
 80087ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	330c      	adds	r3, #12
 80087b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80087bc:	61fa      	str	r2, [r7, #28]
 80087be:	61bb      	str	r3, [r7, #24]
 80087c0:	69b9      	ldr	r1, [r7, #24]
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	617b      	str	r3, [r7, #20]
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e3      	bne.n	8008798 <HAL_UART_IRQHandler+0x484>
 80087d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f848 	bl	800886c <HAL_UARTEx_RxEventCallback>
 80087dc:	e023      	b.n	8008826 <HAL_UART_IRQHandler+0x512>
 80087de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d009      	beq.n	80087fe <HAL_UART_IRQHandler+0x4ea>
 80087ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <HAL_UART_IRQHandler+0x4ea>
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f929 	bl	8008a4e <UART_Transmit_IT>
 80087fc:	e014      	b.n	8008828 <HAL_UART_IRQHandler+0x514>
 80087fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00e      	beq.n	8008828 <HAL_UART_IRQHandler+0x514>
 800880a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800880e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	d008      	beq.n	8008828 <HAL_UART_IRQHandler+0x514>
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f969 	bl	8008aee <UART_EndTransmit_IT>
 800881c:	e004      	b.n	8008828 <HAL_UART_IRQHandler+0x514>
 800881e:	bf00      	nop
 8008820:	e002      	b.n	8008828 <HAL_UART_IRQHandler+0x514>
 8008822:	bf00      	nop
 8008824:	e000      	b.n	8008828 <HAL_UART_IRQHandler+0x514>
 8008826:	bf00      	nop
 8008828:	37e8      	adds	r7, #232	; 0xe8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop

08008830 <HAL_UART_TxCpltCallback>:
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <HAL_UART_RxCpltCallback>:
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_UART_ErrorCallback>:
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_UARTEx_RxEventCallback>:
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	807b      	strh	r3, [r7, #2]
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <UART_WaitOnFlagUntilTimeout>:
 8008884:	b580      	push	{r7, lr}
 8008886:	b090      	sub	sp, #64	; 0x40
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	603b      	str	r3, [r7, #0]
 8008890:	4613      	mov	r3, r2
 8008892:	71fb      	strb	r3, [r7, #7]
 8008894:	e050      	b.n	8008938 <UART_WaitOnFlagUntilTimeout+0xb4>
 8008896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889c:	d04c      	beq.n	8008938 <UART_WaitOnFlagUntilTimeout+0xb4>
 800889e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d007      	beq.n	80088b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80088a4:	f7fb fb8a 	bl	8003fbc <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d241      	bcs.n	8008938 <UART_WaitOnFlagUntilTimeout+0xb4>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	330c      	adds	r3, #12
 80088ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	e853 3f00 	ldrex	r3, [r3]
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	330c      	adds	r3, #12
 80088d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088d4:	637a      	str	r2, [r7, #52]	; 0x34
 80088d6:	633b      	str	r3, [r7, #48]	; 0x30
 80088d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088dc:	e841 2300 	strex	r3, r2, [r1]
 80088e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1e5      	bne.n	80088b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3314      	adds	r3, #20
 80088ee:	617b      	str	r3, [r7, #20]
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	e853 3f00 	ldrex	r3, [r3]
 80088f6:	613b      	str	r3, [r7, #16]
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f023 0301 	bic.w	r3, r3, #1
 80088fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3314      	adds	r3, #20
 8008906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008908:	623a      	str	r2, [r7, #32]
 800890a:	61fb      	str	r3, [r7, #28]
 800890c:	69f9      	ldr	r1, [r7, #28]
 800890e:	6a3a      	ldr	r2, [r7, #32]
 8008910:	e841 2300 	strex	r3, r2, [r1]
 8008914:	61bb      	str	r3, [r7, #24]
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1e5      	bne.n	80088e8 <UART_WaitOnFlagUntilTimeout+0x64>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2220      	movs	r2, #32
 8008920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2220      	movs	r2, #32
 8008928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008934:	2303      	movs	r3, #3
 8008936:	e00f      	b.n	8008958 <UART_WaitOnFlagUntilTimeout+0xd4>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	4013      	ands	r3, r2
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	429a      	cmp	r2, r3
 8008946:	bf0c      	ite	eq
 8008948:	2301      	moveq	r3, #1
 800894a:	2300      	movne	r3, #0
 800894c:	b2db      	uxtb	r3, r3
 800894e:	461a      	mov	r2, r3
 8008950:	79fb      	ldrb	r3, [r7, #7]
 8008952:	429a      	cmp	r2, r3
 8008954:	d09f      	beq.n	8008896 <UART_WaitOnFlagUntilTimeout+0x12>
 8008956:	2300      	movs	r3, #0
 8008958:	4618      	mov	r0, r3
 800895a:	3740      	adds	r7, #64	; 0x40
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <UART_EndRxTransfer>:
 8008960:	b480      	push	{r7}
 8008962:	b095      	sub	sp, #84	; 0x54
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	330c      	adds	r3, #12
 800896e:	637b      	str	r3, [r7, #52]	; 0x34
 8008970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008972:	e853 3f00 	ldrex	r3, [r3]
 8008976:	633b      	str	r3, [r7, #48]	; 0x30
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800897e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	330c      	adds	r3, #12
 8008986:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008988:	643a      	str	r2, [r7, #64]	; 0x40
 800898a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800898c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800898e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008990:	e841 2300 	strex	r3, r2, [r1]
 8008994:	63bb      	str	r3, [r7, #56]	; 0x38
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e5      	bne.n	8008968 <UART_EndRxTransfer+0x8>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3314      	adds	r3, #20
 80089a2:	623b      	str	r3, [r7, #32]
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	61fb      	str	r3, [r7, #28]
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	f023 0301 	bic.w	r3, r3, #1
 80089b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3314      	adds	r3, #20
 80089ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089be:	62bb      	str	r3, [r7, #40]	; 0x28
 80089c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e5      	bne.n	800899c <UART_EndRxTransfer+0x3c>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d119      	bne.n	8008a0c <UART_EndRxTransfer+0xac>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	330c      	adds	r3, #12
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	e853 3f00 	ldrex	r3, [r3]
 80089e6:	60bb      	str	r3, [r7, #8]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f023 0310 	bic.w	r3, r3, #16
 80089ee:	647b      	str	r3, [r7, #68]	; 0x44
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	330c      	adds	r3, #12
 80089f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089f8:	61ba      	str	r2, [r7, #24]
 80089fa:	617b      	str	r3, [r7, #20]
 80089fc:	6979      	ldr	r1, [r7, #20]
 80089fe:	69ba      	ldr	r2, [r7, #24]
 8008a00:	e841 2300 	strex	r3, r2, [r1]
 8008a04:	613b      	str	r3, [r7, #16]
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1e5      	bne.n	80089d8 <UART_EndRxTransfer+0x78>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	631a      	str	r2, [r3, #48]	; 0x30
 8008a1a:	bf00      	nop
 8008a1c:	3754      	adds	r7, #84	; 0x54
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <UART_DMAAbortOnError>:
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	85da      	strh	r2, [r3, #46]	; 0x2e
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	84da      	strh	r2, [r3, #38]	; 0x26
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f7ff ff09 	bl	8008858 <HAL_UART_ErrorCallback>
 8008a46:	bf00      	nop
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <UART_Transmit_IT>:
 8008a4e:	b480      	push	{r7}
 8008a50:	b085      	sub	sp, #20
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b21      	cmp	r3, #33	; 0x21
 8008a60:	d13e      	bne.n	8008ae0 <UART_Transmit_IT+0x92>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a6a:	d114      	bne.n	8008a96 <UART_Transmit_IT+0x48>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d110      	bne.n	8008a96 <UART_Transmit_IT+0x48>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a88:	605a      	str	r2, [r3, #4]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	1c9a      	adds	r2, r3, #2
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	621a      	str	r2, [r3, #32]
 8008a94:	e008      	b.n	8008aa8 <UART_Transmit_IT+0x5a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a1b      	ldr	r3, [r3, #32]
 8008a9a:	1c59      	adds	r1, r3, #1
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	6211      	str	r1, [r2, #32]
 8008aa0:	781a      	ldrb	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	605a      	str	r2, [r3, #4]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10f      	bne.n	8008adc <UART_Transmit_IT+0x8e>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008aca:	60da      	str	r2, [r3, #12]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ada:	60da      	str	r2, [r3, #12]
 8008adc:	2300      	movs	r3, #0
 8008ade:	e000      	b.n	8008ae2 <UART_Transmit_IT+0x94>
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <UART_EndTransmit_IT>:
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68da      	ldr	r2, [r3, #12]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b04:	60da      	str	r2, [r3, #12]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7ff fe8e 	bl	8008830 <HAL_UART_TxCpltCallback>
 8008b14:	2300      	movs	r3, #0
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <UART_Receive_IT>:
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b08c      	sub	sp, #48	; 0x30
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b22      	cmp	r3, #34	; 0x22
 8008b30:	f040 80ab 	bne.w	8008c8a <UART_Receive_IT+0x16c>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b3c:	d117      	bne.n	8008b6e <UART_Receive_IT+0x50>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d113      	bne.n	8008b6e <UART_Receive_IT+0x50>
 8008b46:	2300      	movs	r3, #0
 8008b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	801a      	strh	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b66:	1c9a      	adds	r2, r3, #2
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	629a      	str	r2, [r3, #40]	; 0x28
 8008b6c:	e026      	b.n	8008bbc <UART_Receive_IT+0x9e>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b74:	2300      	movs	r3, #0
 8008b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b80:	d007      	beq.n	8008b92 <UART_Receive_IT+0x74>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10a      	bne.n	8008ba0 <UART_Receive_IT+0x82>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d106      	bne.n	8008ba0 <UART_Receive_IT+0x82>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9c:	701a      	strb	r2, [r3, #0]
 8008b9e:	e008      	b.n	8008bb2 <UART_Receive_IT+0x94>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	629a      	str	r2, [r3, #40]	; 0x28
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	4619      	mov	r1, r3
 8008bca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d15a      	bne.n	8008c86 <UART_Receive_IT+0x168>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f022 0220 	bic.w	r2, r2, #32
 8008bde:	60da      	str	r2, [r3, #12]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bee:	60da      	str	r2, [r3, #12]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	695a      	ldr	r2, [r3, #20]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f022 0201 	bic.w	r2, r2, #1
 8008bfe:	615a      	str	r2, [r3, #20]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2220      	movs	r2, #32
 8008c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d135      	bne.n	8008c7c <UART_Receive_IT+0x15e>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	631a      	str	r2, [r3, #48]	; 0x30
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	330c      	adds	r3, #12
 8008c1c:	617b      	str	r3, [r7, #20]
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	e853 3f00 	ldrex	r3, [r3]
 8008c24:	613b      	str	r3, [r7, #16]
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f023 0310 	bic.w	r3, r3, #16
 8008c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	330c      	adds	r3, #12
 8008c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c36:	623a      	str	r2, [r7, #32]
 8008c38:	61fb      	str	r3, [r7, #28]
 8008c3a:	69f9      	ldr	r1, [r7, #28]
 8008c3c:	6a3a      	ldr	r2, [r7, #32]
 8008c3e:	e841 2300 	strex	r3, r2, [r1]
 8008c42:	61bb      	str	r3, [r7, #24]
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e5      	bne.n	8008c16 <UART_Receive_IT+0xf8>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	2b10      	cmp	r3, #16
 8008c56:	d10a      	bne.n	8008c6e <UART_Receive_IT+0x150>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	60fb      	str	r3, [r7, #12]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff fdf9 	bl	800886c <HAL_UARTEx_RxEventCallback>
 8008c7a:	e002      	b.n	8008c82 <UART_Receive_IT+0x164>
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7ff fde1 	bl	8008844 <HAL_UART_RxCpltCallback>
 8008c82:	2300      	movs	r3, #0
 8008c84:	e002      	b.n	8008c8c <UART_Receive_IT+0x16e>
 8008c86:	2300      	movs	r3, #0
 8008c88:	e000      	b.n	8008c8c <UART_Receive_IT+0x16e>
 8008c8a:	2302      	movs	r3, #2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3730      	adds	r7, #48	; 0x30
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <UART_SetConfig>:
 8008c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c98:	b0c0      	sub	sp, #256	; 0x100
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8008ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb0:	68d9      	ldr	r1, [r3, #12]
 8008cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	ea40 0301 	orr.w	r3, r0, r1
 8008cbc:	6113      	str	r3, [r2, #16]
 8008cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008cec:	f021 010c 	bic.w	r1, r1, #12
 8008cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008cfa:	430b      	orrs	r3, r1
 8008cfc:	60d3      	str	r3, [r2, #12]
 8008cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d0e:	6999      	ldr	r1, [r3, #24]
 8008d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	ea40 0301 	orr.w	r3, r0, r1
 8008d1a:	6153      	str	r3, [r2, #20]
 8008d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	4b8f      	ldr	r3, [pc, #572]	; (8008f60 <UART_SetConfig+0x2cc>)
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d005      	beq.n	8008d34 <UART_SetConfig+0xa0>
 8008d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	4b8d      	ldr	r3, [pc, #564]	; (8008f64 <UART_SetConfig+0x2d0>)
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d104      	bne.n	8008d3e <UART_SetConfig+0xaa>
 8008d34:	f7fe f83c 	bl	8006db0 <HAL_RCC_GetPCLK2Freq>
 8008d38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008d3c:	e003      	b.n	8008d46 <UART_SetConfig+0xb2>
 8008d3e:	f7fe f823 	bl	8006d88 <HAL_RCC_GetPCLK1Freq>
 8008d42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4a:	69db      	ldr	r3, [r3, #28]
 8008d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d50:	f040 810c 	bne.w	8008f6c <UART_SetConfig+0x2d8>
 8008d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008d5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008d62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008d66:	4622      	mov	r2, r4
 8008d68:	462b      	mov	r3, r5
 8008d6a:	1891      	adds	r1, r2, r2
 8008d6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d6e:	415b      	adcs	r3, r3
 8008d70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008d76:	4621      	mov	r1, r4
 8008d78:	eb12 0801 	adds.w	r8, r2, r1
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	eb43 0901 	adc.w	r9, r3, r1
 8008d82:	f04f 0200 	mov.w	r2, #0
 8008d86:	f04f 0300 	mov.w	r3, #0
 8008d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d96:	4690      	mov	r8, r2
 8008d98:	4699      	mov	r9, r3
 8008d9a:	4623      	mov	r3, r4
 8008d9c:	eb18 0303 	adds.w	r3, r8, r3
 8008da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008da4:	462b      	mov	r3, r5
 8008da6:	eb49 0303 	adc.w	r3, r9, r3
 8008daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008dba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008dbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	18db      	adds	r3, r3, r3
 8008dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8008dc8:	4613      	mov	r3, r2
 8008dca:	eb42 0303 	adc.w	r3, r2, r3
 8008dce:	657b      	str	r3, [r7, #84]	; 0x54
 8008dd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008dd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008dd8:	f7f7 ff3e 	bl	8000c58 <__aeabi_uldivmod>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	4b61      	ldr	r3, [pc, #388]	; (8008f68 <UART_SetConfig+0x2d4>)
 8008de2:	fba3 2302 	umull	r2, r3, r3, r2
 8008de6:	095b      	lsrs	r3, r3, #5
 8008de8:	011c      	lsls	r4, r3, #4
 8008dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dee:	2200      	movs	r2, #0
 8008df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008df4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008df8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008dfc:	4642      	mov	r2, r8
 8008dfe:	464b      	mov	r3, r9
 8008e00:	1891      	adds	r1, r2, r2
 8008e02:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e04:	415b      	adcs	r3, r3
 8008e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e0c:	4641      	mov	r1, r8
 8008e0e:	eb12 0a01 	adds.w	sl, r2, r1
 8008e12:	4649      	mov	r1, r9
 8008e14:	eb43 0b01 	adc.w	fp, r3, r1
 8008e18:	f04f 0200 	mov.w	r2, #0
 8008e1c:	f04f 0300 	mov.w	r3, #0
 8008e20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e2c:	4692      	mov	sl, r2
 8008e2e:	469b      	mov	fp, r3
 8008e30:	4643      	mov	r3, r8
 8008e32:	eb1a 0303 	adds.w	r3, sl, r3
 8008e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e3a:	464b      	mov	r3, r9
 8008e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8008e40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008e54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	18db      	adds	r3, r3, r3
 8008e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8008e5e:	4613      	mov	r3, r2
 8008e60:	eb42 0303 	adc.w	r3, r2, r3
 8008e64:	647b      	str	r3, [r7, #68]	; 0x44
 8008e66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008e6e:	f7f7 fef3 	bl	8000c58 <__aeabi_uldivmod>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	4611      	mov	r1, r2
 8008e78:	4b3b      	ldr	r3, [pc, #236]	; (8008f68 <UART_SetConfig+0x2d4>)
 8008e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8008e7e:	095b      	lsrs	r3, r3, #5
 8008e80:	2264      	movs	r2, #100	; 0x64
 8008e82:	fb02 f303 	mul.w	r3, r2, r3
 8008e86:	1acb      	subs	r3, r1, r3
 8008e88:	00db      	lsls	r3, r3, #3
 8008e8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008e8e:	4b36      	ldr	r3, [pc, #216]	; (8008f68 <UART_SetConfig+0x2d4>)
 8008e90:	fba3 2302 	umull	r2, r3, r3, r2
 8008e94:	095b      	lsrs	r3, r3, #5
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e9c:	441c      	add	r4, r3
 8008e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ea8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008eac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008eb0:	4642      	mov	r2, r8
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	1891      	adds	r1, r2, r2
 8008eb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008eb8:	415b      	adcs	r3, r3
 8008eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ec0:	4641      	mov	r1, r8
 8008ec2:	1851      	adds	r1, r2, r1
 8008ec4:	6339      	str	r1, [r7, #48]	; 0x30
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	414b      	adcs	r3, r1
 8008eca:	637b      	str	r3, [r7, #52]	; 0x34
 8008ecc:	f04f 0200 	mov.w	r2, #0
 8008ed0:	f04f 0300 	mov.w	r3, #0
 8008ed4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008ed8:	4659      	mov	r1, fp
 8008eda:	00cb      	lsls	r3, r1, #3
 8008edc:	4651      	mov	r1, sl
 8008ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ee2:	4651      	mov	r1, sl
 8008ee4:	00ca      	lsls	r2, r1, #3
 8008ee6:	4610      	mov	r0, r2
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4603      	mov	r3, r0
 8008eec:	4642      	mov	r2, r8
 8008eee:	189b      	adds	r3, r3, r2
 8008ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ef4:	464b      	mov	r3, r9
 8008ef6:	460a      	mov	r2, r1
 8008ef8:	eb42 0303 	adc.w	r3, r2, r3
 8008efc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f14:	460b      	mov	r3, r1
 8008f16:	18db      	adds	r3, r3, r3
 8008f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	eb42 0303 	adc.w	r3, r2, r3
 8008f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f2a:	f7f7 fe95 	bl	8000c58 <__aeabi_uldivmod>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	4b0d      	ldr	r3, [pc, #52]	; (8008f68 <UART_SetConfig+0x2d4>)
 8008f34:	fba3 1302 	umull	r1, r3, r3, r2
 8008f38:	095b      	lsrs	r3, r3, #5
 8008f3a:	2164      	movs	r1, #100	; 0x64
 8008f3c:	fb01 f303 	mul.w	r3, r1, r3
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	00db      	lsls	r3, r3, #3
 8008f44:	3332      	adds	r3, #50	; 0x32
 8008f46:	4a08      	ldr	r2, [pc, #32]	; (8008f68 <UART_SetConfig+0x2d4>)
 8008f48:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4c:	095b      	lsrs	r3, r3, #5
 8008f4e:	f003 0207 	and.w	r2, r3, #7
 8008f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4422      	add	r2, r4
 8008f5a:	609a      	str	r2, [r3, #8]
 8008f5c:	e105      	b.n	800916a <UART_SetConfig+0x4d6>
 8008f5e:	bf00      	nop
 8008f60:	40011000 	.word	0x40011000
 8008f64:	40011400 	.word	0x40011400
 8008f68:	51eb851f 	.word	0x51eb851f
 8008f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f70:	2200      	movs	r2, #0
 8008f72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008f7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008f7e:	4642      	mov	r2, r8
 8008f80:	464b      	mov	r3, r9
 8008f82:	1891      	adds	r1, r2, r2
 8008f84:	6239      	str	r1, [r7, #32]
 8008f86:	415b      	adcs	r3, r3
 8008f88:	627b      	str	r3, [r7, #36]	; 0x24
 8008f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f8e:	4641      	mov	r1, r8
 8008f90:	1854      	adds	r4, r2, r1
 8008f92:	4649      	mov	r1, r9
 8008f94:	eb43 0501 	adc.w	r5, r3, r1
 8008f98:	f04f 0200 	mov.w	r2, #0
 8008f9c:	f04f 0300 	mov.w	r3, #0
 8008fa0:	00eb      	lsls	r3, r5, #3
 8008fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008fa6:	00e2      	lsls	r2, r4, #3
 8008fa8:	4614      	mov	r4, r2
 8008faa:	461d      	mov	r5, r3
 8008fac:	4643      	mov	r3, r8
 8008fae:	18e3      	adds	r3, r4, r3
 8008fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008fb4:	464b      	mov	r3, r9
 8008fb6:	eb45 0303 	adc.w	r3, r5, r3
 8008fba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008fce:	f04f 0200 	mov.w	r2, #0
 8008fd2:	f04f 0300 	mov.w	r3, #0
 8008fd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008fda:	4629      	mov	r1, r5
 8008fdc:	008b      	lsls	r3, r1, #2
 8008fde:	4621      	mov	r1, r4
 8008fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	008a      	lsls	r2, r1, #2
 8008fe8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008fec:	f7f7 fe34 	bl	8000c58 <__aeabi_uldivmod>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4b60      	ldr	r3, [pc, #384]	; (8009178 <UART_SetConfig+0x4e4>)
 8008ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8008ffa:	095b      	lsrs	r3, r3, #5
 8008ffc:	011c      	lsls	r4, r3, #4
 8008ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009002:	2200      	movs	r2, #0
 8009004:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009008:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800900c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009010:	4642      	mov	r2, r8
 8009012:	464b      	mov	r3, r9
 8009014:	1891      	adds	r1, r2, r2
 8009016:	61b9      	str	r1, [r7, #24]
 8009018:	415b      	adcs	r3, r3
 800901a:	61fb      	str	r3, [r7, #28]
 800901c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009020:	4641      	mov	r1, r8
 8009022:	1851      	adds	r1, r2, r1
 8009024:	6139      	str	r1, [r7, #16]
 8009026:	4649      	mov	r1, r9
 8009028:	414b      	adcs	r3, r1
 800902a:	617b      	str	r3, [r7, #20]
 800902c:	f04f 0200 	mov.w	r2, #0
 8009030:	f04f 0300 	mov.w	r3, #0
 8009034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009038:	4659      	mov	r1, fp
 800903a:	00cb      	lsls	r3, r1, #3
 800903c:	4651      	mov	r1, sl
 800903e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009042:	4651      	mov	r1, sl
 8009044:	00ca      	lsls	r2, r1, #3
 8009046:	4610      	mov	r0, r2
 8009048:	4619      	mov	r1, r3
 800904a:	4603      	mov	r3, r0
 800904c:	4642      	mov	r2, r8
 800904e:	189b      	adds	r3, r3, r2
 8009050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009054:	464b      	mov	r3, r9
 8009056:	460a      	mov	r2, r1
 8009058:	eb42 0303 	adc.w	r3, r2, r3
 800905c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	67bb      	str	r3, [r7, #120]	; 0x78
 800906a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800906c:	f04f 0200 	mov.w	r2, #0
 8009070:	f04f 0300 	mov.w	r3, #0
 8009074:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009078:	4649      	mov	r1, r9
 800907a:	008b      	lsls	r3, r1, #2
 800907c:	4641      	mov	r1, r8
 800907e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009082:	4641      	mov	r1, r8
 8009084:	008a      	lsls	r2, r1, #2
 8009086:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800908a:	f7f7 fde5 	bl	8000c58 <__aeabi_uldivmod>
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	4b39      	ldr	r3, [pc, #228]	; (8009178 <UART_SetConfig+0x4e4>)
 8009094:	fba3 1302 	umull	r1, r3, r3, r2
 8009098:	095b      	lsrs	r3, r3, #5
 800909a:	2164      	movs	r1, #100	; 0x64
 800909c:	fb01 f303 	mul.w	r3, r1, r3
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	011b      	lsls	r3, r3, #4
 80090a4:	3332      	adds	r3, #50	; 0x32
 80090a6:	4a34      	ldr	r2, [pc, #208]	; (8009178 <UART_SetConfig+0x4e4>)
 80090a8:	fba2 2303 	umull	r2, r3, r2, r3
 80090ac:	095b      	lsrs	r3, r3, #5
 80090ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090b2:	441c      	add	r4, r3
 80090b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090b8:	2200      	movs	r2, #0
 80090ba:	673b      	str	r3, [r7, #112]	; 0x70
 80090bc:	677a      	str	r2, [r7, #116]	; 0x74
 80090be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80090c2:	4642      	mov	r2, r8
 80090c4:	464b      	mov	r3, r9
 80090c6:	1891      	adds	r1, r2, r2
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	415b      	adcs	r3, r3
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090d2:	4641      	mov	r1, r8
 80090d4:	1851      	adds	r1, r2, r1
 80090d6:	6039      	str	r1, [r7, #0]
 80090d8:	4649      	mov	r1, r9
 80090da:	414b      	adcs	r3, r1
 80090dc:	607b      	str	r3, [r7, #4]
 80090de:	f04f 0200 	mov.w	r2, #0
 80090e2:	f04f 0300 	mov.w	r3, #0
 80090e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80090ea:	4659      	mov	r1, fp
 80090ec:	00cb      	lsls	r3, r1, #3
 80090ee:	4651      	mov	r1, sl
 80090f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090f4:	4651      	mov	r1, sl
 80090f6:	00ca      	lsls	r2, r1, #3
 80090f8:	4610      	mov	r0, r2
 80090fa:	4619      	mov	r1, r3
 80090fc:	4603      	mov	r3, r0
 80090fe:	4642      	mov	r2, r8
 8009100:	189b      	adds	r3, r3, r2
 8009102:	66bb      	str	r3, [r7, #104]	; 0x68
 8009104:	464b      	mov	r3, r9
 8009106:	460a      	mov	r2, r1
 8009108:	eb42 0303 	adc.w	r3, r2, r3
 800910c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800910e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	663b      	str	r3, [r7, #96]	; 0x60
 8009118:	667a      	str	r2, [r7, #100]	; 0x64
 800911a:	f04f 0200 	mov.w	r2, #0
 800911e:	f04f 0300 	mov.w	r3, #0
 8009122:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009126:	4649      	mov	r1, r9
 8009128:	008b      	lsls	r3, r1, #2
 800912a:	4641      	mov	r1, r8
 800912c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009130:	4641      	mov	r1, r8
 8009132:	008a      	lsls	r2, r1, #2
 8009134:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009138:	f7f7 fd8e 	bl	8000c58 <__aeabi_uldivmod>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4b0d      	ldr	r3, [pc, #52]	; (8009178 <UART_SetConfig+0x4e4>)
 8009142:	fba3 1302 	umull	r1, r3, r3, r2
 8009146:	095b      	lsrs	r3, r3, #5
 8009148:	2164      	movs	r1, #100	; 0x64
 800914a:	fb01 f303 	mul.w	r3, r1, r3
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	011b      	lsls	r3, r3, #4
 8009152:	3332      	adds	r3, #50	; 0x32
 8009154:	4a08      	ldr	r2, [pc, #32]	; (8009178 <UART_SetConfig+0x4e4>)
 8009156:	fba2 2303 	umull	r2, r3, r2, r3
 800915a:	095b      	lsrs	r3, r3, #5
 800915c:	f003 020f 	and.w	r2, r3, #15
 8009160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4422      	add	r2, r4
 8009168:	609a      	str	r2, [r3, #8]
 800916a:	bf00      	nop
 800916c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009170:	46bd      	mov	sp, r7
 8009172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009176:	bf00      	nop
 8009178:	51eb851f 	.word	0x51eb851f

0800917c <_ZdlPvj>:
 800917c:	f000 b817 	b.w	80091ae <_ZdlPv>

08009180 <_Znwj>:
 8009180:	2801      	cmp	r0, #1
 8009182:	bf38      	it	cc
 8009184:	2001      	movcc	r0, #1
 8009186:	b510      	push	{r4, lr}
 8009188:	4604      	mov	r4, r0
 800918a:	4620      	mov	r0, r4
 800918c:	f001 fbba 	bl	800a904 <malloc>
 8009190:	b930      	cbnz	r0, 80091a0 <_Znwj+0x20>
 8009192:	f000 f80f 	bl	80091b4 <_ZSt15get_new_handlerv>
 8009196:	b908      	cbnz	r0, 800919c <_Znwj+0x1c>
 8009198:	f001 fb83 	bl	800a8a2 <abort>
 800919c:	4780      	blx	r0
 800919e:	e7f4      	b.n	800918a <_Znwj+0xa>
 80091a0:	bd10      	pop	{r4, pc}

080091a2 <_ZSt17__throw_bad_allocv>:
 80091a2:	b508      	push	{r3, lr}
 80091a4:	f001 fb7d 	bl	800a8a2 <abort>

080091a8 <_ZSt20__throw_length_errorPKc>:
 80091a8:	b508      	push	{r3, lr}
 80091aa:	f001 fb7a 	bl	800a8a2 <abort>

080091ae <_ZdlPv>:
 80091ae:	f001 bbb1 	b.w	800a914 <free>
	...

080091b4 <_ZSt15get_new_handlerv>:
 80091b4:	4b02      	ldr	r3, [pc, #8]	; (80091c0 <_ZSt15get_new_handlerv+0xc>)
 80091b6:	6818      	ldr	r0, [r3, #0]
 80091b8:	f3bf 8f5b 	dmb	ish
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	20000a80 	.word	0x20000a80
 80091c4:	00000000 	.word	0x00000000

080091c8 <cos>:
 80091c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091ca:	ec53 2b10 	vmov	r2, r3, d0
 80091ce:	4826      	ldr	r0, [pc, #152]	; (8009268 <cos+0xa0>)
 80091d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80091d4:	4281      	cmp	r1, r0
 80091d6:	dc06      	bgt.n	80091e6 <cos+0x1e>
 80091d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009260 <cos+0x98>
 80091dc:	b005      	add	sp, #20
 80091de:	f85d eb04 	ldr.w	lr, [sp], #4
 80091e2:	f000 bb31 	b.w	8009848 <__kernel_cos>
 80091e6:	4821      	ldr	r0, [pc, #132]	; (800926c <cos+0xa4>)
 80091e8:	4281      	cmp	r1, r0
 80091ea:	dd09      	ble.n	8009200 <cos+0x38>
 80091ec:	ee10 0a10 	vmov	r0, s0
 80091f0:	4619      	mov	r1, r3
 80091f2:	f7f7 f851 	bl	8000298 <__aeabi_dsub>
 80091f6:	ec41 0b10 	vmov	d0, r0, r1
 80091fa:	b005      	add	sp, #20
 80091fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009200:	4668      	mov	r0, sp
 8009202:	f000 f915 	bl	8009430 <__ieee754_rem_pio2>
 8009206:	f000 0003 	and.w	r0, r0, #3
 800920a:	2801      	cmp	r0, #1
 800920c:	d00b      	beq.n	8009226 <cos+0x5e>
 800920e:	2802      	cmp	r0, #2
 8009210:	d016      	beq.n	8009240 <cos+0x78>
 8009212:	b9e0      	cbnz	r0, 800924e <cos+0x86>
 8009214:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009218:	ed9d 0b00 	vldr	d0, [sp]
 800921c:	f000 fb14 	bl	8009848 <__kernel_cos>
 8009220:	ec51 0b10 	vmov	r0, r1, d0
 8009224:	e7e7      	b.n	80091f6 <cos+0x2e>
 8009226:	ed9d 1b02 	vldr	d1, [sp, #8]
 800922a:	ed9d 0b00 	vldr	d0, [sp]
 800922e:	f000 ff23 	bl	800a078 <__kernel_sin>
 8009232:	ec53 2b10 	vmov	r2, r3, d0
 8009236:	ee10 0a10 	vmov	r0, s0
 800923a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800923e:	e7da      	b.n	80091f6 <cos+0x2e>
 8009240:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009244:	ed9d 0b00 	vldr	d0, [sp]
 8009248:	f000 fafe 	bl	8009848 <__kernel_cos>
 800924c:	e7f1      	b.n	8009232 <cos+0x6a>
 800924e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009252:	ed9d 0b00 	vldr	d0, [sp]
 8009256:	2001      	movs	r0, #1
 8009258:	f000 ff0e 	bl	800a078 <__kernel_sin>
 800925c:	e7e0      	b.n	8009220 <cos+0x58>
 800925e:	bf00      	nop
	...
 8009268:	3fe921fb 	.word	0x3fe921fb
 800926c:	7fefffff 	.word	0x7fefffff

08009270 <sin>:
 8009270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009272:	ec53 2b10 	vmov	r2, r3, d0
 8009276:	4828      	ldr	r0, [pc, #160]	; (8009318 <sin+0xa8>)
 8009278:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800927c:	4281      	cmp	r1, r0
 800927e:	dc07      	bgt.n	8009290 <sin+0x20>
 8009280:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009310 <sin+0xa0>
 8009284:	2000      	movs	r0, #0
 8009286:	b005      	add	sp, #20
 8009288:	f85d eb04 	ldr.w	lr, [sp], #4
 800928c:	f000 bef4 	b.w	800a078 <__kernel_sin>
 8009290:	4822      	ldr	r0, [pc, #136]	; (800931c <sin+0xac>)
 8009292:	4281      	cmp	r1, r0
 8009294:	dd09      	ble.n	80092aa <sin+0x3a>
 8009296:	ee10 0a10 	vmov	r0, s0
 800929a:	4619      	mov	r1, r3
 800929c:	f7f6 fffc 	bl	8000298 <__aeabi_dsub>
 80092a0:	ec41 0b10 	vmov	d0, r0, r1
 80092a4:	b005      	add	sp, #20
 80092a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80092aa:	4668      	mov	r0, sp
 80092ac:	f000 f8c0 	bl	8009430 <__ieee754_rem_pio2>
 80092b0:	f000 0003 	and.w	r0, r0, #3
 80092b4:	2801      	cmp	r0, #1
 80092b6:	d00c      	beq.n	80092d2 <sin+0x62>
 80092b8:	2802      	cmp	r0, #2
 80092ba:	d011      	beq.n	80092e0 <sin+0x70>
 80092bc:	b9f0      	cbnz	r0, 80092fc <sin+0x8c>
 80092be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092c2:	ed9d 0b00 	vldr	d0, [sp]
 80092c6:	2001      	movs	r0, #1
 80092c8:	f000 fed6 	bl	800a078 <__kernel_sin>
 80092cc:	ec51 0b10 	vmov	r0, r1, d0
 80092d0:	e7e6      	b.n	80092a0 <sin+0x30>
 80092d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092d6:	ed9d 0b00 	vldr	d0, [sp]
 80092da:	f000 fab5 	bl	8009848 <__kernel_cos>
 80092de:	e7f5      	b.n	80092cc <sin+0x5c>
 80092e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80092e4:	ed9d 0b00 	vldr	d0, [sp]
 80092e8:	2001      	movs	r0, #1
 80092ea:	f000 fec5 	bl	800a078 <__kernel_sin>
 80092ee:	ec53 2b10 	vmov	r2, r3, d0
 80092f2:	ee10 0a10 	vmov	r0, s0
 80092f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80092fa:	e7d1      	b.n	80092a0 <sin+0x30>
 80092fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009300:	ed9d 0b00 	vldr	d0, [sp]
 8009304:	f000 faa0 	bl	8009848 <__kernel_cos>
 8009308:	e7f1      	b.n	80092ee <sin+0x7e>
 800930a:	bf00      	nop
 800930c:	f3af 8000 	nop.w
	...
 8009318:	3fe921fb 	.word	0x3fe921fb
 800931c:	7fefffff 	.word	0x7fefffff

08009320 <tanh>:
 8009320:	b5d0      	push	{r4, r6, r7, lr}
 8009322:	ec57 6b10 	vmov	r6, r7, d0
 8009326:	4a3d      	ldr	r2, [pc, #244]	; (800941c <tanh+0xfc>)
 8009328:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 800932c:	4293      	cmp	r3, r2
 800932e:	463c      	mov	r4, r7
 8009330:	dd13      	ble.n	800935a <tanh+0x3a>
 8009332:	ee10 2a10 	vmov	r2, s0
 8009336:	463b      	mov	r3, r7
 8009338:	4939      	ldr	r1, [pc, #228]	; (8009420 <tanh+0x100>)
 800933a:	2000      	movs	r0, #0
 800933c:	f7f7 fa8e 	bl	800085c <__aeabi_ddiv>
 8009340:	2f00      	cmp	r7, #0
 8009342:	4b37      	ldr	r3, [pc, #220]	; (8009420 <tanh+0x100>)
 8009344:	f04f 0200 	mov.w	r2, #0
 8009348:	db04      	blt.n	8009354 <tanh+0x34>
 800934a:	f7f6 ffa7 	bl	800029c <__adddf3>
 800934e:	ec41 0b10 	vmov	d0, r0, r1
 8009352:	bdd0      	pop	{r4, r6, r7, pc}
 8009354:	f7f6 ffa0 	bl	8000298 <__aeabi_dsub>
 8009358:	e7f9      	b.n	800934e <tanh+0x2e>
 800935a:	4a32      	ldr	r2, [pc, #200]	; (8009424 <tanh+0x104>)
 800935c:	4293      	cmp	r3, r2
 800935e:	dc59      	bgt.n	8009414 <tanh+0xf4>
 8009360:	f1b3 5f72 	cmp.w	r3, #1015021568	; 0x3c800000
 8009364:	da0b      	bge.n	800937e <tanh+0x5e>
 8009366:	4b2e      	ldr	r3, [pc, #184]	; (8009420 <tanh+0x100>)
 8009368:	ee10 0a10 	vmov	r0, s0
 800936c:	2200      	movs	r2, #0
 800936e:	4639      	mov	r1, r7
 8009370:	f7f6 ff94 	bl	800029c <__adddf3>
 8009374:	4632      	mov	r2, r6
 8009376:	463b      	mov	r3, r7
 8009378:	f7f7 f946 	bl	8000608 <__aeabi_dmul>
 800937c:	e7e7      	b.n	800934e <tanh+0x2e>
 800937e:	4a2a      	ldr	r2, [pc, #168]	; (8009428 <tanh+0x108>)
 8009380:	4293      	cmp	r3, r2
 8009382:	dd28      	ble.n	80093d6 <tanh+0xb6>
 8009384:	f001 f954 	bl	800a630 <fabs>
 8009388:	ec53 2b10 	vmov	r2, r3, d0
 800938c:	ee10 0a10 	vmov	r0, s0
 8009390:	4619      	mov	r1, r3
 8009392:	f7f6 ff83 	bl	800029c <__adddf3>
 8009396:	ec41 0b10 	vmov	d0, r0, r1
 800939a:	f000 ff2d 	bl	800a1f8 <expm1>
 800939e:	2200      	movs	r2, #0
 80093a0:	ec51 0b10 	vmov	r0, r1, d0
 80093a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093a8:	f7f6 ff78 	bl	800029c <__adddf3>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	2000      	movs	r0, #0
 80093b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80093b6:	f7f7 fa51 	bl	800085c <__aeabi_ddiv>
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	2000      	movs	r0, #0
 80093c0:	4917      	ldr	r1, [pc, #92]	; (8009420 <tanh+0x100>)
 80093c2:	f7f6 ff69 	bl	8000298 <__aeabi_dsub>
 80093c6:	2c00      	cmp	r4, #0
 80093c8:	bfbf      	itttt	lt
 80093ca:	4602      	movlt	r2, r0
 80093cc:	f101 4300 	addlt.w	r3, r1, #2147483648	; 0x80000000
 80093d0:	4610      	movlt	r0, r2
 80093d2:	4619      	movlt	r1, r3
 80093d4:	e7bb      	b.n	800934e <tanh+0x2e>
 80093d6:	f001 f92b 	bl	800a630 <fabs>
 80093da:	2200      	movs	r2, #0
 80093dc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80093e0:	ec51 0b10 	vmov	r0, r1, d0
 80093e4:	f7f7 f910 	bl	8000608 <__aeabi_dmul>
 80093e8:	ec41 0b10 	vmov	d0, r0, r1
 80093ec:	f000 ff04 	bl	800a1f8 <expm1>
 80093f0:	ec51 0b10 	vmov	r0, r1, d0
 80093f4:	2200      	movs	r2, #0
 80093f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093fa:	ee10 6a10 	vmov	r6, s0
 80093fe:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
 8009402:	f7f6 ff4b 	bl	800029c <__adddf3>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	4630      	mov	r0, r6
 800940c:	4639      	mov	r1, r7
 800940e:	f7f7 fa25 	bl	800085c <__aeabi_ddiv>
 8009412:	e7d8      	b.n	80093c6 <tanh+0xa6>
 8009414:	4902      	ldr	r1, [pc, #8]	; (8009420 <tanh+0x100>)
 8009416:	2000      	movs	r0, #0
 8009418:	e7d5      	b.n	80093c6 <tanh+0xa6>
 800941a:	bf00      	nop
 800941c:	7fefffff 	.word	0x7fefffff
 8009420:	3ff00000 	.word	0x3ff00000
 8009424:	4035ffff 	.word	0x4035ffff
 8009428:	3fefffff 	.word	0x3fefffff
 800942c:	00000000 	.word	0x00000000

08009430 <__ieee754_rem_pio2>:
 8009430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	ed2d 8b02 	vpush	{d8}
 8009438:	ec55 4b10 	vmov	r4, r5, d0
 800943c:	4bca      	ldr	r3, [pc, #808]	; (8009768 <__ieee754_rem_pio2+0x338>)
 800943e:	b08b      	sub	sp, #44	; 0x2c
 8009440:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009444:	4598      	cmp	r8, r3
 8009446:	4682      	mov	sl, r0
 8009448:	9502      	str	r5, [sp, #8]
 800944a:	dc08      	bgt.n	800945e <__ieee754_rem_pio2+0x2e>
 800944c:	2200      	movs	r2, #0
 800944e:	2300      	movs	r3, #0
 8009450:	ed80 0b00 	vstr	d0, [r0]
 8009454:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009458:	f04f 0b00 	mov.w	fp, #0
 800945c:	e028      	b.n	80094b0 <__ieee754_rem_pio2+0x80>
 800945e:	4bc3      	ldr	r3, [pc, #780]	; (800976c <__ieee754_rem_pio2+0x33c>)
 8009460:	4598      	cmp	r8, r3
 8009462:	dc78      	bgt.n	8009556 <__ieee754_rem_pio2+0x126>
 8009464:	9b02      	ldr	r3, [sp, #8]
 8009466:	4ec2      	ldr	r6, [pc, #776]	; (8009770 <__ieee754_rem_pio2+0x340>)
 8009468:	2b00      	cmp	r3, #0
 800946a:	ee10 0a10 	vmov	r0, s0
 800946e:	a3b0      	add	r3, pc, #704	; (adr r3, 8009730 <__ieee754_rem_pio2+0x300>)
 8009470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009474:	4629      	mov	r1, r5
 8009476:	dd39      	ble.n	80094ec <__ieee754_rem_pio2+0xbc>
 8009478:	f7f6 ff0e 	bl	8000298 <__aeabi_dsub>
 800947c:	45b0      	cmp	r8, r6
 800947e:	4604      	mov	r4, r0
 8009480:	460d      	mov	r5, r1
 8009482:	d01b      	beq.n	80094bc <__ieee754_rem_pio2+0x8c>
 8009484:	a3ac      	add	r3, pc, #688	; (adr r3, 8009738 <__ieee754_rem_pio2+0x308>)
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	f7f6 ff05 	bl	8000298 <__aeabi_dsub>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	e9ca 2300 	strd	r2, r3, [sl]
 8009496:	4620      	mov	r0, r4
 8009498:	4629      	mov	r1, r5
 800949a:	f7f6 fefd 	bl	8000298 <__aeabi_dsub>
 800949e:	a3a6      	add	r3, pc, #664	; (adr r3, 8009738 <__ieee754_rem_pio2+0x308>)
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	f7f6 fef8 	bl	8000298 <__aeabi_dsub>
 80094a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80094ac:	f04f 0b01 	mov.w	fp, #1
 80094b0:	4658      	mov	r0, fp
 80094b2:	b00b      	add	sp, #44	; 0x2c
 80094b4:	ecbd 8b02 	vpop	{d8}
 80094b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8009740 <__ieee754_rem_pio2+0x310>)
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	f7f6 fee9 	bl	8000298 <__aeabi_dsub>
 80094c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8009748 <__ieee754_rem_pio2+0x318>)
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	4604      	mov	r4, r0
 80094ce:	460d      	mov	r5, r1
 80094d0:	f7f6 fee2 	bl	8000298 <__aeabi_dsub>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	e9ca 2300 	strd	r2, r3, [sl]
 80094dc:	4620      	mov	r0, r4
 80094de:	4629      	mov	r1, r5
 80094e0:	f7f6 feda 	bl	8000298 <__aeabi_dsub>
 80094e4:	a398      	add	r3, pc, #608	; (adr r3, 8009748 <__ieee754_rem_pio2+0x318>)
 80094e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ea:	e7db      	b.n	80094a4 <__ieee754_rem_pio2+0x74>
 80094ec:	f7f6 fed6 	bl	800029c <__adddf3>
 80094f0:	45b0      	cmp	r8, r6
 80094f2:	4604      	mov	r4, r0
 80094f4:	460d      	mov	r5, r1
 80094f6:	d016      	beq.n	8009526 <__ieee754_rem_pio2+0xf6>
 80094f8:	a38f      	add	r3, pc, #572	; (adr r3, 8009738 <__ieee754_rem_pio2+0x308>)
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	f7f6 fecd 	bl	800029c <__adddf3>
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	e9ca 2300 	strd	r2, r3, [sl]
 800950a:	4620      	mov	r0, r4
 800950c:	4629      	mov	r1, r5
 800950e:	f7f6 fec3 	bl	8000298 <__aeabi_dsub>
 8009512:	a389      	add	r3, pc, #548	; (adr r3, 8009738 <__ieee754_rem_pio2+0x308>)
 8009514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009518:	f7f6 fec0 	bl	800029c <__adddf3>
 800951c:	f04f 3bff 	mov.w	fp, #4294967295
 8009520:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009524:	e7c4      	b.n	80094b0 <__ieee754_rem_pio2+0x80>
 8009526:	a386      	add	r3, pc, #536	; (adr r3, 8009740 <__ieee754_rem_pio2+0x310>)
 8009528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952c:	f7f6 feb6 	bl	800029c <__adddf3>
 8009530:	a385      	add	r3, pc, #532	; (adr r3, 8009748 <__ieee754_rem_pio2+0x318>)
 8009532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009536:	4604      	mov	r4, r0
 8009538:	460d      	mov	r5, r1
 800953a:	f7f6 feaf 	bl	800029c <__adddf3>
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	e9ca 2300 	strd	r2, r3, [sl]
 8009546:	4620      	mov	r0, r4
 8009548:	4629      	mov	r1, r5
 800954a:	f7f6 fea5 	bl	8000298 <__aeabi_dsub>
 800954e:	a37e      	add	r3, pc, #504	; (adr r3, 8009748 <__ieee754_rem_pio2+0x318>)
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	e7e0      	b.n	8009518 <__ieee754_rem_pio2+0xe8>
 8009556:	4b87      	ldr	r3, [pc, #540]	; (8009774 <__ieee754_rem_pio2+0x344>)
 8009558:	4598      	cmp	r8, r3
 800955a:	f300 80d9 	bgt.w	8009710 <__ieee754_rem_pio2+0x2e0>
 800955e:	f001 f867 	bl	800a630 <fabs>
 8009562:	ec55 4b10 	vmov	r4, r5, d0
 8009566:	ee10 0a10 	vmov	r0, s0
 800956a:	a379      	add	r3, pc, #484	; (adr r3, 8009750 <__ieee754_rem_pio2+0x320>)
 800956c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009570:	4629      	mov	r1, r5
 8009572:	f7f7 f849 	bl	8000608 <__aeabi_dmul>
 8009576:	4b80      	ldr	r3, [pc, #512]	; (8009778 <__ieee754_rem_pio2+0x348>)
 8009578:	2200      	movs	r2, #0
 800957a:	f7f6 fe8f 	bl	800029c <__adddf3>
 800957e:	f7f7 faf3 	bl	8000b68 <__aeabi_d2iz>
 8009582:	4683      	mov	fp, r0
 8009584:	f7f6 ffd6 	bl	8000534 <__aeabi_i2d>
 8009588:	4602      	mov	r2, r0
 800958a:	460b      	mov	r3, r1
 800958c:	ec43 2b18 	vmov	d8, r2, r3
 8009590:	a367      	add	r3, pc, #412	; (adr r3, 8009730 <__ieee754_rem_pio2+0x300>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	f7f7 f837 	bl	8000608 <__aeabi_dmul>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	4620      	mov	r0, r4
 80095a0:	4629      	mov	r1, r5
 80095a2:	f7f6 fe79 	bl	8000298 <__aeabi_dsub>
 80095a6:	a364      	add	r3, pc, #400	; (adr r3, 8009738 <__ieee754_rem_pio2+0x308>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	4606      	mov	r6, r0
 80095ae:	460f      	mov	r7, r1
 80095b0:	ec51 0b18 	vmov	r0, r1, d8
 80095b4:	f7f7 f828 	bl	8000608 <__aeabi_dmul>
 80095b8:	f1bb 0f1f 	cmp.w	fp, #31
 80095bc:	4604      	mov	r4, r0
 80095be:	460d      	mov	r5, r1
 80095c0:	dc0d      	bgt.n	80095de <__ieee754_rem_pio2+0x1ae>
 80095c2:	4b6e      	ldr	r3, [pc, #440]	; (800977c <__ieee754_rem_pio2+0x34c>)
 80095c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80095c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095cc:	4543      	cmp	r3, r8
 80095ce:	d006      	beq.n	80095de <__ieee754_rem_pio2+0x1ae>
 80095d0:	4622      	mov	r2, r4
 80095d2:	462b      	mov	r3, r5
 80095d4:	4630      	mov	r0, r6
 80095d6:	4639      	mov	r1, r7
 80095d8:	f7f6 fe5e 	bl	8000298 <__aeabi_dsub>
 80095dc:	e00f      	b.n	80095fe <__ieee754_rem_pio2+0x1ce>
 80095de:	462b      	mov	r3, r5
 80095e0:	4622      	mov	r2, r4
 80095e2:	4630      	mov	r0, r6
 80095e4:	4639      	mov	r1, r7
 80095e6:	f7f6 fe57 	bl	8000298 <__aeabi_dsub>
 80095ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80095ee:	9303      	str	r3, [sp, #12]
 80095f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80095f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80095f8:	f1b8 0f10 	cmp.w	r8, #16
 80095fc:	dc02      	bgt.n	8009604 <__ieee754_rem_pio2+0x1d4>
 80095fe:	e9ca 0100 	strd	r0, r1, [sl]
 8009602:	e039      	b.n	8009678 <__ieee754_rem_pio2+0x248>
 8009604:	a34e      	add	r3, pc, #312	; (adr r3, 8009740 <__ieee754_rem_pio2+0x310>)
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	ec51 0b18 	vmov	r0, r1, d8
 800960e:	f7f6 fffb 	bl	8000608 <__aeabi_dmul>
 8009612:	4604      	mov	r4, r0
 8009614:	460d      	mov	r5, r1
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	4630      	mov	r0, r6
 800961c:	4639      	mov	r1, r7
 800961e:	f7f6 fe3b 	bl	8000298 <__aeabi_dsub>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4680      	mov	r8, r0
 8009628:	4689      	mov	r9, r1
 800962a:	4630      	mov	r0, r6
 800962c:	4639      	mov	r1, r7
 800962e:	f7f6 fe33 	bl	8000298 <__aeabi_dsub>
 8009632:	4622      	mov	r2, r4
 8009634:	462b      	mov	r3, r5
 8009636:	f7f6 fe2f 	bl	8000298 <__aeabi_dsub>
 800963a:	a343      	add	r3, pc, #268	; (adr r3, 8009748 <__ieee754_rem_pio2+0x318>)
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	4604      	mov	r4, r0
 8009642:	460d      	mov	r5, r1
 8009644:	ec51 0b18 	vmov	r0, r1, d8
 8009648:	f7f6 ffde 	bl	8000608 <__aeabi_dmul>
 800964c:	4622      	mov	r2, r4
 800964e:	462b      	mov	r3, r5
 8009650:	f7f6 fe22 	bl	8000298 <__aeabi_dsub>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4604      	mov	r4, r0
 800965a:	460d      	mov	r5, r1
 800965c:	4640      	mov	r0, r8
 800965e:	4649      	mov	r1, r9
 8009660:	f7f6 fe1a 	bl	8000298 <__aeabi_dsub>
 8009664:	9a03      	ldr	r2, [sp, #12]
 8009666:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	2b31      	cmp	r3, #49	; 0x31
 800966e:	dc24      	bgt.n	80096ba <__ieee754_rem_pio2+0x28a>
 8009670:	e9ca 0100 	strd	r0, r1, [sl]
 8009674:	4646      	mov	r6, r8
 8009676:	464f      	mov	r7, r9
 8009678:	e9da 8900 	ldrd	r8, r9, [sl]
 800967c:	4630      	mov	r0, r6
 800967e:	4642      	mov	r2, r8
 8009680:	464b      	mov	r3, r9
 8009682:	4639      	mov	r1, r7
 8009684:	f7f6 fe08 	bl	8000298 <__aeabi_dsub>
 8009688:	462b      	mov	r3, r5
 800968a:	4622      	mov	r2, r4
 800968c:	f7f6 fe04 	bl	8000298 <__aeabi_dsub>
 8009690:	9b02      	ldr	r3, [sp, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009698:	f6bf af0a 	bge.w	80094b0 <__ieee754_rem_pio2+0x80>
 800969c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80096a0:	f8ca 3004 	str.w	r3, [sl, #4]
 80096a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096a8:	f8ca 8000 	str.w	r8, [sl]
 80096ac:	f8ca 0008 	str.w	r0, [sl, #8]
 80096b0:	f8ca 300c 	str.w	r3, [sl, #12]
 80096b4:	f1cb 0b00 	rsb	fp, fp, #0
 80096b8:	e6fa      	b.n	80094b0 <__ieee754_rem_pio2+0x80>
 80096ba:	a327      	add	r3, pc, #156	; (adr r3, 8009758 <__ieee754_rem_pio2+0x328>)
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	ec51 0b18 	vmov	r0, r1, d8
 80096c4:	f7f6 ffa0 	bl	8000608 <__aeabi_dmul>
 80096c8:	4604      	mov	r4, r0
 80096ca:	460d      	mov	r5, r1
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4640      	mov	r0, r8
 80096d2:	4649      	mov	r1, r9
 80096d4:	f7f6 fde0 	bl	8000298 <__aeabi_dsub>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4606      	mov	r6, r0
 80096de:	460f      	mov	r7, r1
 80096e0:	4640      	mov	r0, r8
 80096e2:	4649      	mov	r1, r9
 80096e4:	f7f6 fdd8 	bl	8000298 <__aeabi_dsub>
 80096e8:	4622      	mov	r2, r4
 80096ea:	462b      	mov	r3, r5
 80096ec:	f7f6 fdd4 	bl	8000298 <__aeabi_dsub>
 80096f0:	a31b      	add	r3, pc, #108	; (adr r3, 8009760 <__ieee754_rem_pio2+0x330>)
 80096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f6:	4604      	mov	r4, r0
 80096f8:	460d      	mov	r5, r1
 80096fa:	ec51 0b18 	vmov	r0, r1, d8
 80096fe:	f7f6 ff83 	bl	8000608 <__aeabi_dmul>
 8009702:	4622      	mov	r2, r4
 8009704:	462b      	mov	r3, r5
 8009706:	f7f6 fdc7 	bl	8000298 <__aeabi_dsub>
 800970a:	4604      	mov	r4, r0
 800970c:	460d      	mov	r5, r1
 800970e:	e75f      	b.n	80095d0 <__ieee754_rem_pio2+0x1a0>
 8009710:	4b1b      	ldr	r3, [pc, #108]	; (8009780 <__ieee754_rem_pio2+0x350>)
 8009712:	4598      	cmp	r8, r3
 8009714:	dd36      	ble.n	8009784 <__ieee754_rem_pio2+0x354>
 8009716:	ee10 2a10 	vmov	r2, s0
 800971a:	462b      	mov	r3, r5
 800971c:	4620      	mov	r0, r4
 800971e:	4629      	mov	r1, r5
 8009720:	f7f6 fdba 	bl	8000298 <__aeabi_dsub>
 8009724:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009728:	e9ca 0100 	strd	r0, r1, [sl]
 800972c:	e694      	b.n	8009458 <__ieee754_rem_pio2+0x28>
 800972e:	bf00      	nop
 8009730:	54400000 	.word	0x54400000
 8009734:	3ff921fb 	.word	0x3ff921fb
 8009738:	1a626331 	.word	0x1a626331
 800973c:	3dd0b461 	.word	0x3dd0b461
 8009740:	1a600000 	.word	0x1a600000
 8009744:	3dd0b461 	.word	0x3dd0b461
 8009748:	2e037073 	.word	0x2e037073
 800974c:	3ba3198a 	.word	0x3ba3198a
 8009750:	6dc9c883 	.word	0x6dc9c883
 8009754:	3fe45f30 	.word	0x3fe45f30
 8009758:	2e000000 	.word	0x2e000000
 800975c:	3ba3198a 	.word	0x3ba3198a
 8009760:	252049c1 	.word	0x252049c1
 8009764:	397b839a 	.word	0x397b839a
 8009768:	3fe921fb 	.word	0x3fe921fb
 800976c:	4002d97b 	.word	0x4002d97b
 8009770:	3ff921fb 	.word	0x3ff921fb
 8009774:	413921fb 	.word	0x413921fb
 8009778:	3fe00000 	.word	0x3fe00000
 800977c:	0800d3d0 	.word	0x0800d3d0
 8009780:	7fefffff 	.word	0x7fefffff
 8009784:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009788:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800978c:	ee10 0a10 	vmov	r0, s0
 8009790:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009794:	ee10 6a10 	vmov	r6, s0
 8009798:	460f      	mov	r7, r1
 800979a:	f7f7 f9e5 	bl	8000b68 <__aeabi_d2iz>
 800979e:	f7f6 fec9 	bl	8000534 <__aeabi_i2d>
 80097a2:	4602      	mov	r2, r0
 80097a4:	460b      	mov	r3, r1
 80097a6:	4630      	mov	r0, r6
 80097a8:	4639      	mov	r1, r7
 80097aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097ae:	f7f6 fd73 	bl	8000298 <__aeabi_dsub>
 80097b2:	4b23      	ldr	r3, [pc, #140]	; (8009840 <__ieee754_rem_pio2+0x410>)
 80097b4:	2200      	movs	r2, #0
 80097b6:	f7f6 ff27 	bl	8000608 <__aeabi_dmul>
 80097ba:	460f      	mov	r7, r1
 80097bc:	4606      	mov	r6, r0
 80097be:	f7f7 f9d3 	bl	8000b68 <__aeabi_d2iz>
 80097c2:	f7f6 feb7 	bl	8000534 <__aeabi_i2d>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	4630      	mov	r0, r6
 80097cc:	4639      	mov	r1, r7
 80097ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80097d2:	f7f6 fd61 	bl	8000298 <__aeabi_dsub>
 80097d6:	4b1a      	ldr	r3, [pc, #104]	; (8009840 <__ieee754_rem_pio2+0x410>)
 80097d8:	2200      	movs	r2, #0
 80097da:	f7f6 ff15 	bl	8000608 <__aeabi_dmul>
 80097de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80097e2:	ad04      	add	r5, sp, #16
 80097e4:	f04f 0803 	mov.w	r8, #3
 80097e8:	46a9      	mov	r9, r5
 80097ea:	2600      	movs	r6, #0
 80097ec:	2700      	movs	r7, #0
 80097ee:	4632      	mov	r2, r6
 80097f0:	463b      	mov	r3, r7
 80097f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80097f6:	46c3      	mov	fp, r8
 80097f8:	3d08      	subs	r5, #8
 80097fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80097fe:	f7f7 f96b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009802:	2800      	cmp	r0, #0
 8009804:	d1f3      	bne.n	80097ee <__ieee754_rem_pio2+0x3be>
 8009806:	4b0f      	ldr	r3, [pc, #60]	; (8009844 <__ieee754_rem_pio2+0x414>)
 8009808:	9301      	str	r3, [sp, #4]
 800980a:	2302      	movs	r3, #2
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	4622      	mov	r2, r4
 8009810:	465b      	mov	r3, fp
 8009812:	4651      	mov	r1, sl
 8009814:	4648      	mov	r0, r9
 8009816:	f000 f8df 	bl	80099d8 <__kernel_rem_pio2>
 800981a:	9b02      	ldr	r3, [sp, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	4683      	mov	fp, r0
 8009820:	f6bf ae46 	bge.w	80094b0 <__ieee754_rem_pio2+0x80>
 8009824:	e9da 2100 	ldrd	r2, r1, [sl]
 8009828:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800982c:	e9ca 2300 	strd	r2, r3, [sl]
 8009830:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009838:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800983c:	e73a      	b.n	80096b4 <__ieee754_rem_pio2+0x284>
 800983e:	bf00      	nop
 8009840:	41700000 	.word	0x41700000
 8009844:	0800d450 	.word	0x0800d450

08009848 <__kernel_cos>:
 8009848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	ec57 6b10 	vmov	r6, r7, d0
 8009850:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009854:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009858:	ed8d 1b00 	vstr	d1, [sp]
 800985c:	da07      	bge.n	800986e <__kernel_cos+0x26>
 800985e:	ee10 0a10 	vmov	r0, s0
 8009862:	4639      	mov	r1, r7
 8009864:	f7f7 f980 	bl	8000b68 <__aeabi_d2iz>
 8009868:	2800      	cmp	r0, #0
 800986a:	f000 8088 	beq.w	800997e <__kernel_cos+0x136>
 800986e:	4632      	mov	r2, r6
 8009870:	463b      	mov	r3, r7
 8009872:	4630      	mov	r0, r6
 8009874:	4639      	mov	r1, r7
 8009876:	f7f6 fec7 	bl	8000608 <__aeabi_dmul>
 800987a:	4b51      	ldr	r3, [pc, #324]	; (80099c0 <__kernel_cos+0x178>)
 800987c:	2200      	movs	r2, #0
 800987e:	4604      	mov	r4, r0
 8009880:	460d      	mov	r5, r1
 8009882:	f7f6 fec1 	bl	8000608 <__aeabi_dmul>
 8009886:	a340      	add	r3, pc, #256	; (adr r3, 8009988 <__kernel_cos+0x140>)
 8009888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988c:	4682      	mov	sl, r0
 800988e:	468b      	mov	fp, r1
 8009890:	4620      	mov	r0, r4
 8009892:	4629      	mov	r1, r5
 8009894:	f7f6 feb8 	bl	8000608 <__aeabi_dmul>
 8009898:	a33d      	add	r3, pc, #244	; (adr r3, 8009990 <__kernel_cos+0x148>)
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f7f6 fcfd 	bl	800029c <__adddf3>
 80098a2:	4622      	mov	r2, r4
 80098a4:	462b      	mov	r3, r5
 80098a6:	f7f6 feaf 	bl	8000608 <__aeabi_dmul>
 80098aa:	a33b      	add	r3, pc, #236	; (adr r3, 8009998 <__kernel_cos+0x150>)
 80098ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b0:	f7f6 fcf2 	bl	8000298 <__aeabi_dsub>
 80098b4:	4622      	mov	r2, r4
 80098b6:	462b      	mov	r3, r5
 80098b8:	f7f6 fea6 	bl	8000608 <__aeabi_dmul>
 80098bc:	a338      	add	r3, pc, #224	; (adr r3, 80099a0 <__kernel_cos+0x158>)
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	f7f6 fceb 	bl	800029c <__adddf3>
 80098c6:	4622      	mov	r2, r4
 80098c8:	462b      	mov	r3, r5
 80098ca:	f7f6 fe9d 	bl	8000608 <__aeabi_dmul>
 80098ce:	a336      	add	r3, pc, #216	; (adr r3, 80099a8 <__kernel_cos+0x160>)
 80098d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d4:	f7f6 fce0 	bl	8000298 <__aeabi_dsub>
 80098d8:	4622      	mov	r2, r4
 80098da:	462b      	mov	r3, r5
 80098dc:	f7f6 fe94 	bl	8000608 <__aeabi_dmul>
 80098e0:	a333      	add	r3, pc, #204	; (adr r3, 80099b0 <__kernel_cos+0x168>)
 80098e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e6:	f7f6 fcd9 	bl	800029c <__adddf3>
 80098ea:	4622      	mov	r2, r4
 80098ec:	462b      	mov	r3, r5
 80098ee:	f7f6 fe8b 	bl	8000608 <__aeabi_dmul>
 80098f2:	4622      	mov	r2, r4
 80098f4:	462b      	mov	r3, r5
 80098f6:	f7f6 fe87 	bl	8000608 <__aeabi_dmul>
 80098fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098fe:	4604      	mov	r4, r0
 8009900:	460d      	mov	r5, r1
 8009902:	4630      	mov	r0, r6
 8009904:	4639      	mov	r1, r7
 8009906:	f7f6 fe7f 	bl	8000608 <__aeabi_dmul>
 800990a:	460b      	mov	r3, r1
 800990c:	4602      	mov	r2, r0
 800990e:	4629      	mov	r1, r5
 8009910:	4620      	mov	r0, r4
 8009912:	f7f6 fcc1 	bl	8000298 <__aeabi_dsub>
 8009916:	4b2b      	ldr	r3, [pc, #172]	; (80099c4 <__kernel_cos+0x17c>)
 8009918:	4598      	cmp	r8, r3
 800991a:	4606      	mov	r6, r0
 800991c:	460f      	mov	r7, r1
 800991e:	dc10      	bgt.n	8009942 <__kernel_cos+0xfa>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4650      	mov	r0, sl
 8009926:	4659      	mov	r1, fp
 8009928:	f7f6 fcb6 	bl	8000298 <__aeabi_dsub>
 800992c:	460b      	mov	r3, r1
 800992e:	4926      	ldr	r1, [pc, #152]	; (80099c8 <__kernel_cos+0x180>)
 8009930:	4602      	mov	r2, r0
 8009932:	2000      	movs	r0, #0
 8009934:	f7f6 fcb0 	bl	8000298 <__aeabi_dsub>
 8009938:	ec41 0b10 	vmov	d0, r0, r1
 800993c:	b003      	add	sp, #12
 800993e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009942:	4b22      	ldr	r3, [pc, #136]	; (80099cc <__kernel_cos+0x184>)
 8009944:	4920      	ldr	r1, [pc, #128]	; (80099c8 <__kernel_cos+0x180>)
 8009946:	4598      	cmp	r8, r3
 8009948:	bfcc      	ite	gt
 800994a:	4d21      	ldrgt	r5, [pc, #132]	; (80099d0 <__kernel_cos+0x188>)
 800994c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009950:	2400      	movs	r4, #0
 8009952:	4622      	mov	r2, r4
 8009954:	462b      	mov	r3, r5
 8009956:	2000      	movs	r0, #0
 8009958:	f7f6 fc9e 	bl	8000298 <__aeabi_dsub>
 800995c:	4622      	mov	r2, r4
 800995e:	4680      	mov	r8, r0
 8009960:	4689      	mov	r9, r1
 8009962:	462b      	mov	r3, r5
 8009964:	4650      	mov	r0, sl
 8009966:	4659      	mov	r1, fp
 8009968:	f7f6 fc96 	bl	8000298 <__aeabi_dsub>
 800996c:	4632      	mov	r2, r6
 800996e:	463b      	mov	r3, r7
 8009970:	f7f6 fc92 	bl	8000298 <__aeabi_dsub>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4640      	mov	r0, r8
 800997a:	4649      	mov	r1, r9
 800997c:	e7da      	b.n	8009934 <__kernel_cos+0xec>
 800997e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80099b8 <__kernel_cos+0x170>
 8009982:	e7db      	b.n	800993c <__kernel_cos+0xf4>
 8009984:	f3af 8000 	nop.w
 8009988:	be8838d4 	.word	0xbe8838d4
 800998c:	bda8fae9 	.word	0xbda8fae9
 8009990:	bdb4b1c4 	.word	0xbdb4b1c4
 8009994:	3e21ee9e 	.word	0x3e21ee9e
 8009998:	809c52ad 	.word	0x809c52ad
 800999c:	3e927e4f 	.word	0x3e927e4f
 80099a0:	19cb1590 	.word	0x19cb1590
 80099a4:	3efa01a0 	.word	0x3efa01a0
 80099a8:	16c15177 	.word	0x16c15177
 80099ac:	3f56c16c 	.word	0x3f56c16c
 80099b0:	5555554c 	.word	0x5555554c
 80099b4:	3fa55555 	.word	0x3fa55555
 80099b8:	00000000 	.word	0x00000000
 80099bc:	3ff00000 	.word	0x3ff00000
 80099c0:	3fe00000 	.word	0x3fe00000
 80099c4:	3fd33332 	.word	0x3fd33332
 80099c8:	3ff00000 	.word	0x3ff00000
 80099cc:	3fe90000 	.word	0x3fe90000
 80099d0:	3fd20000 	.word	0x3fd20000
 80099d4:	00000000 	.word	0x00000000

080099d8 <__kernel_rem_pio2>:
 80099d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099dc:	ed2d 8b02 	vpush	{d8}
 80099e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80099e4:	f112 0f14 	cmn.w	r2, #20
 80099e8:	9308      	str	r3, [sp, #32]
 80099ea:	9101      	str	r1, [sp, #4]
 80099ec:	4bc4      	ldr	r3, [pc, #784]	; (8009d00 <__kernel_rem_pio2+0x328>)
 80099ee:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80099f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80099f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80099f6:	9302      	str	r3, [sp, #8]
 80099f8:	9b08      	ldr	r3, [sp, #32]
 80099fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80099fe:	bfa8      	it	ge
 8009a00:	1ed4      	subge	r4, r2, #3
 8009a02:	9306      	str	r3, [sp, #24]
 8009a04:	bfb2      	itee	lt
 8009a06:	2400      	movlt	r4, #0
 8009a08:	2318      	movge	r3, #24
 8009a0a:	fb94 f4f3 	sdivge	r4, r4, r3
 8009a0e:	f06f 0317 	mvn.w	r3, #23
 8009a12:	fb04 3303 	mla	r3, r4, r3, r3
 8009a16:	eb03 0a02 	add.w	sl, r3, r2
 8009a1a:	9b02      	ldr	r3, [sp, #8]
 8009a1c:	9a06      	ldr	r2, [sp, #24]
 8009a1e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009cf0 <__kernel_rem_pio2+0x318>
 8009a22:	eb03 0802 	add.w	r8, r3, r2
 8009a26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009a28:	1aa7      	subs	r7, r4, r2
 8009a2a:	ae22      	add	r6, sp, #136	; 0x88
 8009a2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009a30:	2500      	movs	r5, #0
 8009a32:	4545      	cmp	r5, r8
 8009a34:	dd13      	ble.n	8009a5e <__kernel_rem_pio2+0x86>
 8009a36:	9b08      	ldr	r3, [sp, #32]
 8009a38:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009cf0 <__kernel_rem_pio2+0x318>
 8009a3c:	aa22      	add	r2, sp, #136	; 0x88
 8009a3e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009a42:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009a46:	f04f 0800 	mov.w	r8, #0
 8009a4a:	9b02      	ldr	r3, [sp, #8]
 8009a4c:	4598      	cmp	r8, r3
 8009a4e:	dc2f      	bgt.n	8009ab0 <__kernel_rem_pio2+0xd8>
 8009a50:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009a54:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009a58:	462f      	mov	r7, r5
 8009a5a:	2600      	movs	r6, #0
 8009a5c:	e01b      	b.n	8009a96 <__kernel_rem_pio2+0xbe>
 8009a5e:	42ef      	cmn	r7, r5
 8009a60:	d407      	bmi.n	8009a72 <__kernel_rem_pio2+0x9a>
 8009a62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009a66:	f7f6 fd65 	bl	8000534 <__aeabi_i2d>
 8009a6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009a6e:	3501      	adds	r5, #1
 8009a70:	e7df      	b.n	8009a32 <__kernel_rem_pio2+0x5a>
 8009a72:	ec51 0b18 	vmov	r0, r1, d8
 8009a76:	e7f8      	b.n	8009a6a <__kernel_rem_pio2+0x92>
 8009a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009a80:	f7f6 fdc2 	bl	8000608 <__aeabi_dmul>
 8009a84:	4602      	mov	r2, r0
 8009a86:	460b      	mov	r3, r1
 8009a88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a8c:	f7f6 fc06 	bl	800029c <__adddf3>
 8009a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a94:	3601      	adds	r6, #1
 8009a96:	9b06      	ldr	r3, [sp, #24]
 8009a98:	429e      	cmp	r6, r3
 8009a9a:	f1a7 0708 	sub.w	r7, r7, #8
 8009a9e:	ddeb      	ble.n	8009a78 <__kernel_rem_pio2+0xa0>
 8009aa0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009aa4:	f108 0801 	add.w	r8, r8, #1
 8009aa8:	ecab 7b02 	vstmia	fp!, {d7}
 8009aac:	3508      	adds	r5, #8
 8009aae:	e7cc      	b.n	8009a4a <__kernel_rem_pio2+0x72>
 8009ab0:	9b02      	ldr	r3, [sp, #8]
 8009ab2:	aa0e      	add	r2, sp, #56	; 0x38
 8009ab4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ab8:	930d      	str	r3, [sp, #52]	; 0x34
 8009aba:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009abc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009ac0:	9c02      	ldr	r4, [sp, #8]
 8009ac2:	930c      	str	r3, [sp, #48]	; 0x30
 8009ac4:	00e3      	lsls	r3, r4, #3
 8009ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ac8:	ab9a      	add	r3, sp, #616	; 0x268
 8009aca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ace:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009ad2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8009ad6:	ab72      	add	r3, sp, #456	; 0x1c8
 8009ad8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8009adc:	46c3      	mov	fp, r8
 8009ade:	46a1      	mov	r9, r4
 8009ae0:	f1b9 0f00 	cmp.w	r9, #0
 8009ae4:	f1a5 0508 	sub.w	r5, r5, #8
 8009ae8:	dc77      	bgt.n	8009bda <__kernel_rem_pio2+0x202>
 8009aea:	ec47 6b10 	vmov	d0, r6, r7
 8009aee:	4650      	mov	r0, sl
 8009af0:	f000 fe2a 	bl	800a748 <scalbn>
 8009af4:	ec57 6b10 	vmov	r6, r7, d0
 8009af8:	2200      	movs	r2, #0
 8009afa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009afe:	ee10 0a10 	vmov	r0, s0
 8009b02:	4639      	mov	r1, r7
 8009b04:	f7f6 fd80 	bl	8000608 <__aeabi_dmul>
 8009b08:	ec41 0b10 	vmov	d0, r0, r1
 8009b0c:	f000 fd9c 	bl	800a648 <floor>
 8009b10:	4b7c      	ldr	r3, [pc, #496]	; (8009d04 <__kernel_rem_pio2+0x32c>)
 8009b12:	ec51 0b10 	vmov	r0, r1, d0
 8009b16:	2200      	movs	r2, #0
 8009b18:	f7f6 fd76 	bl	8000608 <__aeabi_dmul>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4630      	mov	r0, r6
 8009b22:	4639      	mov	r1, r7
 8009b24:	f7f6 fbb8 	bl	8000298 <__aeabi_dsub>
 8009b28:	460f      	mov	r7, r1
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	f7f7 f81c 	bl	8000b68 <__aeabi_d2iz>
 8009b30:	9004      	str	r0, [sp, #16]
 8009b32:	f7f6 fcff 	bl	8000534 <__aeabi_i2d>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4630      	mov	r0, r6
 8009b3c:	4639      	mov	r1, r7
 8009b3e:	f7f6 fbab 	bl	8000298 <__aeabi_dsub>
 8009b42:	f1ba 0f00 	cmp.w	sl, #0
 8009b46:	4606      	mov	r6, r0
 8009b48:	460f      	mov	r7, r1
 8009b4a:	dd6d      	ble.n	8009c28 <__kernel_rem_pio2+0x250>
 8009b4c:	1e62      	subs	r2, r4, #1
 8009b4e:	ab0e      	add	r3, sp, #56	; 0x38
 8009b50:	9d04      	ldr	r5, [sp, #16]
 8009b52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009b56:	f1ca 0118 	rsb	r1, sl, #24
 8009b5a:	fa40 f301 	asr.w	r3, r0, r1
 8009b5e:	441d      	add	r5, r3
 8009b60:	408b      	lsls	r3, r1
 8009b62:	1ac0      	subs	r0, r0, r3
 8009b64:	ab0e      	add	r3, sp, #56	; 0x38
 8009b66:	9504      	str	r5, [sp, #16]
 8009b68:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009b6c:	f1ca 0317 	rsb	r3, sl, #23
 8009b70:	fa40 fb03 	asr.w	fp, r0, r3
 8009b74:	f1bb 0f00 	cmp.w	fp, #0
 8009b78:	dd65      	ble.n	8009c46 <__kernel_rem_pio2+0x26e>
 8009b7a:	9b04      	ldr	r3, [sp, #16]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	3301      	adds	r3, #1
 8009b80:	9304      	str	r3, [sp, #16]
 8009b82:	4615      	mov	r5, r2
 8009b84:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009b88:	4294      	cmp	r4, r2
 8009b8a:	f300 809c 	bgt.w	8009cc6 <__kernel_rem_pio2+0x2ee>
 8009b8e:	f1ba 0f00 	cmp.w	sl, #0
 8009b92:	dd07      	ble.n	8009ba4 <__kernel_rem_pio2+0x1cc>
 8009b94:	f1ba 0f01 	cmp.w	sl, #1
 8009b98:	f000 80c0 	beq.w	8009d1c <__kernel_rem_pio2+0x344>
 8009b9c:	f1ba 0f02 	cmp.w	sl, #2
 8009ba0:	f000 80c6 	beq.w	8009d30 <__kernel_rem_pio2+0x358>
 8009ba4:	f1bb 0f02 	cmp.w	fp, #2
 8009ba8:	d14d      	bne.n	8009c46 <__kernel_rem_pio2+0x26e>
 8009baa:	4632      	mov	r2, r6
 8009bac:	463b      	mov	r3, r7
 8009bae:	4956      	ldr	r1, [pc, #344]	; (8009d08 <__kernel_rem_pio2+0x330>)
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	f7f6 fb71 	bl	8000298 <__aeabi_dsub>
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	460f      	mov	r7, r1
 8009bba:	2d00      	cmp	r5, #0
 8009bbc:	d043      	beq.n	8009c46 <__kernel_rem_pio2+0x26e>
 8009bbe:	4650      	mov	r0, sl
 8009bc0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009cf8 <__kernel_rem_pio2+0x320>
 8009bc4:	f000 fdc0 	bl	800a748 <scalbn>
 8009bc8:	4630      	mov	r0, r6
 8009bca:	4639      	mov	r1, r7
 8009bcc:	ec53 2b10 	vmov	r2, r3, d0
 8009bd0:	f7f6 fb62 	bl	8000298 <__aeabi_dsub>
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	460f      	mov	r7, r1
 8009bd8:	e035      	b.n	8009c46 <__kernel_rem_pio2+0x26e>
 8009bda:	4b4c      	ldr	r3, [pc, #304]	; (8009d0c <__kernel_rem_pio2+0x334>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	4630      	mov	r0, r6
 8009be0:	4639      	mov	r1, r7
 8009be2:	f7f6 fd11 	bl	8000608 <__aeabi_dmul>
 8009be6:	f7f6 ffbf 	bl	8000b68 <__aeabi_d2iz>
 8009bea:	f7f6 fca3 	bl	8000534 <__aeabi_i2d>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	ec43 2b18 	vmov	d8, r2, r3
 8009bf6:	4b46      	ldr	r3, [pc, #280]	; (8009d10 <__kernel_rem_pio2+0x338>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f7f6 fd05 	bl	8000608 <__aeabi_dmul>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	4630      	mov	r0, r6
 8009c04:	4639      	mov	r1, r7
 8009c06:	f7f6 fb47 	bl	8000298 <__aeabi_dsub>
 8009c0a:	f7f6 ffad 	bl	8000b68 <__aeabi_d2iz>
 8009c0e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c12:	f84b 0b04 	str.w	r0, [fp], #4
 8009c16:	ec51 0b18 	vmov	r0, r1, d8
 8009c1a:	f7f6 fb3f 	bl	800029c <__adddf3>
 8009c1e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009c22:	4606      	mov	r6, r0
 8009c24:	460f      	mov	r7, r1
 8009c26:	e75b      	b.n	8009ae0 <__kernel_rem_pio2+0x108>
 8009c28:	d106      	bne.n	8009c38 <__kernel_rem_pio2+0x260>
 8009c2a:	1e63      	subs	r3, r4, #1
 8009c2c:	aa0e      	add	r2, sp, #56	; 0x38
 8009c2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009c32:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009c36:	e79d      	b.n	8009b74 <__kernel_rem_pio2+0x19c>
 8009c38:	4b36      	ldr	r3, [pc, #216]	; (8009d14 <__kernel_rem_pio2+0x33c>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f7f6 ff6a 	bl	8000b14 <__aeabi_dcmpge>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d13d      	bne.n	8009cc0 <__kernel_rem_pio2+0x2e8>
 8009c44:	4683      	mov	fp, r0
 8009c46:	2200      	movs	r2, #0
 8009c48:	2300      	movs	r3, #0
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	f7f6 ff43 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	f000 80c0 	beq.w	8009dd8 <__kernel_rem_pio2+0x400>
 8009c58:	1e65      	subs	r5, r4, #1
 8009c5a:	462b      	mov	r3, r5
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	9902      	ldr	r1, [sp, #8]
 8009c60:	428b      	cmp	r3, r1
 8009c62:	da6c      	bge.n	8009d3e <__kernel_rem_pio2+0x366>
 8009c64:	2a00      	cmp	r2, #0
 8009c66:	f000 8089 	beq.w	8009d7c <__kernel_rem_pio2+0x3a4>
 8009c6a:	ab0e      	add	r3, sp, #56	; 0x38
 8009c6c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009c70:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f000 80ad 	beq.w	8009dd4 <__kernel_rem_pio2+0x3fc>
 8009c7a:	4650      	mov	r0, sl
 8009c7c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009cf8 <__kernel_rem_pio2+0x320>
 8009c80:	f000 fd62 	bl	800a748 <scalbn>
 8009c84:	ab9a      	add	r3, sp, #616	; 0x268
 8009c86:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009c8a:	ec57 6b10 	vmov	r6, r7, d0
 8009c8e:	00ec      	lsls	r4, r5, #3
 8009c90:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8009c94:	46aa      	mov	sl, r5
 8009c96:	f1ba 0f00 	cmp.w	sl, #0
 8009c9a:	f280 80d6 	bge.w	8009e4a <__kernel_rem_pio2+0x472>
 8009c9e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009cf0 <__kernel_rem_pio2+0x318>
 8009ca2:	462e      	mov	r6, r5
 8009ca4:	2e00      	cmp	r6, #0
 8009ca6:	f2c0 8104 	blt.w	8009eb2 <__kernel_rem_pio2+0x4da>
 8009caa:	ab72      	add	r3, sp, #456	; 0x1c8
 8009cac:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009cb0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009d18 <__kernel_rem_pio2+0x340>
 8009cb4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009cb8:	f04f 0800 	mov.w	r8, #0
 8009cbc:	1baf      	subs	r7, r5, r6
 8009cbe:	e0ea      	b.n	8009e96 <__kernel_rem_pio2+0x4be>
 8009cc0:	f04f 0b02 	mov.w	fp, #2
 8009cc4:	e759      	b.n	8009b7a <__kernel_rem_pio2+0x1a2>
 8009cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8009cca:	b955      	cbnz	r5, 8009ce2 <__kernel_rem_pio2+0x30a>
 8009ccc:	b123      	cbz	r3, 8009cd8 <__kernel_rem_pio2+0x300>
 8009cce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009cd2:	f8c8 3000 	str.w	r3, [r8]
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	3201      	adds	r2, #1
 8009cda:	f108 0804 	add.w	r8, r8, #4
 8009cde:	461d      	mov	r5, r3
 8009ce0:	e752      	b.n	8009b88 <__kernel_rem_pio2+0x1b0>
 8009ce2:	1acb      	subs	r3, r1, r3
 8009ce4:	f8c8 3000 	str.w	r3, [r8]
 8009ce8:	462b      	mov	r3, r5
 8009cea:	e7f5      	b.n	8009cd8 <__kernel_rem_pio2+0x300>
 8009cec:	f3af 8000 	nop.w
	...
 8009cfc:	3ff00000 	.word	0x3ff00000
 8009d00:	0800d598 	.word	0x0800d598
 8009d04:	40200000 	.word	0x40200000
 8009d08:	3ff00000 	.word	0x3ff00000
 8009d0c:	3e700000 	.word	0x3e700000
 8009d10:	41700000 	.word	0x41700000
 8009d14:	3fe00000 	.word	0x3fe00000
 8009d18:	0800d558 	.word	0x0800d558
 8009d1c:	1e62      	subs	r2, r4, #1
 8009d1e:	ab0e      	add	r3, sp, #56	; 0x38
 8009d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009d28:	a90e      	add	r1, sp, #56	; 0x38
 8009d2a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009d2e:	e739      	b.n	8009ba4 <__kernel_rem_pio2+0x1cc>
 8009d30:	1e62      	subs	r2, r4, #1
 8009d32:	ab0e      	add	r3, sp, #56	; 0x38
 8009d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d38:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009d3c:	e7f4      	b.n	8009d28 <__kernel_rem_pio2+0x350>
 8009d3e:	a90e      	add	r1, sp, #56	; 0x38
 8009d40:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009d44:	3b01      	subs	r3, #1
 8009d46:	430a      	orrs	r2, r1
 8009d48:	e789      	b.n	8009c5e <__kernel_rem_pio2+0x286>
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009d50:	2900      	cmp	r1, #0
 8009d52:	d0fa      	beq.n	8009d4a <__kernel_rem_pio2+0x372>
 8009d54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d56:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8009d5a:	446a      	add	r2, sp
 8009d5c:	3a98      	subs	r2, #152	; 0x98
 8009d5e:	920a      	str	r2, [sp, #40]	; 0x28
 8009d60:	9a08      	ldr	r2, [sp, #32]
 8009d62:	18e3      	adds	r3, r4, r3
 8009d64:	18a5      	adds	r5, r4, r2
 8009d66:	aa22      	add	r2, sp, #136	; 0x88
 8009d68:	f104 0801 	add.w	r8, r4, #1
 8009d6c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009d70:	9304      	str	r3, [sp, #16]
 8009d72:	9b04      	ldr	r3, [sp, #16]
 8009d74:	4543      	cmp	r3, r8
 8009d76:	da04      	bge.n	8009d82 <__kernel_rem_pio2+0x3aa>
 8009d78:	461c      	mov	r4, r3
 8009d7a:	e6a3      	b.n	8009ac4 <__kernel_rem_pio2+0xec>
 8009d7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e7e4      	b.n	8009d4c <__kernel_rem_pio2+0x374>
 8009d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d84:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009d88:	f7f6 fbd4 	bl	8000534 <__aeabi_i2d>
 8009d8c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d92:	46ab      	mov	fp, r5
 8009d94:	461c      	mov	r4, r3
 8009d96:	f04f 0900 	mov.w	r9, #0
 8009d9a:	2600      	movs	r6, #0
 8009d9c:	2700      	movs	r7, #0
 8009d9e:	9b06      	ldr	r3, [sp, #24]
 8009da0:	4599      	cmp	r9, r3
 8009da2:	dd06      	ble.n	8009db2 <__kernel_rem_pio2+0x3da>
 8009da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009da6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009daa:	f108 0801 	add.w	r8, r8, #1
 8009dae:	930a      	str	r3, [sp, #40]	; 0x28
 8009db0:	e7df      	b.n	8009d72 <__kernel_rem_pio2+0x39a>
 8009db2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009db6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009dba:	f7f6 fc25 	bl	8000608 <__aeabi_dmul>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	4639      	mov	r1, r7
 8009dc6:	f7f6 fa69 	bl	800029c <__adddf3>
 8009dca:	f109 0901 	add.w	r9, r9, #1
 8009dce:	4606      	mov	r6, r0
 8009dd0:	460f      	mov	r7, r1
 8009dd2:	e7e4      	b.n	8009d9e <__kernel_rem_pio2+0x3c6>
 8009dd4:	3d01      	subs	r5, #1
 8009dd6:	e748      	b.n	8009c6a <__kernel_rem_pio2+0x292>
 8009dd8:	ec47 6b10 	vmov	d0, r6, r7
 8009ddc:	f1ca 0000 	rsb	r0, sl, #0
 8009de0:	f000 fcb2 	bl	800a748 <scalbn>
 8009de4:	ec57 6b10 	vmov	r6, r7, d0
 8009de8:	4ba0      	ldr	r3, [pc, #640]	; (800a06c <__kernel_rem_pio2+0x694>)
 8009dea:	ee10 0a10 	vmov	r0, s0
 8009dee:	2200      	movs	r2, #0
 8009df0:	4639      	mov	r1, r7
 8009df2:	f7f6 fe8f 	bl	8000b14 <__aeabi_dcmpge>
 8009df6:	b1f8      	cbz	r0, 8009e38 <__kernel_rem_pio2+0x460>
 8009df8:	4b9d      	ldr	r3, [pc, #628]	; (800a070 <__kernel_rem_pio2+0x698>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	4639      	mov	r1, r7
 8009e00:	f7f6 fc02 	bl	8000608 <__aeabi_dmul>
 8009e04:	f7f6 feb0 	bl	8000b68 <__aeabi_d2iz>
 8009e08:	4680      	mov	r8, r0
 8009e0a:	f7f6 fb93 	bl	8000534 <__aeabi_i2d>
 8009e0e:	4b97      	ldr	r3, [pc, #604]	; (800a06c <__kernel_rem_pio2+0x694>)
 8009e10:	2200      	movs	r2, #0
 8009e12:	f7f6 fbf9 	bl	8000608 <__aeabi_dmul>
 8009e16:	460b      	mov	r3, r1
 8009e18:	4602      	mov	r2, r0
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f7f6 fa3b 	bl	8000298 <__aeabi_dsub>
 8009e22:	f7f6 fea1 	bl	8000b68 <__aeabi_d2iz>
 8009e26:	1c65      	adds	r5, r4, #1
 8009e28:	ab0e      	add	r3, sp, #56	; 0x38
 8009e2a:	f10a 0a18 	add.w	sl, sl, #24
 8009e2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009e32:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009e36:	e720      	b.n	8009c7a <__kernel_rem_pio2+0x2a2>
 8009e38:	4630      	mov	r0, r6
 8009e3a:	4639      	mov	r1, r7
 8009e3c:	f7f6 fe94 	bl	8000b68 <__aeabi_d2iz>
 8009e40:	ab0e      	add	r3, sp, #56	; 0x38
 8009e42:	4625      	mov	r5, r4
 8009e44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009e48:	e717      	b.n	8009c7a <__kernel_rem_pio2+0x2a2>
 8009e4a:	ab0e      	add	r3, sp, #56	; 0x38
 8009e4c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009e50:	f7f6 fb70 	bl	8000534 <__aeabi_i2d>
 8009e54:	4632      	mov	r2, r6
 8009e56:	463b      	mov	r3, r7
 8009e58:	f7f6 fbd6 	bl	8000608 <__aeabi_dmul>
 8009e5c:	4b84      	ldr	r3, [pc, #528]	; (800a070 <__kernel_rem_pio2+0x698>)
 8009e5e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009e62:	2200      	movs	r2, #0
 8009e64:	4630      	mov	r0, r6
 8009e66:	4639      	mov	r1, r7
 8009e68:	f7f6 fbce 	bl	8000608 <__aeabi_dmul>
 8009e6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e70:	4606      	mov	r6, r0
 8009e72:	460f      	mov	r7, r1
 8009e74:	e70f      	b.n	8009c96 <__kernel_rem_pio2+0x2be>
 8009e76:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009e7a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009e7e:	f7f6 fbc3 	bl	8000608 <__aeabi_dmul>
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e8a:	f7f6 fa07 	bl	800029c <__adddf3>
 8009e8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e92:	f108 0801 	add.w	r8, r8, #1
 8009e96:	9b02      	ldr	r3, [sp, #8]
 8009e98:	4598      	cmp	r8, r3
 8009e9a:	dc01      	bgt.n	8009ea0 <__kernel_rem_pio2+0x4c8>
 8009e9c:	45b8      	cmp	r8, r7
 8009e9e:	ddea      	ble.n	8009e76 <__kernel_rem_pio2+0x49e>
 8009ea0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009ea4:	ab4a      	add	r3, sp, #296	; 0x128
 8009ea6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009eaa:	ed87 7b00 	vstr	d7, [r7]
 8009eae:	3e01      	subs	r6, #1
 8009eb0:	e6f8      	b.n	8009ca4 <__kernel_rem_pio2+0x2cc>
 8009eb2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	dc0b      	bgt.n	8009ed0 <__kernel_rem_pio2+0x4f8>
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	dc35      	bgt.n	8009f28 <__kernel_rem_pio2+0x550>
 8009ebc:	d059      	beq.n	8009f72 <__kernel_rem_pio2+0x59a>
 8009ebe:	9b04      	ldr	r3, [sp, #16]
 8009ec0:	f003 0007 	and.w	r0, r3, #7
 8009ec4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009ec8:	ecbd 8b02 	vpop	{d8}
 8009ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d1f3      	bne.n	8009ebe <__kernel_rem_pio2+0x4e6>
 8009ed6:	ab4a      	add	r3, sp, #296	; 0x128
 8009ed8:	4423      	add	r3, r4
 8009eda:	9306      	str	r3, [sp, #24]
 8009edc:	461c      	mov	r4, r3
 8009ede:	469a      	mov	sl, r3
 8009ee0:	9502      	str	r5, [sp, #8]
 8009ee2:	9b02      	ldr	r3, [sp, #8]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f1aa 0a08 	sub.w	sl, sl, #8
 8009eea:	dc6b      	bgt.n	8009fc4 <__kernel_rem_pio2+0x5ec>
 8009eec:	46aa      	mov	sl, r5
 8009eee:	f1ba 0f01 	cmp.w	sl, #1
 8009ef2:	f1a4 0408 	sub.w	r4, r4, #8
 8009ef6:	f300 8085 	bgt.w	800a004 <__kernel_rem_pio2+0x62c>
 8009efa:	9c06      	ldr	r4, [sp, #24]
 8009efc:	2000      	movs	r0, #0
 8009efe:	3408      	adds	r4, #8
 8009f00:	2100      	movs	r1, #0
 8009f02:	2d01      	cmp	r5, #1
 8009f04:	f300 809d 	bgt.w	800a042 <__kernel_rem_pio2+0x66a>
 8009f08:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009f0c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009f10:	f1bb 0f00 	cmp.w	fp, #0
 8009f14:	f040 809b 	bne.w	800a04e <__kernel_rem_pio2+0x676>
 8009f18:	9b01      	ldr	r3, [sp, #4]
 8009f1a:	e9c3 5600 	strd	r5, r6, [r3]
 8009f1e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009f22:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009f26:	e7ca      	b.n	8009ebe <__kernel_rem_pio2+0x4e6>
 8009f28:	3408      	adds	r4, #8
 8009f2a:	ab4a      	add	r3, sp, #296	; 0x128
 8009f2c:	441c      	add	r4, r3
 8009f2e:	462e      	mov	r6, r5
 8009f30:	2000      	movs	r0, #0
 8009f32:	2100      	movs	r1, #0
 8009f34:	2e00      	cmp	r6, #0
 8009f36:	da36      	bge.n	8009fa6 <__kernel_rem_pio2+0x5ce>
 8009f38:	f1bb 0f00 	cmp.w	fp, #0
 8009f3c:	d039      	beq.n	8009fb2 <__kernel_rem_pio2+0x5da>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f44:	9c01      	ldr	r4, [sp, #4]
 8009f46:	e9c4 2300 	strd	r2, r3, [r4]
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009f52:	f7f6 f9a1 	bl	8000298 <__aeabi_dsub>
 8009f56:	ae4c      	add	r6, sp, #304	; 0x130
 8009f58:	2401      	movs	r4, #1
 8009f5a:	42a5      	cmp	r5, r4
 8009f5c:	da2c      	bge.n	8009fb8 <__kernel_rem_pio2+0x5e0>
 8009f5e:	f1bb 0f00 	cmp.w	fp, #0
 8009f62:	d002      	beq.n	8009f6a <__kernel_rem_pio2+0x592>
 8009f64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f68:	4619      	mov	r1, r3
 8009f6a:	9b01      	ldr	r3, [sp, #4]
 8009f6c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009f70:	e7a5      	b.n	8009ebe <__kernel_rem_pio2+0x4e6>
 8009f72:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009f76:	eb0d 0403 	add.w	r4, sp, r3
 8009f7a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009f7e:	2000      	movs	r0, #0
 8009f80:	2100      	movs	r1, #0
 8009f82:	2d00      	cmp	r5, #0
 8009f84:	da09      	bge.n	8009f9a <__kernel_rem_pio2+0x5c2>
 8009f86:	f1bb 0f00 	cmp.w	fp, #0
 8009f8a:	d002      	beq.n	8009f92 <__kernel_rem_pio2+0x5ba>
 8009f8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f90:	4619      	mov	r1, r3
 8009f92:	9b01      	ldr	r3, [sp, #4]
 8009f94:	e9c3 0100 	strd	r0, r1, [r3]
 8009f98:	e791      	b.n	8009ebe <__kernel_rem_pio2+0x4e6>
 8009f9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009f9e:	f7f6 f97d 	bl	800029c <__adddf3>
 8009fa2:	3d01      	subs	r5, #1
 8009fa4:	e7ed      	b.n	8009f82 <__kernel_rem_pio2+0x5aa>
 8009fa6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009faa:	f7f6 f977 	bl	800029c <__adddf3>
 8009fae:	3e01      	subs	r6, #1
 8009fb0:	e7c0      	b.n	8009f34 <__kernel_rem_pio2+0x55c>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	e7c5      	b.n	8009f44 <__kernel_rem_pio2+0x56c>
 8009fb8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009fbc:	f7f6 f96e 	bl	800029c <__adddf3>
 8009fc0:	3401      	adds	r4, #1
 8009fc2:	e7ca      	b.n	8009f5a <__kernel_rem_pio2+0x582>
 8009fc4:	e9da 8900 	ldrd	r8, r9, [sl]
 8009fc8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009fcc:	9b02      	ldr	r3, [sp, #8]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	9302      	str	r3, [sp, #8]
 8009fd2:	4632      	mov	r2, r6
 8009fd4:	463b      	mov	r3, r7
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	4649      	mov	r1, r9
 8009fda:	f7f6 f95f 	bl	800029c <__adddf3>
 8009fde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	4649      	mov	r1, r9
 8009fea:	f7f6 f955 	bl	8000298 <__aeabi_dsub>
 8009fee:	4632      	mov	r2, r6
 8009ff0:	463b      	mov	r3, r7
 8009ff2:	f7f6 f953 	bl	800029c <__adddf3>
 8009ff6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009ffa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009ffe:	ed8a 7b00 	vstr	d7, [sl]
 800a002:	e76e      	b.n	8009ee2 <__kernel_rem_pio2+0x50a>
 800a004:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a008:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a00c:	4640      	mov	r0, r8
 800a00e:	4632      	mov	r2, r6
 800a010:	463b      	mov	r3, r7
 800a012:	4649      	mov	r1, r9
 800a014:	f7f6 f942 	bl	800029c <__adddf3>
 800a018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4640      	mov	r0, r8
 800a022:	4649      	mov	r1, r9
 800a024:	f7f6 f938 	bl	8000298 <__aeabi_dsub>
 800a028:	4632      	mov	r2, r6
 800a02a:	463b      	mov	r3, r7
 800a02c:	f7f6 f936 	bl	800029c <__adddf3>
 800a030:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a034:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a038:	ed84 7b00 	vstr	d7, [r4]
 800a03c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a040:	e755      	b.n	8009eee <__kernel_rem_pio2+0x516>
 800a042:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a046:	f7f6 f929 	bl	800029c <__adddf3>
 800a04a:	3d01      	subs	r5, #1
 800a04c:	e759      	b.n	8009f02 <__kernel_rem_pio2+0x52a>
 800a04e:	9b01      	ldr	r3, [sp, #4]
 800a050:	9a01      	ldr	r2, [sp, #4]
 800a052:	601d      	str	r5, [r3, #0]
 800a054:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a058:	605c      	str	r4, [r3, #4]
 800a05a:	609f      	str	r7, [r3, #8]
 800a05c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a060:	60d3      	str	r3, [r2, #12]
 800a062:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a066:	6110      	str	r0, [r2, #16]
 800a068:	6153      	str	r3, [r2, #20]
 800a06a:	e728      	b.n	8009ebe <__kernel_rem_pio2+0x4e6>
 800a06c:	41700000 	.word	0x41700000
 800a070:	3e700000 	.word	0x3e700000
 800a074:	00000000 	.word	0x00000000

0800a078 <__kernel_sin>:
 800a078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07c:	ed2d 8b04 	vpush	{d8-d9}
 800a080:	eeb0 8a41 	vmov.f32	s16, s2
 800a084:	eef0 8a61 	vmov.f32	s17, s3
 800a088:	ec55 4b10 	vmov	r4, r5, d0
 800a08c:	b083      	sub	sp, #12
 800a08e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a092:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a096:	9001      	str	r0, [sp, #4]
 800a098:	da06      	bge.n	800a0a8 <__kernel_sin+0x30>
 800a09a:	ee10 0a10 	vmov	r0, s0
 800a09e:	4629      	mov	r1, r5
 800a0a0:	f7f6 fd62 	bl	8000b68 <__aeabi_d2iz>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d051      	beq.n	800a14c <__kernel_sin+0xd4>
 800a0a8:	4622      	mov	r2, r4
 800a0aa:	462b      	mov	r3, r5
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	f7f6 faaa 	bl	8000608 <__aeabi_dmul>
 800a0b4:	4682      	mov	sl, r0
 800a0b6:	468b      	mov	fp, r1
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	4620      	mov	r0, r4
 800a0be:	4629      	mov	r1, r5
 800a0c0:	f7f6 faa2 	bl	8000608 <__aeabi_dmul>
 800a0c4:	a341      	add	r3, pc, #260	; (adr r3, 800a1cc <__kernel_sin+0x154>)
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	4680      	mov	r8, r0
 800a0cc:	4689      	mov	r9, r1
 800a0ce:	4650      	mov	r0, sl
 800a0d0:	4659      	mov	r1, fp
 800a0d2:	f7f6 fa99 	bl	8000608 <__aeabi_dmul>
 800a0d6:	a33f      	add	r3, pc, #252	; (adr r3, 800a1d4 <__kernel_sin+0x15c>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	f7f6 f8dc 	bl	8000298 <__aeabi_dsub>
 800a0e0:	4652      	mov	r2, sl
 800a0e2:	465b      	mov	r3, fp
 800a0e4:	f7f6 fa90 	bl	8000608 <__aeabi_dmul>
 800a0e8:	a33c      	add	r3, pc, #240	; (adr r3, 800a1dc <__kernel_sin+0x164>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f7f6 f8d5 	bl	800029c <__adddf3>
 800a0f2:	4652      	mov	r2, sl
 800a0f4:	465b      	mov	r3, fp
 800a0f6:	f7f6 fa87 	bl	8000608 <__aeabi_dmul>
 800a0fa:	a33a      	add	r3, pc, #232	; (adr r3, 800a1e4 <__kernel_sin+0x16c>)
 800a0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a100:	f7f6 f8ca 	bl	8000298 <__aeabi_dsub>
 800a104:	4652      	mov	r2, sl
 800a106:	465b      	mov	r3, fp
 800a108:	f7f6 fa7e 	bl	8000608 <__aeabi_dmul>
 800a10c:	a337      	add	r3, pc, #220	; (adr r3, 800a1ec <__kernel_sin+0x174>)
 800a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a112:	f7f6 f8c3 	bl	800029c <__adddf3>
 800a116:	9b01      	ldr	r3, [sp, #4]
 800a118:	4606      	mov	r6, r0
 800a11a:	460f      	mov	r7, r1
 800a11c:	b9eb      	cbnz	r3, 800a15a <__kernel_sin+0xe2>
 800a11e:	4602      	mov	r2, r0
 800a120:	460b      	mov	r3, r1
 800a122:	4650      	mov	r0, sl
 800a124:	4659      	mov	r1, fp
 800a126:	f7f6 fa6f 	bl	8000608 <__aeabi_dmul>
 800a12a:	a325      	add	r3, pc, #148	; (adr r3, 800a1c0 <__kernel_sin+0x148>)
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	f7f6 f8b2 	bl	8000298 <__aeabi_dsub>
 800a134:	4642      	mov	r2, r8
 800a136:	464b      	mov	r3, r9
 800a138:	f7f6 fa66 	bl	8000608 <__aeabi_dmul>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4620      	mov	r0, r4
 800a142:	4629      	mov	r1, r5
 800a144:	f7f6 f8aa 	bl	800029c <__adddf3>
 800a148:	4604      	mov	r4, r0
 800a14a:	460d      	mov	r5, r1
 800a14c:	ec45 4b10 	vmov	d0, r4, r5
 800a150:	b003      	add	sp, #12
 800a152:	ecbd 8b04 	vpop	{d8-d9}
 800a156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15a:	4b1b      	ldr	r3, [pc, #108]	; (800a1c8 <__kernel_sin+0x150>)
 800a15c:	ec51 0b18 	vmov	r0, r1, d8
 800a160:	2200      	movs	r2, #0
 800a162:	f7f6 fa51 	bl	8000608 <__aeabi_dmul>
 800a166:	4632      	mov	r2, r6
 800a168:	ec41 0b19 	vmov	d9, r0, r1
 800a16c:	463b      	mov	r3, r7
 800a16e:	4640      	mov	r0, r8
 800a170:	4649      	mov	r1, r9
 800a172:	f7f6 fa49 	bl	8000608 <__aeabi_dmul>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	ec51 0b19 	vmov	r0, r1, d9
 800a17e:	f7f6 f88b 	bl	8000298 <__aeabi_dsub>
 800a182:	4652      	mov	r2, sl
 800a184:	465b      	mov	r3, fp
 800a186:	f7f6 fa3f 	bl	8000608 <__aeabi_dmul>
 800a18a:	ec53 2b18 	vmov	r2, r3, d8
 800a18e:	f7f6 f883 	bl	8000298 <__aeabi_dsub>
 800a192:	a30b      	add	r3, pc, #44	; (adr r3, 800a1c0 <__kernel_sin+0x148>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	4606      	mov	r6, r0
 800a19a:	460f      	mov	r7, r1
 800a19c:	4640      	mov	r0, r8
 800a19e:	4649      	mov	r1, r9
 800a1a0:	f7f6 fa32 	bl	8000608 <__aeabi_dmul>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	4639      	mov	r1, r7
 800a1ac:	f7f6 f876 	bl	800029c <__adddf3>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	f7f6 f86e 	bl	8000298 <__aeabi_dsub>
 800a1bc:	e7c4      	b.n	800a148 <__kernel_sin+0xd0>
 800a1be:	bf00      	nop
 800a1c0:	55555549 	.word	0x55555549
 800a1c4:	3fc55555 	.word	0x3fc55555
 800a1c8:	3fe00000 	.word	0x3fe00000
 800a1cc:	5acfd57c 	.word	0x5acfd57c
 800a1d0:	3de5d93a 	.word	0x3de5d93a
 800a1d4:	8a2b9ceb 	.word	0x8a2b9ceb
 800a1d8:	3e5ae5e6 	.word	0x3e5ae5e6
 800a1dc:	57b1fe7d 	.word	0x57b1fe7d
 800a1e0:	3ec71de3 	.word	0x3ec71de3
 800a1e4:	19c161d5 	.word	0x19c161d5
 800a1e8:	3f2a01a0 	.word	0x3f2a01a0
 800a1ec:	1110f8a6 	.word	0x1110f8a6
 800a1f0:	3f811111 	.word	0x3f811111
 800a1f4:	00000000 	.word	0x00000000

0800a1f8 <expm1>:
 800a1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1fc:	ec55 4b10 	vmov	r4, r5, d0
 800a200:	4ad5      	ldr	r2, [pc, #852]	; (800a558 <expm1+0x360>)
 800a202:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a206:	4293      	cmp	r3, r2
 800a208:	ed2d 8b04 	vpush	{d8-d9}
 800a20c:	462e      	mov	r6, r5
 800a20e:	d962      	bls.n	800a2d6 <expm1+0xde>
 800a210:	4ad2      	ldr	r2, [pc, #840]	; (800a55c <expm1+0x364>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d924      	bls.n	800a260 <expm1+0x68>
 800a216:	4ad2      	ldr	r2, [pc, #840]	; (800a560 <expm1+0x368>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d911      	bls.n	800a240 <expm1+0x48>
 800a21c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a220:	4323      	orrs	r3, r4
 800a222:	ee10 2a10 	vmov	r2, s0
 800a226:	d005      	beq.n	800a234 <expm1+0x3c>
 800a228:	462b      	mov	r3, r5
 800a22a:	4620      	mov	r0, r4
 800a22c:	4629      	mov	r1, r5
 800a22e:	f7f6 f835 	bl	800029c <__adddf3>
 800a232:	e157      	b.n	800a4e4 <expm1+0x2ec>
 800a234:	2d00      	cmp	r5, #0
 800a236:	f280 8157 	bge.w	800a4e8 <expm1+0x2f0>
 800a23a:	4dca      	ldr	r5, [pc, #808]	; (800a564 <expm1+0x36c>)
 800a23c:	2400      	movs	r4, #0
 800a23e:	e153      	b.n	800a4e8 <expm1+0x2f0>
 800a240:	a3ad      	add	r3, pc, #692	; (adr r3, 800a4f8 <expm1+0x300>)
 800a242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a246:	ee10 0a10 	vmov	r0, s0
 800a24a:	4629      	mov	r1, r5
 800a24c:	f7f6 fc6c 	bl	8000b28 <__aeabi_dcmpgt>
 800a250:	b130      	cbz	r0, 800a260 <expm1+0x68>
 800a252:	ecbd 8b04 	vpop	{d8-d9}
 800a256:	2000      	movs	r0, #0
 800a258:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a25c:	f000 bb18 	b.w	800a890 <__math_oflow>
 800a260:	2e00      	cmp	r6, #0
 800a262:	da0c      	bge.n	800a27e <expm1+0x86>
 800a264:	a3a6      	add	r3, pc, #664	; (adr r3, 800a500 <expm1+0x308>)
 800a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26a:	4620      	mov	r0, r4
 800a26c:	4629      	mov	r1, r5
 800a26e:	f7f6 f815 	bl	800029c <__adddf3>
 800a272:	2200      	movs	r2, #0
 800a274:	2300      	movs	r3, #0
 800a276:	f7f6 fc39 	bl	8000aec <__aeabi_dcmplt>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d1dd      	bne.n	800a23a <expm1+0x42>
 800a27e:	a3a2      	add	r3, pc, #648	; (adr r3, 800a508 <expm1+0x310>)
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	4620      	mov	r0, r4
 800a286:	4629      	mov	r1, r5
 800a288:	f7f6 f9be 	bl	8000608 <__aeabi_dmul>
 800a28c:	2e00      	cmp	r6, #0
 800a28e:	bfb4      	ite	lt
 800a290:	4bb5      	ldrlt	r3, [pc, #724]	; (800a568 <expm1+0x370>)
 800a292:	4bb6      	ldrge	r3, [pc, #728]	; (800a56c <expm1+0x374>)
 800a294:	2200      	movs	r2, #0
 800a296:	f7f6 f801 	bl	800029c <__adddf3>
 800a29a:	f7f6 fc65 	bl	8000b68 <__aeabi_d2iz>
 800a29e:	4682      	mov	sl, r0
 800a2a0:	f7f6 f948 	bl	8000534 <__aeabi_i2d>
 800a2a4:	a39a      	add	r3, pc, #616	; (adr r3, 800a510 <expm1+0x318>)
 800a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2aa:	4680      	mov	r8, r0
 800a2ac:	4689      	mov	r9, r1
 800a2ae:	f7f6 f9ab 	bl	8000608 <__aeabi_dmul>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	f7f5 ffed 	bl	8000298 <__aeabi_dsub>
 800a2be:	a396      	add	r3, pc, #600	; (adr r3, 800a518 <expm1+0x320>)
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	4606      	mov	r6, r0
 800a2c6:	460f      	mov	r7, r1
 800a2c8:	4640      	mov	r0, r8
 800a2ca:	4649      	mov	r1, r9
 800a2cc:	f7f6 f99c 	bl	8000608 <__aeabi_dmul>
 800a2d0:	4680      	mov	r8, r0
 800a2d2:	4689      	mov	r9, r1
 800a2d4:	e019      	b.n	800a30a <expm1+0x112>
 800a2d6:	4aa6      	ldr	r2, [pc, #664]	; (800a570 <expm1+0x378>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	f240 80ac 	bls.w	800a436 <expm1+0x23e>
 800a2de:	4aa5      	ldr	r2, [pc, #660]	; (800a574 <expm1+0x37c>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d8cc      	bhi.n	800a27e <expm1+0x86>
 800a2e4:	2d00      	cmp	r5, #0
 800a2e6:	a38a      	add	r3, pc, #552	; (adr r3, 800a510 <expm1+0x318>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	ee10 0a10 	vmov	r0, s0
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	f2c0 8095 	blt.w	800a420 <expm1+0x228>
 800a2f6:	f7f5 ffcf 	bl	8000298 <__aeabi_dsub>
 800a2fa:	f20f 291c 	addw	r9, pc, #540	; 0x21c
 800a2fe:	e9d9 8900 	ldrd	r8, r9, [r9]
 800a302:	4606      	mov	r6, r0
 800a304:	460f      	mov	r7, r1
 800a306:	f04f 0a01 	mov.w	sl, #1
 800a30a:	4642      	mov	r2, r8
 800a30c:	464b      	mov	r3, r9
 800a30e:	4630      	mov	r0, r6
 800a310:	4639      	mov	r1, r7
 800a312:	f7f5 ffc1 	bl	8000298 <__aeabi_dsub>
 800a316:	4602      	mov	r2, r0
 800a318:	460b      	mov	r3, r1
 800a31a:	4604      	mov	r4, r0
 800a31c:	460d      	mov	r5, r1
 800a31e:	4630      	mov	r0, r6
 800a320:	4639      	mov	r1, r7
 800a322:	f7f5 ffb9 	bl	8000298 <__aeabi_dsub>
 800a326:	4642      	mov	r2, r8
 800a328:	464b      	mov	r3, r9
 800a32a:	f7f5 ffb5 	bl	8000298 <__aeabi_dsub>
 800a32e:	ec41 0b18 	vmov	d8, r0, r1
 800a332:	4b8e      	ldr	r3, [pc, #568]	; (800a56c <expm1+0x374>)
 800a334:	2200      	movs	r2, #0
 800a336:	4620      	mov	r0, r4
 800a338:	4629      	mov	r1, r5
 800a33a:	f7f6 f965 	bl	8000608 <__aeabi_dmul>
 800a33e:	4606      	mov	r6, r0
 800a340:	460f      	mov	r7, r1
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	4620      	mov	r0, r4
 800a348:	4629      	mov	r1, r5
 800a34a:	f7f6 f95d 	bl	8000608 <__aeabi_dmul>
 800a34e:	a374      	add	r3, pc, #464	; (adr r3, 800a520 <expm1+0x328>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	4680      	mov	r8, r0
 800a356:	4689      	mov	r9, r1
 800a358:	f7f6 f956 	bl	8000608 <__aeabi_dmul>
 800a35c:	a372      	add	r3, pc, #456	; (adr r3, 800a528 <expm1+0x330>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f5 ff9b 	bl	800029c <__adddf3>
 800a366:	4642      	mov	r2, r8
 800a368:	464b      	mov	r3, r9
 800a36a:	f7f6 f94d 	bl	8000608 <__aeabi_dmul>
 800a36e:	a370      	add	r3, pc, #448	; (adr r3, 800a530 <expm1+0x338>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	f7f5 ff90 	bl	8000298 <__aeabi_dsub>
 800a378:	4642      	mov	r2, r8
 800a37a:	464b      	mov	r3, r9
 800a37c:	f7f6 f944 	bl	8000608 <__aeabi_dmul>
 800a380:	a36d      	add	r3, pc, #436	; (adr r3, 800a538 <expm1+0x340>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f5 ff89 	bl	800029c <__adddf3>
 800a38a:	4642      	mov	r2, r8
 800a38c:	464b      	mov	r3, r9
 800a38e:	f7f6 f93b 	bl	8000608 <__aeabi_dmul>
 800a392:	a36b      	add	r3, pc, #428	; (adr r3, 800a540 <expm1+0x348>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f7f5 ff7e 	bl	8000298 <__aeabi_dsub>
 800a39c:	4642      	mov	r2, r8
 800a39e:	464b      	mov	r3, r9
 800a3a0:	f7f6 f932 	bl	8000608 <__aeabi_dmul>
 800a3a4:	4b74      	ldr	r3, [pc, #464]	; (800a578 <expm1+0x380>)
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f7f5 ff78 	bl	800029c <__adddf3>
 800a3ac:	ec41 0b19 	vmov	d9, r0, r1
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	4639      	mov	r1, r7
 800a3b8:	f7f6 f926 	bl	8000608 <__aeabi_dmul>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	496e      	ldr	r1, [pc, #440]	; (800a57c <expm1+0x384>)
 800a3c4:	f7f5 ff68 	bl	8000298 <__aeabi_dsub>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4606      	mov	r6, r0
 800a3ce:	460f      	mov	r7, r1
 800a3d0:	ec51 0b19 	vmov	r0, r1, d9
 800a3d4:	f7f5 ff60 	bl	8000298 <__aeabi_dsub>
 800a3d8:	4632      	mov	r2, r6
 800a3da:	ec41 0b19 	vmov	d9, r0, r1
 800a3de:	463b      	mov	r3, r7
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	f7f6 f910 	bl	8000608 <__aeabi_dmul>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	4964      	ldr	r1, [pc, #400]	; (800a580 <expm1+0x388>)
 800a3f0:	f7f5 ff52 	bl	8000298 <__aeabi_dsub>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	ec51 0b19 	vmov	r0, r1, d9
 800a3fc:	f7f6 fa2e 	bl	800085c <__aeabi_ddiv>
 800a400:	4642      	mov	r2, r8
 800a402:	464b      	mov	r3, r9
 800a404:	f7f6 f900 	bl	8000608 <__aeabi_dmul>
 800a408:	4602      	mov	r2, r0
 800a40a:	460b      	mov	r3, r1
 800a40c:	f1ba 0f00 	cmp.w	sl, #0
 800a410:	d12a      	bne.n	800a468 <expm1+0x270>
 800a412:	4620      	mov	r0, r4
 800a414:	4629      	mov	r1, r5
 800a416:	f7f6 f8f7 	bl	8000608 <__aeabi_dmul>
 800a41a:	4642      	mov	r2, r8
 800a41c:	464b      	mov	r3, r9
 800a41e:	e017      	b.n	800a450 <expm1+0x258>
 800a420:	f7f5 ff3c 	bl	800029c <__adddf3>
 800a424:	f20f 1920 	addw	r9, pc, #288	; 0x120
 800a428:	e9d9 8900 	ldrd	r8, r9, [r9]
 800a42c:	4606      	mov	r6, r0
 800a42e:	460f      	mov	r7, r1
 800a430:	f04f 3aff 	mov.w	sl, #4294967295
 800a434:	e769      	b.n	800a30a <expm1+0x112>
 800a436:	4a53      	ldr	r2, [pc, #332]	; (800a584 <expm1+0x38c>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d812      	bhi.n	800a462 <expm1+0x26a>
 800a43c:	a344      	add	r3, pc, #272	; (adr r3, 800a550 <expm1+0x358>)
 800a43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a442:	ee10 0a10 	vmov	r0, s0
 800a446:	4629      	mov	r1, r5
 800a448:	f7f5 ff28 	bl	800029c <__adddf3>
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	f7f5 ff22 	bl	8000298 <__aeabi_dsub>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	4620      	mov	r0, r4
 800a45a:	4629      	mov	r1, r5
 800a45c:	f7f5 ff1c 	bl	8000298 <__aeabi_dsub>
 800a460:	e040      	b.n	800a4e4 <expm1+0x2ec>
 800a462:	f04f 0a00 	mov.w	sl, #0
 800a466:	e764      	b.n	800a332 <expm1+0x13a>
 800a468:	ec53 2b18 	vmov	r2, r3, d8
 800a46c:	f7f5 ff14 	bl	8000298 <__aeabi_dsub>
 800a470:	4622      	mov	r2, r4
 800a472:	462b      	mov	r3, r5
 800a474:	f7f6 f8c8 	bl	8000608 <__aeabi_dmul>
 800a478:	ec53 2b18 	vmov	r2, r3, d8
 800a47c:	f7f5 ff0c 	bl	8000298 <__aeabi_dsub>
 800a480:	4642      	mov	r2, r8
 800a482:	464b      	mov	r3, r9
 800a484:	f7f5 ff08 	bl	8000298 <__aeabi_dsub>
 800a488:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a48c:	4606      	mov	r6, r0
 800a48e:	460f      	mov	r7, r1
 800a490:	d10c      	bne.n	800a4ac <expm1+0x2b4>
 800a492:	4602      	mov	r2, r0
 800a494:	460b      	mov	r3, r1
 800a496:	4620      	mov	r0, r4
 800a498:	4629      	mov	r1, r5
 800a49a:	f7f5 fefd 	bl	8000298 <__aeabi_dsub>
 800a49e:	4b33      	ldr	r3, [pc, #204]	; (800a56c <expm1+0x374>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f7f6 f8b1 	bl	8000608 <__aeabi_dmul>
 800a4a6:	4b31      	ldr	r3, [pc, #196]	; (800a56c <expm1+0x374>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	e7d7      	b.n	800a45c <expm1+0x264>
 800a4ac:	f1ba 0f01 	cmp.w	sl, #1
 800a4b0:	d179      	bne.n	800a5a6 <expm1+0x3ae>
 800a4b2:	4b35      	ldr	r3, [pc, #212]	; (800a588 <expm1+0x390>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	f7f6 fb17 	bl	8000aec <__aeabi_dcmplt>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d064      	beq.n	800a58c <expm1+0x394>
 800a4c2:	4b2a      	ldr	r3, [pc, #168]	; (800a56c <expm1+0x374>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	f7f5 fee7 	bl	800029c <__adddf3>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	4639      	mov	r1, r7
 800a4d6:	f7f5 fedf 	bl	8000298 <__aeabi_dsub>
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800a4e0:	f7f6 f892 	bl	8000608 <__aeabi_dmul>
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	460d      	mov	r5, r1
 800a4e8:	ecbd 8b04 	vpop	{d8-d9}
 800a4ec:	ec45 4b10 	vmov	d0, r4, r5
 800a4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4f4:	f3af 8000 	nop.w
 800a4f8:	fefa39ef 	.word	0xfefa39ef
 800a4fc:	40862e42 	.word	0x40862e42
 800a500:	c2f8f359 	.word	0xc2f8f359
 800a504:	01a56e1f 	.word	0x01a56e1f
 800a508:	652b82fe 	.word	0x652b82fe
 800a50c:	3ff71547 	.word	0x3ff71547
 800a510:	fee00000 	.word	0xfee00000
 800a514:	3fe62e42 	.word	0x3fe62e42
 800a518:	35793c76 	.word	0x35793c76
 800a51c:	3dea39ef 	.word	0x3dea39ef
 800a520:	6e09c32d 	.word	0x6e09c32d
 800a524:	be8afdb7 	.word	0xbe8afdb7
 800a528:	86e65239 	.word	0x86e65239
 800a52c:	3ed0cfca 	.word	0x3ed0cfca
 800a530:	9eaadbb7 	.word	0x9eaadbb7
 800a534:	3f14ce19 	.word	0x3f14ce19
 800a538:	19fe5585 	.word	0x19fe5585
 800a53c:	3f5a01a0 	.word	0x3f5a01a0
 800a540:	111110f4 	.word	0x111110f4
 800a544:	3fa11111 	.word	0x3fa11111
 800a548:	35793c76 	.word	0x35793c76
 800a54c:	bdea39ef 	.word	0xbdea39ef
 800a550:	8800759c 	.word	0x8800759c
 800a554:	7e37e43c 	.word	0x7e37e43c
 800a558:	40436879 	.word	0x40436879
 800a55c:	40862e41 	.word	0x40862e41
 800a560:	7fefffff 	.word	0x7fefffff
 800a564:	bff00000 	.word	0xbff00000
 800a568:	bfe00000 	.word	0xbfe00000
 800a56c:	3fe00000 	.word	0x3fe00000
 800a570:	3fd62e42 	.word	0x3fd62e42
 800a574:	3ff0a2b1 	.word	0x3ff0a2b1
 800a578:	3ff00000 	.word	0x3ff00000
 800a57c:	40080000 	.word	0x40080000
 800a580:	40180000 	.word	0x40180000
 800a584:	3c8fffff 	.word	0x3c8fffff
 800a588:	bfd00000 	.word	0xbfd00000
 800a58c:	4632      	mov	r2, r6
 800a58e:	463b      	mov	r3, r7
 800a590:	4620      	mov	r0, r4
 800a592:	4629      	mov	r1, r5
 800a594:	f7f5 fe80 	bl	8000298 <__aeabi_dsub>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	f7f5 fe7e 	bl	800029c <__adddf3>
 800a5a0:	4b22      	ldr	r3, [pc, #136]	; (800a62c <expm1+0x434>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	e643      	b.n	800a22e <expm1+0x36>
 800a5a6:	f10a 0301 	add.w	r3, sl, #1
 800a5aa:	2b39      	cmp	r3, #57	; 0x39
 800a5ac:	ea4f 560a 	mov.w	r6, sl, lsl #20
 800a5b0:	d90d      	bls.n	800a5ce <expm1+0x3d6>
 800a5b2:	4622      	mov	r2, r4
 800a5b4:	462b      	mov	r3, r5
 800a5b6:	f7f5 fe6f 	bl	8000298 <__aeabi_dsub>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	2000      	movs	r0, #0
 800a5c0:	491a      	ldr	r1, [pc, #104]	; (800a62c <expm1+0x434>)
 800a5c2:	f7f5 fe69 	bl	8000298 <__aeabi_dsub>
 800a5c6:	4b19      	ldr	r3, [pc, #100]	; (800a62c <expm1+0x434>)
 800a5c8:	1871      	adds	r1, r6, r1
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	e746      	b.n	800a45c <expm1+0x264>
 800a5ce:	f1ba 0f13 	cmp.w	sl, #19
 800a5d2:	dc16      	bgt.n	800a602 <expm1+0x40a>
 800a5d4:	4622      	mov	r2, r4
 800a5d6:	462b      	mov	r3, r5
 800a5d8:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
 800a5dc:	f7f5 fe5c 	bl	8000298 <__aeabi_dsub>
 800a5e0:	fa47 fa0a 	asr.w	sl, r7, sl
 800a5e4:	f1ca 597f 	rsb	r9, sl, #1069547520	; 0x3fc00000
 800a5e8:	f04f 0800 	mov.w	r8, #0
 800a5ec:	f509 1940 	add.w	r9, r9, #3145728	; 0x300000
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4640      	mov	r0, r8
 800a5f6:	4649      	mov	r1, r9
 800a5f8:	f7f5 fe4e 	bl	8000298 <__aeabi_dsub>
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	1875      	adds	r5, r6, r1
 800a600:	e772      	b.n	800a4e8 <expm1+0x2f0>
 800a602:	f5ca 7a7f 	rsb	sl, sl, #1020	; 0x3fc
 800a606:	f10a 0a03 	add.w	sl, sl, #3
 800a60a:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800a60e:	2200      	movs	r2, #0
 800a610:	f7f5 fe44 	bl	800029c <__adddf3>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	4620      	mov	r0, r4
 800a61a:	4629      	mov	r1, r5
 800a61c:	f7f5 fe3c 	bl	8000298 <__aeabi_dsub>
 800a620:	4b02      	ldr	r3, [pc, #8]	; (800a62c <expm1+0x434>)
 800a622:	2200      	movs	r2, #0
 800a624:	f7f5 fe3a 	bl	800029c <__adddf3>
 800a628:	e7e8      	b.n	800a5fc <expm1+0x404>
 800a62a:	bf00      	nop
 800a62c:	3ff00000 	.word	0x3ff00000

0800a630 <fabs>:
 800a630:	ec51 0b10 	vmov	r0, r1, d0
 800a634:	ee10 2a10 	vmov	r2, s0
 800a638:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a63c:	ec43 2b10 	vmov	d0, r2, r3
 800a640:	4770      	bx	lr
 800a642:	0000      	movs	r0, r0
 800a644:	0000      	movs	r0, r0
	...

0800a648 <floor>:
 800a648:	ec51 0b10 	vmov	r0, r1, d0
 800a64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a650:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a654:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a658:	2e13      	cmp	r6, #19
 800a65a:	ee10 5a10 	vmov	r5, s0
 800a65e:	ee10 8a10 	vmov	r8, s0
 800a662:	460c      	mov	r4, r1
 800a664:	dc32      	bgt.n	800a6cc <floor+0x84>
 800a666:	2e00      	cmp	r6, #0
 800a668:	da14      	bge.n	800a694 <floor+0x4c>
 800a66a:	a333      	add	r3, pc, #204	; (adr r3, 800a738 <floor+0xf0>)
 800a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a670:	f7f5 fe14 	bl	800029c <__adddf3>
 800a674:	2200      	movs	r2, #0
 800a676:	2300      	movs	r3, #0
 800a678:	f7f6 fa56 	bl	8000b28 <__aeabi_dcmpgt>
 800a67c:	b138      	cbz	r0, 800a68e <floor+0x46>
 800a67e:	2c00      	cmp	r4, #0
 800a680:	da57      	bge.n	800a732 <floor+0xea>
 800a682:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a686:	431d      	orrs	r5, r3
 800a688:	d001      	beq.n	800a68e <floor+0x46>
 800a68a:	4c2d      	ldr	r4, [pc, #180]	; (800a740 <floor+0xf8>)
 800a68c:	2500      	movs	r5, #0
 800a68e:	4621      	mov	r1, r4
 800a690:	4628      	mov	r0, r5
 800a692:	e025      	b.n	800a6e0 <floor+0x98>
 800a694:	4f2b      	ldr	r7, [pc, #172]	; (800a744 <floor+0xfc>)
 800a696:	4137      	asrs	r7, r6
 800a698:	ea01 0307 	and.w	r3, r1, r7
 800a69c:	4303      	orrs	r3, r0
 800a69e:	d01f      	beq.n	800a6e0 <floor+0x98>
 800a6a0:	a325      	add	r3, pc, #148	; (adr r3, 800a738 <floor+0xf0>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f5 fdf9 	bl	800029c <__adddf3>
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f7f6 fa3b 	bl	8000b28 <__aeabi_dcmpgt>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	d0eb      	beq.n	800a68e <floor+0x46>
 800a6b6:	2c00      	cmp	r4, #0
 800a6b8:	bfbe      	ittt	lt
 800a6ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a6be:	fa43 f606 	asrlt.w	r6, r3, r6
 800a6c2:	19a4      	addlt	r4, r4, r6
 800a6c4:	ea24 0407 	bic.w	r4, r4, r7
 800a6c8:	2500      	movs	r5, #0
 800a6ca:	e7e0      	b.n	800a68e <floor+0x46>
 800a6cc:	2e33      	cmp	r6, #51	; 0x33
 800a6ce:	dd0b      	ble.n	800a6e8 <floor+0xa0>
 800a6d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a6d4:	d104      	bne.n	800a6e0 <floor+0x98>
 800a6d6:	ee10 2a10 	vmov	r2, s0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	f7f5 fdde 	bl	800029c <__adddf3>
 800a6e0:	ec41 0b10 	vmov	d0, r0, r1
 800a6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f0:	fa23 f707 	lsr.w	r7, r3, r7
 800a6f4:	4207      	tst	r7, r0
 800a6f6:	d0f3      	beq.n	800a6e0 <floor+0x98>
 800a6f8:	a30f      	add	r3, pc, #60	; (adr r3, 800a738 <floor+0xf0>)
 800a6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fe:	f7f5 fdcd 	bl	800029c <__adddf3>
 800a702:	2200      	movs	r2, #0
 800a704:	2300      	movs	r3, #0
 800a706:	f7f6 fa0f 	bl	8000b28 <__aeabi_dcmpgt>
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d0bf      	beq.n	800a68e <floor+0x46>
 800a70e:	2c00      	cmp	r4, #0
 800a710:	da02      	bge.n	800a718 <floor+0xd0>
 800a712:	2e14      	cmp	r6, #20
 800a714:	d103      	bne.n	800a71e <floor+0xd6>
 800a716:	3401      	adds	r4, #1
 800a718:	ea25 0507 	bic.w	r5, r5, r7
 800a71c:	e7b7      	b.n	800a68e <floor+0x46>
 800a71e:	2301      	movs	r3, #1
 800a720:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a724:	fa03 f606 	lsl.w	r6, r3, r6
 800a728:	4435      	add	r5, r6
 800a72a:	4545      	cmp	r5, r8
 800a72c:	bf38      	it	cc
 800a72e:	18e4      	addcc	r4, r4, r3
 800a730:	e7f2      	b.n	800a718 <floor+0xd0>
 800a732:	2500      	movs	r5, #0
 800a734:	462c      	mov	r4, r5
 800a736:	e7aa      	b.n	800a68e <floor+0x46>
 800a738:	8800759c 	.word	0x8800759c
 800a73c:	7e37e43c 	.word	0x7e37e43c
 800a740:	bff00000 	.word	0xbff00000
 800a744:	000fffff 	.word	0x000fffff

0800a748 <scalbn>:
 800a748:	b570      	push	{r4, r5, r6, lr}
 800a74a:	ec55 4b10 	vmov	r4, r5, d0
 800a74e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a752:	4606      	mov	r6, r0
 800a754:	462b      	mov	r3, r5
 800a756:	b99a      	cbnz	r2, 800a780 <scalbn+0x38>
 800a758:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a75c:	4323      	orrs	r3, r4
 800a75e:	d036      	beq.n	800a7ce <scalbn+0x86>
 800a760:	4b39      	ldr	r3, [pc, #228]	; (800a848 <scalbn+0x100>)
 800a762:	4629      	mov	r1, r5
 800a764:	ee10 0a10 	vmov	r0, s0
 800a768:	2200      	movs	r2, #0
 800a76a:	f7f5 ff4d 	bl	8000608 <__aeabi_dmul>
 800a76e:	4b37      	ldr	r3, [pc, #220]	; (800a84c <scalbn+0x104>)
 800a770:	429e      	cmp	r6, r3
 800a772:	4604      	mov	r4, r0
 800a774:	460d      	mov	r5, r1
 800a776:	da10      	bge.n	800a79a <scalbn+0x52>
 800a778:	a32b      	add	r3, pc, #172	; (adr r3, 800a828 <scalbn+0xe0>)
 800a77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77e:	e03a      	b.n	800a7f6 <scalbn+0xae>
 800a780:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a784:	428a      	cmp	r2, r1
 800a786:	d10c      	bne.n	800a7a2 <scalbn+0x5a>
 800a788:	ee10 2a10 	vmov	r2, s0
 800a78c:	4620      	mov	r0, r4
 800a78e:	4629      	mov	r1, r5
 800a790:	f7f5 fd84 	bl	800029c <__adddf3>
 800a794:	4604      	mov	r4, r0
 800a796:	460d      	mov	r5, r1
 800a798:	e019      	b.n	800a7ce <scalbn+0x86>
 800a79a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a79e:	460b      	mov	r3, r1
 800a7a0:	3a36      	subs	r2, #54	; 0x36
 800a7a2:	4432      	add	r2, r6
 800a7a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a7a8:	428a      	cmp	r2, r1
 800a7aa:	dd08      	ble.n	800a7be <scalbn+0x76>
 800a7ac:	2d00      	cmp	r5, #0
 800a7ae:	a120      	add	r1, pc, #128	; (adr r1, 800a830 <scalbn+0xe8>)
 800a7b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7b4:	da1c      	bge.n	800a7f0 <scalbn+0xa8>
 800a7b6:	a120      	add	r1, pc, #128	; (adr r1, 800a838 <scalbn+0xf0>)
 800a7b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7bc:	e018      	b.n	800a7f0 <scalbn+0xa8>
 800a7be:	2a00      	cmp	r2, #0
 800a7c0:	dd08      	ble.n	800a7d4 <scalbn+0x8c>
 800a7c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a7c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a7ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a7ce:	ec45 4b10 	vmov	d0, r4, r5
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}
 800a7d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a7d8:	da19      	bge.n	800a80e <scalbn+0xc6>
 800a7da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a7de:	429e      	cmp	r6, r3
 800a7e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a7e4:	dd0a      	ble.n	800a7fc <scalbn+0xb4>
 800a7e6:	a112      	add	r1, pc, #72	; (adr r1, 800a830 <scalbn+0xe8>)
 800a7e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1e2      	bne.n	800a7b6 <scalbn+0x6e>
 800a7f0:	a30f      	add	r3, pc, #60	; (adr r3, 800a830 <scalbn+0xe8>)
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	f7f5 ff07 	bl	8000608 <__aeabi_dmul>
 800a7fa:	e7cb      	b.n	800a794 <scalbn+0x4c>
 800a7fc:	a10a      	add	r1, pc, #40	; (adr r1, 800a828 <scalbn+0xe0>)
 800a7fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d0b8      	beq.n	800a778 <scalbn+0x30>
 800a806:	a10e      	add	r1, pc, #56	; (adr r1, 800a840 <scalbn+0xf8>)
 800a808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a80c:	e7b4      	b.n	800a778 <scalbn+0x30>
 800a80e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a812:	3236      	adds	r2, #54	; 0x36
 800a814:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a818:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a81c:	4620      	mov	r0, r4
 800a81e:	4b0c      	ldr	r3, [pc, #48]	; (800a850 <scalbn+0x108>)
 800a820:	2200      	movs	r2, #0
 800a822:	e7e8      	b.n	800a7f6 <scalbn+0xae>
 800a824:	f3af 8000 	nop.w
 800a828:	c2f8f359 	.word	0xc2f8f359
 800a82c:	01a56e1f 	.word	0x01a56e1f
 800a830:	8800759c 	.word	0x8800759c
 800a834:	7e37e43c 	.word	0x7e37e43c
 800a838:	8800759c 	.word	0x8800759c
 800a83c:	fe37e43c 	.word	0xfe37e43c
 800a840:	c2f8f359 	.word	0xc2f8f359
 800a844:	81a56e1f 	.word	0x81a56e1f
 800a848:	43500000 	.word	0x43500000
 800a84c:	ffff3cb0 	.word	0xffff3cb0
 800a850:	3c900000 	.word	0x3c900000

0800a854 <with_errno>:
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	4604      	mov	r4, r0
 800a858:	460d      	mov	r5, r1
 800a85a:	4616      	mov	r6, r2
 800a85c:	f000 f828 	bl	800a8b0 <__errno>
 800a860:	4629      	mov	r1, r5
 800a862:	6006      	str	r6, [r0, #0]
 800a864:	4620      	mov	r0, r4
 800a866:	bd70      	pop	{r4, r5, r6, pc}

0800a868 <xflow>:
 800a868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a86a:	4614      	mov	r4, r2
 800a86c:	461d      	mov	r5, r3
 800a86e:	b108      	cbz	r0, 800a874 <xflow+0xc>
 800a870:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a874:	e9cd 2300 	strd	r2, r3, [sp]
 800a878:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a87c:	4620      	mov	r0, r4
 800a87e:	4629      	mov	r1, r5
 800a880:	f7f5 fec2 	bl	8000608 <__aeabi_dmul>
 800a884:	2222      	movs	r2, #34	; 0x22
 800a886:	b003      	add	sp, #12
 800a888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a88c:	f7ff bfe2 	b.w	800a854 <with_errno>

0800a890 <__math_oflow>:
 800a890:	b508      	push	{r3, lr}
 800a892:	2200      	movs	r2, #0
 800a894:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a898:	f7ff ffe6 	bl	800a868 <xflow>
 800a89c:	ec41 0b10 	vmov	d0, r0, r1
 800a8a0:	bd08      	pop	{r3, pc}

0800a8a2 <abort>:
 800a8a2:	b508      	push	{r3, lr}
 800a8a4:	2006      	movs	r0, #6
 800a8a6:	f000 fdef 	bl	800b488 <raise>
 800a8aa:	2001      	movs	r0, #1
 800a8ac:	f7f9 fa36 	bl	8003d1c <_exit>

0800a8b0 <__errno>:
 800a8b0:	4b01      	ldr	r3, [pc, #4]	; (800a8b8 <__errno+0x8>)
 800a8b2:	6818      	ldr	r0, [r3, #0]
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	20000010 	.word	0x20000010

0800a8bc <__libc_init_array>:
 800a8bc:	b570      	push	{r4, r5, r6, lr}
 800a8be:	4d0d      	ldr	r5, [pc, #52]	; (800a8f4 <__libc_init_array+0x38>)
 800a8c0:	4c0d      	ldr	r4, [pc, #52]	; (800a8f8 <__libc_init_array+0x3c>)
 800a8c2:	1b64      	subs	r4, r4, r5
 800a8c4:	10a4      	asrs	r4, r4, #2
 800a8c6:	2600      	movs	r6, #0
 800a8c8:	42a6      	cmp	r6, r4
 800a8ca:	d109      	bne.n	800a8e0 <__libc_init_array+0x24>
 800a8cc:	4d0b      	ldr	r5, [pc, #44]	; (800a8fc <__libc_init_array+0x40>)
 800a8ce:	4c0c      	ldr	r4, [pc, #48]	; (800a900 <__libc_init_array+0x44>)
 800a8d0:	f002 fd4e 	bl	800d370 <_init>
 800a8d4:	1b64      	subs	r4, r4, r5
 800a8d6:	10a4      	asrs	r4, r4, #2
 800a8d8:	2600      	movs	r6, #0
 800a8da:	42a6      	cmp	r6, r4
 800a8dc:	d105      	bne.n	800a8ea <__libc_init_array+0x2e>
 800a8de:	bd70      	pop	{r4, r5, r6, pc}
 800a8e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8e4:	4798      	blx	r3
 800a8e6:	3601      	adds	r6, #1
 800a8e8:	e7ee      	b.n	800a8c8 <__libc_init_array+0xc>
 800a8ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ee:	4798      	blx	r3
 800a8f0:	3601      	adds	r6, #1
 800a8f2:	e7f2      	b.n	800a8da <__libc_init_array+0x1e>
 800a8f4:	0800d98c 	.word	0x0800d98c
 800a8f8:	0800d98c 	.word	0x0800d98c
 800a8fc:	0800d98c 	.word	0x0800d98c
 800a900:	0800d994 	.word	0x0800d994

0800a904 <malloc>:
 800a904:	4b02      	ldr	r3, [pc, #8]	; (800a910 <malloc+0xc>)
 800a906:	4601      	mov	r1, r0
 800a908:	6818      	ldr	r0, [r3, #0]
 800a90a:	f000 b8a7 	b.w	800aa5c <_malloc_r>
 800a90e:	bf00      	nop
 800a910:	20000010 	.word	0x20000010

0800a914 <free>:
 800a914:	4b02      	ldr	r3, [pc, #8]	; (800a920 <free+0xc>)
 800a916:	4601      	mov	r1, r0
 800a918:	6818      	ldr	r0, [r3, #0]
 800a91a:	f000 b833 	b.w	800a984 <_free_r>
 800a91e:	bf00      	nop
 800a920:	20000010 	.word	0x20000010

0800a924 <memcpy>:
 800a924:	440a      	add	r2, r1
 800a926:	4291      	cmp	r1, r2
 800a928:	f100 33ff 	add.w	r3, r0, #4294967295
 800a92c:	d100      	bne.n	800a930 <memcpy+0xc>
 800a92e:	4770      	bx	lr
 800a930:	b510      	push	{r4, lr}
 800a932:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a93a:	4291      	cmp	r1, r2
 800a93c:	d1f9      	bne.n	800a932 <memcpy+0xe>
 800a93e:	bd10      	pop	{r4, pc}

0800a940 <memmove>:
 800a940:	4288      	cmp	r0, r1
 800a942:	b510      	push	{r4, lr}
 800a944:	eb01 0402 	add.w	r4, r1, r2
 800a948:	d902      	bls.n	800a950 <memmove+0x10>
 800a94a:	4284      	cmp	r4, r0
 800a94c:	4623      	mov	r3, r4
 800a94e:	d807      	bhi.n	800a960 <memmove+0x20>
 800a950:	1e43      	subs	r3, r0, #1
 800a952:	42a1      	cmp	r1, r4
 800a954:	d008      	beq.n	800a968 <memmove+0x28>
 800a956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a95a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a95e:	e7f8      	b.n	800a952 <memmove+0x12>
 800a960:	4402      	add	r2, r0
 800a962:	4601      	mov	r1, r0
 800a964:	428a      	cmp	r2, r1
 800a966:	d100      	bne.n	800a96a <memmove+0x2a>
 800a968:	bd10      	pop	{r4, pc}
 800a96a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a96e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a972:	e7f7      	b.n	800a964 <memmove+0x24>

0800a974 <memset>:
 800a974:	4402      	add	r2, r0
 800a976:	4603      	mov	r3, r0
 800a978:	4293      	cmp	r3, r2
 800a97a:	d100      	bne.n	800a97e <memset+0xa>
 800a97c:	4770      	bx	lr
 800a97e:	f803 1b01 	strb.w	r1, [r3], #1
 800a982:	e7f9      	b.n	800a978 <memset+0x4>

0800a984 <_free_r>:
 800a984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a986:	2900      	cmp	r1, #0
 800a988:	d044      	beq.n	800aa14 <_free_r+0x90>
 800a98a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a98e:	9001      	str	r0, [sp, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	f1a1 0404 	sub.w	r4, r1, #4
 800a996:	bfb8      	it	lt
 800a998:	18e4      	addlt	r4, r4, r3
 800a99a:	f001 fc0f 	bl	800c1bc <__malloc_lock>
 800a99e:	4a1e      	ldr	r2, [pc, #120]	; (800aa18 <_free_r+0x94>)
 800a9a0:	9801      	ldr	r0, [sp, #4]
 800a9a2:	6813      	ldr	r3, [r2, #0]
 800a9a4:	b933      	cbnz	r3, 800a9b4 <_free_r+0x30>
 800a9a6:	6063      	str	r3, [r4, #4]
 800a9a8:	6014      	str	r4, [r2, #0]
 800a9aa:	b003      	add	sp, #12
 800a9ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9b0:	f001 bc0a 	b.w	800c1c8 <__malloc_unlock>
 800a9b4:	42a3      	cmp	r3, r4
 800a9b6:	d908      	bls.n	800a9ca <_free_r+0x46>
 800a9b8:	6825      	ldr	r5, [r4, #0]
 800a9ba:	1961      	adds	r1, r4, r5
 800a9bc:	428b      	cmp	r3, r1
 800a9be:	bf01      	itttt	eq
 800a9c0:	6819      	ldreq	r1, [r3, #0]
 800a9c2:	685b      	ldreq	r3, [r3, #4]
 800a9c4:	1949      	addeq	r1, r1, r5
 800a9c6:	6021      	streq	r1, [r4, #0]
 800a9c8:	e7ed      	b.n	800a9a6 <_free_r+0x22>
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	b10b      	cbz	r3, 800a9d4 <_free_r+0x50>
 800a9d0:	42a3      	cmp	r3, r4
 800a9d2:	d9fa      	bls.n	800a9ca <_free_r+0x46>
 800a9d4:	6811      	ldr	r1, [r2, #0]
 800a9d6:	1855      	adds	r5, r2, r1
 800a9d8:	42a5      	cmp	r5, r4
 800a9da:	d10b      	bne.n	800a9f4 <_free_r+0x70>
 800a9dc:	6824      	ldr	r4, [r4, #0]
 800a9de:	4421      	add	r1, r4
 800a9e0:	1854      	adds	r4, r2, r1
 800a9e2:	42a3      	cmp	r3, r4
 800a9e4:	6011      	str	r1, [r2, #0]
 800a9e6:	d1e0      	bne.n	800a9aa <_free_r+0x26>
 800a9e8:	681c      	ldr	r4, [r3, #0]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	6053      	str	r3, [r2, #4]
 800a9ee:	4421      	add	r1, r4
 800a9f0:	6011      	str	r1, [r2, #0]
 800a9f2:	e7da      	b.n	800a9aa <_free_r+0x26>
 800a9f4:	d902      	bls.n	800a9fc <_free_r+0x78>
 800a9f6:	230c      	movs	r3, #12
 800a9f8:	6003      	str	r3, [r0, #0]
 800a9fa:	e7d6      	b.n	800a9aa <_free_r+0x26>
 800a9fc:	6825      	ldr	r5, [r4, #0]
 800a9fe:	1961      	adds	r1, r4, r5
 800aa00:	428b      	cmp	r3, r1
 800aa02:	bf04      	itt	eq
 800aa04:	6819      	ldreq	r1, [r3, #0]
 800aa06:	685b      	ldreq	r3, [r3, #4]
 800aa08:	6063      	str	r3, [r4, #4]
 800aa0a:	bf04      	itt	eq
 800aa0c:	1949      	addeq	r1, r1, r5
 800aa0e:	6021      	streq	r1, [r4, #0]
 800aa10:	6054      	str	r4, [r2, #4]
 800aa12:	e7ca      	b.n	800a9aa <_free_r+0x26>
 800aa14:	b003      	add	sp, #12
 800aa16:	bd30      	pop	{r4, r5, pc}
 800aa18:	20000a84 	.word	0x20000a84

0800aa1c <sbrk_aligned>:
 800aa1c:	b570      	push	{r4, r5, r6, lr}
 800aa1e:	4e0e      	ldr	r6, [pc, #56]	; (800aa58 <sbrk_aligned+0x3c>)
 800aa20:	460c      	mov	r4, r1
 800aa22:	6831      	ldr	r1, [r6, #0]
 800aa24:	4605      	mov	r5, r0
 800aa26:	b911      	cbnz	r1, 800aa2e <sbrk_aligned+0x12>
 800aa28:	f000 fcf6 	bl	800b418 <_sbrk_r>
 800aa2c:	6030      	str	r0, [r6, #0]
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4628      	mov	r0, r5
 800aa32:	f000 fcf1 	bl	800b418 <_sbrk_r>
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	d00a      	beq.n	800aa50 <sbrk_aligned+0x34>
 800aa3a:	1cc4      	adds	r4, r0, #3
 800aa3c:	f024 0403 	bic.w	r4, r4, #3
 800aa40:	42a0      	cmp	r0, r4
 800aa42:	d007      	beq.n	800aa54 <sbrk_aligned+0x38>
 800aa44:	1a21      	subs	r1, r4, r0
 800aa46:	4628      	mov	r0, r5
 800aa48:	f000 fce6 	bl	800b418 <_sbrk_r>
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d101      	bne.n	800aa54 <sbrk_aligned+0x38>
 800aa50:	f04f 34ff 	mov.w	r4, #4294967295
 800aa54:	4620      	mov	r0, r4
 800aa56:	bd70      	pop	{r4, r5, r6, pc}
 800aa58:	20000a88 	.word	0x20000a88

0800aa5c <_malloc_r>:
 800aa5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa60:	1ccd      	adds	r5, r1, #3
 800aa62:	f025 0503 	bic.w	r5, r5, #3
 800aa66:	3508      	adds	r5, #8
 800aa68:	2d0c      	cmp	r5, #12
 800aa6a:	bf38      	it	cc
 800aa6c:	250c      	movcc	r5, #12
 800aa6e:	2d00      	cmp	r5, #0
 800aa70:	4607      	mov	r7, r0
 800aa72:	db01      	blt.n	800aa78 <_malloc_r+0x1c>
 800aa74:	42a9      	cmp	r1, r5
 800aa76:	d905      	bls.n	800aa84 <_malloc_r+0x28>
 800aa78:	230c      	movs	r3, #12
 800aa7a:	603b      	str	r3, [r7, #0]
 800aa7c:	2600      	movs	r6, #0
 800aa7e:	4630      	mov	r0, r6
 800aa80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa84:	4e2e      	ldr	r6, [pc, #184]	; (800ab40 <_malloc_r+0xe4>)
 800aa86:	f001 fb99 	bl	800c1bc <__malloc_lock>
 800aa8a:	6833      	ldr	r3, [r6, #0]
 800aa8c:	461c      	mov	r4, r3
 800aa8e:	bb34      	cbnz	r4, 800aade <_malloc_r+0x82>
 800aa90:	4629      	mov	r1, r5
 800aa92:	4638      	mov	r0, r7
 800aa94:	f7ff ffc2 	bl	800aa1c <sbrk_aligned>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	d14d      	bne.n	800ab3a <_malloc_r+0xde>
 800aa9e:	6834      	ldr	r4, [r6, #0]
 800aaa0:	4626      	mov	r6, r4
 800aaa2:	2e00      	cmp	r6, #0
 800aaa4:	d140      	bne.n	800ab28 <_malloc_r+0xcc>
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	4631      	mov	r1, r6
 800aaaa:	4638      	mov	r0, r7
 800aaac:	eb04 0803 	add.w	r8, r4, r3
 800aab0:	f000 fcb2 	bl	800b418 <_sbrk_r>
 800aab4:	4580      	cmp	r8, r0
 800aab6:	d13a      	bne.n	800ab2e <_malloc_r+0xd2>
 800aab8:	6821      	ldr	r1, [r4, #0]
 800aaba:	3503      	adds	r5, #3
 800aabc:	1a6d      	subs	r5, r5, r1
 800aabe:	f025 0503 	bic.w	r5, r5, #3
 800aac2:	3508      	adds	r5, #8
 800aac4:	2d0c      	cmp	r5, #12
 800aac6:	bf38      	it	cc
 800aac8:	250c      	movcc	r5, #12
 800aaca:	4629      	mov	r1, r5
 800aacc:	4638      	mov	r0, r7
 800aace:	f7ff ffa5 	bl	800aa1c <sbrk_aligned>
 800aad2:	3001      	adds	r0, #1
 800aad4:	d02b      	beq.n	800ab2e <_malloc_r+0xd2>
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	442b      	add	r3, r5
 800aada:	6023      	str	r3, [r4, #0]
 800aadc:	e00e      	b.n	800aafc <_malloc_r+0xa0>
 800aade:	6822      	ldr	r2, [r4, #0]
 800aae0:	1b52      	subs	r2, r2, r5
 800aae2:	d41e      	bmi.n	800ab22 <_malloc_r+0xc6>
 800aae4:	2a0b      	cmp	r2, #11
 800aae6:	d916      	bls.n	800ab16 <_malloc_r+0xba>
 800aae8:	1961      	adds	r1, r4, r5
 800aaea:	42a3      	cmp	r3, r4
 800aaec:	6025      	str	r5, [r4, #0]
 800aaee:	bf18      	it	ne
 800aaf0:	6059      	strne	r1, [r3, #4]
 800aaf2:	6863      	ldr	r3, [r4, #4]
 800aaf4:	bf08      	it	eq
 800aaf6:	6031      	streq	r1, [r6, #0]
 800aaf8:	5162      	str	r2, [r4, r5]
 800aafa:	604b      	str	r3, [r1, #4]
 800aafc:	4638      	mov	r0, r7
 800aafe:	f104 060b 	add.w	r6, r4, #11
 800ab02:	f001 fb61 	bl	800c1c8 <__malloc_unlock>
 800ab06:	f026 0607 	bic.w	r6, r6, #7
 800ab0a:	1d23      	adds	r3, r4, #4
 800ab0c:	1af2      	subs	r2, r6, r3
 800ab0e:	d0b6      	beq.n	800aa7e <_malloc_r+0x22>
 800ab10:	1b9b      	subs	r3, r3, r6
 800ab12:	50a3      	str	r3, [r4, r2]
 800ab14:	e7b3      	b.n	800aa7e <_malloc_r+0x22>
 800ab16:	6862      	ldr	r2, [r4, #4]
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	bf0c      	ite	eq
 800ab1c:	6032      	streq	r2, [r6, #0]
 800ab1e:	605a      	strne	r2, [r3, #4]
 800ab20:	e7ec      	b.n	800aafc <_malloc_r+0xa0>
 800ab22:	4623      	mov	r3, r4
 800ab24:	6864      	ldr	r4, [r4, #4]
 800ab26:	e7b2      	b.n	800aa8e <_malloc_r+0x32>
 800ab28:	4634      	mov	r4, r6
 800ab2a:	6876      	ldr	r6, [r6, #4]
 800ab2c:	e7b9      	b.n	800aaa2 <_malloc_r+0x46>
 800ab2e:	230c      	movs	r3, #12
 800ab30:	603b      	str	r3, [r7, #0]
 800ab32:	4638      	mov	r0, r7
 800ab34:	f001 fb48 	bl	800c1c8 <__malloc_unlock>
 800ab38:	e7a1      	b.n	800aa7e <_malloc_r+0x22>
 800ab3a:	6025      	str	r5, [r4, #0]
 800ab3c:	e7de      	b.n	800aafc <_malloc_r+0xa0>
 800ab3e:	bf00      	nop
 800ab40:	20000a84 	.word	0x20000a84

0800ab44 <__cvt>:
 800ab44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab48:	ec55 4b10 	vmov	r4, r5, d0
 800ab4c:	2d00      	cmp	r5, #0
 800ab4e:	460e      	mov	r6, r1
 800ab50:	4619      	mov	r1, r3
 800ab52:	462b      	mov	r3, r5
 800ab54:	bfbb      	ittet	lt
 800ab56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab5a:	461d      	movlt	r5, r3
 800ab5c:	2300      	movge	r3, #0
 800ab5e:	232d      	movlt	r3, #45	; 0x2d
 800ab60:	700b      	strb	r3, [r1, #0]
 800ab62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab68:	4691      	mov	r9, r2
 800ab6a:	f023 0820 	bic.w	r8, r3, #32
 800ab6e:	bfbc      	itt	lt
 800ab70:	4622      	movlt	r2, r4
 800ab72:	4614      	movlt	r4, r2
 800ab74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab78:	d005      	beq.n	800ab86 <__cvt+0x42>
 800ab7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab7e:	d100      	bne.n	800ab82 <__cvt+0x3e>
 800ab80:	3601      	adds	r6, #1
 800ab82:	2102      	movs	r1, #2
 800ab84:	e000      	b.n	800ab88 <__cvt+0x44>
 800ab86:	2103      	movs	r1, #3
 800ab88:	ab03      	add	r3, sp, #12
 800ab8a:	9301      	str	r3, [sp, #4]
 800ab8c:	ab02      	add	r3, sp, #8
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	ec45 4b10 	vmov	d0, r4, r5
 800ab94:	4653      	mov	r3, sl
 800ab96:	4632      	mov	r2, r6
 800ab98:	f000 fd1e 	bl	800b5d8 <_dtoa_r>
 800ab9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aba0:	4607      	mov	r7, r0
 800aba2:	d102      	bne.n	800abaa <__cvt+0x66>
 800aba4:	f019 0f01 	tst.w	r9, #1
 800aba8:	d022      	beq.n	800abf0 <__cvt+0xac>
 800abaa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800abae:	eb07 0906 	add.w	r9, r7, r6
 800abb2:	d110      	bne.n	800abd6 <__cvt+0x92>
 800abb4:	783b      	ldrb	r3, [r7, #0]
 800abb6:	2b30      	cmp	r3, #48	; 0x30
 800abb8:	d10a      	bne.n	800abd0 <__cvt+0x8c>
 800abba:	2200      	movs	r2, #0
 800abbc:	2300      	movs	r3, #0
 800abbe:	4620      	mov	r0, r4
 800abc0:	4629      	mov	r1, r5
 800abc2:	f7f5 ff89 	bl	8000ad8 <__aeabi_dcmpeq>
 800abc6:	b918      	cbnz	r0, 800abd0 <__cvt+0x8c>
 800abc8:	f1c6 0601 	rsb	r6, r6, #1
 800abcc:	f8ca 6000 	str.w	r6, [sl]
 800abd0:	f8da 3000 	ldr.w	r3, [sl]
 800abd4:	4499      	add	r9, r3
 800abd6:	2200      	movs	r2, #0
 800abd8:	2300      	movs	r3, #0
 800abda:	4620      	mov	r0, r4
 800abdc:	4629      	mov	r1, r5
 800abde:	f7f5 ff7b 	bl	8000ad8 <__aeabi_dcmpeq>
 800abe2:	b108      	cbz	r0, 800abe8 <__cvt+0xa4>
 800abe4:	f8cd 900c 	str.w	r9, [sp, #12]
 800abe8:	2230      	movs	r2, #48	; 0x30
 800abea:	9b03      	ldr	r3, [sp, #12]
 800abec:	454b      	cmp	r3, r9
 800abee:	d307      	bcc.n	800ac00 <__cvt+0xbc>
 800abf0:	9b03      	ldr	r3, [sp, #12]
 800abf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abf4:	1bdb      	subs	r3, r3, r7
 800abf6:	4638      	mov	r0, r7
 800abf8:	6013      	str	r3, [r2, #0]
 800abfa:	b004      	add	sp, #16
 800abfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac00:	1c59      	adds	r1, r3, #1
 800ac02:	9103      	str	r1, [sp, #12]
 800ac04:	701a      	strb	r2, [r3, #0]
 800ac06:	e7f0      	b.n	800abea <__cvt+0xa6>

0800ac08 <__exponent>:
 800ac08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2900      	cmp	r1, #0
 800ac0e:	bfb8      	it	lt
 800ac10:	4249      	neglt	r1, r1
 800ac12:	f803 2b02 	strb.w	r2, [r3], #2
 800ac16:	bfb4      	ite	lt
 800ac18:	222d      	movlt	r2, #45	; 0x2d
 800ac1a:	222b      	movge	r2, #43	; 0x2b
 800ac1c:	2909      	cmp	r1, #9
 800ac1e:	7042      	strb	r2, [r0, #1]
 800ac20:	dd2a      	ble.n	800ac78 <__exponent+0x70>
 800ac22:	f10d 0407 	add.w	r4, sp, #7
 800ac26:	46a4      	mov	ip, r4
 800ac28:	270a      	movs	r7, #10
 800ac2a:	46a6      	mov	lr, r4
 800ac2c:	460a      	mov	r2, r1
 800ac2e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ac32:	fb07 1516 	mls	r5, r7, r6, r1
 800ac36:	3530      	adds	r5, #48	; 0x30
 800ac38:	2a63      	cmp	r2, #99	; 0x63
 800ac3a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ac42:	4631      	mov	r1, r6
 800ac44:	dcf1      	bgt.n	800ac2a <__exponent+0x22>
 800ac46:	3130      	adds	r1, #48	; 0x30
 800ac48:	f1ae 0502 	sub.w	r5, lr, #2
 800ac4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ac50:	1c44      	adds	r4, r0, #1
 800ac52:	4629      	mov	r1, r5
 800ac54:	4561      	cmp	r1, ip
 800ac56:	d30a      	bcc.n	800ac6e <__exponent+0x66>
 800ac58:	f10d 0209 	add.w	r2, sp, #9
 800ac5c:	eba2 020e 	sub.w	r2, r2, lr
 800ac60:	4565      	cmp	r5, ip
 800ac62:	bf88      	it	hi
 800ac64:	2200      	movhi	r2, #0
 800ac66:	4413      	add	r3, r2
 800ac68:	1a18      	subs	r0, r3, r0
 800ac6a:	b003      	add	sp, #12
 800ac6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac72:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ac76:	e7ed      	b.n	800ac54 <__exponent+0x4c>
 800ac78:	2330      	movs	r3, #48	; 0x30
 800ac7a:	3130      	adds	r1, #48	; 0x30
 800ac7c:	7083      	strb	r3, [r0, #2]
 800ac7e:	70c1      	strb	r1, [r0, #3]
 800ac80:	1d03      	adds	r3, r0, #4
 800ac82:	e7f1      	b.n	800ac68 <__exponent+0x60>

0800ac84 <_printf_float>:
 800ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac88:	ed2d 8b02 	vpush	{d8}
 800ac8c:	b08d      	sub	sp, #52	; 0x34
 800ac8e:	460c      	mov	r4, r1
 800ac90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac94:	4616      	mov	r6, r2
 800ac96:	461f      	mov	r7, r3
 800ac98:	4605      	mov	r5, r0
 800ac9a:	f001 fa8b 	bl	800c1b4 <_localeconv_r>
 800ac9e:	f8d0 a000 	ldr.w	sl, [r0]
 800aca2:	4650      	mov	r0, sl
 800aca4:	f7f5 fa9c 	bl	80001e0 <strlen>
 800aca8:	2300      	movs	r3, #0
 800acaa:	930a      	str	r3, [sp, #40]	; 0x28
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	9305      	str	r3, [sp, #20]
 800acb0:	f8d8 3000 	ldr.w	r3, [r8]
 800acb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800acb8:	3307      	adds	r3, #7
 800acba:	f023 0307 	bic.w	r3, r3, #7
 800acbe:	f103 0208 	add.w	r2, r3, #8
 800acc2:	f8c8 2000 	str.w	r2, [r8]
 800acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800acce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800acd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800acd6:	9307      	str	r3, [sp, #28]
 800acd8:	f8cd 8018 	str.w	r8, [sp, #24]
 800acdc:	ee08 0a10 	vmov	s16, r0
 800ace0:	4b9f      	ldr	r3, [pc, #636]	; (800af60 <_printf_float+0x2dc>)
 800ace2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ace6:	f04f 32ff 	mov.w	r2, #4294967295
 800acea:	f7f5 ff27 	bl	8000b3c <__aeabi_dcmpun>
 800acee:	bb88      	cbnz	r0, 800ad54 <_printf_float+0xd0>
 800acf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acf4:	4b9a      	ldr	r3, [pc, #616]	; (800af60 <_printf_float+0x2dc>)
 800acf6:	f04f 32ff 	mov.w	r2, #4294967295
 800acfa:	f7f5 ff01 	bl	8000b00 <__aeabi_dcmple>
 800acfe:	bb48      	cbnz	r0, 800ad54 <_printf_float+0xd0>
 800ad00:	2200      	movs	r2, #0
 800ad02:	2300      	movs	r3, #0
 800ad04:	4640      	mov	r0, r8
 800ad06:	4649      	mov	r1, r9
 800ad08:	f7f5 fef0 	bl	8000aec <__aeabi_dcmplt>
 800ad0c:	b110      	cbz	r0, 800ad14 <_printf_float+0x90>
 800ad0e:	232d      	movs	r3, #45	; 0x2d
 800ad10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad14:	4b93      	ldr	r3, [pc, #588]	; (800af64 <_printf_float+0x2e0>)
 800ad16:	4894      	ldr	r0, [pc, #592]	; (800af68 <_printf_float+0x2e4>)
 800ad18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ad1c:	bf94      	ite	ls
 800ad1e:	4698      	movls	r8, r3
 800ad20:	4680      	movhi	r8, r0
 800ad22:	2303      	movs	r3, #3
 800ad24:	6123      	str	r3, [r4, #16]
 800ad26:	9b05      	ldr	r3, [sp, #20]
 800ad28:	f023 0204 	bic.w	r2, r3, #4
 800ad2c:	6022      	str	r2, [r4, #0]
 800ad2e:	f04f 0900 	mov.w	r9, #0
 800ad32:	9700      	str	r7, [sp, #0]
 800ad34:	4633      	mov	r3, r6
 800ad36:	aa0b      	add	r2, sp, #44	; 0x2c
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	f000 f9d8 	bl	800b0f0 <_printf_common>
 800ad40:	3001      	adds	r0, #1
 800ad42:	f040 8090 	bne.w	800ae66 <_printf_float+0x1e2>
 800ad46:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4a:	b00d      	add	sp, #52	; 0x34
 800ad4c:	ecbd 8b02 	vpop	{d8}
 800ad50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad54:	4642      	mov	r2, r8
 800ad56:	464b      	mov	r3, r9
 800ad58:	4640      	mov	r0, r8
 800ad5a:	4649      	mov	r1, r9
 800ad5c:	f7f5 feee 	bl	8000b3c <__aeabi_dcmpun>
 800ad60:	b140      	cbz	r0, 800ad74 <_printf_float+0xf0>
 800ad62:	464b      	mov	r3, r9
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	bfbc      	itt	lt
 800ad68:	232d      	movlt	r3, #45	; 0x2d
 800ad6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad6e:	487f      	ldr	r0, [pc, #508]	; (800af6c <_printf_float+0x2e8>)
 800ad70:	4b7f      	ldr	r3, [pc, #508]	; (800af70 <_printf_float+0x2ec>)
 800ad72:	e7d1      	b.n	800ad18 <_printf_float+0x94>
 800ad74:	6863      	ldr	r3, [r4, #4]
 800ad76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad7a:	9206      	str	r2, [sp, #24]
 800ad7c:	1c5a      	adds	r2, r3, #1
 800ad7e:	d13f      	bne.n	800ae00 <_printf_float+0x17c>
 800ad80:	2306      	movs	r3, #6
 800ad82:	6063      	str	r3, [r4, #4]
 800ad84:	9b05      	ldr	r3, [sp, #20]
 800ad86:	6861      	ldr	r1, [r4, #4]
 800ad88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	9303      	str	r3, [sp, #12]
 800ad90:	ab0a      	add	r3, sp, #40	; 0x28
 800ad92:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad96:	ab09      	add	r3, sp, #36	; 0x24
 800ad98:	ec49 8b10 	vmov	d0, r8, r9
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	6022      	str	r2, [r4, #0]
 800ada0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ada4:	4628      	mov	r0, r5
 800ada6:	f7ff fecd 	bl	800ab44 <__cvt>
 800adaa:	9b06      	ldr	r3, [sp, #24]
 800adac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adae:	2b47      	cmp	r3, #71	; 0x47
 800adb0:	4680      	mov	r8, r0
 800adb2:	d108      	bne.n	800adc6 <_printf_float+0x142>
 800adb4:	1cc8      	adds	r0, r1, #3
 800adb6:	db02      	blt.n	800adbe <_printf_float+0x13a>
 800adb8:	6863      	ldr	r3, [r4, #4]
 800adba:	4299      	cmp	r1, r3
 800adbc:	dd41      	ble.n	800ae42 <_printf_float+0x1be>
 800adbe:	f1ab 0b02 	sub.w	fp, fp, #2
 800adc2:	fa5f fb8b 	uxtb.w	fp, fp
 800adc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800adca:	d820      	bhi.n	800ae0e <_printf_float+0x18a>
 800adcc:	3901      	subs	r1, #1
 800adce:	465a      	mov	r2, fp
 800add0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800add4:	9109      	str	r1, [sp, #36]	; 0x24
 800add6:	f7ff ff17 	bl	800ac08 <__exponent>
 800adda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800addc:	1813      	adds	r3, r2, r0
 800adde:	2a01      	cmp	r2, #1
 800ade0:	4681      	mov	r9, r0
 800ade2:	6123      	str	r3, [r4, #16]
 800ade4:	dc02      	bgt.n	800adec <_printf_float+0x168>
 800ade6:	6822      	ldr	r2, [r4, #0]
 800ade8:	07d2      	lsls	r2, r2, #31
 800adea:	d501      	bpl.n	800adf0 <_printf_float+0x16c>
 800adec:	3301      	adds	r3, #1
 800adee:	6123      	str	r3, [r4, #16]
 800adf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d09c      	beq.n	800ad32 <_printf_float+0xae>
 800adf8:	232d      	movs	r3, #45	; 0x2d
 800adfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adfe:	e798      	b.n	800ad32 <_printf_float+0xae>
 800ae00:	9a06      	ldr	r2, [sp, #24]
 800ae02:	2a47      	cmp	r2, #71	; 0x47
 800ae04:	d1be      	bne.n	800ad84 <_printf_float+0x100>
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1bc      	bne.n	800ad84 <_printf_float+0x100>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e7b9      	b.n	800ad82 <_printf_float+0xfe>
 800ae0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ae12:	d118      	bne.n	800ae46 <_printf_float+0x1c2>
 800ae14:	2900      	cmp	r1, #0
 800ae16:	6863      	ldr	r3, [r4, #4]
 800ae18:	dd0b      	ble.n	800ae32 <_printf_float+0x1ae>
 800ae1a:	6121      	str	r1, [r4, #16]
 800ae1c:	b913      	cbnz	r3, 800ae24 <_printf_float+0x1a0>
 800ae1e:	6822      	ldr	r2, [r4, #0]
 800ae20:	07d0      	lsls	r0, r2, #31
 800ae22:	d502      	bpl.n	800ae2a <_printf_float+0x1a6>
 800ae24:	3301      	adds	r3, #1
 800ae26:	440b      	add	r3, r1
 800ae28:	6123      	str	r3, [r4, #16]
 800ae2a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ae2c:	f04f 0900 	mov.w	r9, #0
 800ae30:	e7de      	b.n	800adf0 <_printf_float+0x16c>
 800ae32:	b913      	cbnz	r3, 800ae3a <_printf_float+0x1b6>
 800ae34:	6822      	ldr	r2, [r4, #0]
 800ae36:	07d2      	lsls	r2, r2, #31
 800ae38:	d501      	bpl.n	800ae3e <_printf_float+0x1ba>
 800ae3a:	3302      	adds	r3, #2
 800ae3c:	e7f4      	b.n	800ae28 <_printf_float+0x1a4>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e7f2      	b.n	800ae28 <_printf_float+0x1a4>
 800ae42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ae46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae48:	4299      	cmp	r1, r3
 800ae4a:	db05      	blt.n	800ae58 <_printf_float+0x1d4>
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	6121      	str	r1, [r4, #16]
 800ae50:	07d8      	lsls	r0, r3, #31
 800ae52:	d5ea      	bpl.n	800ae2a <_printf_float+0x1a6>
 800ae54:	1c4b      	adds	r3, r1, #1
 800ae56:	e7e7      	b.n	800ae28 <_printf_float+0x1a4>
 800ae58:	2900      	cmp	r1, #0
 800ae5a:	bfd4      	ite	le
 800ae5c:	f1c1 0202 	rsble	r2, r1, #2
 800ae60:	2201      	movgt	r2, #1
 800ae62:	4413      	add	r3, r2
 800ae64:	e7e0      	b.n	800ae28 <_printf_float+0x1a4>
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	055a      	lsls	r2, r3, #21
 800ae6a:	d407      	bmi.n	800ae7c <_printf_float+0x1f8>
 800ae6c:	6923      	ldr	r3, [r4, #16]
 800ae6e:	4642      	mov	r2, r8
 800ae70:	4631      	mov	r1, r6
 800ae72:	4628      	mov	r0, r5
 800ae74:	47b8      	blx	r7
 800ae76:	3001      	adds	r0, #1
 800ae78:	d12c      	bne.n	800aed4 <_printf_float+0x250>
 800ae7a:	e764      	b.n	800ad46 <_printf_float+0xc2>
 800ae7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae80:	f240 80e0 	bls.w	800b044 <_printf_float+0x3c0>
 800ae84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae88:	2200      	movs	r2, #0
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	f7f5 fe24 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d034      	beq.n	800aefe <_printf_float+0x27a>
 800ae94:	4a37      	ldr	r2, [pc, #220]	; (800af74 <_printf_float+0x2f0>)
 800ae96:	2301      	movs	r3, #1
 800ae98:	4631      	mov	r1, r6
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	47b8      	blx	r7
 800ae9e:	3001      	adds	r0, #1
 800aea0:	f43f af51 	beq.w	800ad46 <_printf_float+0xc2>
 800aea4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	db02      	blt.n	800aeb2 <_printf_float+0x22e>
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	07d8      	lsls	r0, r3, #31
 800aeb0:	d510      	bpl.n	800aed4 <_printf_float+0x250>
 800aeb2:	ee18 3a10 	vmov	r3, s16
 800aeb6:	4652      	mov	r2, sl
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4628      	mov	r0, r5
 800aebc:	47b8      	blx	r7
 800aebe:	3001      	adds	r0, #1
 800aec0:	f43f af41 	beq.w	800ad46 <_printf_float+0xc2>
 800aec4:	f04f 0800 	mov.w	r8, #0
 800aec8:	f104 091a 	add.w	r9, r4, #26
 800aecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aece:	3b01      	subs	r3, #1
 800aed0:	4543      	cmp	r3, r8
 800aed2:	dc09      	bgt.n	800aee8 <_printf_float+0x264>
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	079b      	lsls	r3, r3, #30
 800aed8:	f100 8105 	bmi.w	800b0e6 <_printf_float+0x462>
 800aedc:	68e0      	ldr	r0, [r4, #12]
 800aede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aee0:	4298      	cmp	r0, r3
 800aee2:	bfb8      	it	lt
 800aee4:	4618      	movlt	r0, r3
 800aee6:	e730      	b.n	800ad4a <_printf_float+0xc6>
 800aee8:	2301      	movs	r3, #1
 800aeea:	464a      	mov	r2, r9
 800aeec:	4631      	mov	r1, r6
 800aeee:	4628      	mov	r0, r5
 800aef0:	47b8      	blx	r7
 800aef2:	3001      	adds	r0, #1
 800aef4:	f43f af27 	beq.w	800ad46 <_printf_float+0xc2>
 800aef8:	f108 0801 	add.w	r8, r8, #1
 800aefc:	e7e6      	b.n	800aecc <_printf_float+0x248>
 800aefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af00:	2b00      	cmp	r3, #0
 800af02:	dc39      	bgt.n	800af78 <_printf_float+0x2f4>
 800af04:	4a1b      	ldr	r2, [pc, #108]	; (800af74 <_printf_float+0x2f0>)
 800af06:	2301      	movs	r3, #1
 800af08:	4631      	mov	r1, r6
 800af0a:	4628      	mov	r0, r5
 800af0c:	47b8      	blx	r7
 800af0e:	3001      	adds	r0, #1
 800af10:	f43f af19 	beq.w	800ad46 <_printf_float+0xc2>
 800af14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af18:	4313      	orrs	r3, r2
 800af1a:	d102      	bne.n	800af22 <_printf_float+0x29e>
 800af1c:	6823      	ldr	r3, [r4, #0]
 800af1e:	07d9      	lsls	r1, r3, #31
 800af20:	d5d8      	bpl.n	800aed4 <_printf_float+0x250>
 800af22:	ee18 3a10 	vmov	r3, s16
 800af26:	4652      	mov	r2, sl
 800af28:	4631      	mov	r1, r6
 800af2a:	4628      	mov	r0, r5
 800af2c:	47b8      	blx	r7
 800af2e:	3001      	adds	r0, #1
 800af30:	f43f af09 	beq.w	800ad46 <_printf_float+0xc2>
 800af34:	f04f 0900 	mov.w	r9, #0
 800af38:	f104 0a1a 	add.w	sl, r4, #26
 800af3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af3e:	425b      	negs	r3, r3
 800af40:	454b      	cmp	r3, r9
 800af42:	dc01      	bgt.n	800af48 <_printf_float+0x2c4>
 800af44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af46:	e792      	b.n	800ae6e <_printf_float+0x1ea>
 800af48:	2301      	movs	r3, #1
 800af4a:	4652      	mov	r2, sl
 800af4c:	4631      	mov	r1, r6
 800af4e:	4628      	mov	r0, r5
 800af50:	47b8      	blx	r7
 800af52:	3001      	adds	r0, #1
 800af54:	f43f aef7 	beq.w	800ad46 <_printf_float+0xc2>
 800af58:	f109 0901 	add.w	r9, r9, #1
 800af5c:	e7ee      	b.n	800af3c <_printf_float+0x2b8>
 800af5e:	bf00      	nop
 800af60:	7fefffff 	.word	0x7fefffff
 800af64:	0800d5ac 	.word	0x0800d5ac
 800af68:	0800d5b0 	.word	0x0800d5b0
 800af6c:	0800d5b8 	.word	0x0800d5b8
 800af70:	0800d5b4 	.word	0x0800d5b4
 800af74:	0800d5bc 	.word	0x0800d5bc
 800af78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af7c:	429a      	cmp	r2, r3
 800af7e:	bfa8      	it	ge
 800af80:	461a      	movge	r2, r3
 800af82:	2a00      	cmp	r2, #0
 800af84:	4691      	mov	r9, r2
 800af86:	dc37      	bgt.n	800aff8 <_printf_float+0x374>
 800af88:	f04f 0b00 	mov.w	fp, #0
 800af8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af90:	f104 021a 	add.w	r2, r4, #26
 800af94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af96:	9305      	str	r3, [sp, #20]
 800af98:	eba3 0309 	sub.w	r3, r3, r9
 800af9c:	455b      	cmp	r3, fp
 800af9e:	dc33      	bgt.n	800b008 <_printf_float+0x384>
 800afa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afa4:	429a      	cmp	r2, r3
 800afa6:	db3b      	blt.n	800b020 <_printf_float+0x39c>
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	07da      	lsls	r2, r3, #31
 800afac:	d438      	bmi.n	800b020 <_printf_float+0x39c>
 800afae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afb0:	9a05      	ldr	r2, [sp, #20]
 800afb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afb4:	1a9a      	subs	r2, r3, r2
 800afb6:	eba3 0901 	sub.w	r9, r3, r1
 800afba:	4591      	cmp	r9, r2
 800afbc:	bfa8      	it	ge
 800afbe:	4691      	movge	r9, r2
 800afc0:	f1b9 0f00 	cmp.w	r9, #0
 800afc4:	dc35      	bgt.n	800b032 <_printf_float+0x3ae>
 800afc6:	f04f 0800 	mov.w	r8, #0
 800afca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afce:	f104 0a1a 	add.w	sl, r4, #26
 800afd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afd6:	1a9b      	subs	r3, r3, r2
 800afd8:	eba3 0309 	sub.w	r3, r3, r9
 800afdc:	4543      	cmp	r3, r8
 800afde:	f77f af79 	ble.w	800aed4 <_printf_float+0x250>
 800afe2:	2301      	movs	r3, #1
 800afe4:	4652      	mov	r2, sl
 800afe6:	4631      	mov	r1, r6
 800afe8:	4628      	mov	r0, r5
 800afea:	47b8      	blx	r7
 800afec:	3001      	adds	r0, #1
 800afee:	f43f aeaa 	beq.w	800ad46 <_printf_float+0xc2>
 800aff2:	f108 0801 	add.w	r8, r8, #1
 800aff6:	e7ec      	b.n	800afd2 <_printf_float+0x34e>
 800aff8:	4613      	mov	r3, r2
 800affa:	4631      	mov	r1, r6
 800affc:	4642      	mov	r2, r8
 800affe:	4628      	mov	r0, r5
 800b000:	47b8      	blx	r7
 800b002:	3001      	adds	r0, #1
 800b004:	d1c0      	bne.n	800af88 <_printf_float+0x304>
 800b006:	e69e      	b.n	800ad46 <_printf_float+0xc2>
 800b008:	2301      	movs	r3, #1
 800b00a:	4631      	mov	r1, r6
 800b00c:	4628      	mov	r0, r5
 800b00e:	9205      	str	r2, [sp, #20]
 800b010:	47b8      	blx	r7
 800b012:	3001      	adds	r0, #1
 800b014:	f43f ae97 	beq.w	800ad46 <_printf_float+0xc2>
 800b018:	9a05      	ldr	r2, [sp, #20]
 800b01a:	f10b 0b01 	add.w	fp, fp, #1
 800b01e:	e7b9      	b.n	800af94 <_printf_float+0x310>
 800b020:	ee18 3a10 	vmov	r3, s16
 800b024:	4652      	mov	r2, sl
 800b026:	4631      	mov	r1, r6
 800b028:	4628      	mov	r0, r5
 800b02a:	47b8      	blx	r7
 800b02c:	3001      	adds	r0, #1
 800b02e:	d1be      	bne.n	800afae <_printf_float+0x32a>
 800b030:	e689      	b.n	800ad46 <_printf_float+0xc2>
 800b032:	9a05      	ldr	r2, [sp, #20]
 800b034:	464b      	mov	r3, r9
 800b036:	4442      	add	r2, r8
 800b038:	4631      	mov	r1, r6
 800b03a:	4628      	mov	r0, r5
 800b03c:	47b8      	blx	r7
 800b03e:	3001      	adds	r0, #1
 800b040:	d1c1      	bne.n	800afc6 <_printf_float+0x342>
 800b042:	e680      	b.n	800ad46 <_printf_float+0xc2>
 800b044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b046:	2a01      	cmp	r2, #1
 800b048:	dc01      	bgt.n	800b04e <_printf_float+0x3ca>
 800b04a:	07db      	lsls	r3, r3, #31
 800b04c:	d538      	bpl.n	800b0c0 <_printf_float+0x43c>
 800b04e:	2301      	movs	r3, #1
 800b050:	4642      	mov	r2, r8
 800b052:	4631      	mov	r1, r6
 800b054:	4628      	mov	r0, r5
 800b056:	47b8      	blx	r7
 800b058:	3001      	adds	r0, #1
 800b05a:	f43f ae74 	beq.w	800ad46 <_printf_float+0xc2>
 800b05e:	ee18 3a10 	vmov	r3, s16
 800b062:	4652      	mov	r2, sl
 800b064:	4631      	mov	r1, r6
 800b066:	4628      	mov	r0, r5
 800b068:	47b8      	blx	r7
 800b06a:	3001      	adds	r0, #1
 800b06c:	f43f ae6b 	beq.w	800ad46 <_printf_float+0xc2>
 800b070:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b074:	2200      	movs	r2, #0
 800b076:	2300      	movs	r3, #0
 800b078:	f7f5 fd2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b07c:	b9d8      	cbnz	r0, 800b0b6 <_printf_float+0x432>
 800b07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b080:	f108 0201 	add.w	r2, r8, #1
 800b084:	3b01      	subs	r3, #1
 800b086:	4631      	mov	r1, r6
 800b088:	4628      	mov	r0, r5
 800b08a:	47b8      	blx	r7
 800b08c:	3001      	adds	r0, #1
 800b08e:	d10e      	bne.n	800b0ae <_printf_float+0x42a>
 800b090:	e659      	b.n	800ad46 <_printf_float+0xc2>
 800b092:	2301      	movs	r3, #1
 800b094:	4652      	mov	r2, sl
 800b096:	4631      	mov	r1, r6
 800b098:	4628      	mov	r0, r5
 800b09a:	47b8      	blx	r7
 800b09c:	3001      	adds	r0, #1
 800b09e:	f43f ae52 	beq.w	800ad46 <_printf_float+0xc2>
 800b0a2:	f108 0801 	add.w	r8, r8, #1
 800b0a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	4543      	cmp	r3, r8
 800b0ac:	dcf1      	bgt.n	800b092 <_printf_float+0x40e>
 800b0ae:	464b      	mov	r3, r9
 800b0b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b0b4:	e6dc      	b.n	800ae70 <_printf_float+0x1ec>
 800b0b6:	f04f 0800 	mov.w	r8, #0
 800b0ba:	f104 0a1a 	add.w	sl, r4, #26
 800b0be:	e7f2      	b.n	800b0a6 <_printf_float+0x422>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	4642      	mov	r2, r8
 800b0c4:	e7df      	b.n	800b086 <_printf_float+0x402>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	464a      	mov	r2, r9
 800b0ca:	4631      	mov	r1, r6
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	47b8      	blx	r7
 800b0d0:	3001      	adds	r0, #1
 800b0d2:	f43f ae38 	beq.w	800ad46 <_printf_float+0xc2>
 800b0d6:	f108 0801 	add.w	r8, r8, #1
 800b0da:	68e3      	ldr	r3, [r4, #12]
 800b0dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0de:	1a5b      	subs	r3, r3, r1
 800b0e0:	4543      	cmp	r3, r8
 800b0e2:	dcf0      	bgt.n	800b0c6 <_printf_float+0x442>
 800b0e4:	e6fa      	b.n	800aedc <_printf_float+0x258>
 800b0e6:	f04f 0800 	mov.w	r8, #0
 800b0ea:	f104 0919 	add.w	r9, r4, #25
 800b0ee:	e7f4      	b.n	800b0da <_printf_float+0x456>

0800b0f0 <_printf_common>:
 800b0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f4:	4616      	mov	r6, r2
 800b0f6:	4699      	mov	r9, r3
 800b0f8:	688a      	ldr	r2, [r1, #8]
 800b0fa:	690b      	ldr	r3, [r1, #16]
 800b0fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b100:	4293      	cmp	r3, r2
 800b102:	bfb8      	it	lt
 800b104:	4613      	movlt	r3, r2
 800b106:	6033      	str	r3, [r6, #0]
 800b108:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b10c:	4607      	mov	r7, r0
 800b10e:	460c      	mov	r4, r1
 800b110:	b10a      	cbz	r2, 800b116 <_printf_common+0x26>
 800b112:	3301      	adds	r3, #1
 800b114:	6033      	str	r3, [r6, #0]
 800b116:	6823      	ldr	r3, [r4, #0]
 800b118:	0699      	lsls	r1, r3, #26
 800b11a:	bf42      	ittt	mi
 800b11c:	6833      	ldrmi	r3, [r6, #0]
 800b11e:	3302      	addmi	r3, #2
 800b120:	6033      	strmi	r3, [r6, #0]
 800b122:	6825      	ldr	r5, [r4, #0]
 800b124:	f015 0506 	ands.w	r5, r5, #6
 800b128:	d106      	bne.n	800b138 <_printf_common+0x48>
 800b12a:	f104 0a19 	add.w	sl, r4, #25
 800b12e:	68e3      	ldr	r3, [r4, #12]
 800b130:	6832      	ldr	r2, [r6, #0]
 800b132:	1a9b      	subs	r3, r3, r2
 800b134:	42ab      	cmp	r3, r5
 800b136:	dc26      	bgt.n	800b186 <_printf_common+0x96>
 800b138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b13c:	1e13      	subs	r3, r2, #0
 800b13e:	6822      	ldr	r2, [r4, #0]
 800b140:	bf18      	it	ne
 800b142:	2301      	movne	r3, #1
 800b144:	0692      	lsls	r2, r2, #26
 800b146:	d42b      	bmi.n	800b1a0 <_printf_common+0xb0>
 800b148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b14c:	4649      	mov	r1, r9
 800b14e:	4638      	mov	r0, r7
 800b150:	47c0      	blx	r8
 800b152:	3001      	adds	r0, #1
 800b154:	d01e      	beq.n	800b194 <_printf_common+0xa4>
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	68e5      	ldr	r5, [r4, #12]
 800b15a:	6832      	ldr	r2, [r6, #0]
 800b15c:	f003 0306 	and.w	r3, r3, #6
 800b160:	2b04      	cmp	r3, #4
 800b162:	bf08      	it	eq
 800b164:	1aad      	subeq	r5, r5, r2
 800b166:	68a3      	ldr	r3, [r4, #8]
 800b168:	6922      	ldr	r2, [r4, #16]
 800b16a:	bf0c      	ite	eq
 800b16c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b170:	2500      	movne	r5, #0
 800b172:	4293      	cmp	r3, r2
 800b174:	bfc4      	itt	gt
 800b176:	1a9b      	subgt	r3, r3, r2
 800b178:	18ed      	addgt	r5, r5, r3
 800b17a:	2600      	movs	r6, #0
 800b17c:	341a      	adds	r4, #26
 800b17e:	42b5      	cmp	r5, r6
 800b180:	d11a      	bne.n	800b1b8 <_printf_common+0xc8>
 800b182:	2000      	movs	r0, #0
 800b184:	e008      	b.n	800b198 <_printf_common+0xa8>
 800b186:	2301      	movs	r3, #1
 800b188:	4652      	mov	r2, sl
 800b18a:	4649      	mov	r1, r9
 800b18c:	4638      	mov	r0, r7
 800b18e:	47c0      	blx	r8
 800b190:	3001      	adds	r0, #1
 800b192:	d103      	bne.n	800b19c <_printf_common+0xac>
 800b194:	f04f 30ff 	mov.w	r0, #4294967295
 800b198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b19c:	3501      	adds	r5, #1
 800b19e:	e7c6      	b.n	800b12e <_printf_common+0x3e>
 800b1a0:	18e1      	adds	r1, r4, r3
 800b1a2:	1c5a      	adds	r2, r3, #1
 800b1a4:	2030      	movs	r0, #48	; 0x30
 800b1a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1aa:	4422      	add	r2, r4
 800b1ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1b4:	3302      	adds	r3, #2
 800b1b6:	e7c7      	b.n	800b148 <_printf_common+0x58>
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	4622      	mov	r2, r4
 800b1bc:	4649      	mov	r1, r9
 800b1be:	4638      	mov	r0, r7
 800b1c0:	47c0      	blx	r8
 800b1c2:	3001      	adds	r0, #1
 800b1c4:	d0e6      	beq.n	800b194 <_printf_common+0xa4>
 800b1c6:	3601      	adds	r6, #1
 800b1c8:	e7d9      	b.n	800b17e <_printf_common+0x8e>
	...

0800b1cc <_printf_i>:
 800b1cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d0:	7e0f      	ldrb	r7, [r1, #24]
 800b1d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1d4:	2f78      	cmp	r7, #120	; 0x78
 800b1d6:	4691      	mov	r9, r2
 800b1d8:	4680      	mov	r8, r0
 800b1da:	460c      	mov	r4, r1
 800b1dc:	469a      	mov	sl, r3
 800b1de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1e2:	d807      	bhi.n	800b1f4 <_printf_i+0x28>
 800b1e4:	2f62      	cmp	r7, #98	; 0x62
 800b1e6:	d80a      	bhi.n	800b1fe <_printf_i+0x32>
 800b1e8:	2f00      	cmp	r7, #0
 800b1ea:	f000 80d8 	beq.w	800b39e <_printf_i+0x1d2>
 800b1ee:	2f58      	cmp	r7, #88	; 0x58
 800b1f0:	f000 80a3 	beq.w	800b33a <_printf_i+0x16e>
 800b1f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1fc:	e03a      	b.n	800b274 <_printf_i+0xa8>
 800b1fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b202:	2b15      	cmp	r3, #21
 800b204:	d8f6      	bhi.n	800b1f4 <_printf_i+0x28>
 800b206:	a101      	add	r1, pc, #4	; (adr r1, 800b20c <_printf_i+0x40>)
 800b208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b20c:	0800b265 	.word	0x0800b265
 800b210:	0800b279 	.word	0x0800b279
 800b214:	0800b1f5 	.word	0x0800b1f5
 800b218:	0800b1f5 	.word	0x0800b1f5
 800b21c:	0800b1f5 	.word	0x0800b1f5
 800b220:	0800b1f5 	.word	0x0800b1f5
 800b224:	0800b279 	.word	0x0800b279
 800b228:	0800b1f5 	.word	0x0800b1f5
 800b22c:	0800b1f5 	.word	0x0800b1f5
 800b230:	0800b1f5 	.word	0x0800b1f5
 800b234:	0800b1f5 	.word	0x0800b1f5
 800b238:	0800b385 	.word	0x0800b385
 800b23c:	0800b2a9 	.word	0x0800b2a9
 800b240:	0800b367 	.word	0x0800b367
 800b244:	0800b1f5 	.word	0x0800b1f5
 800b248:	0800b1f5 	.word	0x0800b1f5
 800b24c:	0800b3a7 	.word	0x0800b3a7
 800b250:	0800b1f5 	.word	0x0800b1f5
 800b254:	0800b2a9 	.word	0x0800b2a9
 800b258:	0800b1f5 	.word	0x0800b1f5
 800b25c:	0800b1f5 	.word	0x0800b1f5
 800b260:	0800b36f 	.word	0x0800b36f
 800b264:	682b      	ldr	r3, [r5, #0]
 800b266:	1d1a      	adds	r2, r3, #4
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	602a      	str	r2, [r5, #0]
 800b26c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b274:	2301      	movs	r3, #1
 800b276:	e0a3      	b.n	800b3c0 <_printf_i+0x1f4>
 800b278:	6820      	ldr	r0, [r4, #0]
 800b27a:	6829      	ldr	r1, [r5, #0]
 800b27c:	0606      	lsls	r6, r0, #24
 800b27e:	f101 0304 	add.w	r3, r1, #4
 800b282:	d50a      	bpl.n	800b29a <_printf_i+0xce>
 800b284:	680e      	ldr	r6, [r1, #0]
 800b286:	602b      	str	r3, [r5, #0]
 800b288:	2e00      	cmp	r6, #0
 800b28a:	da03      	bge.n	800b294 <_printf_i+0xc8>
 800b28c:	232d      	movs	r3, #45	; 0x2d
 800b28e:	4276      	negs	r6, r6
 800b290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b294:	485e      	ldr	r0, [pc, #376]	; (800b410 <_printf_i+0x244>)
 800b296:	230a      	movs	r3, #10
 800b298:	e019      	b.n	800b2ce <_printf_i+0x102>
 800b29a:	680e      	ldr	r6, [r1, #0]
 800b29c:	602b      	str	r3, [r5, #0]
 800b29e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b2a2:	bf18      	it	ne
 800b2a4:	b236      	sxthne	r6, r6
 800b2a6:	e7ef      	b.n	800b288 <_printf_i+0xbc>
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	6820      	ldr	r0, [r4, #0]
 800b2ac:	1d19      	adds	r1, r3, #4
 800b2ae:	6029      	str	r1, [r5, #0]
 800b2b0:	0601      	lsls	r1, r0, #24
 800b2b2:	d501      	bpl.n	800b2b8 <_printf_i+0xec>
 800b2b4:	681e      	ldr	r6, [r3, #0]
 800b2b6:	e002      	b.n	800b2be <_printf_i+0xf2>
 800b2b8:	0646      	lsls	r6, r0, #25
 800b2ba:	d5fb      	bpl.n	800b2b4 <_printf_i+0xe8>
 800b2bc:	881e      	ldrh	r6, [r3, #0]
 800b2be:	4854      	ldr	r0, [pc, #336]	; (800b410 <_printf_i+0x244>)
 800b2c0:	2f6f      	cmp	r7, #111	; 0x6f
 800b2c2:	bf0c      	ite	eq
 800b2c4:	2308      	moveq	r3, #8
 800b2c6:	230a      	movne	r3, #10
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2ce:	6865      	ldr	r5, [r4, #4]
 800b2d0:	60a5      	str	r5, [r4, #8]
 800b2d2:	2d00      	cmp	r5, #0
 800b2d4:	bfa2      	ittt	ge
 800b2d6:	6821      	ldrge	r1, [r4, #0]
 800b2d8:	f021 0104 	bicge.w	r1, r1, #4
 800b2dc:	6021      	strge	r1, [r4, #0]
 800b2de:	b90e      	cbnz	r6, 800b2e4 <_printf_i+0x118>
 800b2e0:	2d00      	cmp	r5, #0
 800b2e2:	d04d      	beq.n	800b380 <_printf_i+0x1b4>
 800b2e4:	4615      	mov	r5, r2
 800b2e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2ea:	fb03 6711 	mls	r7, r3, r1, r6
 800b2ee:	5dc7      	ldrb	r7, [r0, r7]
 800b2f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2f4:	4637      	mov	r7, r6
 800b2f6:	42bb      	cmp	r3, r7
 800b2f8:	460e      	mov	r6, r1
 800b2fa:	d9f4      	bls.n	800b2e6 <_printf_i+0x11a>
 800b2fc:	2b08      	cmp	r3, #8
 800b2fe:	d10b      	bne.n	800b318 <_printf_i+0x14c>
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	07de      	lsls	r6, r3, #31
 800b304:	d508      	bpl.n	800b318 <_printf_i+0x14c>
 800b306:	6923      	ldr	r3, [r4, #16]
 800b308:	6861      	ldr	r1, [r4, #4]
 800b30a:	4299      	cmp	r1, r3
 800b30c:	bfde      	ittt	le
 800b30e:	2330      	movle	r3, #48	; 0x30
 800b310:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b314:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b318:	1b52      	subs	r2, r2, r5
 800b31a:	6122      	str	r2, [r4, #16]
 800b31c:	f8cd a000 	str.w	sl, [sp]
 800b320:	464b      	mov	r3, r9
 800b322:	aa03      	add	r2, sp, #12
 800b324:	4621      	mov	r1, r4
 800b326:	4640      	mov	r0, r8
 800b328:	f7ff fee2 	bl	800b0f0 <_printf_common>
 800b32c:	3001      	adds	r0, #1
 800b32e:	d14c      	bne.n	800b3ca <_printf_i+0x1fe>
 800b330:	f04f 30ff 	mov.w	r0, #4294967295
 800b334:	b004      	add	sp, #16
 800b336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b33a:	4835      	ldr	r0, [pc, #212]	; (800b410 <_printf_i+0x244>)
 800b33c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b340:	6829      	ldr	r1, [r5, #0]
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	f851 6b04 	ldr.w	r6, [r1], #4
 800b348:	6029      	str	r1, [r5, #0]
 800b34a:	061d      	lsls	r5, r3, #24
 800b34c:	d514      	bpl.n	800b378 <_printf_i+0x1ac>
 800b34e:	07df      	lsls	r7, r3, #31
 800b350:	bf44      	itt	mi
 800b352:	f043 0320 	orrmi.w	r3, r3, #32
 800b356:	6023      	strmi	r3, [r4, #0]
 800b358:	b91e      	cbnz	r6, 800b362 <_printf_i+0x196>
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	f023 0320 	bic.w	r3, r3, #32
 800b360:	6023      	str	r3, [r4, #0]
 800b362:	2310      	movs	r3, #16
 800b364:	e7b0      	b.n	800b2c8 <_printf_i+0xfc>
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	f043 0320 	orr.w	r3, r3, #32
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	2378      	movs	r3, #120	; 0x78
 800b370:	4828      	ldr	r0, [pc, #160]	; (800b414 <_printf_i+0x248>)
 800b372:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b376:	e7e3      	b.n	800b340 <_printf_i+0x174>
 800b378:	0659      	lsls	r1, r3, #25
 800b37a:	bf48      	it	mi
 800b37c:	b2b6      	uxthmi	r6, r6
 800b37e:	e7e6      	b.n	800b34e <_printf_i+0x182>
 800b380:	4615      	mov	r5, r2
 800b382:	e7bb      	b.n	800b2fc <_printf_i+0x130>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	6826      	ldr	r6, [r4, #0]
 800b388:	6961      	ldr	r1, [r4, #20]
 800b38a:	1d18      	adds	r0, r3, #4
 800b38c:	6028      	str	r0, [r5, #0]
 800b38e:	0635      	lsls	r5, r6, #24
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	d501      	bpl.n	800b398 <_printf_i+0x1cc>
 800b394:	6019      	str	r1, [r3, #0]
 800b396:	e002      	b.n	800b39e <_printf_i+0x1d2>
 800b398:	0670      	lsls	r0, r6, #25
 800b39a:	d5fb      	bpl.n	800b394 <_printf_i+0x1c8>
 800b39c:	8019      	strh	r1, [r3, #0]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	6123      	str	r3, [r4, #16]
 800b3a2:	4615      	mov	r5, r2
 800b3a4:	e7ba      	b.n	800b31c <_printf_i+0x150>
 800b3a6:	682b      	ldr	r3, [r5, #0]
 800b3a8:	1d1a      	adds	r2, r3, #4
 800b3aa:	602a      	str	r2, [r5, #0]
 800b3ac:	681d      	ldr	r5, [r3, #0]
 800b3ae:	6862      	ldr	r2, [r4, #4]
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f7f4 ff1c 	bl	80001f0 <memchr>
 800b3b8:	b108      	cbz	r0, 800b3be <_printf_i+0x1f2>
 800b3ba:	1b40      	subs	r0, r0, r5
 800b3bc:	6060      	str	r0, [r4, #4]
 800b3be:	6863      	ldr	r3, [r4, #4]
 800b3c0:	6123      	str	r3, [r4, #16]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3c8:	e7a8      	b.n	800b31c <_printf_i+0x150>
 800b3ca:	6923      	ldr	r3, [r4, #16]
 800b3cc:	462a      	mov	r2, r5
 800b3ce:	4649      	mov	r1, r9
 800b3d0:	4640      	mov	r0, r8
 800b3d2:	47d0      	blx	sl
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	d0ab      	beq.n	800b330 <_printf_i+0x164>
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	079b      	lsls	r3, r3, #30
 800b3dc:	d413      	bmi.n	800b406 <_printf_i+0x23a>
 800b3de:	68e0      	ldr	r0, [r4, #12]
 800b3e0:	9b03      	ldr	r3, [sp, #12]
 800b3e2:	4298      	cmp	r0, r3
 800b3e4:	bfb8      	it	lt
 800b3e6:	4618      	movlt	r0, r3
 800b3e8:	e7a4      	b.n	800b334 <_printf_i+0x168>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	4632      	mov	r2, r6
 800b3ee:	4649      	mov	r1, r9
 800b3f0:	4640      	mov	r0, r8
 800b3f2:	47d0      	blx	sl
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	d09b      	beq.n	800b330 <_printf_i+0x164>
 800b3f8:	3501      	adds	r5, #1
 800b3fa:	68e3      	ldr	r3, [r4, #12]
 800b3fc:	9903      	ldr	r1, [sp, #12]
 800b3fe:	1a5b      	subs	r3, r3, r1
 800b400:	42ab      	cmp	r3, r5
 800b402:	dcf2      	bgt.n	800b3ea <_printf_i+0x21e>
 800b404:	e7eb      	b.n	800b3de <_printf_i+0x212>
 800b406:	2500      	movs	r5, #0
 800b408:	f104 0619 	add.w	r6, r4, #25
 800b40c:	e7f5      	b.n	800b3fa <_printf_i+0x22e>
 800b40e:	bf00      	nop
 800b410:	0800d5be 	.word	0x0800d5be
 800b414:	0800d5cf 	.word	0x0800d5cf

0800b418 <_sbrk_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4d06      	ldr	r5, [pc, #24]	; (800b434 <_sbrk_r+0x1c>)
 800b41c:	2300      	movs	r3, #0
 800b41e:	4604      	mov	r4, r0
 800b420:	4608      	mov	r0, r1
 800b422:	602b      	str	r3, [r5, #0]
 800b424:	f7f8 fcf2 	bl	8003e0c <_sbrk>
 800b428:	1c43      	adds	r3, r0, #1
 800b42a:	d102      	bne.n	800b432 <_sbrk_r+0x1a>
 800b42c:	682b      	ldr	r3, [r5, #0]
 800b42e:	b103      	cbz	r3, 800b432 <_sbrk_r+0x1a>
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	bd38      	pop	{r3, r4, r5, pc}
 800b434:	20000a8c 	.word	0x20000a8c

0800b438 <_raise_r>:
 800b438:	291f      	cmp	r1, #31
 800b43a:	b538      	push	{r3, r4, r5, lr}
 800b43c:	4604      	mov	r4, r0
 800b43e:	460d      	mov	r5, r1
 800b440:	d904      	bls.n	800b44c <_raise_r+0x14>
 800b442:	2316      	movs	r3, #22
 800b444:	6003      	str	r3, [r0, #0]
 800b446:	f04f 30ff 	mov.w	r0, #4294967295
 800b44a:	bd38      	pop	{r3, r4, r5, pc}
 800b44c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b44e:	b112      	cbz	r2, 800b456 <_raise_r+0x1e>
 800b450:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b454:	b94b      	cbnz	r3, 800b46a <_raise_r+0x32>
 800b456:	4620      	mov	r0, r4
 800b458:	f000 f830 	bl	800b4bc <_getpid_r>
 800b45c:	462a      	mov	r2, r5
 800b45e:	4601      	mov	r1, r0
 800b460:	4620      	mov	r0, r4
 800b462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b466:	f000 b817 	b.w	800b498 <_kill_r>
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d00a      	beq.n	800b484 <_raise_r+0x4c>
 800b46e:	1c59      	adds	r1, r3, #1
 800b470:	d103      	bne.n	800b47a <_raise_r+0x42>
 800b472:	2316      	movs	r3, #22
 800b474:	6003      	str	r3, [r0, #0]
 800b476:	2001      	movs	r0, #1
 800b478:	e7e7      	b.n	800b44a <_raise_r+0x12>
 800b47a:	2400      	movs	r4, #0
 800b47c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b480:	4628      	mov	r0, r5
 800b482:	4798      	blx	r3
 800b484:	2000      	movs	r0, #0
 800b486:	e7e0      	b.n	800b44a <_raise_r+0x12>

0800b488 <raise>:
 800b488:	4b02      	ldr	r3, [pc, #8]	; (800b494 <raise+0xc>)
 800b48a:	4601      	mov	r1, r0
 800b48c:	6818      	ldr	r0, [r3, #0]
 800b48e:	f7ff bfd3 	b.w	800b438 <_raise_r>
 800b492:	bf00      	nop
 800b494:	20000010 	.word	0x20000010

0800b498 <_kill_r>:
 800b498:	b538      	push	{r3, r4, r5, lr}
 800b49a:	4d07      	ldr	r5, [pc, #28]	; (800b4b8 <_kill_r+0x20>)
 800b49c:	2300      	movs	r3, #0
 800b49e:	4604      	mov	r4, r0
 800b4a0:	4608      	mov	r0, r1
 800b4a2:	4611      	mov	r1, r2
 800b4a4:	602b      	str	r3, [r5, #0]
 800b4a6:	f7f8 fc29 	bl	8003cfc <_kill>
 800b4aa:	1c43      	adds	r3, r0, #1
 800b4ac:	d102      	bne.n	800b4b4 <_kill_r+0x1c>
 800b4ae:	682b      	ldr	r3, [r5, #0]
 800b4b0:	b103      	cbz	r3, 800b4b4 <_kill_r+0x1c>
 800b4b2:	6023      	str	r3, [r4, #0]
 800b4b4:	bd38      	pop	{r3, r4, r5, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20000a8c 	.word	0x20000a8c

0800b4bc <_getpid_r>:
 800b4bc:	f7f8 bc16 	b.w	8003cec <_getpid>

0800b4c0 <quorem>:
 800b4c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	6903      	ldr	r3, [r0, #16]
 800b4c6:	690c      	ldr	r4, [r1, #16]
 800b4c8:	42a3      	cmp	r3, r4
 800b4ca:	4607      	mov	r7, r0
 800b4cc:	f2c0 8081 	blt.w	800b5d2 <quorem+0x112>
 800b4d0:	3c01      	subs	r4, #1
 800b4d2:	f101 0814 	add.w	r8, r1, #20
 800b4d6:	f100 0514 	add.w	r5, r0, #20
 800b4da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b4f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4f8:	d331      	bcc.n	800b55e <quorem+0x9e>
 800b4fa:	f04f 0e00 	mov.w	lr, #0
 800b4fe:	4640      	mov	r0, r8
 800b500:	46ac      	mov	ip, r5
 800b502:	46f2      	mov	sl, lr
 800b504:	f850 2b04 	ldr.w	r2, [r0], #4
 800b508:	b293      	uxth	r3, r2
 800b50a:	fb06 e303 	mla	r3, r6, r3, lr
 800b50e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b512:	b29b      	uxth	r3, r3
 800b514:	ebaa 0303 	sub.w	r3, sl, r3
 800b518:	f8dc a000 	ldr.w	sl, [ip]
 800b51c:	0c12      	lsrs	r2, r2, #16
 800b51e:	fa13 f38a 	uxtah	r3, r3, sl
 800b522:	fb06 e202 	mla	r2, r6, r2, lr
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	9b00      	ldr	r3, [sp, #0]
 800b52a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b52e:	b292      	uxth	r2, r2
 800b530:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b538:	f8bd 3000 	ldrh.w	r3, [sp]
 800b53c:	4581      	cmp	r9, r0
 800b53e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b542:	f84c 3b04 	str.w	r3, [ip], #4
 800b546:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b54a:	d2db      	bcs.n	800b504 <quorem+0x44>
 800b54c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b550:	b92b      	cbnz	r3, 800b55e <quorem+0x9e>
 800b552:	9b01      	ldr	r3, [sp, #4]
 800b554:	3b04      	subs	r3, #4
 800b556:	429d      	cmp	r5, r3
 800b558:	461a      	mov	r2, r3
 800b55a:	d32e      	bcc.n	800b5ba <quorem+0xfa>
 800b55c:	613c      	str	r4, [r7, #16]
 800b55e:	4638      	mov	r0, r7
 800b560:	f001 f8ba 	bl	800c6d8 <__mcmp>
 800b564:	2800      	cmp	r0, #0
 800b566:	db24      	blt.n	800b5b2 <quorem+0xf2>
 800b568:	3601      	adds	r6, #1
 800b56a:	4628      	mov	r0, r5
 800b56c:	f04f 0c00 	mov.w	ip, #0
 800b570:	f858 2b04 	ldr.w	r2, [r8], #4
 800b574:	f8d0 e000 	ldr.w	lr, [r0]
 800b578:	b293      	uxth	r3, r2
 800b57a:	ebac 0303 	sub.w	r3, ip, r3
 800b57e:	0c12      	lsrs	r2, r2, #16
 800b580:	fa13 f38e 	uxtah	r3, r3, lr
 800b584:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b588:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b592:	45c1      	cmp	r9, r8
 800b594:	f840 3b04 	str.w	r3, [r0], #4
 800b598:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b59c:	d2e8      	bcs.n	800b570 <quorem+0xb0>
 800b59e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5a6:	b922      	cbnz	r2, 800b5b2 <quorem+0xf2>
 800b5a8:	3b04      	subs	r3, #4
 800b5aa:	429d      	cmp	r5, r3
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	d30a      	bcc.n	800b5c6 <quorem+0x106>
 800b5b0:	613c      	str	r4, [r7, #16]
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	b003      	add	sp, #12
 800b5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ba:	6812      	ldr	r2, [r2, #0]
 800b5bc:	3b04      	subs	r3, #4
 800b5be:	2a00      	cmp	r2, #0
 800b5c0:	d1cc      	bne.n	800b55c <quorem+0x9c>
 800b5c2:	3c01      	subs	r4, #1
 800b5c4:	e7c7      	b.n	800b556 <quorem+0x96>
 800b5c6:	6812      	ldr	r2, [r2, #0]
 800b5c8:	3b04      	subs	r3, #4
 800b5ca:	2a00      	cmp	r2, #0
 800b5cc:	d1f0      	bne.n	800b5b0 <quorem+0xf0>
 800b5ce:	3c01      	subs	r4, #1
 800b5d0:	e7eb      	b.n	800b5aa <quorem+0xea>
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	e7ee      	b.n	800b5b4 <quorem+0xf4>
	...

0800b5d8 <_dtoa_r>:
 800b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	ed2d 8b04 	vpush	{d8-d9}
 800b5e0:	ec57 6b10 	vmov	r6, r7, d0
 800b5e4:	b093      	sub	sp, #76	; 0x4c
 800b5e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b5e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b5ec:	9106      	str	r1, [sp, #24]
 800b5ee:	ee10 aa10 	vmov	sl, s0
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	9209      	str	r2, [sp, #36]	; 0x24
 800b5f6:	930c      	str	r3, [sp, #48]	; 0x30
 800b5f8:	46bb      	mov	fp, r7
 800b5fa:	b975      	cbnz	r5, 800b61a <_dtoa_r+0x42>
 800b5fc:	2010      	movs	r0, #16
 800b5fe:	f7ff f981 	bl	800a904 <malloc>
 800b602:	4602      	mov	r2, r0
 800b604:	6260      	str	r0, [r4, #36]	; 0x24
 800b606:	b920      	cbnz	r0, 800b612 <_dtoa_r+0x3a>
 800b608:	4ba7      	ldr	r3, [pc, #668]	; (800b8a8 <_dtoa_r+0x2d0>)
 800b60a:	21ea      	movs	r1, #234	; 0xea
 800b60c:	48a7      	ldr	r0, [pc, #668]	; (800b8ac <_dtoa_r+0x2d4>)
 800b60e:	f001 f97b 	bl	800c908 <__assert_func>
 800b612:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b616:	6005      	str	r5, [r0, #0]
 800b618:	60c5      	str	r5, [r0, #12]
 800b61a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b61c:	6819      	ldr	r1, [r3, #0]
 800b61e:	b151      	cbz	r1, 800b636 <_dtoa_r+0x5e>
 800b620:	685a      	ldr	r2, [r3, #4]
 800b622:	604a      	str	r2, [r1, #4]
 800b624:	2301      	movs	r3, #1
 800b626:	4093      	lsls	r3, r2
 800b628:	608b      	str	r3, [r1, #8]
 800b62a:	4620      	mov	r0, r4
 800b62c:	f000 fe12 	bl	800c254 <_Bfree>
 800b630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b632:	2200      	movs	r2, #0
 800b634:	601a      	str	r2, [r3, #0]
 800b636:	1e3b      	subs	r3, r7, #0
 800b638:	bfaa      	itet	ge
 800b63a:	2300      	movge	r3, #0
 800b63c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b640:	f8c8 3000 	strge.w	r3, [r8]
 800b644:	4b9a      	ldr	r3, [pc, #616]	; (800b8b0 <_dtoa_r+0x2d8>)
 800b646:	bfbc      	itt	lt
 800b648:	2201      	movlt	r2, #1
 800b64a:	f8c8 2000 	strlt.w	r2, [r8]
 800b64e:	ea33 030b 	bics.w	r3, r3, fp
 800b652:	d11b      	bne.n	800b68c <_dtoa_r+0xb4>
 800b654:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b656:	f242 730f 	movw	r3, #9999	; 0x270f
 800b65a:	6013      	str	r3, [r2, #0]
 800b65c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b660:	4333      	orrs	r3, r6
 800b662:	f000 8592 	beq.w	800c18a <_dtoa_r+0xbb2>
 800b666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b668:	b963      	cbnz	r3, 800b684 <_dtoa_r+0xac>
 800b66a:	4b92      	ldr	r3, [pc, #584]	; (800b8b4 <_dtoa_r+0x2dc>)
 800b66c:	e022      	b.n	800b6b4 <_dtoa_r+0xdc>
 800b66e:	4b92      	ldr	r3, [pc, #584]	; (800b8b8 <_dtoa_r+0x2e0>)
 800b670:	9301      	str	r3, [sp, #4]
 800b672:	3308      	adds	r3, #8
 800b674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	9801      	ldr	r0, [sp, #4]
 800b67a:	b013      	add	sp, #76	; 0x4c
 800b67c:	ecbd 8b04 	vpop	{d8-d9}
 800b680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b684:	4b8b      	ldr	r3, [pc, #556]	; (800b8b4 <_dtoa_r+0x2dc>)
 800b686:	9301      	str	r3, [sp, #4]
 800b688:	3303      	adds	r3, #3
 800b68a:	e7f3      	b.n	800b674 <_dtoa_r+0x9c>
 800b68c:	2200      	movs	r2, #0
 800b68e:	2300      	movs	r3, #0
 800b690:	4650      	mov	r0, sl
 800b692:	4659      	mov	r1, fp
 800b694:	f7f5 fa20 	bl	8000ad8 <__aeabi_dcmpeq>
 800b698:	ec4b ab19 	vmov	d9, sl, fp
 800b69c:	4680      	mov	r8, r0
 800b69e:	b158      	cbz	r0, 800b6b8 <_dtoa_r+0xe0>
 800b6a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	6013      	str	r3, [r2, #0]
 800b6a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f000 856b 	beq.w	800c184 <_dtoa_r+0xbac>
 800b6ae:	4883      	ldr	r0, [pc, #524]	; (800b8bc <_dtoa_r+0x2e4>)
 800b6b0:	6018      	str	r0, [r3, #0]
 800b6b2:	1e43      	subs	r3, r0, #1
 800b6b4:	9301      	str	r3, [sp, #4]
 800b6b6:	e7df      	b.n	800b678 <_dtoa_r+0xa0>
 800b6b8:	ec4b ab10 	vmov	d0, sl, fp
 800b6bc:	aa10      	add	r2, sp, #64	; 0x40
 800b6be:	a911      	add	r1, sp, #68	; 0x44
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	f001 f8af 	bl	800c824 <__d2b>
 800b6c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b6ca:	ee08 0a10 	vmov	s16, r0
 800b6ce:	2d00      	cmp	r5, #0
 800b6d0:	f000 8084 	beq.w	800b7dc <_dtoa_r+0x204>
 800b6d4:	ee19 3a90 	vmov	r3, s19
 800b6d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b6e0:	4656      	mov	r6, sl
 800b6e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b6e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b6ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b6ee:	4b74      	ldr	r3, [pc, #464]	; (800b8c0 <_dtoa_r+0x2e8>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	4639      	mov	r1, r7
 800b6f6:	f7f4 fdcf 	bl	8000298 <__aeabi_dsub>
 800b6fa:	a365      	add	r3, pc, #404	; (adr r3, 800b890 <_dtoa_r+0x2b8>)
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	f7f4 ff82 	bl	8000608 <__aeabi_dmul>
 800b704:	a364      	add	r3, pc, #400	; (adr r3, 800b898 <_dtoa_r+0x2c0>)
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	f7f4 fdc7 	bl	800029c <__adddf3>
 800b70e:	4606      	mov	r6, r0
 800b710:	4628      	mov	r0, r5
 800b712:	460f      	mov	r7, r1
 800b714:	f7f4 ff0e 	bl	8000534 <__aeabi_i2d>
 800b718:	a361      	add	r3, pc, #388	; (adr r3, 800b8a0 <_dtoa_r+0x2c8>)
 800b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71e:	f7f4 ff73 	bl	8000608 <__aeabi_dmul>
 800b722:	4602      	mov	r2, r0
 800b724:	460b      	mov	r3, r1
 800b726:	4630      	mov	r0, r6
 800b728:	4639      	mov	r1, r7
 800b72a:	f7f4 fdb7 	bl	800029c <__adddf3>
 800b72e:	4606      	mov	r6, r0
 800b730:	460f      	mov	r7, r1
 800b732:	f7f5 fa19 	bl	8000b68 <__aeabi_d2iz>
 800b736:	2200      	movs	r2, #0
 800b738:	9000      	str	r0, [sp, #0]
 800b73a:	2300      	movs	r3, #0
 800b73c:	4630      	mov	r0, r6
 800b73e:	4639      	mov	r1, r7
 800b740:	f7f5 f9d4 	bl	8000aec <__aeabi_dcmplt>
 800b744:	b150      	cbz	r0, 800b75c <_dtoa_r+0x184>
 800b746:	9800      	ldr	r0, [sp, #0]
 800b748:	f7f4 fef4 	bl	8000534 <__aeabi_i2d>
 800b74c:	4632      	mov	r2, r6
 800b74e:	463b      	mov	r3, r7
 800b750:	f7f5 f9c2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b754:	b910      	cbnz	r0, 800b75c <_dtoa_r+0x184>
 800b756:	9b00      	ldr	r3, [sp, #0]
 800b758:	3b01      	subs	r3, #1
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	9b00      	ldr	r3, [sp, #0]
 800b75e:	2b16      	cmp	r3, #22
 800b760:	d85a      	bhi.n	800b818 <_dtoa_r+0x240>
 800b762:	9a00      	ldr	r2, [sp, #0]
 800b764:	4b57      	ldr	r3, [pc, #348]	; (800b8c4 <_dtoa_r+0x2ec>)
 800b766:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76e:	ec51 0b19 	vmov	r0, r1, d9
 800b772:	f7f5 f9bb 	bl	8000aec <__aeabi_dcmplt>
 800b776:	2800      	cmp	r0, #0
 800b778:	d050      	beq.n	800b81c <_dtoa_r+0x244>
 800b77a:	9b00      	ldr	r3, [sp, #0]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	2300      	movs	r3, #0
 800b782:	930b      	str	r3, [sp, #44]	; 0x2c
 800b784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b786:	1b5d      	subs	r5, r3, r5
 800b788:	1e6b      	subs	r3, r5, #1
 800b78a:	9305      	str	r3, [sp, #20]
 800b78c:	bf45      	ittet	mi
 800b78e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b792:	9304      	strmi	r3, [sp, #16]
 800b794:	2300      	movpl	r3, #0
 800b796:	2300      	movmi	r3, #0
 800b798:	bf4c      	ite	mi
 800b79a:	9305      	strmi	r3, [sp, #20]
 800b79c:	9304      	strpl	r3, [sp, #16]
 800b79e:	9b00      	ldr	r3, [sp, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	db3d      	blt.n	800b820 <_dtoa_r+0x248>
 800b7a4:	9b05      	ldr	r3, [sp, #20]
 800b7a6:	9a00      	ldr	r2, [sp, #0]
 800b7a8:	920a      	str	r2, [sp, #40]	; 0x28
 800b7aa:	4413      	add	r3, r2
 800b7ac:	9305      	str	r3, [sp, #20]
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	9307      	str	r3, [sp, #28]
 800b7b2:	9b06      	ldr	r3, [sp, #24]
 800b7b4:	2b09      	cmp	r3, #9
 800b7b6:	f200 8089 	bhi.w	800b8cc <_dtoa_r+0x2f4>
 800b7ba:	2b05      	cmp	r3, #5
 800b7bc:	bfc4      	itt	gt
 800b7be:	3b04      	subgt	r3, #4
 800b7c0:	9306      	strgt	r3, [sp, #24]
 800b7c2:	9b06      	ldr	r3, [sp, #24]
 800b7c4:	f1a3 0302 	sub.w	r3, r3, #2
 800b7c8:	bfcc      	ite	gt
 800b7ca:	2500      	movgt	r5, #0
 800b7cc:	2501      	movle	r5, #1
 800b7ce:	2b03      	cmp	r3, #3
 800b7d0:	f200 8087 	bhi.w	800b8e2 <_dtoa_r+0x30a>
 800b7d4:	e8df f003 	tbb	[pc, r3]
 800b7d8:	59383a2d 	.word	0x59383a2d
 800b7dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b7e0:	441d      	add	r5, r3
 800b7e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b7e6:	2b20      	cmp	r3, #32
 800b7e8:	bfc1      	itttt	gt
 800b7ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b7ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b7f2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b7f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b7fa:	bfda      	itte	le
 800b7fc:	f1c3 0320 	rsble	r3, r3, #32
 800b800:	fa06 f003 	lslle.w	r0, r6, r3
 800b804:	4318      	orrgt	r0, r3
 800b806:	f7f4 fe85 	bl	8000514 <__aeabi_ui2d>
 800b80a:	2301      	movs	r3, #1
 800b80c:	4606      	mov	r6, r0
 800b80e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b812:	3d01      	subs	r5, #1
 800b814:	930e      	str	r3, [sp, #56]	; 0x38
 800b816:	e76a      	b.n	800b6ee <_dtoa_r+0x116>
 800b818:	2301      	movs	r3, #1
 800b81a:	e7b2      	b.n	800b782 <_dtoa_r+0x1aa>
 800b81c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b81e:	e7b1      	b.n	800b784 <_dtoa_r+0x1ac>
 800b820:	9b04      	ldr	r3, [sp, #16]
 800b822:	9a00      	ldr	r2, [sp, #0]
 800b824:	1a9b      	subs	r3, r3, r2
 800b826:	9304      	str	r3, [sp, #16]
 800b828:	4253      	negs	r3, r2
 800b82a:	9307      	str	r3, [sp, #28]
 800b82c:	2300      	movs	r3, #0
 800b82e:	930a      	str	r3, [sp, #40]	; 0x28
 800b830:	e7bf      	b.n	800b7b2 <_dtoa_r+0x1da>
 800b832:	2300      	movs	r3, #0
 800b834:	9308      	str	r3, [sp, #32]
 800b836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b838:	2b00      	cmp	r3, #0
 800b83a:	dc55      	bgt.n	800b8e8 <_dtoa_r+0x310>
 800b83c:	2301      	movs	r3, #1
 800b83e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b842:	461a      	mov	r2, r3
 800b844:	9209      	str	r2, [sp, #36]	; 0x24
 800b846:	e00c      	b.n	800b862 <_dtoa_r+0x28a>
 800b848:	2301      	movs	r3, #1
 800b84a:	e7f3      	b.n	800b834 <_dtoa_r+0x25c>
 800b84c:	2300      	movs	r3, #0
 800b84e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b850:	9308      	str	r3, [sp, #32]
 800b852:	9b00      	ldr	r3, [sp, #0]
 800b854:	4413      	add	r3, r2
 800b856:	9302      	str	r3, [sp, #8]
 800b858:	3301      	adds	r3, #1
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	9303      	str	r3, [sp, #12]
 800b85e:	bfb8      	it	lt
 800b860:	2301      	movlt	r3, #1
 800b862:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b864:	2200      	movs	r2, #0
 800b866:	6042      	str	r2, [r0, #4]
 800b868:	2204      	movs	r2, #4
 800b86a:	f102 0614 	add.w	r6, r2, #20
 800b86e:	429e      	cmp	r6, r3
 800b870:	6841      	ldr	r1, [r0, #4]
 800b872:	d93d      	bls.n	800b8f0 <_dtoa_r+0x318>
 800b874:	4620      	mov	r0, r4
 800b876:	f000 fcad 	bl	800c1d4 <_Balloc>
 800b87a:	9001      	str	r0, [sp, #4]
 800b87c:	2800      	cmp	r0, #0
 800b87e:	d13b      	bne.n	800b8f8 <_dtoa_r+0x320>
 800b880:	4b11      	ldr	r3, [pc, #68]	; (800b8c8 <_dtoa_r+0x2f0>)
 800b882:	4602      	mov	r2, r0
 800b884:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b888:	e6c0      	b.n	800b60c <_dtoa_r+0x34>
 800b88a:	2301      	movs	r3, #1
 800b88c:	e7df      	b.n	800b84e <_dtoa_r+0x276>
 800b88e:	bf00      	nop
 800b890:	636f4361 	.word	0x636f4361
 800b894:	3fd287a7 	.word	0x3fd287a7
 800b898:	8b60c8b3 	.word	0x8b60c8b3
 800b89c:	3fc68a28 	.word	0x3fc68a28
 800b8a0:	509f79fb 	.word	0x509f79fb
 800b8a4:	3fd34413 	.word	0x3fd34413
 800b8a8:	0800d5ed 	.word	0x0800d5ed
 800b8ac:	0800d604 	.word	0x0800d604
 800b8b0:	7ff00000 	.word	0x7ff00000
 800b8b4:	0800d5e9 	.word	0x0800d5e9
 800b8b8:	0800d5e0 	.word	0x0800d5e0
 800b8bc:	0800d5bd 	.word	0x0800d5bd
 800b8c0:	3ff80000 	.word	0x3ff80000
 800b8c4:	0800d6f8 	.word	0x0800d6f8
 800b8c8:	0800d65f 	.word	0x0800d65f
 800b8cc:	2501      	movs	r5, #1
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	9306      	str	r3, [sp, #24]
 800b8d2:	9508      	str	r5, [sp, #32]
 800b8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	2312      	movs	r3, #18
 800b8e0:	e7b0      	b.n	800b844 <_dtoa_r+0x26c>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	9308      	str	r3, [sp, #32]
 800b8e6:	e7f5      	b.n	800b8d4 <_dtoa_r+0x2fc>
 800b8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b8ee:	e7b8      	b.n	800b862 <_dtoa_r+0x28a>
 800b8f0:	3101      	adds	r1, #1
 800b8f2:	6041      	str	r1, [r0, #4]
 800b8f4:	0052      	lsls	r2, r2, #1
 800b8f6:	e7b8      	b.n	800b86a <_dtoa_r+0x292>
 800b8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8fa:	9a01      	ldr	r2, [sp, #4]
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	9b03      	ldr	r3, [sp, #12]
 800b900:	2b0e      	cmp	r3, #14
 800b902:	f200 809d 	bhi.w	800ba40 <_dtoa_r+0x468>
 800b906:	2d00      	cmp	r5, #0
 800b908:	f000 809a 	beq.w	800ba40 <_dtoa_r+0x468>
 800b90c:	9b00      	ldr	r3, [sp, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	dd32      	ble.n	800b978 <_dtoa_r+0x3a0>
 800b912:	4ab7      	ldr	r2, [pc, #732]	; (800bbf0 <_dtoa_r+0x618>)
 800b914:	f003 030f 	and.w	r3, r3, #15
 800b918:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b91c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b920:	9b00      	ldr	r3, [sp, #0]
 800b922:	05d8      	lsls	r0, r3, #23
 800b924:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b928:	d516      	bpl.n	800b958 <_dtoa_r+0x380>
 800b92a:	4bb2      	ldr	r3, [pc, #712]	; (800bbf4 <_dtoa_r+0x61c>)
 800b92c:	ec51 0b19 	vmov	r0, r1, d9
 800b930:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b934:	f7f4 ff92 	bl	800085c <__aeabi_ddiv>
 800b938:	f007 070f 	and.w	r7, r7, #15
 800b93c:	4682      	mov	sl, r0
 800b93e:	468b      	mov	fp, r1
 800b940:	2503      	movs	r5, #3
 800b942:	4eac      	ldr	r6, [pc, #688]	; (800bbf4 <_dtoa_r+0x61c>)
 800b944:	b957      	cbnz	r7, 800b95c <_dtoa_r+0x384>
 800b946:	4642      	mov	r2, r8
 800b948:	464b      	mov	r3, r9
 800b94a:	4650      	mov	r0, sl
 800b94c:	4659      	mov	r1, fp
 800b94e:	f7f4 ff85 	bl	800085c <__aeabi_ddiv>
 800b952:	4682      	mov	sl, r0
 800b954:	468b      	mov	fp, r1
 800b956:	e028      	b.n	800b9aa <_dtoa_r+0x3d2>
 800b958:	2502      	movs	r5, #2
 800b95a:	e7f2      	b.n	800b942 <_dtoa_r+0x36a>
 800b95c:	07f9      	lsls	r1, r7, #31
 800b95e:	d508      	bpl.n	800b972 <_dtoa_r+0x39a>
 800b960:	4640      	mov	r0, r8
 800b962:	4649      	mov	r1, r9
 800b964:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b968:	f7f4 fe4e 	bl	8000608 <__aeabi_dmul>
 800b96c:	3501      	adds	r5, #1
 800b96e:	4680      	mov	r8, r0
 800b970:	4689      	mov	r9, r1
 800b972:	107f      	asrs	r7, r7, #1
 800b974:	3608      	adds	r6, #8
 800b976:	e7e5      	b.n	800b944 <_dtoa_r+0x36c>
 800b978:	f000 809b 	beq.w	800bab2 <_dtoa_r+0x4da>
 800b97c:	9b00      	ldr	r3, [sp, #0]
 800b97e:	4f9d      	ldr	r7, [pc, #628]	; (800bbf4 <_dtoa_r+0x61c>)
 800b980:	425e      	negs	r6, r3
 800b982:	4b9b      	ldr	r3, [pc, #620]	; (800bbf0 <_dtoa_r+0x618>)
 800b984:	f006 020f 	and.w	r2, r6, #15
 800b988:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	ec51 0b19 	vmov	r0, r1, d9
 800b994:	f7f4 fe38 	bl	8000608 <__aeabi_dmul>
 800b998:	1136      	asrs	r6, r6, #4
 800b99a:	4682      	mov	sl, r0
 800b99c:	468b      	mov	fp, r1
 800b99e:	2300      	movs	r3, #0
 800b9a0:	2502      	movs	r5, #2
 800b9a2:	2e00      	cmp	r6, #0
 800b9a4:	d17a      	bne.n	800ba9c <_dtoa_r+0x4c4>
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1d3      	bne.n	800b952 <_dtoa_r+0x37a>
 800b9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 8082 	beq.w	800bab6 <_dtoa_r+0x4de>
 800b9b2:	4b91      	ldr	r3, [pc, #580]	; (800bbf8 <_dtoa_r+0x620>)
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	4650      	mov	r0, sl
 800b9b8:	4659      	mov	r1, fp
 800b9ba:	f7f5 f897 	bl	8000aec <__aeabi_dcmplt>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d079      	beq.n	800bab6 <_dtoa_r+0x4de>
 800b9c2:	9b03      	ldr	r3, [sp, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d076      	beq.n	800bab6 <_dtoa_r+0x4de>
 800b9c8:	9b02      	ldr	r3, [sp, #8]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	dd36      	ble.n	800ba3c <_dtoa_r+0x464>
 800b9ce:	9b00      	ldr	r3, [sp, #0]
 800b9d0:	4650      	mov	r0, sl
 800b9d2:	4659      	mov	r1, fp
 800b9d4:	1e5f      	subs	r7, r3, #1
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	4b88      	ldr	r3, [pc, #544]	; (800bbfc <_dtoa_r+0x624>)
 800b9da:	f7f4 fe15 	bl	8000608 <__aeabi_dmul>
 800b9de:	9e02      	ldr	r6, [sp, #8]
 800b9e0:	4682      	mov	sl, r0
 800b9e2:	468b      	mov	fp, r1
 800b9e4:	3501      	adds	r5, #1
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	f7f4 fda4 	bl	8000534 <__aeabi_i2d>
 800b9ec:	4652      	mov	r2, sl
 800b9ee:	465b      	mov	r3, fp
 800b9f0:	f7f4 fe0a 	bl	8000608 <__aeabi_dmul>
 800b9f4:	4b82      	ldr	r3, [pc, #520]	; (800bc00 <_dtoa_r+0x628>)
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f7f4 fc50 	bl	800029c <__adddf3>
 800b9fc:	46d0      	mov	r8, sl
 800b9fe:	46d9      	mov	r9, fp
 800ba00:	4682      	mov	sl, r0
 800ba02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ba06:	2e00      	cmp	r6, #0
 800ba08:	d158      	bne.n	800babc <_dtoa_r+0x4e4>
 800ba0a:	4b7e      	ldr	r3, [pc, #504]	; (800bc04 <_dtoa_r+0x62c>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	4640      	mov	r0, r8
 800ba10:	4649      	mov	r1, r9
 800ba12:	f7f4 fc41 	bl	8000298 <__aeabi_dsub>
 800ba16:	4652      	mov	r2, sl
 800ba18:	465b      	mov	r3, fp
 800ba1a:	4680      	mov	r8, r0
 800ba1c:	4689      	mov	r9, r1
 800ba1e:	f7f5 f883 	bl	8000b28 <__aeabi_dcmpgt>
 800ba22:	2800      	cmp	r0, #0
 800ba24:	f040 8295 	bne.w	800bf52 <_dtoa_r+0x97a>
 800ba28:	4652      	mov	r2, sl
 800ba2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ba2e:	4640      	mov	r0, r8
 800ba30:	4649      	mov	r1, r9
 800ba32:	f7f5 f85b 	bl	8000aec <__aeabi_dcmplt>
 800ba36:	2800      	cmp	r0, #0
 800ba38:	f040 8289 	bne.w	800bf4e <_dtoa_r+0x976>
 800ba3c:	ec5b ab19 	vmov	sl, fp, d9
 800ba40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f2c0 8148 	blt.w	800bcd8 <_dtoa_r+0x700>
 800ba48:	9a00      	ldr	r2, [sp, #0]
 800ba4a:	2a0e      	cmp	r2, #14
 800ba4c:	f300 8144 	bgt.w	800bcd8 <_dtoa_r+0x700>
 800ba50:	4b67      	ldr	r3, [pc, #412]	; (800bbf0 <_dtoa_r+0x618>)
 800ba52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba56:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f280 80d5 	bge.w	800bc0c <_dtoa_r+0x634>
 800ba62:	9b03      	ldr	r3, [sp, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f300 80d1 	bgt.w	800bc0c <_dtoa_r+0x634>
 800ba6a:	f040 826f 	bne.w	800bf4c <_dtoa_r+0x974>
 800ba6e:	4b65      	ldr	r3, [pc, #404]	; (800bc04 <_dtoa_r+0x62c>)
 800ba70:	2200      	movs	r2, #0
 800ba72:	4640      	mov	r0, r8
 800ba74:	4649      	mov	r1, r9
 800ba76:	f7f4 fdc7 	bl	8000608 <__aeabi_dmul>
 800ba7a:	4652      	mov	r2, sl
 800ba7c:	465b      	mov	r3, fp
 800ba7e:	f7f5 f849 	bl	8000b14 <__aeabi_dcmpge>
 800ba82:	9e03      	ldr	r6, [sp, #12]
 800ba84:	4637      	mov	r7, r6
 800ba86:	2800      	cmp	r0, #0
 800ba88:	f040 8245 	bne.w	800bf16 <_dtoa_r+0x93e>
 800ba8c:	9d01      	ldr	r5, [sp, #4]
 800ba8e:	2331      	movs	r3, #49	; 0x31
 800ba90:	f805 3b01 	strb.w	r3, [r5], #1
 800ba94:	9b00      	ldr	r3, [sp, #0]
 800ba96:	3301      	adds	r3, #1
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	e240      	b.n	800bf1e <_dtoa_r+0x946>
 800ba9c:	07f2      	lsls	r2, r6, #31
 800ba9e:	d505      	bpl.n	800baac <_dtoa_r+0x4d4>
 800baa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baa4:	f7f4 fdb0 	bl	8000608 <__aeabi_dmul>
 800baa8:	3501      	adds	r5, #1
 800baaa:	2301      	movs	r3, #1
 800baac:	1076      	asrs	r6, r6, #1
 800baae:	3708      	adds	r7, #8
 800bab0:	e777      	b.n	800b9a2 <_dtoa_r+0x3ca>
 800bab2:	2502      	movs	r5, #2
 800bab4:	e779      	b.n	800b9aa <_dtoa_r+0x3d2>
 800bab6:	9f00      	ldr	r7, [sp, #0]
 800bab8:	9e03      	ldr	r6, [sp, #12]
 800baba:	e794      	b.n	800b9e6 <_dtoa_r+0x40e>
 800babc:	9901      	ldr	r1, [sp, #4]
 800babe:	4b4c      	ldr	r3, [pc, #304]	; (800bbf0 <_dtoa_r+0x618>)
 800bac0:	4431      	add	r1, r6
 800bac2:	910d      	str	r1, [sp, #52]	; 0x34
 800bac4:	9908      	ldr	r1, [sp, #32]
 800bac6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800baca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bace:	2900      	cmp	r1, #0
 800bad0:	d043      	beq.n	800bb5a <_dtoa_r+0x582>
 800bad2:	494d      	ldr	r1, [pc, #308]	; (800bc08 <_dtoa_r+0x630>)
 800bad4:	2000      	movs	r0, #0
 800bad6:	f7f4 fec1 	bl	800085c <__aeabi_ddiv>
 800bada:	4652      	mov	r2, sl
 800badc:	465b      	mov	r3, fp
 800bade:	f7f4 fbdb 	bl	8000298 <__aeabi_dsub>
 800bae2:	9d01      	ldr	r5, [sp, #4]
 800bae4:	4682      	mov	sl, r0
 800bae6:	468b      	mov	fp, r1
 800bae8:	4649      	mov	r1, r9
 800baea:	4640      	mov	r0, r8
 800baec:	f7f5 f83c 	bl	8000b68 <__aeabi_d2iz>
 800baf0:	4606      	mov	r6, r0
 800baf2:	f7f4 fd1f 	bl	8000534 <__aeabi_i2d>
 800baf6:	4602      	mov	r2, r0
 800baf8:	460b      	mov	r3, r1
 800bafa:	4640      	mov	r0, r8
 800bafc:	4649      	mov	r1, r9
 800bafe:	f7f4 fbcb 	bl	8000298 <__aeabi_dsub>
 800bb02:	3630      	adds	r6, #48	; 0x30
 800bb04:	f805 6b01 	strb.w	r6, [r5], #1
 800bb08:	4652      	mov	r2, sl
 800bb0a:	465b      	mov	r3, fp
 800bb0c:	4680      	mov	r8, r0
 800bb0e:	4689      	mov	r9, r1
 800bb10:	f7f4 ffec 	bl	8000aec <__aeabi_dcmplt>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d163      	bne.n	800bbe0 <_dtoa_r+0x608>
 800bb18:	4642      	mov	r2, r8
 800bb1a:	464b      	mov	r3, r9
 800bb1c:	4936      	ldr	r1, [pc, #216]	; (800bbf8 <_dtoa_r+0x620>)
 800bb1e:	2000      	movs	r0, #0
 800bb20:	f7f4 fbba 	bl	8000298 <__aeabi_dsub>
 800bb24:	4652      	mov	r2, sl
 800bb26:	465b      	mov	r3, fp
 800bb28:	f7f4 ffe0 	bl	8000aec <__aeabi_dcmplt>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	f040 80b5 	bne.w	800bc9c <_dtoa_r+0x6c4>
 800bb32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb34:	429d      	cmp	r5, r3
 800bb36:	d081      	beq.n	800ba3c <_dtoa_r+0x464>
 800bb38:	4b30      	ldr	r3, [pc, #192]	; (800bbfc <_dtoa_r+0x624>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	4650      	mov	r0, sl
 800bb3e:	4659      	mov	r1, fp
 800bb40:	f7f4 fd62 	bl	8000608 <__aeabi_dmul>
 800bb44:	4b2d      	ldr	r3, [pc, #180]	; (800bbfc <_dtoa_r+0x624>)
 800bb46:	4682      	mov	sl, r0
 800bb48:	468b      	mov	fp, r1
 800bb4a:	4640      	mov	r0, r8
 800bb4c:	4649      	mov	r1, r9
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f7f4 fd5a 	bl	8000608 <__aeabi_dmul>
 800bb54:	4680      	mov	r8, r0
 800bb56:	4689      	mov	r9, r1
 800bb58:	e7c6      	b.n	800bae8 <_dtoa_r+0x510>
 800bb5a:	4650      	mov	r0, sl
 800bb5c:	4659      	mov	r1, fp
 800bb5e:	f7f4 fd53 	bl	8000608 <__aeabi_dmul>
 800bb62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb64:	9d01      	ldr	r5, [sp, #4]
 800bb66:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb68:	4682      	mov	sl, r0
 800bb6a:	468b      	mov	fp, r1
 800bb6c:	4649      	mov	r1, r9
 800bb6e:	4640      	mov	r0, r8
 800bb70:	f7f4 fffa 	bl	8000b68 <__aeabi_d2iz>
 800bb74:	4606      	mov	r6, r0
 800bb76:	f7f4 fcdd 	bl	8000534 <__aeabi_i2d>
 800bb7a:	3630      	adds	r6, #48	; 0x30
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	460b      	mov	r3, r1
 800bb80:	4640      	mov	r0, r8
 800bb82:	4649      	mov	r1, r9
 800bb84:	f7f4 fb88 	bl	8000298 <__aeabi_dsub>
 800bb88:	f805 6b01 	strb.w	r6, [r5], #1
 800bb8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb8e:	429d      	cmp	r5, r3
 800bb90:	4680      	mov	r8, r0
 800bb92:	4689      	mov	r9, r1
 800bb94:	f04f 0200 	mov.w	r2, #0
 800bb98:	d124      	bne.n	800bbe4 <_dtoa_r+0x60c>
 800bb9a:	4b1b      	ldr	r3, [pc, #108]	; (800bc08 <_dtoa_r+0x630>)
 800bb9c:	4650      	mov	r0, sl
 800bb9e:	4659      	mov	r1, fp
 800bba0:	f7f4 fb7c 	bl	800029c <__adddf3>
 800bba4:	4602      	mov	r2, r0
 800bba6:	460b      	mov	r3, r1
 800bba8:	4640      	mov	r0, r8
 800bbaa:	4649      	mov	r1, r9
 800bbac:	f7f4 ffbc 	bl	8000b28 <__aeabi_dcmpgt>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d173      	bne.n	800bc9c <_dtoa_r+0x6c4>
 800bbb4:	4652      	mov	r2, sl
 800bbb6:	465b      	mov	r3, fp
 800bbb8:	4913      	ldr	r1, [pc, #76]	; (800bc08 <_dtoa_r+0x630>)
 800bbba:	2000      	movs	r0, #0
 800bbbc:	f7f4 fb6c 	bl	8000298 <__aeabi_dsub>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	4640      	mov	r0, r8
 800bbc6:	4649      	mov	r1, r9
 800bbc8:	f7f4 ff90 	bl	8000aec <__aeabi_dcmplt>
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	f43f af35 	beq.w	800ba3c <_dtoa_r+0x464>
 800bbd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bbd4:	1e6b      	subs	r3, r5, #1
 800bbd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbd8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bbdc:	2b30      	cmp	r3, #48	; 0x30
 800bbde:	d0f8      	beq.n	800bbd2 <_dtoa_r+0x5fa>
 800bbe0:	9700      	str	r7, [sp, #0]
 800bbe2:	e049      	b.n	800bc78 <_dtoa_r+0x6a0>
 800bbe4:	4b05      	ldr	r3, [pc, #20]	; (800bbfc <_dtoa_r+0x624>)
 800bbe6:	f7f4 fd0f 	bl	8000608 <__aeabi_dmul>
 800bbea:	4680      	mov	r8, r0
 800bbec:	4689      	mov	r9, r1
 800bbee:	e7bd      	b.n	800bb6c <_dtoa_r+0x594>
 800bbf0:	0800d6f8 	.word	0x0800d6f8
 800bbf4:	0800d6d0 	.word	0x0800d6d0
 800bbf8:	3ff00000 	.word	0x3ff00000
 800bbfc:	40240000 	.word	0x40240000
 800bc00:	401c0000 	.word	0x401c0000
 800bc04:	40140000 	.word	0x40140000
 800bc08:	3fe00000 	.word	0x3fe00000
 800bc0c:	9d01      	ldr	r5, [sp, #4]
 800bc0e:	4656      	mov	r6, sl
 800bc10:	465f      	mov	r7, fp
 800bc12:	4642      	mov	r2, r8
 800bc14:	464b      	mov	r3, r9
 800bc16:	4630      	mov	r0, r6
 800bc18:	4639      	mov	r1, r7
 800bc1a:	f7f4 fe1f 	bl	800085c <__aeabi_ddiv>
 800bc1e:	f7f4 ffa3 	bl	8000b68 <__aeabi_d2iz>
 800bc22:	4682      	mov	sl, r0
 800bc24:	f7f4 fc86 	bl	8000534 <__aeabi_i2d>
 800bc28:	4642      	mov	r2, r8
 800bc2a:	464b      	mov	r3, r9
 800bc2c:	f7f4 fcec 	bl	8000608 <__aeabi_dmul>
 800bc30:	4602      	mov	r2, r0
 800bc32:	460b      	mov	r3, r1
 800bc34:	4630      	mov	r0, r6
 800bc36:	4639      	mov	r1, r7
 800bc38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bc3c:	f7f4 fb2c 	bl	8000298 <__aeabi_dsub>
 800bc40:	f805 6b01 	strb.w	r6, [r5], #1
 800bc44:	9e01      	ldr	r6, [sp, #4]
 800bc46:	9f03      	ldr	r7, [sp, #12]
 800bc48:	1bae      	subs	r6, r5, r6
 800bc4a:	42b7      	cmp	r7, r6
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	d135      	bne.n	800bcbe <_dtoa_r+0x6e6>
 800bc52:	f7f4 fb23 	bl	800029c <__adddf3>
 800bc56:	4642      	mov	r2, r8
 800bc58:	464b      	mov	r3, r9
 800bc5a:	4606      	mov	r6, r0
 800bc5c:	460f      	mov	r7, r1
 800bc5e:	f7f4 ff63 	bl	8000b28 <__aeabi_dcmpgt>
 800bc62:	b9d0      	cbnz	r0, 800bc9a <_dtoa_r+0x6c2>
 800bc64:	4642      	mov	r2, r8
 800bc66:	464b      	mov	r3, r9
 800bc68:	4630      	mov	r0, r6
 800bc6a:	4639      	mov	r1, r7
 800bc6c:	f7f4 ff34 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc70:	b110      	cbz	r0, 800bc78 <_dtoa_r+0x6a0>
 800bc72:	f01a 0f01 	tst.w	sl, #1
 800bc76:	d110      	bne.n	800bc9a <_dtoa_r+0x6c2>
 800bc78:	4620      	mov	r0, r4
 800bc7a:	ee18 1a10 	vmov	r1, s16
 800bc7e:	f000 fae9 	bl	800c254 <_Bfree>
 800bc82:	2300      	movs	r3, #0
 800bc84:	9800      	ldr	r0, [sp, #0]
 800bc86:	702b      	strb	r3, [r5, #0]
 800bc88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc8a:	3001      	adds	r0, #1
 800bc8c:	6018      	str	r0, [r3, #0]
 800bc8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f43f acf1 	beq.w	800b678 <_dtoa_r+0xa0>
 800bc96:	601d      	str	r5, [r3, #0]
 800bc98:	e4ee      	b.n	800b678 <_dtoa_r+0xa0>
 800bc9a:	9f00      	ldr	r7, [sp, #0]
 800bc9c:	462b      	mov	r3, r5
 800bc9e:	461d      	mov	r5, r3
 800bca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bca4:	2a39      	cmp	r2, #57	; 0x39
 800bca6:	d106      	bne.n	800bcb6 <_dtoa_r+0x6de>
 800bca8:	9a01      	ldr	r2, [sp, #4]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d1f7      	bne.n	800bc9e <_dtoa_r+0x6c6>
 800bcae:	9901      	ldr	r1, [sp, #4]
 800bcb0:	2230      	movs	r2, #48	; 0x30
 800bcb2:	3701      	adds	r7, #1
 800bcb4:	700a      	strb	r2, [r1, #0]
 800bcb6:	781a      	ldrb	r2, [r3, #0]
 800bcb8:	3201      	adds	r2, #1
 800bcba:	701a      	strb	r2, [r3, #0]
 800bcbc:	e790      	b.n	800bbe0 <_dtoa_r+0x608>
 800bcbe:	4ba6      	ldr	r3, [pc, #664]	; (800bf58 <_dtoa_r+0x980>)
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f7f4 fca1 	bl	8000608 <__aeabi_dmul>
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	2300      	movs	r3, #0
 800bcca:	4606      	mov	r6, r0
 800bccc:	460f      	mov	r7, r1
 800bcce:	f7f4 ff03 	bl	8000ad8 <__aeabi_dcmpeq>
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d09d      	beq.n	800bc12 <_dtoa_r+0x63a>
 800bcd6:	e7cf      	b.n	800bc78 <_dtoa_r+0x6a0>
 800bcd8:	9a08      	ldr	r2, [sp, #32]
 800bcda:	2a00      	cmp	r2, #0
 800bcdc:	f000 80d7 	beq.w	800be8e <_dtoa_r+0x8b6>
 800bce0:	9a06      	ldr	r2, [sp, #24]
 800bce2:	2a01      	cmp	r2, #1
 800bce4:	f300 80ba 	bgt.w	800be5c <_dtoa_r+0x884>
 800bce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcea:	2a00      	cmp	r2, #0
 800bcec:	f000 80b2 	beq.w	800be54 <_dtoa_r+0x87c>
 800bcf0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bcf4:	9e07      	ldr	r6, [sp, #28]
 800bcf6:	9d04      	ldr	r5, [sp, #16]
 800bcf8:	9a04      	ldr	r2, [sp, #16]
 800bcfa:	441a      	add	r2, r3
 800bcfc:	9204      	str	r2, [sp, #16]
 800bcfe:	9a05      	ldr	r2, [sp, #20]
 800bd00:	2101      	movs	r1, #1
 800bd02:	441a      	add	r2, r3
 800bd04:	4620      	mov	r0, r4
 800bd06:	9205      	str	r2, [sp, #20]
 800bd08:	f000 fb5c 	bl	800c3c4 <__i2b>
 800bd0c:	4607      	mov	r7, r0
 800bd0e:	2d00      	cmp	r5, #0
 800bd10:	dd0c      	ble.n	800bd2c <_dtoa_r+0x754>
 800bd12:	9b05      	ldr	r3, [sp, #20]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	dd09      	ble.n	800bd2c <_dtoa_r+0x754>
 800bd18:	42ab      	cmp	r3, r5
 800bd1a:	9a04      	ldr	r2, [sp, #16]
 800bd1c:	bfa8      	it	ge
 800bd1e:	462b      	movge	r3, r5
 800bd20:	1ad2      	subs	r2, r2, r3
 800bd22:	9204      	str	r2, [sp, #16]
 800bd24:	9a05      	ldr	r2, [sp, #20]
 800bd26:	1aed      	subs	r5, r5, r3
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	9305      	str	r3, [sp, #20]
 800bd2c:	9b07      	ldr	r3, [sp, #28]
 800bd2e:	b31b      	cbz	r3, 800bd78 <_dtoa_r+0x7a0>
 800bd30:	9b08      	ldr	r3, [sp, #32]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f000 80af 	beq.w	800be96 <_dtoa_r+0x8be>
 800bd38:	2e00      	cmp	r6, #0
 800bd3a:	dd13      	ble.n	800bd64 <_dtoa_r+0x78c>
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	4632      	mov	r2, r6
 800bd40:	4620      	mov	r0, r4
 800bd42:	f000 fbff 	bl	800c544 <__pow5mult>
 800bd46:	ee18 2a10 	vmov	r2, s16
 800bd4a:	4601      	mov	r1, r0
 800bd4c:	4607      	mov	r7, r0
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f000 fb4e 	bl	800c3f0 <__multiply>
 800bd54:	ee18 1a10 	vmov	r1, s16
 800bd58:	4680      	mov	r8, r0
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f000 fa7a 	bl	800c254 <_Bfree>
 800bd60:	ee08 8a10 	vmov	s16, r8
 800bd64:	9b07      	ldr	r3, [sp, #28]
 800bd66:	1b9a      	subs	r2, r3, r6
 800bd68:	d006      	beq.n	800bd78 <_dtoa_r+0x7a0>
 800bd6a:	ee18 1a10 	vmov	r1, s16
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f000 fbe8 	bl	800c544 <__pow5mult>
 800bd74:	ee08 0a10 	vmov	s16, r0
 800bd78:	2101      	movs	r1, #1
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f000 fb22 	bl	800c3c4 <__i2b>
 800bd80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	4606      	mov	r6, r0
 800bd86:	f340 8088 	ble.w	800be9a <_dtoa_r+0x8c2>
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	4601      	mov	r1, r0
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f000 fbd8 	bl	800c544 <__pow5mult>
 800bd94:	9b06      	ldr	r3, [sp, #24]
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	4606      	mov	r6, r0
 800bd9a:	f340 8081 	ble.w	800bea0 <_dtoa_r+0x8c8>
 800bd9e:	f04f 0800 	mov.w	r8, #0
 800bda2:	6933      	ldr	r3, [r6, #16]
 800bda4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bda8:	6918      	ldr	r0, [r3, #16]
 800bdaa:	f000 fabb 	bl	800c324 <__hi0bits>
 800bdae:	f1c0 0020 	rsb	r0, r0, #32
 800bdb2:	9b05      	ldr	r3, [sp, #20]
 800bdb4:	4418      	add	r0, r3
 800bdb6:	f010 001f 	ands.w	r0, r0, #31
 800bdba:	f000 8092 	beq.w	800bee2 <_dtoa_r+0x90a>
 800bdbe:	f1c0 0320 	rsb	r3, r0, #32
 800bdc2:	2b04      	cmp	r3, #4
 800bdc4:	f340 808a 	ble.w	800bedc <_dtoa_r+0x904>
 800bdc8:	f1c0 001c 	rsb	r0, r0, #28
 800bdcc:	9b04      	ldr	r3, [sp, #16]
 800bdce:	4403      	add	r3, r0
 800bdd0:	9304      	str	r3, [sp, #16]
 800bdd2:	9b05      	ldr	r3, [sp, #20]
 800bdd4:	4403      	add	r3, r0
 800bdd6:	4405      	add	r5, r0
 800bdd8:	9305      	str	r3, [sp, #20]
 800bdda:	9b04      	ldr	r3, [sp, #16]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	dd07      	ble.n	800bdf0 <_dtoa_r+0x818>
 800bde0:	ee18 1a10 	vmov	r1, s16
 800bde4:	461a      	mov	r2, r3
 800bde6:	4620      	mov	r0, r4
 800bde8:	f000 fc06 	bl	800c5f8 <__lshift>
 800bdec:	ee08 0a10 	vmov	s16, r0
 800bdf0:	9b05      	ldr	r3, [sp, #20]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	dd05      	ble.n	800be02 <_dtoa_r+0x82a>
 800bdf6:	4631      	mov	r1, r6
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	f000 fbfc 	bl	800c5f8 <__lshift>
 800be00:	4606      	mov	r6, r0
 800be02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be04:	2b00      	cmp	r3, #0
 800be06:	d06e      	beq.n	800bee6 <_dtoa_r+0x90e>
 800be08:	ee18 0a10 	vmov	r0, s16
 800be0c:	4631      	mov	r1, r6
 800be0e:	f000 fc63 	bl	800c6d8 <__mcmp>
 800be12:	2800      	cmp	r0, #0
 800be14:	da67      	bge.n	800bee6 <_dtoa_r+0x90e>
 800be16:	9b00      	ldr	r3, [sp, #0]
 800be18:	3b01      	subs	r3, #1
 800be1a:	ee18 1a10 	vmov	r1, s16
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	220a      	movs	r2, #10
 800be22:	2300      	movs	r3, #0
 800be24:	4620      	mov	r0, r4
 800be26:	f000 fa37 	bl	800c298 <__multadd>
 800be2a:	9b08      	ldr	r3, [sp, #32]
 800be2c:	ee08 0a10 	vmov	s16, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	f000 81b1 	beq.w	800c198 <_dtoa_r+0xbc0>
 800be36:	2300      	movs	r3, #0
 800be38:	4639      	mov	r1, r7
 800be3a:	220a      	movs	r2, #10
 800be3c:	4620      	mov	r0, r4
 800be3e:	f000 fa2b 	bl	800c298 <__multadd>
 800be42:	9b02      	ldr	r3, [sp, #8]
 800be44:	2b00      	cmp	r3, #0
 800be46:	4607      	mov	r7, r0
 800be48:	f300 808e 	bgt.w	800bf68 <_dtoa_r+0x990>
 800be4c:	9b06      	ldr	r3, [sp, #24]
 800be4e:	2b02      	cmp	r3, #2
 800be50:	dc51      	bgt.n	800bef6 <_dtoa_r+0x91e>
 800be52:	e089      	b.n	800bf68 <_dtoa_r+0x990>
 800be54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be5a:	e74b      	b.n	800bcf4 <_dtoa_r+0x71c>
 800be5c:	9b03      	ldr	r3, [sp, #12]
 800be5e:	1e5e      	subs	r6, r3, #1
 800be60:	9b07      	ldr	r3, [sp, #28]
 800be62:	42b3      	cmp	r3, r6
 800be64:	bfbf      	itttt	lt
 800be66:	9b07      	ldrlt	r3, [sp, #28]
 800be68:	9607      	strlt	r6, [sp, #28]
 800be6a:	1af2      	sublt	r2, r6, r3
 800be6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800be6e:	bfb6      	itet	lt
 800be70:	189b      	addlt	r3, r3, r2
 800be72:	1b9e      	subge	r6, r3, r6
 800be74:	930a      	strlt	r3, [sp, #40]	; 0x28
 800be76:	9b03      	ldr	r3, [sp, #12]
 800be78:	bfb8      	it	lt
 800be7a:	2600      	movlt	r6, #0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	bfb7      	itett	lt
 800be80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800be84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800be88:	1a9d      	sublt	r5, r3, r2
 800be8a:	2300      	movlt	r3, #0
 800be8c:	e734      	b.n	800bcf8 <_dtoa_r+0x720>
 800be8e:	9e07      	ldr	r6, [sp, #28]
 800be90:	9d04      	ldr	r5, [sp, #16]
 800be92:	9f08      	ldr	r7, [sp, #32]
 800be94:	e73b      	b.n	800bd0e <_dtoa_r+0x736>
 800be96:	9a07      	ldr	r2, [sp, #28]
 800be98:	e767      	b.n	800bd6a <_dtoa_r+0x792>
 800be9a:	9b06      	ldr	r3, [sp, #24]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	dc18      	bgt.n	800bed2 <_dtoa_r+0x8fa>
 800bea0:	f1ba 0f00 	cmp.w	sl, #0
 800bea4:	d115      	bne.n	800bed2 <_dtoa_r+0x8fa>
 800bea6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800beaa:	b993      	cbnz	r3, 800bed2 <_dtoa_r+0x8fa>
 800beac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800beb0:	0d1b      	lsrs	r3, r3, #20
 800beb2:	051b      	lsls	r3, r3, #20
 800beb4:	b183      	cbz	r3, 800bed8 <_dtoa_r+0x900>
 800beb6:	9b04      	ldr	r3, [sp, #16]
 800beb8:	3301      	adds	r3, #1
 800beba:	9304      	str	r3, [sp, #16]
 800bebc:	9b05      	ldr	r3, [sp, #20]
 800bebe:	3301      	adds	r3, #1
 800bec0:	9305      	str	r3, [sp, #20]
 800bec2:	f04f 0801 	mov.w	r8, #1
 800bec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bec8:	2b00      	cmp	r3, #0
 800beca:	f47f af6a 	bne.w	800bda2 <_dtoa_r+0x7ca>
 800bece:	2001      	movs	r0, #1
 800bed0:	e76f      	b.n	800bdb2 <_dtoa_r+0x7da>
 800bed2:	f04f 0800 	mov.w	r8, #0
 800bed6:	e7f6      	b.n	800bec6 <_dtoa_r+0x8ee>
 800bed8:	4698      	mov	r8, r3
 800beda:	e7f4      	b.n	800bec6 <_dtoa_r+0x8ee>
 800bedc:	f43f af7d 	beq.w	800bdda <_dtoa_r+0x802>
 800bee0:	4618      	mov	r0, r3
 800bee2:	301c      	adds	r0, #28
 800bee4:	e772      	b.n	800bdcc <_dtoa_r+0x7f4>
 800bee6:	9b03      	ldr	r3, [sp, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	dc37      	bgt.n	800bf5c <_dtoa_r+0x984>
 800beec:	9b06      	ldr	r3, [sp, #24]
 800beee:	2b02      	cmp	r3, #2
 800bef0:	dd34      	ble.n	800bf5c <_dtoa_r+0x984>
 800bef2:	9b03      	ldr	r3, [sp, #12]
 800bef4:	9302      	str	r3, [sp, #8]
 800bef6:	9b02      	ldr	r3, [sp, #8]
 800bef8:	b96b      	cbnz	r3, 800bf16 <_dtoa_r+0x93e>
 800befa:	4631      	mov	r1, r6
 800befc:	2205      	movs	r2, #5
 800befe:	4620      	mov	r0, r4
 800bf00:	f000 f9ca 	bl	800c298 <__multadd>
 800bf04:	4601      	mov	r1, r0
 800bf06:	4606      	mov	r6, r0
 800bf08:	ee18 0a10 	vmov	r0, s16
 800bf0c:	f000 fbe4 	bl	800c6d8 <__mcmp>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	f73f adbb 	bgt.w	800ba8c <_dtoa_r+0x4b4>
 800bf16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf18:	9d01      	ldr	r5, [sp, #4]
 800bf1a:	43db      	mvns	r3, r3
 800bf1c:	9300      	str	r3, [sp, #0]
 800bf1e:	f04f 0800 	mov.w	r8, #0
 800bf22:	4631      	mov	r1, r6
 800bf24:	4620      	mov	r0, r4
 800bf26:	f000 f995 	bl	800c254 <_Bfree>
 800bf2a:	2f00      	cmp	r7, #0
 800bf2c:	f43f aea4 	beq.w	800bc78 <_dtoa_r+0x6a0>
 800bf30:	f1b8 0f00 	cmp.w	r8, #0
 800bf34:	d005      	beq.n	800bf42 <_dtoa_r+0x96a>
 800bf36:	45b8      	cmp	r8, r7
 800bf38:	d003      	beq.n	800bf42 <_dtoa_r+0x96a>
 800bf3a:	4641      	mov	r1, r8
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f000 f989 	bl	800c254 <_Bfree>
 800bf42:	4639      	mov	r1, r7
 800bf44:	4620      	mov	r0, r4
 800bf46:	f000 f985 	bl	800c254 <_Bfree>
 800bf4a:	e695      	b.n	800bc78 <_dtoa_r+0x6a0>
 800bf4c:	2600      	movs	r6, #0
 800bf4e:	4637      	mov	r7, r6
 800bf50:	e7e1      	b.n	800bf16 <_dtoa_r+0x93e>
 800bf52:	9700      	str	r7, [sp, #0]
 800bf54:	4637      	mov	r7, r6
 800bf56:	e599      	b.n	800ba8c <_dtoa_r+0x4b4>
 800bf58:	40240000 	.word	0x40240000
 800bf5c:	9b08      	ldr	r3, [sp, #32]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f000 80ca 	beq.w	800c0f8 <_dtoa_r+0xb20>
 800bf64:	9b03      	ldr	r3, [sp, #12]
 800bf66:	9302      	str	r3, [sp, #8]
 800bf68:	2d00      	cmp	r5, #0
 800bf6a:	dd05      	ble.n	800bf78 <_dtoa_r+0x9a0>
 800bf6c:	4639      	mov	r1, r7
 800bf6e:	462a      	mov	r2, r5
 800bf70:	4620      	mov	r0, r4
 800bf72:	f000 fb41 	bl	800c5f8 <__lshift>
 800bf76:	4607      	mov	r7, r0
 800bf78:	f1b8 0f00 	cmp.w	r8, #0
 800bf7c:	d05b      	beq.n	800c036 <_dtoa_r+0xa5e>
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	4620      	mov	r0, r4
 800bf82:	f000 f927 	bl	800c1d4 <_Balloc>
 800bf86:	4605      	mov	r5, r0
 800bf88:	b928      	cbnz	r0, 800bf96 <_dtoa_r+0x9be>
 800bf8a:	4b87      	ldr	r3, [pc, #540]	; (800c1a8 <_dtoa_r+0xbd0>)
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf92:	f7ff bb3b 	b.w	800b60c <_dtoa_r+0x34>
 800bf96:	693a      	ldr	r2, [r7, #16]
 800bf98:	3202      	adds	r2, #2
 800bf9a:	0092      	lsls	r2, r2, #2
 800bf9c:	f107 010c 	add.w	r1, r7, #12
 800bfa0:	300c      	adds	r0, #12
 800bfa2:	f7fe fcbf 	bl	800a924 <memcpy>
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	4629      	mov	r1, r5
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f000 fb24 	bl	800c5f8 <__lshift>
 800bfb0:	9b01      	ldr	r3, [sp, #4]
 800bfb2:	f103 0901 	add.w	r9, r3, #1
 800bfb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bfba:	4413      	add	r3, r2
 800bfbc:	9305      	str	r3, [sp, #20]
 800bfbe:	f00a 0301 	and.w	r3, sl, #1
 800bfc2:	46b8      	mov	r8, r7
 800bfc4:	9304      	str	r3, [sp, #16]
 800bfc6:	4607      	mov	r7, r0
 800bfc8:	4631      	mov	r1, r6
 800bfca:	ee18 0a10 	vmov	r0, s16
 800bfce:	f7ff fa77 	bl	800b4c0 <quorem>
 800bfd2:	4641      	mov	r1, r8
 800bfd4:	9002      	str	r0, [sp, #8]
 800bfd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bfda:	ee18 0a10 	vmov	r0, s16
 800bfde:	f000 fb7b 	bl	800c6d8 <__mcmp>
 800bfe2:	463a      	mov	r2, r7
 800bfe4:	9003      	str	r0, [sp, #12]
 800bfe6:	4631      	mov	r1, r6
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f000 fb91 	bl	800c710 <__mdiff>
 800bfee:	68c2      	ldr	r2, [r0, #12]
 800bff0:	f109 3bff 	add.w	fp, r9, #4294967295
 800bff4:	4605      	mov	r5, r0
 800bff6:	bb02      	cbnz	r2, 800c03a <_dtoa_r+0xa62>
 800bff8:	4601      	mov	r1, r0
 800bffa:	ee18 0a10 	vmov	r0, s16
 800bffe:	f000 fb6b 	bl	800c6d8 <__mcmp>
 800c002:	4602      	mov	r2, r0
 800c004:	4629      	mov	r1, r5
 800c006:	4620      	mov	r0, r4
 800c008:	9207      	str	r2, [sp, #28]
 800c00a:	f000 f923 	bl	800c254 <_Bfree>
 800c00e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c012:	ea43 0102 	orr.w	r1, r3, r2
 800c016:	9b04      	ldr	r3, [sp, #16]
 800c018:	430b      	orrs	r3, r1
 800c01a:	464d      	mov	r5, r9
 800c01c:	d10f      	bne.n	800c03e <_dtoa_r+0xa66>
 800c01e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c022:	d02a      	beq.n	800c07a <_dtoa_r+0xaa2>
 800c024:	9b03      	ldr	r3, [sp, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	dd02      	ble.n	800c030 <_dtoa_r+0xa58>
 800c02a:	9b02      	ldr	r3, [sp, #8]
 800c02c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c030:	f88b a000 	strb.w	sl, [fp]
 800c034:	e775      	b.n	800bf22 <_dtoa_r+0x94a>
 800c036:	4638      	mov	r0, r7
 800c038:	e7ba      	b.n	800bfb0 <_dtoa_r+0x9d8>
 800c03a:	2201      	movs	r2, #1
 800c03c:	e7e2      	b.n	800c004 <_dtoa_r+0xa2c>
 800c03e:	9b03      	ldr	r3, [sp, #12]
 800c040:	2b00      	cmp	r3, #0
 800c042:	db04      	blt.n	800c04e <_dtoa_r+0xa76>
 800c044:	9906      	ldr	r1, [sp, #24]
 800c046:	430b      	orrs	r3, r1
 800c048:	9904      	ldr	r1, [sp, #16]
 800c04a:	430b      	orrs	r3, r1
 800c04c:	d122      	bne.n	800c094 <_dtoa_r+0xabc>
 800c04e:	2a00      	cmp	r2, #0
 800c050:	ddee      	ble.n	800c030 <_dtoa_r+0xa58>
 800c052:	ee18 1a10 	vmov	r1, s16
 800c056:	2201      	movs	r2, #1
 800c058:	4620      	mov	r0, r4
 800c05a:	f000 facd 	bl	800c5f8 <__lshift>
 800c05e:	4631      	mov	r1, r6
 800c060:	ee08 0a10 	vmov	s16, r0
 800c064:	f000 fb38 	bl	800c6d8 <__mcmp>
 800c068:	2800      	cmp	r0, #0
 800c06a:	dc03      	bgt.n	800c074 <_dtoa_r+0xa9c>
 800c06c:	d1e0      	bne.n	800c030 <_dtoa_r+0xa58>
 800c06e:	f01a 0f01 	tst.w	sl, #1
 800c072:	d0dd      	beq.n	800c030 <_dtoa_r+0xa58>
 800c074:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c078:	d1d7      	bne.n	800c02a <_dtoa_r+0xa52>
 800c07a:	2339      	movs	r3, #57	; 0x39
 800c07c:	f88b 3000 	strb.w	r3, [fp]
 800c080:	462b      	mov	r3, r5
 800c082:	461d      	mov	r5, r3
 800c084:	3b01      	subs	r3, #1
 800c086:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c08a:	2a39      	cmp	r2, #57	; 0x39
 800c08c:	d071      	beq.n	800c172 <_dtoa_r+0xb9a>
 800c08e:	3201      	adds	r2, #1
 800c090:	701a      	strb	r2, [r3, #0]
 800c092:	e746      	b.n	800bf22 <_dtoa_r+0x94a>
 800c094:	2a00      	cmp	r2, #0
 800c096:	dd07      	ble.n	800c0a8 <_dtoa_r+0xad0>
 800c098:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c09c:	d0ed      	beq.n	800c07a <_dtoa_r+0xaa2>
 800c09e:	f10a 0301 	add.w	r3, sl, #1
 800c0a2:	f88b 3000 	strb.w	r3, [fp]
 800c0a6:	e73c      	b.n	800bf22 <_dtoa_r+0x94a>
 800c0a8:	9b05      	ldr	r3, [sp, #20]
 800c0aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c0ae:	4599      	cmp	r9, r3
 800c0b0:	d047      	beq.n	800c142 <_dtoa_r+0xb6a>
 800c0b2:	ee18 1a10 	vmov	r1, s16
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	220a      	movs	r2, #10
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f000 f8ec 	bl	800c298 <__multadd>
 800c0c0:	45b8      	cmp	r8, r7
 800c0c2:	ee08 0a10 	vmov	s16, r0
 800c0c6:	f04f 0300 	mov.w	r3, #0
 800c0ca:	f04f 020a 	mov.w	r2, #10
 800c0ce:	4641      	mov	r1, r8
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	d106      	bne.n	800c0e2 <_dtoa_r+0xb0a>
 800c0d4:	f000 f8e0 	bl	800c298 <__multadd>
 800c0d8:	4680      	mov	r8, r0
 800c0da:	4607      	mov	r7, r0
 800c0dc:	f109 0901 	add.w	r9, r9, #1
 800c0e0:	e772      	b.n	800bfc8 <_dtoa_r+0x9f0>
 800c0e2:	f000 f8d9 	bl	800c298 <__multadd>
 800c0e6:	4639      	mov	r1, r7
 800c0e8:	4680      	mov	r8, r0
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	220a      	movs	r2, #10
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f000 f8d2 	bl	800c298 <__multadd>
 800c0f4:	4607      	mov	r7, r0
 800c0f6:	e7f1      	b.n	800c0dc <_dtoa_r+0xb04>
 800c0f8:	9b03      	ldr	r3, [sp, #12]
 800c0fa:	9302      	str	r3, [sp, #8]
 800c0fc:	9d01      	ldr	r5, [sp, #4]
 800c0fe:	ee18 0a10 	vmov	r0, s16
 800c102:	4631      	mov	r1, r6
 800c104:	f7ff f9dc 	bl	800b4c0 <quorem>
 800c108:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c10c:	9b01      	ldr	r3, [sp, #4]
 800c10e:	f805 ab01 	strb.w	sl, [r5], #1
 800c112:	1aea      	subs	r2, r5, r3
 800c114:	9b02      	ldr	r3, [sp, #8]
 800c116:	4293      	cmp	r3, r2
 800c118:	dd09      	ble.n	800c12e <_dtoa_r+0xb56>
 800c11a:	ee18 1a10 	vmov	r1, s16
 800c11e:	2300      	movs	r3, #0
 800c120:	220a      	movs	r2, #10
 800c122:	4620      	mov	r0, r4
 800c124:	f000 f8b8 	bl	800c298 <__multadd>
 800c128:	ee08 0a10 	vmov	s16, r0
 800c12c:	e7e7      	b.n	800c0fe <_dtoa_r+0xb26>
 800c12e:	9b02      	ldr	r3, [sp, #8]
 800c130:	2b00      	cmp	r3, #0
 800c132:	bfc8      	it	gt
 800c134:	461d      	movgt	r5, r3
 800c136:	9b01      	ldr	r3, [sp, #4]
 800c138:	bfd8      	it	le
 800c13a:	2501      	movle	r5, #1
 800c13c:	441d      	add	r5, r3
 800c13e:	f04f 0800 	mov.w	r8, #0
 800c142:	ee18 1a10 	vmov	r1, s16
 800c146:	2201      	movs	r2, #1
 800c148:	4620      	mov	r0, r4
 800c14a:	f000 fa55 	bl	800c5f8 <__lshift>
 800c14e:	4631      	mov	r1, r6
 800c150:	ee08 0a10 	vmov	s16, r0
 800c154:	f000 fac0 	bl	800c6d8 <__mcmp>
 800c158:	2800      	cmp	r0, #0
 800c15a:	dc91      	bgt.n	800c080 <_dtoa_r+0xaa8>
 800c15c:	d102      	bne.n	800c164 <_dtoa_r+0xb8c>
 800c15e:	f01a 0f01 	tst.w	sl, #1
 800c162:	d18d      	bne.n	800c080 <_dtoa_r+0xaa8>
 800c164:	462b      	mov	r3, r5
 800c166:	461d      	mov	r5, r3
 800c168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c16c:	2a30      	cmp	r2, #48	; 0x30
 800c16e:	d0fa      	beq.n	800c166 <_dtoa_r+0xb8e>
 800c170:	e6d7      	b.n	800bf22 <_dtoa_r+0x94a>
 800c172:	9a01      	ldr	r2, [sp, #4]
 800c174:	429a      	cmp	r2, r3
 800c176:	d184      	bne.n	800c082 <_dtoa_r+0xaaa>
 800c178:	9b00      	ldr	r3, [sp, #0]
 800c17a:	3301      	adds	r3, #1
 800c17c:	9300      	str	r3, [sp, #0]
 800c17e:	2331      	movs	r3, #49	; 0x31
 800c180:	7013      	strb	r3, [r2, #0]
 800c182:	e6ce      	b.n	800bf22 <_dtoa_r+0x94a>
 800c184:	4b09      	ldr	r3, [pc, #36]	; (800c1ac <_dtoa_r+0xbd4>)
 800c186:	f7ff ba95 	b.w	800b6b4 <_dtoa_r+0xdc>
 800c18a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f47f aa6e 	bne.w	800b66e <_dtoa_r+0x96>
 800c192:	4b07      	ldr	r3, [pc, #28]	; (800c1b0 <_dtoa_r+0xbd8>)
 800c194:	f7ff ba8e 	b.w	800b6b4 <_dtoa_r+0xdc>
 800c198:	9b02      	ldr	r3, [sp, #8]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	dcae      	bgt.n	800c0fc <_dtoa_r+0xb24>
 800c19e:	9b06      	ldr	r3, [sp, #24]
 800c1a0:	2b02      	cmp	r3, #2
 800c1a2:	f73f aea8 	bgt.w	800bef6 <_dtoa_r+0x91e>
 800c1a6:	e7a9      	b.n	800c0fc <_dtoa_r+0xb24>
 800c1a8:	0800d65f 	.word	0x0800d65f
 800c1ac:	0800d5bc 	.word	0x0800d5bc
 800c1b0:	0800d5e0 	.word	0x0800d5e0

0800c1b4 <_localeconv_r>:
 800c1b4:	4800      	ldr	r0, [pc, #0]	; (800c1b8 <_localeconv_r+0x4>)
 800c1b6:	4770      	bx	lr
 800c1b8:	20000164 	.word	0x20000164

0800c1bc <__malloc_lock>:
 800c1bc:	4801      	ldr	r0, [pc, #4]	; (800c1c4 <__malloc_lock+0x8>)
 800c1be:	f000 bbd4 	b.w	800c96a <__retarget_lock_acquire_recursive>
 800c1c2:	bf00      	nop
 800c1c4:	20000a90 	.word	0x20000a90

0800c1c8 <__malloc_unlock>:
 800c1c8:	4801      	ldr	r0, [pc, #4]	; (800c1d0 <__malloc_unlock+0x8>)
 800c1ca:	f000 bbcf 	b.w	800c96c <__retarget_lock_release_recursive>
 800c1ce:	bf00      	nop
 800c1d0:	20000a90 	.word	0x20000a90

0800c1d4 <_Balloc>:
 800c1d4:	b570      	push	{r4, r5, r6, lr}
 800c1d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c1d8:	4604      	mov	r4, r0
 800c1da:	460d      	mov	r5, r1
 800c1dc:	b976      	cbnz	r6, 800c1fc <_Balloc+0x28>
 800c1de:	2010      	movs	r0, #16
 800c1e0:	f7fe fb90 	bl	800a904 <malloc>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	6260      	str	r0, [r4, #36]	; 0x24
 800c1e8:	b920      	cbnz	r0, 800c1f4 <_Balloc+0x20>
 800c1ea:	4b18      	ldr	r3, [pc, #96]	; (800c24c <_Balloc+0x78>)
 800c1ec:	4818      	ldr	r0, [pc, #96]	; (800c250 <_Balloc+0x7c>)
 800c1ee:	2166      	movs	r1, #102	; 0x66
 800c1f0:	f000 fb8a 	bl	800c908 <__assert_func>
 800c1f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1f8:	6006      	str	r6, [r0, #0]
 800c1fa:	60c6      	str	r6, [r0, #12]
 800c1fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c1fe:	68f3      	ldr	r3, [r6, #12]
 800c200:	b183      	cbz	r3, 800c224 <_Balloc+0x50>
 800c202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c20a:	b9b8      	cbnz	r0, 800c23c <_Balloc+0x68>
 800c20c:	2101      	movs	r1, #1
 800c20e:	fa01 f605 	lsl.w	r6, r1, r5
 800c212:	1d72      	adds	r2, r6, #5
 800c214:	0092      	lsls	r2, r2, #2
 800c216:	4620      	mov	r0, r4
 800c218:	f000 fb60 	bl	800c8dc <_calloc_r>
 800c21c:	b160      	cbz	r0, 800c238 <_Balloc+0x64>
 800c21e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c222:	e00e      	b.n	800c242 <_Balloc+0x6e>
 800c224:	2221      	movs	r2, #33	; 0x21
 800c226:	2104      	movs	r1, #4
 800c228:	4620      	mov	r0, r4
 800c22a:	f000 fb57 	bl	800c8dc <_calloc_r>
 800c22e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c230:	60f0      	str	r0, [r6, #12]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1e4      	bne.n	800c202 <_Balloc+0x2e>
 800c238:	2000      	movs	r0, #0
 800c23a:	bd70      	pop	{r4, r5, r6, pc}
 800c23c:	6802      	ldr	r2, [r0, #0]
 800c23e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c242:	2300      	movs	r3, #0
 800c244:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c248:	e7f7      	b.n	800c23a <_Balloc+0x66>
 800c24a:	bf00      	nop
 800c24c:	0800d5ed 	.word	0x0800d5ed
 800c250:	0800d670 	.word	0x0800d670

0800c254 <_Bfree>:
 800c254:	b570      	push	{r4, r5, r6, lr}
 800c256:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c258:	4605      	mov	r5, r0
 800c25a:	460c      	mov	r4, r1
 800c25c:	b976      	cbnz	r6, 800c27c <_Bfree+0x28>
 800c25e:	2010      	movs	r0, #16
 800c260:	f7fe fb50 	bl	800a904 <malloc>
 800c264:	4602      	mov	r2, r0
 800c266:	6268      	str	r0, [r5, #36]	; 0x24
 800c268:	b920      	cbnz	r0, 800c274 <_Bfree+0x20>
 800c26a:	4b09      	ldr	r3, [pc, #36]	; (800c290 <_Bfree+0x3c>)
 800c26c:	4809      	ldr	r0, [pc, #36]	; (800c294 <_Bfree+0x40>)
 800c26e:	218a      	movs	r1, #138	; 0x8a
 800c270:	f000 fb4a 	bl	800c908 <__assert_func>
 800c274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c278:	6006      	str	r6, [r0, #0]
 800c27a:	60c6      	str	r6, [r0, #12]
 800c27c:	b13c      	cbz	r4, 800c28e <_Bfree+0x3a>
 800c27e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c280:	6862      	ldr	r2, [r4, #4]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c288:	6021      	str	r1, [r4, #0]
 800c28a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c28e:	bd70      	pop	{r4, r5, r6, pc}
 800c290:	0800d5ed 	.word	0x0800d5ed
 800c294:	0800d670 	.word	0x0800d670

0800c298 <__multadd>:
 800c298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c29c:	690d      	ldr	r5, [r1, #16]
 800c29e:	4607      	mov	r7, r0
 800c2a0:	460c      	mov	r4, r1
 800c2a2:	461e      	mov	r6, r3
 800c2a4:	f101 0c14 	add.w	ip, r1, #20
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	f8dc 3000 	ldr.w	r3, [ip]
 800c2ae:	b299      	uxth	r1, r3
 800c2b0:	fb02 6101 	mla	r1, r2, r1, r6
 800c2b4:	0c1e      	lsrs	r6, r3, #16
 800c2b6:	0c0b      	lsrs	r3, r1, #16
 800c2b8:	fb02 3306 	mla	r3, r2, r6, r3
 800c2bc:	b289      	uxth	r1, r1
 800c2be:	3001      	adds	r0, #1
 800c2c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2c4:	4285      	cmp	r5, r0
 800c2c6:	f84c 1b04 	str.w	r1, [ip], #4
 800c2ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2ce:	dcec      	bgt.n	800c2aa <__multadd+0x12>
 800c2d0:	b30e      	cbz	r6, 800c316 <__multadd+0x7e>
 800c2d2:	68a3      	ldr	r3, [r4, #8]
 800c2d4:	42ab      	cmp	r3, r5
 800c2d6:	dc19      	bgt.n	800c30c <__multadd+0x74>
 800c2d8:	6861      	ldr	r1, [r4, #4]
 800c2da:	4638      	mov	r0, r7
 800c2dc:	3101      	adds	r1, #1
 800c2de:	f7ff ff79 	bl	800c1d4 <_Balloc>
 800c2e2:	4680      	mov	r8, r0
 800c2e4:	b928      	cbnz	r0, 800c2f2 <__multadd+0x5a>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	4b0c      	ldr	r3, [pc, #48]	; (800c31c <__multadd+0x84>)
 800c2ea:	480d      	ldr	r0, [pc, #52]	; (800c320 <__multadd+0x88>)
 800c2ec:	21b5      	movs	r1, #181	; 0xb5
 800c2ee:	f000 fb0b 	bl	800c908 <__assert_func>
 800c2f2:	6922      	ldr	r2, [r4, #16]
 800c2f4:	3202      	adds	r2, #2
 800c2f6:	f104 010c 	add.w	r1, r4, #12
 800c2fa:	0092      	lsls	r2, r2, #2
 800c2fc:	300c      	adds	r0, #12
 800c2fe:	f7fe fb11 	bl	800a924 <memcpy>
 800c302:	4621      	mov	r1, r4
 800c304:	4638      	mov	r0, r7
 800c306:	f7ff ffa5 	bl	800c254 <_Bfree>
 800c30a:	4644      	mov	r4, r8
 800c30c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c310:	3501      	adds	r5, #1
 800c312:	615e      	str	r6, [r3, #20]
 800c314:	6125      	str	r5, [r4, #16]
 800c316:	4620      	mov	r0, r4
 800c318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c31c:	0800d65f 	.word	0x0800d65f
 800c320:	0800d670 	.word	0x0800d670

0800c324 <__hi0bits>:
 800c324:	0c03      	lsrs	r3, r0, #16
 800c326:	041b      	lsls	r3, r3, #16
 800c328:	b9d3      	cbnz	r3, 800c360 <__hi0bits+0x3c>
 800c32a:	0400      	lsls	r0, r0, #16
 800c32c:	2310      	movs	r3, #16
 800c32e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c332:	bf04      	itt	eq
 800c334:	0200      	lsleq	r0, r0, #8
 800c336:	3308      	addeq	r3, #8
 800c338:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c33c:	bf04      	itt	eq
 800c33e:	0100      	lsleq	r0, r0, #4
 800c340:	3304      	addeq	r3, #4
 800c342:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c346:	bf04      	itt	eq
 800c348:	0080      	lsleq	r0, r0, #2
 800c34a:	3302      	addeq	r3, #2
 800c34c:	2800      	cmp	r0, #0
 800c34e:	db05      	blt.n	800c35c <__hi0bits+0x38>
 800c350:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c354:	f103 0301 	add.w	r3, r3, #1
 800c358:	bf08      	it	eq
 800c35a:	2320      	moveq	r3, #32
 800c35c:	4618      	mov	r0, r3
 800c35e:	4770      	bx	lr
 800c360:	2300      	movs	r3, #0
 800c362:	e7e4      	b.n	800c32e <__hi0bits+0xa>

0800c364 <__lo0bits>:
 800c364:	6803      	ldr	r3, [r0, #0]
 800c366:	f013 0207 	ands.w	r2, r3, #7
 800c36a:	4601      	mov	r1, r0
 800c36c:	d00b      	beq.n	800c386 <__lo0bits+0x22>
 800c36e:	07da      	lsls	r2, r3, #31
 800c370:	d423      	bmi.n	800c3ba <__lo0bits+0x56>
 800c372:	0798      	lsls	r0, r3, #30
 800c374:	bf49      	itett	mi
 800c376:	085b      	lsrmi	r3, r3, #1
 800c378:	089b      	lsrpl	r3, r3, #2
 800c37a:	2001      	movmi	r0, #1
 800c37c:	600b      	strmi	r3, [r1, #0]
 800c37e:	bf5c      	itt	pl
 800c380:	600b      	strpl	r3, [r1, #0]
 800c382:	2002      	movpl	r0, #2
 800c384:	4770      	bx	lr
 800c386:	b298      	uxth	r0, r3
 800c388:	b9a8      	cbnz	r0, 800c3b6 <__lo0bits+0x52>
 800c38a:	0c1b      	lsrs	r3, r3, #16
 800c38c:	2010      	movs	r0, #16
 800c38e:	b2da      	uxtb	r2, r3
 800c390:	b90a      	cbnz	r2, 800c396 <__lo0bits+0x32>
 800c392:	3008      	adds	r0, #8
 800c394:	0a1b      	lsrs	r3, r3, #8
 800c396:	071a      	lsls	r2, r3, #28
 800c398:	bf04      	itt	eq
 800c39a:	091b      	lsreq	r3, r3, #4
 800c39c:	3004      	addeq	r0, #4
 800c39e:	079a      	lsls	r2, r3, #30
 800c3a0:	bf04      	itt	eq
 800c3a2:	089b      	lsreq	r3, r3, #2
 800c3a4:	3002      	addeq	r0, #2
 800c3a6:	07da      	lsls	r2, r3, #31
 800c3a8:	d403      	bmi.n	800c3b2 <__lo0bits+0x4e>
 800c3aa:	085b      	lsrs	r3, r3, #1
 800c3ac:	f100 0001 	add.w	r0, r0, #1
 800c3b0:	d005      	beq.n	800c3be <__lo0bits+0x5a>
 800c3b2:	600b      	str	r3, [r1, #0]
 800c3b4:	4770      	bx	lr
 800c3b6:	4610      	mov	r0, r2
 800c3b8:	e7e9      	b.n	800c38e <__lo0bits+0x2a>
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	4770      	bx	lr
 800c3be:	2020      	movs	r0, #32
 800c3c0:	4770      	bx	lr
	...

0800c3c4 <__i2b>:
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	f7ff ff03 	bl	800c1d4 <_Balloc>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	b928      	cbnz	r0, 800c3de <__i2b+0x1a>
 800c3d2:	4b05      	ldr	r3, [pc, #20]	; (800c3e8 <__i2b+0x24>)
 800c3d4:	4805      	ldr	r0, [pc, #20]	; (800c3ec <__i2b+0x28>)
 800c3d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c3da:	f000 fa95 	bl	800c908 <__assert_func>
 800c3de:	2301      	movs	r3, #1
 800c3e0:	6144      	str	r4, [r0, #20]
 800c3e2:	6103      	str	r3, [r0, #16]
 800c3e4:	bd10      	pop	{r4, pc}
 800c3e6:	bf00      	nop
 800c3e8:	0800d65f 	.word	0x0800d65f
 800c3ec:	0800d670 	.word	0x0800d670

0800c3f0 <__multiply>:
 800c3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f4:	4691      	mov	r9, r2
 800c3f6:	690a      	ldr	r2, [r1, #16]
 800c3f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	bfb8      	it	lt
 800c400:	460b      	movlt	r3, r1
 800c402:	460c      	mov	r4, r1
 800c404:	bfbc      	itt	lt
 800c406:	464c      	movlt	r4, r9
 800c408:	4699      	movlt	r9, r3
 800c40a:	6927      	ldr	r7, [r4, #16]
 800c40c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c410:	68a3      	ldr	r3, [r4, #8]
 800c412:	6861      	ldr	r1, [r4, #4]
 800c414:	eb07 060a 	add.w	r6, r7, sl
 800c418:	42b3      	cmp	r3, r6
 800c41a:	b085      	sub	sp, #20
 800c41c:	bfb8      	it	lt
 800c41e:	3101      	addlt	r1, #1
 800c420:	f7ff fed8 	bl	800c1d4 <_Balloc>
 800c424:	b930      	cbnz	r0, 800c434 <__multiply+0x44>
 800c426:	4602      	mov	r2, r0
 800c428:	4b44      	ldr	r3, [pc, #272]	; (800c53c <__multiply+0x14c>)
 800c42a:	4845      	ldr	r0, [pc, #276]	; (800c540 <__multiply+0x150>)
 800c42c:	f240 115d 	movw	r1, #349	; 0x15d
 800c430:	f000 fa6a 	bl	800c908 <__assert_func>
 800c434:	f100 0514 	add.w	r5, r0, #20
 800c438:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c43c:	462b      	mov	r3, r5
 800c43e:	2200      	movs	r2, #0
 800c440:	4543      	cmp	r3, r8
 800c442:	d321      	bcc.n	800c488 <__multiply+0x98>
 800c444:	f104 0314 	add.w	r3, r4, #20
 800c448:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c44c:	f109 0314 	add.w	r3, r9, #20
 800c450:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c454:	9202      	str	r2, [sp, #8]
 800c456:	1b3a      	subs	r2, r7, r4
 800c458:	3a15      	subs	r2, #21
 800c45a:	f022 0203 	bic.w	r2, r2, #3
 800c45e:	3204      	adds	r2, #4
 800c460:	f104 0115 	add.w	r1, r4, #21
 800c464:	428f      	cmp	r7, r1
 800c466:	bf38      	it	cc
 800c468:	2204      	movcc	r2, #4
 800c46a:	9201      	str	r2, [sp, #4]
 800c46c:	9a02      	ldr	r2, [sp, #8]
 800c46e:	9303      	str	r3, [sp, #12]
 800c470:	429a      	cmp	r2, r3
 800c472:	d80c      	bhi.n	800c48e <__multiply+0x9e>
 800c474:	2e00      	cmp	r6, #0
 800c476:	dd03      	ble.n	800c480 <__multiply+0x90>
 800c478:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d05a      	beq.n	800c536 <__multiply+0x146>
 800c480:	6106      	str	r6, [r0, #16]
 800c482:	b005      	add	sp, #20
 800c484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c488:	f843 2b04 	str.w	r2, [r3], #4
 800c48c:	e7d8      	b.n	800c440 <__multiply+0x50>
 800c48e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c492:	f1ba 0f00 	cmp.w	sl, #0
 800c496:	d024      	beq.n	800c4e2 <__multiply+0xf2>
 800c498:	f104 0e14 	add.w	lr, r4, #20
 800c49c:	46a9      	mov	r9, r5
 800c49e:	f04f 0c00 	mov.w	ip, #0
 800c4a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c4a6:	f8d9 1000 	ldr.w	r1, [r9]
 800c4aa:	fa1f fb82 	uxth.w	fp, r2
 800c4ae:	b289      	uxth	r1, r1
 800c4b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c4b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c4b8:	f8d9 2000 	ldr.w	r2, [r9]
 800c4bc:	4461      	add	r1, ip
 800c4be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c4c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c4c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c4ca:	b289      	uxth	r1, r1
 800c4cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c4d0:	4577      	cmp	r7, lr
 800c4d2:	f849 1b04 	str.w	r1, [r9], #4
 800c4d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c4da:	d8e2      	bhi.n	800c4a2 <__multiply+0xb2>
 800c4dc:	9a01      	ldr	r2, [sp, #4]
 800c4de:	f845 c002 	str.w	ip, [r5, r2]
 800c4e2:	9a03      	ldr	r2, [sp, #12]
 800c4e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	f1b9 0f00 	cmp.w	r9, #0
 800c4ee:	d020      	beq.n	800c532 <__multiply+0x142>
 800c4f0:	6829      	ldr	r1, [r5, #0]
 800c4f2:	f104 0c14 	add.w	ip, r4, #20
 800c4f6:	46ae      	mov	lr, r5
 800c4f8:	f04f 0a00 	mov.w	sl, #0
 800c4fc:	f8bc b000 	ldrh.w	fp, [ip]
 800c500:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c504:	fb09 220b 	mla	r2, r9, fp, r2
 800c508:	4492      	add	sl, r2
 800c50a:	b289      	uxth	r1, r1
 800c50c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c510:	f84e 1b04 	str.w	r1, [lr], #4
 800c514:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c518:	f8be 1000 	ldrh.w	r1, [lr]
 800c51c:	0c12      	lsrs	r2, r2, #16
 800c51e:	fb09 1102 	mla	r1, r9, r2, r1
 800c522:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c526:	4567      	cmp	r7, ip
 800c528:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c52c:	d8e6      	bhi.n	800c4fc <__multiply+0x10c>
 800c52e:	9a01      	ldr	r2, [sp, #4]
 800c530:	50a9      	str	r1, [r5, r2]
 800c532:	3504      	adds	r5, #4
 800c534:	e79a      	b.n	800c46c <__multiply+0x7c>
 800c536:	3e01      	subs	r6, #1
 800c538:	e79c      	b.n	800c474 <__multiply+0x84>
 800c53a:	bf00      	nop
 800c53c:	0800d65f 	.word	0x0800d65f
 800c540:	0800d670 	.word	0x0800d670

0800c544 <__pow5mult>:
 800c544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c548:	4615      	mov	r5, r2
 800c54a:	f012 0203 	ands.w	r2, r2, #3
 800c54e:	4606      	mov	r6, r0
 800c550:	460f      	mov	r7, r1
 800c552:	d007      	beq.n	800c564 <__pow5mult+0x20>
 800c554:	4c25      	ldr	r4, [pc, #148]	; (800c5ec <__pow5mult+0xa8>)
 800c556:	3a01      	subs	r2, #1
 800c558:	2300      	movs	r3, #0
 800c55a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c55e:	f7ff fe9b 	bl	800c298 <__multadd>
 800c562:	4607      	mov	r7, r0
 800c564:	10ad      	asrs	r5, r5, #2
 800c566:	d03d      	beq.n	800c5e4 <__pow5mult+0xa0>
 800c568:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c56a:	b97c      	cbnz	r4, 800c58c <__pow5mult+0x48>
 800c56c:	2010      	movs	r0, #16
 800c56e:	f7fe f9c9 	bl	800a904 <malloc>
 800c572:	4602      	mov	r2, r0
 800c574:	6270      	str	r0, [r6, #36]	; 0x24
 800c576:	b928      	cbnz	r0, 800c584 <__pow5mult+0x40>
 800c578:	4b1d      	ldr	r3, [pc, #116]	; (800c5f0 <__pow5mult+0xac>)
 800c57a:	481e      	ldr	r0, [pc, #120]	; (800c5f4 <__pow5mult+0xb0>)
 800c57c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c580:	f000 f9c2 	bl	800c908 <__assert_func>
 800c584:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c588:	6004      	str	r4, [r0, #0]
 800c58a:	60c4      	str	r4, [r0, #12]
 800c58c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c590:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c594:	b94c      	cbnz	r4, 800c5aa <__pow5mult+0x66>
 800c596:	f240 2171 	movw	r1, #625	; 0x271
 800c59a:	4630      	mov	r0, r6
 800c59c:	f7ff ff12 	bl	800c3c4 <__i2b>
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	6003      	str	r3, [r0, #0]
 800c5aa:	f04f 0900 	mov.w	r9, #0
 800c5ae:	07eb      	lsls	r3, r5, #31
 800c5b0:	d50a      	bpl.n	800c5c8 <__pow5mult+0x84>
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	4622      	mov	r2, r4
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	f7ff ff1a 	bl	800c3f0 <__multiply>
 800c5bc:	4639      	mov	r1, r7
 800c5be:	4680      	mov	r8, r0
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	f7ff fe47 	bl	800c254 <_Bfree>
 800c5c6:	4647      	mov	r7, r8
 800c5c8:	106d      	asrs	r5, r5, #1
 800c5ca:	d00b      	beq.n	800c5e4 <__pow5mult+0xa0>
 800c5cc:	6820      	ldr	r0, [r4, #0]
 800c5ce:	b938      	cbnz	r0, 800c5e0 <__pow5mult+0x9c>
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	f7ff ff0b 	bl	800c3f0 <__multiply>
 800c5da:	6020      	str	r0, [r4, #0]
 800c5dc:	f8c0 9000 	str.w	r9, [r0]
 800c5e0:	4604      	mov	r4, r0
 800c5e2:	e7e4      	b.n	800c5ae <__pow5mult+0x6a>
 800c5e4:	4638      	mov	r0, r7
 800c5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ea:	bf00      	nop
 800c5ec:	0800d7c0 	.word	0x0800d7c0
 800c5f0:	0800d5ed 	.word	0x0800d5ed
 800c5f4:	0800d670 	.word	0x0800d670

0800c5f8 <__lshift>:
 800c5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	6849      	ldr	r1, [r1, #4]
 800c600:	6923      	ldr	r3, [r4, #16]
 800c602:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c606:	68a3      	ldr	r3, [r4, #8]
 800c608:	4607      	mov	r7, r0
 800c60a:	4691      	mov	r9, r2
 800c60c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c610:	f108 0601 	add.w	r6, r8, #1
 800c614:	42b3      	cmp	r3, r6
 800c616:	db0b      	blt.n	800c630 <__lshift+0x38>
 800c618:	4638      	mov	r0, r7
 800c61a:	f7ff fddb 	bl	800c1d4 <_Balloc>
 800c61e:	4605      	mov	r5, r0
 800c620:	b948      	cbnz	r0, 800c636 <__lshift+0x3e>
 800c622:	4602      	mov	r2, r0
 800c624:	4b2a      	ldr	r3, [pc, #168]	; (800c6d0 <__lshift+0xd8>)
 800c626:	482b      	ldr	r0, [pc, #172]	; (800c6d4 <__lshift+0xdc>)
 800c628:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c62c:	f000 f96c 	bl	800c908 <__assert_func>
 800c630:	3101      	adds	r1, #1
 800c632:	005b      	lsls	r3, r3, #1
 800c634:	e7ee      	b.n	800c614 <__lshift+0x1c>
 800c636:	2300      	movs	r3, #0
 800c638:	f100 0114 	add.w	r1, r0, #20
 800c63c:	f100 0210 	add.w	r2, r0, #16
 800c640:	4618      	mov	r0, r3
 800c642:	4553      	cmp	r3, sl
 800c644:	db37      	blt.n	800c6b6 <__lshift+0xbe>
 800c646:	6920      	ldr	r0, [r4, #16]
 800c648:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c64c:	f104 0314 	add.w	r3, r4, #20
 800c650:	f019 091f 	ands.w	r9, r9, #31
 800c654:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c658:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c65c:	d02f      	beq.n	800c6be <__lshift+0xc6>
 800c65e:	f1c9 0e20 	rsb	lr, r9, #32
 800c662:	468a      	mov	sl, r1
 800c664:	f04f 0c00 	mov.w	ip, #0
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	fa02 f209 	lsl.w	r2, r2, r9
 800c66e:	ea42 020c 	orr.w	r2, r2, ip
 800c672:	f84a 2b04 	str.w	r2, [sl], #4
 800c676:	f853 2b04 	ldr.w	r2, [r3], #4
 800c67a:	4298      	cmp	r0, r3
 800c67c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c680:	d8f2      	bhi.n	800c668 <__lshift+0x70>
 800c682:	1b03      	subs	r3, r0, r4
 800c684:	3b15      	subs	r3, #21
 800c686:	f023 0303 	bic.w	r3, r3, #3
 800c68a:	3304      	adds	r3, #4
 800c68c:	f104 0215 	add.w	r2, r4, #21
 800c690:	4290      	cmp	r0, r2
 800c692:	bf38      	it	cc
 800c694:	2304      	movcc	r3, #4
 800c696:	f841 c003 	str.w	ip, [r1, r3]
 800c69a:	f1bc 0f00 	cmp.w	ip, #0
 800c69e:	d001      	beq.n	800c6a4 <__lshift+0xac>
 800c6a0:	f108 0602 	add.w	r6, r8, #2
 800c6a4:	3e01      	subs	r6, #1
 800c6a6:	4638      	mov	r0, r7
 800c6a8:	612e      	str	r6, [r5, #16]
 800c6aa:	4621      	mov	r1, r4
 800c6ac:	f7ff fdd2 	bl	800c254 <_Bfree>
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	e7c1      	b.n	800c642 <__lshift+0x4a>
 800c6be:	3904      	subs	r1, #4
 800c6c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6c8:	4298      	cmp	r0, r3
 800c6ca:	d8f9      	bhi.n	800c6c0 <__lshift+0xc8>
 800c6cc:	e7ea      	b.n	800c6a4 <__lshift+0xac>
 800c6ce:	bf00      	nop
 800c6d0:	0800d65f 	.word	0x0800d65f
 800c6d4:	0800d670 	.word	0x0800d670

0800c6d8 <__mcmp>:
 800c6d8:	b530      	push	{r4, r5, lr}
 800c6da:	6902      	ldr	r2, [r0, #16]
 800c6dc:	690c      	ldr	r4, [r1, #16]
 800c6de:	1b12      	subs	r2, r2, r4
 800c6e0:	d10e      	bne.n	800c700 <__mcmp+0x28>
 800c6e2:	f100 0314 	add.w	r3, r0, #20
 800c6e6:	3114      	adds	r1, #20
 800c6e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c6ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c6f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c6f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c6f8:	42a5      	cmp	r5, r4
 800c6fa:	d003      	beq.n	800c704 <__mcmp+0x2c>
 800c6fc:	d305      	bcc.n	800c70a <__mcmp+0x32>
 800c6fe:	2201      	movs	r2, #1
 800c700:	4610      	mov	r0, r2
 800c702:	bd30      	pop	{r4, r5, pc}
 800c704:	4283      	cmp	r3, r0
 800c706:	d3f3      	bcc.n	800c6f0 <__mcmp+0x18>
 800c708:	e7fa      	b.n	800c700 <__mcmp+0x28>
 800c70a:	f04f 32ff 	mov.w	r2, #4294967295
 800c70e:	e7f7      	b.n	800c700 <__mcmp+0x28>

0800c710 <__mdiff>:
 800c710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c714:	460c      	mov	r4, r1
 800c716:	4606      	mov	r6, r0
 800c718:	4611      	mov	r1, r2
 800c71a:	4620      	mov	r0, r4
 800c71c:	4690      	mov	r8, r2
 800c71e:	f7ff ffdb 	bl	800c6d8 <__mcmp>
 800c722:	1e05      	subs	r5, r0, #0
 800c724:	d110      	bne.n	800c748 <__mdiff+0x38>
 800c726:	4629      	mov	r1, r5
 800c728:	4630      	mov	r0, r6
 800c72a:	f7ff fd53 	bl	800c1d4 <_Balloc>
 800c72e:	b930      	cbnz	r0, 800c73e <__mdiff+0x2e>
 800c730:	4b3a      	ldr	r3, [pc, #232]	; (800c81c <__mdiff+0x10c>)
 800c732:	4602      	mov	r2, r0
 800c734:	f240 2132 	movw	r1, #562	; 0x232
 800c738:	4839      	ldr	r0, [pc, #228]	; (800c820 <__mdiff+0x110>)
 800c73a:	f000 f8e5 	bl	800c908 <__assert_func>
 800c73e:	2301      	movs	r3, #1
 800c740:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c748:	bfa4      	itt	ge
 800c74a:	4643      	movge	r3, r8
 800c74c:	46a0      	movge	r8, r4
 800c74e:	4630      	mov	r0, r6
 800c750:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c754:	bfa6      	itte	ge
 800c756:	461c      	movge	r4, r3
 800c758:	2500      	movge	r5, #0
 800c75a:	2501      	movlt	r5, #1
 800c75c:	f7ff fd3a 	bl	800c1d4 <_Balloc>
 800c760:	b920      	cbnz	r0, 800c76c <__mdiff+0x5c>
 800c762:	4b2e      	ldr	r3, [pc, #184]	; (800c81c <__mdiff+0x10c>)
 800c764:	4602      	mov	r2, r0
 800c766:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c76a:	e7e5      	b.n	800c738 <__mdiff+0x28>
 800c76c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c770:	6926      	ldr	r6, [r4, #16]
 800c772:	60c5      	str	r5, [r0, #12]
 800c774:	f104 0914 	add.w	r9, r4, #20
 800c778:	f108 0514 	add.w	r5, r8, #20
 800c77c:	f100 0e14 	add.w	lr, r0, #20
 800c780:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c784:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c788:	f108 0210 	add.w	r2, r8, #16
 800c78c:	46f2      	mov	sl, lr
 800c78e:	2100      	movs	r1, #0
 800c790:	f859 3b04 	ldr.w	r3, [r9], #4
 800c794:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c798:	fa1f f883 	uxth.w	r8, r3
 800c79c:	fa11 f18b 	uxtah	r1, r1, fp
 800c7a0:	0c1b      	lsrs	r3, r3, #16
 800c7a2:	eba1 0808 	sub.w	r8, r1, r8
 800c7a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c7aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c7ae:	fa1f f888 	uxth.w	r8, r8
 800c7b2:	1419      	asrs	r1, r3, #16
 800c7b4:	454e      	cmp	r6, r9
 800c7b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c7ba:	f84a 3b04 	str.w	r3, [sl], #4
 800c7be:	d8e7      	bhi.n	800c790 <__mdiff+0x80>
 800c7c0:	1b33      	subs	r3, r6, r4
 800c7c2:	3b15      	subs	r3, #21
 800c7c4:	f023 0303 	bic.w	r3, r3, #3
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	3415      	adds	r4, #21
 800c7cc:	42a6      	cmp	r6, r4
 800c7ce:	bf38      	it	cc
 800c7d0:	2304      	movcc	r3, #4
 800c7d2:	441d      	add	r5, r3
 800c7d4:	4473      	add	r3, lr
 800c7d6:	469e      	mov	lr, r3
 800c7d8:	462e      	mov	r6, r5
 800c7da:	4566      	cmp	r6, ip
 800c7dc:	d30e      	bcc.n	800c7fc <__mdiff+0xec>
 800c7de:	f10c 0203 	add.w	r2, ip, #3
 800c7e2:	1b52      	subs	r2, r2, r5
 800c7e4:	f022 0203 	bic.w	r2, r2, #3
 800c7e8:	3d03      	subs	r5, #3
 800c7ea:	45ac      	cmp	ip, r5
 800c7ec:	bf38      	it	cc
 800c7ee:	2200      	movcc	r2, #0
 800c7f0:	441a      	add	r2, r3
 800c7f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c7f6:	b17b      	cbz	r3, 800c818 <__mdiff+0x108>
 800c7f8:	6107      	str	r7, [r0, #16]
 800c7fa:	e7a3      	b.n	800c744 <__mdiff+0x34>
 800c7fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800c800:	fa11 f288 	uxtah	r2, r1, r8
 800c804:	1414      	asrs	r4, r2, #16
 800c806:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c80a:	b292      	uxth	r2, r2
 800c80c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c810:	f84e 2b04 	str.w	r2, [lr], #4
 800c814:	1421      	asrs	r1, r4, #16
 800c816:	e7e0      	b.n	800c7da <__mdiff+0xca>
 800c818:	3f01      	subs	r7, #1
 800c81a:	e7ea      	b.n	800c7f2 <__mdiff+0xe2>
 800c81c:	0800d65f 	.word	0x0800d65f
 800c820:	0800d670 	.word	0x0800d670

0800c824 <__d2b>:
 800c824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c828:	4689      	mov	r9, r1
 800c82a:	2101      	movs	r1, #1
 800c82c:	ec57 6b10 	vmov	r6, r7, d0
 800c830:	4690      	mov	r8, r2
 800c832:	f7ff fccf 	bl	800c1d4 <_Balloc>
 800c836:	4604      	mov	r4, r0
 800c838:	b930      	cbnz	r0, 800c848 <__d2b+0x24>
 800c83a:	4602      	mov	r2, r0
 800c83c:	4b25      	ldr	r3, [pc, #148]	; (800c8d4 <__d2b+0xb0>)
 800c83e:	4826      	ldr	r0, [pc, #152]	; (800c8d8 <__d2b+0xb4>)
 800c840:	f240 310a 	movw	r1, #778	; 0x30a
 800c844:	f000 f860 	bl	800c908 <__assert_func>
 800c848:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c84c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c850:	bb35      	cbnz	r5, 800c8a0 <__d2b+0x7c>
 800c852:	2e00      	cmp	r6, #0
 800c854:	9301      	str	r3, [sp, #4]
 800c856:	d028      	beq.n	800c8aa <__d2b+0x86>
 800c858:	4668      	mov	r0, sp
 800c85a:	9600      	str	r6, [sp, #0]
 800c85c:	f7ff fd82 	bl	800c364 <__lo0bits>
 800c860:	9900      	ldr	r1, [sp, #0]
 800c862:	b300      	cbz	r0, 800c8a6 <__d2b+0x82>
 800c864:	9a01      	ldr	r2, [sp, #4]
 800c866:	f1c0 0320 	rsb	r3, r0, #32
 800c86a:	fa02 f303 	lsl.w	r3, r2, r3
 800c86e:	430b      	orrs	r3, r1
 800c870:	40c2      	lsrs	r2, r0
 800c872:	6163      	str	r3, [r4, #20]
 800c874:	9201      	str	r2, [sp, #4]
 800c876:	9b01      	ldr	r3, [sp, #4]
 800c878:	61a3      	str	r3, [r4, #24]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	bf14      	ite	ne
 800c87e:	2202      	movne	r2, #2
 800c880:	2201      	moveq	r2, #1
 800c882:	6122      	str	r2, [r4, #16]
 800c884:	b1d5      	cbz	r5, 800c8bc <__d2b+0x98>
 800c886:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c88a:	4405      	add	r5, r0
 800c88c:	f8c9 5000 	str.w	r5, [r9]
 800c890:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c894:	f8c8 0000 	str.w	r0, [r8]
 800c898:	4620      	mov	r0, r4
 800c89a:	b003      	add	sp, #12
 800c89c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8a4:	e7d5      	b.n	800c852 <__d2b+0x2e>
 800c8a6:	6161      	str	r1, [r4, #20]
 800c8a8:	e7e5      	b.n	800c876 <__d2b+0x52>
 800c8aa:	a801      	add	r0, sp, #4
 800c8ac:	f7ff fd5a 	bl	800c364 <__lo0bits>
 800c8b0:	9b01      	ldr	r3, [sp, #4]
 800c8b2:	6163      	str	r3, [r4, #20]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	6122      	str	r2, [r4, #16]
 800c8b8:	3020      	adds	r0, #32
 800c8ba:	e7e3      	b.n	800c884 <__d2b+0x60>
 800c8bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c8c4:	f8c9 0000 	str.w	r0, [r9]
 800c8c8:	6918      	ldr	r0, [r3, #16]
 800c8ca:	f7ff fd2b 	bl	800c324 <__hi0bits>
 800c8ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8d2:	e7df      	b.n	800c894 <__d2b+0x70>
 800c8d4:	0800d65f 	.word	0x0800d65f
 800c8d8:	0800d670 	.word	0x0800d670

0800c8dc <_calloc_r>:
 800c8dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8de:	fba1 2402 	umull	r2, r4, r1, r2
 800c8e2:	b94c      	cbnz	r4, 800c8f8 <_calloc_r+0x1c>
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	9201      	str	r2, [sp, #4]
 800c8e8:	f7fe f8b8 	bl	800aa5c <_malloc_r>
 800c8ec:	9a01      	ldr	r2, [sp, #4]
 800c8ee:	4605      	mov	r5, r0
 800c8f0:	b930      	cbnz	r0, 800c900 <_calloc_r+0x24>
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	b003      	add	sp, #12
 800c8f6:	bd30      	pop	{r4, r5, pc}
 800c8f8:	220c      	movs	r2, #12
 800c8fa:	6002      	str	r2, [r0, #0]
 800c8fc:	2500      	movs	r5, #0
 800c8fe:	e7f8      	b.n	800c8f2 <_calloc_r+0x16>
 800c900:	4621      	mov	r1, r4
 800c902:	f7fe f837 	bl	800a974 <memset>
 800c906:	e7f4      	b.n	800c8f2 <_calloc_r+0x16>

0800c908 <__assert_func>:
 800c908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c90a:	4614      	mov	r4, r2
 800c90c:	461a      	mov	r2, r3
 800c90e:	4b09      	ldr	r3, [pc, #36]	; (800c934 <__assert_func+0x2c>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4605      	mov	r5, r0
 800c914:	68d8      	ldr	r0, [r3, #12]
 800c916:	b14c      	cbz	r4, 800c92c <__assert_func+0x24>
 800c918:	4b07      	ldr	r3, [pc, #28]	; (800c938 <__assert_func+0x30>)
 800c91a:	9100      	str	r1, [sp, #0]
 800c91c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c920:	4906      	ldr	r1, [pc, #24]	; (800c93c <__assert_func+0x34>)
 800c922:	462b      	mov	r3, r5
 800c924:	f000 f80e 	bl	800c944 <fiprintf>
 800c928:	f7fd ffbb 	bl	800a8a2 <abort>
 800c92c:	4b04      	ldr	r3, [pc, #16]	; (800c940 <__assert_func+0x38>)
 800c92e:	461c      	mov	r4, r3
 800c930:	e7f3      	b.n	800c91a <__assert_func+0x12>
 800c932:	bf00      	nop
 800c934:	20000010 	.word	0x20000010
 800c938:	0800d7cc 	.word	0x0800d7cc
 800c93c:	0800d7d9 	.word	0x0800d7d9
 800c940:	0800d807 	.word	0x0800d807

0800c944 <fiprintf>:
 800c944:	b40e      	push	{r1, r2, r3}
 800c946:	b503      	push	{r0, r1, lr}
 800c948:	4601      	mov	r1, r0
 800c94a:	ab03      	add	r3, sp, #12
 800c94c:	4805      	ldr	r0, [pc, #20]	; (800c964 <fiprintf+0x20>)
 800c94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c952:	6800      	ldr	r0, [r0, #0]
 800c954:	9301      	str	r3, [sp, #4]
 800c956:	f000 f845 	bl	800c9e4 <_vfiprintf_r>
 800c95a:	b002      	add	sp, #8
 800c95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c960:	b003      	add	sp, #12
 800c962:	4770      	bx	lr
 800c964:	20000010 	.word	0x20000010

0800c968 <__retarget_lock_init_recursive>:
 800c968:	4770      	bx	lr

0800c96a <__retarget_lock_acquire_recursive>:
 800c96a:	4770      	bx	lr

0800c96c <__retarget_lock_release_recursive>:
 800c96c:	4770      	bx	lr

0800c96e <__ascii_mbtowc>:
 800c96e:	b082      	sub	sp, #8
 800c970:	b901      	cbnz	r1, 800c974 <__ascii_mbtowc+0x6>
 800c972:	a901      	add	r1, sp, #4
 800c974:	b142      	cbz	r2, 800c988 <__ascii_mbtowc+0x1a>
 800c976:	b14b      	cbz	r3, 800c98c <__ascii_mbtowc+0x1e>
 800c978:	7813      	ldrb	r3, [r2, #0]
 800c97a:	600b      	str	r3, [r1, #0]
 800c97c:	7812      	ldrb	r2, [r2, #0]
 800c97e:	1e10      	subs	r0, r2, #0
 800c980:	bf18      	it	ne
 800c982:	2001      	movne	r0, #1
 800c984:	b002      	add	sp, #8
 800c986:	4770      	bx	lr
 800c988:	4610      	mov	r0, r2
 800c98a:	e7fb      	b.n	800c984 <__ascii_mbtowc+0x16>
 800c98c:	f06f 0001 	mvn.w	r0, #1
 800c990:	e7f8      	b.n	800c984 <__ascii_mbtowc+0x16>

0800c992 <__sfputc_r>:
 800c992:	6893      	ldr	r3, [r2, #8]
 800c994:	3b01      	subs	r3, #1
 800c996:	2b00      	cmp	r3, #0
 800c998:	b410      	push	{r4}
 800c99a:	6093      	str	r3, [r2, #8]
 800c99c:	da08      	bge.n	800c9b0 <__sfputc_r+0x1e>
 800c99e:	6994      	ldr	r4, [r2, #24]
 800c9a0:	42a3      	cmp	r3, r4
 800c9a2:	db01      	blt.n	800c9a8 <__sfputc_r+0x16>
 800c9a4:	290a      	cmp	r1, #10
 800c9a6:	d103      	bne.n	800c9b0 <__sfputc_r+0x1e>
 800c9a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9ac:	f000 b94a 	b.w	800cc44 <__swbuf_r>
 800c9b0:	6813      	ldr	r3, [r2, #0]
 800c9b2:	1c58      	adds	r0, r3, #1
 800c9b4:	6010      	str	r0, [r2, #0]
 800c9b6:	7019      	strb	r1, [r3, #0]
 800c9b8:	4608      	mov	r0, r1
 800c9ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <__sfputs_r>:
 800c9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c2:	4606      	mov	r6, r0
 800c9c4:	460f      	mov	r7, r1
 800c9c6:	4614      	mov	r4, r2
 800c9c8:	18d5      	adds	r5, r2, r3
 800c9ca:	42ac      	cmp	r4, r5
 800c9cc:	d101      	bne.n	800c9d2 <__sfputs_r+0x12>
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	e007      	b.n	800c9e2 <__sfputs_r+0x22>
 800c9d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d6:	463a      	mov	r2, r7
 800c9d8:	4630      	mov	r0, r6
 800c9da:	f7ff ffda 	bl	800c992 <__sfputc_r>
 800c9de:	1c43      	adds	r3, r0, #1
 800c9e0:	d1f3      	bne.n	800c9ca <__sfputs_r+0xa>
 800c9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9e4 <_vfiprintf_r>:
 800c9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9e8:	460d      	mov	r5, r1
 800c9ea:	b09d      	sub	sp, #116	; 0x74
 800c9ec:	4614      	mov	r4, r2
 800c9ee:	4698      	mov	r8, r3
 800c9f0:	4606      	mov	r6, r0
 800c9f2:	b118      	cbz	r0, 800c9fc <_vfiprintf_r+0x18>
 800c9f4:	6983      	ldr	r3, [r0, #24]
 800c9f6:	b90b      	cbnz	r3, 800c9fc <_vfiprintf_r+0x18>
 800c9f8:	f000 fb0c 	bl	800d014 <__sinit>
 800c9fc:	4b89      	ldr	r3, [pc, #548]	; (800cc24 <_vfiprintf_r+0x240>)
 800c9fe:	429d      	cmp	r5, r3
 800ca00:	d11b      	bne.n	800ca3a <_vfiprintf_r+0x56>
 800ca02:	6875      	ldr	r5, [r6, #4]
 800ca04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca06:	07d9      	lsls	r1, r3, #31
 800ca08:	d405      	bmi.n	800ca16 <_vfiprintf_r+0x32>
 800ca0a:	89ab      	ldrh	r3, [r5, #12]
 800ca0c:	059a      	lsls	r2, r3, #22
 800ca0e:	d402      	bmi.n	800ca16 <_vfiprintf_r+0x32>
 800ca10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca12:	f7ff ffaa 	bl	800c96a <__retarget_lock_acquire_recursive>
 800ca16:	89ab      	ldrh	r3, [r5, #12]
 800ca18:	071b      	lsls	r3, r3, #28
 800ca1a:	d501      	bpl.n	800ca20 <_vfiprintf_r+0x3c>
 800ca1c:	692b      	ldr	r3, [r5, #16]
 800ca1e:	b9eb      	cbnz	r3, 800ca5c <_vfiprintf_r+0x78>
 800ca20:	4629      	mov	r1, r5
 800ca22:	4630      	mov	r0, r6
 800ca24:	f000 f96e 	bl	800cd04 <__swsetup_r>
 800ca28:	b1c0      	cbz	r0, 800ca5c <_vfiprintf_r+0x78>
 800ca2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca2c:	07dc      	lsls	r4, r3, #31
 800ca2e:	d50e      	bpl.n	800ca4e <_vfiprintf_r+0x6a>
 800ca30:	f04f 30ff 	mov.w	r0, #4294967295
 800ca34:	b01d      	add	sp, #116	; 0x74
 800ca36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca3a:	4b7b      	ldr	r3, [pc, #492]	; (800cc28 <_vfiprintf_r+0x244>)
 800ca3c:	429d      	cmp	r5, r3
 800ca3e:	d101      	bne.n	800ca44 <_vfiprintf_r+0x60>
 800ca40:	68b5      	ldr	r5, [r6, #8]
 800ca42:	e7df      	b.n	800ca04 <_vfiprintf_r+0x20>
 800ca44:	4b79      	ldr	r3, [pc, #484]	; (800cc2c <_vfiprintf_r+0x248>)
 800ca46:	429d      	cmp	r5, r3
 800ca48:	bf08      	it	eq
 800ca4a:	68f5      	ldreq	r5, [r6, #12]
 800ca4c:	e7da      	b.n	800ca04 <_vfiprintf_r+0x20>
 800ca4e:	89ab      	ldrh	r3, [r5, #12]
 800ca50:	0598      	lsls	r0, r3, #22
 800ca52:	d4ed      	bmi.n	800ca30 <_vfiprintf_r+0x4c>
 800ca54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca56:	f7ff ff89 	bl	800c96c <__retarget_lock_release_recursive>
 800ca5a:	e7e9      	b.n	800ca30 <_vfiprintf_r+0x4c>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca60:	2320      	movs	r3, #32
 800ca62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca66:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca6a:	2330      	movs	r3, #48	; 0x30
 800ca6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc30 <_vfiprintf_r+0x24c>
 800ca70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca74:	f04f 0901 	mov.w	r9, #1
 800ca78:	4623      	mov	r3, r4
 800ca7a:	469a      	mov	sl, r3
 800ca7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca80:	b10a      	cbz	r2, 800ca86 <_vfiprintf_r+0xa2>
 800ca82:	2a25      	cmp	r2, #37	; 0x25
 800ca84:	d1f9      	bne.n	800ca7a <_vfiprintf_r+0x96>
 800ca86:	ebba 0b04 	subs.w	fp, sl, r4
 800ca8a:	d00b      	beq.n	800caa4 <_vfiprintf_r+0xc0>
 800ca8c:	465b      	mov	r3, fp
 800ca8e:	4622      	mov	r2, r4
 800ca90:	4629      	mov	r1, r5
 800ca92:	4630      	mov	r0, r6
 800ca94:	f7ff ff94 	bl	800c9c0 <__sfputs_r>
 800ca98:	3001      	adds	r0, #1
 800ca9a:	f000 80aa 	beq.w	800cbf2 <_vfiprintf_r+0x20e>
 800ca9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caa0:	445a      	add	r2, fp
 800caa2:	9209      	str	r2, [sp, #36]	; 0x24
 800caa4:	f89a 3000 	ldrb.w	r3, [sl]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f000 80a2 	beq.w	800cbf2 <_vfiprintf_r+0x20e>
 800caae:	2300      	movs	r3, #0
 800cab0:	f04f 32ff 	mov.w	r2, #4294967295
 800cab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cab8:	f10a 0a01 	add.w	sl, sl, #1
 800cabc:	9304      	str	r3, [sp, #16]
 800cabe:	9307      	str	r3, [sp, #28]
 800cac0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cac4:	931a      	str	r3, [sp, #104]	; 0x68
 800cac6:	4654      	mov	r4, sl
 800cac8:	2205      	movs	r2, #5
 800caca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cace:	4858      	ldr	r0, [pc, #352]	; (800cc30 <_vfiprintf_r+0x24c>)
 800cad0:	f7f3 fb8e 	bl	80001f0 <memchr>
 800cad4:	9a04      	ldr	r2, [sp, #16]
 800cad6:	b9d8      	cbnz	r0, 800cb10 <_vfiprintf_r+0x12c>
 800cad8:	06d1      	lsls	r1, r2, #27
 800cada:	bf44      	itt	mi
 800cadc:	2320      	movmi	r3, #32
 800cade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cae2:	0713      	lsls	r3, r2, #28
 800cae4:	bf44      	itt	mi
 800cae6:	232b      	movmi	r3, #43	; 0x2b
 800cae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caec:	f89a 3000 	ldrb.w	r3, [sl]
 800caf0:	2b2a      	cmp	r3, #42	; 0x2a
 800caf2:	d015      	beq.n	800cb20 <_vfiprintf_r+0x13c>
 800caf4:	9a07      	ldr	r2, [sp, #28]
 800caf6:	4654      	mov	r4, sl
 800caf8:	2000      	movs	r0, #0
 800cafa:	f04f 0c0a 	mov.w	ip, #10
 800cafe:	4621      	mov	r1, r4
 800cb00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb04:	3b30      	subs	r3, #48	; 0x30
 800cb06:	2b09      	cmp	r3, #9
 800cb08:	d94e      	bls.n	800cba8 <_vfiprintf_r+0x1c4>
 800cb0a:	b1b0      	cbz	r0, 800cb3a <_vfiprintf_r+0x156>
 800cb0c:	9207      	str	r2, [sp, #28]
 800cb0e:	e014      	b.n	800cb3a <_vfiprintf_r+0x156>
 800cb10:	eba0 0308 	sub.w	r3, r0, r8
 800cb14:	fa09 f303 	lsl.w	r3, r9, r3
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	9304      	str	r3, [sp, #16]
 800cb1c:	46a2      	mov	sl, r4
 800cb1e:	e7d2      	b.n	800cac6 <_vfiprintf_r+0xe2>
 800cb20:	9b03      	ldr	r3, [sp, #12]
 800cb22:	1d19      	adds	r1, r3, #4
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	9103      	str	r1, [sp, #12]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	bfbb      	ittet	lt
 800cb2c:	425b      	neglt	r3, r3
 800cb2e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb32:	9307      	strge	r3, [sp, #28]
 800cb34:	9307      	strlt	r3, [sp, #28]
 800cb36:	bfb8      	it	lt
 800cb38:	9204      	strlt	r2, [sp, #16]
 800cb3a:	7823      	ldrb	r3, [r4, #0]
 800cb3c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb3e:	d10c      	bne.n	800cb5a <_vfiprintf_r+0x176>
 800cb40:	7863      	ldrb	r3, [r4, #1]
 800cb42:	2b2a      	cmp	r3, #42	; 0x2a
 800cb44:	d135      	bne.n	800cbb2 <_vfiprintf_r+0x1ce>
 800cb46:	9b03      	ldr	r3, [sp, #12]
 800cb48:	1d1a      	adds	r2, r3, #4
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	9203      	str	r2, [sp, #12]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	bfb8      	it	lt
 800cb52:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb56:	3402      	adds	r4, #2
 800cb58:	9305      	str	r3, [sp, #20]
 800cb5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc40 <_vfiprintf_r+0x25c>
 800cb5e:	7821      	ldrb	r1, [r4, #0]
 800cb60:	2203      	movs	r2, #3
 800cb62:	4650      	mov	r0, sl
 800cb64:	f7f3 fb44 	bl	80001f0 <memchr>
 800cb68:	b140      	cbz	r0, 800cb7c <_vfiprintf_r+0x198>
 800cb6a:	2340      	movs	r3, #64	; 0x40
 800cb6c:	eba0 000a 	sub.w	r0, r0, sl
 800cb70:	fa03 f000 	lsl.w	r0, r3, r0
 800cb74:	9b04      	ldr	r3, [sp, #16]
 800cb76:	4303      	orrs	r3, r0
 800cb78:	3401      	adds	r4, #1
 800cb7a:	9304      	str	r3, [sp, #16]
 800cb7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb80:	482c      	ldr	r0, [pc, #176]	; (800cc34 <_vfiprintf_r+0x250>)
 800cb82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb86:	2206      	movs	r2, #6
 800cb88:	f7f3 fb32 	bl	80001f0 <memchr>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	d03f      	beq.n	800cc10 <_vfiprintf_r+0x22c>
 800cb90:	4b29      	ldr	r3, [pc, #164]	; (800cc38 <_vfiprintf_r+0x254>)
 800cb92:	bb1b      	cbnz	r3, 800cbdc <_vfiprintf_r+0x1f8>
 800cb94:	9b03      	ldr	r3, [sp, #12]
 800cb96:	3307      	adds	r3, #7
 800cb98:	f023 0307 	bic.w	r3, r3, #7
 800cb9c:	3308      	adds	r3, #8
 800cb9e:	9303      	str	r3, [sp, #12]
 800cba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cba2:	443b      	add	r3, r7
 800cba4:	9309      	str	r3, [sp, #36]	; 0x24
 800cba6:	e767      	b.n	800ca78 <_vfiprintf_r+0x94>
 800cba8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbac:	460c      	mov	r4, r1
 800cbae:	2001      	movs	r0, #1
 800cbb0:	e7a5      	b.n	800cafe <_vfiprintf_r+0x11a>
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	3401      	adds	r4, #1
 800cbb6:	9305      	str	r3, [sp, #20]
 800cbb8:	4619      	mov	r1, r3
 800cbba:	f04f 0c0a 	mov.w	ip, #10
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbc4:	3a30      	subs	r2, #48	; 0x30
 800cbc6:	2a09      	cmp	r2, #9
 800cbc8:	d903      	bls.n	800cbd2 <_vfiprintf_r+0x1ee>
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d0c5      	beq.n	800cb5a <_vfiprintf_r+0x176>
 800cbce:	9105      	str	r1, [sp, #20]
 800cbd0:	e7c3      	b.n	800cb5a <_vfiprintf_r+0x176>
 800cbd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	2301      	movs	r3, #1
 800cbda:	e7f0      	b.n	800cbbe <_vfiprintf_r+0x1da>
 800cbdc:	ab03      	add	r3, sp, #12
 800cbde:	9300      	str	r3, [sp, #0]
 800cbe0:	462a      	mov	r2, r5
 800cbe2:	4b16      	ldr	r3, [pc, #88]	; (800cc3c <_vfiprintf_r+0x258>)
 800cbe4:	a904      	add	r1, sp, #16
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	f7fe f84c 	bl	800ac84 <_printf_float>
 800cbec:	4607      	mov	r7, r0
 800cbee:	1c78      	adds	r0, r7, #1
 800cbf0:	d1d6      	bne.n	800cba0 <_vfiprintf_r+0x1bc>
 800cbf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbf4:	07d9      	lsls	r1, r3, #31
 800cbf6:	d405      	bmi.n	800cc04 <_vfiprintf_r+0x220>
 800cbf8:	89ab      	ldrh	r3, [r5, #12]
 800cbfa:	059a      	lsls	r2, r3, #22
 800cbfc:	d402      	bmi.n	800cc04 <_vfiprintf_r+0x220>
 800cbfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc00:	f7ff feb4 	bl	800c96c <__retarget_lock_release_recursive>
 800cc04:	89ab      	ldrh	r3, [r5, #12]
 800cc06:	065b      	lsls	r3, r3, #25
 800cc08:	f53f af12 	bmi.w	800ca30 <_vfiprintf_r+0x4c>
 800cc0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc0e:	e711      	b.n	800ca34 <_vfiprintf_r+0x50>
 800cc10:	ab03      	add	r3, sp, #12
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	462a      	mov	r2, r5
 800cc16:	4b09      	ldr	r3, [pc, #36]	; (800cc3c <_vfiprintf_r+0x258>)
 800cc18:	a904      	add	r1, sp, #16
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	f7fe fad6 	bl	800b1cc <_printf_i>
 800cc20:	e7e4      	b.n	800cbec <_vfiprintf_r+0x208>
 800cc22:	bf00      	nop
 800cc24:	0800d944 	.word	0x0800d944
 800cc28:	0800d964 	.word	0x0800d964
 800cc2c:	0800d924 	.word	0x0800d924
 800cc30:	0800d812 	.word	0x0800d812
 800cc34:	0800d81c 	.word	0x0800d81c
 800cc38:	0800ac85 	.word	0x0800ac85
 800cc3c:	0800c9c1 	.word	0x0800c9c1
 800cc40:	0800d818 	.word	0x0800d818

0800cc44 <__swbuf_r>:
 800cc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc46:	460e      	mov	r6, r1
 800cc48:	4614      	mov	r4, r2
 800cc4a:	4605      	mov	r5, r0
 800cc4c:	b118      	cbz	r0, 800cc56 <__swbuf_r+0x12>
 800cc4e:	6983      	ldr	r3, [r0, #24]
 800cc50:	b90b      	cbnz	r3, 800cc56 <__swbuf_r+0x12>
 800cc52:	f000 f9df 	bl	800d014 <__sinit>
 800cc56:	4b21      	ldr	r3, [pc, #132]	; (800ccdc <__swbuf_r+0x98>)
 800cc58:	429c      	cmp	r4, r3
 800cc5a:	d12b      	bne.n	800ccb4 <__swbuf_r+0x70>
 800cc5c:	686c      	ldr	r4, [r5, #4]
 800cc5e:	69a3      	ldr	r3, [r4, #24]
 800cc60:	60a3      	str	r3, [r4, #8]
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	071a      	lsls	r2, r3, #28
 800cc66:	d52f      	bpl.n	800ccc8 <__swbuf_r+0x84>
 800cc68:	6923      	ldr	r3, [r4, #16]
 800cc6a:	b36b      	cbz	r3, 800ccc8 <__swbuf_r+0x84>
 800cc6c:	6923      	ldr	r3, [r4, #16]
 800cc6e:	6820      	ldr	r0, [r4, #0]
 800cc70:	1ac0      	subs	r0, r0, r3
 800cc72:	6963      	ldr	r3, [r4, #20]
 800cc74:	b2f6      	uxtb	r6, r6
 800cc76:	4283      	cmp	r3, r0
 800cc78:	4637      	mov	r7, r6
 800cc7a:	dc04      	bgt.n	800cc86 <__swbuf_r+0x42>
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	4628      	mov	r0, r5
 800cc80:	f000 f934 	bl	800ceec <_fflush_r>
 800cc84:	bb30      	cbnz	r0, 800ccd4 <__swbuf_r+0x90>
 800cc86:	68a3      	ldr	r3, [r4, #8]
 800cc88:	3b01      	subs	r3, #1
 800cc8a:	60a3      	str	r3, [r4, #8]
 800cc8c:	6823      	ldr	r3, [r4, #0]
 800cc8e:	1c5a      	adds	r2, r3, #1
 800cc90:	6022      	str	r2, [r4, #0]
 800cc92:	701e      	strb	r6, [r3, #0]
 800cc94:	6963      	ldr	r3, [r4, #20]
 800cc96:	3001      	adds	r0, #1
 800cc98:	4283      	cmp	r3, r0
 800cc9a:	d004      	beq.n	800cca6 <__swbuf_r+0x62>
 800cc9c:	89a3      	ldrh	r3, [r4, #12]
 800cc9e:	07db      	lsls	r3, r3, #31
 800cca0:	d506      	bpl.n	800ccb0 <__swbuf_r+0x6c>
 800cca2:	2e0a      	cmp	r6, #10
 800cca4:	d104      	bne.n	800ccb0 <__swbuf_r+0x6c>
 800cca6:	4621      	mov	r1, r4
 800cca8:	4628      	mov	r0, r5
 800ccaa:	f000 f91f 	bl	800ceec <_fflush_r>
 800ccae:	b988      	cbnz	r0, 800ccd4 <__swbuf_r+0x90>
 800ccb0:	4638      	mov	r0, r7
 800ccb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccb4:	4b0a      	ldr	r3, [pc, #40]	; (800cce0 <__swbuf_r+0x9c>)
 800ccb6:	429c      	cmp	r4, r3
 800ccb8:	d101      	bne.n	800ccbe <__swbuf_r+0x7a>
 800ccba:	68ac      	ldr	r4, [r5, #8]
 800ccbc:	e7cf      	b.n	800cc5e <__swbuf_r+0x1a>
 800ccbe:	4b09      	ldr	r3, [pc, #36]	; (800cce4 <__swbuf_r+0xa0>)
 800ccc0:	429c      	cmp	r4, r3
 800ccc2:	bf08      	it	eq
 800ccc4:	68ec      	ldreq	r4, [r5, #12]
 800ccc6:	e7ca      	b.n	800cc5e <__swbuf_r+0x1a>
 800ccc8:	4621      	mov	r1, r4
 800ccca:	4628      	mov	r0, r5
 800cccc:	f000 f81a 	bl	800cd04 <__swsetup_r>
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	d0cb      	beq.n	800cc6c <__swbuf_r+0x28>
 800ccd4:	f04f 37ff 	mov.w	r7, #4294967295
 800ccd8:	e7ea      	b.n	800ccb0 <__swbuf_r+0x6c>
 800ccda:	bf00      	nop
 800ccdc:	0800d944 	.word	0x0800d944
 800cce0:	0800d964 	.word	0x0800d964
 800cce4:	0800d924 	.word	0x0800d924

0800cce8 <__ascii_wctomb>:
 800cce8:	b149      	cbz	r1, 800ccfe <__ascii_wctomb+0x16>
 800ccea:	2aff      	cmp	r2, #255	; 0xff
 800ccec:	bf85      	ittet	hi
 800ccee:	238a      	movhi	r3, #138	; 0x8a
 800ccf0:	6003      	strhi	r3, [r0, #0]
 800ccf2:	700a      	strbls	r2, [r1, #0]
 800ccf4:	f04f 30ff 	movhi.w	r0, #4294967295
 800ccf8:	bf98      	it	ls
 800ccfa:	2001      	movls	r0, #1
 800ccfc:	4770      	bx	lr
 800ccfe:	4608      	mov	r0, r1
 800cd00:	4770      	bx	lr
	...

0800cd04 <__swsetup_r>:
 800cd04:	4b32      	ldr	r3, [pc, #200]	; (800cdd0 <__swsetup_r+0xcc>)
 800cd06:	b570      	push	{r4, r5, r6, lr}
 800cd08:	681d      	ldr	r5, [r3, #0]
 800cd0a:	4606      	mov	r6, r0
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	b125      	cbz	r5, 800cd1a <__swsetup_r+0x16>
 800cd10:	69ab      	ldr	r3, [r5, #24]
 800cd12:	b913      	cbnz	r3, 800cd1a <__swsetup_r+0x16>
 800cd14:	4628      	mov	r0, r5
 800cd16:	f000 f97d 	bl	800d014 <__sinit>
 800cd1a:	4b2e      	ldr	r3, [pc, #184]	; (800cdd4 <__swsetup_r+0xd0>)
 800cd1c:	429c      	cmp	r4, r3
 800cd1e:	d10f      	bne.n	800cd40 <__swsetup_r+0x3c>
 800cd20:	686c      	ldr	r4, [r5, #4]
 800cd22:	89a3      	ldrh	r3, [r4, #12]
 800cd24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd28:	0719      	lsls	r1, r3, #28
 800cd2a:	d42c      	bmi.n	800cd86 <__swsetup_r+0x82>
 800cd2c:	06dd      	lsls	r5, r3, #27
 800cd2e:	d411      	bmi.n	800cd54 <__swsetup_r+0x50>
 800cd30:	2309      	movs	r3, #9
 800cd32:	6033      	str	r3, [r6, #0]
 800cd34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd38:	81a3      	strh	r3, [r4, #12]
 800cd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd3e:	e03e      	b.n	800cdbe <__swsetup_r+0xba>
 800cd40:	4b25      	ldr	r3, [pc, #148]	; (800cdd8 <__swsetup_r+0xd4>)
 800cd42:	429c      	cmp	r4, r3
 800cd44:	d101      	bne.n	800cd4a <__swsetup_r+0x46>
 800cd46:	68ac      	ldr	r4, [r5, #8]
 800cd48:	e7eb      	b.n	800cd22 <__swsetup_r+0x1e>
 800cd4a:	4b24      	ldr	r3, [pc, #144]	; (800cddc <__swsetup_r+0xd8>)
 800cd4c:	429c      	cmp	r4, r3
 800cd4e:	bf08      	it	eq
 800cd50:	68ec      	ldreq	r4, [r5, #12]
 800cd52:	e7e6      	b.n	800cd22 <__swsetup_r+0x1e>
 800cd54:	0758      	lsls	r0, r3, #29
 800cd56:	d512      	bpl.n	800cd7e <__swsetup_r+0x7a>
 800cd58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd5a:	b141      	cbz	r1, 800cd6e <__swsetup_r+0x6a>
 800cd5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd60:	4299      	cmp	r1, r3
 800cd62:	d002      	beq.n	800cd6a <__swsetup_r+0x66>
 800cd64:	4630      	mov	r0, r6
 800cd66:	f7fd fe0d 	bl	800a984 <_free_r>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	6363      	str	r3, [r4, #52]	; 0x34
 800cd6e:	89a3      	ldrh	r3, [r4, #12]
 800cd70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd74:	81a3      	strh	r3, [r4, #12]
 800cd76:	2300      	movs	r3, #0
 800cd78:	6063      	str	r3, [r4, #4]
 800cd7a:	6923      	ldr	r3, [r4, #16]
 800cd7c:	6023      	str	r3, [r4, #0]
 800cd7e:	89a3      	ldrh	r3, [r4, #12]
 800cd80:	f043 0308 	orr.w	r3, r3, #8
 800cd84:	81a3      	strh	r3, [r4, #12]
 800cd86:	6923      	ldr	r3, [r4, #16]
 800cd88:	b94b      	cbnz	r3, 800cd9e <__swsetup_r+0x9a>
 800cd8a:	89a3      	ldrh	r3, [r4, #12]
 800cd8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd94:	d003      	beq.n	800cd9e <__swsetup_r+0x9a>
 800cd96:	4621      	mov	r1, r4
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f000 f9fd 	bl	800d198 <__smakebuf_r>
 800cd9e:	89a0      	ldrh	r0, [r4, #12]
 800cda0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cda4:	f010 0301 	ands.w	r3, r0, #1
 800cda8:	d00a      	beq.n	800cdc0 <__swsetup_r+0xbc>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	60a3      	str	r3, [r4, #8]
 800cdae:	6963      	ldr	r3, [r4, #20]
 800cdb0:	425b      	negs	r3, r3
 800cdb2:	61a3      	str	r3, [r4, #24]
 800cdb4:	6923      	ldr	r3, [r4, #16]
 800cdb6:	b943      	cbnz	r3, 800cdca <__swsetup_r+0xc6>
 800cdb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdbc:	d1ba      	bne.n	800cd34 <__swsetup_r+0x30>
 800cdbe:	bd70      	pop	{r4, r5, r6, pc}
 800cdc0:	0781      	lsls	r1, r0, #30
 800cdc2:	bf58      	it	pl
 800cdc4:	6963      	ldrpl	r3, [r4, #20]
 800cdc6:	60a3      	str	r3, [r4, #8]
 800cdc8:	e7f4      	b.n	800cdb4 <__swsetup_r+0xb0>
 800cdca:	2000      	movs	r0, #0
 800cdcc:	e7f7      	b.n	800cdbe <__swsetup_r+0xba>
 800cdce:	bf00      	nop
 800cdd0:	20000010 	.word	0x20000010
 800cdd4:	0800d944 	.word	0x0800d944
 800cdd8:	0800d964 	.word	0x0800d964
 800cddc:	0800d924 	.word	0x0800d924

0800cde0 <__sflush_r>:
 800cde0:	898a      	ldrh	r2, [r1, #12]
 800cde2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde6:	4605      	mov	r5, r0
 800cde8:	0710      	lsls	r0, r2, #28
 800cdea:	460c      	mov	r4, r1
 800cdec:	d458      	bmi.n	800cea0 <__sflush_r+0xc0>
 800cdee:	684b      	ldr	r3, [r1, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	dc05      	bgt.n	800ce00 <__sflush_r+0x20>
 800cdf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	dc02      	bgt.n	800ce00 <__sflush_r+0x20>
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce02:	2e00      	cmp	r6, #0
 800ce04:	d0f9      	beq.n	800cdfa <__sflush_r+0x1a>
 800ce06:	2300      	movs	r3, #0
 800ce08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce0c:	682f      	ldr	r7, [r5, #0]
 800ce0e:	602b      	str	r3, [r5, #0]
 800ce10:	d032      	beq.n	800ce78 <__sflush_r+0x98>
 800ce12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce14:	89a3      	ldrh	r3, [r4, #12]
 800ce16:	075a      	lsls	r2, r3, #29
 800ce18:	d505      	bpl.n	800ce26 <__sflush_r+0x46>
 800ce1a:	6863      	ldr	r3, [r4, #4]
 800ce1c:	1ac0      	subs	r0, r0, r3
 800ce1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce20:	b10b      	cbz	r3, 800ce26 <__sflush_r+0x46>
 800ce22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce24:	1ac0      	subs	r0, r0, r3
 800ce26:	2300      	movs	r3, #0
 800ce28:	4602      	mov	r2, r0
 800ce2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce2c:	6a21      	ldr	r1, [r4, #32]
 800ce2e:	4628      	mov	r0, r5
 800ce30:	47b0      	blx	r6
 800ce32:	1c43      	adds	r3, r0, #1
 800ce34:	89a3      	ldrh	r3, [r4, #12]
 800ce36:	d106      	bne.n	800ce46 <__sflush_r+0x66>
 800ce38:	6829      	ldr	r1, [r5, #0]
 800ce3a:	291d      	cmp	r1, #29
 800ce3c:	d82c      	bhi.n	800ce98 <__sflush_r+0xb8>
 800ce3e:	4a2a      	ldr	r2, [pc, #168]	; (800cee8 <__sflush_r+0x108>)
 800ce40:	40ca      	lsrs	r2, r1
 800ce42:	07d6      	lsls	r6, r2, #31
 800ce44:	d528      	bpl.n	800ce98 <__sflush_r+0xb8>
 800ce46:	2200      	movs	r2, #0
 800ce48:	6062      	str	r2, [r4, #4]
 800ce4a:	04d9      	lsls	r1, r3, #19
 800ce4c:	6922      	ldr	r2, [r4, #16]
 800ce4e:	6022      	str	r2, [r4, #0]
 800ce50:	d504      	bpl.n	800ce5c <__sflush_r+0x7c>
 800ce52:	1c42      	adds	r2, r0, #1
 800ce54:	d101      	bne.n	800ce5a <__sflush_r+0x7a>
 800ce56:	682b      	ldr	r3, [r5, #0]
 800ce58:	b903      	cbnz	r3, 800ce5c <__sflush_r+0x7c>
 800ce5a:	6560      	str	r0, [r4, #84]	; 0x54
 800ce5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce5e:	602f      	str	r7, [r5, #0]
 800ce60:	2900      	cmp	r1, #0
 800ce62:	d0ca      	beq.n	800cdfa <__sflush_r+0x1a>
 800ce64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce68:	4299      	cmp	r1, r3
 800ce6a:	d002      	beq.n	800ce72 <__sflush_r+0x92>
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	f7fd fd89 	bl	800a984 <_free_r>
 800ce72:	2000      	movs	r0, #0
 800ce74:	6360      	str	r0, [r4, #52]	; 0x34
 800ce76:	e7c1      	b.n	800cdfc <__sflush_r+0x1c>
 800ce78:	6a21      	ldr	r1, [r4, #32]
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	47b0      	blx	r6
 800ce80:	1c41      	adds	r1, r0, #1
 800ce82:	d1c7      	bne.n	800ce14 <__sflush_r+0x34>
 800ce84:	682b      	ldr	r3, [r5, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d0c4      	beq.n	800ce14 <__sflush_r+0x34>
 800ce8a:	2b1d      	cmp	r3, #29
 800ce8c:	d001      	beq.n	800ce92 <__sflush_r+0xb2>
 800ce8e:	2b16      	cmp	r3, #22
 800ce90:	d101      	bne.n	800ce96 <__sflush_r+0xb6>
 800ce92:	602f      	str	r7, [r5, #0]
 800ce94:	e7b1      	b.n	800cdfa <__sflush_r+0x1a>
 800ce96:	89a3      	ldrh	r3, [r4, #12]
 800ce98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce9c:	81a3      	strh	r3, [r4, #12]
 800ce9e:	e7ad      	b.n	800cdfc <__sflush_r+0x1c>
 800cea0:	690f      	ldr	r7, [r1, #16]
 800cea2:	2f00      	cmp	r7, #0
 800cea4:	d0a9      	beq.n	800cdfa <__sflush_r+0x1a>
 800cea6:	0793      	lsls	r3, r2, #30
 800cea8:	680e      	ldr	r6, [r1, #0]
 800ceaa:	bf08      	it	eq
 800ceac:	694b      	ldreq	r3, [r1, #20]
 800ceae:	600f      	str	r7, [r1, #0]
 800ceb0:	bf18      	it	ne
 800ceb2:	2300      	movne	r3, #0
 800ceb4:	eba6 0807 	sub.w	r8, r6, r7
 800ceb8:	608b      	str	r3, [r1, #8]
 800ceba:	f1b8 0f00 	cmp.w	r8, #0
 800cebe:	dd9c      	ble.n	800cdfa <__sflush_r+0x1a>
 800cec0:	6a21      	ldr	r1, [r4, #32]
 800cec2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cec4:	4643      	mov	r3, r8
 800cec6:	463a      	mov	r2, r7
 800cec8:	4628      	mov	r0, r5
 800ceca:	47b0      	blx	r6
 800cecc:	2800      	cmp	r0, #0
 800cece:	dc06      	bgt.n	800cede <__sflush_r+0xfe>
 800ced0:	89a3      	ldrh	r3, [r4, #12]
 800ced2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ced6:	81a3      	strh	r3, [r4, #12]
 800ced8:	f04f 30ff 	mov.w	r0, #4294967295
 800cedc:	e78e      	b.n	800cdfc <__sflush_r+0x1c>
 800cede:	4407      	add	r7, r0
 800cee0:	eba8 0800 	sub.w	r8, r8, r0
 800cee4:	e7e9      	b.n	800ceba <__sflush_r+0xda>
 800cee6:	bf00      	nop
 800cee8:	20400001 	.word	0x20400001

0800ceec <_fflush_r>:
 800ceec:	b538      	push	{r3, r4, r5, lr}
 800ceee:	690b      	ldr	r3, [r1, #16]
 800cef0:	4605      	mov	r5, r0
 800cef2:	460c      	mov	r4, r1
 800cef4:	b913      	cbnz	r3, 800cefc <_fflush_r+0x10>
 800cef6:	2500      	movs	r5, #0
 800cef8:	4628      	mov	r0, r5
 800cefa:	bd38      	pop	{r3, r4, r5, pc}
 800cefc:	b118      	cbz	r0, 800cf06 <_fflush_r+0x1a>
 800cefe:	6983      	ldr	r3, [r0, #24]
 800cf00:	b90b      	cbnz	r3, 800cf06 <_fflush_r+0x1a>
 800cf02:	f000 f887 	bl	800d014 <__sinit>
 800cf06:	4b14      	ldr	r3, [pc, #80]	; (800cf58 <_fflush_r+0x6c>)
 800cf08:	429c      	cmp	r4, r3
 800cf0a:	d11b      	bne.n	800cf44 <_fflush_r+0x58>
 800cf0c:	686c      	ldr	r4, [r5, #4]
 800cf0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d0ef      	beq.n	800cef6 <_fflush_r+0xa>
 800cf16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf18:	07d0      	lsls	r0, r2, #31
 800cf1a:	d404      	bmi.n	800cf26 <_fflush_r+0x3a>
 800cf1c:	0599      	lsls	r1, r3, #22
 800cf1e:	d402      	bmi.n	800cf26 <_fflush_r+0x3a>
 800cf20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf22:	f7ff fd22 	bl	800c96a <__retarget_lock_acquire_recursive>
 800cf26:	4628      	mov	r0, r5
 800cf28:	4621      	mov	r1, r4
 800cf2a:	f7ff ff59 	bl	800cde0 <__sflush_r>
 800cf2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf30:	07da      	lsls	r2, r3, #31
 800cf32:	4605      	mov	r5, r0
 800cf34:	d4e0      	bmi.n	800cef8 <_fflush_r+0xc>
 800cf36:	89a3      	ldrh	r3, [r4, #12]
 800cf38:	059b      	lsls	r3, r3, #22
 800cf3a:	d4dd      	bmi.n	800cef8 <_fflush_r+0xc>
 800cf3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf3e:	f7ff fd15 	bl	800c96c <__retarget_lock_release_recursive>
 800cf42:	e7d9      	b.n	800cef8 <_fflush_r+0xc>
 800cf44:	4b05      	ldr	r3, [pc, #20]	; (800cf5c <_fflush_r+0x70>)
 800cf46:	429c      	cmp	r4, r3
 800cf48:	d101      	bne.n	800cf4e <_fflush_r+0x62>
 800cf4a:	68ac      	ldr	r4, [r5, #8]
 800cf4c:	e7df      	b.n	800cf0e <_fflush_r+0x22>
 800cf4e:	4b04      	ldr	r3, [pc, #16]	; (800cf60 <_fflush_r+0x74>)
 800cf50:	429c      	cmp	r4, r3
 800cf52:	bf08      	it	eq
 800cf54:	68ec      	ldreq	r4, [r5, #12]
 800cf56:	e7da      	b.n	800cf0e <_fflush_r+0x22>
 800cf58:	0800d944 	.word	0x0800d944
 800cf5c:	0800d964 	.word	0x0800d964
 800cf60:	0800d924 	.word	0x0800d924

0800cf64 <std>:
 800cf64:	2300      	movs	r3, #0
 800cf66:	b510      	push	{r4, lr}
 800cf68:	4604      	mov	r4, r0
 800cf6a:	e9c0 3300 	strd	r3, r3, [r0]
 800cf6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf72:	6083      	str	r3, [r0, #8]
 800cf74:	8181      	strh	r1, [r0, #12]
 800cf76:	6643      	str	r3, [r0, #100]	; 0x64
 800cf78:	81c2      	strh	r2, [r0, #14]
 800cf7a:	6183      	str	r3, [r0, #24]
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	2208      	movs	r2, #8
 800cf80:	305c      	adds	r0, #92	; 0x5c
 800cf82:	f7fd fcf7 	bl	800a974 <memset>
 800cf86:	4b05      	ldr	r3, [pc, #20]	; (800cf9c <std+0x38>)
 800cf88:	6263      	str	r3, [r4, #36]	; 0x24
 800cf8a:	4b05      	ldr	r3, [pc, #20]	; (800cfa0 <std+0x3c>)
 800cf8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf8e:	4b05      	ldr	r3, [pc, #20]	; (800cfa4 <std+0x40>)
 800cf90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf92:	4b05      	ldr	r3, [pc, #20]	; (800cfa8 <std+0x44>)
 800cf94:	6224      	str	r4, [r4, #32]
 800cf96:	6323      	str	r3, [r4, #48]	; 0x30
 800cf98:	bd10      	pop	{r4, pc}
 800cf9a:	bf00      	nop
 800cf9c:	0800d219 	.word	0x0800d219
 800cfa0:	0800d23b 	.word	0x0800d23b
 800cfa4:	0800d273 	.word	0x0800d273
 800cfa8:	0800d297 	.word	0x0800d297

0800cfac <_cleanup_r>:
 800cfac:	4901      	ldr	r1, [pc, #4]	; (800cfb4 <_cleanup_r+0x8>)
 800cfae:	f000 b8af 	b.w	800d110 <_fwalk_reent>
 800cfb2:	bf00      	nop
 800cfb4:	0800ceed 	.word	0x0800ceed

0800cfb8 <__sfmoreglue>:
 800cfb8:	b570      	push	{r4, r5, r6, lr}
 800cfba:	2268      	movs	r2, #104	; 0x68
 800cfbc:	1e4d      	subs	r5, r1, #1
 800cfbe:	4355      	muls	r5, r2
 800cfc0:	460e      	mov	r6, r1
 800cfc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cfc6:	f7fd fd49 	bl	800aa5c <_malloc_r>
 800cfca:	4604      	mov	r4, r0
 800cfcc:	b140      	cbz	r0, 800cfe0 <__sfmoreglue+0x28>
 800cfce:	2100      	movs	r1, #0
 800cfd0:	e9c0 1600 	strd	r1, r6, [r0]
 800cfd4:	300c      	adds	r0, #12
 800cfd6:	60a0      	str	r0, [r4, #8]
 800cfd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cfdc:	f7fd fcca 	bl	800a974 <memset>
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	bd70      	pop	{r4, r5, r6, pc}

0800cfe4 <__sfp_lock_acquire>:
 800cfe4:	4801      	ldr	r0, [pc, #4]	; (800cfec <__sfp_lock_acquire+0x8>)
 800cfe6:	f7ff bcc0 	b.w	800c96a <__retarget_lock_acquire_recursive>
 800cfea:	bf00      	nop
 800cfec:	20000a91 	.word	0x20000a91

0800cff0 <__sfp_lock_release>:
 800cff0:	4801      	ldr	r0, [pc, #4]	; (800cff8 <__sfp_lock_release+0x8>)
 800cff2:	f7ff bcbb 	b.w	800c96c <__retarget_lock_release_recursive>
 800cff6:	bf00      	nop
 800cff8:	20000a91 	.word	0x20000a91

0800cffc <__sinit_lock_acquire>:
 800cffc:	4801      	ldr	r0, [pc, #4]	; (800d004 <__sinit_lock_acquire+0x8>)
 800cffe:	f7ff bcb4 	b.w	800c96a <__retarget_lock_acquire_recursive>
 800d002:	bf00      	nop
 800d004:	20000a92 	.word	0x20000a92

0800d008 <__sinit_lock_release>:
 800d008:	4801      	ldr	r0, [pc, #4]	; (800d010 <__sinit_lock_release+0x8>)
 800d00a:	f7ff bcaf 	b.w	800c96c <__retarget_lock_release_recursive>
 800d00e:	bf00      	nop
 800d010:	20000a92 	.word	0x20000a92

0800d014 <__sinit>:
 800d014:	b510      	push	{r4, lr}
 800d016:	4604      	mov	r4, r0
 800d018:	f7ff fff0 	bl	800cffc <__sinit_lock_acquire>
 800d01c:	69a3      	ldr	r3, [r4, #24]
 800d01e:	b11b      	cbz	r3, 800d028 <__sinit+0x14>
 800d020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d024:	f7ff bff0 	b.w	800d008 <__sinit_lock_release>
 800d028:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d02c:	6523      	str	r3, [r4, #80]	; 0x50
 800d02e:	4b13      	ldr	r3, [pc, #76]	; (800d07c <__sinit+0x68>)
 800d030:	4a13      	ldr	r2, [pc, #76]	; (800d080 <__sinit+0x6c>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	62a2      	str	r2, [r4, #40]	; 0x28
 800d036:	42a3      	cmp	r3, r4
 800d038:	bf04      	itt	eq
 800d03a:	2301      	moveq	r3, #1
 800d03c:	61a3      	streq	r3, [r4, #24]
 800d03e:	4620      	mov	r0, r4
 800d040:	f000 f820 	bl	800d084 <__sfp>
 800d044:	6060      	str	r0, [r4, #4]
 800d046:	4620      	mov	r0, r4
 800d048:	f000 f81c 	bl	800d084 <__sfp>
 800d04c:	60a0      	str	r0, [r4, #8]
 800d04e:	4620      	mov	r0, r4
 800d050:	f000 f818 	bl	800d084 <__sfp>
 800d054:	2200      	movs	r2, #0
 800d056:	60e0      	str	r0, [r4, #12]
 800d058:	2104      	movs	r1, #4
 800d05a:	6860      	ldr	r0, [r4, #4]
 800d05c:	f7ff ff82 	bl	800cf64 <std>
 800d060:	68a0      	ldr	r0, [r4, #8]
 800d062:	2201      	movs	r2, #1
 800d064:	2109      	movs	r1, #9
 800d066:	f7ff ff7d 	bl	800cf64 <std>
 800d06a:	68e0      	ldr	r0, [r4, #12]
 800d06c:	2202      	movs	r2, #2
 800d06e:	2112      	movs	r1, #18
 800d070:	f7ff ff78 	bl	800cf64 <std>
 800d074:	2301      	movs	r3, #1
 800d076:	61a3      	str	r3, [r4, #24]
 800d078:	e7d2      	b.n	800d020 <__sinit+0xc>
 800d07a:	bf00      	nop
 800d07c:	0800d5a8 	.word	0x0800d5a8
 800d080:	0800cfad 	.word	0x0800cfad

0800d084 <__sfp>:
 800d084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d086:	4607      	mov	r7, r0
 800d088:	f7ff ffac 	bl	800cfe4 <__sfp_lock_acquire>
 800d08c:	4b1e      	ldr	r3, [pc, #120]	; (800d108 <__sfp+0x84>)
 800d08e:	681e      	ldr	r6, [r3, #0]
 800d090:	69b3      	ldr	r3, [r6, #24]
 800d092:	b913      	cbnz	r3, 800d09a <__sfp+0x16>
 800d094:	4630      	mov	r0, r6
 800d096:	f7ff ffbd 	bl	800d014 <__sinit>
 800d09a:	3648      	adds	r6, #72	; 0x48
 800d09c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d0a0:	3b01      	subs	r3, #1
 800d0a2:	d503      	bpl.n	800d0ac <__sfp+0x28>
 800d0a4:	6833      	ldr	r3, [r6, #0]
 800d0a6:	b30b      	cbz	r3, 800d0ec <__sfp+0x68>
 800d0a8:	6836      	ldr	r6, [r6, #0]
 800d0aa:	e7f7      	b.n	800d09c <__sfp+0x18>
 800d0ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d0b0:	b9d5      	cbnz	r5, 800d0e8 <__sfp+0x64>
 800d0b2:	4b16      	ldr	r3, [pc, #88]	; (800d10c <__sfp+0x88>)
 800d0b4:	60e3      	str	r3, [r4, #12]
 800d0b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0ba:	6665      	str	r5, [r4, #100]	; 0x64
 800d0bc:	f7ff fc54 	bl	800c968 <__retarget_lock_init_recursive>
 800d0c0:	f7ff ff96 	bl	800cff0 <__sfp_lock_release>
 800d0c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d0c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d0cc:	6025      	str	r5, [r4, #0]
 800d0ce:	61a5      	str	r5, [r4, #24]
 800d0d0:	2208      	movs	r2, #8
 800d0d2:	4629      	mov	r1, r5
 800d0d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d0d8:	f7fd fc4c 	bl	800a974 <memset>
 800d0dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d0e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0e8:	3468      	adds	r4, #104	; 0x68
 800d0ea:	e7d9      	b.n	800d0a0 <__sfp+0x1c>
 800d0ec:	2104      	movs	r1, #4
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	f7ff ff62 	bl	800cfb8 <__sfmoreglue>
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	6030      	str	r0, [r6, #0]
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d1d5      	bne.n	800d0a8 <__sfp+0x24>
 800d0fc:	f7ff ff78 	bl	800cff0 <__sfp_lock_release>
 800d100:	230c      	movs	r3, #12
 800d102:	603b      	str	r3, [r7, #0]
 800d104:	e7ee      	b.n	800d0e4 <__sfp+0x60>
 800d106:	bf00      	nop
 800d108:	0800d5a8 	.word	0x0800d5a8
 800d10c:	ffff0001 	.word	0xffff0001

0800d110 <_fwalk_reent>:
 800d110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d114:	4606      	mov	r6, r0
 800d116:	4688      	mov	r8, r1
 800d118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d11c:	2700      	movs	r7, #0
 800d11e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d122:	f1b9 0901 	subs.w	r9, r9, #1
 800d126:	d505      	bpl.n	800d134 <_fwalk_reent+0x24>
 800d128:	6824      	ldr	r4, [r4, #0]
 800d12a:	2c00      	cmp	r4, #0
 800d12c:	d1f7      	bne.n	800d11e <_fwalk_reent+0xe>
 800d12e:	4638      	mov	r0, r7
 800d130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d134:	89ab      	ldrh	r3, [r5, #12]
 800d136:	2b01      	cmp	r3, #1
 800d138:	d907      	bls.n	800d14a <_fwalk_reent+0x3a>
 800d13a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d13e:	3301      	adds	r3, #1
 800d140:	d003      	beq.n	800d14a <_fwalk_reent+0x3a>
 800d142:	4629      	mov	r1, r5
 800d144:	4630      	mov	r0, r6
 800d146:	47c0      	blx	r8
 800d148:	4307      	orrs	r7, r0
 800d14a:	3568      	adds	r5, #104	; 0x68
 800d14c:	e7e9      	b.n	800d122 <_fwalk_reent+0x12>

0800d14e <__swhatbuf_r>:
 800d14e:	b570      	push	{r4, r5, r6, lr}
 800d150:	460e      	mov	r6, r1
 800d152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d156:	2900      	cmp	r1, #0
 800d158:	b096      	sub	sp, #88	; 0x58
 800d15a:	4614      	mov	r4, r2
 800d15c:	461d      	mov	r5, r3
 800d15e:	da08      	bge.n	800d172 <__swhatbuf_r+0x24>
 800d160:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d164:	2200      	movs	r2, #0
 800d166:	602a      	str	r2, [r5, #0]
 800d168:	061a      	lsls	r2, r3, #24
 800d16a:	d410      	bmi.n	800d18e <__swhatbuf_r+0x40>
 800d16c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d170:	e00e      	b.n	800d190 <__swhatbuf_r+0x42>
 800d172:	466a      	mov	r2, sp
 800d174:	f000 f8b6 	bl	800d2e4 <_fstat_r>
 800d178:	2800      	cmp	r0, #0
 800d17a:	dbf1      	blt.n	800d160 <__swhatbuf_r+0x12>
 800d17c:	9a01      	ldr	r2, [sp, #4]
 800d17e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d182:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d186:	425a      	negs	r2, r3
 800d188:	415a      	adcs	r2, r3
 800d18a:	602a      	str	r2, [r5, #0]
 800d18c:	e7ee      	b.n	800d16c <__swhatbuf_r+0x1e>
 800d18e:	2340      	movs	r3, #64	; 0x40
 800d190:	2000      	movs	r0, #0
 800d192:	6023      	str	r3, [r4, #0]
 800d194:	b016      	add	sp, #88	; 0x58
 800d196:	bd70      	pop	{r4, r5, r6, pc}

0800d198 <__smakebuf_r>:
 800d198:	898b      	ldrh	r3, [r1, #12]
 800d19a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d19c:	079d      	lsls	r5, r3, #30
 800d19e:	4606      	mov	r6, r0
 800d1a0:	460c      	mov	r4, r1
 800d1a2:	d507      	bpl.n	800d1b4 <__smakebuf_r+0x1c>
 800d1a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1a8:	6023      	str	r3, [r4, #0]
 800d1aa:	6123      	str	r3, [r4, #16]
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	6163      	str	r3, [r4, #20]
 800d1b0:	b002      	add	sp, #8
 800d1b2:	bd70      	pop	{r4, r5, r6, pc}
 800d1b4:	ab01      	add	r3, sp, #4
 800d1b6:	466a      	mov	r2, sp
 800d1b8:	f7ff ffc9 	bl	800d14e <__swhatbuf_r>
 800d1bc:	9900      	ldr	r1, [sp, #0]
 800d1be:	4605      	mov	r5, r0
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	f7fd fc4b 	bl	800aa5c <_malloc_r>
 800d1c6:	b948      	cbnz	r0, 800d1dc <__smakebuf_r+0x44>
 800d1c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1cc:	059a      	lsls	r2, r3, #22
 800d1ce:	d4ef      	bmi.n	800d1b0 <__smakebuf_r+0x18>
 800d1d0:	f023 0303 	bic.w	r3, r3, #3
 800d1d4:	f043 0302 	orr.w	r3, r3, #2
 800d1d8:	81a3      	strh	r3, [r4, #12]
 800d1da:	e7e3      	b.n	800d1a4 <__smakebuf_r+0xc>
 800d1dc:	4b0d      	ldr	r3, [pc, #52]	; (800d214 <__smakebuf_r+0x7c>)
 800d1de:	62b3      	str	r3, [r6, #40]	; 0x28
 800d1e0:	89a3      	ldrh	r3, [r4, #12]
 800d1e2:	6020      	str	r0, [r4, #0]
 800d1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1e8:	81a3      	strh	r3, [r4, #12]
 800d1ea:	9b00      	ldr	r3, [sp, #0]
 800d1ec:	6163      	str	r3, [r4, #20]
 800d1ee:	9b01      	ldr	r3, [sp, #4]
 800d1f0:	6120      	str	r0, [r4, #16]
 800d1f2:	b15b      	cbz	r3, 800d20c <__smakebuf_r+0x74>
 800d1f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	f000 f885 	bl	800d308 <_isatty_r>
 800d1fe:	b128      	cbz	r0, 800d20c <__smakebuf_r+0x74>
 800d200:	89a3      	ldrh	r3, [r4, #12]
 800d202:	f023 0303 	bic.w	r3, r3, #3
 800d206:	f043 0301 	orr.w	r3, r3, #1
 800d20a:	81a3      	strh	r3, [r4, #12]
 800d20c:	89a0      	ldrh	r0, [r4, #12]
 800d20e:	4305      	orrs	r5, r0
 800d210:	81a5      	strh	r5, [r4, #12]
 800d212:	e7cd      	b.n	800d1b0 <__smakebuf_r+0x18>
 800d214:	0800cfad 	.word	0x0800cfad

0800d218 <__sread>:
 800d218:	b510      	push	{r4, lr}
 800d21a:	460c      	mov	r4, r1
 800d21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d220:	f000 f894 	bl	800d34c <_read_r>
 800d224:	2800      	cmp	r0, #0
 800d226:	bfab      	itete	ge
 800d228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d22a:	89a3      	ldrhlt	r3, [r4, #12]
 800d22c:	181b      	addge	r3, r3, r0
 800d22e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d232:	bfac      	ite	ge
 800d234:	6563      	strge	r3, [r4, #84]	; 0x54
 800d236:	81a3      	strhlt	r3, [r4, #12]
 800d238:	bd10      	pop	{r4, pc}

0800d23a <__swrite>:
 800d23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d23e:	461f      	mov	r7, r3
 800d240:	898b      	ldrh	r3, [r1, #12]
 800d242:	05db      	lsls	r3, r3, #23
 800d244:	4605      	mov	r5, r0
 800d246:	460c      	mov	r4, r1
 800d248:	4616      	mov	r6, r2
 800d24a:	d505      	bpl.n	800d258 <__swrite+0x1e>
 800d24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d250:	2302      	movs	r3, #2
 800d252:	2200      	movs	r2, #0
 800d254:	f000 f868 	bl	800d328 <_lseek_r>
 800d258:	89a3      	ldrh	r3, [r4, #12]
 800d25a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d25e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d262:	81a3      	strh	r3, [r4, #12]
 800d264:	4632      	mov	r2, r6
 800d266:	463b      	mov	r3, r7
 800d268:	4628      	mov	r0, r5
 800d26a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d26e:	f000 b817 	b.w	800d2a0 <_write_r>

0800d272 <__sseek>:
 800d272:	b510      	push	{r4, lr}
 800d274:	460c      	mov	r4, r1
 800d276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d27a:	f000 f855 	bl	800d328 <_lseek_r>
 800d27e:	1c43      	adds	r3, r0, #1
 800d280:	89a3      	ldrh	r3, [r4, #12]
 800d282:	bf15      	itete	ne
 800d284:	6560      	strne	r0, [r4, #84]	; 0x54
 800d286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d28a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d28e:	81a3      	strheq	r3, [r4, #12]
 800d290:	bf18      	it	ne
 800d292:	81a3      	strhne	r3, [r4, #12]
 800d294:	bd10      	pop	{r4, pc}

0800d296 <__sclose>:
 800d296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d29a:	f000 b813 	b.w	800d2c4 <_close_r>
	...

0800d2a0 <_write_r>:
 800d2a0:	b538      	push	{r3, r4, r5, lr}
 800d2a2:	4d07      	ldr	r5, [pc, #28]	; (800d2c0 <_write_r+0x20>)
 800d2a4:	4604      	mov	r4, r0
 800d2a6:	4608      	mov	r0, r1
 800d2a8:	4611      	mov	r1, r2
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	602a      	str	r2, [r5, #0]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	f7f6 fd5b 	bl	8003d6a <_write>
 800d2b4:	1c43      	adds	r3, r0, #1
 800d2b6:	d102      	bne.n	800d2be <_write_r+0x1e>
 800d2b8:	682b      	ldr	r3, [r5, #0]
 800d2ba:	b103      	cbz	r3, 800d2be <_write_r+0x1e>
 800d2bc:	6023      	str	r3, [r4, #0]
 800d2be:	bd38      	pop	{r3, r4, r5, pc}
 800d2c0:	20000a8c 	.word	0x20000a8c

0800d2c4 <_close_r>:
 800d2c4:	b538      	push	{r3, r4, r5, lr}
 800d2c6:	4d06      	ldr	r5, [pc, #24]	; (800d2e0 <_close_r+0x1c>)
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	4608      	mov	r0, r1
 800d2ce:	602b      	str	r3, [r5, #0]
 800d2d0:	f7f6 fd67 	bl	8003da2 <_close>
 800d2d4:	1c43      	adds	r3, r0, #1
 800d2d6:	d102      	bne.n	800d2de <_close_r+0x1a>
 800d2d8:	682b      	ldr	r3, [r5, #0]
 800d2da:	b103      	cbz	r3, 800d2de <_close_r+0x1a>
 800d2dc:	6023      	str	r3, [r4, #0]
 800d2de:	bd38      	pop	{r3, r4, r5, pc}
 800d2e0:	20000a8c 	.word	0x20000a8c

0800d2e4 <_fstat_r>:
 800d2e4:	b538      	push	{r3, r4, r5, lr}
 800d2e6:	4d07      	ldr	r5, [pc, #28]	; (800d304 <_fstat_r+0x20>)
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	4604      	mov	r4, r0
 800d2ec:	4608      	mov	r0, r1
 800d2ee:	4611      	mov	r1, r2
 800d2f0:	602b      	str	r3, [r5, #0]
 800d2f2:	f7f6 fd62 	bl	8003dba <_fstat>
 800d2f6:	1c43      	adds	r3, r0, #1
 800d2f8:	d102      	bne.n	800d300 <_fstat_r+0x1c>
 800d2fa:	682b      	ldr	r3, [r5, #0]
 800d2fc:	b103      	cbz	r3, 800d300 <_fstat_r+0x1c>
 800d2fe:	6023      	str	r3, [r4, #0]
 800d300:	bd38      	pop	{r3, r4, r5, pc}
 800d302:	bf00      	nop
 800d304:	20000a8c 	.word	0x20000a8c

0800d308 <_isatty_r>:
 800d308:	b538      	push	{r3, r4, r5, lr}
 800d30a:	4d06      	ldr	r5, [pc, #24]	; (800d324 <_isatty_r+0x1c>)
 800d30c:	2300      	movs	r3, #0
 800d30e:	4604      	mov	r4, r0
 800d310:	4608      	mov	r0, r1
 800d312:	602b      	str	r3, [r5, #0]
 800d314:	f7f6 fd61 	bl	8003dda <_isatty>
 800d318:	1c43      	adds	r3, r0, #1
 800d31a:	d102      	bne.n	800d322 <_isatty_r+0x1a>
 800d31c:	682b      	ldr	r3, [r5, #0]
 800d31e:	b103      	cbz	r3, 800d322 <_isatty_r+0x1a>
 800d320:	6023      	str	r3, [r4, #0]
 800d322:	bd38      	pop	{r3, r4, r5, pc}
 800d324:	20000a8c 	.word	0x20000a8c

0800d328 <_lseek_r>:
 800d328:	b538      	push	{r3, r4, r5, lr}
 800d32a:	4d07      	ldr	r5, [pc, #28]	; (800d348 <_lseek_r+0x20>)
 800d32c:	4604      	mov	r4, r0
 800d32e:	4608      	mov	r0, r1
 800d330:	4611      	mov	r1, r2
 800d332:	2200      	movs	r2, #0
 800d334:	602a      	str	r2, [r5, #0]
 800d336:	461a      	mov	r2, r3
 800d338:	f7f6 fd5a 	bl	8003df0 <_lseek>
 800d33c:	1c43      	adds	r3, r0, #1
 800d33e:	d102      	bne.n	800d346 <_lseek_r+0x1e>
 800d340:	682b      	ldr	r3, [r5, #0]
 800d342:	b103      	cbz	r3, 800d346 <_lseek_r+0x1e>
 800d344:	6023      	str	r3, [r4, #0]
 800d346:	bd38      	pop	{r3, r4, r5, pc}
 800d348:	20000a8c 	.word	0x20000a8c

0800d34c <_read_r>:
 800d34c:	b538      	push	{r3, r4, r5, lr}
 800d34e:	4d07      	ldr	r5, [pc, #28]	; (800d36c <_read_r+0x20>)
 800d350:	4604      	mov	r4, r0
 800d352:	4608      	mov	r0, r1
 800d354:	4611      	mov	r1, r2
 800d356:	2200      	movs	r2, #0
 800d358:	602a      	str	r2, [r5, #0]
 800d35a:	461a      	mov	r2, r3
 800d35c:	f7f6 fce8 	bl	8003d30 <_read>
 800d360:	1c43      	adds	r3, r0, #1
 800d362:	d102      	bne.n	800d36a <_read_r+0x1e>
 800d364:	682b      	ldr	r3, [r5, #0]
 800d366:	b103      	cbz	r3, 800d36a <_read_r+0x1e>
 800d368:	6023      	str	r3, [r4, #0]
 800d36a:	bd38      	pop	{r3, r4, r5, pc}
 800d36c:	20000a8c 	.word	0x20000a8c

0800d370 <_init>:
 800d370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d372:	bf00      	nop
 800d374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d376:	bc08      	pop	{r3}
 800d378:	469e      	mov	lr, r3
 800d37a:	4770      	bx	lr

0800d37c <_fini>:
 800d37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d37e:	bf00      	nop
 800d380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d382:	bc08      	pop	{r3}
 800d384:	469e      	mov	lr, r3
 800d386:	4770      	bx	lr
