
f4_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000864  0800f360  0800f360  0001f360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbc4  0800fbc4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbc4  0800fbc4  0001fbc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbcc  0800fbcc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fbcc  0800fbcc  0001fbcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800fbd4  0800fbd4  0001fbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800fbdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f04  200001dc  0800fdb8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010e0  0800fdb8  000210e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc23  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea1  00000000  00000000  0003ce2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  0003fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001638  00000000  00000000  000413c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b248  00000000  00000000  00042a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159c6  00000000  00000000  0005dc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2762  00000000  00000000  0007360e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115d70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cc4  00000000  00000000  00115dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f348 	.word	0x0800f348

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800f348 	.word	0x0800f348

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <_ZN7RPLidar3endEv>:

extern UART_HandleTypeDef huart2; // Дескриптор UART1
static bool uart1_is_open = false;

// Закрытие UART1
void RPLidar::end() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    if (isOpen()) {
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f811 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <_ZN7RPLidar3endEv+0x20>
        HAL_UART_DeInit(&huart2); // Деинициализация UART1
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <_ZN7RPLidar3endEv+0x28>)
 8000f72:	f008 fd7e 	bl	8009a72 <HAL_UART_DeInit>
        uart1_is_open = false;    // Отмечаем UART как закрытый
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <_ZN7RPLidar3endEv+0x2c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
    }
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000fc0 	.word	0x20000fc0
 8000f88:	200001f8 	.word	0x200001f8

08000f8c <_ZN7RPLidar6isOpenEv>:

// Проверка состояния UART1 (открыт или закрыт)
bool RPLidar::isOpen() {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
    return uart1_is_open; // Возвращаем текущее состояние UART1
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <_ZN7RPLidar6isOpenEv+0x18>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	200001f8 	.word	0x200001f8

08000fa8 <_ZN7RPLidarC1Ev>:

RPLidar::RPLidar() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

	clearArray(distances);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	330c      	adds	r3, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f9a9 	bl	800130e <_ZN7RPLidar10clearArrayEPf>
	clearArray(minDist);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 f9a2 	bl	800130e <_ZN7RPLidar10clearArrayEPf>
    _currentMeasurement.distance = 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
    _currentMeasurement.angle = 0;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
    _currentMeasurement.quality = 0;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	721a      	strb	r2, [r3, #8]
    _currentMeasurement.startBit = 0;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	725a      	strb	r2, [r3, #9]
}
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_ZN7RPLidarD1Ev>:


RPLidar::~RPLidar()
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
{
    end();
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffaf 	bl	8000f5c <_ZN7RPLidar3endEv>
}
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <_ZN7RPLidar5beginEv>:


// Инициализация UART1 для работы с RPLIDAR
bool RPLidar::begin() {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    // Если UART уже открыт, завершаем его работу
    if (isOpen()) {
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ffbb 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
   // huart2.Init.Mode = UART_MODE_TX_RX;
   // huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
   // huart2.Init.OverSampling = UART_OVERSAMPLING_16;

    // Инициализация UART1
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001016:	480a      	ldr	r0, [pc, #40]	; (8001040 <_ZN7RPLidar5beginEv+0x38>)
 8001018:	f008 fcde 	bl	80099d8 <HAL_UART_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf14      	ite	ne
 8001022:	2301      	movne	r3, #1
 8001024:	2300      	moveq	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <_ZN7RPLidar5beginEv+0x28>
        return false; // Если инициализация не удалась
 800102c:	2300      	movs	r3, #0
 800102e:	e003      	b.n	8001038 <_ZN7RPLidar5beginEv+0x30>
    }

    // Отмечаем UART как открытый
    uart1_is_open = true;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <_ZN7RPLidar5beginEv+0x3c>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
    return true;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000fc0 	.word	0x20000fc0
 8001044:	200001f8 	.word	0x200001f8

08001048 <_ZN7RPLidar12_sendCommandEhPKvj>:

uint32_t RPLidar::_sendCommand(uint8_t cmd, const void *payload, size_t payloadsize) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	460b      	mov	r3, r1
 8001056:	72fb      	strb	r3, [r7, #11]
    rplidar_cmd_packet_t pkt_header;
    uint8_t checksum = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	75fb      	strb	r3, [r7, #23]
    HAL_StatusTypeDef status;

    // Проверяем наличие полезной нагрузки
    if (payloadsize && payload) {
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <_ZN7RPLidar12_sendCommandEhPKvj+0x28>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <_ZN7RPLidar12_sendCommandEhPKvj+0x28>
        cmd |= RPLIDAR_CMDFLAG_HAS_PAYLOAD;
 8001068:	7afb      	ldrb	r3, [r7, #11]
 800106a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800106e:	72fb      	strb	r3, [r7, #11]
    }

    // Формируем заголовок команды
    pkt_header.syncByte = RPLIDAR_CMD_SYNC_BYTE;
 8001070:	23a5      	movs	r3, #165	; 0xa5
 8001072:	763b      	strb	r3, [r7, #24]
    pkt_header.cmd_flag = cmd;
 8001074:	7afb      	ldrb	r3, [r7, #11]
 8001076:	767b      	strb	r3, [r7, #25]

    // Отправляем заголовок (2 байта)
    status = HAL_UART_Transmit(&huart2, (uint8_t *)&pkt_header, sizeof(pkt_header), HAL_MAX_DELAY);
 8001078:	f107 0118 	add.w	r1, r7, #24
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	2203      	movs	r2, #3
 8001082:	4833      	ldr	r0, [pc, #204]	; (8001150 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 8001084:	f008 fd24 	bl	8009ad0 <HAL_UART_Transmit>
 8001088:	4603      	mov	r3, r0
 800108a:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) {
 800108c:	7efb      	ldrb	r3, [r7, #27]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <_ZN7RPLidar12_sendCommandEhPKvj+0x4e>
        return RESULT_OPERATION_FAIL; // Если произошла ошибка при передаче, возвращаем ошибку
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001094:	e057      	b.n	8001146 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
    }

    // Если есть полезная нагрузка
    if (cmd & RPLIDAR_CMDFLAG_HAS_PAYLOAD) {
 8001096:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800109a:	2b00      	cmp	r3, #0
 800109c:	da52      	bge.n	8001144 <_ZN7RPLidar12_sendCommandEhPKvj+0xfc>
        // Инициализируем контрольную сумму
        checksum ^= RPLIDAR_CMD_SYNC_BYTE;
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	f083 035a 	eor.w	r3, r3, #90	; 0x5a
 80010a4:	43db      	mvns	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	75fb      	strb	r3, [r7, #23]
        checksum ^= cmd;
 80010aa:	7dfa      	ldrb	r2, [r7, #23]
 80010ac:	7afb      	ldrb	r3, [r7, #11]
 80010ae:	4053      	eors	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	75fb      	strb	r3, [r7, #23]
        checksum ^= (payloadsize & 0xFF);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	4053      	eors	r3, r2
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	75fb      	strb	r3, [r7, #23]

        // Вычисляем контрольную сумму для полезной нагрузки
        for (size_t pos = 0; pos < payloadsize; ++pos) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d20b      	bcs.n	80010e4 <_ZN7RPLidar12_sendCommandEhPKvj+0x9c>
            checksum ^= ((uint8_t *)payload)[pos];
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	4413      	add	r3, r2
 80010d2:	781a      	ldrb	r2, [r3, #0]
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	4053      	eors	r3, r2
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	75fb      	strb	r3, [r7, #23]
        for (size_t pos = 0; pos < payloadsize; ++pos) {
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	3301      	adds	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	e7ef      	b.n	80010c4 <_ZN7RPLidar12_sendCommandEhPKvj+0x7c>
        }

        // Отправляем размер полезной нагрузки (1 байт)
        uint8_t sizebyte = (uint8_t)payloadsize;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	75bb      	strb	r3, [r7, #22]
        status = HAL_UART_Transmit(&huart2, &sizebyte, 1, HAL_MAX_DELAY);
 80010ea:	f107 0116 	add.w	r1, r7, #22
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	2201      	movs	r2, #1
 80010f4:	4816      	ldr	r0, [pc, #88]	; (8001150 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 80010f6:	f008 fceb 	bl	8009ad0 <HAL_UART_Transmit>
 80010fa:	4603      	mov	r3, r0
 80010fc:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 80010fe:	7efb      	ldrb	r3, [r7, #27]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <_ZN7RPLidar12_sendCommandEhPKvj+0xc0>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001106:	e01e      	b.n	8001146 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }

        // Отправляем полезную нагрузку
        status = HAL_UART_Transmit(&huart2, (uint8_t *)payload, payloadsize, HAL_MAX_DELAY);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b29a      	uxth	r2, r3
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	480f      	ldr	r0, [pc, #60]	; (8001150 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 8001114:	f008 fcdc 	bl	8009ad0 <HAL_UART_Transmit>
 8001118:	4603      	mov	r3, r0
 800111a:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 800111c:	7efb      	ldrb	r3, [r7, #27]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <_ZN7RPLidar12_sendCommandEhPKvj+0xde>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001124:	e00f      	b.n	8001146 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }

        // Отправляем контрольную сумму (1 байт)
        status = HAL_UART_Transmit(&huart2, &checksum, 1, HAL_MAX_DELAY);
 8001126:	f107 0117 	add.w	r1, r7, #23
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	2201      	movs	r2, #1
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <_ZN7RPLidar12_sendCommandEhPKvj+0x108>)
 8001132:	f008 fccd 	bl	8009ad0 <HAL_UART_Transmit>
 8001136:	4603      	mov	r3, r0
 8001138:	76fb      	strb	r3, [r7, #27]
        if (status != HAL_OK) {
 800113a:	7efb      	ldrb	r3, [r7, #27]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <_ZN7RPLidar12_sendCommandEhPKvj+0xfc>
            return RESULT_OPERATION_FAIL; // Ошибка при передаче
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <_ZN7RPLidar12_sendCommandEhPKvj+0x10c>)
 8001142:	e000      	b.n	8001146 <_ZN7RPLidar12_sendCommandEhPKvj+0xfe>
        }
    }

    return RESULT_OK; // Если все данные успешно отправлены
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000fc0 	.word	0x20000fc0
 8001154:	80008001 	.word	0x80008001

08001158 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>:


uint32_t RPLidar::_waitResponseHeader(rplidar_ans_header_t *header, uint32_t timeout) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
    uint32_t startTick = HAL_GetTick(); // Запоминаем начальное время
 8001164:	f004 f8f4 	bl	8005350 <HAL_GetTick>
 8001168:	61b8      	str	r0, [r7, #24]
    uint8_t recvPos = 0; // Текущая позиция приёмного буфера
 800116a:	2300      	movs	r3, #0
 800116c:	77fb      	strb	r3, [r7, #31]
    uint8_t *headerbuf = (uint8_t *)header; // Преобразуем указатель на заголовок к массиву байтов
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	617b      	str	r3, [r7, #20]
    uint8_t currentByte;

    while ((HAL_GetTick() - startTick) < timeout) { // Пока не истёк таймаут
 8001172:	f004 f8ed 	bl	8005350 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	bf8c      	ite	hi
 8001182:	2301      	movhi	r3, #1
 8001184:	2300      	movls	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d039      	beq.n	8001200 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa8>
        // Считываем один байт через UART
        HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, &currentByte, 1, timeout - (HAL_GetTick() - startTick));
 800118c:	f004 f8e0 	bl	8005350 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	1a9a      	subs	r2, r3, r2
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	f107 0112 	add.w	r1, r7, #18
 800119e:	2201      	movs	r2, #1
 80011a0:	481a      	ldr	r0, [pc, #104]	; (800120c <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb4>)
 80011a2:	f008 fd27 	bl	8009bf4 <HAL_UART_Receive>
 80011a6:	4603      	mov	r3, r0
 80011a8:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK) { // Если байт успешно прочитан
 80011aa:	7cfb      	ldrb	r3, [r7, #19]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d11f      	bne.n	80011f0 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x98>
            switch (recvPos) {
 80011b0:	7ffb      	ldrb	r3, [r7, #31]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x64>
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d004      	beq.n	80011c4 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x6c>
 80011ba:	e00c      	b.n	80011d6 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7e>
                case 0:
                    // Проверяем первый синхронизирующий байт
                    if (currentByte != RPLIDAR_ANS_SYNC_BYTE1) {
 80011bc:	7cbb      	ldrb	r3, [r7, #18]
 80011be:	2ba5      	cmp	r3, #165	; 0xa5
 80011c0:	d006      	beq.n	80011d0 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x78>
                        continue; // Если не совпадает, игнорируем байт и продолжаем
 80011c2:	e01c      	b.n	80011fe <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa6>
                    }
                    break;
                case 1:
                    // Проверяем второй синхронизирующий байт
                    if (currentByte != RPLIDAR_ANS_SYNC_BYTE2) {
 80011c4:	7cbb      	ldrb	r3, [r7, #18]
 80011c6:	2b5a      	cmp	r3, #90	; 0x5a
 80011c8:	d004      	beq.n	80011d4 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7c>
                        recvPos = 0; // Если не совпадает, сбрасываем позицию
 80011ca:	2300      	movs	r3, #0
 80011cc:	77fb      	strb	r3, [r7, #31]
                        continue;
 80011ce:	e016      	b.n	80011fe <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa6>
                    break;
 80011d0:	bf00      	nop
 80011d2:	e000      	b.n	80011d6 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x7e>
                    }
                    break;
 80011d4:	bf00      	nop
            }
            // Записываем байт в буфер заголовка
            headerbuf[recvPos++] = currentByte;
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	77fa      	strb	r2, [r7, #31]
 80011dc:	461a      	mov	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	4413      	add	r3, r2
 80011e2:	7cba      	ldrb	r2, [r7, #18]
 80011e4:	701a      	strb	r2, [r3, #0]

            // Если заголовок полностью считан
            if (recvPos == sizeof(rplidar_ans_header_t)) return RESULT_OK; // Возвращаем успешный результат
 80011e6:	7ffb      	ldrb	r3, [r7, #31]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	d1c2      	bne.n	8001172 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x1a>
 80011ec:	2300      	movs	r3, #0
 80011ee:	e008      	b.n	8001202 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
        }
        else if (status == HAL_TIMEOUT) return RESULT_OPERATION_TIMEOUT; // Если истёк таймаут
 80011f0:	7cfb      	ldrb	r3, [r7, #19]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d101      	bne.n	80011fa <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xa2>
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb8>)
 80011f8:	e003      	b.n	8001202 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
        else return RESULT_OPERATION_FAIL; // Если произошла ошибка
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xbc>)
 80011fc:	e001      	b.n	8001202 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xaa>
    while ((HAL_GetTick() - startTick) < timeout) { // Пока не истёк таймаут
 80011fe:	e7b8      	b.n	8001172 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0x1a>
    }

    return RESULT_OPERATION_TIMEOUT; // Если цикл завершился без успешного завершения
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm+0xb8>)
}
 8001202:	4618      	mov	r0, r3
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000fc0 	.word	0x20000fc0
 8001210:	80008002 	.word	0x80008002
 8001214:	80008001 	.word	0x80008001

08001218 <_ZN7RPLidar4stopEv>:
    // Если время ожидания истекло
    return RESULT_OPERATION_TIMEOUT;
}

uint32_t RPLidar::stop()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    if (!isOpen()) return RESULT_OPERATION_FAIL;
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff feb3 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 8001226:	4603      	mov	r3, r0
 8001228:	f083 0301 	eor.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <_ZN7RPLidar4stopEv+0x1e>
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <_ZN7RPLidar4stopEv+0x38>)
 8001234:	e007      	b.n	8001246 <_ZN7RPLidar4stopEv+0x2e>
    uint32_t ans = _sendCommand(RPLIDAR_CMD_STOP,NULL,0);
 8001236:	2300      	movs	r3, #0
 8001238:	2200      	movs	r2, #0
 800123a:	2125      	movs	r1, #37	; 0x25
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff03 	bl	8001048 <_ZN7RPLidar12_sendCommandEhPKvj>
 8001242:	60f8      	str	r0, [r7, #12]
    return ans;
 8001244:	68fb      	ldr	r3, [r7, #12]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	80008001 	.word	0x80008001

08001254 <_ZN7RPLidar9startScanEbm>:

uint32_t RPLidar::startScan(bool force, uint32_t timeout) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	460b      	mov	r3, r1
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	72fb      	strb	r3, [r7, #11]
    uint32_t ans;

    // Проверяем, открыт ли UART
    if (!isOpen()) return RESULT_OPERATION_FAIL;
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f7ff fe92 	bl	8000f8c <_ZN7RPLidar6isOpenEv>
 8001268:	4603      	mov	r3, r0
 800126a:	f083 0301 	eor.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <_ZN7RPLidar9startScanEbm+0x24>
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <_ZN7RPLidar9startScanEbm+0x9c>)
 8001276:	e036      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>

    // Останавливаем предыдущую операцию
    stop();
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff ffcd 	bl	8001218 <_ZN7RPLidar4stopEv>

    // Отправляем команду на сканирование

        uint8_t command = force ? RPLIDAR_CMD_FORCE_SCAN : RPLIDAR_CMD_SCAN;
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <_ZN7RPLidar9startScanEbm+0x34>
 8001284:	2321      	movs	r3, #33	; 0x21
 8001286:	e000      	b.n	800128a <_ZN7RPLidar9startScanEbm+0x36>
 8001288:	2320      	movs	r3, #32
 800128a:	77fb      	strb	r3, [r7, #31]
        ans = _sendCommand(command, NULL, 0);
 800128c:	7ff9      	ldrb	r1, [r7, #31]
 800128e:	2300      	movs	r3, #0
 8001290:	2200      	movs	r2, #0
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff fed8 	bl	8001048 <_ZN7RPLidar12_sendCommandEhPKvj>
 8001298:	61b8      	str	r0, [r7, #24]
        if (IS_FAIL(ans)) return ans;
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b00      	cmp	r3, #0
 800129e:	da01      	bge.n	80012a4 <_ZN7RPLidar9startScanEbm+0x50>
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	e020      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>

        // Ожидание заголовка подтверждения
        rplidar_ans_header_t response_header;
        if (IS_FAIL(ans = _waitResponseHeader(&response_header, timeout))) return ans;
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	4619      	mov	r1, r3
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f7ff ff53 	bl	8001158 <_ZN7RPLidar19_waitResponseHeaderEP21_rplidar_ans_header_tm>
 80012b2:	61b8      	str	r0, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	0fdb      	lsrs	r3, r3, #31
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <_ZN7RPLidar9startScanEbm+0x6e>
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	e011      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>

        // Проверяем тип заголовка
        if (response_header.type != RPLIDAR_ANS_TYPE_MEASUREMENT) return RESULT_INVALID_DATA;
 80012c2:	7dbb      	ldrb	r3, [r7, #22]
 80012c4:	2b81      	cmp	r3, #129	; 0x81
 80012c6:	d002      	beq.n	80012ce <_ZN7RPLidar9startScanEbm+0x7a>
 80012c8:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80012cc:	e00b      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>

        // Проверяем размер заголовка
        if (response_header.size < sizeof(rplidar_response_measurement_node_t)) return RESULT_INVALID_DATA;
 80012ce:	8a7b      	ldrh	r3, [r7, #18]
 80012d0:	8aba      	ldrh	r2, [r7, #20]
 80012d2:	f3c2 020d 	ubfx	r2, r2, #0, #14
 80012d6:	0412      	lsls	r2, r2, #16
 80012d8:	4313      	orrs	r3, r2
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d802      	bhi.n	80012e4 <_ZN7RPLidar9startScanEbm+0x90>
 80012de:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80012e2:	e000      	b.n	80012e6 <_ZN7RPLidar9startScanEbm+0x92>


    return RESULT_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	80008001 	.word	0x80008001

080012f4 <_ZN7RPLidar7getDistEv>:
float* RPLidar::getDist() {  // Аргумент по умолчанию здесь не указывается
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    return minDist;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_ZN7RPLidar10clearArrayEPf>:

void RPLidar::setDist(uint32_t i, float value){
	minDist[i] = value;
}

void RPLidar::clearArray( float array[361]){
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < sizeof(array) / sizeof(array[0]); ++i) {
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10a      	bne.n	8001338 <_ZN7RPLidar10clearArrayEPf+0x2a>
    	array[i] = 0.0f;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	4413      	add	r3, r2
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(array) / sizeof(array[0]); ++i) {
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3301      	adds	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e7f1      	b.n	800131c <_ZN7RPLidar10clearArrayEPf+0xe>
    }
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_ZN7RPLidar7getDistEi>:


float RPLidar::getDist(int i) {  // Аргумент по умолчанию здесь не указывается
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
    return minDist[i];
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	ee07 3a90 	vmov	s15, r3
}
 8001360:	eeb0 0a67 	vmov.f32	s0, s15
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_ZN7RPLidar9constrainElll>:
float RPLidar::constrain(int32_t value,int32_t num1,int32_t num2){
 800136e:	b480      	push	{r7}
 8001370:	b085      	sub	sp, #20
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	603b      	str	r3, [r7, #0]
	if (value>num2) value = num2;
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	dd01      	ble.n	8001388 <_ZN7RPLidar9constrainElll+0x1a>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	60bb      	str	r3, [r7, #8]
	if (value<num1) value = num1;
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	da01      	bge.n	8001394 <_ZN7RPLidar9constrainElll+0x26>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	60bb      	str	r3, [r7, #8]
	return value;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800139e:	eeb0 0a67 	vmov.f32	s0, s15
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_ZN7RPLidar11reWriteDistEv>:


void RPLidar::reWriteDist(){
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	; 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	for (int angle = 0; angle <= 350; angle += 7) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80013be:	dc70      	bgt.n	80014a2 <_ZN7RPLidar11reWriteDistEv+0xf6>
	        float minDistance = distances[angle]; // Инициализируем минимальное расстояние текущим значением
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3302      	adds	r3, #2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	3304      	adds	r3, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	61bb      	str	r3, [r7, #24]

	        // Определяем диапазон для поиска минимального расстояния
	        int startAngle = angle - 3;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	3b03      	subs	r3, #3
 80013d4:	617b      	str	r3, [r7, #20]
	        int endAngle = angle + 3;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3303      	adds	r3, #3
 80013da:	613b      	str	r3, [r7, #16]

	        // Обрабатываем специальный случай для угла 0
	        if (angle == 0) {
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d105      	bne.n	80013ee <_ZN7RPLidar11reWriteDistEv+0x42>
	            startAngle = 357; // Начинаем с 357
 80013e2:	f240 1365 	movw	r3, #357	; 0x165
 80013e6:	617b      	str	r3, [r7, #20]
	            endAngle = 3;     // Заканчиваем на 3
 80013e8:	2303      	movs	r3, #3
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	e009      	b.n	8001402 <_ZN7RPLidar11reWriteDistEv+0x56>
	        }
	        // Обрабатываем специальный случай для угла 350
	        else if (angle == 350) {
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80013f4:	d105      	bne.n	8001402 <_ZN7RPLidar11reWriteDistEv+0x56>
	            startAngle = 347; // Начинаем с 347
 80013f6:	f240 135b 	movw	r3, #347	; 0x15b
 80013fa:	617b      	str	r3, [r7, #20]
	            endAngle = 356;   // Заканчиваем на 356
 80013fc:	f44f 73b2 	mov.w	r3, #356	; 0x164
 8001400:	613b      	str	r3, [r7, #16]
	        }

	        // Проверяем значения в диапазоне
	        for (int currentAngle = startAngle; currentAngle <= endAngle; ++currentAngle) {
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	429a      	cmp	r2, r3
 800140c:	dc3d      	bgt.n	800148a <_ZN7RPLidar11reWriteDistEv+0xde>
	            // Обрабатываем циклический характер углов
	            int wrappedAngle = currentAngle;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	60bb      	str	r3, [r7, #8]
	            if (wrappedAngle < 0) {
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	da04      	bge.n	8001422 <_ZN7RPLidar11reWriteDistEv+0x76>
	                wrappedAngle += 360; // Если угол отрицательный, добавляем 360
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	e007      	b.n	8001432 <_ZN7RPLidar11reWriteDistEv+0x86>
	            }
	            else if (wrappedAngle > 360) {
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001428:	dd03      	ble.n	8001432 <_ZN7RPLidar11reWriteDistEv+0x86>
	                wrappedAngle -= 360; // Если угол больше 360, вычитаем 360
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001430:	60bb      	str	r3, [r7, #8]
	            }

	            // Исключаем угол 357 для угла 0
	            if (angle == 0 && wrappedAngle == 357) {
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d104      	bne.n	8001442 <_ZN7RPLidar11reWriteDistEv+0x96>
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f240 1265 	movw	r2, #357	; 0x165
 800143e:	4293      	cmp	r3, r2
 8001440:	d01e      	beq.n	8001480 <_ZN7RPLidar11reWriteDistEv+0xd4>
	                continue; // Пропускаем угол 357
	            }

	            // Проверяем, чтобы угол не выходил за пределы массива
	            if (wrappedAngle >= 0 && wrappedAngle <= 360) {
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db1c      	blt.n	8001482 <_ZN7RPLidar11reWriteDistEv+0xd6>
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800144e:	dc18      	bgt.n	8001482 <_ZN7RPLidar11reWriteDistEv+0xd6>
	                if (distances[wrappedAngle] < minDistance) {
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	3302      	adds	r3, #2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3304      	adds	r3, #4
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ed97 7a06 	vldr	s14, [r7, #24]
 8001464:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	dd09      	ble.n	8001482 <_ZN7RPLidar11reWriteDistEv+0xd6>
	                    minDistance = distances[wrappedAngle];
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	3302      	adds	r3, #2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	3304      	adds	r3, #4
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	e000      	b.n	8001482 <_ZN7RPLidar11reWriteDistEv+0xd6>
	                continue; // Пропускаем угол 357
 8001480:	bf00      	nop
	        for (int currentAngle = startAngle; currentAngle <= endAngle; ++currentAngle) {
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3301      	adds	r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	e7bd      	b.n	8001406 <_ZN7RPLidar11reWriteDistEv+0x5a>
	                }
	            }
	        }

	        // Записываем минимальное расстояние в новый массив
	        minDist[angle] = minDistance;
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	601a      	str	r2, [r3, #0]
	for (int angle = 0; angle <= 350; angle += 7) {
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3307      	adds	r3, #7
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	e78a      	b.n	80013b8 <_ZN7RPLidar11reWriteDistEv+0xc>
	    }
}
 80014a2:	bf00      	nop
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <_ZN7RPLidar9waitPointEm>:
uint32_t RPLidar::waitPoint(uint32_t timeout) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
    uint32_t currentTs = HAL_GetTick(); // Получаем текущее время
 80014ba:	f003 ff49 	bl	8005350 <HAL_GetTick>
 80014be:	62b8      	str	r0, [r7, #40]	; 0x28
    uint32_t remainingtime;
    rplidar_response_measurement_node_t node;
    uint8_t *nodebuf = (uint8_t *)&node;
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t recvPos = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    while ((remainingtime = HAL_GetTick() - currentTs) <= timeout) {
 80014cc:	f003 ff40 	bl	8005350 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	623b      	str	r3, [r7, #32]
 80014d8:	6a3a      	ldr	r2, [r7, #32]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	bf94      	ite	ls
 80014e0:	2301      	movls	r3, #1
 80014e2:	2300      	movhi	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 80b1 	beq.w	800164e <_ZN7RPLidar9waitPointEm+0x19e>
        uint8_t currentbyte;
        HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, &currentbyte, 1, timeout);
 80014ec:	f107 010b 	add.w	r1, r7, #11
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2201      	movs	r2, #1
 80014f4:	4858      	ldr	r0, [pc, #352]	; (8001658 <_ZN7RPLidar9waitPointEm+0x1a8>)
 80014f6:	f008 fb7d 	bl	8009bf4 <HAL_UART_Receive>
 80014fa:	4603      	mov	r3, r0
 80014fc:	77fb      	strb	r3, [r7, #31]

        // Проверяем, успешно ли получен байт
        if (status != HAL_OK) continue; // Пропускаем итерацию, если байт не был получен
 80014fe:	7ffb      	ldrb	r3, [r7, #31]
 8001500:	2b00      	cmp	r3, #0
 8001502:	f040 80a2 	bne.w	800164a <_ZN7RPLidar9waitPointEm+0x19a>

        switch (recvPos) {
 8001506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <_ZN7RPLidar9waitPointEm+0x64>
 800150e:	2b01      	cmp	r3, #1
 8001510:	d00c      	beq.n	800152c <_ZN7RPLidar9waitPointEm+0x7c>
 8001512:	e017      	b.n	8001544 <_ZN7RPLidar9waitPointEm+0x94>
            case 0: // Ожидаем бит синхронизации и его инверсии
                {
                    uint8_t tmp = (currentbyte >> 1);
 8001514:	7afb      	ldrb	r3, [r7, #11]
 8001516:	085b      	lsrs	r3, r3, #1
 8001518:	77bb      	strb	r3, [r7, #30]
                    if ((tmp ^ currentbyte) & 0x1){} // Проходит проверку
 800151a:	7afa      	ldrb	r2, [r7, #11]
 800151c:	7fbb      	ldrb	r3, [r7, #30]
 800151e:	4053      	eors	r3, r2
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d109      	bne.n	800153e <_ZN7RPLidar9waitPointEm+0x8e>
                    else continue; // Если проверка не прошла, ждём следующий байт
 800152a:	e08f      	b.n	800164c <_ZN7RPLidar9waitPointEm+0x19c>
                }
                break;

            case 1: // Ожидаем, что самый старший бит равен 1
                {
                    if (currentbyte & RPLIDAR_RESP_MEASUREMENT_CHECKBIT) {} // Проходит проверку
 800152c:	7afb      	ldrb	r3, [r7, #11]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d105      	bne.n	8001542 <_ZN7RPLidar9waitPointEm+0x92>
                    else {
                        recvPos = 0; // Сбрасываем позицию и начинаем заново
 8001536:	2300      	movs	r3, #0
 8001538:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        continue;
 800153c:	e086      	b.n	800164c <_ZN7RPLidar9waitPointEm+0x19c>
                break;
 800153e:	bf00      	nop
 8001540:	e000      	b.n	8001544 <_ZN7RPLidar9waitPointEm+0x94>
                    }
                }
                break;
 8001542:	bf00      	nop
        }

        // Сохраняем текущий байт
        nodebuf[recvPos++] = currentbyte;
 8001544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800154e:	461a      	mov	r2, r3
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	4413      	add	r3, r2
 8001554:	7afa      	ldrb	r2, [r7, #11]
 8001556:	701a      	strb	r2, [r3, #0]

        // Если все байты структуры считаны
        if (recvPos == sizeof(rplidar_response_measurement_node_t)) {
 8001558:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800155c:	2b05      	cmp	r3, #5
 800155e:	d1b5      	bne.n	80014cc <_ZN7RPLidar9waitPointEm+0x1c>
            // Вычисляем значения измерений
            _currentMeasurement.distance = node.distance_q2 / 4.0f;
 8001560:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8001564:	b29b      	uxth	r3, r3
 8001566:	ee07 3a90 	vmov	s15, r3
 800156a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800156e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	edc3 7a00 	vstr	s15, [r3]
            _currentMeasurement.angle = constrain((node.angle_q6_checkbit >> RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT) / 64.0f,0,360);
 800157c:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8001580:	b29b      	uxth	r3, r3
 8001582:	085b      	lsrs	r3, r3, #1
 8001584:	b29b      	uxth	r3, r3
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800158e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800165c <_ZN7RPLidar9waitPointEm+0x1ac>
 8001592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800159a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800159e:	2200      	movs	r2, #0
 80015a0:	ee17 1a90 	vmov	r1, s15
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fee2 	bl	800136e <_ZN7RPLidar9constrainElll>
 80015aa:	eef0 7a40 	vmov.f32	s15, s0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	edc3 7a01 	vstr	s15, [r3, #4]
            _currentMeasurement.quality = (node.sync_quality >> RPLIDAR_RESP_MEASUREMENT_QUALITY_SHIFT);
 80015b4:	7b3b      	ldrb	r3, [r7, #12]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	721a      	strb	r2, [r3, #8]
            _currentMeasurement.startBit = (node.sync_quality & RPLIDAR_RESP_MEASUREMENT_SYNCBIT);
 80015be:	7b3b      	ldrb	r3, [r7, #12]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bf14      	ite	ne
 80015c8:	2301      	movne	r3, #1
 80015ca:	2300      	moveq	r3, #0
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	725a      	strb	r2, [r3, #9]

            // Сохраняем минимальное расстояние для каждого угла (от 0 до 360 градусов)
            float newAngle = _currentMeasurement.angle;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	61bb      	str	r3, [r7, #24]
            float newDistance = _currentMeasurement.distance;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	617b      	str	r3, [r7, #20]

				if (newAngle>=0&&newAngle<=360)
 80015de:	edd7 7a06 	vldr	s15, [r7, #24]
 80015e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	db29      	blt.n	8001640 <_ZN7RPLidar9waitPointEm+0x190>
 80015ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80015f0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001660 <_ZN7RPLidar9waitPointEm+0x1b0>
 80015f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	d820      	bhi.n	8001640 <_ZN7RPLidar9waitPointEm+0x190>
					if (newDistance != distances[(int)newAngle]) {
 80015fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001606:	ee17 3a90 	vmov	r3, s15
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	3302      	adds	r3, #2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	3304      	adds	r3, #4
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	ed97 7a05 	vldr	s14, [r7, #20]
 800161c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	d00c      	beq.n	8001640 <_ZN7RPLidar9waitPointEm+0x190>
						distances[(int)newAngle] = newDistance; // Сохраняем  расстояние
 8001626:	edd7 7a06 	vldr	s15, [r7, #24]
 800162a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800162e:	ee17 3a90 	vmov	r3, s15
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	3302      	adds	r3, #2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	3304      	adds	r3, #4
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	601a      	str	r2, [r3, #0]
				}

            reWriteDist();
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff feb3 	bl	80013ac <_ZN7RPLidar11reWriteDistEv>
            return RESULT_OK; // Успешное завершение
 8001646:	2300      	movs	r3, #0
 8001648:	e002      	b.n	8001650 <_ZN7RPLidar9waitPointEm+0x1a0>
        if (status != HAL_OK) continue; // Пропускаем итерацию, если байт не был получен
 800164a:	bf00      	nop
    while ((remainingtime = HAL_GetTick() - currentTs) <= timeout) {
 800164c:	e73e      	b.n	80014cc <_ZN7RPLidar9waitPointEm+0x1c>
        }
    }

    // Если таймаут истёк
    return RESULT_OPERATION_TIMEOUT;
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <_ZN7RPLidar9waitPointEm+0x1b4>)
}
 8001650:	4618      	mov	r0, r3
 8001652:	3730      	adds	r7, #48	; 0x30
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000fc0 	.word	0x20000fc0
 800165c:	42800000 	.word	0x42800000
 8001660:	43b40000 	.word	0x43b40000
 8001664:	80008002 	.word	0x80008002

08001668 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	bfb8      	it	lt
 8001676:	425b      	neglt	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	ed87 0a01 	vstr	s0, [r7, #4]
 800168e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001692:	f009 faa9 	bl	800abe8 <cosf>
 8001696:	eef0 7a40 	vmov.f32	s15, s0
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80016ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80016b2:	eef0 7ae7 	vabs.f32	s15, s15
 80016b6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80016ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80016d2:	f009 facd 	bl	800ac70 <sinf>
 80016d6:	eef0 7a40 	vmov.f32	s15, s0
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_ZSt4tanhf>:
  using ::tanh;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tanh(float __x)
  { return __builtin_tanhf(__x); }
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80016ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80016f2:	f009 fb03 	bl	800acfc <tanhf>
 80016f6:	eef0 7a40 	vmov.f32	s15, s0
 80016fa:	eeb0 0a67 	vmov.f32	s0, s15
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800172a:	d205      	bcs.n	8001738 <_ZSt16__deque_buf_sizej+0x1c>
 800172c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	e000      	b.n	800173a <_ZSt16__deque_buf_sizej+0x1e>
 8001738:	2301      	movs	r3, #1
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_ZN7EncoderC1EP17TIM_HandleTypeDef>:
#include  <cmath>

class Encoder
{
public:
	Encoder(TIM_HandleTypeDef* _encTim)
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
		:encTim(_encTim)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	609a      	str	r2, [r3, #8]
	{
		//HAL_TIM_Encoder_Start(_encTim, TIM_CHANNEL_1);
	};
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_ZN7Encoder7handlerEv>:

	void handler() {
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
		encoderValue = (int16_t)__HAL_TIM_GET_COUNTER(encTim);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	b21a      	sxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(encTim, 0);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2200      	movs	r2, #0
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_ZN7Encoder15getEncoderValueEv>:

	int16_t getEncoderValue(){
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
		return encoderValue;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f9b3 3000 	ldrsh.w	r3, [r3]
	}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f001 fc8b 	bl	80030ce <_ZNSaIfED1Ev>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_ZN7BFilterC1ESt6vectorIfSaIfEE>:
        // Инициализация коэффициентов фильтра нулями
        //coefs = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
        initializeStates();
    }
    // Конструктор с заданными коэффициентами
    BFilter(const std::vector<float> _coefs)
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
    	:coefs(_coefs)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6839      	ldr	r1, [r7, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f001 fcbc 	bl	800314e <_ZNSt6vectorIfSaIfEEC1ERKS1_>
        } else {
            // Если коэффициенты заданы неверно, инициализируем нулями
            coefs = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
        }
        */
        initializeStates();
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f86f 	bl	80018ba <_ZN7BFilter16initializeStatesEv>
    }
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_ZN7BFilter4calcEf>:
    // Метод для вычисления отфильтрованного значения
    float calc(float inData) {
 80017e6:	b580      	push	{r7, lr}
 80017e8:	ed2d 8b02 	vpush	{d8}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	ed87 0a00 	vstr	s0, [r7]
        // Вычисление выходного значения по разностному уравнению
        float y = coefs[2] * inData + coefs[3] * x1 + coefs[4] * x2 - coefs[0] * y1 - coefs[1] * y2;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2102      	movs	r1, #2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 fce4 	bl	80031c8 <_ZNSt6vectorIfSaIfEEixEj>
 8001800:	4603      	mov	r3, r0
 8001802:	ed93 7a00 	vldr	s14, [r3]
 8001806:	edd7 7a00 	vldr	s15, [r7]
 800180a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2103      	movs	r1, #3
 8001812:	4618      	mov	r0, r3
 8001814:	f001 fcd8 	bl	80031c8 <_ZNSt6vectorIfSaIfEEixEj>
 8001818:	4603      	mov	r3, r0
 800181a:	ed93 7a00 	vldr	s14, [r3]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	edd3 7a03 	vldr	s15, [r3, #12]
 8001824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001828:	ee38 8a27 	vadd.f32	s16, s16, s15
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2104      	movs	r1, #4
 8001830:	4618      	mov	r0, r3
 8001832:	f001 fcc9 	bl	80031c8 <_ZNSt6vectorIfSaIfEEixEj>
 8001836:	4603      	mov	r3, r0
 8001838:	ed93 7a00 	vldr	s14, [r3]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001846:	ee38 8a27 	vadd.f32	s16, s16, s15
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f001 fcba 	bl	80031c8 <_ZNSt6vectorIfSaIfEEixEj>
 8001854:	4603      	mov	r3, r0
 8001856:	ed93 7a00 	vldr	s14, [r3]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001864:	ee38 8a67 	vsub.f32	s16, s16, s15
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2101      	movs	r1, #1
 800186c:	4618      	mov	r0, r3
 800186e:	f001 fcab 	bl	80031c8 <_ZNSt6vectorIfSaIfEEixEj>
 8001872:	4603      	mov	r3, r0
 8001874:	ed93 7a00 	vldr	s14, [r3]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	edd3 7a06 	vldr	s15, [r3, #24]
 800187e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001882:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001886:	edc7 7a03 	vstr	s15, [r7, #12]

        // Обновление состояний фильтра
        x2 = x1;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	611a      	str	r2, [r3, #16]
        x1 = inData;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	60da      	str	r2, [r3, #12]
        y2 = y1;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
        y1 = y;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	615a      	str	r2, [r3, #20]

        return y;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	ee07 3a90 	vmov	s15, r3
    }
 80018ac:	eeb0 0a67 	vmov.f32	s0, s15
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	ecbd 8b02 	vpop	{d8}
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_ZN7BFilter16initializeStatesEv>:
    // Метод для инициализации состояний фильтра
    void initializeStates() {
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
        x1 = 0.0f;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
        x2 = 0.0f;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
        y1 = 0.0f;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
        y2 = 0.0f;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
    }
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	ed87 0b00 	vstr	d0, [r7]
      return pow(__type(__x), __type(__y));
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f7fe fe1a 	bl	8000534 <__aeabi_i2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	ed97 1b00 	vldr	d1, [r7]
 8001908:	ec43 2b10 	vmov	d0, r2, r3
 800190c:	f009 fa48 	bl	800ada0 <pow>
 8001910:	eeb0 7a40 	vmov.f32	s14, s0
 8001914:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001918:	eeb0 0a47 	vmov.f32	s0, s14
 800191c:	eef0 0a67 	vmov.f32	s1, s15
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <_ZN7BFilter15CalcSecondOrderEff>:
		float a1 = (omegaC - 2 / T) / a0;
		float b0 = omegaC / a0;
		std::vector<float> buf = {a1, 0, b0, b0, 0};
		return buf;
	};
	static std::vector<float> CalcSecondOrder(float freq, float sampleRate) {
 8001928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800192c:	b094      	sub	sp, #80	; 0x50
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	ed87 0a02 	vstr	s0, [r7, #8]
 8001936:	edc7 0a01 	vstr	s1, [r7, #4]
		float T = 1 / sampleRate;
 800193a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800193e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001946:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		float omegaC = 2 * M_PI * freq;
 800194a:	68b8      	ldr	r0, [r7, #8]
 800194c:	f7fe fe04 	bl	8000558 <__aeabi_f2d>
 8001950:	a3ad      	add	r3, pc, #692	; (adr r3, 8001c08 <_ZN7BFilter15CalcSecondOrderEff+0x2e0>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	f7fe fe57 	bl	8000608 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff f929 	bl	8000bb8 <__aeabi_d2f>
 8001966:	4603      	mov	r3, r0
 8001968:	64bb      	str	r3, [r7, #72]	; 0x48
		float a0 = pow(omegaC, 2) + 2 * pow(2, 0.5) * omegaC / T + 4 / pow(T, 2);
 800196a:	2002      	movs	r0, #2
 800196c:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001970:	f001 fc5b 	bl	800322a <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001974:	ec59 8b10 	vmov	r8, r9, d0
 8001978:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 8001bf8 <_ZN7BFilter15CalcSecondOrderEff+0x2d0>
 800197c:	2002      	movs	r0, #2
 800197e:	f7ff ffb6 	bl	80018ee <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001982:	ec51 0b10 	vmov	r0, r1, d0
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	f7fe fc87 	bl	800029c <__adddf3>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
 8001996:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001998:	f7fe fdde 	bl	8000558 <__aeabi_f2d>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4620      	mov	r0, r4
 80019a2:	4629      	mov	r1, r5
 80019a4:	f7fe fe30 	bl	8000608 <__aeabi_dmul>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4614      	mov	r4, r2
 80019ae:	461d      	mov	r5, r3
 80019b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019b2:	f7fe fdd1 	bl	8000558 <__aeabi_f2d>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4620      	mov	r0, r4
 80019bc:	4629      	mov	r1, r5
 80019be:	f7fe ff4d 	bl	800085c <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4640      	mov	r0, r8
 80019c8:	4649      	mov	r1, r9
 80019ca:	f7fe fc67 	bl	800029c <__adddf3>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4614      	mov	r4, r2
 80019d4:	461d      	mov	r5, r3
 80019d6:	2002      	movs	r0, #2
 80019d8:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80019dc:	f001 fc25 	bl	800322a <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80019e0:	ec53 2b10 	vmov	r2, r3, d0
 80019e4:	f04f 0000 	mov.w	r0, #0
 80019e8:	4985      	ldr	r1, [pc, #532]	; (8001c00 <_ZN7BFilter15CalcSecondOrderEff+0x2d8>)
 80019ea:	f7fe ff37 	bl	800085c <__aeabi_ddiv>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4620      	mov	r0, r4
 80019f4:	4629      	mov	r1, r5
 80019f6:	f7fe fc51 	bl	800029c <__adddf3>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff f8d9 	bl	8000bb8 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	647b      	str	r3, [r7, #68]	; 0x44
		float a1 = (2 * pow(omegaC, 2) - 8 / pow(T, 2)) / a0;
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001a10:	f001 fc0b 	bl	800322a <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a14:	ec51 0b10 	vmov	r0, r1, d0
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	f7fe fc3e 	bl	800029c <__adddf3>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4614      	mov	r4, r2
 8001a26:	461d      	mov	r5, r3
 8001a28:	2002      	movs	r0, #2
 8001a2a:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001a2e:	f001 fbfc 	bl	800322a <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a32:	ec53 2b10 	vmov	r2, r3, d0
 8001a36:	f04f 0000 	mov.w	r0, #0
 8001a3a:	4972      	ldr	r1, [pc, #456]	; (8001c04 <_ZN7BFilter15CalcSecondOrderEff+0x2dc>)
 8001a3c:	f7fe ff0e 	bl	800085c <__aeabi_ddiv>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4620      	mov	r0, r4
 8001a46:	4629      	mov	r1, r5
 8001a48:	f7fe fc26 	bl	8000298 <__aeabi_dsub>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4614      	mov	r4, r2
 8001a52:	461d      	mov	r5, r3
 8001a54:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a56:	f7fe fd7f 	bl	8000558 <__aeabi_f2d>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4620      	mov	r0, r4
 8001a60:	4629      	mov	r1, r5
 8001a62:	f7fe fefb 	bl	800085c <__aeabi_ddiv>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f7ff f8a3 	bl	8000bb8 <__aeabi_d2f>
 8001a72:	4603      	mov	r3, r0
 8001a74:	643b      	str	r3, [r7, #64]	; 0x40
		float a2 = (pow(omegaC, 2) - 2 * pow(2, 0.5) * omegaC / T + 4 / pow(T, 2)) / a0;
 8001a76:	2002      	movs	r0, #2
 8001a78:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001a7c:	f001 fbd5 	bl	800322a <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a80:	ec59 8b10 	vmov	r8, r9, d0
 8001a84:	ed9f 0b5c 	vldr	d0, [pc, #368]	; 8001bf8 <_ZN7BFilter15CalcSecondOrderEff+0x2d0>
 8001a88:	2002      	movs	r0, #2
 8001a8a:	f7ff ff30 	bl	80018ee <_ZSt3powIidEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a8e:	ec51 0b10 	vmov	r0, r1, d0
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	f7fe fc01 	bl	800029c <__adddf3>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001aa4:	f7fe fd58 	bl	8000558 <__aeabi_f2d>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4620      	mov	r0, r4
 8001aae:	4629      	mov	r1, r5
 8001ab0:	f7fe fdaa 	bl	8000608 <__aeabi_dmul>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4614      	mov	r4, r2
 8001aba:	461d      	mov	r5, r3
 8001abc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001abe:	f7fe fd4b 	bl	8000558 <__aeabi_f2d>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	f7fe fec7 	bl	800085c <__aeabi_ddiv>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4640      	mov	r0, r8
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	f7fe fbdf 	bl	8000298 <__aeabi_dsub>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4614      	mov	r4, r2
 8001ae0:	461d      	mov	r5, r3
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001ae8:	f001 fb9f 	bl	800322a <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001aec:	ec53 2b10 	vmov	r2, r3, d0
 8001af0:	f04f 0000 	mov.w	r0, #0
 8001af4:	4942      	ldr	r1, [pc, #264]	; (8001c00 <_ZN7BFilter15CalcSecondOrderEff+0x2d8>)
 8001af6:	f7fe feb1 	bl	800085c <__aeabi_ddiv>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4620      	mov	r0, r4
 8001b00:	4629      	mov	r1, r5
 8001b02:	f7fe fbcb 	bl	800029c <__adddf3>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4614      	mov	r4, r2
 8001b0c:	461d      	mov	r5, r3
 8001b0e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001b10:	f7fe fd22 	bl	8000558 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fe9e 	bl	800085c <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7ff f846 	bl	8000bb8 <__aeabi_d2f>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
		float b0 = pow(omegaC, 2) / a0;
 8001b30:	2002      	movs	r0, #2
 8001b32:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001b36:	f001 fb78 	bl	800322a <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b3a:	ec55 4b10 	vmov	r4, r5, d0
 8001b3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001b40:	f7fe fd0a 	bl	8000558 <__aeabi_f2d>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe fe86 	bl	800085c <__aeabi_ddiv>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f7ff f82e 	bl	8000bb8 <__aeabi_d2f>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	63bb      	str	r3, [r7, #56]	; 0x38
		float b1 = 2 * pow(omegaC, 2) / a0;
 8001b60:	2002      	movs	r0, #2
 8001b62:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8001b66:	f001 fb60 	bl	800322a <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b6a:	ec51 0b10 	vmov	r0, r1, d0
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	f7fe fb93 	bl	800029c <__adddf3>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4614      	mov	r4, r2
 8001b7c:	461d      	mov	r5, r3
 8001b7e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001b80:	f7fe fcea 	bl	8000558 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4620      	mov	r0, r4
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	f7fe fe66 	bl	800085c <__aeabi_ddiv>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f80e 	bl	8000bb8 <__aeabi_d2f>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
		float b2 = b0;
 8001ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
		//float buf[5] = {a1, a2, b0, b1, b2};
		std::vector<float> buf = {a1, a2, b0, b1, b2};
 8001ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bae:	623b      	str	r3, [r7, #32]
 8001bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 fa75 	bl	80030b6 <_ZNSaIfEC1Ev>
 8001bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd0:	f107 0210 	add.w	r2, r7, #16
 8001bd4:	ca06      	ldmia	r2, {r1, r2}
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f001 fb06 	bl	80031e8 <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
 8001bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be0:	4618      	mov	r0, r3
 8001be2:	f001 fa74 	bl	80030ce <_ZNSaIfED1Ev>

		return buf;
 8001be6:	bf00      	nop
	};
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	3750      	adds	r7, #80	; 0x50
 8001bec:	46bd      	mov	sp, r7
 8001bee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bf2:	bf00      	nop
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	00000000 	.word	0x00000000
 8001bfc:	3fe00000 	.word	0x3fe00000
 8001c00:	40100000 	.word	0x40100000
 8001c04:	40200000 	.word	0x40200000
 8001c08:	54442d18 	.word	0x54442d18
 8001c0c:	401921fb 	.word	0x401921fb

08001c10 <_ZN3PIDC1Efff>:


class PID {
public:
    PID(float kp, float ki, float kd)
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c1c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001c20:	ed87 1a00 	vstr	s2, [r7]
        : kp(kp), ki(ki), kd(kd), prevError(0), integral(0) {
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
    }
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_ZN3PID9calculateEff>:

    // Метод для расчета управляющего воздействия
    float calculate(float target, float current) {
 8001c54:	b480      	push	{r7}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c60:	edc7 0a01 	vstr	s1, [r7, #4]
    	float error = target - current;
 8001c64:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c70:	edc7 7a05 	vstr	s15, [r7, #20]
        integral += error; // Накопление интегральной ошибки
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	edc3 7a04 	vstr	s15, [r3, #16]
        float derivative = error - prevError; // Разница ошибок
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c8e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c96:	edc7 7a04 	vstr	s15, [r7, #16]
        prevError = error;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	60da      	str	r2, [r3, #12]

        return kp * error + ki * integral + kd * derivative;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	ed93 7a00 	vldr	s14, [r3]
 8001ca6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001caa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	edd3 6a01 	vldr	s13, [r3, #4]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	edd3 6a02 	vldr	s13, [r3, #8]
 8001cc8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8001cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	0000      	movs	r0, r0
 8001ce4:	0000      	movs	r0, r0
	...

08001ce8 <_ZN3PID18updateCoefficientsEd>:
    	prevError = 0;
    	integral = 0;
    }

    // Метод для обновления коэффициентов по формулам
    void updateCoefficients(double targetSpeed) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b092      	sub	sp, #72	; 0x48
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	ed87 0b00 	vstr	d0, [r7]
        // Коэффициенты для низких скоростей (до 50 об/мин)
        double kp_low = 20;
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b6f      	ldr	r3, [pc, #444]	; (8001eb8 <_ZN3PID18updateCoefficientsEd+0x1d0>)
 8001cfa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
        double ki_low = 0.05;
 8001cfe:	a368      	add	r3, pc, #416	; (adr r3, 8001ea0 <_ZN3PID18updateCoefficientsEd+0x1b8>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        double kd_low = 7;
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b6b      	ldr	r3, [pc, #428]	; (8001ebc <_ZN3PID18updateCoefficientsEd+0x1d4>)
 8001d0e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

        // Коэффициенты для высоких скоростей (свыше 150 об/мин)
        double kp_high = 16;
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	4b6a      	ldr	r3, [pc, #424]	; (8001ec0 <_ZN3PID18updateCoefficientsEd+0x1d8>)
 8001d18:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        double ki_high = 0.1;
 8001d1c:	a362      	add	r3, pc, #392	; (adr r3, 8001ea8 <_ZN3PID18updateCoefficientsEd+0x1c0>)
 8001d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d22:	e9c7 2308 	strd	r2, r3, [r7, #32]
        double kd_high = 6;
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	4b66      	ldr	r3, [pc, #408]	; (8001ec4 <_ZN3PID18updateCoefficientsEd+0x1dc>)
 8001d2c:	e9c7 2306 	strd	r2, r3, [r7, #24]

        // Линейная интерполяция коэффициентов
        if (targetSpeed <= 50) {
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	4b64      	ldr	r3, [pc, #400]	; (8001ec8 <_ZN3PID18updateCoefficientsEd+0x1e0>)
 8001d36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d3a:	f7fe fee1 	bl	8000b00 <__aeabi_dcmple>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d015      	beq.n	8001d70 <_ZN3PID18updateCoefficientsEd+0x88>
            // Если скорость <= 50, используем коэффициенты для низких скоростей
            kp = kp_low;
 8001d44:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d48:	f7fe ff36 	bl	8000bb8 <__aeabi_d2f>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	601a      	str	r2, [r3, #0]
            ki = ki_low;
 8001d52:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d56:	f7fe ff2f 	bl	8000bb8 <__aeabi_d2f>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	605a      	str	r2, [r3, #4]
            kd = kd_low;
 8001d60:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d64:	f7fe ff28 	bl	8000bb8 <__aeabi_d2f>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	609a      	str	r2, [r3, #8]
            double t = (targetSpeed - 50) / (150 - 50); // Нормализация скорости в диапазоне [0, 1]
            kp = kp_low + t * (kp_high - kp_low);
            ki = ki_low + t * (ki_high - ki_low);
            kd = kd_low + t * (kd_high - kd_low);
        }
    }
 8001d6e:	e090      	b.n	8001e92 <_ZN3PID18updateCoefficientsEd+0x1aa>
        } else if (targetSpeed >= 150) {
 8001d70:	a34f      	add	r3, pc, #316	; (adr r3, 8001eb0 <_ZN3PID18updateCoefficientsEd+0x1c8>)
 8001d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d7a:	f7fe fecb 	bl	8000b14 <__aeabi_dcmpge>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d015      	beq.n	8001db0 <_ZN3PID18updateCoefficientsEd+0xc8>
            kp = kp_high;
 8001d84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d88:	f7fe ff16 	bl	8000bb8 <__aeabi_d2f>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]
            ki = ki_high;
 8001d92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d96:	f7fe ff0f 	bl	8000bb8 <__aeabi_d2f>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	605a      	str	r2, [r3, #4]
            kd = kd_high;
 8001da0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001da4:	f7fe ff08 	bl	8000bb8 <__aeabi_d2f>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	609a      	str	r2, [r3, #8]
    }
 8001dae:	e070      	b.n	8001e92 <_ZN3PID18updateCoefficientsEd+0x1aa>
            double t = (targetSpeed - 50) / (150 - 50); // Нормализация скорости в диапазоне [0, 1]
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <_ZN3PID18updateCoefficientsEd+0x1e0>)
 8001db6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dba:	f7fe fa6d 	bl	8000298 <__aeabi_dsub>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <_ZN3PID18updateCoefficientsEd+0x1e4>)
 8001dcc:	f7fe fd46 	bl	800085c <__aeabi_ddiv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	e9c7 2304 	strd	r2, r3, [r7, #16]
            kp = kp_low + t * (kp_high - kp_low);
 8001dd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ddc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001de0:	f7fe fa5a 	bl	8000298 <__aeabi_dsub>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001df0:	f7fe fc0a 	bl	8000608 <__aeabi_dmul>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e00:	f7fe fa4c 	bl	800029c <__adddf3>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7fe fed4 	bl	8000bb8 <__aeabi_d2f>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	601a      	str	r2, [r3, #0]
            ki = ki_low + t * (ki_high - ki_low);
 8001e16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e1a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e1e:	f7fe fa3b 	bl	8000298 <__aeabi_dsub>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e2e:	f7fe fbeb 	bl	8000608 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e3e:	f7fe fa2d 	bl	800029c <__adddf3>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe feb5 	bl	8000bb8 <__aeabi_d2f>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	605a      	str	r2, [r3, #4]
            kd = kd_low + t * (kd_high - kd_low);
 8001e54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e5c:	f7fe fa1c 	bl	8000298 <__aeabi_dsub>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e6c:	f7fe fbcc 	bl	8000608 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e7c:	f7fe fa0e 	bl	800029c <__adddf3>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	f7fe fe96 	bl	8000bb8 <__aeabi_d2f>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	609a      	str	r2, [r3, #8]
    }
 8001e92:	bf00      	nop
 8001e94:	3748      	adds	r7, #72	; 0x48
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	9999999a 	.word	0x9999999a
 8001ea4:	3fa99999 	.word	0x3fa99999
 8001ea8:	9999999a 	.word	0x9999999a
 8001eac:	3fb99999 	.word	0x3fb99999
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	4062c000 	.word	0x4062c000
 8001eb8:	40340000 	.word	0x40340000
 8001ebc:	401c0000 	.word	0x401c0000
 8001ec0:	40300000 	.word	0x40300000
 8001ec4:	40180000 	.word	0x40180000
 8001ec8:	40490000 	.word	0x40490000
 8001ecc:	40590000 	.word	0x40590000

08001ed0 <_Z9constrainlll>:
#include  <cmath>

#ifndef INC_MOTOR_H_
#define INC_MOTOR_H_

	int32_t constrain(int32_t value,int32_t num1,int32_t num2){
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
		if (value>num2) value = num2;
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	dd01      	ble.n	8001ee8 <_Z9constrainlll+0x18>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	60fb      	str	r3, [r7, #12]
		if (value<num1) value = num1;
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	da01      	bge.n	8001ef4 <_Z9constrainlll+0x24>
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60fb      	str	r3, [r7, #12]
		return value;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
	}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <_ZN7BFilterD1Ev>:
class BFilter {
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f001 f8ea 	bl	80030e6 <_ZNSt6vectorIfSaIfEED1Ev>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>:

class Motor{

public:

	Motor(TIM_HandleTypeDef* _encTim,TIM_HandleTypeDef* _ctrlTim, uint8_t _ctrlTimCh):
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b089      	sub	sp, #36	; 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	70fb      	strb	r3, [r7, #3]
		ctrlTim(_ctrlTim),ctrlTimCh(_ctrlTimCh),enc(_encTim),pid(20,0.05,7)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fc09 	bl	8001746 <_ZN7EncoderC1EP17TIM_HandleTypeDef>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	330c      	adds	r3, #12
 8001f38:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8001f3c:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001f90 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h+0x74>
 8001f40:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fe63 	bl	8001c10 <_ZN3PIDC1Efff>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f103 0420 	add.w	r4, r3, #32
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001f94 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h+0x78>
 8001f58:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fce3 	bl	8001928 <_ZN7BFilter15CalcSecondOrderEff>
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f7ff fc2a 	bl	80017c2 <_ZN7BFilterC1ESt6vectorIfSaIfEE>
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 f8b7 	bl	80030e6 <_ZNSt6vectorIfSaIfEED1Ev>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40
	{};
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd90      	pop	{r4, r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	3d4ccccd 	.word	0x3d4ccccd
 8001f94:	447a0000 	.word	0x447a0000

08001f98 <_ZN5Motor14setTargetSpeedEf>:
	}

	int16_t getEncoderValue(){
		return enc.getEncoderValue();
	}
	void setTargetSpeed(float speed){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	ed87 0a00 	vstr	s0, [r7]
		targetSpeed = speed;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	651a      	str	r2, [r3, #80]	; 0x50
		targetSpeed = constrain(targetSpeed,-MAX_MOT_SPEED,MAX_MOT_SPEED);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb4:	2264      	movs	r2, #100	; 0x64
 8001fb6:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001fba:	ee17 0a90 	vmov	r0, s15
 8001fbe:	f7ff ff87 	bl	8001ed0 <_Z9constrainlll>
 8001fc2:	ee07 0a90 	vmov	s15, r0
 8001fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <_ZN5Motor7handlerEv>:
	void handler(){
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
		calcCurSpeedMotor();
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f83d 	bl	8002060 <_ZN5Motor17calcCurSpeedMotorEv>
		pid.updateCoefficients(targetSpeed);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f103 040c 	add.w	r4, r3, #12
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fab1 	bl	8000558 <__aeabi_f2d>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	ec43 2b10 	vmov	d0, r2, r3
 8001ffe:	4620      	mov	r0, r4
 8002000:	f7ff fe72 	bl	8001ce8 <_ZN3PID18updateCoefficientsEd>
		helpPWM = pid.calculate(targetSpeed, currentSpeed);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f103 020c 	add.w	r2, r3, #12
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8002016:	eef0 0a47 	vmov.f32	s1, s14
 800201a:	eeb0 0a67 	vmov.f32	s0, s15
 800201e:	4610      	mov	r0, r2
 8002020:	f7ff fe18 	bl	8001c54 <_ZN3PID9calculateEff>
 8002024:	eef0 7a40 	vmov.f32	s15, s0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		setMotorPWM(constrain((int32_t)helpPWM,-MAX_MOT_PWM,MAX_MOT_PWM));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002038:	f242 7210 	movw	r2, #10000	; 0x2710
 800203c:	4906      	ldr	r1, [pc, #24]	; (8002058 <_ZN5Motor7handlerEv+0x80>)
 800203e:	ee17 0a90 	vmov	r0, s15
 8002042:	f7ff ff45 	bl	8001ed0 <_Z9constrainlll>
 8002046:	4603      	mov	r3, r0
 8002048:	4619      	mov	r1, r3
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f84e 	bl	80020ec <_ZN5Motor11setMotorPWMEl>
	}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}
 8002058:	ffffd8f0 	.word	0xffffd8f0
 800205c:	00000000 	.word	0x00000000

08002060 <_ZN5Motor17calcCurSpeedMotorEv>:

private:

	void calcCurSpeedMotor(){
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
				enc.handler();
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fb7a 	bl	8001764 <_ZN7Encoder7handlerEv>
				currentSpeed = (((float)enc.getEncoderValue())*60.0)/(ENC_MAX*FAST_CYCLE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fb8c 	bl	8001790 <_ZN7Encoder15getEncoderValueEv>
 8002078:	4603      	mov	r3, r0
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002082:	ee17 0a90 	vmov	r0, s15
 8002086:	f7fe fa67 	bl	8000558 <__aeabi_f2d>
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <_ZN5Motor17calcCurSpeedMotorEv+0x88>)
 8002090:	f7fe faba 	bl	8000608 <__aeabi_dmul>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	a310      	add	r3, pc, #64	; (adr r3, 80020e0 <_ZN5Motor17calcCurSpeedMotorEv+0x80>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe fbdb 	bl	800085c <__aeabi_ddiv>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7fe fd83 	bl	8000bb8 <__aeabi_d2f>
 80020b2:	4602      	mov	r2, r0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	64da      	str	r2, [r3, #76]	; 0x4c
				currentSpeed = filt.calc(currentSpeed);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f103 0220 	add.w	r2, r3, #32
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80020c4:	eeb0 0a67 	vmov.f32	s0, s15
 80020c8:	4610      	mov	r0, r2
 80020ca:	f7ff fb8c 	bl	80017e6 <_ZN7BFilter4calcEf>
 80020ce:	eef0 7a40 	vmov.f32	s15, s0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	cccccccd 	.word	0xcccccccd
 80020e4:	3ffccccc 	.word	0x3ffccccc
 80020e8:	404e0000 	.word	0x404e0000

080020ec <_ZN5Motor11setMotorPWMEl>:
	void setMotorPWM(int32_t PWM){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]


		if (ctrlTimCh == CHANNEL1||ctrlTimCh == CHANNEL2){
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d003      	beq.n	8002106 <_ZN5Motor11setMotorPWMEl+0x1a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	2b02      	cmp	r3, #2
 8002104:	d11e      	bne.n	8002144 <_ZN5Motor11setMotorPWMEl+0x58>
			if (PWM>0){
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	dd0a      	ble.n	8002122 <_ZN5Motor11setMotorPWMEl+0x36>
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_1, ZERO);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_2, PWM);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	639a      	str	r2, [r3, #56]	; 0x38
 8002120:	e010      	b.n	8002144 <_ZN5Motor11setMotorPWMEl+0x58>
			}

			else if (PWM<0){
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	da0d      	bge.n	8002144 <_ZN5Motor11setMotorPWMEl+0x58>
				PWM = abs(PWM);
 8002128:	6838      	ldr	r0, [r7, #0]
 800212a:	f7ff fa9d 	bl	8001668 <_ZSt3absl>
 800212e:	6038      	str	r0, [r7, #0]
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_2, ZERO);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2200      	movs	r2, #0
 8002138:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_1, PWM);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}

		if (ctrlTimCh == CHANNEL3||ctrlTimCh == CHANNEL4){
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	2b03      	cmp	r3, #3
 800214a:	d003      	beq.n	8002154 <_ZN5Motor11setMotorPWMEl+0x68>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	2b04      	cmp	r3, #4
 8002152:	d11e      	bne.n	8002192 <_ZN5Motor11setMotorPWMEl+0xa6>
			if (PWM>0){
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	dd0a      	ble.n	8002170 <_ZN5Motor11setMotorPWMEl+0x84>
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, ZERO);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2200      	movs	r2, #0
 8002162:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, PWM);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
				PWM = abs(PWM);
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, ZERO);
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, PWM);
			}
		}
	}
 800216e:	e010      	b.n	8002192 <_ZN5Motor11setMotorPWMEl+0xa6>
			else if (PWM<0){
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	da0d      	bge.n	8002192 <_ZN5Motor11setMotorPWMEl+0xa6>
				PWM = abs(PWM);
 8002176:	6838      	ldr	r0, [r7, #0]
 8002178:	f7ff fa76 	bl	8001668 <_ZSt3absl>
 800217c:	6038      	str	r0, [r7, #0]
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_4, ZERO);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2200      	movs	r2, #0
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
				__HAL_TIM_SET_COMPARE(ctrlTim, TIM_CHANNEL_3, PWM);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <_ZN5MotorD1Ev>:
class Motor{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3320      	adds	r3, #32
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff feab 	bl	8001f02 <_ZN7BFilterD1Ev>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <_ZN6TelegaC1Ev>:

class Telega{

public:

	Telega():
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
		leftMotor(ENC_LEFT_TIM,MOT_L_PWM_TIM,CHANNEL3),
		rightMotor(ENC_RIGHT_TIM,MOT_R_PWM_TIM,CHANNEL1)
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	2303      	movs	r3, #3
 80021c4:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <_ZN6TelegaC1Ev+0x30>)
 80021c6:	4909      	ldr	r1, [pc, #36]	; (80021ec <_ZN6TelegaC1Ev+0x34>)
 80021c8:	f7ff fea8 	bl	8001f1c <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80021d2:	2301      	movs	r3, #1
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <_ZN6TelegaC1Ev+0x30>)
 80021d6:	4906      	ldr	r1, [pc, #24]	; (80021f0 <_ZN6TelegaC1Ev+0x38>)
 80021d8:	f7ff fea0 	bl	8001f1c <_ZN5MotorC1EP17TIM_HandleTypeDefS1_h>
	{};
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000f30 	.word	0x20000f30
 80021ec:	20000ee8 	.word	0x20000ee8
 80021f0:	20000f78 	.word	0x20000f78

080021f4 <_ZN6Telega7handlerEv>:

	void handler(){
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
			leftMotor.handler();
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff feea 	bl	8001fd8 <_ZN5Motor7handlerEv>
			rightMotor.handler();
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3354      	adds	r3, #84	; 0x54
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fee5 	bl	8001fd8 <_ZN5Motor7handlerEv>
	}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_ZN6Telega13setRobotSpeedEff>:
	void setRobotSpeed(float linSpeed, float angSpeed){
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002222:	edc7 0a01 	vstr	s1, [r7, #4]
		setMotorSpeed(linSpeed-angSpeed,linSpeed+angSpeed);
 8002226:	ed97 7a02 	vldr	s14, [r7, #8]
 800222a:	edd7 7a01 	vldr	s15, [r7, #4]
 800222e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002232:	ed97 7a02 	vldr	s14, [r7, #8]
 8002236:	edd7 7a01 	vldr	s15, [r7, #4]
 800223a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223e:	eef0 0a67 	vmov.f32	s1, s15
 8002242:	eeb0 0a66 	vmov.f32	s0, s13
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f804 	bl	8002254 <_ZN6Telega13setMotorSpeedEff>
	}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_ZN6Telega13setMotorSpeedEff>:
	}


private:

	void setMotorSpeed(float lSpd, float rSpd){
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002260:	edc7 0a01 	vstr	s1, [r7, #4]
			leftMotor.setTargetSpeed(-lSpd);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	edd7 7a02 	vldr	s15, [r7, #8]
 800226a:	eef1 7a67 	vneg.f32	s15, s15
 800226e:	eeb0 0a67 	vmov.f32	s0, s15
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fe90 	bl	8001f98 <_ZN5Motor14setTargetSpeedEf>
			rightMotor.setTargetSpeed(rSpd);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3354      	adds	r3, #84	; 0x54
 800227c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fe89 	bl	8001f98 <_ZN5Motor14setTargetSpeedEf>
	}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <_ZN10TanControl16calcTgtRobotSpdsEff>:
	float ang;
};

class TanControl{
public:
	Spd calcTgtRobotSpds(float dist, float ang) {
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	ed2d 8b02 	vpush	{d8}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6178      	str	r0, [r7, #20]
 800229c:	ed87 0a04 	vstr	s0, [r7, #16]
 80022a0:	edc7 0a03 	vstr	s1, [r7, #12]
	    // Минимальное ограничение на расстояние для предотвращения деления на 0
	    if (dist < 0.01f) dist = 0.01f;
 80022a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80022a8:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80023b4 <_ZN10TanControl16calcTgtRobotSpdsEff+0x124>
 80022ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d501      	bpl.n	80022ba <_ZN10TanControl16calcTgtRobotSpdsEff+0x2a>
 80022b6:	4b40      	ldr	r3, [pc, #256]	; (80023b8 <_ZN10TanControl16calcTgtRobotSpdsEff+0x128>)
 80022b8:	613b      	str	r3, [r7, #16]

	    clearSpd();
 80022ba:	6978      	ldr	r0, [r7, #20]
 80022bc:	f000 f909 	bl	80024d2 <_ZN10TanControl8clearSpdEv>

	    if (fabs(ang) > 90.0f) {
 80022c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80022c4:	f7ff f9ee 	bl	80016a4 <_ZSt4fabsf>
 80022c8:	eef0 7a40 	vmov.f32	s15, s0
 80022cc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80023bc <_ZN10TanControl16calcTgtRobotSpdsEff+0x12c>
 80022d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	bfcc      	ite	gt
 80022da:	2301      	movgt	r3, #1
 80022dc:	2300      	movle	r3, #0
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00d      	beq.n	8002300 <_ZN10TanControl16calcTgtRobotSpdsEff+0x70>
	        // Если угол больше 90 градусов, отключаем линейное движение
	        spd.lin = 0.0f;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
	        spd.ang = K_ANG * ang; // Только угловое движение
 80022ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80022f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	edc3 7a01 	vstr	s15, [r3, #4]
 80022fe:	e042      	b.n	8002386 <_ZN10TanControl16calcTgtRobotSpdsEff+0xf6>
	    } else {
	        // Тангенциальное управление для углов в диапазоне [-90, 90]
	        spd.lin = MAX_MOT_SPEED * tanh(dist) * cos(ang);
 8002300:	ed97 0a04 	vldr	s0, [r7, #16]
 8002304:	f7ff f9ee 	bl	80016e4 <_ZSt4tanhf>
 8002308:	eef0 7a40 	vmov.f32	s15, s0
 800230c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80023c0 <_ZN10TanControl16calcTgtRobotSpdsEff+0x130>
 8002310:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002314:	ed97 0a03 	vldr	s0, [r7, #12]
 8002318:	f7ff f9b4 	bl	8001684 <_ZSt3cosf>
 800231c:	eef0 7a40 	vmov.f32	s15, s0
 8002320:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	edc3 7a00 	vstr	s15, [r3]
	        spd.ang = K_ANG * ang + spd.lin * sin(ang) / dist;
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f7fe f914 	bl	8000558 <__aeabi_f2d>
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <_ZN10TanControl16calcTgtRobotSpdsEff+0x134>)
 8002336:	f7fe f967 	bl	8000608 <__aeabi_dmul>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4614      	mov	r4, r2
 8002340:	461d      	mov	r5, r3
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	ed93 8a00 	vldr	s16, [r3]
 8002348:	ed97 0a03 	vldr	s0, [r7, #12]
 800234c:	f7ff f9ba 	bl	80016c4 <_ZSt3sinf>
 8002350:	eef0 7a40 	vmov.f32	s15, s0
 8002354:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002358:	edd7 7a04 	vldr	s15, [r7, #16]
 800235c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002360:	ee16 0a90 	vmov	r0, s13
 8002364:	f7fe f8f8 	bl	8000558 <__aeabi_f2d>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4620      	mov	r0, r4
 800236e:	4629      	mov	r1, r5
 8002370:	f7fd ff94 	bl	800029c <__adddf3>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f7fe fc1c 	bl	8000bb8 <__aeabi_d2f>
 8002380:	4602      	mov	r2, r0
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	605a      	str	r2, [r3, #4]
	    }
	    return spd;
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	f107 0318 	add.w	r3, r7, #24
 800238c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002390:	e883 0003 	stmia.w	r3, {r0, r1}
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	ee07 2a10 	vmov	s14, r2
 800239c:	ee07 3a90 	vmov	s15, r3
	}
 80023a0:	eeb0 0a47 	vmov.f32	s0, s14
 80023a4:	eef0 0a67 	vmov.f32	s1, s15
 80023a8:	3720      	adds	r7, #32
 80023aa:	46bd      	mov	sp, r7
 80023ac:	ecbd 8b02 	vpop	{d8}
 80023b0:	bdb0      	pop	{r4, r5, r7, pc}
 80023b2:	bf00      	nop
 80023b4:	3c23d70a 	.word	0x3c23d70a
 80023b8:	3c23d70a 	.word	0x3c23d70a
 80023bc:	42b40000 	.word	0x42b40000
 80023c0:	42c80000 	.word	0x42c80000
 80023c4:	3fe00000 	.word	0x3fe00000

080023c8 <_ZN10TanControl13getErrorAngleEPf>:

	int32_t getErrorAngle(float *distances){
 80023c8:	b480      	push	{r7}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
		float errorAngle = 0.0f;
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
		float minDistance = 10000.0f;
 80023d8:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <_ZN10TanControl13getErrorAngleEPf+0xc0>)
 80023da:	613b      	str	r3, [r7, #16]
		for (int32_t i = 0; i <= 350; i += 7) {
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80023e6:	dc42      	bgt.n	800246e <_ZN10TanControl13getErrorAngleEPf+0xa6>

			  if(distances[i]<minDistance&&distances[i]!=0&&distances[i]>150&&distances[i]<500){
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80023f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002400:	dd31      	ble.n	8002466 <_ZN10TanControl13getErrorAngleEPf+0x9e>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	4413      	add	r3, r2
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002416:	d026      	beq.n	8002466 <_ZN10TanControl13getErrorAngleEPf+0x9e>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	4413      	add	r3, r2
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800248c <_ZN10TanControl13getErrorAngleEPf+0xc4>
 8002428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	dd19      	ble.n	8002466 <_ZN10TanControl13getErrorAngleEPf+0x9e>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	4413      	add	r3, r2
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002490 <_ZN10TanControl13getErrorAngleEPf+0xc8>
 8002442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	d50c      	bpl.n	8002466 <_ZN10TanControl13getErrorAngleEPf+0x9e>
				  minDistance = distances[i];
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	4413      	add	r3, r2
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	613b      	str	r3, [r7, #16]
				  errorAngle = i;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002462:	edc7 7a05 	vstr	s15, [r7, #20]
		for (int32_t i = 0; i <= 350; i += 7) {
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3307      	adds	r3, #7
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	e7b8      	b.n	80023e0 <_ZN10TanControl13getErrorAngleEPf+0x18>
			  }
		  }
		  return errorAngle;
 800246e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002476:	ee17 3a90 	vmov	r3, s15
	}
 800247a:	4618      	mov	r0, r3
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	461c4000 	.word	0x461c4000
 800248c:	43160000 	.word	0x43160000
 8002490:	43fa0000 	.word	0x43fa0000

08002494 <_ZN10TanControl8limitAngEl>:
	int32_t limitAng(int32_t ang){
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
		int32_t inAng = ang;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	60fb      	str	r3, [r7, #12]
		while (inAng >= HALF_CIRCLE) {
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2bb3      	cmp	r3, #179	; 0xb3
 80024a6:	dd04      	ble.n	80024b2 <_ZN10TanControl8limitAngEl+0x1e>
			inAng -= 2 * HALF_CIRCLE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024ae:	60fb      	str	r3, [r7, #12]
		while (inAng >= HALF_CIRCLE) {
 80024b0:	e7f7      	b.n	80024a2 <_ZN10TanControl8limitAngEl+0xe>
		}
		while (inAng <= -HALF_CIRCLE) {
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f113 0fb3 	cmn.w	r3, #179	; 0xb3
 80024b8:	da04      	bge.n	80024c4 <_ZN10TanControl8limitAngEl+0x30>
			inAng += 2 * HALF_CIRCLE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024c0:	60fb      	str	r3, [r7, #12]
		while (inAng <= -HALF_CIRCLE) {
 80024c2:	e7f6      	b.n	80024b2 <_ZN10TanControl8limitAngEl+0x1e>
		}
		return inAng;
 80024c4:	68fb      	ldr	r3, [r7, #12]
	}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <_ZN10TanControl8clearSpdEv>:
private:
	void clearSpd(){
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
		spd.lin = 0;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
		spd.ang = 0;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	605a      	str	r2, [r3, #4]
	}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fed4 	bl	80032ae <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_ZN6TelegaD1Ev>:
class Telega{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3354      	adds	r3, #84	; 0x54
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fe3c 	bl	800219a <_ZN5MotorD1Ev>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fe38 	bl	800219a <_ZN5MotorD1Ev>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_ZN12ActionsQueueC1Ev>:

class ActionsQueue
{
public:
	
	ActionsQueue():pidl(10,0.0005,1){
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fea1 	bl	8003286 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3328      	adds	r3, #40	; 0x28
 8002548:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800254c:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8002584 <_ZN12ActionsQueueC1Ev+0x50>
 8002550:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fb5b 	bl	8001c10 <_ZN3PIDC1Efff>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	333c      	adds	r3, #60	; 0x3c
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fd22 	bl	8000fa8 <_ZN7RPLidarC1Ev>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fe24 	bl	80021b8 <_ZN6TelegaC1Ev>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48
	};
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	3a03126f 	.word	0x3a03126f

08002588 <_ZN12ActionsQueue4initEv>:
	void init(){
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
		lid.begin();
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	333c      	adds	r3, #60	; 0x3c
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fd37 	bl	8001008 <_ZN7RPLidar5beginEv>
		lid.startScan();
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	333c      	adds	r3, #60	; 0x3c
 800259e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fe55 	bl	8001254 <_ZN7RPLidar9startScanEbm>
	}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <_ZN12ActionsQueue4pushE7ACTIONS>:

	void push(ACTIONS action) {
 80025b2:	b590      	push	{r4, r7, lr}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	460b      	mov	r3, r1
 80025bc:	70fb      	strb	r3, [r7, #3]
		rQueue.push(RobotInstruction(action));
 80025be:	687c      	ldr	r4, [r7, #4]
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	f107 0308 	add.w	r3, r7, #8
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 f991 	bl	80028f0 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	4619      	mov	r1, r3
 80025d4:	4620      	mov	r0, r4
 80025d6:	f000 fe8f 	bl	80032f8 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>
	};
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd90      	pop	{r4, r7, pc}

080025e2 <_ZN12ActionsQueue7isClearEv>:
		while (!rQueue.empty()) {
			rQueue.pop();
		}
		delayInit = false;
	}
	bool isClear() {
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
		if (rQueue.size() == 0) {
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fe95 	bl	800331c <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <_ZN12ActionsQueue7isClearEv+0x24>
			return true;
 8002602:	2301      	movs	r3, #1
 8002604:	e00f      	b.n	8002626 <_ZN12ActionsQueue7isClearEv+0x44>
		}
		else if (rQueue.front().robotAction == ACTIONS::IDLE) {
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fead 	bl	8003368 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 800260e:	4603      	mov	r3, r0
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	bf0c      	ite	eq
 8002616:	2301      	moveq	r3, #1
 8002618:	2300      	movne	r3, #0
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <_ZN12ActionsQueue7isClearEv+0x42>
			return true;
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <_ZN12ActionsQueue7isClearEv+0x44>
		}
		else {
			return false;
 8002624:	2300      	movs	r3, #0
		};
	}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <_ZN12ActionsQueue7handlerEv>:

	void handler(){
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
		telega.handler();
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fdd9 	bl	80021f4 <_ZN6Telega7handlerEv>
	}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <_ZN12ActionsQueue9fastCycleEv>:

	void fastCycle() {
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b08b      	sub	sp, #44	; 0x2c
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

		int32_t ang,angLimit;
		float Spd;
		static uint32_t count = 0;
		if (rQueue.empty()) {
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fe6d 	bl	8003336 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5emptyEv>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <_ZN12ActionsQueue9fastCycleEv+0x32>
			rQueue.push(RobotInstruction(IDLE));
 8002662:	687c      	ldr	r4, [r7, #4]
 8002664:	f107 0314 	add.w	r3, r7, #20
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f940 	bl	80028f0 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4619      	mov	r1, r3
 8002676:	4620      	mov	r0, r4
 8002678:	f000 fe3e 	bl	80032f8 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>
				break;
			default:
				break;
			}
		}
	};
 800267c:	e128      	b.n	80028d0 <_ZN12ActionsQueue9fastCycleEv+0x284>
		else if ((rQueue.size() > 1) && (rQueue.front().robotAction == IDLE)) {
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fe4b 	bl	800331c <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>
 8002686:	4603      	mov	r3, r0
 8002688:	2b01      	cmp	r3, #1
 800268a:	d909      	bls.n	80026a0 <_ZN12ActionsQueue9fastCycleEv+0x54>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fe6a 	bl	8003368 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 8002694:	4603      	mov	r3, r0
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <_ZN12ActionsQueue9fastCycleEv+0x54>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <_ZN12ActionsQueue9fastCycleEv+0x56>
 80026a0:	2300      	movs	r3, #0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d004      	beq.n	80026b0 <_ZN12ActionsQueue9fastCycleEv+0x64>
			rQueue.pop();
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fe51 	bl	8003350 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
	};
 80026ae:	e10f      	b.n	80028d0 <_ZN12ActionsQueue9fastCycleEv+0x284>
			RobotInstruction _curInstr = rQueue.front();
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fe58 	bl	8003368 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>
 80026b8:	4602      	mov	r2, r0
 80026ba:	f107 030c 	add.w	r3, r7, #12
 80026be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026c2:	e883 0003 	stmia.w	r3, {r0, r1}
			if(IS_OK(lid.waitPoint())) ;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	333c      	adds	r3, #60	; 0x3c
 80026ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe feee 	bl	80014b0 <_ZN7RPLidar9waitPointEm>
			switch (_curInstr.robotAction)
 80026d4:	7b3b      	ldrb	r3, [r7, #12]
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	f200 80f5 	bhi.w	80028c6 <_ZN12ActionsQueue9fastCycleEv+0x27a>
 80026dc:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <_ZN12ActionsQueue9fastCycleEv+0x98>)
 80026de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e2:	bf00      	nop
 80026e4:	080028c7 	.word	0x080028c7
 80026e8:	08002709 	.word	0x08002709
 80026ec:	08002727 	.word	0x08002727
 80026f0:	08002745 	.word	0x08002745
 80026f4:	08002763 	.word	0x08002763
 80026f8:	0800279f 	.word	0x0800279f
 80026fc:	080027bd 	.word	0x080027bd
 8002700:	08002869 	.word	0x08002869
 8002704:	08002781 	.word	0x08002781
				telega.setRobotSpeed(0,0);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 800270e:	eddf 0a72 	vldr	s1, [pc, #456]	; 80028d8 <_ZN12ActionsQueue9fastCycleEv+0x28c>
 8002712:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80028d8 <_ZN12ActionsQueue9fastCycleEv+0x28c>
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fd7d 	bl	8002216 <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fe16 	bl	8003350 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002724:	e0d4      	b.n	80028d0 <_ZN12ActionsQueue9fastCycleEv+0x284>
				telega.setRobotSpeed(0,TURN_SPEED);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 800272c:	eddf 0a6b 	vldr	s1, [pc, #428]	; 80028dc <_ZN12ActionsQueue9fastCycleEv+0x290>
 8002730:	ed9f 0a69 	vldr	s0, [pc, #420]	; 80028d8 <_ZN12ActionsQueue9fastCycleEv+0x28c>
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fd6e 	bl	8002216 <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fe07 	bl	8003350 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002742:	e0c5      	b.n	80028d0 <_ZN12ActionsQueue9fastCycleEv+0x284>
				telega.setRobotSpeed(0,-TURN_SPEED);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 800274a:	eddf 0a65 	vldr	s1, [pc, #404]	; 80028e0 <_ZN12ActionsQueue9fastCycleEv+0x294>
 800274e:	ed9f 0a62 	vldr	s0, [pc, #392]	; 80028d8 <_ZN12ActionsQueue9fastCycleEv+0x28c>
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fd5f 	bl	8002216 <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fdf8 	bl	8003350 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 8002760:	e0b6      	b.n	80028d0 <_ZN12ActionsQueue9fastCycleEv+0x284>
				telega.setRobotSpeed(MAX_MOT_SPEED*0.7,0);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8002768:	eddf 0a5b 	vldr	s1, [pc, #364]	; 80028d8 <_ZN12ActionsQueue9fastCycleEv+0x28c>
 800276c:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 80028e4 <_ZN12ActionsQueue9fastCycleEv+0x298>
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fd50 	bl	8002216 <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fde9 	bl	8003350 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 800277e:	e0a7      	b.n	80028d0 <_ZN12ActionsQueue9fastCycleEv+0x284>
				telega.setRobotSpeed(MAX_MOT_SPEED,0);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8002786:	eddf 0a54 	vldr	s1, [pc, #336]	; 80028d8 <_ZN12ActionsQueue9fastCycleEv+0x28c>
 800278a:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80028dc <_ZN12ActionsQueue9fastCycleEv+0x290>
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fd41 	bl	8002216 <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fdda 	bl	8003350 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 800279c:	e098      	b.n	80028d0 <_ZN12ActionsQueue9fastCycleEv+0x284>
				telega.setRobotSpeed(-MAX_MOT_SPEED*0.7, 0);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 80027a4:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80028d8 <_ZN12ActionsQueue9fastCycleEv+0x28c>
 80027a8:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80028e8 <_ZN12ActionsQueue9fastCycleEv+0x29c>
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fd32 	bl	8002216 <_ZN6Telega13setRobotSpeedEff>
				rQueue.pop();
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fdcb 	bl	8003350 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
				break;
 80027ba:	e089      	b.n	80028d0 <_ZN12ActionsQueue9fastCycleEv+0x284>
			    ang = tan.getErrorAngle(lid.getDist()); // Угол с минимальным расстоянием
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f603 4438 	addw	r4, r3, #3128	; 0xc38
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	333c      	adds	r3, #60	; 0x3c
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fd94 	bl	80012f4 <_ZN7RPLidar7getDistEv>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4619      	mov	r1, r3
 80027d0:	4620      	mov	r0, r4
 80027d2:	f7ff fdf9 	bl	80023c8 <_ZN10TanControl13getErrorAngleEPf>
 80027d6:	6278      	str	r0, [r7, #36]	; 0x24
			    if (ang) {
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d075      	beq.n	80028ca <_ZN12ActionsQueue9fastCycleEv+0x27e>
			        angLimit = tan.limitAng(ang); // Ограничение угла [-180, 180]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 80027e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fe54 	bl	8002494 <_ZN10TanControl8limitAngEl>
 80027ec:	6238      	str	r0, [r7, #32]
			        float mindist = lid.getDist((uint32_t)ang); // Минимальное расстояние
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	333c      	adds	r3, #60	; 0x3c
 80027f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fda5 	bl	8001344 <_ZN7RPLidar7getDistEi>
 80027fa:	ed87 0a07 	vstr	s0, [r7, #28]
			        spd = tan.calcTgtRobotSpds(mindist, (float)angLimit);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8002804:	6a3a      	ldr	r2, [r7, #32]
 8002806:	ee07 2a90 	vmov	s15, r2
 800280a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280e:	687c      	ldr	r4, [r7, #4]
 8002810:	eef0 0a67 	vmov.f32	s1, s15
 8002814:	ed97 0a07 	vldr	s0, [r7, #28]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fd39 	bl	8002290 <_ZN10TanControl16calcTgtRobotSpdsEff>
 800281e:	eeb0 7a40 	vmov.f32	s14, s0
 8002822:	eef0 7a60 	vmov.f32	s15, s1
 8002826:	4623      	mov	r3, r4
 8002828:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 800282c:	ed83 7a00 	vstr	s14, [r3]
 8002830:	4623      	mov	r3, r4
 8002832:	f603 4344 	addw	r3, r3, #3140	; 0xc44
 8002836:	edc3 7a00 	vstr	s15, [r3]
			        telega.setRobotSpeed(spd.lin, -spd.ang); // Угловая скорость инвертирована
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f503 6239 	add.w	r2, r3, #2960	; 0xb90
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8002846:	ed93 7a00 	vldr	s14, [r3]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f603 4344 	addw	r3, r3, #3140	; 0xc44
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	eef1 7a67 	vneg.f32	s15, s15
 8002858:	eef0 0a67 	vmov.f32	s1, s15
 800285c:	eeb0 0a47 	vmov.f32	s0, s14
 8002860:	4610      	mov	r0, r2
 8002862:	f7ff fcd8 	bl	8002216 <_ZN6Telega13setRobotSpeedEff>
				break;
 8002866:	e030      	b.n	80028ca <_ZN12ActionsQueue9fastCycleEv+0x27e>
				if (!delayInit) {
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3c48 	ldrb.w	r3, [r3, #3144]	; 0xc48
 800286e:	f083 0301 	eor.w	r3, r3, #1
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <_ZN12ActionsQueue9fastCycleEv+0x240>
					delayInit = true;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48
					delayBegin = HAL_GetTick();
 8002880:	f002 fd66 	bl	8005350 <HAL_GetTick>
 8002884:	4603      	mov	r3, r0
 8002886:	4a19      	ldr	r2, [pc, #100]	; (80028ec <_ZN12ActionsQueue9fastCycleEv+0x2a0>)
 8002888:	6013      	str	r3, [r2, #0]
				break;
 800288a:	e020      	b.n	80028ce <_ZN12ActionsQueue9fastCycleEv+0x282>
				else if (HAL_GetTick() - delayBegin >= (uint16_t)_curInstr.parametr) {
 800288c:	f002 fd60 	bl	8005350 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	4b16      	ldr	r3, [pc, #88]	; (80028ec <_ZN12ActionsQueue9fastCycleEv+0x2a0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	edd7 7a04 	vldr	s15, [r7, #16]
 800289c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a0:	ee17 2a90 	vmov	r2, s15
 80028a4:	b292      	uxth	r2, r2
 80028a6:	4293      	cmp	r3, r2
 80028a8:	bf2c      	ite	cs
 80028aa:	2301      	movcs	r3, #1
 80028ac:	2300      	movcc	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00c      	beq.n	80028ce <_ZN12ActionsQueue9fastCycleEv+0x282>
					rQueue.pop();
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fd4a 	bl	8003350 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>
					delayInit = false;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2c48 	strb.w	r2, [r3, #3144]	; 0xc48
				break;
 80028c4:	e003      	b.n	80028ce <_ZN12ActionsQueue9fastCycleEv+0x282>
				break;
 80028c6:	bf00      	nop
 80028c8:	e002      	b.n	80028d0 <_ZN12ActionsQueue9fastCycleEv+0x284>
				break;
 80028ca:	bf00      	nop
 80028cc:	e000      	b.n	80028d0 <_ZN12ActionsQueue9fastCycleEv+0x284>
				break;
 80028ce:	bf00      	nop
	};
 80028d0:	bf00      	nop
 80028d2:	372c      	adds	r7, #44	; 0x2c
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd90      	pop	{r4, r7, pc}
 80028d8:	00000000 	.word	0x00000000
 80028dc:	42c80000 	.word	0x42c80000
 80028e0:	c2c80000 	.word	0xc2c80000
 80028e4:	428c0000 	.word	0x428c0000
 80028e8:	c28c0000 	.word	0xc28c0000
 80028ec:	200001fc 	.word	0x200001fc

080028f0 <_ZN12ActionsQueue16RobotInstructionC1E7ACTIONS>:
		bool paramAvalible = false;
		bool pointAvalible = false;
		float parametr = 0;

		RobotInstruction() {};
		RobotInstruction(ACTIONS _action)
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
			: robotAction(_action) {};
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	705a      	strb	r2, [r3, #1]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	709a      	strb	r2, [r3, #2]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) // Проверяем, что прерывание от TIM3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d102      	bne.n	800293c <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        // Действия при срабатывании прерывания
    	Queue.handler();
 8002936:	4804      	ldr	r0, [pc, #16]	; (8002948 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002938:	f7ff fe79 	bl	800262e <_ZN12ActionsQueue7handlerEv>
    	//telega.handler();
    }
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40010000 	.word	0x40010000
 8002948:	20000200 	.word	0x20000200

0800294c <_Z4initv>:
void init(){
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
	  //питание для левого энкодера
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002950:	2200      	movs	r2, #0
 8002952:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002956:	4818      	ldr	r0, [pc, #96]	; (80029b8 <_Z4initv+0x6c>)
 8002958:	f003 fcbe 	bl	80062d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800295c:	2201      	movs	r2, #1
 800295e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002962:	4815      	ldr	r0, [pc, #84]	; (80029b8 <_Z4initv+0x6c>)
 8002964:	f003 fcb8 	bl	80062d8 <HAL_GPIO_WritePin>

	  //питание для правого энкодера
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002968:	2200      	movs	r2, #0
 800296a:	2110      	movs	r1, #16
 800296c:	4813      	ldr	r0, [pc, #76]	; (80029bc <_Z4initv+0x70>)
 800296e:	f003 fcb3 	bl	80062d8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002972:	2201      	movs	r2, #1
 8002974:	2120      	movs	r1, #32
 8002976:	4811      	ldr	r0, [pc, #68]	; (80029bc <_Z4initv+0x70>)
 8002978:	f003 fcae 	bl	80062d8 <HAL_GPIO_WritePin>

	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800297c:	2100      	movs	r1, #0
 800297e:	4810      	ldr	r0, [pc, #64]	; (80029c0 <_Z4initv+0x74>)
 8002980:	f006 f83e 	bl	8008a00 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002984:	2104      	movs	r1, #4
 8002986:	480e      	ldr	r0, [pc, #56]	; (80029c0 <_Z4initv+0x74>)
 8002988:	f006 f83a 	bl	8008a00 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800298c:	2108      	movs	r1, #8
 800298e:	480c      	ldr	r0, [pc, #48]	; (80029c0 <_Z4initv+0x74>)
 8002990:	f006 f836 	bl	8008a00 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002994:	210c      	movs	r1, #12
 8002996:	480a      	ldr	r0, [pc, #40]	; (80029c0 <_Z4initv+0x74>)
 8002998:	f006 f832 	bl	8008a00 <HAL_TIM_PWM_Start>

	  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 800299c:	2100      	movs	r1, #0
 800299e:	4809      	ldr	r0, [pc, #36]	; (80029c4 <_Z4initv+0x78>)
 80029a0:	f006 f984 	bl	8008cac <HAL_TIM_Encoder_Start>

	  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80029a4:	2100      	movs	r1, #0
 80029a6:	4808      	ldr	r0, [pc, #32]	; (80029c8 <_Z4initv+0x7c>)
 80029a8:	f006 f980 	bl	8008cac <HAL_TIM_Encoder_Start>

	  HAL_TIM_Base_Start_IT(&htim1);
 80029ac:	4807      	ldr	r0, [pc, #28]	; (80029cc <_Z4initv+0x80>)
 80029ae:	f005 ff75 	bl	800889c <HAL_TIM_Base_Start_IT>

}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40020400 	.word	0x40020400
 80029c0:	20000f30 	.word	0x20000f30
 80029c4:	20000ee8 	.word	0x20000ee8
 80029c8:	20000f78 	.word	0x20000f78
 80029cc:	20000ea0 	.word	0x20000ea0

080029d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029d4:	f002 fc56 	bl	8005284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029d8:	f000 f82c 	bl	8002a34 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029dc:	f000 fada 	bl	8002f94 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80029e0:	f000 fab0 	bl	8002f44 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 80029e4:	f000 fa80 	bl	8002ee8 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 80029e8:	f000 f896 	bl	8002b18 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80029ec:	f000 f928 	bl	8002c40 <_ZL12MX_TIM2_Initv>
  MX_TIM4_Init();
 80029f0:	f000 fa1c 	bl	8002e2c <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 80029f4:	f000 f982 	bl	8002cfc <_ZL12MX_TIM3_Initv>
  MX_TIM1_Init();
 80029f8:	f000 f8c2 	bl	8002b80 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80029fc:	2064      	movs	r0, #100	; 0x64
 80029fe:	f002 fcb3 	bl	8005368 <HAL_Delay>
  init();
 8002a02:	f7ff ffa3 	bl	800294c <_Z4initv>
  Queue.init();
 8002a06:	480a      	ldr	r0, [pc, #40]	; (8002a30 <main+0x60>)
 8002a08:	f7ff fdbe 	bl	8002588 <_ZN12ActionsQueue4initEv>
  HAL_Delay(100);
 8002a0c:	2064      	movs	r0, #100	; 0x64
 8002a0e:	f002 fcab 	bl	8005368 <HAL_Delay>
  while (1)
  {
//


	  if(Queue.isClear()){
 8002a12:	4807      	ldr	r0, [pc, #28]	; (8002a30 <main+0x60>)
 8002a14:	f7ff fde5 	bl	80025e2 <_ZN12ActionsQueue7isClearEv>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <main+0x56>
		  Queue.push(SET_SPEED_TURN); // Движение вперёд
 8002a1e:	2106      	movs	r1, #6
 8002a20:	4803      	ldr	r0, [pc, #12]	; (8002a30 <main+0x60>)
 8002a22:	f7ff fdc6 	bl	80025b2 <_ZN12ActionsQueue4pushE7ACTIONS>

	  }

      Queue.fastCycle();
 8002a26:	4802      	ldr	r0, [pc, #8]	; (8002a30 <main+0x60>)
 8002a28:	f7ff fe10 	bl	800264c <_ZN12ActionsQueue9fastCycleEv>
	  if(Queue.isClear()){
 8002a2c:	e7f1      	b.n	8002a12 <main+0x42>
 8002a2e:	bf00      	nop
 8002a30:	20000200 	.word	0x20000200

08002a34 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b094      	sub	sp, #80	; 0x50
 8002a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a3a:	f107 0320 	add.w	r3, r7, #32
 8002a3e:	2230      	movs	r2, #48	; 0x30
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f009 ff80 	bl	800c948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a48:	f107 030c 	add.w	r3, r7, #12
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	4b2c      	ldr	r3, [pc, #176]	; (8002b10 <_Z18SystemClock_Configv+0xdc>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	4a2b      	ldr	r2, [pc, #172]	; (8002b10 <_Z18SystemClock_Configv+0xdc>)
 8002a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a66:	6413      	str	r3, [r2, #64]	; 0x40
 8002a68:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <_Z18SystemClock_Configv+0xdc>)
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a74:	2300      	movs	r3, #0
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <_Z18SystemClock_Configv+0xe0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a25      	ldr	r2, [pc, #148]	; (8002b14 <_Z18SystemClock_Configv+0xe0>)
 8002a7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <_Z18SystemClock_Configv+0xe0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a90:	2301      	movs	r3, #1
 8002a92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002aa4:	230c      	movs	r3, #12
 8002aa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002aa8:	2360      	movs	r3, #96	; 0x60
 8002aaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002aac:	2302      	movs	r3, #2
 8002aae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab4:	f107 0320 	add.w	r3, r7, #32
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f005 fa47 	bl	8007f4c <HAL_RCC_OscConfig>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf14      	ite	ne
 8002ac4:	2301      	movne	r3, #1
 8002ac6:	2300      	moveq	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002ace:	f000 faed 	bl	80030ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ae8:	f107 030c 	add.w	r3, r7, #12
 8002aec:	2103      	movs	r1, #3
 8002aee:	4618      	mov	r0, r3
 8002af0:	f005 fca4 	bl	800843c <HAL_RCC_ClockConfig>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bf14      	ite	ne
 8002afa:	2301      	movne	r3, #1
 8002afc:	2300      	moveq	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002b04:	f000 fad2 	bl	80030ac <Error_Handler>
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3750      	adds	r7, #80	; 0x50
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40007000 	.word	0x40007000

08002b18 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b1c:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b1e:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <_ZL12MX_I2C1_Initv+0x60>)
 8002b20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b24:	4a15      	ldr	r2, [pc, #84]	; (8002b7c <_ZL12MX_I2C1_Initv+0x64>)
 8002b26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	; (8002b74 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b42:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b54:	4807      	ldr	r0, [pc, #28]	; (8002b74 <_ZL12MX_I2C1_Initv+0x5c>)
 8002b56:	f003 fbd9 	bl	800630c <HAL_I2C_Init>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf14      	ite	ne
 8002b60:	2301      	movne	r3, #1
 8002b62:	2300      	moveq	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002b6a:	f000 fa9f 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000e4c 	.word	0x20000e4c
 8002b78:	40005400 	.word	0x40005400
 8002b7c:	000186a0 	.word	0x000186a0

08002b80 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b94:	463b      	mov	r3, r7
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b9c:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <_ZL12MX_TIM1_Initv+0xb8>)
 8002b9e:	4a27      	ldr	r2, [pc, #156]	; (8002c3c <_ZL12MX_TIM1_Initv+0xbc>)
 8002ba0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8002ba2:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <_ZL12MX_TIM1_Initv+0xb8>)
 8002ba4:	2263      	movs	r2, #99	; 0x63
 8002ba6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba8:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <_ZL12MX_TIM1_Initv+0xb8>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002bae:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <_ZL12MX_TIM1_Initv+0xb8>)
 8002bb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <_ZL12MX_TIM1_Initv+0xb8>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bbc:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <_ZL12MX_TIM1_Initv+0xb8>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <_ZL12MX_TIM1_Initv+0xb8>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002bc8:	481b      	ldr	r0, [pc, #108]	; (8002c38 <_ZL12MX_TIM1_Initv+0xb8>)
 8002bca:	f005 fe17 	bl	80087fc <HAL_TIM_Base_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf14      	ite	ne
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	2300      	moveq	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8002bde:	f000 fa65 	bl	80030ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002be8:	f107 0308 	add.w	r3, r7, #8
 8002bec:	4619      	mov	r1, r3
 8002bee:	4812      	ldr	r0, [pc, #72]	; (8002c38 <_ZL12MX_TIM1_Initv+0xb8>)
 8002bf0:	f006 fab4 	bl	800915c <HAL_TIM_ConfigClockSource>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8002c04:	f000 fa52 	bl	80030ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c10:	463b      	mov	r3, r7
 8002c12:	4619      	mov	r1, r3
 8002c14:	4808      	ldr	r0, [pc, #32]	; (8002c38 <_ZL12MX_TIM1_Initv+0xb8>)
 8002c16:	f006 fe5d 	bl	80098d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8002c2a:	f000 fa3f 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002c2e:	bf00      	nop
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000ea0 	.word	0x20000ea0
 8002c3c:	40010000 	.word	0x40010000

08002c40 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08c      	sub	sp, #48	; 0x30
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c46:	f107 030c 	add.w	r3, r7, #12
 8002c4a:	2224      	movs	r2, #36	; 0x24
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f009 fe7a 	bl	800c948 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c5c:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <_ZL12MX_TIM2_Initv+0xb8>)
 8002c5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <_ZL12MX_TIM2_Initv+0xb8>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <_ZL12MX_TIM2_Initv+0xb8>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002c70:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <_ZL12MX_TIM2_Initv+0xb8>)
 8002c72:	f04f 32ff 	mov.w	r2, #4294967295
 8002c76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c78:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <_ZL12MX_TIM2_Initv+0xb8>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <_ZL12MX_TIM2_Initv+0xb8>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c84:	2301      	movs	r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002ca8:	f107 030c 	add.w	r3, r7, #12
 8002cac:	4619      	mov	r1, r3
 8002cae:	4812      	ldr	r0, [pc, #72]	; (8002cf8 <_ZL12MX_TIM2_Initv+0xb8>)
 8002cb0:	f005 ff56 	bl	8008b60 <HAL_TIM_Encoder_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8002cc4:	f000 f9f2 	bl	80030ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4808      	ldr	r0, [pc, #32]	; (8002cf8 <_ZL12MX_TIM2_Initv+0xb8>)
 8002cd6:	f006 fdfd 	bl	80098d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bf14      	ite	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	2300      	moveq	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8002cea:	f000 f9df 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cee:	bf00      	nop
 8002cf0:	3730      	adds	r7, #48	; 0x30
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000ee8 	.word	0x20000ee8

08002cfc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d02:	f107 0320 	add.w	r3, r7, #32
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	60da      	str	r2, [r3, #12]
 8002d18:	611a      	str	r2, [r3, #16]
 8002d1a:	615a      	str	r2, [r3, #20]
 8002d1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d1e:	4b41      	ldr	r3, [pc, #260]	; (8002e24 <_ZL12MX_TIM3_Initv+0x128>)
 8002d20:	4a41      	ldr	r2, [pc, #260]	; (8002e28 <_ZL12MX_TIM3_Initv+0x12c>)
 8002d22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d24:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <_ZL12MX_TIM3_Initv+0x128>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2a:	4b3e      	ldr	r3, [pc, #248]	; (8002e24 <_ZL12MX_TIM3_Initv+0x128>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002d30:	4b3c      	ldr	r3, [pc, #240]	; (8002e24 <_ZL12MX_TIM3_Initv+0x128>)
 8002d32:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d38:	4b3a      	ldr	r3, [pc, #232]	; (8002e24 <_ZL12MX_TIM3_Initv+0x128>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d3e:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <_ZL12MX_TIM3_Initv+0x128>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d44:	4837      	ldr	r0, [pc, #220]	; (8002e24 <_ZL12MX_TIM3_Initv+0x128>)
 8002d46:	f005 fe0b 	bl	8008960 <HAL_TIM_PWM_Init>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf14      	ite	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	2300      	moveq	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8002d5a:	f000 f9a7 	bl	80030ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d66:	f107 0320 	add.w	r3, r7, #32
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	482d      	ldr	r0, [pc, #180]	; (8002e24 <_ZL12MX_TIM3_Initv+0x128>)
 8002d6e:	f006 fdb1 	bl	80098d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf14      	ite	ne
 8002d78:	2301      	movne	r3, #1
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8002d82:	f000 f993 	bl	80030ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d86:	2360      	movs	r3, #96	; 0x60
 8002d88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2200      	movs	r2, #0
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4821      	ldr	r0, [pc, #132]	; (8002e24 <_ZL12MX_TIM3_Initv+0x128>)
 8002d9e:	f006 f91b 	bl	8008fd8 <HAL_TIM_PWM_ConfigChannel>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8002db2:	f000 f97b 	bl	80030ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	2204      	movs	r2, #4
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4819      	ldr	r0, [pc, #100]	; (8002e24 <_ZL12MX_TIM3_Initv+0x128>)
 8002dbe:	f006 f90b 	bl	8008fd8 <HAL_TIM_PWM_ConfigChannel>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf14      	ite	ne
 8002dc8:	2301      	movne	r3, #1
 8002dca:	2300      	moveq	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8002dd2:	f000 f96b 	bl	80030ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	2208      	movs	r2, #8
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4811      	ldr	r0, [pc, #68]	; (8002e24 <_ZL12MX_TIM3_Initv+0x128>)
 8002dde:	f006 f8fb 	bl	8008fd8 <HAL_TIM_PWM_ConfigChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 8002df2:	f000 f95b 	bl	80030ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	220c      	movs	r2, #12
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4809      	ldr	r0, [pc, #36]	; (8002e24 <_ZL12MX_TIM3_Initv+0x128>)
 8002dfe:	f006 f8eb 	bl	8008fd8 <HAL_TIM_PWM_ConfigChannel>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 8002e12:	f000 f94b 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e16:	4803      	ldr	r0, [pc, #12]	; (8002e24 <_ZL12MX_TIM3_Initv+0x128>)
 8002e18:	f001 ff6a 	bl	8004cf0 <HAL_TIM_MspPostInit>

}
 8002e1c:	bf00      	nop
 8002e1e:	3728      	adds	r7, #40	; 0x28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000f30 	.word	0x20000f30
 8002e28:	40000400 	.word	0x40000400

08002e2c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	; 0x30
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e32:	f107 030c 	add.w	r3, r7, #12
 8002e36:	2224      	movs	r2, #36	; 0x24
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f009 fd84 	bl	800c948 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002e4a:	4a26      	ldr	r2, [pc, #152]	; (8002ee4 <_ZL12MX_TIM4_Initv+0xb8>)
 8002e4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002e4e:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e54:	4b22      	ldr	r3, [pc, #136]	; (8002ee0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002e5a:	4b21      	ldr	r3, [pc, #132]	; (8002ee0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e62:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e68:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e76:	2301      	movs	r3, #1
 8002e78:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e82:	2300      	movs	r3, #0
 8002e84:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e86:	2301      	movs	r3, #1
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002e92:	f107 030c 	add.w	r3, r7, #12
 8002e96:	4619      	mov	r1, r3
 8002e98:	4811      	ldr	r0, [pc, #68]	; (8002ee0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002e9a:	f005 fe61 	bl	8008b60 <HAL_TIM_Encoder_Init>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf14      	ite	ne
 8002ea4:	2301      	movne	r3, #1
 8002ea6:	2300      	moveq	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8002eae:	f000 f8fd 	bl	80030ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4808      	ldr	r0, [pc, #32]	; (8002ee0 <_ZL12MX_TIM4_Initv+0xb4>)
 8002ec0:	f006 fd08 	bl	80098d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8002ed4:	f000 f8ea 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ed8:	bf00      	nop
 8002eda:	3730      	adds	r7, #48	; 0x30
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000f78 	.word	0x20000f78
 8002ee4:	40000800 	.word	0x40000800

08002ee8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002eec:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002eee:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f00:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f06:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f0e:	220c      	movs	r2, #12
 8002f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f18:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f1e:	4807      	ldr	r0, [pc, #28]	; (8002f3c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f20:	f006 fd5a 	bl	80099d8 <HAL_UART_Init>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bf14      	ite	ne
 8002f2a:	2301      	movne	r3, #1
 8002f2c:	2300      	moveq	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002f34:	f000 f8ba 	bl	80030ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f38:	bf00      	nop
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000fc0 	.word	0x20000fc0
 8002f40:	40004400 	.word	0x40004400

08002f44 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <_ZL11MX_DMA_Initv+0x4c>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a0f      	ldr	r2, [pc, #60]	; (8002f90 <_ZL11MX_DMA_Initv+0x4c>)
 8002f54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <_ZL11MX_DMA_Initv+0x4c>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2100      	movs	r1, #0
 8002f6a:	2010      	movs	r0, #16
 8002f6c:	f002 fb1f 	bl	80055ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002f70:	2010      	movs	r0, #16
 8002f72:	f002 fb38 	bl	80055e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002f76:	2200      	movs	r2, #0
 8002f78:	2100      	movs	r1, #0
 8002f7a:	2011      	movs	r0, #17
 8002f7c:	f002 fb17 	bl	80055ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002f80:	2011      	movs	r0, #17
 8002f82:	f002 fb30 	bl	80055e6 <HAL_NVIC_EnableIRQ>

}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800

08002f94 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	; 0x28
 8002f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9a:	f107 0314 	add.w	r3, r7, #20
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	60da      	str	r2, [r3, #12]
 8002fa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	4b3b      	ldr	r3, [pc, #236]	; (800309c <_ZL12MX_GPIO_Initv+0x108>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a3a      	ldr	r2, [pc, #232]	; (800309c <_ZL12MX_GPIO_Initv+0x108>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b38      	ldr	r3, [pc, #224]	; (800309c <_ZL12MX_GPIO_Initv+0x108>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	4b34      	ldr	r3, [pc, #208]	; (800309c <_ZL12MX_GPIO_Initv+0x108>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a33      	ldr	r2, [pc, #204]	; (800309c <_ZL12MX_GPIO_Initv+0x108>)
 8002fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b31      	ldr	r3, [pc, #196]	; (800309c <_ZL12MX_GPIO_Initv+0x108>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	4b2d      	ldr	r3, [pc, #180]	; (800309c <_ZL12MX_GPIO_Initv+0x108>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a2c      	ldr	r2, [pc, #176]	; (800309c <_ZL12MX_GPIO_Initv+0x108>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b2a      	ldr	r3, [pc, #168]	; (800309c <_ZL12MX_GPIO_Initv+0x108>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	4b26      	ldr	r3, [pc, #152]	; (800309c <_ZL12MX_GPIO_Initv+0x108>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a25      	ldr	r2, [pc, #148]	; (800309c <_ZL12MX_GPIO_Initv+0x108>)
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b23      	ldr	r3, [pc, #140]	; (800309c <_ZL12MX_GPIO_Initv+0x108>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800301a:	2200      	movs	r2, #0
 800301c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003020:	481f      	ldr	r0, [pc, #124]	; (80030a0 <_ZL12MX_GPIO_Initv+0x10c>)
 8003022:	f003 f959 	bl	80062d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8003026:	2200      	movs	r2, #0
 8003028:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800302c:	481d      	ldr	r0, [pc, #116]	; (80030a4 <_ZL12MX_GPIO_Initv+0x110>)
 800302e:	f003 f953 	bl	80062d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003032:	2200      	movs	r2, #0
 8003034:	2130      	movs	r1, #48	; 0x30
 8003036:	481c      	ldr	r0, [pc, #112]	; (80030a8 <_ZL12MX_GPIO_Initv+0x114>)
 8003038:	f003 f94e 	bl	80062d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800303c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003042:	2301      	movs	r3, #1
 8003044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304a:	2300      	movs	r3, #0
 800304c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800304e:	f107 0314 	add.w	r3, r7, #20
 8003052:	4619      	mov	r1, r3
 8003054:	4812      	ldr	r0, [pc, #72]	; (80030a0 <_ZL12MX_GPIO_Initv+0x10c>)
 8003056:	f002 fed7 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800305a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800305e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003060:	2301      	movs	r3, #1
 8003062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003068:	2300      	movs	r3, #0
 800306a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	4619      	mov	r1, r3
 8003072:	480c      	ldr	r0, [pc, #48]	; (80030a4 <_ZL12MX_GPIO_Initv+0x110>)
 8003074:	f002 fec8 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003078:	2330      	movs	r3, #48	; 0x30
 800307a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800307c:	2301      	movs	r3, #1
 800307e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003084:	2300      	movs	r3, #0
 8003086:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	4619      	mov	r1, r3
 800308e:	4806      	ldr	r0, [pc, #24]	; (80030a8 <_ZL12MX_GPIO_Initv+0x114>)
 8003090:	f002 feba 	bl	8005e08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003094:	bf00      	nop
 8003096:	3728      	adds	r7, #40	; 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	40020800 	.word	0x40020800
 80030a4:	40020000 	.word	0x40020000
 80030a8:	40020400 	.word	0x40020400

080030ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030b0:	b672      	cpsid	i
}
 80030b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030b4:	e7fe      	b.n	80030b4 <Error_Handler+0x8>

080030b6 <_ZNSaIfEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f95f 	bl	8003382 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f95e 	bl	8003398 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80030e6:	b5b0      	push	{r4, r5, r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681c      	ldr	r4, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 f995 	bl	8003428 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80030fe:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003100:	461a      	mov	r2, r3
 8003102:	4629      	mov	r1, r5
 8003104:	4620      	mov	r0, r4
 8003106:	f000 f99a 	bl	800343e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f805 	bl	800311c <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bdb0      	pop	{r4, r5, r7, pc}

0800311c <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8003134:	461a      	mov	r2, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f99d 	bl	8003476 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fb33 	bl	80017aa <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 800314e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003150:	b085      	sub	sp, #20
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8003158:	687c      	ldr	r4, [r7, #4]
 800315a:	6838      	ldr	r0, [r7, #0]
 800315c:	f000 f99e 	bl	800349c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8003160:	4605      	mov	r5, r0
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f9b7 	bl	80034d8 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800316a:	4602      	mov	r2, r0
 800316c:	f107 030c 	add.w	r3, r7, #12
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f9a2 	bl	80034bc <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 8003178:	f107 030c 	add.w	r3, r7, #12
 800317c:	461a      	mov	r2, r3
 800317e:	4629      	mov	r1, r5
 8003180:	4620      	mov	r0, r4
 8003182:	f000 f93d 	bl	8003400 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 8003186:	f107 030c 	add.w	r3, r7, #12
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff ff9f 	bl	80030ce <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8003190:	6838      	ldr	r0, [r7, #0]
 8003192:	f000 f9ac 	bl	80034ee <_ZNKSt6vectorIfSaIfEE5beginEv>
 8003196:	4605      	mov	r5, r0
 8003198:	6838      	ldr	r0, [r7, #0]
 800319a:	f000 f9b8 	bl	800350e <_ZNKSt6vectorIfSaIfEE3endEv>
 800319e:	4606      	mov	r6, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f93e 	bl	8003428 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80031ac:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80031ae:	4622      	mov	r2, r4
 80031b0:	4631      	mov	r1, r6
 80031b2:	4628      	mov	r0, r5
 80031b4:	f000 f9bc 	bl	8003530 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 80031b8:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	605a      	str	r2, [r3, #4]
      }
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031c8 <_ZNSt6vectorIfSaIfEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
      }
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>:
      vector(initializer_list<value_type> __l,
 80031e8:	b5b0      	push	{r4, r5, r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	1d38      	adds	r0, r7, #4
 80031f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80031f6:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6839      	ldr	r1, [r7, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f9a8 	bl	8003552 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	4618      	mov	r0, r3
 8003206:	f000 f9b3 	bl	8003570 <_ZNKSt16initializer_listIfE5beginEv>
 800320a:	4604      	mov	r4, r0
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	4618      	mov	r0, r3
 8003210:	f000 f9ba 	bl	8003588 <_ZNKSt16initializer_listIfE3endEv>
 8003214:	4602      	mov	r2, r0
 8003216:	462b      	mov	r3, r5
 8003218:	4621      	mov	r1, r4
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f9c6 	bl	80035ac <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>
      }
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bdb0      	pop	{r4, r5, r7, pc}

0800322a <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800322a:	b5b0      	push	{r4, r5, r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	ed87 0a01 	vstr	s0, [r7, #4]
 8003234:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd f98e 	bl	8000558 <__aeabi_f2d>
 800323c:	4604      	mov	r4, r0
 800323e:	460d      	mov	r5, r1
 8003240:	6838      	ldr	r0, [r7, #0]
 8003242:	f7fd f977 	bl	8000534 <__aeabi_i2d>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	ec43 2b11 	vmov	d1, r2, r3
 800324e:	ec45 4b10 	vmov	d0, r4, r5
 8003252:	f007 fda5 	bl	800ada0 <pow>
 8003256:	eeb0 7a40 	vmov.f32	s14, s0
 800325a:	eef0 7a60 	vmov.f32	s15, s1
    }
 800325e:	eeb0 0a47 	vmov.f32	s0, s14
 8003262:	eef0 0a67 	vmov.f32	s1, s15
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bdb0      	pop	{r4, r5, r7, pc}

0800326c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f9dd 	bl	8003636 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEEC1IS4_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
	: c() { }
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4618      	mov	r0, r3
 8003292:	2328      	movs	r3, #40	; 0x28
 8003294:	461a      	mov	r2, r3
 8003296:	2100      	movs	r1, #0
 8003298:	f009 fb56 	bl	800c948 <memset>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff ffe4 	bl	800326c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b08a      	sub	sp, #40	; 0x28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80032b6:	f107 0308 	add.w	r3, r7, #8
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f9ed 	bl	800369c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>
 80032c2:	f107 0318 	add.w	r3, r7, #24
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f9f6 	bl	80036ba <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE3endEv>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fa01 	bl	80036d8 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f107 0218 	add.w	r2, r7, #24
 80032dc:	f107 0108 	add.w	r1, r7, #8
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fa20 	bl	8003726 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f9b5 	bl	8003658 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4618      	mov	r0, r3
 80032f2:	3728      	adds	r7, #40	; 0x28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4pushEOS1_>:
      push(const value_type& __x)
      { c.push_back(__x); }

#if __cplusplus >= 201103L
      void
      push(value_type&& __x)
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8003302:	687c      	ldr	r4, [r7, #4]
 8003304:	6838      	ldr	r0, [r7, #0]
 8003306:	f000 fa1b 	bl	8003740 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>
 800330a:	4603      	mov	r3, r0
 800330c:	4619      	mov	r1, r3
 800330e:	4620      	mov	r0, r4
 8003310:	f000 fa21 	bl	8003756 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9push_backEOS1_>
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bd90      	pop	{r4, r7, pc}

0800331c <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE4sizeEv>:
      size() const
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fa26 	bl	8003778 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>
 800332c:	4603      	mov	r3, r0
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <_ZNKSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5emptyEv>:
      empty() const
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fa2b 	bl	800379c <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5emptyEv>
 8003346:	4603      	mov	r3, r0
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fa30 	bl	80037c0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv>
      }
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEE5frontEv>:
      front()
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	return c.front();
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fa48 	bl	8003808 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5frontEv>
 8003378:	4603      	mov	r3, r0
      }
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80033ba:	f107 030c 	add.w	r3, r7, #12
 80033be:	6839      	ldr	r1, [r7, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f84a 	bl	800345a <_ZNSaIfEC1ERKS_>
 80033c6:	f107 030c 	add.w	r3, r7, #12
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fa30 	bl	8003830 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 80033d0:	4602      	mov	r2, r0
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4293      	cmp	r3, r2
 80033d6:	bf8c      	ite	hi
 80033d8:	2301      	movhi	r3, #1
 80033da:	2300      	movls	r3, #0
 80033dc:	b2dc      	uxtb	r4, r3
 80033de:	f107 030c 	add.w	r3, r7, #12
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fe73 	bl	80030ce <_ZNSaIfED1Ev>
 80033e8:	2c00      	cmp	r4, #0
 80033ea:	d002      	beq.n	80033f2 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 80033ec:	4803      	ldr	r0, [pc, #12]	; (80033fc <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_+0x4c>)
 80033ee:	f007 fbed 	bl	800abcc <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 80033f2:	687b      	ldr	r3, [r7, #4]
      }
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	0800f360 	.word	0x0800f360

08003400 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fa27 	bl	8003864 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fa35 	bl	8003888 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800344a:	68b9      	ldr	r1, [r7, #8]
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fa36 	bl	80038be <_ZSt8_DestroyIPfEvT_S1_>
    }
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8003464:	6839      	ldr	r1, [r7, #0]
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fa36 	bl	80038d8 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
	if (__p)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fa2e 	bl	80038f0 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	109b      	asrs	r3, r3, #2
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6839      	ldr	r1, [r7, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fa1f 	bl	800390e <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	f107 030c 	add.w	r3, r7, #12
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fa12 	bl	8003928 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	1d1a      	adds	r2, r3, #4
 800351a:	f107 030c 	add.w	r3, r7, #12
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f000 fa01 	bl	8003928 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fa00 	bl	8003948 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003548:	4603      	mov	r3, r0
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6839      	ldr	r1, [r7, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f000 f97f 	bl	8003864 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ffed 	bl	8003570 <_ZNKSt16initializer_listIfE5beginEv>
 8003596:	4604      	mov	r4, r0
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f9e7 	bl	800396c <_ZNKSt16initializer_listIfE4sizeEv>
 800359e:	4603      	mov	r3, r0
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4423      	add	r3, r4
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd90      	pop	{r4, r7, pc}

080035ac <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	68b8      	ldr	r0, [r7, #8]
 80035be:	f000 f9e1 	bl	8003984 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 80035c2:	4603      	mov	r3, r0
 80035c4:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80035c6:	68fc      	ldr	r4, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff ff2c 	bl	8003428 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 80035d0:	4603      	mov	r3, r0
 80035d2:	4619      	mov	r1, r3
 80035d4:	6978      	ldr	r0, [r7, #20]
 80035d6:	f7ff feeb 	bl	80033b0 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEjRKS0_>
 80035da:	4603      	mov	r3, r0
 80035dc:	4619      	mov	r1, r3
 80035de:	4620      	mov	r0, r4
 80035e0:	f000 f9e4 	bl	80039ac <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	441a      	add	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff12 	bl	8003428 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8003604:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8003606:	4622      	mov	r2, r4
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	68b8      	ldr	r0, [r7, #8]
 800360c:	f000 f9e2 	bl	80039d4 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
 8003610:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	605a      	str	r2, [r3, #4]
	}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	bd90      	pop	{r4, r7, pc}

0800361e <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9f5 	bl	8003a16 <_ZNSaIN12ActionsQueue16RobotInstructionEED1Ev>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EEC1Ev>:
      _Deque_base()
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f9d8 	bl	80039f6 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8003646:	2100      	movs	r1, #0
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f9f0 	bl	8003a2e <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_initialize_mapEj>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d010      	beq.n	800368a <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003670:	3304      	adds	r3, #4
 8003672:	461a      	mov	r2, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fa3d 	bl	8003af4 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6819      	ldr	r1, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	461a      	mov	r2, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fa4f 	bl	8003b28 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ffc6 	bl	800361e <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implD1Ev>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	3308      	adds	r3, #8
 80036aa:	4619      	mov	r1, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f81e 	bl	80036ee <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	3318      	adds	r3, #24
 80036c8:	4619      	mov	r1, r3
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f80f 	bl	80036ee <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8003726:	b480      	push	{r7}
 8003728:	b08d      	sub	sp, #52	; 0x34
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8003734:	bf00      	nop
 8003736:	3734      	adds	r7, #52	; 0x34
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8003760:	6838      	ldr	r0, [r7, #0]
 8003762:	f7ff ffed 	bl	8003740 <_ZSt4moveIRN12ActionsQueue16RobotInstructionEEONSt16remove_referenceIT_E4typeEOS4_>
 8003766:	4603      	mov	r3, r0
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f9f8 	bl	8003b60 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f103 0218 	add.w	r2, r3, #24
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3308      	adds	r3, #8
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f000 fa12 	bl	8003bb6 <_ZStmiRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>
 8003792:	4603      	mov	r3, r0
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f103 0218 	add.w	r2, r3, #24
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3308      	adds	r3, #8
 80037ae:	4619      	mov	r1, r3
 80037b0:	4610      	mov	r0, r2
 80037b2:	f000 fa24 	bl	8003bfe <_ZSteqRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>
 80037b6:	4603      	mov	r3, r0
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	3b08      	subs	r3, #8
	if (this->_M_impl._M_start._M_cur
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d011      	beq.n	80037fa <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff7d 	bl	80036d8 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 80037de:	4602      	mov	r2, r0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f000 fa1d 	bl	8003c26 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>
	    ++this->_M_impl._M_start._M_cur;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f103 0208 	add.w	r2, r3, #8
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	609a      	str	r2, [r3, #8]
      }
 80037f8:	e002      	b.n	8003800 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fa20 	bl	8003c40 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_pop_front_auxEv>
      }
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
	return *begin();
 8003810:	f107 0308 	add.w	r3, r7, #8
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff ff40 	bl	800369c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE5beginEv>
 800381c:	f107 0308 	add.w	r3, r7, #8
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fa35 	bl	8003c90 <_ZNKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EdeEv>
 8003826:	4603      	mov	r3, r0
      }
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8003838:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800383c:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa32 	bl	8003ca8 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8003844:	4603      	mov	r3, r0
 8003846:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003848:	f107 0208 	add.w	r2, r7, #8
 800384c:	f107 030c 	add.w	r3, r7, #12
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fa34 	bl	8003cc0 <_ZSt3minIjERKT_S2_S2_>
 8003858:	4603      	mov	r3, r0
 800385a:	681b      	ldr	r3, [r3, #0]
      }
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800386e:	6839      	ldr	r1, [r7, #0]
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff fdf2 	bl	800345a <_ZNSaIfEC1ERKS_>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fa35 	bl	8003ce8 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8003892:	6839      	ldr	r1, [r7, #0]
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f889 	bl	80039ac <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 800389a:	4602      	mov	r2, r0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	441a      	add	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	609a      	str	r2, [r3, #8]
      }
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80038c8:	6839      	ldr	r1, [r7, #0]
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa20 	bl	8003d10 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fa10 	bl	8003d26 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8003918:	6839      	ldr	r1, [r7, #0]
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff fd9d 	bl	800345a <_ZNSaIfEC1ERKS_>
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f9f2 	bl	8003d46 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8003962:	4603      	mov	r3, r0
    }
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8003984:	b5b0      	push	{r4, r5, r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800398e:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8003990:	1d3b      	adds	r3, r7, #4
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f9e7 	bl	8003d66 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8003998:	462a      	mov	r2, r5
 800399a:	6839      	ldr	r1, [r7, #0]
 800399c:	4620      	mov	r0, r4
 800399e:	f000 f9ed 	bl	8003d7c <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 80039a2:	4603      	mov	r3, r0
    }
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bdb0      	pop	{r4, r5, r7, pc}

080039ac <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6839      	ldr	r1, [r7, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 f9eb 	bl	8003d9c <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 80039c6:	4603      	mov	r3, r0
 80039c8:	e000      	b.n	80039cc <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 80039ca:	2300      	movs	r3, #0
      }
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f9e7 	bl	8003dba <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>
 80039ec:	4603      	mov	r3, r0
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f9ed 	bl	8003dde <_ZNSaIN12ActionsQueue16RobotInstructionEEC1Ev>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f9f5 	bl	8003df6 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <_ZNSaIN12ActionsQueue16RobotInstructionEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fa02 	bl	8003e28 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEED1Ev>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003a2e:	b590      	push	{r4, r7, lr}
 8003a30:	b089      	sub	sp, #36	; 0x24
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003a38:	2008      	movs	r0, #8
 8003a3a:	f7fd fe6f 	bl	800171c <_ZSt16__deque_buf_sizej>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a46:	3301      	adds	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3302      	adds	r3, #2
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	f107 0210 	add.w	r2, r7, #16
 8003a58:	f107 030c 	add.w	r3, r7, #12
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f9ed 	bl	8003e3e <_ZSt3maxIjERKT_S2_S2_>
 8003a64:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4619      	mov	r1, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f9f7 	bl	8003e66 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6859      	ldr	r1, [r3, #4]
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	1acb      	subs	r3, r1, r3
 8003a8a:	085b      	lsrs	r3, r3, #1
 8003a8c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003a8e:	4413      	add	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4413      	add	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	69b9      	ldr	r1, [r7, #24]
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f9fd 	bl	8003ea0 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	69b9      	ldr	r1, [r7, #24]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fa11 	bl	8003ed4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f103 0218 	add.w	r2, r3, #24
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	3b04      	subs	r3, #4
 8003abc:	4619      	mov	r1, r3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	f000 fa08 	bl	8003ed4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8003ad0:	2008      	movs	r0, #8
 8003ad2:	f7fd fe23 	bl	800171c <_ZSt16__deque_buf_sizej>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ade:	fb01 f202 	mul.w	r2, r1, r2
 8003ae2:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	619a      	str	r2, [r3, #24]
    }
 8003aec:	bf00      	nop
 8003aee:	3724      	adds	r7, #36	; 0x24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd90      	pop	{r4, r7, pc}

08003af4 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d209      	bcs.n	8003b20 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4619      	mov	r1, r3
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f9f7 	bl	8003f06 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	e7f1      	b.n	8003b04 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8003b20:	bf00      	nop
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003b34:	f107 0314 	add.w	r3, r7, #20
 8003b38:	68f9      	ldr	r1, [r7, #12]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 f9f6 	bl	8003f2c <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fa0c 	bl	8003f66 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003b4e:	f107 0314 	add.w	r3, r7, #20
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f9fb 	bl	8003f4e <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>
      }
 8003b58:	bf00      	nop
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 8003b60:	b5b0      	push	{r4, r5, r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	3b08      	subs	r3, #8
	if (this->_M_impl._M_finish._M_cur
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d012      	beq.n	8003b9e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8003b78:	687c      	ldr	r4, [r7, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699d      	ldr	r5, [r3, #24]
 8003b7e:	6838      	ldr	r0, [r7, #0]
 8003b80:	f000 fa00 	bl	8003f84 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003b84:	4603      	mov	r3, r0
 8003b86:	461a      	mov	r2, r3
 8003b88:	4629      	mov	r1, r5
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	f000 fa05 	bl	8003f9a <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	f103 0208 	add.w	r2, r3, #8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8003b9c:	e007      	b.n	8003bae <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8003b9e:	6838      	ldr	r0, [r7, #0]
 8003ba0:	f000 f9f0 	bl	8003f84 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fa09 	bl	8003fc0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>
      }
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bdb0      	pop	{r4, r5, r7, pc}

08003bb6 <_ZStmiRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8003bc0:	f000 fa42 	bl	8004048 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	109b      	asrs	r3, r3, #2
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6811      	ldr	r1, [r2, #0]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6852      	ldr	r2, [r2, #4]
 8003be2:	1a8a      	subs	r2, r1, r2
 8003be4:	10d2      	asrs	r2, r2, #3
 8003be6:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	6891      	ldr	r1, [r2, #8]
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	1a8a      	subs	r2, r1, r2
 8003bf2:	10d2      	asrs	r2, r2, #3
 8003bf4:	4413      	add	r3, r2
      }
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <_ZSteqRKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003c30:	6839      	ldr	r1, [r7, #0]
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fa10 	bl	8004058 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE7destroyIS2_EEvPT_>
	}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fd44 	bl	80036d8 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8003c50:	4602      	mov	r2, r0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f7ff ffe4 	bl	8003c26 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f000 f94d 	bl	8003f06 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f103 0208 	add.w	r2, r3, #8
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f000 f92a 	bl	8003ed4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	609a      	str	r2, [r3, #8]
    }
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <_ZNKSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f9dc 	bl	800406e <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8003cb6:	4603      	mov	r3, r0
      }
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d201      	bcs.n	8003cda <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	e000      	b.n	8003cdc <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003cda:	687b      	ldr	r3, [r7, #4]
    }
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	605a      	str	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	609a      	str	r2, [r3, #8]
	{ }
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4619      	mov	r1, r3
 8003d38:	68b8      	ldr	r0, [r7, #8]
 8003d3a:	f006 ff31 	bl	800aba0 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f995 	bl	8004086 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8003d6e:	bf00      	nop
 8003d70:	4618      	mov	r0, r3
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	109b      	asrs	r3, r3, #2
    }
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003da6:	2200      	movs	r2, #0
 8003da8:	6839      	ldr	r1, [r7, #0]
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f983 	bl	80040b6 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f98f 	bl	80040f2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>
 8003dd4:	4603      	mov	r3, r0
    }
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <_ZNSaIN12ActionsQueue16RobotInstructionEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f993 	bl	8004112 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEEC1Ev>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f98a 	bl	8004128 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3318      	adds	r3, #24
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 f985 	bl	8004128 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>
	{ }
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d201      	bcs.n	8003e58 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	e000      	b.n	8003e5a <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003e58:	687b      	ldr	r3, [r7, #4]
    }
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8003e66:	b590      	push	{r4, r7, lr}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003e70:	f107 030c 	add.w	r3, r7, #12
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f858 	bl	8003f2c <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003e7c:	f107 030c 	add.w	r3, r7, #12
 8003e80:	6839      	ldr	r1, [r7, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f967 	bl	8004156 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE8allocateERS3_j>
 8003e88:	4604      	mov	r4, r0
 8003e8a:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003e8c:	f107 030c 	add.w	r3, r7, #12
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 f85c 	bl	8003f4e <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003e96:	4623      	mov	r3, r4
      }
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd90      	pop	{r4, r7, pc}

08003ea0 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d209      	bcs.n	8003ecc <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f95b 	bl	8004174 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	e7f1      	b.n	8003eb0 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8003ecc:	bf00      	nop
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685c      	ldr	r4, [r3, #4]
 8003ef0:	f000 f8aa 	bl	8004048 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	18e2      	adds	r2, r4, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	609a      	str	r2, [r3, #8]
      }
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd90      	pop	{r4, r7, pc}

08003f06 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8003f06:	b590      	push	{r4, r7, lr}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8003f10:	687c      	ldr	r4, [r7, #4]
 8003f12:	2008      	movs	r0, #8
 8003f14:	f7fd fc02 	bl	800171c <_ZSt16__deque_buf_sizej>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	6839      	ldr	r1, [r7, #0]
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f000 f93a 	bl	8004198 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE10deallocateERS2_PS1_j>
      }
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd90      	pop	{r4, r7, pc}

08003f2c <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8003f36:	6838      	ldr	r0, [r7, #0]
 8003f38:	f000 f93d 	bl	80041b6 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f943 	bl	80041cc <_ZNSaIPN12ActionsQueue16RobotInstructionEEC1IS0_EERKSaIT_E>
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <_ZNSaIPN12ActionsQueue16RobotInstructionEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f945 	bl	80041e6 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEED1Ev>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f940 	bl	80041fc <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE10deallocateEPS3_j>
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff ffec 	bl	8003f84 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003fac:	4603      	mov	r3, r0
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f932 	bl	800421c <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8003fc0:	b5b0      	push	{r4, r5, r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff fbd4 	bl	8003778 <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE4sizeEv>
 8003fd0:	4604      	mov	r4, r0
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f93b 	bl	800424e <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE8max_sizeEv>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	429c      	cmp	r4, r3
 8003fdc:	bf0c      	ite	eq
 8003fde:	2301      	moveq	r3, #1
 8003fe0:	2300      	movne	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8003fe8:	4816      	ldr	r0, [pc, #88]	; (8004044 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x84>)
 8003fea:	f006 fdef 	bl	800abcc <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8003fee:	2101      	movs	r1, #1
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f93d 	bl	8004270 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	1d1c      	adds	r4, r3, #4
 8003ffe:	4610      	mov	r0, r2
 8004000:	f000 f8b8 	bl	8004174 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>
 8004004:	4603      	mov	r3, r0
 8004006:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8004008:	687c      	ldr	r4, [r7, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699d      	ldr	r5, [r3, #24]
 800400e:	6838      	ldr	r0, [r7, #0]
 8004010:	f7ff ffb8 	bl	8003f84 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004014:	4603      	mov	r3, r0
 8004016:	461a      	mov	r2, r3
 8004018:	4629      	mov	r1, r5
 800401a:	4620      	mov	r0, r4
 800401c:	f7ff ffbd 	bl	8003f9a <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f103 0218 	add.w	r2, r3, #24
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	3304      	adds	r3, #4
 800402c:	4619      	mov	r1, r3
 800402e:	4610      	mov	r0, r2
 8004030:	f7ff ff50 	bl	8003ed4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	619a      	str	r2, [r3, #24]
      }
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bdb0      	pop	{r4, r5, r7, pc}
 8004044:	0800f394 	.word	0x0800f394

08004048 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800404c:	2008      	movs	r0, #8
 800404e:	f7fd fb65 	bl	800171c <_ZSt16__deque_buf_sizej>
 8004052:	4603      	mov	r3, r0
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}

08004058 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE7destroyIS2_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f915 	bl	80042a6 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 800407c:	4603      	mov	r3, r0
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8004086:	b590      	push	{r4, r7, lr}
 8004088:	b085      	sub	sp, #20
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f913 	bl	80042be <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8004098:	4604      	mov	r4, r0
 800409a:	68b8      	ldr	r0, [r7, #8]
 800409c:	f000 f90f 	bl	80042be <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 80040a0:	4603      	mov	r3, r0
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4619      	mov	r1, r3
 80040a6:	4620      	mov	r0, r4
 80040a8:	f000 f914 	bl	80042d4 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 80040ac:	4603      	mov	r3, r0
    }
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd90      	pop	{r4, r7, pc}

080040b6 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f8ef 	bl	80042a6 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4293      	cmp	r3, r2
 80040ce:	bf8c      	ite	hi
 80040d0:	2301      	movhi	r3, #1
 80040d2:	2300      	movls	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80040da:	f006 fd74 	bl	800abc6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f006 fd5e 	bl	800aba4 <_Znwj>
 80040e8:	4603      	mov	r3, r0
      }
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f909 	bl	800431a <_ZSt4copyIPKfPfET0_T_S4_S3_>
 8004108:	4603      	mov	r3, r0
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	605a      	str	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	60da      	str	r2, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <_ZNSt16allocator_traitsISaIPN12ActionsQueue16RobotInstructionEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004160:	2200      	movs	r2, #0
 8004162:	6839      	ldr	r1, [r7, #0]
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f8f0 	bl	800434a <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv>
 800416a:	4603      	mov	r3, r0
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8004174:	b590      	push	{r4, r7, lr}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800417c:	687c      	ldr	r4, [r7, #4]
 800417e:	2008      	movs	r0, #8
 8004180:	f7fd facc 	bl	800171c <_ZSt16__deque_buf_sizej>
 8004184:	4603      	mov	r3, r0
 8004186:	4619      	mov	r1, r3
 8004188:	4620      	mov	r0, r4
 800418a:	f000 f8fc 	bl	8004386 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8allocateERS2_j>
 800418e:	4603      	mov	r3, r0
      }
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bd90      	pop	{r4, r7, pc}

08004198 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f8fb 	bl	80043a4 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE10deallocateEPS2_j>
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_ZNSaIPN12ActionsQueue16RobotInstructionEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f8f4 	bl	80043c4 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEEC1Ev>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4619      	mov	r1, r3
 800420e:	68b8      	ldr	r0, [r7, #8]
 8004210:	f006 fcc6 	bl	800aba0 <_ZdlPvj>
      }
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800421c:	b590      	push	{r4, r7, lr}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff feab 	bl	8003f84 <_ZSt7forwardIN12ActionsQueue16RobotInstructionEEOT_RNSt16remove_referenceIS2_E4typeE>
 800422e:	4604      	mov	r4, r0
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4619      	mov	r1, r3
 8004234:	2008      	movs	r0, #8
 8004236:	f7fd fa65 	bl	8001704 <_ZnwjPv>
 800423a:	4603      	mov	r3, r0
 800423c:	4622      	mov	r2, r4
 800423e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004242:	e883 0003 	stmia.w	r3, {r0, r1}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	bd90      	pop	{r4, r7, pc}

0800424e <_ZNKSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff ffac 	bl	80041b6 <_ZNKSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE19_M_get_Tp_allocatorEv>
 800425e:	4603      	mov	r3, r0
 8004260:	4618      	mov	r0, r3
 8004262:	f000 f8ba 	bl	80043da <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE11_S_max_sizeERKS2_>
 8004266:	4603      	mov	r3, r0
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	6809      	ldr	r1, [r1, #0]
 800428a:	1a41      	subs	r1, r0, r1
 800428c:	1089      	asrs	r1, r1, #2
 800428e:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8004290:	429a      	cmp	r2, r3
 8004292:	d904      	bls.n	800429e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8004294:	2200      	movs	r2, #0
 8004296:	6839      	ldr	r1, [r7, #0]
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f8b8 	bl	800440e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb>
      }
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80042ae:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80042b2:	4618      	mov	r0, r3
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80042d4:	b5b0      	push	{r4, r5, r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f92e 	bl	8004542 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80042e6:	4604      	mov	r4, r0
 80042e8:	68b8      	ldr	r0, [r7, #8]
 80042ea:	f000 f92a 	bl	8004542 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80042ee:	4605      	mov	r5, r0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f933 	bl	800455e <_ZSt12__niter_baseIPfET_S1_>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	4629      	mov	r1, r5
 80042fe:	4620      	mov	r0, r4
 8004300:	f000 f938 	bl	8004574 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 8004304:	4602      	mov	r2, r0
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f942 	bl	8004594 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8004310:	4603      	mov	r3, r0
    }
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bdb0      	pop	{r4, r5, r7, pc}

0800431a <_ZSt4copyIPKfPfET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800431a:	b590      	push	{r4, r7, lr}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 f940 	bl	80045ac <_ZSt12__miter_baseIPKfET_S2_>
 800432c:	4604      	mov	r4, r0
 800432e:	68b8      	ldr	r0, [r7, #8]
 8004330:	f000 f93c 	bl	80045ac <_ZSt12__miter_baseIPKfET_S2_>
 8004334:	4603      	mov	r3, r0
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	4619      	mov	r1, r3
 800433a:	4620      	mov	r0, r4
 800433c:	f000 f941 	bl	80045c2 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8004340:	4603      	mov	r3, r0
    }
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	bd90      	pop	{r4, r7, pc}

0800434a <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f956 	bl	8004608 <_ZNK9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 800435c:	4602      	mov	r2, r0
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4293      	cmp	r3, r2
 8004362:	bf8c      	ite	hi
 8004364:	2301      	movhi	r3, #1
 8004366:	2300      	movls	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800436e:	f006 fc2a 	bl	800abc6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4618      	mov	r0, r3
 8004378:	f006 fc14 	bl	800aba4 <_Znwj>
 800437c:	4603      	mov	r3, r0
      }
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004390:	2200      	movs	r2, #0
 8004392:	6839      	ldr	r1, [r7, #0]
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f943 	bl	8004620 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv>
 800439a:	4603      	mov	r3, r0
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4619      	mov	r1, r3
 80043b6:	68b8      	ldr	r0, [r7, #8]
 80043b8:	f006 fbf2 	bl	800aba0 <_ZdlPvj>
      }
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <_ZN9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80043e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80043e6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f937 	bl	800465c <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8max_sizeERKS2_>
 80043ee:	4603      	mov	r3, r0
 80043f0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80043f2:	f107 0208 	add.w	r2, r7, #8
 80043f6:	f107 030c 	add.w	r3, r7, #12
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fc5f 	bl	8003cc0 <_ZSt3minIjERKT_S2_S2_>
 8004402:	4603      	mov	r3, r0
 8004404:	681b      	ldr	r3, [r3, #0]
      }
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800440e:	b590      	push	{r4, r7, lr}
 8004410:	b08b      	sub	sp, #44	; 0x2c
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	4613      	mov	r3, r2
 800441a:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	109b      	asrs	r3, r3, #2
 8004428:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800442a:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	6a3a      	ldr	r2, [r7, #32]
 8004430:	4413      	add	r3, r2
 8004432:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	429a      	cmp	r2, r3
 800443e:	d92d      	bls.n	800449c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	1acb      	subs	r3, r1, r3
 800444c:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800444e:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	e000      	b.n	800445e <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x50>
 800445c:	2300      	movs	r3, #0
 800445e:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004460:	4413      	add	r3, r2
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446a:	429a      	cmp	r2, r3
 800446c:	d209      	bcs.n	8004482 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8004476:	3304      	adds	r3, #4
 8004478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447a:	4619      	mov	r1, r3
 800447c:	f000 f8fa 	bl	8004674 <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
 8004480:	e048      	b.n	8004514 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800448a:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004492:	4413      	add	r3, r2
 8004494:	461a      	mov	r2, r3
 8004496:	f000 f905 	bl	80046a4 <_ZSt13copy_backwardIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
 800449a:	e03b      	b.n	8004514 <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3304      	adds	r3, #4
 80044a4:	f107 0208 	add.w	r2, r7, #8
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fcc7 	bl	8003e3e <_ZSt3maxIjERKT_S2_S2_>
 80044b0:	4603      	mov	r3, r0
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80044b6:	3302      	adds	r3, #2
 80044b8:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	69b9      	ldr	r1, [r7, #24]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fcd1 	bl	8003e66 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE15_M_allocate_mapEj>
 80044c4:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0xce>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	e000      	b.n	80044de <_ZNSt5dequeIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 80044dc:	2300      	movs	r3, #0
 80044de:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4413      	add	r3, r2
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80044ee:	3304      	adds	r3, #4
 80044f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f2:	4619      	mov	r1, r3
 80044f4:	f000 f8be 	bl	8004674 <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6819      	ldr	r1, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	461a      	mov	r2, r3
 8004504:	f7ff fb10 	bl	8003b28 <_ZNSt11_Deque_baseIN12ActionsQueue16RobotInstructionESaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3308      	adds	r3, #8
 8004518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fcda 	bl	8003ed4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f103 0018 	add.w	r0, r3, #24
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800452c:	3b01      	subs	r3, #1
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004532:	4413      	add	r3, r2
 8004534:	4619      	mov	r1, r3
 8004536:	f7ff fccd 	bl	8003ed4 <_ZNSt15_Deque_iteratorIN12ActionsQueue16RobotInstructionERS1_PS1_E11_M_set_nodeEPS3_>
    }
 800453a:	bf00      	nop
 800453c:	372c      	adds	r7, #44	; 0x2c
 800453e:	46bd      	mov	sp, r7
 8004540:	bd90      	pop	{r4, r7, pc}

08004542 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800454a:	1d3b      	adds	r3, r7, #4
 800454c:	4618      	mov	r0, r3
 800454e:	f000 f8c1 	bl	80046d4 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8004552:	4603      	mov	r3, r0
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f8b0 	bl	80046ea <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 800458a:	4603      	mov	r3, r0
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
    { return __res; }
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <_ZSt12__miter_baseIPKfET_S2_>:
    __miter_base(_Iterator __it)
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80045c2:	b5b0      	push	{r4, r5, r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f89b 	bl	800470a <_ZSt12__niter_baseIPKfET_S2_>
 80045d4:	4604      	mov	r4, r0
 80045d6:	68b8      	ldr	r0, [r7, #8]
 80045d8:	f000 f897 	bl	800470a <_ZSt12__niter_baseIPKfET_S2_>
 80045dc:	4605      	mov	r5, r0
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff ffbc 	bl	800455e <_ZSt12__niter_baseIPfET_S1_>
 80045e6:	4603      	mov	r3, r0
 80045e8:	461a      	mov	r2, r3
 80045ea:	4629      	mov	r1, r5
 80045ec:	4620      	mov	r0, r4
 80045ee:	f7ff ffc1 	bl	8004574 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 80045f2:	4602      	mov	r2, r0
 80045f4:	1d3b      	adds	r3, r7, #4
 80045f6:	4611      	mov	r1, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff ffcb 	bl	8004594 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 80045fe:	4603      	mov	r3, r0
    }
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bdb0      	pop	{r4, r5, r7, pc}

08004608 <_ZNK9__gnu_cxx13new_allocatorIPN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004610:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f877 	bl	8004720 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 8004632:	4602      	mov	r2, r0
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4293      	cmp	r3, r2
 8004638:	bf8c      	ite	hi
 800463a:	2301      	movhi	r3, #1
 800463c:	2300      	movls	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <_ZN9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004644:	f006 fabf 	bl	800abc6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4618      	mov	r0, r3
 800464e:	f006 faa9 	bl	800aba4 <_Znwj>
 8004652:	4603      	mov	r3, r0
      }
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <_ZNSt16allocator_traitsISaIN12ActionsQueue16RobotInstructionEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f867 	bl	8004738 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8max_sizeEv>
 800466a:	4603      	mov	r3, r0
      }
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <_ZSt4copyIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8004674:	b590      	push	{r4, r7, lr}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f865 	bl	8004750 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004686:	4604      	mov	r4, r0
 8004688:	68b8      	ldr	r0, [r7, #8]
 800468a:	f000 f861 	bl	8004750 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 800468e:	4603      	mov	r3, r0
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4619      	mov	r1, r3
 8004694:	4620      	mov	r0, r4
 8004696:	f000 f866 	bl	8004766 <_ZSt13__copy_move_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 800469a:	4603      	mov	r3, r0
    }
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd90      	pop	{r4, r7, pc}

080046a4 <_ZSt13copy_backwardIPPN12ActionsQueue16RobotInstructionES3_ET0_T_S5_S4_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80046a4:	b590      	push	{r4, r7, lr}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f84d 	bl	8004750 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 80046b6:	4604      	mov	r4, r0
 80046b8:	68b8      	ldr	r0, [r7, #8]
 80046ba:	f000 f849 	bl	8004750 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 80046be:	4603      	mov	r3, r0
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	4619      	mov	r1, r3
 80046c4:	4620      	mov	r0, r4
 80046c6:	f000 f871 	bl	80047ac <_ZSt22__copy_move_backward_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 80046ca:	4603      	mov	r3, r0
    }
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd90      	pop	{r4, r7, pc}

080046d4 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f879 	bl	80047f2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004700:	4603      	mov	r3, r0
    }
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004728:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ffed 	bl	8004720 <_ZNK9__gnu_cxx13new_allocatorIN12ActionsQueue16RobotInstructionEE11_M_max_sizeEv>
 8004746:	4603      	mov	r3, r0
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <_ZSt12__miter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>:
    __miter_base(_Iterator __it)
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <_ZSt13__copy_move_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004766:	b5b0      	push	{r4, r5, r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f85a 	bl	800482c <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004778:	4604      	mov	r4, r0
 800477a:	68b8      	ldr	r0, [r7, #8]
 800477c:	f000 f856 	bl	800482c <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 8004780:	4605      	mov	r5, r0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f851 	bl	800482c <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 800478a:	4603      	mov	r3, r0
 800478c:	461a      	mov	r2, r3
 800478e:	4629      	mov	r1, r5
 8004790:	4620      	mov	r0, r4
 8004792:	f000 f856 	bl	8004842 <_ZSt14__copy_move_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004796:	4602      	mov	r2, r0
 8004798:	1d3b      	adds	r3, r7, #4
 800479a:	4611      	mov	r1, r2
 800479c:	4618      	mov	r0, r3
 800479e:	f000 f860 	bl	8004862 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>
 80047a2:	4603      	mov	r3, r0
    }
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bdb0      	pop	{r4, r5, r7, pc}

080047ac <_ZSt22__copy_move_backward_aILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80047ac:	b5b0      	push	{r4, r5, r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f837 	bl	800482c <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 80047be:	4604      	mov	r4, r0
 80047c0:	68b8      	ldr	r0, [r7, #8]
 80047c2:	f000 f833 	bl	800482c <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 80047c6:	4605      	mov	r5, r0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f82e 	bl	800482c <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461a      	mov	r2, r3
 80047d4:	4629      	mov	r1, r5
 80047d6:	4620      	mov	r0, r4
 80047d8:	f000 f84f 	bl	800487a <_ZSt23__copy_move_backward_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 80047dc:	4602      	mov	r2, r0
 80047de:	1d3b      	adds	r3, r7, #4
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f83d 	bl	8004862 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>
 80047e8:	4603      	mov	r3, r0
    }
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bdb0      	pop	{r4, r5, r7, pc}

080047f2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b086      	sub	sp, #24
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	109b      	asrs	r3, r3, #2
 8004806:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d006      	beq.n	800481c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	461a      	mov	r2, r3
 8004814:	68f9      	ldr	r1, [r7, #12]
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f008 f87c 	bl	800c914 <memmove>
	  return __result + _Num;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	4413      	add	r3, r2
	}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <_ZSt12__niter_baseIPPN12ActionsQueue16RobotInstructionEET_S4_>:
    __niter_base(_Iterator __it)
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <_ZSt14__copy_move_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f821 	bl	800489a <_ZSt14__copy_move_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004858:	4603      	mov	r3, r0
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <_ZSt12__niter_wrapIPPN12ActionsQueue16RobotInstructionEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <_ZSt23__copy_move_backward_a1ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800487a:	b580      	push	{r7, lr}
 800487c:	b084      	sub	sp, #16
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f815 	bl	80048ba <_ZSt23__copy_move_backward_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>
 8004890:	4603      	mov	r3, r0
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <_ZSt14__copy_move_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f815 	bl	80048da <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>
 80048b0:	4603      	mov	r3, r0
    }
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <_ZSt23__copy_move_backward_a2ILb0EPPN12ActionsQueue16RobotInstructionES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f822 	bl	8004914 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>
 80048d0:	4603      	mov	r3, r0
    }
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80048da:	b580      	push	{r7, lr}
 80048dc:	b086      	sub	sp, #24
 80048de:	af00      	add	r7, sp, #0
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	109b      	asrs	r3, r3, #2
 80048ee:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d006      	beq.n	8004904 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	461a      	mov	r2, r3
 80048fc:	68f9      	ldr	r1, [r7, #12]
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f008 f808 	bl	800c914 <memmove>
	  return __result + _Num;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	4413      	add	r3, r2
	}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	109b      	asrs	r3, r3, #2
 8004928:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN12ActionsQueue16RobotInstructionEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	425b      	negs	r3, r3
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	18d0      	adds	r0, r2, r3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	461a      	mov	r2, r3
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	f007 ffe7 	bl	800c914 <memmove>
	  return __result - _Num;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	425b      	negs	r3, r3
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4413      	add	r3, r2
	}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <_ZN12ActionsQueueD1Ev>:
class ActionsQueue
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8004966:	4618      	mov	r0, r3
 8004968:	f7fd fdd2 	bl	8002510 <_ZN6TelegaD1Ev>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	333c      	adds	r3, #60	; 0x3c
 8004970:	4618      	mov	r0, r3
 8004972:	f7fc fb3d 	bl	8000ff0 <_ZN7RPLidarD1Ev>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4618      	mov	r0, r3
 800497a:	f7fd fdbc 	bl	80024f6 <_ZNSt5queueIN12ActionsQueue16RobotInstructionESt5dequeIS1_SaIS1_EEED1Ev>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d107      	bne.n	80049a8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800499e:	4293      	cmp	r3, r2
 80049a0:	d102      	bne.n	80049a8 <_Z41__static_initialization_and_destruction_0ii+0x20>
ActionsQueue Queue;
 80049a2:	4809      	ldr	r0, [pc, #36]	; (80049c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80049a4:	f7fd fdc6 	bl	8002534 <_ZN12ActionsQueueC1Ev>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d107      	bne.n	80049be <_Z41__static_initialization_and_destruction_0ii+0x36>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d102      	bne.n	80049be <_Z41__static_initialization_and_destruction_0ii+0x36>
 80049b8:	4803      	ldr	r0, [pc, #12]	; (80049c8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80049ba:	f7ff ffcd 	bl	8004958 <_ZN12ActionsQueueD1Ev>
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000200 	.word	0x20000200

080049cc <_GLOBAL__sub_I__Z9constrainlll>:
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049d4:	2001      	movs	r0, #1
 80049d6:	f7ff ffd7 	bl	8004988 <_Z41__static_initialization_and_destruction_0ii>
 80049da:	bd80      	pop	{r7, pc}

080049dc <_GLOBAL__sub_D__Z9constrainlll>:
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
 80049e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049e4:	2000      	movs	r0, #0
 80049e6:	f7ff ffcf 	bl	8004988 <_Z41__static_initialization_and_destruction_0ii>
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_MspInit>:
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	2300      	movs	r3, #0
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <HAL_MspInit+0x4c>)
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	4a0f      	ldr	r2, [pc, #60]	; (8004a38 <HAL_MspInit+0x4c>)
 80049fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a00:	6453      	str	r3, [r2, #68]	; 0x44
 8004a02:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <HAL_MspInit+0x4c>)
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0a:	607b      	str	r3, [r7, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <HAL_MspInit+0x4c>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	4a08      	ldr	r2, [pc, #32]	; (8004a38 <HAL_MspInit+0x4c>)
 8004a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1e:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <HAL_MspInit+0x4c>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40023800 	.word	0x40023800

08004a3c <HAL_I2C_MspInit>:
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	; 0x28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	f107 0314 	add.w	r3, r7, #20
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	611a      	str	r2, [r3, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a21      	ldr	r2, [pc, #132]	; (8004ae0 <HAL_I2C_MspInit+0xa4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d13c      	bne.n	8004ad8 <HAL_I2C_MspInit+0x9c>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	4b20      	ldr	r3, [pc, #128]	; (8004ae4 <HAL_I2C_MspInit+0xa8>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4a1f      	ldr	r2, [pc, #124]	; (8004ae4 <HAL_I2C_MspInit+0xa8>)
 8004a68:	f043 0302 	orr.w	r3, r3, #2
 8004a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ae4 <HAL_I2C_MspInit+0xa8>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	2312      	movs	r3, #18
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	2303      	movs	r3, #3
 8004a8a:	623b      	str	r3, [r7, #32]
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a90:	f107 0314 	add.w	r3, r7, #20
 8004a94:	4619      	mov	r1, r3
 8004a96:	4814      	ldr	r0, [pc, #80]	; (8004ae8 <HAL_I2C_MspInit+0xac>)
 8004a98:	f001 f9b6 	bl	8005e08 <HAL_GPIO_Init>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <HAL_I2C_MspInit+0xa8>)
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	4a0f      	ldr	r2, [pc, #60]	; (8004ae4 <HAL_I2C_MspInit+0xa8>)
 8004aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <HAL_I2C_MspInit+0xa8>)
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2100      	movs	r1, #0
 8004abc:	201f      	movs	r0, #31
 8004abe:	f000 fd76 	bl	80055ae <HAL_NVIC_SetPriority>
 8004ac2:	201f      	movs	r0, #31
 8004ac4:	f000 fd8f 	bl	80055e6 <HAL_NVIC_EnableIRQ>
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2100      	movs	r1, #0
 8004acc:	2020      	movs	r0, #32
 8004ace:	f000 fd6e 	bl	80055ae <HAL_NVIC_SetPriority>
 8004ad2:	2020      	movs	r0, #32
 8004ad4:	f000 fd87 	bl	80055e6 <HAL_NVIC_EnableIRQ>
 8004ad8:	bf00      	nop
 8004ada:	3728      	adds	r7, #40	; 0x28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40005400 	.word	0x40005400
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	40020400 	.word	0x40020400

08004aec <HAL_TIM_Base_MspInit>:
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a1a      	ldr	r2, [pc, #104]	; (8004b64 <HAL_TIM_Base_MspInit+0x78>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d12d      	bne.n	8004b5a <HAL_TIM_Base_MspInit+0x6e>
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	4b19      	ldr	r3, [pc, #100]	; (8004b68 <HAL_TIM_Base_MspInit+0x7c>)
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <HAL_TIM_Base_MspInit+0x7c>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b0e:	4b16      	ldr	r3, [pc, #88]	; (8004b68 <HAL_TIM_Base_MspInit+0x7c>)
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	2018      	movs	r0, #24
 8004b20:	f000 fd45 	bl	80055ae <HAL_NVIC_SetPriority>
 8004b24:	2018      	movs	r0, #24
 8004b26:	f000 fd5e 	bl	80055e6 <HAL_NVIC_EnableIRQ>
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	2019      	movs	r0, #25
 8004b30:	f000 fd3d 	bl	80055ae <HAL_NVIC_SetPriority>
 8004b34:	2019      	movs	r0, #25
 8004b36:	f000 fd56 	bl	80055e6 <HAL_NVIC_EnableIRQ>
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	201a      	movs	r0, #26
 8004b40:	f000 fd35 	bl	80055ae <HAL_NVIC_SetPriority>
 8004b44:	201a      	movs	r0, #26
 8004b46:	f000 fd4e 	bl	80055e6 <HAL_NVIC_EnableIRQ>
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	201b      	movs	r0, #27
 8004b50:	f000 fd2d 	bl	80055ae <HAL_NVIC_SetPriority>
 8004b54:	201b      	movs	r0, #27
 8004b56:	f000 fd46 	bl	80055e6 <HAL_NVIC_EnableIRQ>
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000
 8004b68:	40023800 	.word	0x40023800

08004b6c <HAL_TIM_Encoder_MspInit>:
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08c      	sub	sp, #48	; 0x30
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	f107 031c 	add.w	r3, r7, #28
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	611a      	str	r2, [r3, #16]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8c:	d14b      	bne.n	8004c26 <HAL_TIM_Encoder_MspInit+0xba>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	4b3f      	ldr	r3, [pc, #252]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	4a3e      	ldr	r2, [pc, #248]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004b98:	f043 0301 	orr.w	r3, r3, #1
 8004b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b9e:	4b3c      	ldr	r3, [pc, #240]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	4b38      	ldr	r3, [pc, #224]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	4a37      	ldr	r2, [pc, #220]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bba:	4b35      	ldr	r3, [pc, #212]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	4b31      	ldr	r3, [pc, #196]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	4a30      	ldr	r2, [pc, #192]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004bd0:	f043 0302 	orr.w	r3, r3, #2
 8004bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd6:	4b2e      	ldr	r3, [pc, #184]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	2302      	movs	r3, #2
 8004bea:	623b      	str	r3, [r7, #32]
 8004bec:	2300      	movs	r3, #0
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf8:	f107 031c 	add.w	r3, r7, #28
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4825      	ldr	r0, [pc, #148]	; (8004c94 <HAL_TIM_Encoder_MspInit+0x128>)
 8004c00:	f001 f902 	bl	8005e08 <HAL_GPIO_Init>
 8004c04:	2308      	movs	r3, #8
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	2302      	movs	r3, #2
 8004c0a:	623b      	str	r3, [r7, #32]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c10:	2300      	movs	r3, #0
 8004c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c14:	2301      	movs	r3, #1
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c18:	f107 031c 	add.w	r3, r7, #28
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	481e      	ldr	r0, [pc, #120]	; (8004c98 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004c20:	f001 f8f2 	bl	8005e08 <HAL_GPIO_Init>
 8004c24:	e030      	b.n	8004c88 <HAL_TIM_Encoder_MspInit+0x11c>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1c      	ldr	r2, [pc, #112]	; (8004c9c <HAL_TIM_Encoder_MspInit+0x130>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d12b      	bne.n	8004c88 <HAL_TIM_Encoder_MspInit+0x11c>
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	4b16      	ldr	r3, [pc, #88]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	4a15      	ldr	r2, [pc, #84]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004c3a:	f043 0304 	orr.w	r3, r3, #4
 8004c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8004c40:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60bb      	str	r3, [r7, #8]
 8004c50:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	4a0e      	ldr	r2, [pc, #56]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004c56:	f043 0302 	orr.w	r3, r3, #2
 8004c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <HAL_TIM_Encoder_MspInit+0x124>)
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	23c0      	movs	r3, #192	; 0xc0
 8004c6a:	61fb      	str	r3, [r7, #28]
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	623b      	str	r3, [r7, #32]
 8004c70:	2300      	movs	r3, #0
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
 8004c74:	2300      	movs	r3, #0
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c78:	2302      	movs	r3, #2
 8004c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c7c:	f107 031c 	add.w	r3, r7, #28
 8004c80:	4619      	mov	r1, r3
 8004c82:	4805      	ldr	r0, [pc, #20]	; (8004c98 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004c84:	f001 f8c0 	bl	8005e08 <HAL_GPIO_Init>
 8004c88:	bf00      	nop
 8004c8a:	3730      	adds	r7, #48	; 0x30
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40023800 	.word	0x40023800
 8004c94:	40020000 	.word	0x40020000
 8004c98:	40020400 	.word	0x40020400
 8004c9c:	40000800 	.word	0x40000800

08004ca0 <HAL_TIM_PWM_MspInit>:
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a0e      	ldr	r2, [pc, #56]	; (8004ce8 <HAL_TIM_PWM_MspInit+0x48>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d115      	bne.n	8004cde <HAL_TIM_PWM_MspInit+0x3e>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <HAL_TIM_PWM_MspInit+0x4c>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	4a0c      	ldr	r2, [pc, #48]	; (8004cec <HAL_TIM_PWM_MspInit+0x4c>)
 8004cbc:	f043 0302 	orr.w	r3, r3, #2
 8004cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc2:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <HAL_TIM_PWM_MspInit+0x4c>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	201d      	movs	r0, #29
 8004cd4:	f000 fc6b 	bl	80055ae <HAL_NVIC_SetPriority>
 8004cd8:	201d      	movs	r0, #29
 8004cda:	f000 fc84 	bl	80055e6 <HAL_NVIC_EnableIRQ>
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40000400 	.word	0x40000400
 8004cec:	40023800 	.word	0x40023800

08004cf0 <HAL_TIM_MspPostInit>:
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	; 0x28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	f107 0314 	add.w	r3, r7, #20
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	605a      	str	r2, [r3, #4]
 8004d02:	609a      	str	r2, [r3, #8]
 8004d04:	60da      	str	r2, [r3, #12]
 8004d06:	611a      	str	r2, [r3, #16]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <HAL_TIM_MspPostInit+0xa4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d13b      	bne.n	8004d8a <HAL_TIM_MspPostInit+0x9a>
 8004d12:	2300      	movs	r3, #0
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <HAL_TIM_MspPostInit+0xa8>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	4a1f      	ldr	r2, [pc, #124]	; (8004d98 <HAL_TIM_MspPostInit+0xa8>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	6313      	str	r3, [r2, #48]	; 0x30
 8004d22:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <HAL_TIM_MspPostInit+0xa8>)
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <HAL_TIM_MspPostInit+0xa8>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	4a18      	ldr	r2, [pc, #96]	; (8004d98 <HAL_TIM_MspPostInit+0xa8>)
 8004d38:	f043 0302 	orr.w	r3, r3, #2
 8004d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d3e:	4b16      	ldr	r3, [pc, #88]	; (8004d98 <HAL_TIM_MspPostInit+0xa8>)
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	23c0      	movs	r3, #192	; 0xc0
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	2302      	movs	r3, #2
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	2300      	movs	r3, #0
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5e:	f107 0314 	add.w	r3, r7, #20
 8004d62:	4619      	mov	r1, r3
 8004d64:	480d      	ldr	r0, [pc, #52]	; (8004d9c <HAL_TIM_MspPostInit+0xac>)
 8004d66:	f001 f84f 	bl	8005e08 <HAL_GPIO_Init>
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	2302      	movs	r3, #2
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	2300      	movs	r3, #0
 8004d78:	623b      	str	r3, [r7, #32]
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	f107 0314 	add.w	r3, r7, #20
 8004d82:	4619      	mov	r1, r3
 8004d84:	4806      	ldr	r0, [pc, #24]	; (8004da0 <HAL_TIM_MspPostInit+0xb0>)
 8004d86:	f001 f83f 	bl	8005e08 <HAL_GPIO_Init>
 8004d8a:	bf00      	nop
 8004d8c:	3728      	adds	r7, #40	; 0x28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	40020000 	.word	0x40020000
 8004da0:	40020400 	.word	0x40020400

08004da4 <HAL_UART_MspInit>:
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	f107 0314 	add.w	r3, r7, #20
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	605a      	str	r2, [r3, #4]
 8004db6:	609a      	str	r2, [r3, #8]
 8004db8:	60da      	str	r2, [r3, #12]
 8004dba:	611a      	str	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a4c      	ldr	r2, [pc, #304]	; (8004ef4 <HAL_UART_MspInit+0x150>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	f040 8092 	bne.w	8004eec <HAL_UART_MspInit+0x148>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	613b      	str	r3, [r7, #16]
 8004dcc:	4b4a      	ldr	r3, [pc, #296]	; (8004ef8 <HAL_UART_MspInit+0x154>)
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	4a49      	ldr	r2, [pc, #292]	; (8004ef8 <HAL_UART_MspInit+0x154>)
 8004dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd8:	4b47      	ldr	r3, [pc, #284]	; (8004ef8 <HAL_UART_MspInit+0x154>)
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	4b43      	ldr	r3, [pc, #268]	; (8004ef8 <HAL_UART_MspInit+0x154>)
 8004dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dec:	4a42      	ldr	r2, [pc, #264]	; (8004ef8 <HAL_UART_MspInit+0x154>)
 8004dee:	f043 0301 	orr.w	r3, r3, #1
 8004df2:	6313      	str	r3, [r2, #48]	; 0x30
 8004df4:	4b40      	ldr	r3, [pc, #256]	; (8004ef8 <HAL_UART_MspInit+0x154>)
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	230c      	movs	r3, #12
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	2302      	movs	r3, #2
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	623b      	str	r3, [r7, #32]
 8004e10:	2307      	movs	r3, #7
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
 8004e14:	f107 0314 	add.w	r3, r7, #20
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4838      	ldr	r0, [pc, #224]	; (8004efc <HAL_UART_MspInit+0x158>)
 8004e1c:	f000 fff4 	bl	8005e08 <HAL_GPIO_Init>
 8004e20:	4b37      	ldr	r3, [pc, #220]	; (8004f00 <HAL_UART_MspInit+0x15c>)
 8004e22:	4a38      	ldr	r2, [pc, #224]	; (8004f04 <HAL_UART_MspInit+0x160>)
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	4b36      	ldr	r3, [pc, #216]	; (8004f00 <HAL_UART_MspInit+0x15c>)
 8004e28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e2c:	605a      	str	r2, [r3, #4]
 8004e2e:	4b34      	ldr	r3, [pc, #208]	; (8004f00 <HAL_UART_MspInit+0x15c>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	609a      	str	r2, [r3, #8]
 8004e34:	4b32      	ldr	r3, [pc, #200]	; (8004f00 <HAL_UART_MspInit+0x15c>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	60da      	str	r2, [r3, #12]
 8004e3a:	4b31      	ldr	r3, [pc, #196]	; (8004f00 <HAL_UART_MspInit+0x15c>)
 8004e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e40:	611a      	str	r2, [r3, #16]
 8004e42:	4b2f      	ldr	r3, [pc, #188]	; (8004f00 <HAL_UART_MspInit+0x15c>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	615a      	str	r2, [r3, #20]
 8004e48:	4b2d      	ldr	r3, [pc, #180]	; (8004f00 <HAL_UART_MspInit+0x15c>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	619a      	str	r2, [r3, #24]
 8004e4e:	4b2c      	ldr	r3, [pc, #176]	; (8004f00 <HAL_UART_MspInit+0x15c>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	61da      	str	r2, [r3, #28]
 8004e54:	4b2a      	ldr	r3, [pc, #168]	; (8004f00 <HAL_UART_MspInit+0x15c>)
 8004e56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e5a:	621a      	str	r2, [r3, #32]
 8004e5c:	4b28      	ldr	r3, [pc, #160]	; (8004f00 <HAL_UART_MspInit+0x15c>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24
 8004e62:	4827      	ldr	r0, [pc, #156]	; (8004f00 <HAL_UART_MspInit+0x15c>)
 8004e64:	f000 fbe8 	bl	8005638 <HAL_DMA_Init>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_UART_MspInit+0xce>
 8004e6e:	f7fe f91d 	bl	80030ac <Error_Handler>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a22      	ldr	r2, [pc, #136]	; (8004f00 <HAL_UART_MspInit+0x15c>)
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38
 8004e78:	4a21      	ldr	r2, [pc, #132]	; (8004f00 <HAL_UART_MspInit+0x15c>)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6393      	str	r3, [r2, #56]	; 0x38
 8004e7e:	4b22      	ldr	r3, [pc, #136]	; (8004f08 <HAL_UART_MspInit+0x164>)
 8004e80:	4a22      	ldr	r2, [pc, #136]	; (8004f0c <HAL_UART_MspInit+0x168>)
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <HAL_UART_MspInit+0x164>)
 8004e86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	4b1e      	ldr	r3, [pc, #120]	; (8004f08 <HAL_UART_MspInit+0x164>)
 8004e8e:	2240      	movs	r2, #64	; 0x40
 8004e90:	609a      	str	r2, [r3, #8]
 8004e92:	4b1d      	ldr	r3, [pc, #116]	; (8004f08 <HAL_UART_MspInit+0x164>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	60da      	str	r2, [r3, #12]
 8004e98:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <HAL_UART_MspInit+0x164>)
 8004e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e9e:	611a      	str	r2, [r3, #16]
 8004ea0:	4b19      	ldr	r3, [pc, #100]	; (8004f08 <HAL_UART_MspInit+0x164>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	615a      	str	r2, [r3, #20]
 8004ea6:	4b18      	ldr	r3, [pc, #96]	; (8004f08 <HAL_UART_MspInit+0x164>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	619a      	str	r2, [r3, #24]
 8004eac:	4b16      	ldr	r3, [pc, #88]	; (8004f08 <HAL_UART_MspInit+0x164>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	61da      	str	r2, [r3, #28]
 8004eb2:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <HAL_UART_MspInit+0x164>)
 8004eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004eb8:	621a      	str	r2, [r3, #32]
 8004eba:	4b13      	ldr	r3, [pc, #76]	; (8004f08 <HAL_UART_MspInit+0x164>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24
 8004ec0:	4811      	ldr	r0, [pc, #68]	; (8004f08 <HAL_UART_MspInit+0x164>)
 8004ec2:	f000 fbb9 	bl	8005638 <HAL_DMA_Init>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_UART_MspInit+0x12c>
 8004ecc:	f7fe f8ee 	bl	80030ac <Error_Handler>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a0d      	ldr	r2, [pc, #52]	; (8004f08 <HAL_UART_MspInit+0x164>)
 8004ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ed6:	4a0c      	ldr	r2, [pc, #48]	; (8004f08 <HAL_UART_MspInit+0x164>)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6393      	str	r3, [r2, #56]	; 0x38
 8004edc:	2200      	movs	r2, #0
 8004ede:	2100      	movs	r1, #0
 8004ee0:	2026      	movs	r0, #38	; 0x26
 8004ee2:	f000 fb64 	bl	80055ae <HAL_NVIC_SetPriority>
 8004ee6:	2026      	movs	r0, #38	; 0x26
 8004ee8:	f000 fb7d 	bl	80055e6 <HAL_NVIC_EnableIRQ>
 8004eec:	bf00      	nop
 8004eee:	3728      	adds	r7, #40	; 0x28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40004400 	.word	0x40004400
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	40020000 	.word	0x40020000
 8004f00:	20001004 	.word	0x20001004
 8004f04:	40026088 	.word	0x40026088
 8004f08:	20001064 	.word	0x20001064
 8004f0c:	400260a0 	.word	0x400260a0

08004f10 <HAL_UART_MspDeInit>:
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a0e      	ldr	r2, [pc, #56]	; (8004f58 <HAL_UART_MspDeInit+0x48>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d116      	bne.n	8004f50 <HAL_UART_MspDeInit+0x40>
 8004f22:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <HAL_UART_MspDeInit+0x4c>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	4a0d      	ldr	r2, [pc, #52]	; (8004f5c <HAL_UART_MspDeInit+0x4c>)
 8004f28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f2e:	210c      	movs	r1, #12
 8004f30:	480b      	ldr	r0, [pc, #44]	; (8004f60 <HAL_UART_MspDeInit+0x50>)
 8004f32:	f001 f8ed 	bl	8006110 <HAL_GPIO_DeInit>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fc2a 	bl	8005794 <HAL_DMA_DeInit>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fc25 	bl	8005794 <HAL_DMA_DeInit>
 8004f4a:	2026      	movs	r0, #38	; 0x26
 8004f4c:	f000 fb59 	bl	8005602 <HAL_NVIC_DisableIRQ>
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40004400 	.word	0x40004400
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	40020000 	.word	0x40020000

08004f64 <NMI_Handler>:
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	e7fe      	b.n	8004f68 <NMI_Handler+0x4>

08004f6a <HardFault_Handler>:
 8004f6a:	b480      	push	{r7}
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	e7fe      	b.n	8004f6e <HardFault_Handler+0x4>

08004f70 <MemManage_Handler>:
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	e7fe      	b.n	8004f74 <MemManage_Handler+0x4>

08004f76 <BusFault_Handler>:
 8004f76:	b480      	push	{r7}
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	e7fe      	b.n	8004f7a <BusFault_Handler+0x4>

08004f7c <UsageFault_Handler>:
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	e7fe      	b.n	8004f80 <UsageFault_Handler+0x4>

08004f82 <SVC_Handler>:
 8004f82:	b480      	push	{r7}
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	bf00      	nop
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <DebugMon_Handler>:
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <PendSV_Handler>:
 8004f9e:	b480      	push	{r7}
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	bf00      	nop
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <SysTick_Handler>:
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	f000 f9ba 	bl	8005328 <HAL_IncTick>
 8004fb4:	bf00      	nop
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <DMA1_Stream5_IRQHandler>:
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	4802      	ldr	r0, [pc, #8]	; (8004fc8 <DMA1_Stream5_IRQHandler+0x10>)
 8004fbe:	f000 fcd9 	bl	8005974 <HAL_DMA_IRQHandler>
 8004fc2:	bf00      	nop
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20001004 	.word	0x20001004

08004fcc <DMA1_Stream6_IRQHandler>:
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	4802      	ldr	r0, [pc, #8]	; (8004fdc <DMA1_Stream6_IRQHandler+0x10>)
 8004fd2:	f000 fccf 	bl	8005974 <HAL_DMA_IRQHandler>
 8004fd6:	bf00      	nop
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20001064 	.word	0x20001064

08004fe0 <TIM1_BRK_TIM9_IRQHandler>:
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	4802      	ldr	r0, [pc, #8]	; (8004ff0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004fe6:	f003 feef 	bl	8008dc8 <HAL_TIM_IRQHandler>
 8004fea:	bf00      	nop
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000ea0 	.word	0x20000ea0

08004ff4 <TIM1_UP_TIM10_IRQHandler>:
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	4802      	ldr	r0, [pc, #8]	; (8005004 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004ffa:	f003 fee5 	bl	8008dc8 <HAL_TIM_IRQHandler>
 8004ffe:	bf00      	nop
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000ea0 	.word	0x20000ea0

08005008 <TIM1_TRG_COM_TIM11_IRQHandler>:
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
 800500c:	4802      	ldr	r0, [pc, #8]	; (8005018 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800500e:	f003 fedb 	bl	8008dc8 <HAL_TIM_IRQHandler>
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000ea0 	.word	0x20000ea0

0800501c <TIM1_CC_IRQHandler>:
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
 8005020:	4802      	ldr	r0, [pc, #8]	; (800502c <TIM1_CC_IRQHandler+0x10>)
 8005022:	f003 fed1 	bl	8008dc8 <HAL_TIM_IRQHandler>
 8005026:	bf00      	nop
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000ea0 	.word	0x20000ea0

08005030 <TIM3_IRQHandler>:
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
 8005034:	4802      	ldr	r0, [pc, #8]	; (8005040 <TIM3_IRQHandler+0x10>)
 8005036:	f003 fec7 	bl	8008dc8 <HAL_TIM_IRQHandler>
 800503a:	bf00      	nop
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000f30 	.word	0x20000f30

08005044 <I2C1_EV_IRQHandler>:
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
 8005048:	4802      	ldr	r0, [pc, #8]	; (8005054 <I2C1_EV_IRQHandler+0x10>)
 800504a:	f001 faa3 	bl	8006594 <HAL_I2C_EV_IRQHandler>
 800504e:	bf00      	nop
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000e4c 	.word	0x20000e4c

08005058 <I2C1_ER_IRQHandler>:
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
 800505c:	4802      	ldr	r0, [pc, #8]	; (8005068 <I2C1_ER_IRQHandler+0x10>)
 800505e:	f001 fc0a 	bl	8006876 <HAL_I2C_ER_IRQHandler>
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000e4c 	.word	0x20000e4c

0800506c <USART2_IRQHandler>:
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <USART2_IRQHandler+0x10>)
 8005072:	f004 fe61 	bl	8009d38 <HAL_UART_IRQHandler>
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000fc0 	.word	0x20000fc0

08005080 <_getpid>:
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
 8005084:	2301      	movs	r3, #1
 8005086:	4618      	mov	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <_kill>:
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
 800509a:	f007 fbf3 	bl	800c884 <__errno>
 800509e:	4603      	mov	r3, r0
 80050a0:	2216      	movs	r2, #22
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <_exit>:
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	f04f 31ff 	mov.w	r1, #4294967295
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f7ff ffe7 	bl	8005090 <_kill>
 80050c2:	e7fe      	b.n	80050c2 <_exit+0x12>

080050c4 <_read>:
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	e00a      	b.n	80050ec <_read+0x28>
 80050d6:	f3af 8000 	nop.w
 80050da:	4601      	mov	r1, r0
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	60ba      	str	r2, [r7, #8]
 80050e2:	b2ca      	uxtb	r2, r1
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	3301      	adds	r3, #1
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	dbf0      	blt.n	80050d6 <_read+0x12>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <_write>:
 80050fe:	b580      	push	{r7, lr}
 8005100:	b086      	sub	sp, #24
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	e009      	b.n	8005124 <_write+0x26>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	60ba      	str	r2, [r7, #8]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f3af 8000 	nop.w
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	3301      	adds	r3, #1
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	429a      	cmp	r2, r3
 800512a:	dbf1      	blt.n	8005110 <_write+0x12>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <_close>:
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	f04f 33ff 	mov.w	r3, #4294967295
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <_fstat>:
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800515e:	605a      	str	r2, [r3, #4]
 8005160:	2300      	movs	r3, #0
 8005162:	4618      	mov	r0, r3
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <_isatty>:
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	2301      	movs	r3, #1
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <_lseek>:
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	2300      	movs	r3, #0
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <_sbrk>:
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	4a14      	ldr	r2, [pc, #80]	; (80051fc <_sbrk+0x5c>)
 80051aa:	4b15      	ldr	r3, [pc, #84]	; (8005200 <_sbrk+0x60>)
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	4b13      	ldr	r3, [pc, #76]	; (8005204 <_sbrk+0x64>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <_sbrk+0x22>
 80051bc:	4b11      	ldr	r3, [pc, #68]	; (8005204 <_sbrk+0x64>)
 80051be:	4a12      	ldr	r2, [pc, #72]	; (8005208 <_sbrk+0x68>)
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	4b10      	ldr	r3, [pc, #64]	; (8005204 <_sbrk+0x64>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4413      	add	r3, r2
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d207      	bcs.n	80051e0 <_sbrk+0x40>
 80051d0:	f007 fb58 	bl	800c884 <__errno>
 80051d4:	4603      	mov	r3, r0
 80051d6:	220c      	movs	r2, #12
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	f04f 33ff 	mov.w	r3, #4294967295
 80051de:	e009      	b.n	80051f4 <_sbrk+0x54>
 80051e0:	4b08      	ldr	r3, [pc, #32]	; (8005204 <_sbrk+0x64>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	4b07      	ldr	r3, [pc, #28]	; (8005204 <_sbrk+0x64>)
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4413      	add	r3, r2
 80051ee:	4a05      	ldr	r2, [pc, #20]	; (8005204 <_sbrk+0x64>)
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20020000 	.word	0x20020000
 8005200:	00000400 	.word	0x00000400
 8005204:	200010c4 	.word	0x200010c4
 8005208:	200010e0 	.word	0x200010e0

0800520c <SystemInit>:
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <SystemInit+0x20>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	4a05      	ldr	r2, [pc, #20]	; (800522c <SystemInit+0x20>)
 8005218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800521c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005220:	bf00      	nop
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	e000ed00 	.word	0xe000ed00

08005230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005268 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005234:	480d      	ldr	r0, [pc, #52]	; (800526c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005236:	490e      	ldr	r1, [pc, #56]	; (8005270 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005238:	4a0e      	ldr	r2, [pc, #56]	; (8005274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800523a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800523c:	e002      	b.n	8005244 <LoopCopyDataInit>

0800523e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800523e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005242:	3304      	adds	r3, #4

08005244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005248:	d3f9      	bcc.n	800523e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800524a:	4a0b      	ldr	r2, [pc, #44]	; (8005278 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800524c:	4c0b      	ldr	r4, [pc, #44]	; (800527c <LoopFillZerobss+0x26>)
  movs r3, #0
 800524e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005250:	e001      	b.n	8005256 <LoopFillZerobss>

08005252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005254:	3204      	adds	r2, #4

08005256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005258:	d3fb      	bcc.n	8005252 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800525a:	f7ff ffd7 	bl	800520c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800525e:	f007 fb17 	bl	800c890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005262:	f7fd fbb5 	bl	80029d0 <main>
  bx  lr    
 8005266:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005268:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800526c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005270:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8005274:	0800fbdc 	.word	0x0800fbdc
  ldr r2, =_sbss
 8005278:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800527c:	200010e0 	.word	0x200010e0

08005280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005280:	e7fe      	b.n	8005280 <ADC_IRQHandler>
	...

08005284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005288:	4b0e      	ldr	r3, [pc, #56]	; (80052c4 <HAL_Init+0x40>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a0d      	ldr	r2, [pc, #52]	; (80052c4 <HAL_Init+0x40>)
 800528e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005294:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <HAL_Init+0x40>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a0a      	ldr	r2, [pc, #40]	; (80052c4 <HAL_Init+0x40>)
 800529a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800529e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052a0:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <HAL_Init+0x40>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a07      	ldr	r2, [pc, #28]	; (80052c4 <HAL_Init+0x40>)
 80052a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052ac:	2003      	movs	r0, #3
 80052ae:	f000 f973 	bl	8005598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052b2:	200f      	movs	r0, #15
 80052b4:	f000 f808 	bl	80052c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052b8:	f7ff fb98 	bl	80049ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40023c00 	.word	0x40023c00

080052c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052d0:	4b12      	ldr	r3, [pc, #72]	; (800531c <HAL_InitTick+0x54>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <HAL_InitTick+0x58>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	4619      	mov	r1, r3
 80052da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052de:	fbb3 f3f1 	udiv	r3, r3, r1
 80052e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f999 	bl	800561e <HAL_SYSTICK_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e00e      	b.n	8005314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b0f      	cmp	r3, #15
 80052fa:	d80a      	bhi.n	8005312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052fc:	2200      	movs	r2, #0
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	f04f 30ff 	mov.w	r0, #4294967295
 8005304:	f000 f953 	bl	80055ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005308:	4a06      	ldr	r2, [pc, #24]	; (8005324 <HAL_InitTick+0x5c>)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	e000      	b.n	8005314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000000 	.word	0x20000000
 8005320:	20000008 	.word	0x20000008
 8005324:	20000004 	.word	0x20000004

08005328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800532c:	4b06      	ldr	r3, [pc, #24]	; (8005348 <HAL_IncTick+0x20>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	4b06      	ldr	r3, [pc, #24]	; (800534c <HAL_IncTick+0x24>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4413      	add	r3, r2
 8005338:	4a04      	ldr	r2, [pc, #16]	; (800534c <HAL_IncTick+0x24>)
 800533a:	6013      	str	r3, [r2, #0]
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	20000008 	.word	0x20000008
 800534c:	200010c8 	.word	0x200010c8

08005350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return uwTick;
 8005354:	4b03      	ldr	r3, [pc, #12]	; (8005364 <HAL_GetTick+0x14>)
 8005356:	681b      	ldr	r3, [r3, #0]
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	200010c8 	.word	0x200010c8

08005368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005370:	f7ff ffee 	bl	8005350 <HAL_GetTick>
 8005374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d005      	beq.n	800538e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <HAL_Delay+0x44>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800538e:	bf00      	nop
 8005390:	f7ff ffde 	bl	8005350 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	429a      	cmp	r2, r3
 800539e:	d8f7      	bhi.n	8005390 <HAL_Delay+0x28>
  {
  }
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000008 	.word	0x20000008

080053b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <__NVIC_SetPriorityGrouping+0x44>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053cc:	4013      	ands	r3, r2
 80053ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053e2:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <__NVIC_SetPriorityGrouping+0x44>)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	60d3      	str	r3, [r2, #12]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	e000ed00 	.word	0xe000ed00

080053f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053fc:	4b04      	ldr	r3, [pc, #16]	; (8005410 <__NVIC_GetPriorityGrouping+0x18>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	0a1b      	lsrs	r3, r3, #8
 8005402:	f003 0307 	and.w	r3, r3, #7
}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	e000ed00 	.word	0xe000ed00

08005414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800541e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005422:	2b00      	cmp	r3, #0
 8005424:	db0b      	blt.n	800543e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	f003 021f 	and.w	r2, r3, #31
 800542c:	4907      	ldr	r1, [pc, #28]	; (800544c <__NVIC_EnableIRQ+0x38>)
 800542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	2001      	movs	r0, #1
 8005436:	fa00 f202 	lsl.w	r2, r0, r2
 800543a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	e000e100 	.word	0xe000e100

08005450 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800545a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545e:	2b00      	cmp	r3, #0
 8005460:	db12      	blt.n	8005488 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	f003 021f 	and.w	r2, r3, #31
 8005468:	490a      	ldr	r1, [pc, #40]	; (8005494 <__NVIC_DisableIRQ+0x44>)
 800546a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	2001      	movs	r0, #1
 8005472:	fa00 f202 	lsl.w	r2, r0, r2
 8005476:	3320      	adds	r3, #32
 8005478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800547c:	f3bf 8f4f 	dsb	sy
}
 8005480:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005482:	f3bf 8f6f 	isb	sy
}
 8005486:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	e000e100 	.word	0xe000e100

08005498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	6039      	str	r1, [r7, #0]
 80054a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	db0a      	blt.n	80054c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	490c      	ldr	r1, [pc, #48]	; (80054e4 <__NVIC_SetPriority+0x4c>)
 80054b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b6:	0112      	lsls	r2, r2, #4
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	440b      	add	r3, r1
 80054bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054c0:	e00a      	b.n	80054d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	4908      	ldr	r1, [pc, #32]	; (80054e8 <__NVIC_SetPriority+0x50>)
 80054c8:	79fb      	ldrb	r3, [r7, #7]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	3b04      	subs	r3, #4
 80054d0:	0112      	lsls	r2, r2, #4
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	440b      	add	r3, r1
 80054d6:	761a      	strb	r2, [r3, #24]
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	e000e100 	.word	0xe000e100
 80054e8:	e000ed00 	.word	0xe000ed00

080054ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f1c3 0307 	rsb	r3, r3, #7
 8005506:	2b04      	cmp	r3, #4
 8005508:	bf28      	it	cs
 800550a:	2304      	movcs	r3, #4
 800550c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	3304      	adds	r3, #4
 8005512:	2b06      	cmp	r3, #6
 8005514:	d902      	bls.n	800551c <NVIC_EncodePriority+0x30>
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	3b03      	subs	r3, #3
 800551a:	e000      	b.n	800551e <NVIC_EncodePriority+0x32>
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005520:	f04f 32ff 	mov.w	r2, #4294967295
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43da      	mvns	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	401a      	ands	r2, r3
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005534:	f04f 31ff 	mov.w	r1, #4294967295
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	fa01 f303 	lsl.w	r3, r1, r3
 800553e:	43d9      	mvns	r1, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005544:	4313      	orrs	r3, r2
         );
}
 8005546:	4618      	mov	r0, r3
 8005548:	3724      	adds	r7, #36	; 0x24
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
	...

08005554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3b01      	subs	r3, #1
 8005560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005564:	d301      	bcc.n	800556a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005566:	2301      	movs	r3, #1
 8005568:	e00f      	b.n	800558a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800556a:	4a0a      	ldr	r2, [pc, #40]	; (8005594 <SysTick_Config+0x40>)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3b01      	subs	r3, #1
 8005570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005572:	210f      	movs	r1, #15
 8005574:	f04f 30ff 	mov.w	r0, #4294967295
 8005578:	f7ff ff8e 	bl	8005498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <SysTick_Config+0x40>)
 800557e:	2200      	movs	r2, #0
 8005580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005582:	4b04      	ldr	r3, [pc, #16]	; (8005594 <SysTick_Config+0x40>)
 8005584:	2207      	movs	r2, #7
 8005586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	e000e010 	.word	0xe000e010

08005598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff ff05 	bl	80053b0 <__NVIC_SetPriorityGrouping>
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b086      	sub	sp, #24
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	4603      	mov	r3, r0
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055c0:	f7ff ff1a 	bl	80053f8 <__NVIC_GetPriorityGrouping>
 80055c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	6978      	ldr	r0, [r7, #20]
 80055cc:	f7ff ff8e 	bl	80054ec <NVIC_EncodePriority>
 80055d0:	4602      	mov	r2, r0
 80055d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055d6:	4611      	mov	r1, r2
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff ff5d 	bl	8005498 <__NVIC_SetPriority>
}
 80055de:	bf00      	nop
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	4603      	mov	r3, r0
 80055ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff ff0d 	bl	8005414 <__NVIC_EnableIRQ>
}
 80055fa:	bf00      	nop
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	4603      	mov	r3, r0
 800560a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800560c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff ff1d 	bl	8005450 <__NVIC_DisableIRQ>
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff ff94 	bl	8005554 <SysTick_Config>
 800562c:	4603      	mov	r3, r0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005644:	f7ff fe84 	bl	8005350 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e099      	b.n	8005788 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005674:	e00f      	b.n	8005696 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005676:	f7ff fe6b 	bl	8005350 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b05      	cmp	r3, #5
 8005682:	d908      	bls.n	8005696 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2203      	movs	r2, #3
 800568e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e078      	b.n	8005788 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e8      	bne.n	8005676 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	4b38      	ldr	r3, [pc, #224]	; (8005790 <HAL_DMA_Init+0x158>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d107      	bne.n	8005700 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	4313      	orrs	r3, r2
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 0307 	bic.w	r3, r3, #7
 8005716:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	2b04      	cmp	r3, #4
 8005728:	d117      	bne.n	800575a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00e      	beq.n	800575a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fae7 	bl	8005d10 <DMA_CheckFifoParam>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d008      	beq.n	800575a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2240      	movs	r2, #64	; 0x40
 800574c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005756:	2301      	movs	r3, #1
 8005758:	e016      	b.n	8005788 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa9e 	bl	8005ca4 <DMA_CalcBaseAndBitshift>
 8005768:	4603      	mov	r3, r0
 800576a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005770:	223f      	movs	r2, #63	; 0x3f
 8005772:	409a      	lsls	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	f010803f 	.word	0xf010803f

08005794 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e050      	b.n	8005848 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d101      	bne.n	80057b6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80057b2:	2302      	movs	r3, #2
 80057b4:	e048      	b.n	8005848 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0201 	bic.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2200      	movs	r2, #0
 80057d4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2200      	movs	r2, #0
 80057dc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2200      	movs	r2, #0
 80057ec:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2221      	movs	r2, #33	; 0x21
 80057f4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fa54 	bl	8005ca4 <DMA_CalcBaseAndBitshift>
 80057fc:	4603      	mov	r3, r0
 80057fe:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005828:	223f      	movs	r2, #63	; 0x3f
 800582a:	409a      	lsls	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800585e:	f7ff fd77 	bl	8005350 <HAL_GetTick>
 8005862:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d008      	beq.n	8005882 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2280      	movs	r2, #128	; 0x80
 8005874:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e052      	b.n	8005928 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0216 	bic.w	r2, r2, #22
 8005890:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695a      	ldr	r2, [r3, #20]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d103      	bne.n	80058b2 <HAL_DMA_Abort+0x62>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0208 	bic.w	r2, r2, #8
 80058c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0201 	bic.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058d2:	e013      	b.n	80058fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058d4:	f7ff fd3c 	bl	8005350 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d90c      	bls.n	80058fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2203      	movs	r2, #3
 80058ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e015      	b.n	8005928 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e4      	bne.n	80058d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590e:	223f      	movs	r2, #63	; 0x3f
 8005910:	409a      	lsls	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d004      	beq.n	800594e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2280      	movs	r2, #128	; 0x80
 8005948:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e00c      	b.n	8005968 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2205      	movs	r2, #5
 8005952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0201 	bic.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005980:	4b8e      	ldr	r3, [pc, #568]	; (8005bbc <HAL_DMA_IRQHandler+0x248>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a8e      	ldr	r2, [pc, #568]	; (8005bc0 <HAL_DMA_IRQHandler+0x24c>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	0a9b      	lsrs	r3, r3, #10
 800598c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005992:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599e:	2208      	movs	r2, #8
 80059a0:	409a      	lsls	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d01a      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d013      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0204 	bic.w	r2, r2, #4
 80059c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059cc:	2208      	movs	r2, #8
 80059ce:	409a      	lsls	r2, r3
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d8:	f043 0201 	orr.w	r2, r3, #1
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e4:	2201      	movs	r2, #1
 80059e6:	409a      	lsls	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4013      	ands	r3, r2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d012      	beq.n	8005a16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00b      	beq.n	8005a16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a02:	2201      	movs	r2, #1
 8005a04:	409a      	lsls	r2, r3
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	f043 0202 	orr.w	r2, r3, #2
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	409a      	lsls	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d012      	beq.n	8005a4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a38:	2204      	movs	r2, #4
 8005a3a:	409a      	lsls	r2, r3
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a44:	f043 0204 	orr.w	r2, r3, #4
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a50:	2210      	movs	r2, #16
 8005a52:	409a      	lsls	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4013      	ands	r3, r2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d043      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d03c      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6e:	2210      	movs	r2, #16
 8005a70:	409a      	lsls	r2, r3
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d018      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d108      	bne.n	8005aa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d024      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
 8005aa2:	e01f      	b.n	8005ae4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01b      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	4798      	blx	r3
 8005ab4:	e016      	b.n	8005ae4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d107      	bne.n	8005ad4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0208 	bic.w	r2, r2, #8
 8005ad2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae8:	2220      	movs	r2, #32
 8005aea:	409a      	lsls	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 808f 	beq.w	8005c14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8087 	beq.w	8005c14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	409a      	lsls	r2, r3
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b05      	cmp	r3, #5
 8005b1c:	d136      	bne.n	8005b8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0216 	bic.w	r2, r2, #22
 8005b2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d103      	bne.n	8005b4e <HAL_DMA_IRQHandler+0x1da>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0208 	bic.w	r2, r2, #8
 8005b5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b62:	223f      	movs	r2, #63	; 0x3f
 8005b64:	409a      	lsls	r2, r3
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d07e      	beq.n	8005c80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
        }
        return;
 8005b8a:	e079      	b.n	8005c80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01d      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10d      	bne.n	8005bc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d031      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	4798      	blx	r3
 8005bb8:	e02c      	b.n	8005c14 <HAL_DMA_IRQHandler+0x2a0>
 8005bba:	bf00      	nop
 8005bbc:	20000000 	.word	0x20000000
 8005bc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d023      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	4798      	blx	r3
 8005bd4:	e01e      	b.n	8005c14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10f      	bne.n	8005c04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0210 	bic.w	r2, r2, #16
 8005bf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d032      	beq.n	8005c82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d022      	beq.n	8005c6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2205      	movs	r2, #5
 8005c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d307      	bcc.n	8005c5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f2      	bne.n	8005c40 <HAL_DMA_IRQHandler+0x2cc>
 8005c5a:	e000      	b.n	8005c5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
 8005c7e:	e000      	b.n	8005c82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c80:	bf00      	nop
    }
  }
}
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c96:	b2db      	uxtb	r3, r3
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	3b10      	subs	r3, #16
 8005cb4:	4a14      	ldr	r2, [pc, #80]	; (8005d08 <DMA_CalcBaseAndBitshift+0x64>)
 8005cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005cbe:	4a13      	ldr	r2, [pc, #76]	; (8005d0c <DMA_CalcBaseAndBitshift+0x68>)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d909      	bls.n	8005ce6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cda:	f023 0303 	bic.w	r3, r3, #3
 8005cde:	1d1a      	adds	r2, r3, #4
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	659a      	str	r2, [r3, #88]	; 0x58
 8005ce4:	e007      	b.n	8005cf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	aaaaaaab 	.word	0xaaaaaaab
 8005d0c:	0800f3dc 	.word	0x0800f3dc

08005d10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d11f      	bne.n	8005d6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d856      	bhi.n	8005dde <DMA_CheckFifoParam+0xce>
 8005d30:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <DMA_CheckFifoParam+0x28>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005d49 	.word	0x08005d49
 8005d3c:	08005d5b 	.word	0x08005d5b
 8005d40:	08005d49 	.word	0x08005d49
 8005d44:	08005ddf 	.word	0x08005ddf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d046      	beq.n	8005de2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d58:	e043      	b.n	8005de2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d62:	d140      	bne.n	8005de6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d68:	e03d      	b.n	8005de6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d72:	d121      	bne.n	8005db8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d837      	bhi.n	8005dea <DMA_CheckFifoParam+0xda>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <DMA_CheckFifoParam+0x70>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005d91 	.word	0x08005d91
 8005d84:	08005d97 	.word	0x08005d97
 8005d88:	08005d91 	.word	0x08005d91
 8005d8c:	08005da9 	.word	0x08005da9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	73fb      	strb	r3, [r7, #15]
      break;
 8005d94:	e030      	b.n	8005df8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d025      	beq.n	8005dee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005da6:	e022      	b.n	8005dee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005db0:	d11f      	bne.n	8005df2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005db6:	e01c      	b.n	8005df2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d903      	bls.n	8005dc6 <DMA_CheckFifoParam+0xb6>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d003      	beq.n	8005dcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005dc4:	e018      	b.n	8005df8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005dca:	e015      	b.n	8005df8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00e      	beq.n	8005df6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
      break;
 8005ddc:	e00b      	b.n	8005df6 <DMA_CheckFifoParam+0xe6>
      break;
 8005dde:	bf00      	nop
 8005de0:	e00a      	b.n	8005df8 <DMA_CheckFifoParam+0xe8>
      break;
 8005de2:	bf00      	nop
 8005de4:	e008      	b.n	8005df8 <DMA_CheckFifoParam+0xe8>
      break;
 8005de6:	bf00      	nop
 8005de8:	e006      	b.n	8005df8 <DMA_CheckFifoParam+0xe8>
      break;
 8005dea:	bf00      	nop
 8005dec:	e004      	b.n	8005df8 <DMA_CheckFifoParam+0xe8>
      break;
 8005dee:	bf00      	nop
 8005df0:	e002      	b.n	8005df8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <DMA_CheckFifoParam+0xe8>
      break;
 8005df6:	bf00      	nop
    }
  } 
  
  return status; 
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop

08005e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b089      	sub	sp, #36	; 0x24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61fb      	str	r3, [r7, #28]
 8005e22:	e159      	b.n	80060d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e24:	2201      	movs	r2, #1
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4013      	ands	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	f040 8148 	bne.w	80060d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d005      	beq.n	8005e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d130      	bne.n	8005ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	2203      	movs	r2, #3
 8005e66:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e90:	2201      	movs	r2, #1
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	091b      	lsrs	r3, r3, #4
 8005ea6:	f003 0201 	and.w	r2, r3, #1
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f003 0303 	and.w	r3, r3, #3
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d017      	beq.n	8005ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	4013      	ands	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d123      	bne.n	8005f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	08da      	lsrs	r2, r3, #3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3208      	adds	r2, #8
 8005f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	220f      	movs	r2, #15
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	43db      	mvns	r3, r3
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	4013      	ands	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	08da      	lsrs	r2, r3, #3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3208      	adds	r2, #8
 8005f46:	69b9      	ldr	r1, [r7, #24]
 8005f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	2203      	movs	r2, #3
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4013      	ands	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f003 0203 	and.w	r2, r3, #3
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 80a2 	beq.w	80060d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	4b57      	ldr	r3, [pc, #348]	; (80060f0 <HAL_GPIO_Init+0x2e8>)
 8005f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f96:	4a56      	ldr	r2, [pc, #344]	; (80060f0 <HAL_GPIO_Init+0x2e8>)
 8005f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f9e:	4b54      	ldr	r3, [pc, #336]	; (80060f0 <HAL_GPIO_Init+0x2e8>)
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005faa:	4a52      	ldr	r2, [pc, #328]	; (80060f4 <HAL_GPIO_Init+0x2ec>)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	089b      	lsrs	r3, r3, #2
 8005fb0:	3302      	adds	r3, #2
 8005fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	220f      	movs	r2, #15
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a49      	ldr	r2, [pc, #292]	; (80060f8 <HAL_GPIO_Init+0x2f0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d019      	beq.n	800600a <HAL_GPIO_Init+0x202>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a48      	ldr	r2, [pc, #288]	; (80060fc <HAL_GPIO_Init+0x2f4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d013      	beq.n	8006006 <HAL_GPIO_Init+0x1fe>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a47      	ldr	r2, [pc, #284]	; (8006100 <HAL_GPIO_Init+0x2f8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00d      	beq.n	8006002 <HAL_GPIO_Init+0x1fa>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a46      	ldr	r2, [pc, #280]	; (8006104 <HAL_GPIO_Init+0x2fc>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d007      	beq.n	8005ffe <HAL_GPIO_Init+0x1f6>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a45      	ldr	r2, [pc, #276]	; (8006108 <HAL_GPIO_Init+0x300>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d101      	bne.n	8005ffa <HAL_GPIO_Init+0x1f2>
 8005ff6:	2304      	movs	r3, #4
 8005ff8:	e008      	b.n	800600c <HAL_GPIO_Init+0x204>
 8005ffa:	2307      	movs	r3, #7
 8005ffc:	e006      	b.n	800600c <HAL_GPIO_Init+0x204>
 8005ffe:	2303      	movs	r3, #3
 8006000:	e004      	b.n	800600c <HAL_GPIO_Init+0x204>
 8006002:	2302      	movs	r3, #2
 8006004:	e002      	b.n	800600c <HAL_GPIO_Init+0x204>
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <HAL_GPIO_Init+0x204>
 800600a:	2300      	movs	r3, #0
 800600c:	69fa      	ldr	r2, [r7, #28]
 800600e:	f002 0203 	and.w	r2, r2, #3
 8006012:	0092      	lsls	r2, r2, #2
 8006014:	4093      	lsls	r3, r2
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	4313      	orrs	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800601c:	4935      	ldr	r1, [pc, #212]	; (80060f4 <HAL_GPIO_Init+0x2ec>)
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	089b      	lsrs	r3, r3, #2
 8006022:	3302      	adds	r3, #2
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800602a:	4b38      	ldr	r3, [pc, #224]	; (800610c <HAL_GPIO_Init+0x304>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	43db      	mvns	r3, r3
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	4013      	ands	r3, r2
 8006038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800604e:	4a2f      	ldr	r2, [pc, #188]	; (800610c <HAL_GPIO_Init+0x304>)
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006054:	4b2d      	ldr	r3, [pc, #180]	; (800610c <HAL_GPIO_Init+0x304>)
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	43db      	mvns	r3, r3
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	4013      	ands	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006078:	4a24      	ldr	r2, [pc, #144]	; (800610c <HAL_GPIO_Init+0x304>)
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800607e:	4b23      	ldr	r3, [pc, #140]	; (800610c <HAL_GPIO_Init+0x304>)
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	43db      	mvns	r3, r3
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4013      	ands	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060a2:	4a1a      	ldr	r2, [pc, #104]	; (800610c <HAL_GPIO_Init+0x304>)
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060a8:	4b18      	ldr	r3, [pc, #96]	; (800610c <HAL_GPIO_Init+0x304>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4013      	ands	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060cc:	4a0f      	ldr	r2, [pc, #60]	; (800610c <HAL_GPIO_Init+0x304>)
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	3301      	adds	r3, #1
 80060d6:	61fb      	str	r3, [r7, #28]
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	2b0f      	cmp	r3, #15
 80060dc:	f67f aea2 	bls.w	8005e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	3724      	adds	r7, #36	; 0x24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40023800 	.word	0x40023800
 80060f4:	40013800 	.word	0x40013800
 80060f8:	40020000 	.word	0x40020000
 80060fc:	40020400 	.word	0x40020400
 8006100:	40020800 	.word	0x40020800
 8006104:	40020c00 	.word	0x40020c00
 8006108:	40021000 	.word	0x40021000
 800610c:	40013c00 	.word	0x40013c00

08006110 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800611a:	2300      	movs	r3, #0
 800611c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006122:	2300      	movs	r3, #0
 8006124:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006126:	2300      	movs	r3, #0
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	e0bb      	b.n	80062a4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800612c:	2201      	movs	r2, #1
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	4013      	ands	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	429a      	cmp	r2, r3
 8006144:	f040 80ab 	bne.w	800629e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006148:	4a5c      	ldr	r2, [pc, #368]	; (80062bc <HAL_GPIO_DeInit+0x1ac>)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	089b      	lsrs	r3, r3, #2
 800614e:	3302      	adds	r3, #2
 8006150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006154:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f003 0303 	and.w	r3, r3, #3
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	220f      	movs	r2, #15
 8006160:	fa02 f303 	lsl.w	r3, r2, r3
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	4013      	ands	r3, r2
 8006168:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a54      	ldr	r2, [pc, #336]	; (80062c0 <HAL_GPIO_DeInit+0x1b0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d019      	beq.n	80061a6 <HAL_GPIO_DeInit+0x96>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a53      	ldr	r2, [pc, #332]	; (80062c4 <HAL_GPIO_DeInit+0x1b4>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d013      	beq.n	80061a2 <HAL_GPIO_DeInit+0x92>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a52      	ldr	r2, [pc, #328]	; (80062c8 <HAL_GPIO_DeInit+0x1b8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00d      	beq.n	800619e <HAL_GPIO_DeInit+0x8e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a51      	ldr	r2, [pc, #324]	; (80062cc <HAL_GPIO_DeInit+0x1bc>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d007      	beq.n	800619a <HAL_GPIO_DeInit+0x8a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a50      	ldr	r2, [pc, #320]	; (80062d0 <HAL_GPIO_DeInit+0x1c0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d101      	bne.n	8006196 <HAL_GPIO_DeInit+0x86>
 8006192:	2304      	movs	r3, #4
 8006194:	e008      	b.n	80061a8 <HAL_GPIO_DeInit+0x98>
 8006196:	2307      	movs	r3, #7
 8006198:	e006      	b.n	80061a8 <HAL_GPIO_DeInit+0x98>
 800619a:	2303      	movs	r3, #3
 800619c:	e004      	b.n	80061a8 <HAL_GPIO_DeInit+0x98>
 800619e:	2302      	movs	r3, #2
 80061a0:	e002      	b.n	80061a8 <HAL_GPIO_DeInit+0x98>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e000      	b.n	80061a8 <HAL_GPIO_DeInit+0x98>
 80061a6:	2300      	movs	r3, #0
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	f002 0203 	and.w	r2, r2, #3
 80061ae:	0092      	lsls	r2, r2, #2
 80061b0:	4093      	lsls	r3, r2
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d132      	bne.n	800621e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80061b8:	4b46      	ldr	r3, [pc, #280]	; (80062d4 <HAL_GPIO_DeInit+0x1c4>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	43db      	mvns	r3, r3
 80061c0:	4944      	ldr	r1, [pc, #272]	; (80062d4 <HAL_GPIO_DeInit+0x1c4>)
 80061c2:	4013      	ands	r3, r2
 80061c4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80061c6:	4b43      	ldr	r3, [pc, #268]	; (80062d4 <HAL_GPIO_DeInit+0x1c4>)
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	43db      	mvns	r3, r3
 80061ce:	4941      	ldr	r1, [pc, #260]	; (80062d4 <HAL_GPIO_DeInit+0x1c4>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80061d4:	4b3f      	ldr	r3, [pc, #252]	; (80062d4 <HAL_GPIO_DeInit+0x1c4>)
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	43db      	mvns	r3, r3
 80061dc:	493d      	ldr	r1, [pc, #244]	; (80062d4 <HAL_GPIO_DeInit+0x1c4>)
 80061de:	4013      	ands	r3, r2
 80061e0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80061e2:	4b3c      	ldr	r3, [pc, #240]	; (80062d4 <HAL_GPIO_DeInit+0x1c4>)
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	43db      	mvns	r3, r3
 80061ea:	493a      	ldr	r1, [pc, #232]	; (80062d4 <HAL_GPIO_DeInit+0x1c4>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	220f      	movs	r2, #15
 80061fa:	fa02 f303 	lsl.w	r3, r2, r3
 80061fe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006200:	4a2e      	ldr	r2, [pc, #184]	; (80062bc <HAL_GPIO_DeInit+0x1ac>)
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	089b      	lsrs	r3, r3, #2
 8006206:	3302      	adds	r3, #2
 8006208:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	43da      	mvns	r2, r3
 8006210:	482a      	ldr	r0, [pc, #168]	; (80062bc <HAL_GPIO_DeInit+0x1ac>)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	089b      	lsrs	r3, r3, #2
 8006216:	400a      	ands	r2, r1
 8006218:	3302      	adds	r3, #2
 800621a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	2103      	movs	r1, #3
 8006228:	fa01 f303 	lsl.w	r3, r1, r3
 800622c:	43db      	mvns	r3, r3
 800622e:	401a      	ands	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	08da      	lsrs	r2, r3, #3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3208      	adds	r2, #8
 800623c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	220f      	movs	r2, #15
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	43db      	mvns	r3, r3
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	08d2      	lsrs	r2, r2, #3
 8006254:	4019      	ands	r1, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	3208      	adds	r2, #8
 800625a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	2103      	movs	r1, #3
 8006268:	fa01 f303 	lsl.w	r3, r1, r3
 800626c:	43db      	mvns	r3, r3
 800626e:	401a      	ands	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	2101      	movs	r1, #1
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	fa01 f303 	lsl.w	r3, r1, r3
 8006280:	43db      	mvns	r3, r3
 8006282:	401a      	ands	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	2103      	movs	r1, #3
 8006292:	fa01 f303 	lsl.w	r3, r1, r3
 8006296:	43db      	mvns	r3, r3
 8006298:	401a      	ands	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	3301      	adds	r3, #1
 80062a2:	617b      	str	r3, [r7, #20]
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b0f      	cmp	r3, #15
 80062a8:	f67f af40 	bls.w	800612c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80062ac:	bf00      	nop
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40013800 	.word	0x40013800
 80062c0:	40020000 	.word	0x40020000
 80062c4:	40020400 	.word	0x40020400
 80062c8:	40020800 	.word	0x40020800
 80062cc:	40020c00 	.word	0x40020c00
 80062d0:	40021000 	.word	0x40021000
 80062d4:	40013c00 	.word	0x40013c00

080062d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	807b      	strh	r3, [r7, #2]
 80062e4:	4613      	mov	r3, r2
 80062e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062e8:	787b      	ldrb	r3, [r7, #1]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062ee:	887a      	ldrh	r2, [r7, #2]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062f4:	e003      	b.n	80062fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062f6:	887b      	ldrh	r3, [r7, #2]
 80062f8:	041a      	lsls	r2, r3, #16
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	619a      	str	r2, [r3, #24]
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
	...

0800630c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e12b      	b.n	8006576 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7fe fb82 	bl	8004a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2224      	movs	r2, #36	; 0x24
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0201 	bic.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800635e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800636e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006370:	f002 fa1c 	bl	80087ac <HAL_RCC_GetPCLK1Freq>
 8006374:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	4a81      	ldr	r2, [pc, #516]	; (8006580 <HAL_I2C_Init+0x274>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d807      	bhi.n	8006390 <HAL_I2C_Init+0x84>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4a80      	ldr	r2, [pc, #512]	; (8006584 <HAL_I2C_Init+0x278>)
 8006384:	4293      	cmp	r3, r2
 8006386:	bf94      	ite	ls
 8006388:	2301      	movls	r3, #1
 800638a:	2300      	movhi	r3, #0
 800638c:	b2db      	uxtb	r3, r3
 800638e:	e006      	b.n	800639e <HAL_I2C_Init+0x92>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4a7d      	ldr	r2, [pc, #500]	; (8006588 <HAL_I2C_Init+0x27c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	bf94      	ite	ls
 8006398:	2301      	movls	r3, #1
 800639a:	2300      	movhi	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e0e7      	b.n	8006576 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4a78      	ldr	r2, [pc, #480]	; (800658c <HAL_I2C_Init+0x280>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	0c9b      	lsrs	r3, r3, #18
 80063b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	4a6a      	ldr	r2, [pc, #424]	; (8006580 <HAL_I2C_Init+0x274>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d802      	bhi.n	80063e0 <HAL_I2C_Init+0xd4>
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	3301      	adds	r3, #1
 80063de:	e009      	b.n	80063f4 <HAL_I2C_Init+0xe8>
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063e6:	fb02 f303 	mul.w	r3, r2, r3
 80063ea:	4a69      	ldr	r2, [pc, #420]	; (8006590 <HAL_I2C_Init+0x284>)
 80063ec:	fba2 2303 	umull	r2, r3, r2, r3
 80063f0:	099b      	lsrs	r3, r3, #6
 80063f2:	3301      	adds	r3, #1
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6812      	ldr	r2, [r2, #0]
 80063f8:	430b      	orrs	r3, r1
 80063fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006406:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	495c      	ldr	r1, [pc, #368]	; (8006580 <HAL_I2C_Init+0x274>)
 8006410:	428b      	cmp	r3, r1
 8006412:	d819      	bhi.n	8006448 <HAL_I2C_Init+0x13c>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	1e59      	subs	r1, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006422:	1c59      	adds	r1, r3, #1
 8006424:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006428:	400b      	ands	r3, r1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <HAL_I2C_Init+0x138>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1e59      	subs	r1, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	fbb1 f3f3 	udiv	r3, r1, r3
 800643c:	3301      	adds	r3, #1
 800643e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006442:	e051      	b.n	80064e8 <HAL_I2C_Init+0x1dc>
 8006444:	2304      	movs	r3, #4
 8006446:	e04f      	b.n	80064e8 <HAL_I2C_Init+0x1dc>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d111      	bne.n	8006474 <HAL_I2C_Init+0x168>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	1e58      	subs	r0, r3, #1
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6859      	ldr	r1, [r3, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	440b      	add	r3, r1
 800645e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006462:	3301      	adds	r3, #1
 8006464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006468:	2b00      	cmp	r3, #0
 800646a:	bf0c      	ite	eq
 800646c:	2301      	moveq	r3, #1
 800646e:	2300      	movne	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	e012      	b.n	800649a <HAL_I2C_Init+0x18e>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	1e58      	subs	r0, r3, #1
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6859      	ldr	r1, [r3, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	440b      	add	r3, r1
 8006482:	0099      	lsls	r1, r3, #2
 8006484:	440b      	add	r3, r1
 8006486:	fbb0 f3f3 	udiv	r3, r0, r3
 800648a:	3301      	adds	r3, #1
 800648c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006490:	2b00      	cmp	r3, #0
 8006492:	bf0c      	ite	eq
 8006494:	2301      	moveq	r3, #1
 8006496:	2300      	movne	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <HAL_I2C_Init+0x196>
 800649e:	2301      	movs	r3, #1
 80064a0:	e022      	b.n	80064e8 <HAL_I2C_Init+0x1dc>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10e      	bne.n	80064c8 <HAL_I2C_Init+0x1bc>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	1e58      	subs	r0, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6859      	ldr	r1, [r3, #4]
 80064b2:	460b      	mov	r3, r1
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	440b      	add	r3, r1
 80064b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80064bc:	3301      	adds	r3, #1
 80064be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c6:	e00f      	b.n	80064e8 <HAL_I2C_Init+0x1dc>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	1e58      	subs	r0, r3, #1
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6859      	ldr	r1, [r3, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	0099      	lsls	r1, r3, #2
 80064d8:	440b      	add	r3, r1
 80064da:	fbb0 f3f3 	udiv	r3, r0, r3
 80064de:	3301      	adds	r3, #1
 80064e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	6809      	ldr	r1, [r1, #0]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	69da      	ldr	r2, [r3, #28]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6911      	ldr	r1, [r2, #16]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	68d2      	ldr	r2, [r2, #12]
 8006522:	4311      	orrs	r1, r2
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	430b      	orrs	r3, r1
 800652a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	695a      	ldr	r2, [r3, #20]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0201 	orr.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	000186a0 	.word	0x000186a0
 8006584:	001e847f 	.word	0x001e847f
 8006588:	003d08ff 	.word	0x003d08ff
 800658c:	431bde83 	.word	0x431bde83
 8006590:	10624dd3 	.word	0x10624dd3

08006594 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80065be:	7bfb      	ldrb	r3, [r7, #15]
 80065c0:	2b10      	cmp	r3, #16
 80065c2:	d003      	beq.n	80065cc <HAL_I2C_EV_IRQHandler+0x38>
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	2b40      	cmp	r3, #64	; 0x40
 80065c8:	f040 80c1 	bne.w	800674e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10d      	bne.n	8006602 <HAL_I2C_EV_IRQHandler+0x6e>
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80065ec:	d003      	beq.n	80065f6 <HAL_I2C_EV_IRQHandler+0x62>
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80065f4:	d101      	bne.n	80065fa <HAL_I2C_EV_IRQHandler+0x66>
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <HAL_I2C_EV_IRQHandler+0x68>
 80065fa:	2300      	movs	r3, #0
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	f000 8132 	beq.w	8006866 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00c      	beq.n	8006626 <HAL_I2C_EV_IRQHandler+0x92>
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	0a5b      	lsrs	r3, r3, #9
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d006      	beq.n	8006626 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 fc7b 	bl	8007f14 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fd83 	bl	800712a <I2C_Master_SB>
 8006624:	e092      	b.n	800674c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	08db      	lsrs	r3, r3, #3
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d009      	beq.n	8006646 <HAL_I2C_EV_IRQHandler+0xb2>
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	0a5b      	lsrs	r3, r3, #9
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fdf9 	bl	8007236 <I2C_Master_ADD10>
 8006644:	e082      	b.n	800674c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	085b      	lsrs	r3, r3, #1
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d009      	beq.n	8006666 <HAL_I2C_EV_IRQHandler+0xd2>
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	0a5b      	lsrs	r3, r3, #9
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fe13 	bl	800728a <I2C_Master_ADDR>
 8006664:	e072      	b.n	800674c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	089b      	lsrs	r3, r3, #2
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d03b      	beq.n	80066ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800667c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006680:	f000 80f3 	beq.w	800686a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	09db      	lsrs	r3, r3, #7
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00f      	beq.n	80066b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	0a9b      	lsrs	r3, r3, #10
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d009      	beq.n	80066b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	089b      	lsrs	r3, r3, #2
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d103      	bne.n	80066b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f9f3 	bl	8006a94 <I2C_MasterTransmit_TXE>
 80066ae:	e04d      	b.n	800674c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	089b      	lsrs	r3, r3, #2
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 80d6 	beq.w	800686a <HAL_I2C_EV_IRQHandler+0x2d6>
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	0a5b      	lsrs	r3, r3, #9
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 80cf 	beq.w	800686a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	2b21      	cmp	r3, #33	; 0x21
 80066d0:	d103      	bne.n	80066da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fa7a 	bl	8006bcc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066d8:	e0c7      	b.n	800686a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	2b40      	cmp	r3, #64	; 0x40
 80066de:	f040 80c4 	bne.w	800686a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fae8 	bl	8006cb8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066e8:	e0bf      	b.n	800686a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066f8:	f000 80b7 	beq.w	800686a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	099b      	lsrs	r3, r3, #6
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00f      	beq.n	8006728 <HAL_I2C_EV_IRQHandler+0x194>
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	0a9b      	lsrs	r3, r3, #10
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d009      	beq.n	8006728 <HAL_I2C_EV_IRQHandler+0x194>
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	089b      	lsrs	r3, r3, #2
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d103      	bne.n	8006728 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fb5d 	bl	8006de0 <I2C_MasterReceive_RXNE>
 8006726:	e011      	b.n	800674c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	089b      	lsrs	r3, r3, #2
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 809a 	beq.w	800686a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	0a5b      	lsrs	r3, r3, #9
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 8093 	beq.w	800686a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fc06 	bl	8006f56 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800674a:	e08e      	b.n	800686a <HAL_I2C_EV_IRQHandler+0x2d6>
 800674c:	e08d      	b.n	800686a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	61fb      	str	r3, [r7, #28]
 800675e:	e007      	b.n	8006770 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d012      	beq.n	80067a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	0a5b      	lsrs	r3, r3, #9
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00c      	beq.n	80067a2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006798:	69b9      	ldr	r1, [r7, #24]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 ffc4 	bl	8007728 <I2C_Slave_ADDR>
 80067a0:	e066      	b.n	8006870 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	091b      	lsrs	r3, r3, #4
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d009      	beq.n	80067c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	0a5b      	lsrs	r3, r3, #9
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fffe 	bl	80077bc <I2C_Slave_STOPF>
 80067c0:	e056      	b.n	8006870 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80067c2:	7bbb      	ldrb	r3, [r7, #14]
 80067c4:	2b21      	cmp	r3, #33	; 0x21
 80067c6:	d002      	beq.n	80067ce <HAL_I2C_EV_IRQHandler+0x23a>
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	2b29      	cmp	r3, #41	; 0x29
 80067cc:	d125      	bne.n	800681a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	09db      	lsrs	r3, r3, #7
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00f      	beq.n	80067fa <HAL_I2C_EV_IRQHandler+0x266>
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	0a9b      	lsrs	r3, r3, #10
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <HAL_I2C_EV_IRQHandler+0x266>
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	089b      	lsrs	r3, r3, #2
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d103      	bne.n	80067fa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 feda 	bl	80075ac <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067f8:	e039      	b.n	800686e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	089b      	lsrs	r3, r3, #2
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d033      	beq.n	800686e <HAL_I2C_EV_IRQHandler+0x2da>
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	0a5b      	lsrs	r3, r3, #9
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d02d      	beq.n	800686e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 ff07 	bl	8007626 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006818:	e029      	b.n	800686e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	099b      	lsrs	r3, r3, #6
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00f      	beq.n	8006846 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	0a9b      	lsrs	r3, r3, #10
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	089b      	lsrs	r3, r3, #2
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d103      	bne.n	8006846 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 ff12 	bl	8007668 <I2C_SlaveReceive_RXNE>
 8006844:	e014      	b.n	8006870 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	089b      	lsrs	r3, r3, #2
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00e      	beq.n	8006870 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	0a5b      	lsrs	r3, r3, #9
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d008      	beq.n	8006870 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 ff40 	bl	80076e4 <I2C_SlaveReceive_BTF>
 8006864:	e004      	b.n	8006870 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006866:	bf00      	nop
 8006868:	e002      	b.n	8006870 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800686a:	bf00      	nop
 800686c:	e000      	b.n	8006870 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800686e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006870:	3720      	adds	r7, #32
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b08a      	sub	sp, #40	; 0x28
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800688e:	2300      	movs	r3, #0
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006898:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	0a1b      	lsrs	r3, r3, #8
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00e      	beq.n	80068c4 <HAL_I2C_ER_IRQHandler+0x4e>
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	0a1b      	lsrs	r3, r3, #8
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d008      	beq.n	80068c4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	0a5b      	lsrs	r3, r3, #9
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00e      	beq.n	80068ee <HAL_I2C_ER_IRQHandler+0x78>
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	0a1b      	lsrs	r3, r3, #8
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d008      	beq.n	80068ee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	f043 0302 	orr.w	r3, r3, #2
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80068ec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	0a9b      	lsrs	r3, r3, #10
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d03f      	beq.n	800697a <HAL_I2C_ER_IRQHandler+0x104>
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	0a1b      	lsrs	r3, r3, #8
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d039      	beq.n	800697a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006906:	7efb      	ldrb	r3, [r7, #27]
 8006908:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800690e:	b29b      	uxth	r3, r3
 8006910:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006918:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006920:	7ebb      	ldrb	r3, [r7, #26]
 8006922:	2b20      	cmp	r3, #32
 8006924:	d112      	bne.n	800694c <HAL_I2C_ER_IRQHandler+0xd6>
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10f      	bne.n	800694c <HAL_I2C_ER_IRQHandler+0xd6>
 800692c:	7cfb      	ldrb	r3, [r7, #19]
 800692e:	2b21      	cmp	r3, #33	; 0x21
 8006930:	d008      	beq.n	8006944 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006932:	7cfb      	ldrb	r3, [r7, #19]
 8006934:	2b29      	cmp	r3, #41	; 0x29
 8006936:	d005      	beq.n	8006944 <HAL_I2C_ER_IRQHandler+0xce>
 8006938:	7cfb      	ldrb	r3, [r7, #19]
 800693a:	2b28      	cmp	r3, #40	; 0x28
 800693c:	d106      	bne.n	800694c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b21      	cmp	r3, #33	; 0x21
 8006942:	d103      	bne.n	800694c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 f869 	bl	8007a1c <I2C_Slave_AF>
 800694a:	e016      	b.n	800697a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006954:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	f043 0304 	orr.w	r3, r3, #4
 800695c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800695e:	7efb      	ldrb	r3, [r7, #27]
 8006960:	2b10      	cmp	r3, #16
 8006962:	d002      	beq.n	800696a <HAL_I2C_ER_IRQHandler+0xf4>
 8006964:	7efb      	ldrb	r3, [r7, #27]
 8006966:	2b40      	cmp	r3, #64	; 0x40
 8006968:	d107      	bne.n	800697a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006978:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	0adb      	lsrs	r3, r3, #11
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00e      	beq.n	80069a4 <HAL_I2C_ER_IRQHandler+0x12e>
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	f043 0308 	orr.w	r3, r3, #8
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80069a2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d008      	beq.n	80069bc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	431a      	orrs	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 f8a0 	bl	8007afc <I2C_ITError>
  }
}
 80069bc:	bf00      	nop
 80069be:	3728      	adds	r7, #40	; 0x28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70fb      	strb	r3, [r7, #3]
 8006a20:	4613      	mov	r3, r2
 8006a22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aaa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d150      	bne.n	8006b5c <I2C_MasterTransmit_TXE+0xc8>
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
 8006abc:	2b21      	cmp	r3, #33	; 0x21
 8006abe:	d14d      	bne.n	8006b5c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	d01d      	beq.n	8006b02 <I2C_MasterTransmit_TXE+0x6e>
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	d01a      	beq.n	8006b02 <I2C_MasterTransmit_TXE+0x6e>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ad2:	d016      	beq.n	8006b02 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ae2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2211      	movs	r2, #17
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff ff62 	bl	80069c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b00:	e060      	b.n	8006bc4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b10:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b20:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b40      	cmp	r3, #64	; 0x40
 8006b3a:	d107      	bne.n	8006b4c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff ff7d 	bl	8006a44 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b4a:	e03b      	b.n	8006bc4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7ff ff35 	bl	80069c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b5a:	e033      	b.n	8006bc4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b21      	cmp	r3, #33	; 0x21
 8006b60:	d005      	beq.n	8006b6e <I2C_MasterTransmit_TXE+0xda>
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	2b40      	cmp	r3, #64	; 0x40
 8006b66:	d12d      	bne.n	8006bc4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	2b22      	cmp	r3, #34	; 0x22
 8006b6c:	d12a      	bne.n	8006bc4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d108      	bne.n	8006b8a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b86:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006b88:	e01c      	b.n	8006bc4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b40      	cmp	r3, #64	; 0x40
 8006b94:	d103      	bne.n	8006b9e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f88e 	bl	8006cb8 <I2C_MemoryTransmit_TXE_BTF>
}
 8006b9c:	e012      	b.n	8006bc4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	781a      	ldrb	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006bc2:	e7ff      	b.n	8006bc4 <I2C_MasterTransmit_TXE+0x130>
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b21      	cmp	r3, #33	; 0x21
 8006be4:	d164      	bne.n	8006cb0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d012      	beq.n	8006c16 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	781a      	ldrb	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006c14:	e04c      	b.n	8006cb0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d01d      	beq.n	8006c58 <I2C_MasterTransmit_BTF+0x8c>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d01a      	beq.n	8006c58 <I2C_MasterTransmit_BTF+0x8c>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c28:	d016      	beq.n	8006c58 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c38:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2211      	movs	r2, #17
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2220      	movs	r2, #32
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff feb7 	bl	80069c4 <HAL_I2C_MasterTxCpltCallback>
}
 8006c56:	e02b      	b.n	8006cb0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c66:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c76:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b40      	cmp	r3, #64	; 0x40
 8006c90:	d107      	bne.n	8006ca2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fed2 	bl	8006a44 <HAL_I2C_MemTxCpltCallback>
}
 8006ca0:	e006      	b.n	8006cb0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7ff fe8a 	bl	80069c4 <HAL_I2C_MasterTxCpltCallback>
}
 8006cb0:	bf00      	nop
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d11d      	bne.n	8006d0c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d10b      	bne.n	8006cf0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce8:	1c9a      	adds	r2, r3, #2
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006cee:	e073      	b.n	8006dd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	121b      	asrs	r3, r3, #8
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d04:	1c5a      	adds	r2, r3, #1
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006d0a:	e065      	b.n	8006dd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d10b      	bne.n	8006d2c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006d2a:	e055      	b.n	8006dd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d151      	bne.n	8006dd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	2b22      	cmp	r3, #34	; 0x22
 8006d38:	d10d      	bne.n	8006d56 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d48:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006d54:	e040      	b.n	8006dd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d015      	beq.n	8006d8c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	2b21      	cmp	r3, #33	; 0x21
 8006d64:	d112      	bne.n	8006d8c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	781a      	ldrb	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	3b01      	subs	r3, #1
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d8a:	e025      	b.n	8006dd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d120      	bne.n	8006dd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
 8006d98:	2b21      	cmp	r3, #33	; 0x21
 8006d9a:	d11d      	bne.n	8006dd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006daa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff fe36 	bl	8006a44 <HAL_I2C_MemTxCpltCallback>
}
 8006dd8:	bf00      	nop
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b22      	cmp	r3, #34	; 0x22
 8006df2:	f040 80ac 	bne.w	8006f4e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d921      	bls.n	8006e48 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	f040 808c 	bne.w	8006f4e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e44:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006e46:	e082      	b.n	8006f4e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d075      	beq.n	8006f3c <I2C_MasterReceive_RXNE+0x15c>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d002      	beq.n	8006e5c <I2C_MasterReceive_RXNE+0x7c>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d16f      	bne.n	8006f3c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 f827 	bl	8007eb0 <I2C_WaitOnSTOPRequestThroughIT>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d142      	bne.n	8006eee <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e76:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e86:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b40      	cmp	r3, #64	; 0x40
 8006ec0:	d10a      	bne.n	8006ed8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff fdc1 	bl	8006a58 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006ed6:	e03a      	b.n	8006f4e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2212      	movs	r2, #18
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff fd76 	bl	80069d8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006eec:	e02f      	b.n	8006f4e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006efc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff fd99 	bl	8006a6c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f3a:	e008      	b.n	8006f4e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f4a:	605a      	str	r2, [r3, #4]
}
 8006f4c:	e7ff      	b.n	8006f4e <I2C_MasterReceive_RXNE+0x16e>
 8006f4e:	bf00      	nop
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f62:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d11b      	bne.n	8006fa6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f7c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691a      	ldr	r2, [r3, #16]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006fa4:	e0bd      	b.n	8007122 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d129      	bne.n	8007004 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fbe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d00a      	beq.n	8006fdc <I2C_MasterReceive_BTF+0x86>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d007      	beq.n	8006fdc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fda:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691a      	ldr	r2, [r3, #16]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007002:	e08e      	b.n	8007122 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b02      	cmp	r3, #2
 800700c:	d176      	bne.n	80070fc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d002      	beq.n	800701a <I2C_MasterReceive_BTF+0xc4>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b10      	cmp	r3, #16
 8007018:	d108      	bne.n	800702c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	e019      	b.n	8007060 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b04      	cmp	r3, #4
 8007030:	d002      	beq.n	8007038 <I2C_MasterReceive_BTF+0xe2>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2b02      	cmp	r3, #2
 8007036:	d108      	bne.n	800704a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	e00a      	b.n	8007060 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b10      	cmp	r3, #16
 800704e:	d007      	beq.n	8007060 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800705e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	691a      	ldr	r2, [r3, #16]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	b2d2      	uxtb	r2, r2
 800706c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800707c:	b29b      	uxth	r3, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80070ba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b40      	cmp	r3, #64	; 0x40
 80070ce:	d10a      	bne.n	80070e6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff fcba 	bl	8006a58 <HAL_I2C_MemRxCpltCallback>
}
 80070e4:	e01d      	b.n	8007122 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2212      	movs	r2, #18
 80070f2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff fc6f 	bl	80069d8 <HAL_I2C_MasterRxCpltCallback>
}
 80070fa:	e012      	b.n	8007122 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	691a      	ldr	r2, [r3, #16]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29a      	uxth	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007122:	bf00      	nop
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	d117      	bne.n	800716e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007142:	2b00      	cmp	r3, #0
 8007144:	d109      	bne.n	800715a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714a:	b2db      	uxtb	r3, r3
 800714c:	461a      	mov	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007156:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007158:	e067      	b.n	800722a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715e:	b2db      	uxtb	r3, r3
 8007160:	f043 0301 	orr.w	r3, r3, #1
 8007164:	b2da      	uxtb	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	611a      	str	r2, [r3, #16]
}
 800716c:	e05d      	b.n	800722a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007176:	d133      	bne.n	80071e0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b21      	cmp	r3, #33	; 0x21
 8007182:	d109      	bne.n	8007198 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007188:	b2db      	uxtb	r3, r3
 800718a:	461a      	mov	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007194:	611a      	str	r2, [r3, #16]
 8007196:	e008      	b.n	80071aa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719c:	b2db      	uxtb	r3, r3
 800719e:	f043 0301 	orr.w	r3, r3, #1
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d004      	beq.n	80071bc <I2C_Master_SB+0x92>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d108      	bne.n	80071ce <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d032      	beq.n	800722a <I2C_Master_SB+0x100>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d02d      	beq.n	800722a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071dc:	605a      	str	r2, [r3, #4]
}
 80071de:	e024      	b.n	800722a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10e      	bne.n	8007206 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	11db      	asrs	r3, r3, #7
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	f003 0306 	and.w	r3, r3, #6
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	f063 030f 	orn	r3, r3, #15
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	611a      	str	r2, [r3, #16]
}
 8007204:	e011      	b.n	800722a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800720a:	2b01      	cmp	r3, #1
 800720c:	d10d      	bne.n	800722a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	b29b      	uxth	r3, r3
 8007214:	11db      	asrs	r3, r3, #7
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f003 0306 	and.w	r3, r3, #6
 800721c:	b2db      	uxtb	r3, r3
 800721e:	f063 030e 	orn	r3, r3, #14
 8007222:	b2da      	uxtb	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	611a      	str	r2, [r3, #16]
}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007242:	b2da      	uxtb	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724e:	2b00      	cmp	r3, #0
 8007250:	d004      	beq.n	800725c <I2C_Master_ADD10+0x26>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d108      	bne.n	800726e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00c      	beq.n	800727e <I2C_Master_ADD10+0x48>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800727c:	605a      	str	r2, [r3, #4]
  }
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800728a:	b480      	push	{r7}
 800728c:	b091      	sub	sp, #68	; 0x44
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007298:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b22      	cmp	r3, #34	; 0x22
 80072b2:	f040 8169 	bne.w	8007588 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10f      	bne.n	80072de <I2C_Master_ADDR+0x54>
 80072be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80072c2:	2b40      	cmp	r3, #64	; 0x40
 80072c4:	d10b      	bne.n	80072de <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c6:	2300      	movs	r3, #0
 80072c8:	633b      	str	r3, [r7, #48]	; 0x30
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	633b      	str	r3, [r7, #48]	; 0x30
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	633b      	str	r3, [r7, #48]	; 0x30
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	e160      	b.n	80075a0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d11d      	bne.n	8007322 <I2C_Master_ADDR+0x98>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072ee:	d118      	bne.n	8007322 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072f0:	2300      	movs	r3, #0
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007314:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731a:	1c5a      	adds	r2, r3, #1
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	651a      	str	r2, [r3, #80]	; 0x50
 8007320:	e13e      	b.n	80075a0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007326:	b29b      	uxth	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	d113      	bne.n	8007354 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800732c:	2300      	movs	r3, #0
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	62bb      	str	r3, [r7, #40]	; 0x28
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	e115      	b.n	8007580 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007358:	b29b      	uxth	r3, r3
 800735a:	2b01      	cmp	r3, #1
 800735c:	f040 808a 	bne.w	8007474 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007366:	d137      	bne.n	80073d8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007376:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007386:	d113      	bne.n	80073b0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007396:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007398:	2300      	movs	r3, #0
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	627b      	str	r3, [r7, #36]	; 0x24
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	627b      	str	r3, [r7, #36]	; 0x24
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	e0e7      	b.n	8007580 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b0:	2300      	movs	r3, #0
 80073b2:	623b      	str	r3, [r7, #32]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	623b      	str	r3, [r7, #32]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	623b      	str	r3, [r7, #32]
 80073c4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	e0d3      	b.n	8007580 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	2b08      	cmp	r3, #8
 80073dc:	d02e      	beq.n	800743c <I2C_Master_ADDR+0x1b2>
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	2b20      	cmp	r3, #32
 80073e2:	d02b      	beq.n	800743c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80073e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e6:	2b12      	cmp	r3, #18
 80073e8:	d102      	bne.n	80073f0 <I2C_Master_ADDR+0x166>
 80073ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d125      	bne.n	800743c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d00e      	beq.n	8007414 <I2C_Master_ADDR+0x18a>
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d00b      	beq.n	8007414 <I2C_Master_ADDR+0x18a>
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	2b10      	cmp	r3, #16
 8007400:	d008      	beq.n	8007414 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	e007      	b.n	8007424 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007422:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007424:	2300      	movs	r3, #0
 8007426:	61fb      	str	r3, [r7, #28]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	61fb      	str	r3, [r7, #28]
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	e0a1      	b.n	8007580 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800744a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800744c:	2300      	movs	r3, #0
 800744e:	61bb      	str	r3, [r7, #24]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	61bb      	str	r3, [r7, #24]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	61bb      	str	r3, [r7, #24]
 8007460:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	e085      	b.n	8007580 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b02      	cmp	r3, #2
 800747c:	d14d      	bne.n	800751a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	2b04      	cmp	r3, #4
 8007482:	d016      	beq.n	80074b2 <I2C_Master_ADDR+0x228>
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	2b02      	cmp	r3, #2
 8007488:	d013      	beq.n	80074b2 <I2C_Master_ADDR+0x228>
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	2b10      	cmp	r3, #16
 800748e:	d010      	beq.n	80074b2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800749e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	e007      	b.n	80074c2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074c0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074d0:	d117      	bne.n	8007502 <I2C_Master_ADDR+0x278>
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074d8:	d00b      	beq.n	80074f2 <I2C_Master_ADDR+0x268>
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d008      	beq.n	80074f2 <I2C_Master_ADDR+0x268>
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	2b08      	cmp	r3, #8
 80074e4:	d005      	beq.n	80074f2 <I2C_Master_ADDR+0x268>
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d002      	beq.n	80074f2 <I2C_Master_ADDR+0x268>
 80074ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	d107      	bne.n	8007502 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007500:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007502:	2300      	movs	r3, #0
 8007504:	617b      	str	r3, [r7, #20]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	617b      	str	r3, [r7, #20]
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	e032      	b.n	8007580 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007528:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007538:	d117      	bne.n	800756a <I2C_Master_ADDR+0x2e0>
 800753a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007540:	d00b      	beq.n	800755a <I2C_Master_ADDR+0x2d0>
 8007542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007544:	2b01      	cmp	r3, #1
 8007546:	d008      	beq.n	800755a <I2C_Master_ADDR+0x2d0>
 8007548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754a:	2b08      	cmp	r3, #8
 800754c:	d005      	beq.n	800755a <I2C_Master_ADDR+0x2d0>
 800754e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007550:	2b10      	cmp	r3, #16
 8007552:	d002      	beq.n	800755a <I2C_Master_ADDR+0x2d0>
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	2b20      	cmp	r3, #32
 8007558:	d107      	bne.n	800756a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007568:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800756a:	2300      	movs	r3, #0
 800756c:	613b      	str	r3, [r7, #16]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	613b      	str	r3, [r7, #16]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	613b      	str	r3, [r7, #16]
 800757e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007586:	e00b      	b.n	80075a0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007588:	2300      	movs	r3, #0
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	68fb      	ldr	r3, [r7, #12]
}
 800759e:	e7ff      	b.n	80075a0 <I2C_Master_ADDR+0x316>
 80075a0:	bf00      	nop
 80075a2:	3744      	adds	r7, #68	; 0x44
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d02b      	beq.n	800761e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	781a      	ldrb	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d114      	bne.n	800761e <I2C_SlaveTransmit_TXE+0x72>
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	2b29      	cmp	r3, #41	; 0x29
 80075f8:	d111      	bne.n	800761e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007608:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2221      	movs	r2, #33	; 0x21
 800760e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2228      	movs	r2, #40	; 0x28
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff f9e7 	bl	80069ec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800761e:	bf00      	nop
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007632:	b29b      	uxth	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d011      	beq.n	800765c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	781a      	ldrb	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007652:	b29b      	uxth	r3, r3
 8007654:	3b01      	subs	r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007676:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d02c      	beq.n	80076dc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	691a      	ldr	r2, [r3, #16]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769e:	b29b      	uxth	r3, r3
 80076a0:	3b01      	subs	r3, #1
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d114      	bne.n	80076dc <I2C_SlaveReceive_RXNE+0x74>
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	2b2a      	cmp	r3, #42	; 0x2a
 80076b6:	d111      	bne.n	80076dc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2222      	movs	r2, #34	; 0x22
 80076cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2228      	movs	r2, #40	; 0x28
 80076d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff f992 	bl	8006a00 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80076dc:	bf00      	nop
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d012      	beq.n	800771c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	691a      	ldr	r2, [r3, #16]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b01      	subs	r3, #1
 8007716:	b29a      	uxth	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007732:	2300      	movs	r3, #0
 8007734:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773c:	b2db      	uxtb	r3, r3
 800773e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007742:	2b28      	cmp	r3, #40	; 0x28
 8007744:	d127      	bne.n	8007796 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007754:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	089b      	lsrs	r3, r3, #2
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007762:	2301      	movs	r3, #1
 8007764:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	09db      	lsrs	r3, r3, #7
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d103      	bne.n	800777a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	81bb      	strh	r3, [r7, #12]
 8007778:	e002      	b.n	8007780 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007788:	89ba      	ldrh	r2, [r7, #12]
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff f940 	bl	8006a14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007794:	e00e      	b.n	80077b4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007796:	2300      	movs	r3, #0
 8007798:	60bb      	str	r3, [r7, #8]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	60bb      	str	r3, [r7, #8]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	60bb      	str	r3, [r7, #8]
 80077aa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80077b4:	bf00      	nop
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80077dc:	2300      	movs	r3, #0
 80077de:	60bb      	str	r3, [r7, #8]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	60bb      	str	r3, [r7, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0201 	orr.w	r2, r2, #1
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007808:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007818:	d172      	bne.n	8007900 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	2b22      	cmp	r3, #34	; 0x22
 800781e:	d002      	beq.n	8007826 <I2C_Slave_STOPF+0x6a>
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	2b2a      	cmp	r3, #42	; 0x2a
 8007824:	d135      	bne.n	8007892 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	b29a      	uxth	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d005      	beq.n	800784a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	f043 0204 	orr.w	r2, r3, #4
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007858:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe fa12 	bl	8005c88 <HAL_DMA_GetState>
 8007864:	4603      	mov	r3, r0
 8007866:	2b01      	cmp	r3, #1
 8007868:	d049      	beq.n	80078fe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786e:	4a69      	ldr	r2, [pc, #420]	; (8007a14 <I2C_Slave_STOPF+0x258>)
 8007870:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	4618      	mov	r0, r3
 8007878:	f7fe f85a 	bl	8005930 <HAL_DMA_Abort_IT>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d03d      	beq.n	80078fe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007890:	e035      	b.n	80078fe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	b29a      	uxth	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	f043 0204 	orr.w	r2, r3, #4
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe f9dc 	bl	8005c88 <HAL_DMA_GetState>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d014      	beq.n	8007900 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078da:	4a4e      	ldr	r2, [pc, #312]	; (8007a14 <I2C_Slave_STOPF+0x258>)
 80078dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe f824 	bl	8005930 <HAL_DMA_Abort_IT>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d008      	beq.n	8007900 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80078f8:	4610      	mov	r0, r2
 80078fa:	4798      	blx	r3
 80078fc:	e000      	b.n	8007900 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078fe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d03e      	beq.n	8007988 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b04      	cmp	r3, #4
 8007916:	d112      	bne.n	800793e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	691a      	ldr	r2, [r3, #16]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007934:	b29b      	uxth	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007948:	2b40      	cmp	r3, #64	; 0x40
 800794a:	d112      	bne.n	8007972 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691a      	ldr	r2, [r3, #16]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007976:	b29b      	uxth	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	f043 0204 	orr.w	r2, r3, #4
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f8b3 	bl	8007afc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007996:	e039      	b.n	8007a0c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	2b2a      	cmp	r3, #42	; 0x2a
 800799c:	d109      	bne.n	80079b2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2228      	movs	r2, #40	; 0x28
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff f827 	bl	8006a00 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b28      	cmp	r3, #40	; 0x28
 80079bc:	d111      	bne.n	80079e2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a15      	ldr	r2, [pc, #84]	; (8007a18 <I2C_Slave_STOPF+0x25c>)
 80079c2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff f828 	bl	8006a30 <HAL_I2C_ListenCpltCallback>
}
 80079e0:	e014      	b.n	8007a0c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	2b22      	cmp	r3, #34	; 0x22
 80079e8:	d002      	beq.n	80079f0 <I2C_Slave_STOPF+0x234>
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
 80079ec:	2b22      	cmp	r3, #34	; 0x22
 80079ee:	d10d      	bne.n	8007a0c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2220      	movs	r2, #32
 80079fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7fe fffa 	bl	8006a00 <HAL_I2C_SlaveRxCpltCallback>
}
 8007a0c:	bf00      	nop
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	08007d61 	.word	0x08007d61
 8007a18:	ffff0000 	.word	0xffff0000

08007a1c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d002      	beq.n	8007a3e <I2C_Slave_AF+0x22>
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	d129      	bne.n	8007a92 <I2C_Slave_AF+0x76>
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
 8007a40:	2b28      	cmp	r3, #40	; 0x28
 8007a42:	d126      	bne.n	8007a92 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a2c      	ldr	r2, [pc, #176]	; (8007af8 <I2C_Slave_AF+0xdc>)
 8007a48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a58:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a62:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a72:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7fe ffd0 	bl	8006a30 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007a90:	e02e      	b.n	8007af0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
 8007a94:	2b21      	cmp	r3, #33	; 0x21
 8007a96:	d126      	bne.n	8007ae6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a17      	ldr	r2, [pc, #92]	; (8007af8 <I2C_Slave_AF+0xdc>)
 8007a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2221      	movs	r2, #33	; 0x21
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ac2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007acc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007adc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7fe ff84 	bl	80069ec <HAL_I2C_SlaveTxCpltCallback>
}
 8007ae4:	e004      	b.n	8007af0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007aee:	615a      	str	r2, [r3, #20]
}
 8007af0:	bf00      	nop
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	ffff0000 	.word	0xffff0000

08007afc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b10      	cmp	r3, #16
 8007b18:	d002      	beq.n	8007b20 <I2C_ITError+0x24>
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	2b40      	cmp	r3, #64	; 0x40
 8007b1e:	d10a      	bne.n	8007b36 <I2C_ITError+0x3a>
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
 8007b22:	2b22      	cmp	r3, #34	; 0x22
 8007b24:	d107      	bne.n	8007b36 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b34:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
 8007b38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b3c:	2b28      	cmp	r3, #40	; 0x28
 8007b3e:	d107      	bne.n	8007b50 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2228      	movs	r2, #40	; 0x28
 8007b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b4e:	e015      	b.n	8007b7c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b5e:	d00a      	beq.n	8007b76 <I2C_ITError+0x7a>
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	2b60      	cmp	r3, #96	; 0x60
 8007b64:	d007      	beq.n	8007b76 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b8a:	d162      	bne.n	8007c52 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b9a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d020      	beq.n	8007bec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bae:	4a6a      	ldr	r2, [pc, #424]	; (8007d58 <I2C_ITError+0x25c>)
 8007bb0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fd feba 	bl	8005930 <HAL_DMA_Abort_IT>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 8089 	beq.w	8007cd6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0201 	bic.w	r2, r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007be6:	4610      	mov	r0, r2
 8007be8:	4798      	blx	r3
 8007bea:	e074      	b.n	8007cd6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf0:	4a59      	ldr	r2, [pc, #356]	; (8007d58 <I2C_ITError+0x25c>)
 8007bf2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fd fe99 	bl	8005930 <HAL_DMA_Abort_IT>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d068      	beq.n	8007cd6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0e:	2b40      	cmp	r3, #64	; 0x40
 8007c10:	d10b      	bne.n	8007c2a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	691a      	ldr	r2, [r3, #16]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	b2d2      	uxtb	r2, r2
 8007c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 0201 	bic.w	r2, r2, #1
 8007c38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
 8007c50:	e041      	b.n	8007cd6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b60      	cmp	r3, #96	; 0x60
 8007c5c:	d125      	bne.n	8007caa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2220      	movs	r2, #32
 8007c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c76:	2b40      	cmp	r3, #64	; 0x40
 8007c78:	d10b      	bne.n	8007c92 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	691a      	ldr	r2, [r3, #16]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	b2d2      	uxtb	r2, r2
 8007c86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 0201 	bic.w	r2, r2, #1
 8007ca0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7fe feec 	bl	8006a80 <HAL_I2C_AbortCpltCallback>
 8007ca8:	e015      	b.n	8007cd6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb4:	2b40      	cmp	r3, #64	; 0x40
 8007cb6:	d10b      	bne.n	8007cd0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	691a      	ldr	r2, [r3, #16]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	1c5a      	adds	r2, r3, #1
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7fe fecb 	bl	8006a6c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10e      	bne.n	8007d04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d109      	bne.n	8007d04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d104      	bne.n	8007d04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d007      	beq.n	8007d14 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d12:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b04      	cmp	r3, #4
 8007d26:	d113      	bne.n	8007d50 <I2C_ITError+0x254>
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2b28      	cmp	r3, #40	; 0x28
 8007d2c:	d110      	bne.n	8007d50 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a0a      	ldr	r2, [pc, #40]	; (8007d5c <I2C_ITError+0x260>)
 8007d32:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7fe fe70 	bl	8006a30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	08007d61 	.word	0x08007d61
 8007d5c:	ffff0000 	.word	0xffff0000

08007d60 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d70:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d78:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007d7a:	4b4b      	ldr	r3, [pc, #300]	; (8007ea8 <I2C_DMAAbort+0x148>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	08db      	lsrs	r3, r3, #3
 8007d80:	4a4a      	ldr	r2, [pc, #296]	; (8007eac <I2C_DMAAbort+0x14c>)
 8007d82:	fba2 2303 	umull	r2, r3, r2, r3
 8007d86:	0a1a      	lsrs	r2, r3, #8
 8007d88:	4613      	mov	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	00da      	lsls	r2, r3, #3
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d106      	bne.n	8007da8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	f043 0220 	orr.w	r2, r3, #32
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007da6:	e00a      	b.n	8007dbe <I2C_DMAAbort+0x5e>
    }
    count--;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dbc:	d0ea      	beq.n	8007d94 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dca:	2200      	movs	r2, #0
 8007dcc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dda:	2200      	movs	r2, #0
 8007ddc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2200      	movs	r2, #0
 8007df2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d003      	beq.n	8007e04 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e00:	2200      	movs	r2, #0
 8007e02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e10:	2200      	movs	r2, #0
 8007e12:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0201 	bic.w	r2, r2, #1
 8007e22:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b60      	cmp	r3, #96	; 0x60
 8007e2e:	d10e      	bne.n	8007e4e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	2220      	movs	r2, #32
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2200      	movs	r2, #0
 8007e44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007e46:	6978      	ldr	r0, [r7, #20]
 8007e48:	f7fe fe1a 	bl	8006a80 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007e4c:	e027      	b.n	8007e9e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e4e:	7cfb      	ldrb	r3, [r7, #19]
 8007e50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e54:	2b28      	cmp	r3, #40	; 0x28
 8007e56:	d117      	bne.n	8007e88 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0201 	orr.w	r2, r2, #1
 8007e66:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e76:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2228      	movs	r2, #40	; 0x28
 8007e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e86:	e007      	b.n	8007e98 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007e98:	6978      	ldr	r0, [r7, #20]
 8007e9a:	f7fe fde7 	bl	8006a6c <HAL_I2C_ErrorCallback>
}
 8007e9e:	bf00      	nop
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20000000 	.word	0x20000000
 8007eac:	14f8b589 	.word	0x14f8b589

08007eb0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ebc:	4b13      	ldr	r3, [pc, #76]	; (8007f0c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	08db      	lsrs	r3, r3, #3
 8007ec2:	4a13      	ldr	r2, [pc, #76]	; (8007f10 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec8:	0a1a      	lsrs	r2, r3, #8
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d107      	bne.n	8007eee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	f043 0220 	orr.w	r2, r3, #32
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e008      	b.n	8007f00 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007efc:	d0e9      	beq.n	8007ed2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	20000000 	.word	0x20000000
 8007f10:	14f8b589 	.word	0x14f8b589

08007f14 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007f24:	d103      	bne.n	8007f2e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007f2c:	e007      	b.n	8007f3e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f32:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007f36:	d102      	bne.n	8007f3e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007f3e:	bf00      	nop
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
	...

08007f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e267      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d075      	beq.n	8008056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f6a:	4b88      	ldr	r3, [pc, #544]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f003 030c 	and.w	r3, r3, #12
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d00c      	beq.n	8007f90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f76:	4b85      	ldr	r3, [pc, #532]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f7e:	2b08      	cmp	r3, #8
 8007f80:	d112      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f82:	4b82      	ldr	r3, [pc, #520]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f8e:	d10b      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f90:	4b7e      	ldr	r3, [pc, #504]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d05b      	beq.n	8008054 <HAL_RCC_OscConfig+0x108>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d157      	bne.n	8008054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e242      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb0:	d106      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x74>
 8007fb2:	4b76      	ldr	r3, [pc, #472]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a75      	ldr	r2, [pc, #468]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8007fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	e01d      	b.n	8007ffc <HAL_RCC_OscConfig+0xb0>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fc8:	d10c      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x98>
 8007fca:	4b70      	ldr	r3, [pc, #448]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a6f      	ldr	r2, [pc, #444]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8007fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	4b6d      	ldr	r3, [pc, #436]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a6c      	ldr	r2, [pc, #432]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8007fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	e00b      	b.n	8007ffc <HAL_RCC_OscConfig+0xb0>
 8007fe4:	4b69      	ldr	r3, [pc, #420]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a68      	ldr	r2, [pc, #416]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8007fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	4b66      	ldr	r3, [pc, #408]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a65      	ldr	r2, [pc, #404]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8007ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d013      	beq.n	800802c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008004:	f7fd f9a4 	bl	8005350 <HAL_GetTick>
 8008008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800800a:	e008      	b.n	800801e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800800c:	f7fd f9a0 	bl	8005350 <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	2b64      	cmp	r3, #100	; 0x64
 8008018:	d901      	bls.n	800801e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e207      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800801e:	4b5b      	ldr	r3, [pc, #364]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0f0      	beq.n	800800c <HAL_RCC_OscConfig+0xc0>
 800802a:	e014      	b.n	8008056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800802c:	f7fd f990 	bl	8005350 <HAL_GetTick>
 8008030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008032:	e008      	b.n	8008046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008034:	f7fd f98c 	bl	8005350 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b64      	cmp	r3, #100	; 0x64
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e1f3      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008046:	4b51      	ldr	r3, [pc, #324]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f0      	bne.n	8008034 <HAL_RCC_OscConfig+0xe8>
 8008052:	e000      	b.n	8008056 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d063      	beq.n	800812a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008062:	4b4a      	ldr	r3, [pc, #296]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f003 030c 	and.w	r3, r3, #12
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00b      	beq.n	8008086 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800806e:	4b47      	ldr	r3, [pc, #284]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008076:	2b08      	cmp	r3, #8
 8008078:	d11c      	bne.n	80080b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800807a:	4b44      	ldr	r3, [pc, #272]	; (800818c <HAL_RCC_OscConfig+0x240>)
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d116      	bne.n	80080b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008086:	4b41      	ldr	r3, [pc, #260]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d005      	beq.n	800809e <HAL_RCC_OscConfig+0x152>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d001      	beq.n	800809e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e1c7      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800809e:	4b3b      	ldr	r3, [pc, #236]	; (800818c <HAL_RCC_OscConfig+0x240>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	4937      	ldr	r1, [pc, #220]	; (800818c <HAL_RCC_OscConfig+0x240>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080b2:	e03a      	b.n	800812a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d020      	beq.n	80080fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080bc:	4b34      	ldr	r3, [pc, #208]	; (8008190 <HAL_RCC_OscConfig+0x244>)
 80080be:	2201      	movs	r2, #1
 80080c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c2:	f7fd f945 	bl	8005350 <HAL_GetTick>
 80080c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080c8:	e008      	b.n	80080dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080ca:	f7fd f941 	bl	8005350 <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d901      	bls.n	80080dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e1a8      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080dc:	4b2b      	ldr	r3, [pc, #172]	; (800818c <HAL_RCC_OscConfig+0x240>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0f0      	beq.n	80080ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080e8:	4b28      	ldr	r3, [pc, #160]	; (800818c <HAL_RCC_OscConfig+0x240>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	00db      	lsls	r3, r3, #3
 80080f6:	4925      	ldr	r1, [pc, #148]	; (800818c <HAL_RCC_OscConfig+0x240>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	600b      	str	r3, [r1, #0]
 80080fc:	e015      	b.n	800812a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080fe:	4b24      	ldr	r3, [pc, #144]	; (8008190 <HAL_RCC_OscConfig+0x244>)
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008104:	f7fd f924 	bl	8005350 <HAL_GetTick>
 8008108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800810a:	e008      	b.n	800811e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800810c:	f7fd f920 	bl	8005350 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b02      	cmp	r3, #2
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e187      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800811e:	4b1b      	ldr	r3, [pc, #108]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f0      	bne.n	800810c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0308 	and.w	r3, r3, #8
 8008132:	2b00      	cmp	r3, #0
 8008134:	d036      	beq.n	80081a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d016      	beq.n	800816c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800813e:	4b15      	ldr	r3, [pc, #84]	; (8008194 <HAL_RCC_OscConfig+0x248>)
 8008140:	2201      	movs	r2, #1
 8008142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008144:	f7fd f904 	bl	8005350 <HAL_GetTick>
 8008148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800814a:	e008      	b.n	800815e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800814c:	f7fd f900 	bl	8005350 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	2b02      	cmp	r3, #2
 8008158:	d901      	bls.n	800815e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e167      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800815e:	4b0b      	ldr	r3, [pc, #44]	; (800818c <HAL_RCC_OscConfig+0x240>)
 8008160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008162:	f003 0302 	and.w	r3, r3, #2
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0f0      	beq.n	800814c <HAL_RCC_OscConfig+0x200>
 800816a:	e01b      	b.n	80081a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800816c:	4b09      	ldr	r3, [pc, #36]	; (8008194 <HAL_RCC_OscConfig+0x248>)
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008172:	f7fd f8ed 	bl	8005350 <HAL_GetTick>
 8008176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008178:	e00e      	b.n	8008198 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800817a:	f7fd f8e9 	bl	8005350 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	2b02      	cmp	r3, #2
 8008186:	d907      	bls.n	8008198 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e150      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
 800818c:	40023800 	.word	0x40023800
 8008190:	42470000 	.word	0x42470000
 8008194:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008198:	4b88      	ldr	r3, [pc, #544]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 800819a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1ea      	bne.n	800817a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0304 	and.w	r3, r3, #4
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 8097 	beq.w	80082e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081b2:	2300      	movs	r3, #0
 80081b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081b6:	4b81      	ldr	r3, [pc, #516]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10f      	bne.n	80081e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081c2:	2300      	movs	r3, #0
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	4b7d      	ldr	r3, [pc, #500]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	4a7c      	ldr	r2, [pc, #496]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 80081cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081d0:	6413      	str	r3, [r2, #64]	; 0x40
 80081d2:	4b7a      	ldr	r3, [pc, #488]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 80081d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081da:	60bb      	str	r3, [r7, #8]
 80081dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081de:	2301      	movs	r3, #1
 80081e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081e2:	4b77      	ldr	r3, [pc, #476]	; (80083c0 <HAL_RCC_OscConfig+0x474>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d118      	bne.n	8008220 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081ee:	4b74      	ldr	r3, [pc, #464]	; (80083c0 <HAL_RCC_OscConfig+0x474>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a73      	ldr	r2, [pc, #460]	; (80083c0 <HAL_RCC_OscConfig+0x474>)
 80081f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081fa:	f7fd f8a9 	bl	8005350 <HAL_GetTick>
 80081fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008200:	e008      	b.n	8008214 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008202:	f7fd f8a5 	bl	8005350 <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	2b02      	cmp	r3, #2
 800820e:	d901      	bls.n	8008214 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e10c      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008214:	4b6a      	ldr	r3, [pc, #424]	; (80083c0 <HAL_RCC_OscConfig+0x474>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821c:	2b00      	cmp	r3, #0
 800821e:	d0f0      	beq.n	8008202 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d106      	bne.n	8008236 <HAL_RCC_OscConfig+0x2ea>
 8008228:	4b64      	ldr	r3, [pc, #400]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 800822a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822c:	4a63      	ldr	r2, [pc, #396]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 800822e:	f043 0301 	orr.w	r3, r3, #1
 8008232:	6713      	str	r3, [r2, #112]	; 0x70
 8008234:	e01c      	b.n	8008270 <HAL_RCC_OscConfig+0x324>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	2b05      	cmp	r3, #5
 800823c:	d10c      	bne.n	8008258 <HAL_RCC_OscConfig+0x30c>
 800823e:	4b5f      	ldr	r3, [pc, #380]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 8008240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008242:	4a5e      	ldr	r2, [pc, #376]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 8008244:	f043 0304 	orr.w	r3, r3, #4
 8008248:	6713      	str	r3, [r2, #112]	; 0x70
 800824a:	4b5c      	ldr	r3, [pc, #368]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	4a5b      	ldr	r2, [pc, #364]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 8008250:	f043 0301 	orr.w	r3, r3, #1
 8008254:	6713      	str	r3, [r2, #112]	; 0x70
 8008256:	e00b      	b.n	8008270 <HAL_RCC_OscConfig+0x324>
 8008258:	4b58      	ldr	r3, [pc, #352]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 800825a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825c:	4a57      	ldr	r2, [pc, #348]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 800825e:	f023 0301 	bic.w	r3, r3, #1
 8008262:	6713      	str	r3, [r2, #112]	; 0x70
 8008264:	4b55      	ldr	r3, [pc, #340]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 8008266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008268:	4a54      	ldr	r2, [pc, #336]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 800826a:	f023 0304 	bic.w	r3, r3, #4
 800826e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d015      	beq.n	80082a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008278:	f7fd f86a 	bl	8005350 <HAL_GetTick>
 800827c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800827e:	e00a      	b.n	8008296 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008280:	f7fd f866 	bl	8005350 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	f241 3288 	movw	r2, #5000	; 0x1388
 800828e:	4293      	cmp	r3, r2
 8008290:	d901      	bls.n	8008296 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e0cb      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008296:	4b49      	ldr	r3, [pc, #292]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 8008298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0ee      	beq.n	8008280 <HAL_RCC_OscConfig+0x334>
 80082a2:	e014      	b.n	80082ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082a4:	f7fd f854 	bl	8005350 <HAL_GetTick>
 80082a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082aa:	e00a      	b.n	80082c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082ac:	f7fd f850 	bl	8005350 <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d901      	bls.n	80082c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e0b5      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082c2:	4b3e      	ldr	r3, [pc, #248]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 80082c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c6:	f003 0302 	and.w	r3, r3, #2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1ee      	bne.n	80082ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d105      	bne.n	80082e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082d4:	4b39      	ldr	r3, [pc, #228]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 80082d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d8:	4a38      	ldr	r2, [pc, #224]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 80082da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 80a1 	beq.w	800842c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082ea:	4b34      	ldr	r3, [pc, #208]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f003 030c 	and.w	r3, r3, #12
 80082f2:	2b08      	cmp	r3, #8
 80082f4:	d05c      	beq.n	80083b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d141      	bne.n	8008382 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082fe:	4b31      	ldr	r3, [pc, #196]	; (80083c4 <HAL_RCC_OscConfig+0x478>)
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008304:	f7fd f824 	bl	8005350 <HAL_GetTick>
 8008308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800830a:	e008      	b.n	800831e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800830c:	f7fd f820 	bl	8005350 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	2b02      	cmp	r3, #2
 8008318:	d901      	bls.n	800831e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e087      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800831e:	4b27      	ldr	r3, [pc, #156]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1f0      	bne.n	800830c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	69da      	ldr	r2, [r3, #28]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a1b      	ldr	r3, [r3, #32]
 8008332:	431a      	orrs	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	019b      	lsls	r3, r3, #6
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008340:	085b      	lsrs	r3, r3, #1
 8008342:	3b01      	subs	r3, #1
 8008344:	041b      	lsls	r3, r3, #16
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834c:	061b      	lsls	r3, r3, #24
 800834e:	491b      	ldr	r1, [pc, #108]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 8008350:	4313      	orrs	r3, r2
 8008352:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008354:	4b1b      	ldr	r3, [pc, #108]	; (80083c4 <HAL_RCC_OscConfig+0x478>)
 8008356:	2201      	movs	r2, #1
 8008358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800835a:	f7fc fff9 	bl	8005350 <HAL_GetTick>
 800835e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008360:	e008      	b.n	8008374 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008362:	f7fc fff5 	bl	8005350 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	2b02      	cmp	r3, #2
 800836e:	d901      	bls.n	8008374 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e05c      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008374:	4b11      	ldr	r3, [pc, #68]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0f0      	beq.n	8008362 <HAL_RCC_OscConfig+0x416>
 8008380:	e054      	b.n	800842c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008382:	4b10      	ldr	r3, [pc, #64]	; (80083c4 <HAL_RCC_OscConfig+0x478>)
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008388:	f7fc ffe2 	bl	8005350 <HAL_GetTick>
 800838c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800838e:	e008      	b.n	80083a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008390:	f7fc ffde 	bl	8005350 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b02      	cmp	r3, #2
 800839c:	d901      	bls.n	80083a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e045      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083a2:	4b06      	ldr	r3, [pc, #24]	; (80083bc <HAL_RCC_OscConfig+0x470>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1f0      	bne.n	8008390 <HAL_RCC_OscConfig+0x444>
 80083ae:	e03d      	b.n	800842c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d107      	bne.n	80083c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e038      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
 80083bc:	40023800 	.word	0x40023800
 80083c0:	40007000 	.word	0x40007000
 80083c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083c8:	4b1b      	ldr	r3, [pc, #108]	; (8008438 <HAL_RCC_OscConfig+0x4ec>)
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d028      	beq.n	8008428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d121      	bne.n	8008428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d11a      	bne.n	8008428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80083f8:	4013      	ands	r3, r2
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80083fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008400:	4293      	cmp	r3, r2
 8008402:	d111      	bne.n	8008428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840e:	085b      	lsrs	r3, r3, #1
 8008410:	3b01      	subs	r3, #1
 8008412:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008414:	429a      	cmp	r2, r3
 8008416:	d107      	bne.n	8008428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008422:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008424:	429a      	cmp	r2, r3
 8008426:	d001      	beq.n	800842c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e000      	b.n	800842e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	40023800 	.word	0x40023800

0800843c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e0cc      	b.n	80085ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008450:	4b68      	ldr	r3, [pc, #416]	; (80085f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0307 	and.w	r3, r3, #7
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	429a      	cmp	r2, r3
 800845c:	d90c      	bls.n	8008478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800845e:	4b65      	ldr	r3, [pc, #404]	; (80085f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	b2d2      	uxtb	r2, r2
 8008464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008466:	4b63      	ldr	r3, [pc, #396]	; (80085f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0307 	and.w	r3, r3, #7
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	429a      	cmp	r2, r3
 8008472:	d001      	beq.n	8008478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e0b8      	b.n	80085ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0302 	and.w	r3, r3, #2
 8008480:	2b00      	cmp	r3, #0
 8008482:	d020      	beq.n	80084c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b00      	cmp	r3, #0
 800848e:	d005      	beq.n	800849c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008490:	4b59      	ldr	r3, [pc, #356]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	4a58      	ldr	r2, [pc, #352]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800849a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0308 	and.w	r3, r3, #8
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d005      	beq.n	80084b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084a8:	4b53      	ldr	r3, [pc, #332]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	4a52      	ldr	r2, [pc, #328]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 80084ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084b4:	4b50      	ldr	r3, [pc, #320]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	494d      	ldr	r1, [pc, #308]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d044      	beq.n	800855c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d107      	bne.n	80084ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084da:	4b47      	ldr	r3, [pc, #284]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d119      	bne.n	800851a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e07f      	b.n	80085ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d003      	beq.n	80084fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d107      	bne.n	800850a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084fa:	4b3f      	ldr	r3, [pc, #252]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d109      	bne.n	800851a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e06f      	b.n	80085ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800850a:	4b3b      	ldr	r3, [pc, #236]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e067      	b.n	80085ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800851a:	4b37      	ldr	r3, [pc, #220]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f023 0203 	bic.w	r2, r3, #3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	4934      	ldr	r1, [pc, #208]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008528:	4313      	orrs	r3, r2
 800852a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800852c:	f7fc ff10 	bl	8005350 <HAL_GetTick>
 8008530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008532:	e00a      	b.n	800854a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008534:	f7fc ff0c 	bl	8005350 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008542:	4293      	cmp	r3, r2
 8008544:	d901      	bls.n	800854a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e04f      	b.n	80085ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800854a:	4b2b      	ldr	r3, [pc, #172]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 020c 	and.w	r2, r3, #12
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	429a      	cmp	r2, r3
 800855a:	d1eb      	bne.n	8008534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800855c:	4b25      	ldr	r3, [pc, #148]	; (80085f4 <HAL_RCC_ClockConfig+0x1b8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	429a      	cmp	r2, r3
 8008568:	d20c      	bcs.n	8008584 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800856a:	4b22      	ldr	r3, [pc, #136]	; (80085f4 <HAL_RCC_ClockConfig+0x1b8>)
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	b2d2      	uxtb	r2, r2
 8008570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008572:	4b20      	ldr	r3, [pc, #128]	; (80085f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0307 	and.w	r3, r3, #7
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	429a      	cmp	r2, r3
 800857e:	d001      	beq.n	8008584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e032      	b.n	80085ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b00      	cmp	r3, #0
 800858e:	d008      	beq.n	80085a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008590:	4b19      	ldr	r3, [pc, #100]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	4916      	ldr	r1, [pc, #88]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0308 	and.w	r3, r3, #8
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d009      	beq.n	80085c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085ae:	4b12      	ldr	r3, [pc, #72]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	490e      	ldr	r1, [pc, #56]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085c2:	f000 f821 	bl	8008608 <HAL_RCC_GetSysClockFreq>
 80085c6:	4602      	mov	r2, r0
 80085c8:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <HAL_RCC_ClockConfig+0x1bc>)
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	091b      	lsrs	r3, r3, #4
 80085ce:	f003 030f 	and.w	r3, r3, #15
 80085d2:	490a      	ldr	r1, [pc, #40]	; (80085fc <HAL_RCC_ClockConfig+0x1c0>)
 80085d4:	5ccb      	ldrb	r3, [r1, r3]
 80085d6:	fa22 f303 	lsr.w	r3, r2, r3
 80085da:	4a09      	ldr	r2, [pc, #36]	; (8008600 <HAL_RCC_ClockConfig+0x1c4>)
 80085dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80085de:	4b09      	ldr	r3, [pc, #36]	; (8008604 <HAL_RCC_ClockConfig+0x1c8>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fc fe70 	bl	80052c8 <HAL_InitTick>

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	40023c00 	.word	0x40023c00
 80085f8:	40023800 	.word	0x40023800
 80085fc:	0800f3c4 	.word	0x0800f3c4
 8008600:	20000000 	.word	0x20000000
 8008604:	20000004 	.word	0x20000004

08008608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800860c:	b090      	sub	sp, #64	; 0x40
 800860e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	637b      	str	r3, [r7, #52]	; 0x34
 8008614:	2300      	movs	r3, #0
 8008616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008618:	2300      	movs	r3, #0
 800861a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008620:	4b59      	ldr	r3, [pc, #356]	; (8008788 <HAL_RCC_GetSysClockFreq+0x180>)
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f003 030c 	and.w	r3, r3, #12
 8008628:	2b08      	cmp	r3, #8
 800862a:	d00d      	beq.n	8008648 <HAL_RCC_GetSysClockFreq+0x40>
 800862c:	2b08      	cmp	r3, #8
 800862e:	f200 80a1 	bhi.w	8008774 <HAL_RCC_GetSysClockFreq+0x16c>
 8008632:	2b00      	cmp	r3, #0
 8008634:	d002      	beq.n	800863c <HAL_RCC_GetSysClockFreq+0x34>
 8008636:	2b04      	cmp	r3, #4
 8008638:	d003      	beq.n	8008642 <HAL_RCC_GetSysClockFreq+0x3a>
 800863a:	e09b      	b.n	8008774 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800863c:	4b53      	ldr	r3, [pc, #332]	; (800878c <HAL_RCC_GetSysClockFreq+0x184>)
 800863e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008640:	e09b      	b.n	800877a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008642:	4b53      	ldr	r3, [pc, #332]	; (8008790 <HAL_RCC_GetSysClockFreq+0x188>)
 8008644:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008646:	e098      	b.n	800877a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008648:	4b4f      	ldr	r3, [pc, #316]	; (8008788 <HAL_RCC_GetSysClockFreq+0x180>)
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008650:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008652:	4b4d      	ldr	r3, [pc, #308]	; (8008788 <HAL_RCC_GetSysClockFreq+0x180>)
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d028      	beq.n	80086b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800865e:	4b4a      	ldr	r3, [pc, #296]	; (8008788 <HAL_RCC_GetSysClockFreq+0x180>)
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	099b      	lsrs	r3, r3, #6
 8008664:	2200      	movs	r2, #0
 8008666:	623b      	str	r3, [r7, #32]
 8008668:	627a      	str	r2, [r7, #36]	; 0x24
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008670:	2100      	movs	r1, #0
 8008672:	4b47      	ldr	r3, [pc, #284]	; (8008790 <HAL_RCC_GetSysClockFreq+0x188>)
 8008674:	fb03 f201 	mul.w	r2, r3, r1
 8008678:	2300      	movs	r3, #0
 800867a:	fb00 f303 	mul.w	r3, r0, r3
 800867e:	4413      	add	r3, r2
 8008680:	4a43      	ldr	r2, [pc, #268]	; (8008790 <HAL_RCC_GetSysClockFreq+0x188>)
 8008682:	fba0 1202 	umull	r1, r2, r0, r2
 8008686:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008688:	460a      	mov	r2, r1
 800868a:	62ba      	str	r2, [r7, #40]	; 0x28
 800868c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800868e:	4413      	add	r3, r2
 8008690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008694:	2200      	movs	r2, #0
 8008696:	61bb      	str	r3, [r7, #24]
 8008698:	61fa      	str	r2, [r7, #28]
 800869a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800869e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80086a2:	f7f8 fad9 	bl	8000c58 <__aeabi_uldivmod>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	4613      	mov	r3, r2
 80086ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086ae:	e053      	b.n	8008758 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086b0:	4b35      	ldr	r3, [pc, #212]	; (8008788 <HAL_RCC_GetSysClockFreq+0x180>)
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	099b      	lsrs	r3, r3, #6
 80086b6:	2200      	movs	r2, #0
 80086b8:	613b      	str	r3, [r7, #16]
 80086ba:	617a      	str	r2, [r7, #20]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80086c2:	f04f 0b00 	mov.w	fp, #0
 80086c6:	4652      	mov	r2, sl
 80086c8:	465b      	mov	r3, fp
 80086ca:	f04f 0000 	mov.w	r0, #0
 80086ce:	f04f 0100 	mov.w	r1, #0
 80086d2:	0159      	lsls	r1, r3, #5
 80086d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086d8:	0150      	lsls	r0, r2, #5
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	ebb2 080a 	subs.w	r8, r2, sl
 80086e2:	eb63 090b 	sbc.w	r9, r3, fp
 80086e6:	f04f 0200 	mov.w	r2, #0
 80086ea:	f04f 0300 	mov.w	r3, #0
 80086ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80086f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80086f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80086fa:	ebb2 0408 	subs.w	r4, r2, r8
 80086fe:	eb63 0509 	sbc.w	r5, r3, r9
 8008702:	f04f 0200 	mov.w	r2, #0
 8008706:	f04f 0300 	mov.w	r3, #0
 800870a:	00eb      	lsls	r3, r5, #3
 800870c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008710:	00e2      	lsls	r2, r4, #3
 8008712:	4614      	mov	r4, r2
 8008714:	461d      	mov	r5, r3
 8008716:	eb14 030a 	adds.w	r3, r4, sl
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	eb45 030b 	adc.w	r3, r5, fp
 8008720:	607b      	str	r3, [r7, #4]
 8008722:	f04f 0200 	mov.w	r2, #0
 8008726:	f04f 0300 	mov.w	r3, #0
 800872a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800872e:	4629      	mov	r1, r5
 8008730:	028b      	lsls	r3, r1, #10
 8008732:	4621      	mov	r1, r4
 8008734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008738:	4621      	mov	r1, r4
 800873a:	028a      	lsls	r2, r1, #10
 800873c:	4610      	mov	r0, r2
 800873e:	4619      	mov	r1, r3
 8008740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008742:	2200      	movs	r2, #0
 8008744:	60bb      	str	r3, [r7, #8]
 8008746:	60fa      	str	r2, [r7, #12]
 8008748:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800874c:	f7f8 fa84 	bl	8000c58 <__aeabi_uldivmod>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	4613      	mov	r3, r2
 8008756:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008758:	4b0b      	ldr	r3, [pc, #44]	; (8008788 <HAL_RCC_GetSysClockFreq+0x180>)
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	0c1b      	lsrs	r3, r3, #16
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	3301      	adds	r3, #1
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008770:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008772:	e002      	b.n	800877a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008774:	4b05      	ldr	r3, [pc, #20]	; (800878c <HAL_RCC_GetSysClockFreq+0x184>)
 8008776:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800877a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800877c:	4618      	mov	r0, r3
 800877e:	3740      	adds	r7, #64	; 0x40
 8008780:	46bd      	mov	sp, r7
 8008782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008786:	bf00      	nop
 8008788:	40023800 	.word	0x40023800
 800878c:	00f42400 	.word	0x00f42400
 8008790:	017d7840 	.word	0x017d7840

08008794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008794:	b480      	push	{r7}
 8008796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008798:	4b03      	ldr	r3, [pc, #12]	; (80087a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800879a:	681b      	ldr	r3, [r3, #0]
}
 800879c:	4618      	mov	r0, r3
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	20000000 	.word	0x20000000

080087ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80087b0:	f7ff fff0 	bl	8008794 <HAL_RCC_GetHCLKFreq>
 80087b4:	4602      	mov	r2, r0
 80087b6:	4b05      	ldr	r3, [pc, #20]	; (80087cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	0a9b      	lsrs	r3, r3, #10
 80087bc:	f003 0307 	and.w	r3, r3, #7
 80087c0:	4903      	ldr	r1, [pc, #12]	; (80087d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087c2:	5ccb      	ldrb	r3, [r1, r3]
 80087c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	40023800 	.word	0x40023800
 80087d0:	0800f3d4 	.word	0x0800f3d4

080087d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80087d8:	f7ff ffdc 	bl	8008794 <HAL_RCC_GetHCLKFreq>
 80087dc:	4602      	mov	r2, r0
 80087de:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	0b5b      	lsrs	r3, r3, #13
 80087e4:	f003 0307 	and.w	r3, r3, #7
 80087e8:	4903      	ldr	r1, [pc, #12]	; (80087f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087ea:	5ccb      	ldrb	r3, [r1, r3]
 80087ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	40023800 	.word	0x40023800
 80087f8:	0800f3d4 	.word	0x0800f3d4

080087fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e041      	b.n	8008892 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7fc f962 	bl	8004aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3304      	adds	r3, #4
 8008838:	4619      	mov	r1, r3
 800883a:	4610      	mov	r0, r2
 800883c:	f000 fd7e 	bl	800933c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d001      	beq.n	80088b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e044      	b.n	800893e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0201 	orr.w	r2, r2, #1
 80088ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a1e      	ldr	r2, [pc, #120]	; (800894c <HAL_TIM_Base_Start_IT+0xb0>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d018      	beq.n	8008908 <HAL_TIM_Base_Start_IT+0x6c>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088de:	d013      	beq.n	8008908 <HAL_TIM_Base_Start_IT+0x6c>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a1a      	ldr	r2, [pc, #104]	; (8008950 <HAL_TIM_Base_Start_IT+0xb4>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d00e      	beq.n	8008908 <HAL_TIM_Base_Start_IT+0x6c>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a19      	ldr	r2, [pc, #100]	; (8008954 <HAL_TIM_Base_Start_IT+0xb8>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d009      	beq.n	8008908 <HAL_TIM_Base_Start_IT+0x6c>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a17      	ldr	r2, [pc, #92]	; (8008958 <HAL_TIM_Base_Start_IT+0xbc>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d004      	beq.n	8008908 <HAL_TIM_Base_Start_IT+0x6c>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a16      	ldr	r2, [pc, #88]	; (800895c <HAL_TIM_Base_Start_IT+0xc0>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d111      	bne.n	800892c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b06      	cmp	r3, #6
 8008918:	d010      	beq.n	800893c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f042 0201 	orr.w	r2, r2, #1
 8008928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800892a:	e007      	b.n	800893c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f042 0201 	orr.w	r2, r2, #1
 800893a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	40010000 	.word	0x40010000
 8008950:	40000400 	.word	0x40000400
 8008954:	40000800 	.word	0x40000800
 8008958:	40000c00 	.word	0x40000c00
 800895c:	40014000 	.word	0x40014000

08008960 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e041      	b.n	80089f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d106      	bne.n	800898c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7fc f98a 	bl	8004ca0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	3304      	adds	r3, #4
 800899c:	4619      	mov	r1, r3
 800899e:	4610      	mov	r0, r2
 80089a0:	f000 fccc 	bl	800933c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
	...

08008a00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d109      	bne.n	8008a24 <HAL_TIM_PWM_Start+0x24>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	bf14      	ite	ne
 8008a1c:	2301      	movne	r3, #1
 8008a1e:	2300      	moveq	r3, #0
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	e022      	b.n	8008a6a <HAL_TIM_PWM_Start+0x6a>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b04      	cmp	r3, #4
 8008a28:	d109      	bne.n	8008a3e <HAL_TIM_PWM_Start+0x3e>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	bf14      	ite	ne
 8008a36:	2301      	movne	r3, #1
 8008a38:	2300      	moveq	r3, #0
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	e015      	b.n	8008a6a <HAL_TIM_PWM_Start+0x6a>
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	2b08      	cmp	r3, #8
 8008a42:	d109      	bne.n	8008a58 <HAL_TIM_PWM_Start+0x58>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	bf14      	ite	ne
 8008a50:	2301      	movne	r3, #1
 8008a52:	2300      	moveq	r3, #0
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	e008      	b.n	8008a6a <HAL_TIM_PWM_Start+0x6a>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	bf14      	ite	ne
 8008a64:	2301      	movne	r3, #1
 8008a66:	2300      	moveq	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e068      	b.n	8008b44 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d104      	bne.n	8008a82 <HAL_TIM_PWM_Start+0x82>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a80:	e013      	b.n	8008aaa <HAL_TIM_PWM_Start+0xaa>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b04      	cmp	r3, #4
 8008a86:	d104      	bne.n	8008a92 <HAL_TIM_PWM_Start+0x92>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a90:	e00b      	b.n	8008aaa <HAL_TIM_PWM_Start+0xaa>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b08      	cmp	r3, #8
 8008a96:	d104      	bne.n	8008aa2 <HAL_TIM_PWM_Start+0xa2>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aa0:	e003      	b.n	8008aaa <HAL_TIM_PWM_Start+0xaa>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fee8 	bl	8009888 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a23      	ldr	r2, [pc, #140]	; (8008b4c <HAL_TIM_PWM_Start+0x14c>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d107      	bne.n	8008ad2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ad0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a1d      	ldr	r2, [pc, #116]	; (8008b4c <HAL_TIM_PWM_Start+0x14c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d018      	beq.n	8008b0e <HAL_TIM_PWM_Start+0x10e>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae4:	d013      	beq.n	8008b0e <HAL_TIM_PWM_Start+0x10e>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a19      	ldr	r2, [pc, #100]	; (8008b50 <HAL_TIM_PWM_Start+0x150>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d00e      	beq.n	8008b0e <HAL_TIM_PWM_Start+0x10e>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a17      	ldr	r2, [pc, #92]	; (8008b54 <HAL_TIM_PWM_Start+0x154>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d009      	beq.n	8008b0e <HAL_TIM_PWM_Start+0x10e>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a16      	ldr	r2, [pc, #88]	; (8008b58 <HAL_TIM_PWM_Start+0x158>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d004      	beq.n	8008b0e <HAL_TIM_PWM_Start+0x10e>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a14      	ldr	r2, [pc, #80]	; (8008b5c <HAL_TIM_PWM_Start+0x15c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d111      	bne.n	8008b32 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f003 0307 	and.w	r3, r3, #7
 8008b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2b06      	cmp	r3, #6
 8008b1e:	d010      	beq.n	8008b42 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f042 0201 	orr.w	r2, r2, #1
 8008b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b30:	e007      	b.n	8008b42 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f042 0201 	orr.w	r2, r2, #1
 8008b40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	40010000 	.word	0x40010000
 8008b50:	40000400 	.word	0x40000400
 8008b54:	40000800 	.word	0x40000800
 8008b58:	40000c00 	.word	0x40000c00
 8008b5c:	40014000 	.word	0x40014000

08008b60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e097      	b.n	8008ca4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d106      	bne.n	8008b8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f7fb ffef 	bl	8004b6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2202      	movs	r2, #2
 8008b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	6812      	ldr	r2, [r2, #0]
 8008ba0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ba4:	f023 0307 	bic.w	r3, r3, #7
 8008ba8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	f000 fbc1 	bl	800933c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008be2:	f023 0303 	bic.w	r3, r3, #3
 8008be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	689a      	ldr	r2, [r3, #8]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	021b      	lsls	r3, r3, #8
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008c00:	f023 030c 	bic.w	r3, r3, #12
 8008c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	021b      	lsls	r3, r3, #8
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	011a      	lsls	r2, r3, #4
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	031b      	lsls	r3, r3, #12
 8008c30:	4313      	orrs	r3, r2
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008c3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008c46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	011b      	lsls	r3, r3, #4
 8008c52:	4313      	orrs	r3, r2
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cbc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008cc4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ccc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008cd4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d110      	bne.n	8008cfe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d102      	bne.n	8008ce8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ce2:	7b7b      	ldrb	r3, [r7, #13]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d001      	beq.n	8008cec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e069      	b.n	8008dc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cfc:	e031      	b.n	8008d62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b04      	cmp	r3, #4
 8008d02:	d110      	bne.n	8008d26 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d102      	bne.n	8008d10 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d0a:	7b3b      	ldrb	r3, [r7, #12]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d001      	beq.n	8008d14 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e055      	b.n	8008dc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d24:	e01d      	b.n	8008d62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d108      	bne.n	8008d3e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d105      	bne.n	8008d3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d32:	7b7b      	ldrb	r3, [r7, #13]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d102      	bne.n	8008d3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d38:	7b3b      	ldrb	r3, [r7, #12]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d001      	beq.n	8008d42 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e03e      	b.n	8008dc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2202      	movs	r2, #2
 8008d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2202      	movs	r2, #2
 8008d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2202      	movs	r2, #2
 8008d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d003      	beq.n	8008d70 <HAL_TIM_Encoder_Start+0xc4>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	d008      	beq.n	8008d80 <HAL_TIM_Encoder_Start+0xd4>
 8008d6e:	e00f      	b.n	8008d90 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2201      	movs	r2, #1
 8008d76:	2100      	movs	r1, #0
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 fd85 	bl	8009888 <TIM_CCxChannelCmd>
      break;
 8008d7e:	e016      	b.n	8008dae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2201      	movs	r2, #1
 8008d86:	2104      	movs	r1, #4
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fd7d 	bl	8009888 <TIM_CCxChannelCmd>
      break;
 8008d8e:	e00e      	b.n	8008dae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2201      	movs	r2, #1
 8008d96:	2100      	movs	r1, #0
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fd75 	bl	8009888 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2201      	movs	r2, #1
 8008da4:	2104      	movs	r1, #4
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fd6e 	bl	8009888 <TIM_CCxChannelCmd>
      break;
 8008dac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f042 0201 	orr.w	r2, r2, #1
 8008dbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d122      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	f003 0302 	and.w	r3, r3, #2
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d11b      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f06f 0202 	mvn.w	r2, #2
 8008df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fa77 	bl	80092fe <HAL_TIM_IC_CaptureCallback>
 8008e10:	e005      	b.n	8008e1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fa69 	bl	80092ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fa7a 	bl	8009312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f003 0304 	and.w	r3, r3, #4
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d122      	bne.n	8008e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	d11b      	bne.n	8008e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f06f 0204 	mvn.w	r2, #4
 8008e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fa4d 	bl	80092fe <HAL_TIM_IC_CaptureCallback>
 8008e64:	e005      	b.n	8008e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fa3f 	bl	80092ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fa50 	bl	8009312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	f003 0308 	and.w	r3, r3, #8
 8008e82:	2b08      	cmp	r3, #8
 8008e84:	d122      	bne.n	8008ecc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f003 0308 	and.w	r3, r3, #8
 8008e90:	2b08      	cmp	r3, #8
 8008e92:	d11b      	bne.n	8008ecc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f06f 0208 	mvn.w	r2, #8
 8008e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2204      	movs	r2, #4
 8008ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	f003 0303 	and.w	r3, r3, #3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fa23 	bl	80092fe <HAL_TIM_IC_CaptureCallback>
 8008eb8:	e005      	b.n	8008ec6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fa15 	bl	80092ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fa26 	bl	8009312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	f003 0310 	and.w	r3, r3, #16
 8008ed6:	2b10      	cmp	r3, #16
 8008ed8:	d122      	bne.n	8008f20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	f003 0310 	and.w	r3, r3, #16
 8008ee4:	2b10      	cmp	r3, #16
 8008ee6:	d11b      	bne.n	8008f20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f06f 0210 	mvn.w	r2, #16
 8008ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2208      	movs	r2, #8
 8008ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d003      	beq.n	8008f0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f9f9 	bl	80092fe <HAL_TIM_IC_CaptureCallback>
 8008f0c:	e005      	b.n	8008f1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f9eb 	bl	80092ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f9fc 	bl	8009312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d10e      	bne.n	8008f4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d107      	bne.n	8008f4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f06f 0201 	mvn.w	r2, #1
 8008f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7f9 fcec 	bl	8002924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f56:	2b80      	cmp	r3, #128	; 0x80
 8008f58:	d10e      	bne.n	8008f78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f64:	2b80      	cmp	r3, #128	; 0x80
 8008f66:	d107      	bne.n	8008f78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fd26 	bl	80099c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f82:	2b40      	cmp	r3, #64	; 0x40
 8008f84:	d10e      	bne.n	8008fa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f90:	2b40      	cmp	r3, #64	; 0x40
 8008f92:	d107      	bne.n	8008fa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f9c1 	bl	8009326 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	f003 0320 	and.w	r3, r3, #32
 8008fae:	2b20      	cmp	r3, #32
 8008fb0:	d10e      	bne.n	8008fd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f003 0320 	and.w	r3, r3, #32
 8008fbc:	2b20      	cmp	r3, #32
 8008fbe:	d107      	bne.n	8008fd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f06f 0220 	mvn.w	r2, #32
 8008fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fcf0 	bl	80099b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d101      	bne.n	8008ff6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ff2:	2302      	movs	r3, #2
 8008ff4:	e0ae      	b.n	8009154 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b0c      	cmp	r3, #12
 8009002:	f200 809f 	bhi.w	8009144 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009006:	a201      	add	r2, pc, #4	; (adr r2, 800900c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	08009041 	.word	0x08009041
 8009010:	08009145 	.word	0x08009145
 8009014:	08009145 	.word	0x08009145
 8009018:	08009145 	.word	0x08009145
 800901c:	08009081 	.word	0x08009081
 8009020:	08009145 	.word	0x08009145
 8009024:	08009145 	.word	0x08009145
 8009028:	08009145 	.word	0x08009145
 800902c:	080090c3 	.word	0x080090c3
 8009030:	08009145 	.word	0x08009145
 8009034:	08009145 	.word	0x08009145
 8009038:	08009145 	.word	0x08009145
 800903c:	08009103 	.word	0x08009103
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68b9      	ldr	r1, [r7, #8]
 8009046:	4618      	mov	r0, r3
 8009048:	f000 f9f8 	bl	800943c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	699a      	ldr	r2, [r3, #24]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f042 0208 	orr.w	r2, r2, #8
 800905a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	699a      	ldr	r2, [r3, #24]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f022 0204 	bic.w	r2, r2, #4
 800906a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6999      	ldr	r1, [r3, #24]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	691a      	ldr	r2, [r3, #16]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	430a      	orrs	r2, r1
 800907c:	619a      	str	r2, [r3, #24]
      break;
 800907e:	e064      	b.n	800914a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68b9      	ldr	r1, [r7, #8]
 8009086:	4618      	mov	r0, r3
 8009088:	f000 fa3e 	bl	8009508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	699a      	ldr	r2, [r3, #24]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800909a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	699a      	ldr	r2, [r3, #24]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6999      	ldr	r1, [r3, #24]
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	021a      	lsls	r2, r3, #8
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	430a      	orrs	r2, r1
 80090be:	619a      	str	r2, [r3, #24]
      break;
 80090c0:	e043      	b.n	800914a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68b9      	ldr	r1, [r7, #8]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 fa89 	bl	80095e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	69da      	ldr	r2, [r3, #28]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f042 0208 	orr.w	r2, r2, #8
 80090dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	69da      	ldr	r2, [r3, #28]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 0204 	bic.w	r2, r2, #4
 80090ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	69d9      	ldr	r1, [r3, #28]
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	691a      	ldr	r2, [r3, #16]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	430a      	orrs	r2, r1
 80090fe:	61da      	str	r2, [r3, #28]
      break;
 8009100:	e023      	b.n	800914a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68b9      	ldr	r1, [r7, #8]
 8009108:	4618      	mov	r0, r3
 800910a:	f000 fad3 	bl	80096b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	69da      	ldr	r2, [r3, #28]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800911c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	69da      	ldr	r2, [r3, #28]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800912c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69d9      	ldr	r1, [r3, #28]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	021a      	lsls	r2, r3, #8
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	430a      	orrs	r2, r1
 8009140:	61da      	str	r2, [r3, #28]
      break;
 8009142:	e002      	b.n	800914a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	75fb      	strb	r3, [r7, #23]
      break;
 8009148:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009152:	7dfb      	ldrb	r3, [r7, #23]
}
 8009154:	4618      	mov	r0, r3
 8009156:	3718      	adds	r7, #24
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009170:	2b01      	cmp	r3, #1
 8009172:	d101      	bne.n	8009178 <HAL_TIM_ConfigClockSource+0x1c>
 8009174:	2302      	movs	r3, #2
 8009176:	e0b4      	b.n	80092e2 <HAL_TIM_ConfigClockSource+0x186>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800919e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091b0:	d03e      	beq.n	8009230 <HAL_TIM_ConfigClockSource+0xd4>
 80091b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091b6:	f200 8087 	bhi.w	80092c8 <HAL_TIM_ConfigClockSource+0x16c>
 80091ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091be:	f000 8086 	beq.w	80092ce <HAL_TIM_ConfigClockSource+0x172>
 80091c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091c6:	d87f      	bhi.n	80092c8 <HAL_TIM_ConfigClockSource+0x16c>
 80091c8:	2b70      	cmp	r3, #112	; 0x70
 80091ca:	d01a      	beq.n	8009202 <HAL_TIM_ConfigClockSource+0xa6>
 80091cc:	2b70      	cmp	r3, #112	; 0x70
 80091ce:	d87b      	bhi.n	80092c8 <HAL_TIM_ConfigClockSource+0x16c>
 80091d0:	2b60      	cmp	r3, #96	; 0x60
 80091d2:	d050      	beq.n	8009276 <HAL_TIM_ConfigClockSource+0x11a>
 80091d4:	2b60      	cmp	r3, #96	; 0x60
 80091d6:	d877      	bhi.n	80092c8 <HAL_TIM_ConfigClockSource+0x16c>
 80091d8:	2b50      	cmp	r3, #80	; 0x50
 80091da:	d03c      	beq.n	8009256 <HAL_TIM_ConfigClockSource+0xfa>
 80091dc:	2b50      	cmp	r3, #80	; 0x50
 80091de:	d873      	bhi.n	80092c8 <HAL_TIM_ConfigClockSource+0x16c>
 80091e0:	2b40      	cmp	r3, #64	; 0x40
 80091e2:	d058      	beq.n	8009296 <HAL_TIM_ConfigClockSource+0x13a>
 80091e4:	2b40      	cmp	r3, #64	; 0x40
 80091e6:	d86f      	bhi.n	80092c8 <HAL_TIM_ConfigClockSource+0x16c>
 80091e8:	2b30      	cmp	r3, #48	; 0x30
 80091ea:	d064      	beq.n	80092b6 <HAL_TIM_ConfigClockSource+0x15a>
 80091ec:	2b30      	cmp	r3, #48	; 0x30
 80091ee:	d86b      	bhi.n	80092c8 <HAL_TIM_ConfigClockSource+0x16c>
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	d060      	beq.n	80092b6 <HAL_TIM_ConfigClockSource+0x15a>
 80091f4:	2b20      	cmp	r3, #32
 80091f6:	d867      	bhi.n	80092c8 <HAL_TIM_ConfigClockSource+0x16c>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d05c      	beq.n	80092b6 <HAL_TIM_ConfigClockSource+0x15a>
 80091fc:	2b10      	cmp	r3, #16
 80091fe:	d05a      	beq.n	80092b6 <HAL_TIM_ConfigClockSource+0x15a>
 8009200:	e062      	b.n	80092c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6818      	ldr	r0, [r3, #0]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	6899      	ldr	r1, [r3, #8]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	f000 fb19 	bl	8009848 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009224:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	609a      	str	r2, [r3, #8]
      break;
 800922e:	e04f      	b.n	80092d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6818      	ldr	r0, [r3, #0]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	6899      	ldr	r1, [r3, #8]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f000 fb02 	bl	8009848 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689a      	ldr	r2, [r3, #8]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009252:	609a      	str	r2, [r3, #8]
      break;
 8009254:	e03c      	b.n	80092d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6818      	ldr	r0, [r3, #0]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	6859      	ldr	r1, [r3, #4]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	461a      	mov	r2, r3
 8009264:	f000 fa76 	bl	8009754 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2150      	movs	r1, #80	; 0x50
 800926e:	4618      	mov	r0, r3
 8009270:	f000 facf 	bl	8009812 <TIM_ITRx_SetConfig>
      break;
 8009274:	e02c      	b.n	80092d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6818      	ldr	r0, [r3, #0]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	6859      	ldr	r1, [r3, #4]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	461a      	mov	r2, r3
 8009284:	f000 fa95 	bl	80097b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2160      	movs	r1, #96	; 0x60
 800928e:	4618      	mov	r0, r3
 8009290:	f000 fabf 	bl	8009812 <TIM_ITRx_SetConfig>
      break;
 8009294:	e01c      	b.n	80092d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6818      	ldr	r0, [r3, #0]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	6859      	ldr	r1, [r3, #4]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	461a      	mov	r2, r3
 80092a4:	f000 fa56 	bl	8009754 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2140      	movs	r1, #64	; 0x40
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 faaf 	bl	8009812 <TIM_ITRx_SetConfig>
      break;
 80092b4:	e00c      	b.n	80092d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4619      	mov	r1, r3
 80092c0:	4610      	mov	r0, r2
 80092c2:	f000 faa6 	bl	8009812 <TIM_ITRx_SetConfig>
      break;
 80092c6:	e003      	b.n	80092d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	73fb      	strb	r3, [r7, #15]
      break;
 80092cc:	e000      	b.n	80092d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80092ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b083      	sub	sp, #12
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092f2:	bf00      	nop
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009306:	bf00      	nop
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009312:	b480      	push	{r7}
 8009314:	b083      	sub	sp, #12
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800931a:	bf00      	nop
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009326:	b480      	push	{r7}
 8009328:	b083      	sub	sp, #12
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800932e:	bf00      	nop
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
	...

0800933c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a34      	ldr	r2, [pc, #208]	; (8009420 <TIM_Base_SetConfig+0xe4>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d00f      	beq.n	8009374 <TIM_Base_SetConfig+0x38>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935a:	d00b      	beq.n	8009374 <TIM_Base_SetConfig+0x38>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a31      	ldr	r2, [pc, #196]	; (8009424 <TIM_Base_SetConfig+0xe8>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d007      	beq.n	8009374 <TIM_Base_SetConfig+0x38>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a30      	ldr	r2, [pc, #192]	; (8009428 <TIM_Base_SetConfig+0xec>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d003      	beq.n	8009374 <TIM_Base_SetConfig+0x38>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a2f      	ldr	r2, [pc, #188]	; (800942c <TIM_Base_SetConfig+0xf0>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d108      	bne.n	8009386 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800937a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	4313      	orrs	r3, r2
 8009384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a25      	ldr	r2, [pc, #148]	; (8009420 <TIM_Base_SetConfig+0xe4>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d01b      	beq.n	80093c6 <TIM_Base_SetConfig+0x8a>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009394:	d017      	beq.n	80093c6 <TIM_Base_SetConfig+0x8a>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a22      	ldr	r2, [pc, #136]	; (8009424 <TIM_Base_SetConfig+0xe8>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d013      	beq.n	80093c6 <TIM_Base_SetConfig+0x8a>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a21      	ldr	r2, [pc, #132]	; (8009428 <TIM_Base_SetConfig+0xec>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d00f      	beq.n	80093c6 <TIM_Base_SetConfig+0x8a>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a20      	ldr	r2, [pc, #128]	; (800942c <TIM_Base_SetConfig+0xf0>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d00b      	beq.n	80093c6 <TIM_Base_SetConfig+0x8a>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a1f      	ldr	r2, [pc, #124]	; (8009430 <TIM_Base_SetConfig+0xf4>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d007      	beq.n	80093c6 <TIM_Base_SetConfig+0x8a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a1e      	ldr	r2, [pc, #120]	; (8009434 <TIM_Base_SetConfig+0xf8>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d003      	beq.n	80093c6 <TIM_Base_SetConfig+0x8a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a1d      	ldr	r2, [pc, #116]	; (8009438 <TIM_Base_SetConfig+0xfc>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d108      	bne.n	80093d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	689a      	ldr	r2, [r3, #8]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a08      	ldr	r2, [pc, #32]	; (8009420 <TIM_Base_SetConfig+0xe4>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d103      	bne.n	800940c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	691a      	ldr	r2, [r3, #16]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	615a      	str	r2, [r3, #20]
}
 8009412:	bf00      	nop
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	40010000 	.word	0x40010000
 8009424:	40000400 	.word	0x40000400
 8009428:	40000800 	.word	0x40000800
 800942c:	40000c00 	.word	0x40000c00
 8009430:	40014000 	.word	0x40014000
 8009434:	40014400 	.word	0x40014400
 8009438:	40014800 	.word	0x40014800

0800943c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	f023 0201 	bic.w	r2, r3, #1
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 0303 	bic.w	r3, r3, #3
 8009472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f023 0302 	bic.w	r3, r3, #2
 8009484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	4313      	orrs	r3, r2
 800948e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a1c      	ldr	r2, [pc, #112]	; (8009504 <TIM_OC1_SetConfig+0xc8>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d10c      	bne.n	80094b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	f023 0308 	bic.w	r3, r3, #8
 800949e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	697a      	ldr	r2, [r7, #20]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	f023 0304 	bic.w	r3, r3, #4
 80094b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a13      	ldr	r2, [pc, #76]	; (8009504 <TIM_OC1_SetConfig+0xc8>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d111      	bne.n	80094de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	4313      	orrs	r3, r2
 80094dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	621a      	str	r2, [r3, #32]
}
 80094f8:	bf00      	nop
 80094fa:	371c      	adds	r7, #28
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	40010000 	.word	0x40010000

08009508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	f023 0210 	bic.w	r2, r3, #16
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800953e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	021b      	lsls	r3, r3, #8
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	4313      	orrs	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	f023 0320 	bic.w	r3, r3, #32
 8009552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	011b      	lsls	r3, r3, #4
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	4313      	orrs	r3, r2
 800955e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a1e      	ldr	r2, [pc, #120]	; (80095dc <TIM_OC2_SetConfig+0xd4>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d10d      	bne.n	8009584 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800956e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	011b      	lsls	r3, r3, #4
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	4313      	orrs	r3, r2
 800957a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009582:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a15      	ldr	r2, [pc, #84]	; (80095dc <TIM_OC2_SetConfig+0xd4>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d113      	bne.n	80095b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800959a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	695b      	ldr	r3, [r3, #20]
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	697a      	ldr	r2, [r7, #20]
 80095cc:	621a      	str	r2, [r3, #32]
}
 80095ce:	bf00      	nop
 80095d0:	371c      	adds	r7, #28
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	40010000 	.word	0x40010000

080095e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	69db      	ldr	r3, [r3, #28]
 8009606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800960e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f023 0303 	bic.w	r3, r3, #3
 8009616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	4313      	orrs	r3, r2
 8009620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	021b      	lsls	r3, r3, #8
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	4313      	orrs	r3, r2
 8009634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a1d      	ldr	r2, [pc, #116]	; (80096b0 <TIM_OC3_SetConfig+0xd0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d10d      	bne.n	800965a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	021b      	lsls	r3, r3, #8
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	4313      	orrs	r3, r2
 8009650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a14      	ldr	r2, [pc, #80]	; (80096b0 <TIM_OC3_SetConfig+0xd0>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d113      	bne.n	800968a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	011b      	lsls	r3, r3, #4
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	4313      	orrs	r3, r2
 800967c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	011b      	lsls	r3, r3, #4
 8009684:	693a      	ldr	r2, [r7, #16]
 8009686:	4313      	orrs	r3, r2
 8009688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	685a      	ldr	r2, [r3, #4]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	621a      	str	r2, [r3, #32]
}
 80096a4:	bf00      	nop
 80096a6:	371c      	adds	r7, #28
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	40010000 	.word	0x40010000

080096b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	021b      	lsls	r3, r3, #8
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	031b      	lsls	r3, r3, #12
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	4313      	orrs	r3, r2
 800970a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a10      	ldr	r2, [pc, #64]	; (8009750 <TIM_OC4_SetConfig+0x9c>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d109      	bne.n	8009728 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800971a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	019b      	lsls	r3, r3, #6
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	4313      	orrs	r3, r2
 8009726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	621a      	str	r2, [r3, #32]
}
 8009742:	bf00      	nop
 8009744:	371c      	adds	r7, #28
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	40010000 	.word	0x40010000

08009754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6a1b      	ldr	r3, [r3, #32]
 8009764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	f023 0201 	bic.w	r2, r3, #1
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800977e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	011b      	lsls	r3, r3, #4
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	4313      	orrs	r3, r2
 8009788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f023 030a 	bic.w	r3, r3, #10
 8009790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	4313      	orrs	r3, r2
 8009798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	621a      	str	r2, [r3, #32]
}
 80097a6:	bf00      	nop
 80097a8:	371c      	adds	r7, #28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b087      	sub	sp, #28
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	60f8      	str	r0, [r7, #12]
 80097ba:	60b9      	str	r1, [r7, #8]
 80097bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	f023 0210 	bic.w	r2, r3, #16
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6a1b      	ldr	r3, [r3, #32]
 80097d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	031b      	lsls	r3, r3, #12
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	011b      	lsls	r3, r3, #4
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	621a      	str	r2, [r3, #32]
}
 8009806:	bf00      	nop
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009812:	b480      	push	{r7}
 8009814:	b085      	sub	sp, #20
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4313      	orrs	r3, r2
 8009830:	f043 0307 	orr.w	r3, r3, #7
 8009834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	609a      	str	r2, [r3, #8]
}
 800983c:	bf00      	nop
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
 8009854:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009862:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	021a      	lsls	r2, r3, #8
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	431a      	orrs	r2, r3
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	4313      	orrs	r3, r2
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	4313      	orrs	r3, r2
 8009874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	609a      	str	r2, [r3, #8]
}
 800987c:	bf00      	nop
 800987e:	371c      	adds	r7, #28
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009888:	b480      	push	{r7}
 800988a:	b087      	sub	sp, #28
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f003 031f 	and.w	r3, r3, #31
 800989a:	2201      	movs	r2, #1
 800989c:	fa02 f303 	lsl.w	r3, r2, r3
 80098a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6a1a      	ldr	r2, [r3, #32]
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	43db      	mvns	r3, r3
 80098aa:	401a      	ands	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6a1a      	ldr	r2, [r3, #32]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	f003 031f 	and.w	r3, r3, #31
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	fa01 f303 	lsl.w	r3, r1, r3
 80098c0:	431a      	orrs	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	621a      	str	r2, [r3, #32]
}
 80098c6:	bf00      	nop
 80098c8:	371c      	adds	r7, #28
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
	...

080098d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d101      	bne.n	80098ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098e8:	2302      	movs	r3, #2
 80098ea:	e050      	b.n	800998e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2202      	movs	r2, #2
 80098f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	4313      	orrs	r3, r2
 800991c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a1c      	ldr	r2, [pc, #112]	; (800999c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d018      	beq.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009938:	d013      	beq.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a18      	ldr	r2, [pc, #96]	; (80099a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d00e      	beq.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a16      	ldr	r2, [pc, #88]	; (80099a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d009      	beq.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a15      	ldr	r2, [pc, #84]	; (80099a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d004      	beq.n	8009962 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a13      	ldr	r2, [pc, #76]	; (80099ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d10c      	bne.n	800997c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	4313      	orrs	r3, r2
 8009972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	40010000 	.word	0x40010000
 80099a0:	40000400 	.word	0x40000400
 80099a4:	40000800 	.word	0x40000800
 80099a8:	40000c00 	.word	0x40000c00
 80099ac:	40014000 	.word	0x40014000

080099b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d101      	bne.n	80099ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e03f      	b.n	8009a6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d106      	bne.n	8009a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7fb f9d0 	bl	8004da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2224      	movs	r2, #36	; 0x24
 8009a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68da      	ldr	r2, [r3, #12]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fe4b 	bl	800a6b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	691a      	ldr	r2, [r3, #16]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	695a      	ldr	r2, [r3, #20]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68da      	ldr	r2, [r3, #12]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2220      	movs	r2, #32
 8009a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2220      	movs	r2, #32
 8009a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e021      	b.n	8009ac8 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2224      	movs	r2, #36	; 0x24
 8009a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68da      	ldr	r2, [r3, #12]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a9a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f7fb fa37 	bl	8004f10 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08a      	sub	sp, #40	; 0x28
 8009ad4:	af02      	add	r7, sp, #8
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	603b      	str	r3, [r7, #0]
 8009adc:	4613      	mov	r3, r2
 8009ade:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b20      	cmp	r3, #32
 8009aee:	d17c      	bne.n	8009bea <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <HAL_UART_Transmit+0x2c>
 8009af6:	88fb      	ldrh	r3, [r7, #6]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d101      	bne.n	8009b00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e075      	b.n	8009bec <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d101      	bne.n	8009b0e <HAL_UART_Transmit+0x3e>
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	e06e      	b.n	8009bec <HAL_UART_Transmit+0x11c>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2221      	movs	r2, #33	; 0x21
 8009b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b24:	f7fb fc14 	bl	8005350 <HAL_GetTick>
 8009b28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	88fa      	ldrh	r2, [r7, #6]
 8009b2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	88fa      	ldrh	r2, [r7, #6]
 8009b34:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b3e:	d108      	bne.n	8009b52 <HAL_UART_Transmit+0x82>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d104      	bne.n	8009b52 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	61bb      	str	r3, [r7, #24]
 8009b50:	e003      	b.n	8009b5a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b56:	2300      	movs	r3, #0
 8009b58:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009b62:	e02a      	b.n	8009bba <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	2180      	movs	r1, #128	; 0x80
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f000 fb9a 	bl	800a2a8 <UART_WaitOnFlagUntilTimeout>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e036      	b.n	8009bec <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10b      	bne.n	8009b9c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b92:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	3302      	adds	r3, #2
 8009b98:	61bb      	str	r3, [r7, #24]
 8009b9a:	e007      	b.n	8009bac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	781a      	ldrb	r2, [r3, #0]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1cf      	bne.n	8009b64 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	2140      	movs	r1, #64	; 0x40
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f000 fb6a 	bl	800a2a8 <UART_WaitOnFlagUntilTimeout>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d001      	beq.n	8009bde <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e006      	b.n	8009bec <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2220      	movs	r2, #32
 8009be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	e000      	b.n	8009bec <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009bea:	2302      	movs	r3, #2
  }
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3720      	adds	r7, #32
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b08a      	sub	sp, #40	; 0x28
 8009bf8:	af02      	add	r7, sp, #8
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	603b      	str	r3, [r7, #0]
 8009c00:	4613      	mov	r3, r2
 8009c02:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c04:	2300      	movs	r3, #0
 8009c06:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b20      	cmp	r3, #32
 8009c12:	f040 808c 	bne.w	8009d2e <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <HAL_UART_Receive+0x2e>
 8009c1c:	88fb      	ldrh	r3, [r7, #6]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d101      	bne.n	8009c26 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e084      	b.n	8009d30 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d101      	bne.n	8009c34 <HAL_UART_Receive+0x40>
 8009c30:	2302      	movs	r3, #2
 8009c32:	e07d      	b.n	8009d30 <HAL_UART_Receive+0x13c>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2222      	movs	r2, #34	; 0x22
 8009c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c50:	f7fb fb7e 	bl	8005350 <HAL_GetTick>
 8009c54:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	88fa      	ldrh	r2, [r7, #6]
 8009c5a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	88fa      	ldrh	r2, [r7, #6]
 8009c60:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c6a:	d108      	bne.n	8009c7e <HAL_UART_Receive+0x8a>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d104      	bne.n	8009c7e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009c74:	2300      	movs	r3, #0
 8009c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	61bb      	str	r3, [r7, #24]
 8009c7c:	e003      	b.n	8009c86 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c82:	2300      	movs	r3, #0
 8009c84:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009c8e:	e043      	b.n	8009d18 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	2200      	movs	r2, #0
 8009c98:	2120      	movs	r1, #32
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f000 fb04 	bl	800a2a8 <UART_WaitOnFlagUntilTimeout>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e042      	b.n	8009d30 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10c      	bne.n	8009cca <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	61bb      	str	r3, [r7, #24]
 8009cc8:	e01f      	b.n	8009d0a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cd2:	d007      	beq.n	8009ce4 <HAL_UART_Receive+0xf0>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10a      	bne.n	8009cf2 <HAL_UART_Receive+0xfe>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d106      	bne.n	8009cf2 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	b2da      	uxtb	r2, r3
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	701a      	strb	r2, [r3, #0]
 8009cf0:	e008      	b.n	8009d04 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	3301      	adds	r3, #1
 8009d08:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	3b01      	subs	r3, #1
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1b6      	bne.n	8009c90 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2220      	movs	r2, #32
 8009d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	e000      	b.n	8009d30 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009d2e:	2302      	movs	r3, #2
  }
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3720      	adds	r7, #32
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b0ba      	sub	sp, #232	; 0xe8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009d64:	2300      	movs	r3, #0
 8009d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d6e:	f003 030f 	and.w	r3, r3, #15
 8009d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10f      	bne.n	8009d9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d82:	f003 0320 	and.w	r3, r3, #32
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d009      	beq.n	8009d9e <HAL_UART_IRQHandler+0x66>
 8009d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d8e:	f003 0320 	and.w	r3, r3, #32
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d003      	beq.n	8009d9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fbd3 	bl	800a542 <UART_Receive_IT>
      return;
 8009d9c:	e256      	b.n	800a24c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 80de 	beq.w	8009f64 <HAL_UART_IRQHandler+0x22c>
 8009da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dac:	f003 0301 	and.w	r3, r3, #1
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d106      	bne.n	8009dc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009db8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 80d1 	beq.w	8009f64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00b      	beq.n	8009de6 <HAL_UART_IRQHandler+0xae>
 8009dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d005      	beq.n	8009de6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dde:	f043 0201 	orr.w	r2, r3, #1
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dea:	f003 0304 	and.w	r3, r3, #4
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00b      	beq.n	8009e0a <HAL_UART_IRQHandler+0xd2>
 8009df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d005      	beq.n	8009e0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e02:	f043 0202 	orr.w	r2, r3, #2
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e0e:	f003 0302 	and.w	r3, r3, #2
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00b      	beq.n	8009e2e <HAL_UART_IRQHandler+0xf6>
 8009e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d005      	beq.n	8009e2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e26:	f043 0204 	orr.w	r2, r3, #4
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e32:	f003 0308 	and.w	r3, r3, #8
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d011      	beq.n	8009e5e <HAL_UART_IRQHandler+0x126>
 8009e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e3e:	f003 0320 	and.w	r3, r3, #32
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d105      	bne.n	8009e52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d005      	beq.n	8009e5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e56:	f043 0208 	orr.w	r2, r3, #8
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f000 81ed 	beq.w	800a242 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e6c:	f003 0320 	and.w	r3, r3, #32
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d008      	beq.n	8009e86 <HAL_UART_IRQHandler+0x14e>
 8009e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e78:	f003 0320 	and.w	r3, r3, #32
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d002      	beq.n	8009e86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fb5e 	bl	800a542 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	695b      	ldr	r3, [r3, #20]
 8009e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e90:	2b40      	cmp	r3, #64	; 0x40
 8009e92:	bf0c      	ite	eq
 8009e94:	2301      	moveq	r3, #1
 8009e96:	2300      	movne	r3, #0
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea2:	f003 0308 	and.w	r3, r3, #8
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d103      	bne.n	8009eb2 <HAL_UART_IRQHandler+0x17a>
 8009eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d04f      	beq.n	8009f52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fa66 	bl	800a384 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	695b      	ldr	r3, [r3, #20]
 8009ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec2:	2b40      	cmp	r3, #64	; 0x40
 8009ec4:	d141      	bne.n	8009f4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3314      	adds	r3, #20
 8009ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ed4:	e853 3f00 	ldrex	r3, [r3]
 8009ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	3314      	adds	r3, #20
 8009eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f02:	e841 2300 	strex	r3, r2, [r1]
 8009f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1d9      	bne.n	8009ec6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d013      	beq.n	8009f42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1e:	4a7d      	ldr	r2, [pc, #500]	; (800a114 <HAL_UART_IRQHandler+0x3dc>)
 8009f20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fb fd02 	bl	8005930 <HAL_DMA_Abort_IT>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d016      	beq.n	8009f60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f40:	e00e      	b.n	8009f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f99a 	bl	800a27c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f48:	e00a      	b.n	8009f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f996 	bl	800a27c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f50:	e006      	b.n	8009f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f992 	bl	800a27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009f5e:	e170      	b.n	800a242 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f60:	bf00      	nop
    return;
 8009f62:	e16e      	b.n	800a242 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	f040 814a 	bne.w	800a202 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f72:	f003 0310 	and.w	r3, r3, #16
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 8143 	beq.w	800a202 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f80:	f003 0310 	and.w	r3, r3, #16
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 813c 	beq.w	800a202 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60bb      	str	r3, [r7, #8]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	60bb      	str	r3, [r7, #8]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	60bb      	str	r3, [r7, #8]
 8009f9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009faa:	2b40      	cmp	r3, #64	; 0x40
 8009fac:	f040 80b4 	bne.w	800a118 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 8140 	beq.w	800a246 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	f080 8139 	bcs.w	800a246 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fe6:	f000 8088 	beq.w	800a0fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	330c      	adds	r3, #12
 8009ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ff8:	e853 3f00 	ldrex	r3, [r3]
 8009ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a008:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	330c      	adds	r3, #12
 800a012:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a016:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a01a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a022:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a026:	e841 2300 	strex	r3, r2, [r1]
 800a02a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a02e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1d9      	bne.n	8009fea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3314      	adds	r3, #20
 800a03c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a040:	e853 3f00 	ldrex	r3, [r3]
 800a044:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a048:	f023 0301 	bic.w	r3, r3, #1
 800a04c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3314      	adds	r3, #20
 800a056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a05a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a05e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a062:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a066:	e841 2300 	strex	r3, r2, [r1]
 800a06a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a06c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1e1      	bne.n	800a036 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	3314      	adds	r3, #20
 800a078:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a07c:	e853 3f00 	ldrex	r3, [r3]
 800a080:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	3314      	adds	r3, #20
 800a092:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a096:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a098:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a09c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a09e:	e841 2300 	strex	r3, r2, [r1]
 800a0a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1e3      	bne.n	800a072 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2220      	movs	r2, #32
 800a0ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	330c      	adds	r3, #12
 800a0be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c2:	e853 3f00 	ldrex	r3, [r3]
 800a0c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ca:	f023 0310 	bic.w	r3, r3, #16
 800a0ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	330c      	adds	r3, #12
 800a0d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a0dc:	65ba      	str	r2, [r7, #88]	; 0x58
 800a0de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0e4:	e841 2300 	strex	r3, r2, [r1]
 800a0e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1e3      	bne.n	800a0b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fb fbab 	bl	8005850 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a102:	b29b      	uxth	r3, r3
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	b29b      	uxth	r3, r3
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f8c0 	bl	800a290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a110:	e099      	b.n	800a246 <HAL_UART_IRQHandler+0x50e>
 800a112:	bf00      	nop
 800a114:	0800a44b 	.word	0x0800a44b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a120:	b29b      	uxth	r3, r3
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f000 808b 	beq.w	800a24a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 8086 	beq.w	800a24a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	330c      	adds	r3, #12
 800a144:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a148:	e853 3f00 	ldrex	r3, [r3]
 800a14c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a154:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	330c      	adds	r3, #12
 800a15e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a162:	647a      	str	r2, [r7, #68]	; 0x44
 800a164:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a166:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a168:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a16a:	e841 2300 	strex	r3, r2, [r1]
 800a16e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1e3      	bne.n	800a13e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3314      	adds	r3, #20
 800a17c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	e853 3f00 	ldrex	r3, [r3]
 800a184:	623b      	str	r3, [r7, #32]
   return(result);
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	f023 0301 	bic.w	r3, r3, #1
 800a18c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	3314      	adds	r3, #20
 800a196:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a19a:	633a      	str	r2, [r7, #48]	; 0x30
 800a19c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1a2:	e841 2300 	strex	r3, r2, [r1]
 800a1a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1e3      	bne.n	800a176 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	330c      	adds	r3, #12
 800a1c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	e853 3f00 	ldrex	r3, [r3]
 800a1ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f023 0310 	bic.w	r3, r3, #16
 800a1d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	330c      	adds	r3, #12
 800a1dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a1e0:	61fa      	str	r2, [r7, #28]
 800a1e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e4:	69b9      	ldr	r1, [r7, #24]
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	e841 2300 	strex	r3, r2, [r1]
 800a1ec:	617b      	str	r3, [r7, #20]
   return(result);
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1e3      	bne.n	800a1bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f848 	bl	800a290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a200:	e023      	b.n	800a24a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d009      	beq.n	800a222 <HAL_UART_IRQHandler+0x4ea>
 800a20e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f929 	bl	800a472 <UART_Transmit_IT>
    return;
 800a220:	e014      	b.n	800a24c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00e      	beq.n	800a24c <HAL_UART_IRQHandler+0x514>
 800a22e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a236:	2b00      	cmp	r3, #0
 800a238:	d008      	beq.n	800a24c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f969 	bl	800a512 <UART_EndTransmit_IT>
    return;
 800a240:	e004      	b.n	800a24c <HAL_UART_IRQHandler+0x514>
    return;
 800a242:	bf00      	nop
 800a244:	e002      	b.n	800a24c <HAL_UART_IRQHandler+0x514>
      return;
 800a246:	bf00      	nop
 800a248:	e000      	b.n	800a24c <HAL_UART_IRQHandler+0x514>
      return;
 800a24a:	bf00      	nop
  }
}
 800a24c:	37e8      	adds	r7, #232	; 0xe8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop

0800a254 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	460b      	mov	r3, r1
 800a29a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b090      	sub	sp, #64	; 0x40
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	603b      	str	r3, [r7, #0]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2b8:	e050      	b.n	800a35c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c0:	d04c      	beq.n	800a35c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a2c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d007      	beq.n	800a2d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2c8:	f7fb f842 	bl	8005350 <HAL_GetTick>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	1ad3      	subs	r3, r2, r3
 800a2d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d241      	bcs.n	800a35c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	330c      	adds	r3, #12
 800a2de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	330c      	adds	r3, #12
 800a2f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2f8:	637a      	str	r2, [r7, #52]	; 0x34
 800a2fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a300:	e841 2300 	strex	r3, r2, [r1]
 800a304:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e5      	bne.n	800a2d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3314      	adds	r3, #20
 800a312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	e853 3f00 	ldrex	r3, [r3]
 800a31a:	613b      	str	r3, [r7, #16]
   return(result);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	f023 0301 	bic.w	r3, r3, #1
 800a322:	63bb      	str	r3, [r7, #56]	; 0x38
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3314      	adds	r3, #20
 800a32a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a32c:	623a      	str	r2, [r7, #32]
 800a32e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a330:	69f9      	ldr	r1, [r7, #28]
 800a332:	6a3a      	ldr	r2, [r7, #32]
 800a334:	e841 2300 	strex	r3, r2, [r1]
 800a338:	61bb      	str	r3, [r7, #24]
   return(result);
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1e5      	bne.n	800a30c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2220      	movs	r2, #32
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2220      	movs	r2, #32
 800a34c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a358:	2303      	movs	r3, #3
 800a35a:	e00f      	b.n	800a37c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	4013      	ands	r3, r2
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	429a      	cmp	r2, r3
 800a36a:	bf0c      	ite	eq
 800a36c:	2301      	moveq	r3, #1
 800a36e:	2300      	movne	r3, #0
 800a370:	b2db      	uxtb	r3, r3
 800a372:	461a      	mov	r2, r3
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	429a      	cmp	r2, r3
 800a378:	d09f      	beq.n	800a2ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3740      	adds	r7, #64	; 0x40
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a384:	b480      	push	{r7}
 800a386:	b095      	sub	sp, #84	; 0x54
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	330c      	adds	r3, #12
 800a392:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a396:	e853 3f00 	ldrex	r3, [r3]
 800a39a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	330c      	adds	r3, #12
 800a3aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3ac:	643a      	str	r2, [r7, #64]	; 0x40
 800a3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3b4:	e841 2300 	strex	r3, r2, [r1]
 800a3b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e5      	bne.n	800a38c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3314      	adds	r3, #20
 800a3c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	e853 3f00 	ldrex	r3, [r3]
 800a3ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	f023 0301 	bic.w	r3, r3, #1
 800a3d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	3314      	adds	r3, #20
 800a3de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3e8:	e841 2300 	strex	r3, r2, [r1]
 800a3ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1e5      	bne.n	800a3c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d119      	bne.n	800a430 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	330c      	adds	r3, #12
 800a402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	e853 3f00 	ldrex	r3, [r3]
 800a40a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	f023 0310 	bic.w	r3, r3, #16
 800a412:	647b      	str	r3, [r7, #68]	; 0x44
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	330c      	adds	r3, #12
 800a41a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a41c:	61ba      	str	r2, [r7, #24]
 800a41e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a420:	6979      	ldr	r1, [r7, #20]
 800a422:	69ba      	ldr	r2, [r7, #24]
 800a424:	e841 2300 	strex	r3, r2, [r1]
 800a428:	613b      	str	r3, [r7, #16]
   return(result);
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1e5      	bne.n	800a3fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2220      	movs	r2, #32
 800a434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a43e:	bf00      	nop
 800a440:	3754      	adds	r7, #84	; 0x54
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a456:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f7ff ff09 	bl	800a27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a46a:	bf00      	nop
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a472:	b480      	push	{r7}
 800a474:	b085      	sub	sp, #20
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b21      	cmp	r3, #33	; 0x21
 800a484:	d13e      	bne.n	800a504 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a48e:	d114      	bne.n	800a4ba <UART_Transmit_IT+0x48>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d110      	bne.n	800a4ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	881b      	ldrh	r3, [r3, #0]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	1c9a      	adds	r2, r3, #2
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	621a      	str	r2, [r3, #32]
 800a4b8:	e008      	b.n	800a4cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	1c59      	adds	r1, r3, #1
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	6211      	str	r1, [r2, #32]
 800a4c4:	781a      	ldrb	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10f      	bne.n	800a500 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68da      	ldr	r2, [r3, #12]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a4ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68da      	ldr	r2, [r3, #12]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a500:	2300      	movs	r3, #0
 800a502:	e000      	b.n	800a506 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a504:	2302      	movs	r3, #2
  }
}
 800a506:	4618      	mov	r0, r3
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b082      	sub	sp, #8
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68da      	ldr	r2, [r3, #12]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a528:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2220      	movs	r2, #32
 800a52e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7ff fe8e 	bl	800a254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b08c      	sub	sp, #48	; 0x30
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b22      	cmp	r3, #34	; 0x22
 800a554:	f040 80ab 	bne.w	800a6ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a560:	d117      	bne.n	800a592 <UART_Receive_IT+0x50>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d113      	bne.n	800a592 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a56a:	2300      	movs	r3, #0
 800a56c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a572:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a580:	b29a      	uxth	r2, r3
 800a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a584:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58a:	1c9a      	adds	r2, r3, #2
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	629a      	str	r2, [r3, #40]	; 0x28
 800a590:	e026      	b.n	800a5e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a596:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a598:	2300      	movs	r3, #0
 800a59a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5a4:	d007      	beq.n	800a5b6 <UART_Receive_IT+0x74>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10a      	bne.n	800a5c4 <UART_Receive_IT+0x82>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d106      	bne.n	800a5c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	b2da      	uxtb	r2, r3
 800a5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c0:	701a      	strb	r2, [r3, #0]
 800a5c2:	e008      	b.n	800a5d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d15a      	bne.n	800a6aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68da      	ldr	r2, [r3, #12]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f022 0220 	bic.w	r2, r2, #32
 800a602:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68da      	ldr	r2, [r3, #12]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	695a      	ldr	r2, [r3, #20]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f022 0201 	bic.w	r2, r2, #1
 800a622:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2220      	movs	r2, #32
 800a628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a630:	2b01      	cmp	r3, #1
 800a632:	d135      	bne.n	800a6a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	330c      	adds	r3, #12
 800a640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	e853 3f00 	ldrex	r3, [r3]
 800a648:	613b      	str	r3, [r7, #16]
   return(result);
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	f023 0310 	bic.w	r3, r3, #16
 800a650:	627b      	str	r3, [r7, #36]	; 0x24
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	330c      	adds	r3, #12
 800a658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a65a:	623a      	str	r2, [r7, #32]
 800a65c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65e:	69f9      	ldr	r1, [r7, #28]
 800a660:	6a3a      	ldr	r2, [r7, #32]
 800a662:	e841 2300 	strex	r3, r2, [r1]
 800a666:	61bb      	str	r3, [r7, #24]
   return(result);
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1e5      	bne.n	800a63a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 0310 	and.w	r3, r3, #16
 800a678:	2b10      	cmp	r3, #16
 800a67a:	d10a      	bne.n	800a692 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a67c:	2300      	movs	r3, #0
 800a67e:	60fb      	str	r3, [r7, #12]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	60fb      	str	r3, [r7, #12]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a696:	4619      	mov	r1, r3
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f7ff fdf9 	bl	800a290 <HAL_UARTEx_RxEventCallback>
 800a69e:	e002      	b.n	800a6a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f7ff fde1 	bl	800a268 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	e002      	b.n	800a6b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	e000      	b.n	800a6b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a6ae:	2302      	movs	r3, #2
  }
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3730      	adds	r7, #48	; 0x30
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6bc:	b0c0      	sub	sp, #256	; 0x100
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a6d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6d4:	68d9      	ldr	r1, [r3, #12]
 800a6d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	ea40 0301 	orr.w	r3, r0, r1
 800a6e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a6e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6e6:	689a      	ldr	r2, [r3, #8]
 800a6e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	431a      	orrs	r2, r3
 800a6f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	431a      	orrs	r2, r3
 800a6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a710:	f021 010c 	bic.w	r1, r1, #12
 800a714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a71e:	430b      	orrs	r3, r1
 800a720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a72e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a732:	6999      	ldr	r1, [r3, #24]
 800a734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	ea40 0301 	orr.w	r3, r0, r1
 800a73e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	4b8f      	ldr	r3, [pc, #572]	; (800a984 <UART_SetConfig+0x2cc>)
 800a748:	429a      	cmp	r2, r3
 800a74a:	d005      	beq.n	800a758 <UART_SetConfig+0xa0>
 800a74c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	4b8d      	ldr	r3, [pc, #564]	; (800a988 <UART_SetConfig+0x2d0>)
 800a754:	429a      	cmp	r2, r3
 800a756:	d104      	bne.n	800a762 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a758:	f7fe f83c 	bl	80087d4 <HAL_RCC_GetPCLK2Freq>
 800a75c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a760:	e003      	b.n	800a76a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a762:	f7fe f823 	bl	80087ac <HAL_RCC_GetPCLK1Freq>
 800a766:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a76a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a76e:	69db      	ldr	r3, [r3, #28]
 800a770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a774:	f040 810c 	bne.w	800a990 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a77c:	2200      	movs	r2, #0
 800a77e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a782:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a78a:	4622      	mov	r2, r4
 800a78c:	462b      	mov	r3, r5
 800a78e:	1891      	adds	r1, r2, r2
 800a790:	65b9      	str	r1, [r7, #88]	; 0x58
 800a792:	415b      	adcs	r3, r3
 800a794:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a79a:	4621      	mov	r1, r4
 800a79c:	eb12 0801 	adds.w	r8, r2, r1
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	eb43 0901 	adc.w	r9, r3, r1
 800a7a6:	f04f 0200 	mov.w	r2, #0
 800a7aa:	f04f 0300 	mov.w	r3, #0
 800a7ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a7b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a7b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a7ba:	4690      	mov	r8, r2
 800a7bc:	4699      	mov	r9, r3
 800a7be:	4623      	mov	r3, r4
 800a7c0:	eb18 0303 	adds.w	r3, r8, r3
 800a7c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a7c8:	462b      	mov	r3, r5
 800a7ca:	eb49 0303 	adc.w	r3, r9, r3
 800a7ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a7d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a7de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a7e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	18db      	adds	r3, r3, r3
 800a7ea:	653b      	str	r3, [r7, #80]	; 0x50
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	eb42 0303 	adc.w	r3, r2, r3
 800a7f2:	657b      	str	r3, [r7, #84]	; 0x54
 800a7f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a7f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a7fc:	f7f6 fa2c 	bl	8000c58 <__aeabi_uldivmod>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	4b61      	ldr	r3, [pc, #388]	; (800a98c <UART_SetConfig+0x2d4>)
 800a806:	fba3 2302 	umull	r2, r3, r3, r2
 800a80a:	095b      	lsrs	r3, r3, #5
 800a80c:	011c      	lsls	r4, r3, #4
 800a80e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a812:	2200      	movs	r2, #0
 800a814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a818:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a81c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a820:	4642      	mov	r2, r8
 800a822:	464b      	mov	r3, r9
 800a824:	1891      	adds	r1, r2, r2
 800a826:	64b9      	str	r1, [r7, #72]	; 0x48
 800a828:	415b      	adcs	r3, r3
 800a82a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a82c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a830:	4641      	mov	r1, r8
 800a832:	eb12 0a01 	adds.w	sl, r2, r1
 800a836:	4649      	mov	r1, r9
 800a838:	eb43 0b01 	adc.w	fp, r3, r1
 800a83c:	f04f 0200 	mov.w	r2, #0
 800a840:	f04f 0300 	mov.w	r3, #0
 800a844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a84c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a850:	4692      	mov	sl, r2
 800a852:	469b      	mov	fp, r3
 800a854:	4643      	mov	r3, r8
 800a856:	eb1a 0303 	adds.w	r3, sl, r3
 800a85a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a85e:	464b      	mov	r3, r9
 800a860:	eb4b 0303 	adc.w	r3, fp, r3
 800a864:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a874:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a87c:	460b      	mov	r3, r1
 800a87e:	18db      	adds	r3, r3, r3
 800a880:	643b      	str	r3, [r7, #64]	; 0x40
 800a882:	4613      	mov	r3, r2
 800a884:	eb42 0303 	adc.w	r3, r2, r3
 800a888:	647b      	str	r3, [r7, #68]	; 0x44
 800a88a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a88e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a892:	f7f6 f9e1 	bl	8000c58 <__aeabi_uldivmod>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	4611      	mov	r1, r2
 800a89c:	4b3b      	ldr	r3, [pc, #236]	; (800a98c <UART_SetConfig+0x2d4>)
 800a89e:	fba3 2301 	umull	r2, r3, r3, r1
 800a8a2:	095b      	lsrs	r3, r3, #5
 800a8a4:	2264      	movs	r2, #100	; 0x64
 800a8a6:	fb02 f303 	mul.w	r3, r2, r3
 800a8aa:	1acb      	subs	r3, r1, r3
 800a8ac:	00db      	lsls	r3, r3, #3
 800a8ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a8b2:	4b36      	ldr	r3, [pc, #216]	; (800a98c <UART_SetConfig+0x2d4>)
 800a8b4:	fba3 2302 	umull	r2, r3, r3, r2
 800a8b8:	095b      	lsrs	r3, r3, #5
 800a8ba:	005b      	lsls	r3, r3, #1
 800a8bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a8c0:	441c      	add	r4, r3
 800a8c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a8cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a8d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a8d4:	4642      	mov	r2, r8
 800a8d6:	464b      	mov	r3, r9
 800a8d8:	1891      	adds	r1, r2, r2
 800a8da:	63b9      	str	r1, [r7, #56]	; 0x38
 800a8dc:	415b      	adcs	r3, r3
 800a8de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a8e4:	4641      	mov	r1, r8
 800a8e6:	1851      	adds	r1, r2, r1
 800a8e8:	6339      	str	r1, [r7, #48]	; 0x30
 800a8ea:	4649      	mov	r1, r9
 800a8ec:	414b      	adcs	r3, r1
 800a8ee:	637b      	str	r3, [r7, #52]	; 0x34
 800a8f0:	f04f 0200 	mov.w	r2, #0
 800a8f4:	f04f 0300 	mov.w	r3, #0
 800a8f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a8fc:	4659      	mov	r1, fp
 800a8fe:	00cb      	lsls	r3, r1, #3
 800a900:	4651      	mov	r1, sl
 800a902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a906:	4651      	mov	r1, sl
 800a908:	00ca      	lsls	r2, r1, #3
 800a90a:	4610      	mov	r0, r2
 800a90c:	4619      	mov	r1, r3
 800a90e:	4603      	mov	r3, r0
 800a910:	4642      	mov	r2, r8
 800a912:	189b      	adds	r3, r3, r2
 800a914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a918:	464b      	mov	r3, r9
 800a91a:	460a      	mov	r2, r1
 800a91c:	eb42 0303 	adc.w	r3, r2, r3
 800a920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a930:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a938:	460b      	mov	r3, r1
 800a93a:	18db      	adds	r3, r3, r3
 800a93c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a93e:	4613      	mov	r3, r2
 800a940:	eb42 0303 	adc.w	r3, r2, r3
 800a944:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a94a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a94e:	f7f6 f983 	bl	8000c58 <__aeabi_uldivmod>
 800a952:	4602      	mov	r2, r0
 800a954:	460b      	mov	r3, r1
 800a956:	4b0d      	ldr	r3, [pc, #52]	; (800a98c <UART_SetConfig+0x2d4>)
 800a958:	fba3 1302 	umull	r1, r3, r3, r2
 800a95c:	095b      	lsrs	r3, r3, #5
 800a95e:	2164      	movs	r1, #100	; 0x64
 800a960:	fb01 f303 	mul.w	r3, r1, r3
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	00db      	lsls	r3, r3, #3
 800a968:	3332      	adds	r3, #50	; 0x32
 800a96a:	4a08      	ldr	r2, [pc, #32]	; (800a98c <UART_SetConfig+0x2d4>)
 800a96c:	fba2 2303 	umull	r2, r3, r2, r3
 800a970:	095b      	lsrs	r3, r3, #5
 800a972:	f003 0207 	and.w	r2, r3, #7
 800a976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4422      	add	r2, r4
 800a97e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a980:	e105      	b.n	800ab8e <UART_SetConfig+0x4d6>
 800a982:	bf00      	nop
 800a984:	40011000 	.word	0x40011000
 800a988:	40011400 	.word	0x40011400
 800a98c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a994:	2200      	movs	r2, #0
 800a996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a99a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a99e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a9a2:	4642      	mov	r2, r8
 800a9a4:	464b      	mov	r3, r9
 800a9a6:	1891      	adds	r1, r2, r2
 800a9a8:	6239      	str	r1, [r7, #32]
 800a9aa:	415b      	adcs	r3, r3
 800a9ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a9b2:	4641      	mov	r1, r8
 800a9b4:	1854      	adds	r4, r2, r1
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	eb43 0501 	adc.w	r5, r3, r1
 800a9bc:	f04f 0200 	mov.w	r2, #0
 800a9c0:	f04f 0300 	mov.w	r3, #0
 800a9c4:	00eb      	lsls	r3, r5, #3
 800a9c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a9ca:	00e2      	lsls	r2, r4, #3
 800a9cc:	4614      	mov	r4, r2
 800a9ce:	461d      	mov	r5, r3
 800a9d0:	4643      	mov	r3, r8
 800a9d2:	18e3      	adds	r3, r4, r3
 800a9d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a9d8:	464b      	mov	r3, r9
 800a9da:	eb45 0303 	adc.w	r3, r5, r3
 800a9de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a9e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a9ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a9f2:	f04f 0200 	mov.w	r2, #0
 800a9f6:	f04f 0300 	mov.w	r3, #0
 800a9fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a9fe:	4629      	mov	r1, r5
 800aa00:	008b      	lsls	r3, r1, #2
 800aa02:	4621      	mov	r1, r4
 800aa04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa08:	4621      	mov	r1, r4
 800aa0a:	008a      	lsls	r2, r1, #2
 800aa0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aa10:	f7f6 f922 	bl	8000c58 <__aeabi_uldivmod>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4b60      	ldr	r3, [pc, #384]	; (800ab9c <UART_SetConfig+0x4e4>)
 800aa1a:	fba3 2302 	umull	r2, r3, r3, r2
 800aa1e:	095b      	lsrs	r3, r3, #5
 800aa20:	011c      	lsls	r4, r3, #4
 800aa22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa26:	2200      	movs	r2, #0
 800aa28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aa2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aa30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aa34:	4642      	mov	r2, r8
 800aa36:	464b      	mov	r3, r9
 800aa38:	1891      	adds	r1, r2, r2
 800aa3a:	61b9      	str	r1, [r7, #24]
 800aa3c:	415b      	adcs	r3, r3
 800aa3e:	61fb      	str	r3, [r7, #28]
 800aa40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa44:	4641      	mov	r1, r8
 800aa46:	1851      	adds	r1, r2, r1
 800aa48:	6139      	str	r1, [r7, #16]
 800aa4a:	4649      	mov	r1, r9
 800aa4c:	414b      	adcs	r3, r1
 800aa4e:	617b      	str	r3, [r7, #20]
 800aa50:	f04f 0200 	mov.w	r2, #0
 800aa54:	f04f 0300 	mov.w	r3, #0
 800aa58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aa5c:	4659      	mov	r1, fp
 800aa5e:	00cb      	lsls	r3, r1, #3
 800aa60:	4651      	mov	r1, sl
 800aa62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa66:	4651      	mov	r1, sl
 800aa68:	00ca      	lsls	r2, r1, #3
 800aa6a:	4610      	mov	r0, r2
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	4603      	mov	r3, r0
 800aa70:	4642      	mov	r2, r8
 800aa72:	189b      	adds	r3, r3, r2
 800aa74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa78:	464b      	mov	r3, r9
 800aa7a:	460a      	mov	r2, r1
 800aa7c:	eb42 0303 	adc.w	r3, r2, r3
 800aa80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800aa90:	f04f 0200 	mov.w	r2, #0
 800aa94:	f04f 0300 	mov.w	r3, #0
 800aa98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800aa9c:	4649      	mov	r1, r9
 800aa9e:	008b      	lsls	r3, r1, #2
 800aaa0:	4641      	mov	r1, r8
 800aaa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aaa6:	4641      	mov	r1, r8
 800aaa8:	008a      	lsls	r2, r1, #2
 800aaaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800aaae:	f7f6 f8d3 	bl	8000c58 <__aeabi_uldivmod>
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	4b39      	ldr	r3, [pc, #228]	; (800ab9c <UART_SetConfig+0x4e4>)
 800aab8:	fba3 1302 	umull	r1, r3, r3, r2
 800aabc:	095b      	lsrs	r3, r3, #5
 800aabe:	2164      	movs	r1, #100	; 0x64
 800aac0:	fb01 f303 	mul.w	r3, r1, r3
 800aac4:	1ad3      	subs	r3, r2, r3
 800aac6:	011b      	lsls	r3, r3, #4
 800aac8:	3332      	adds	r3, #50	; 0x32
 800aaca:	4a34      	ldr	r2, [pc, #208]	; (800ab9c <UART_SetConfig+0x4e4>)
 800aacc:	fba2 2303 	umull	r2, r3, r2, r3
 800aad0:	095b      	lsrs	r3, r3, #5
 800aad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aad6:	441c      	add	r4, r3
 800aad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aadc:	2200      	movs	r2, #0
 800aade:	673b      	str	r3, [r7, #112]	; 0x70
 800aae0:	677a      	str	r2, [r7, #116]	; 0x74
 800aae2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800aae6:	4642      	mov	r2, r8
 800aae8:	464b      	mov	r3, r9
 800aaea:	1891      	adds	r1, r2, r2
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	415b      	adcs	r3, r3
 800aaf0:	60fb      	str	r3, [r7, #12]
 800aaf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aaf6:	4641      	mov	r1, r8
 800aaf8:	1851      	adds	r1, r2, r1
 800aafa:	6039      	str	r1, [r7, #0]
 800aafc:	4649      	mov	r1, r9
 800aafe:	414b      	adcs	r3, r1
 800ab00:	607b      	str	r3, [r7, #4]
 800ab02:	f04f 0200 	mov.w	r2, #0
 800ab06:	f04f 0300 	mov.w	r3, #0
 800ab0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ab0e:	4659      	mov	r1, fp
 800ab10:	00cb      	lsls	r3, r1, #3
 800ab12:	4651      	mov	r1, sl
 800ab14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab18:	4651      	mov	r1, sl
 800ab1a:	00ca      	lsls	r2, r1, #3
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	4619      	mov	r1, r3
 800ab20:	4603      	mov	r3, r0
 800ab22:	4642      	mov	r2, r8
 800ab24:	189b      	adds	r3, r3, r2
 800ab26:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab28:	464b      	mov	r3, r9
 800ab2a:	460a      	mov	r2, r1
 800ab2c:	eb42 0303 	adc.w	r3, r2, r3
 800ab30:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	663b      	str	r3, [r7, #96]	; 0x60
 800ab3c:	667a      	str	r2, [r7, #100]	; 0x64
 800ab3e:	f04f 0200 	mov.w	r2, #0
 800ab42:	f04f 0300 	mov.w	r3, #0
 800ab46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	008b      	lsls	r3, r1, #2
 800ab4e:	4641      	mov	r1, r8
 800ab50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab54:	4641      	mov	r1, r8
 800ab56:	008a      	lsls	r2, r1, #2
 800ab58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ab5c:	f7f6 f87c 	bl	8000c58 <__aeabi_uldivmod>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4b0d      	ldr	r3, [pc, #52]	; (800ab9c <UART_SetConfig+0x4e4>)
 800ab66:	fba3 1302 	umull	r1, r3, r3, r2
 800ab6a:	095b      	lsrs	r3, r3, #5
 800ab6c:	2164      	movs	r1, #100	; 0x64
 800ab6e:	fb01 f303 	mul.w	r3, r1, r3
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	011b      	lsls	r3, r3, #4
 800ab76:	3332      	adds	r3, #50	; 0x32
 800ab78:	4a08      	ldr	r2, [pc, #32]	; (800ab9c <UART_SetConfig+0x4e4>)
 800ab7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab7e:	095b      	lsrs	r3, r3, #5
 800ab80:	f003 020f 	and.w	r2, r3, #15
 800ab84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4422      	add	r2, r4
 800ab8c:	609a      	str	r2, [r3, #8]
}
 800ab8e:	bf00      	nop
 800ab90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ab94:	46bd      	mov	sp, r7
 800ab96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab9a:	bf00      	nop
 800ab9c:	51eb851f 	.word	0x51eb851f

0800aba0 <_ZdlPvj>:
 800aba0:	f000 b817 	b.w	800abd2 <_ZdlPv>

0800aba4 <_Znwj>:
 800aba4:	2801      	cmp	r0, #1
 800aba6:	bf38      	it	cc
 800aba8:	2001      	movcc	r0, #1
 800abaa:	b510      	push	{r4, lr}
 800abac:	4604      	mov	r4, r0
 800abae:	4620      	mov	r0, r4
 800abb0:	f001 fe92 	bl	800c8d8 <malloc>
 800abb4:	b930      	cbnz	r0, 800abc4 <_Znwj+0x20>
 800abb6:	f000 f80f 	bl	800abd8 <_ZSt15get_new_handlerv>
 800abba:	b908      	cbnz	r0, 800abc0 <_Znwj+0x1c>
 800abbc:	f001 fe5a 	bl	800c874 <abort>
 800abc0:	4780      	blx	r0
 800abc2:	e7f4      	b.n	800abae <_Znwj+0xa>
 800abc4:	bd10      	pop	{r4, pc}

0800abc6 <_ZSt17__throw_bad_allocv>:
 800abc6:	b508      	push	{r3, lr}
 800abc8:	f001 fe54 	bl	800c874 <abort>

0800abcc <_ZSt20__throw_length_errorPKc>:
 800abcc:	b508      	push	{r3, lr}
 800abce:	f001 fe51 	bl	800c874 <abort>

0800abd2 <_ZdlPv>:
 800abd2:	f001 be89 	b.w	800c8e8 <free>
	...

0800abd8 <_ZSt15get_new_handlerv>:
 800abd8:	4b02      	ldr	r3, [pc, #8]	; (800abe4 <_ZSt15get_new_handlerv+0xc>)
 800abda:	6818      	ldr	r0, [r3, #0]
 800abdc:	f3bf 8f5b 	dmb	ish
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	200010cc 	.word	0x200010cc

0800abe8 <cosf>:
 800abe8:	ee10 3a10 	vmov	r3, s0
 800abec:	b507      	push	{r0, r1, r2, lr}
 800abee:	4a1e      	ldr	r2, [pc, #120]	; (800ac68 <cosf+0x80>)
 800abf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800abf4:	4293      	cmp	r3, r2
 800abf6:	dc06      	bgt.n	800ac06 <cosf+0x1e>
 800abf8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800ac6c <cosf+0x84>
 800abfc:	b003      	add	sp, #12
 800abfe:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac02:	f001 b859 	b.w	800bcb8 <__kernel_cosf>
 800ac06:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ac0a:	db04      	blt.n	800ac16 <cosf+0x2e>
 800ac0c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ac10:	b003      	add	sp, #12
 800ac12:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac16:	4668      	mov	r0, sp
 800ac18:	f000 ff12 	bl	800ba40 <__ieee754_rem_pio2f>
 800ac1c:	f000 0003 	and.w	r0, r0, #3
 800ac20:	2801      	cmp	r0, #1
 800ac22:	d009      	beq.n	800ac38 <cosf+0x50>
 800ac24:	2802      	cmp	r0, #2
 800ac26:	d010      	beq.n	800ac4a <cosf+0x62>
 800ac28:	b9b0      	cbnz	r0, 800ac58 <cosf+0x70>
 800ac2a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ac2e:	ed9d 0a00 	vldr	s0, [sp]
 800ac32:	f001 f841 	bl	800bcb8 <__kernel_cosf>
 800ac36:	e7eb      	b.n	800ac10 <cosf+0x28>
 800ac38:	eddd 0a01 	vldr	s1, [sp, #4]
 800ac3c:	ed9d 0a00 	vldr	s0, [sp]
 800ac40:	f001 fb10 	bl	800c264 <__kernel_sinf>
 800ac44:	eeb1 0a40 	vneg.f32	s0, s0
 800ac48:	e7e2      	b.n	800ac10 <cosf+0x28>
 800ac4a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ac4e:	ed9d 0a00 	vldr	s0, [sp]
 800ac52:	f001 f831 	bl	800bcb8 <__kernel_cosf>
 800ac56:	e7f5      	b.n	800ac44 <cosf+0x5c>
 800ac58:	eddd 0a01 	vldr	s1, [sp, #4]
 800ac5c:	ed9d 0a00 	vldr	s0, [sp]
 800ac60:	2001      	movs	r0, #1
 800ac62:	f001 faff 	bl	800c264 <__kernel_sinf>
 800ac66:	e7d3      	b.n	800ac10 <cosf+0x28>
 800ac68:	3f490fd8 	.word	0x3f490fd8
 800ac6c:	00000000 	.word	0x00000000

0800ac70 <sinf>:
 800ac70:	ee10 3a10 	vmov	r3, s0
 800ac74:	b507      	push	{r0, r1, r2, lr}
 800ac76:	4a1f      	ldr	r2, [pc, #124]	; (800acf4 <sinf+0x84>)
 800ac78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	dc07      	bgt.n	800ac90 <sinf+0x20>
 800ac80:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800acf8 <sinf+0x88>
 800ac84:	2000      	movs	r0, #0
 800ac86:	b003      	add	sp, #12
 800ac88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac8c:	f001 baea 	b.w	800c264 <__kernel_sinf>
 800ac90:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ac94:	db04      	blt.n	800aca0 <sinf+0x30>
 800ac96:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ac9a:	b003      	add	sp, #12
 800ac9c:	f85d fb04 	ldr.w	pc, [sp], #4
 800aca0:	4668      	mov	r0, sp
 800aca2:	f000 fecd 	bl	800ba40 <__ieee754_rem_pio2f>
 800aca6:	f000 0003 	and.w	r0, r0, #3
 800acaa:	2801      	cmp	r0, #1
 800acac:	d00a      	beq.n	800acc4 <sinf+0x54>
 800acae:	2802      	cmp	r0, #2
 800acb0:	d00f      	beq.n	800acd2 <sinf+0x62>
 800acb2:	b9c0      	cbnz	r0, 800ace6 <sinf+0x76>
 800acb4:	eddd 0a01 	vldr	s1, [sp, #4]
 800acb8:	ed9d 0a00 	vldr	s0, [sp]
 800acbc:	2001      	movs	r0, #1
 800acbe:	f001 fad1 	bl	800c264 <__kernel_sinf>
 800acc2:	e7ea      	b.n	800ac9a <sinf+0x2a>
 800acc4:	eddd 0a01 	vldr	s1, [sp, #4]
 800acc8:	ed9d 0a00 	vldr	s0, [sp]
 800accc:	f000 fff4 	bl	800bcb8 <__kernel_cosf>
 800acd0:	e7e3      	b.n	800ac9a <sinf+0x2a>
 800acd2:	eddd 0a01 	vldr	s1, [sp, #4]
 800acd6:	ed9d 0a00 	vldr	s0, [sp]
 800acda:	2001      	movs	r0, #1
 800acdc:	f001 fac2 	bl	800c264 <__kernel_sinf>
 800ace0:	eeb1 0a40 	vneg.f32	s0, s0
 800ace4:	e7d9      	b.n	800ac9a <sinf+0x2a>
 800ace6:	eddd 0a01 	vldr	s1, [sp, #4]
 800acea:	ed9d 0a00 	vldr	s0, [sp]
 800acee:	f000 ffe3 	bl	800bcb8 <__kernel_cosf>
 800acf2:	e7f5      	b.n	800ace0 <sinf+0x70>
 800acf4:	3f490fd8 	.word	0x3f490fd8
 800acf8:	00000000 	.word	0x00000000

0800acfc <tanhf>:
 800acfc:	b510      	push	{r4, lr}
 800acfe:	ee10 4a10 	vmov	r4, s0
 800ad02:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ad06:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ad0a:	ed2d 8b02 	vpush	{d8}
 800ad0e:	eeb0 7a40 	vmov.f32	s14, s0
 800ad12:	db0c      	blt.n	800ad2e <tanhf+0x32>
 800ad14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ad18:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800ad1c:	2c00      	cmp	r4, #0
 800ad1e:	bfac      	ite	ge
 800ad20:	ee37 0a80 	vaddge.f32	s0, s15, s0
 800ad24:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 800ad28:	ecbd 8b02 	vpop	{d8}
 800ad2c:	bd10      	pop	{r4, pc}
 800ad2e:	4a1b      	ldr	r2, [pc, #108]	; (800ad9c <tanhf+0xa0>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	dc30      	bgt.n	800ad96 <tanhf+0x9a>
 800ad34:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800ad38:	da06      	bge.n	800ad48 <tanhf+0x4c>
 800ad3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ad3e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ad42:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ad46:	e7ef      	b.n	800ad28 <tanhf+0x2c>
 800ad48:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800ad4c:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800ad50:	db12      	blt.n	800ad78 <tanhf+0x7c>
 800ad52:	f001 fcb7 	bl	800c6c4 <fabsf>
 800ad56:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ad5a:	f001 fb97 	bl	800c48c <expm1f>
 800ad5e:	ee30 0a08 	vadd.f32	s0, s0, s16
 800ad62:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800ad66:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ad6a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ad6e:	2c00      	cmp	r4, #0
 800ad70:	bfb8      	it	lt
 800ad72:	eeb1 0a40 	vneglt.f32	s0, s0
 800ad76:	e7d7      	b.n	800ad28 <tanhf+0x2c>
 800ad78:	f001 fca4 	bl	800c6c4 <fabsf>
 800ad7c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800ad80:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ad84:	f001 fb82 	bl	800c48c <expm1f>
 800ad88:	ee70 7a08 	vadd.f32	s15, s0, s16
 800ad8c:	eeb1 7a40 	vneg.f32	s14, s0
 800ad90:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ad94:	e7eb      	b.n	800ad6e <tanhf+0x72>
 800ad96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ad9a:	e7e8      	b.n	800ad6e <tanhf+0x72>
 800ad9c:	41afffff 	.word	0x41afffff

0800ada0 <pow>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	ed2d 8b02 	vpush	{d8}
 800ada6:	eeb0 8a40 	vmov.f32	s16, s0
 800adaa:	eef0 8a60 	vmov.f32	s17, s1
 800adae:	ec55 4b11 	vmov	r4, r5, d1
 800adb2:	f000 f865 	bl	800ae80 <__ieee754_pow>
 800adb6:	4622      	mov	r2, r4
 800adb8:	462b      	mov	r3, r5
 800adba:	4620      	mov	r0, r4
 800adbc:	4629      	mov	r1, r5
 800adbe:	ec57 6b10 	vmov	r6, r7, d0
 800adc2:	f7f5 febb 	bl	8000b3c <__aeabi_dcmpun>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d13b      	bne.n	800ae42 <pow+0xa2>
 800adca:	ec51 0b18 	vmov	r0, r1, d8
 800adce:	2200      	movs	r2, #0
 800add0:	2300      	movs	r3, #0
 800add2:	f7f5 fe81 	bl	8000ad8 <__aeabi_dcmpeq>
 800add6:	b1b8      	cbz	r0, 800ae08 <pow+0x68>
 800add8:	2200      	movs	r2, #0
 800adda:	2300      	movs	r3, #0
 800addc:	4620      	mov	r0, r4
 800adde:	4629      	mov	r1, r5
 800ade0:	f7f5 fe7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d146      	bne.n	800ae76 <pow+0xd6>
 800ade8:	ec45 4b10 	vmov	d0, r4, r5
 800adec:	f001 fabb 	bl	800c366 <finite>
 800adf0:	b338      	cbz	r0, 800ae42 <pow+0xa2>
 800adf2:	2200      	movs	r2, #0
 800adf4:	2300      	movs	r3, #0
 800adf6:	4620      	mov	r0, r4
 800adf8:	4629      	mov	r1, r5
 800adfa:	f7f5 fe77 	bl	8000aec <__aeabi_dcmplt>
 800adfe:	b300      	cbz	r0, 800ae42 <pow+0xa2>
 800ae00:	f001 fd40 	bl	800c884 <__errno>
 800ae04:	2322      	movs	r3, #34	; 0x22
 800ae06:	e01b      	b.n	800ae40 <pow+0xa0>
 800ae08:	ec47 6b10 	vmov	d0, r6, r7
 800ae0c:	f001 faab 	bl	800c366 <finite>
 800ae10:	b9e0      	cbnz	r0, 800ae4c <pow+0xac>
 800ae12:	eeb0 0a48 	vmov.f32	s0, s16
 800ae16:	eef0 0a68 	vmov.f32	s1, s17
 800ae1a:	f001 faa4 	bl	800c366 <finite>
 800ae1e:	b1a8      	cbz	r0, 800ae4c <pow+0xac>
 800ae20:	ec45 4b10 	vmov	d0, r4, r5
 800ae24:	f001 fa9f 	bl	800c366 <finite>
 800ae28:	b180      	cbz	r0, 800ae4c <pow+0xac>
 800ae2a:	4632      	mov	r2, r6
 800ae2c:	463b      	mov	r3, r7
 800ae2e:	4630      	mov	r0, r6
 800ae30:	4639      	mov	r1, r7
 800ae32:	f7f5 fe83 	bl	8000b3c <__aeabi_dcmpun>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d0e2      	beq.n	800ae00 <pow+0x60>
 800ae3a:	f001 fd23 	bl	800c884 <__errno>
 800ae3e:	2321      	movs	r3, #33	; 0x21
 800ae40:	6003      	str	r3, [r0, #0]
 800ae42:	ecbd 8b02 	vpop	{d8}
 800ae46:	ec47 6b10 	vmov	d0, r6, r7
 800ae4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2300      	movs	r3, #0
 800ae50:	4630      	mov	r0, r6
 800ae52:	4639      	mov	r1, r7
 800ae54:	f7f5 fe40 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d0f2      	beq.n	800ae42 <pow+0xa2>
 800ae5c:	eeb0 0a48 	vmov.f32	s0, s16
 800ae60:	eef0 0a68 	vmov.f32	s1, s17
 800ae64:	f001 fa7f 	bl	800c366 <finite>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d0ea      	beq.n	800ae42 <pow+0xa2>
 800ae6c:	ec45 4b10 	vmov	d0, r4, r5
 800ae70:	f001 fa79 	bl	800c366 <finite>
 800ae74:	e7c3      	b.n	800adfe <pow+0x5e>
 800ae76:	4f01      	ldr	r7, [pc, #4]	; (800ae7c <pow+0xdc>)
 800ae78:	2600      	movs	r6, #0
 800ae7a:	e7e2      	b.n	800ae42 <pow+0xa2>
 800ae7c:	3ff00000 	.word	0x3ff00000

0800ae80 <__ieee754_pow>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	ed2d 8b06 	vpush	{d8-d10}
 800ae88:	b089      	sub	sp, #36	; 0x24
 800ae8a:	ed8d 1b00 	vstr	d1, [sp]
 800ae8e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ae92:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ae96:	ea58 0102 	orrs.w	r1, r8, r2
 800ae9a:	ec57 6b10 	vmov	r6, r7, d0
 800ae9e:	d115      	bne.n	800aecc <__ieee754_pow+0x4c>
 800aea0:	19b3      	adds	r3, r6, r6
 800aea2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800aea6:	4152      	adcs	r2, r2
 800aea8:	4299      	cmp	r1, r3
 800aeaa:	4b89      	ldr	r3, [pc, #548]	; (800b0d0 <__ieee754_pow+0x250>)
 800aeac:	4193      	sbcs	r3, r2
 800aeae:	f080 84d2 	bcs.w	800b856 <__ieee754_pow+0x9d6>
 800aeb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	4639      	mov	r1, r7
 800aeba:	f7f5 f9ef 	bl	800029c <__adddf3>
 800aebe:	ec41 0b10 	vmov	d0, r0, r1
 800aec2:	b009      	add	sp, #36	; 0x24
 800aec4:	ecbd 8b06 	vpop	{d8-d10}
 800aec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aecc:	4b81      	ldr	r3, [pc, #516]	; (800b0d4 <__ieee754_pow+0x254>)
 800aece:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800aed2:	429c      	cmp	r4, r3
 800aed4:	ee10 aa10 	vmov	sl, s0
 800aed8:	463d      	mov	r5, r7
 800aeda:	dc06      	bgt.n	800aeea <__ieee754_pow+0x6a>
 800aedc:	d101      	bne.n	800aee2 <__ieee754_pow+0x62>
 800aede:	2e00      	cmp	r6, #0
 800aee0:	d1e7      	bne.n	800aeb2 <__ieee754_pow+0x32>
 800aee2:	4598      	cmp	r8, r3
 800aee4:	dc01      	bgt.n	800aeea <__ieee754_pow+0x6a>
 800aee6:	d10f      	bne.n	800af08 <__ieee754_pow+0x88>
 800aee8:	b172      	cbz	r2, 800af08 <__ieee754_pow+0x88>
 800aeea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800aeee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800aef2:	ea55 050a 	orrs.w	r5, r5, sl
 800aef6:	d1dc      	bne.n	800aeb2 <__ieee754_pow+0x32>
 800aef8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aefc:	18db      	adds	r3, r3, r3
 800aefe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800af02:	4152      	adcs	r2, r2
 800af04:	429d      	cmp	r5, r3
 800af06:	e7d0      	b.n	800aeaa <__ieee754_pow+0x2a>
 800af08:	2d00      	cmp	r5, #0
 800af0a:	da3b      	bge.n	800af84 <__ieee754_pow+0x104>
 800af0c:	4b72      	ldr	r3, [pc, #456]	; (800b0d8 <__ieee754_pow+0x258>)
 800af0e:	4598      	cmp	r8, r3
 800af10:	dc51      	bgt.n	800afb6 <__ieee754_pow+0x136>
 800af12:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800af16:	4598      	cmp	r8, r3
 800af18:	f340 84ac 	ble.w	800b874 <__ieee754_pow+0x9f4>
 800af1c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800af20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800af24:	2b14      	cmp	r3, #20
 800af26:	dd0f      	ble.n	800af48 <__ieee754_pow+0xc8>
 800af28:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800af2c:	fa22 f103 	lsr.w	r1, r2, r3
 800af30:	fa01 f303 	lsl.w	r3, r1, r3
 800af34:	4293      	cmp	r3, r2
 800af36:	f040 849d 	bne.w	800b874 <__ieee754_pow+0x9f4>
 800af3a:	f001 0101 	and.w	r1, r1, #1
 800af3e:	f1c1 0302 	rsb	r3, r1, #2
 800af42:	9304      	str	r3, [sp, #16]
 800af44:	b182      	cbz	r2, 800af68 <__ieee754_pow+0xe8>
 800af46:	e05f      	b.n	800b008 <__ieee754_pow+0x188>
 800af48:	2a00      	cmp	r2, #0
 800af4a:	d15b      	bne.n	800b004 <__ieee754_pow+0x184>
 800af4c:	f1c3 0314 	rsb	r3, r3, #20
 800af50:	fa48 f103 	asr.w	r1, r8, r3
 800af54:	fa01 f303 	lsl.w	r3, r1, r3
 800af58:	4543      	cmp	r3, r8
 800af5a:	f040 8488 	bne.w	800b86e <__ieee754_pow+0x9ee>
 800af5e:	f001 0101 	and.w	r1, r1, #1
 800af62:	f1c1 0302 	rsb	r3, r1, #2
 800af66:	9304      	str	r3, [sp, #16]
 800af68:	4b5c      	ldr	r3, [pc, #368]	; (800b0dc <__ieee754_pow+0x25c>)
 800af6a:	4598      	cmp	r8, r3
 800af6c:	d132      	bne.n	800afd4 <__ieee754_pow+0x154>
 800af6e:	f1b9 0f00 	cmp.w	r9, #0
 800af72:	f280 8478 	bge.w	800b866 <__ieee754_pow+0x9e6>
 800af76:	4959      	ldr	r1, [pc, #356]	; (800b0dc <__ieee754_pow+0x25c>)
 800af78:	4632      	mov	r2, r6
 800af7a:	463b      	mov	r3, r7
 800af7c:	2000      	movs	r0, #0
 800af7e:	f7f5 fc6d 	bl	800085c <__aeabi_ddiv>
 800af82:	e79c      	b.n	800aebe <__ieee754_pow+0x3e>
 800af84:	2300      	movs	r3, #0
 800af86:	9304      	str	r3, [sp, #16]
 800af88:	2a00      	cmp	r2, #0
 800af8a:	d13d      	bne.n	800b008 <__ieee754_pow+0x188>
 800af8c:	4b51      	ldr	r3, [pc, #324]	; (800b0d4 <__ieee754_pow+0x254>)
 800af8e:	4598      	cmp	r8, r3
 800af90:	d1ea      	bne.n	800af68 <__ieee754_pow+0xe8>
 800af92:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800af96:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800af9a:	ea53 030a 	orrs.w	r3, r3, sl
 800af9e:	f000 845a 	beq.w	800b856 <__ieee754_pow+0x9d6>
 800afa2:	4b4f      	ldr	r3, [pc, #316]	; (800b0e0 <__ieee754_pow+0x260>)
 800afa4:	429c      	cmp	r4, r3
 800afa6:	dd08      	ble.n	800afba <__ieee754_pow+0x13a>
 800afa8:	f1b9 0f00 	cmp.w	r9, #0
 800afac:	f2c0 8457 	blt.w	800b85e <__ieee754_pow+0x9de>
 800afb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afb4:	e783      	b.n	800aebe <__ieee754_pow+0x3e>
 800afb6:	2302      	movs	r3, #2
 800afb8:	e7e5      	b.n	800af86 <__ieee754_pow+0x106>
 800afba:	f1b9 0f00 	cmp.w	r9, #0
 800afbe:	f04f 0000 	mov.w	r0, #0
 800afc2:	f04f 0100 	mov.w	r1, #0
 800afc6:	f6bf af7a 	bge.w	800aebe <__ieee754_pow+0x3e>
 800afca:	e9dd 0300 	ldrd	r0, r3, [sp]
 800afce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800afd2:	e774      	b.n	800aebe <__ieee754_pow+0x3e>
 800afd4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800afd8:	d106      	bne.n	800afe8 <__ieee754_pow+0x168>
 800afda:	4632      	mov	r2, r6
 800afdc:	463b      	mov	r3, r7
 800afde:	4630      	mov	r0, r6
 800afe0:	4639      	mov	r1, r7
 800afe2:	f7f5 fb11 	bl	8000608 <__aeabi_dmul>
 800afe6:	e76a      	b.n	800aebe <__ieee754_pow+0x3e>
 800afe8:	4b3e      	ldr	r3, [pc, #248]	; (800b0e4 <__ieee754_pow+0x264>)
 800afea:	4599      	cmp	r9, r3
 800afec:	d10c      	bne.n	800b008 <__ieee754_pow+0x188>
 800afee:	2d00      	cmp	r5, #0
 800aff0:	db0a      	blt.n	800b008 <__ieee754_pow+0x188>
 800aff2:	ec47 6b10 	vmov	d0, r6, r7
 800aff6:	b009      	add	sp, #36	; 0x24
 800aff8:	ecbd 8b06 	vpop	{d8-d10}
 800affc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b000:	f000 bc6c 	b.w	800b8dc <__ieee754_sqrt>
 800b004:	2300      	movs	r3, #0
 800b006:	9304      	str	r3, [sp, #16]
 800b008:	ec47 6b10 	vmov	d0, r6, r7
 800b00c:	f001 f9a2 	bl	800c354 <fabs>
 800b010:	ec51 0b10 	vmov	r0, r1, d0
 800b014:	f1ba 0f00 	cmp.w	sl, #0
 800b018:	d129      	bne.n	800b06e <__ieee754_pow+0x1ee>
 800b01a:	b124      	cbz	r4, 800b026 <__ieee754_pow+0x1a6>
 800b01c:	4b2f      	ldr	r3, [pc, #188]	; (800b0dc <__ieee754_pow+0x25c>)
 800b01e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b022:	429a      	cmp	r2, r3
 800b024:	d123      	bne.n	800b06e <__ieee754_pow+0x1ee>
 800b026:	f1b9 0f00 	cmp.w	r9, #0
 800b02a:	da05      	bge.n	800b038 <__ieee754_pow+0x1b8>
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	2000      	movs	r0, #0
 800b032:	492a      	ldr	r1, [pc, #168]	; (800b0dc <__ieee754_pow+0x25c>)
 800b034:	f7f5 fc12 	bl	800085c <__aeabi_ddiv>
 800b038:	2d00      	cmp	r5, #0
 800b03a:	f6bf af40 	bge.w	800aebe <__ieee754_pow+0x3e>
 800b03e:	9b04      	ldr	r3, [sp, #16]
 800b040:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b044:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b048:	4323      	orrs	r3, r4
 800b04a:	d108      	bne.n	800b05e <__ieee754_pow+0x1de>
 800b04c:	4602      	mov	r2, r0
 800b04e:	460b      	mov	r3, r1
 800b050:	4610      	mov	r0, r2
 800b052:	4619      	mov	r1, r3
 800b054:	f7f5 f920 	bl	8000298 <__aeabi_dsub>
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	e78f      	b.n	800af7e <__ieee754_pow+0xfe>
 800b05e:	9b04      	ldr	r3, [sp, #16]
 800b060:	2b01      	cmp	r3, #1
 800b062:	f47f af2c 	bne.w	800aebe <__ieee754_pow+0x3e>
 800b066:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b06a:	4619      	mov	r1, r3
 800b06c:	e727      	b.n	800aebe <__ieee754_pow+0x3e>
 800b06e:	0feb      	lsrs	r3, r5, #31
 800b070:	3b01      	subs	r3, #1
 800b072:	9306      	str	r3, [sp, #24]
 800b074:	9a06      	ldr	r2, [sp, #24]
 800b076:	9b04      	ldr	r3, [sp, #16]
 800b078:	4313      	orrs	r3, r2
 800b07a:	d102      	bne.n	800b082 <__ieee754_pow+0x202>
 800b07c:	4632      	mov	r2, r6
 800b07e:	463b      	mov	r3, r7
 800b080:	e7e6      	b.n	800b050 <__ieee754_pow+0x1d0>
 800b082:	4b19      	ldr	r3, [pc, #100]	; (800b0e8 <__ieee754_pow+0x268>)
 800b084:	4598      	cmp	r8, r3
 800b086:	f340 80fb 	ble.w	800b280 <__ieee754_pow+0x400>
 800b08a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b08e:	4598      	cmp	r8, r3
 800b090:	4b13      	ldr	r3, [pc, #76]	; (800b0e0 <__ieee754_pow+0x260>)
 800b092:	dd0c      	ble.n	800b0ae <__ieee754_pow+0x22e>
 800b094:	429c      	cmp	r4, r3
 800b096:	dc0f      	bgt.n	800b0b8 <__ieee754_pow+0x238>
 800b098:	f1b9 0f00 	cmp.w	r9, #0
 800b09c:	da0f      	bge.n	800b0be <__ieee754_pow+0x23e>
 800b09e:	2000      	movs	r0, #0
 800b0a0:	b009      	add	sp, #36	; 0x24
 800b0a2:	ecbd 8b06 	vpop	{d8-d10}
 800b0a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0aa:	f001 b94a 	b.w	800c342 <__math_oflow>
 800b0ae:	429c      	cmp	r4, r3
 800b0b0:	dbf2      	blt.n	800b098 <__ieee754_pow+0x218>
 800b0b2:	4b0a      	ldr	r3, [pc, #40]	; (800b0dc <__ieee754_pow+0x25c>)
 800b0b4:	429c      	cmp	r4, r3
 800b0b6:	dd19      	ble.n	800b0ec <__ieee754_pow+0x26c>
 800b0b8:	f1b9 0f00 	cmp.w	r9, #0
 800b0bc:	dcef      	bgt.n	800b09e <__ieee754_pow+0x21e>
 800b0be:	2000      	movs	r0, #0
 800b0c0:	b009      	add	sp, #36	; 0x24
 800b0c2:	ecbd 8b06 	vpop	{d8-d10}
 800b0c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ca:	f001 b931 	b.w	800c330 <__math_uflow>
 800b0ce:	bf00      	nop
 800b0d0:	fff00000 	.word	0xfff00000
 800b0d4:	7ff00000 	.word	0x7ff00000
 800b0d8:	433fffff 	.word	0x433fffff
 800b0dc:	3ff00000 	.word	0x3ff00000
 800b0e0:	3fefffff 	.word	0x3fefffff
 800b0e4:	3fe00000 	.word	0x3fe00000
 800b0e8:	41e00000 	.word	0x41e00000
 800b0ec:	4b60      	ldr	r3, [pc, #384]	; (800b270 <__ieee754_pow+0x3f0>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f7f5 f8d2 	bl	8000298 <__aeabi_dsub>
 800b0f4:	a354      	add	r3, pc, #336	; (adr r3, 800b248 <__ieee754_pow+0x3c8>)
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	460d      	mov	r5, r1
 800b0fe:	f7f5 fa83 	bl	8000608 <__aeabi_dmul>
 800b102:	a353      	add	r3, pc, #332	; (adr r3, 800b250 <__ieee754_pow+0x3d0>)
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	4606      	mov	r6, r0
 800b10a:	460f      	mov	r7, r1
 800b10c:	4620      	mov	r0, r4
 800b10e:	4629      	mov	r1, r5
 800b110:	f7f5 fa7a 	bl	8000608 <__aeabi_dmul>
 800b114:	4b57      	ldr	r3, [pc, #348]	; (800b274 <__ieee754_pow+0x3f4>)
 800b116:	4682      	mov	sl, r0
 800b118:	468b      	mov	fp, r1
 800b11a:	2200      	movs	r2, #0
 800b11c:	4620      	mov	r0, r4
 800b11e:	4629      	mov	r1, r5
 800b120:	f7f5 fa72 	bl	8000608 <__aeabi_dmul>
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	a14b      	add	r1, pc, #300	; (adr r1, 800b258 <__ieee754_pow+0x3d8>)
 800b12a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b12e:	f7f5 f8b3 	bl	8000298 <__aeabi_dsub>
 800b132:	4622      	mov	r2, r4
 800b134:	462b      	mov	r3, r5
 800b136:	f7f5 fa67 	bl	8000608 <__aeabi_dmul>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	2000      	movs	r0, #0
 800b140:	494d      	ldr	r1, [pc, #308]	; (800b278 <__ieee754_pow+0x3f8>)
 800b142:	f7f5 f8a9 	bl	8000298 <__aeabi_dsub>
 800b146:	4622      	mov	r2, r4
 800b148:	4680      	mov	r8, r0
 800b14a:	4689      	mov	r9, r1
 800b14c:	462b      	mov	r3, r5
 800b14e:	4620      	mov	r0, r4
 800b150:	4629      	mov	r1, r5
 800b152:	f7f5 fa59 	bl	8000608 <__aeabi_dmul>
 800b156:	4602      	mov	r2, r0
 800b158:	460b      	mov	r3, r1
 800b15a:	4640      	mov	r0, r8
 800b15c:	4649      	mov	r1, r9
 800b15e:	f7f5 fa53 	bl	8000608 <__aeabi_dmul>
 800b162:	a33f      	add	r3, pc, #252	; (adr r3, 800b260 <__ieee754_pow+0x3e0>)
 800b164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b168:	f7f5 fa4e 	bl	8000608 <__aeabi_dmul>
 800b16c:	4602      	mov	r2, r0
 800b16e:	460b      	mov	r3, r1
 800b170:	4650      	mov	r0, sl
 800b172:	4659      	mov	r1, fp
 800b174:	f7f5 f890 	bl	8000298 <__aeabi_dsub>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4680      	mov	r8, r0
 800b17e:	4689      	mov	r9, r1
 800b180:	4630      	mov	r0, r6
 800b182:	4639      	mov	r1, r7
 800b184:	f7f5 f88a 	bl	800029c <__adddf3>
 800b188:	2000      	movs	r0, #0
 800b18a:	4632      	mov	r2, r6
 800b18c:	463b      	mov	r3, r7
 800b18e:	4604      	mov	r4, r0
 800b190:	460d      	mov	r5, r1
 800b192:	f7f5 f881 	bl	8000298 <__aeabi_dsub>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	4640      	mov	r0, r8
 800b19c:	4649      	mov	r1, r9
 800b19e:	f7f5 f87b 	bl	8000298 <__aeabi_dsub>
 800b1a2:	9b04      	ldr	r3, [sp, #16]
 800b1a4:	9a06      	ldr	r2, [sp, #24]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	4682      	mov	sl, r0
 800b1ac:	468b      	mov	fp, r1
 800b1ae:	f040 81e7 	bne.w	800b580 <__ieee754_pow+0x700>
 800b1b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b268 <__ieee754_pow+0x3e8>
 800b1b6:	eeb0 8a47 	vmov.f32	s16, s14
 800b1ba:	eef0 8a67 	vmov.f32	s17, s15
 800b1be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b1c2:	2600      	movs	r6, #0
 800b1c4:	4632      	mov	r2, r6
 800b1c6:	463b      	mov	r3, r7
 800b1c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1cc:	f7f5 f864 	bl	8000298 <__aeabi_dsub>
 800b1d0:	4622      	mov	r2, r4
 800b1d2:	462b      	mov	r3, r5
 800b1d4:	f7f5 fa18 	bl	8000608 <__aeabi_dmul>
 800b1d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1dc:	4680      	mov	r8, r0
 800b1de:	4689      	mov	r9, r1
 800b1e0:	4650      	mov	r0, sl
 800b1e2:	4659      	mov	r1, fp
 800b1e4:	f7f5 fa10 	bl	8000608 <__aeabi_dmul>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	4640      	mov	r0, r8
 800b1ee:	4649      	mov	r1, r9
 800b1f0:	f7f5 f854 	bl	800029c <__adddf3>
 800b1f4:	4632      	mov	r2, r6
 800b1f6:	463b      	mov	r3, r7
 800b1f8:	4680      	mov	r8, r0
 800b1fa:	4689      	mov	r9, r1
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	4629      	mov	r1, r5
 800b200:	f7f5 fa02 	bl	8000608 <__aeabi_dmul>
 800b204:	460b      	mov	r3, r1
 800b206:	4604      	mov	r4, r0
 800b208:	460d      	mov	r5, r1
 800b20a:	4602      	mov	r2, r0
 800b20c:	4649      	mov	r1, r9
 800b20e:	4640      	mov	r0, r8
 800b210:	f7f5 f844 	bl	800029c <__adddf3>
 800b214:	4b19      	ldr	r3, [pc, #100]	; (800b27c <__ieee754_pow+0x3fc>)
 800b216:	4299      	cmp	r1, r3
 800b218:	ec45 4b19 	vmov	d9, r4, r5
 800b21c:	4606      	mov	r6, r0
 800b21e:	460f      	mov	r7, r1
 800b220:	468b      	mov	fp, r1
 800b222:	f340 82f1 	ble.w	800b808 <__ieee754_pow+0x988>
 800b226:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b22a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b22e:	4303      	orrs	r3, r0
 800b230:	f000 81e4 	beq.w	800b5fc <__ieee754_pow+0x77c>
 800b234:	ec51 0b18 	vmov	r0, r1, d8
 800b238:	2200      	movs	r2, #0
 800b23a:	2300      	movs	r3, #0
 800b23c:	f7f5 fc56 	bl	8000aec <__aeabi_dcmplt>
 800b240:	3800      	subs	r0, #0
 800b242:	bf18      	it	ne
 800b244:	2001      	movne	r0, #1
 800b246:	e72b      	b.n	800b0a0 <__ieee754_pow+0x220>
 800b248:	60000000 	.word	0x60000000
 800b24c:	3ff71547 	.word	0x3ff71547
 800b250:	f85ddf44 	.word	0xf85ddf44
 800b254:	3e54ae0b 	.word	0x3e54ae0b
 800b258:	55555555 	.word	0x55555555
 800b25c:	3fd55555 	.word	0x3fd55555
 800b260:	652b82fe 	.word	0x652b82fe
 800b264:	3ff71547 	.word	0x3ff71547
 800b268:	00000000 	.word	0x00000000
 800b26c:	bff00000 	.word	0xbff00000
 800b270:	3ff00000 	.word	0x3ff00000
 800b274:	3fd00000 	.word	0x3fd00000
 800b278:	3fe00000 	.word	0x3fe00000
 800b27c:	408fffff 	.word	0x408fffff
 800b280:	4bd5      	ldr	r3, [pc, #852]	; (800b5d8 <__ieee754_pow+0x758>)
 800b282:	402b      	ands	r3, r5
 800b284:	2200      	movs	r2, #0
 800b286:	b92b      	cbnz	r3, 800b294 <__ieee754_pow+0x414>
 800b288:	4bd4      	ldr	r3, [pc, #848]	; (800b5dc <__ieee754_pow+0x75c>)
 800b28a:	f7f5 f9bd 	bl	8000608 <__aeabi_dmul>
 800b28e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b292:	460c      	mov	r4, r1
 800b294:	1523      	asrs	r3, r4, #20
 800b296:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b29a:	4413      	add	r3, r2
 800b29c:	9305      	str	r3, [sp, #20]
 800b29e:	4bd0      	ldr	r3, [pc, #832]	; (800b5e0 <__ieee754_pow+0x760>)
 800b2a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b2a4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b2a8:	429c      	cmp	r4, r3
 800b2aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b2ae:	dd08      	ble.n	800b2c2 <__ieee754_pow+0x442>
 800b2b0:	4bcc      	ldr	r3, [pc, #816]	; (800b5e4 <__ieee754_pow+0x764>)
 800b2b2:	429c      	cmp	r4, r3
 800b2b4:	f340 8162 	ble.w	800b57c <__ieee754_pow+0x6fc>
 800b2b8:	9b05      	ldr	r3, [sp, #20]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	9305      	str	r3, [sp, #20]
 800b2be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b2c2:	2400      	movs	r4, #0
 800b2c4:	00e3      	lsls	r3, r4, #3
 800b2c6:	9307      	str	r3, [sp, #28]
 800b2c8:	4bc7      	ldr	r3, [pc, #796]	; (800b5e8 <__ieee754_pow+0x768>)
 800b2ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2ce:	ed93 7b00 	vldr	d7, [r3]
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	ec53 2b17 	vmov	r2, r3, d7
 800b2d8:	eeb0 9a47 	vmov.f32	s18, s14
 800b2dc:	eef0 9a67 	vmov.f32	s19, s15
 800b2e0:	4682      	mov	sl, r0
 800b2e2:	f7f4 ffd9 	bl	8000298 <__aeabi_dsub>
 800b2e6:	4652      	mov	r2, sl
 800b2e8:	4606      	mov	r6, r0
 800b2ea:	460f      	mov	r7, r1
 800b2ec:	462b      	mov	r3, r5
 800b2ee:	ec51 0b19 	vmov	r0, r1, d9
 800b2f2:	f7f4 ffd3 	bl	800029c <__adddf3>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	49bb      	ldr	r1, [pc, #748]	; (800b5ec <__ieee754_pow+0x76c>)
 800b2fe:	f7f5 faad 	bl	800085c <__aeabi_ddiv>
 800b302:	ec41 0b1a 	vmov	d10, r0, r1
 800b306:	4602      	mov	r2, r0
 800b308:	460b      	mov	r3, r1
 800b30a:	4630      	mov	r0, r6
 800b30c:	4639      	mov	r1, r7
 800b30e:	f7f5 f97b 	bl	8000608 <__aeabi_dmul>
 800b312:	2300      	movs	r3, #0
 800b314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b318:	9302      	str	r3, [sp, #8]
 800b31a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b31e:	46ab      	mov	fp, r5
 800b320:	106d      	asrs	r5, r5, #1
 800b322:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b326:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b32a:	ec41 0b18 	vmov	d8, r0, r1
 800b32e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b332:	2200      	movs	r2, #0
 800b334:	4640      	mov	r0, r8
 800b336:	4649      	mov	r1, r9
 800b338:	4614      	mov	r4, r2
 800b33a:	461d      	mov	r5, r3
 800b33c:	f7f5 f964 	bl	8000608 <__aeabi_dmul>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	4630      	mov	r0, r6
 800b346:	4639      	mov	r1, r7
 800b348:	f7f4 ffa6 	bl	8000298 <__aeabi_dsub>
 800b34c:	ec53 2b19 	vmov	r2, r3, d9
 800b350:	4606      	mov	r6, r0
 800b352:	460f      	mov	r7, r1
 800b354:	4620      	mov	r0, r4
 800b356:	4629      	mov	r1, r5
 800b358:	f7f4 ff9e 	bl	8000298 <__aeabi_dsub>
 800b35c:	4602      	mov	r2, r0
 800b35e:	460b      	mov	r3, r1
 800b360:	4650      	mov	r0, sl
 800b362:	4659      	mov	r1, fp
 800b364:	f7f4 ff98 	bl	8000298 <__aeabi_dsub>
 800b368:	4642      	mov	r2, r8
 800b36a:	464b      	mov	r3, r9
 800b36c:	f7f5 f94c 	bl	8000608 <__aeabi_dmul>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4630      	mov	r0, r6
 800b376:	4639      	mov	r1, r7
 800b378:	f7f4 ff8e 	bl	8000298 <__aeabi_dsub>
 800b37c:	ec53 2b1a 	vmov	r2, r3, d10
 800b380:	f7f5 f942 	bl	8000608 <__aeabi_dmul>
 800b384:	ec53 2b18 	vmov	r2, r3, d8
 800b388:	ec41 0b19 	vmov	d9, r0, r1
 800b38c:	ec51 0b18 	vmov	r0, r1, d8
 800b390:	f7f5 f93a 	bl	8000608 <__aeabi_dmul>
 800b394:	a37c      	add	r3, pc, #496	; (adr r3, 800b588 <__ieee754_pow+0x708>)
 800b396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39a:	4604      	mov	r4, r0
 800b39c:	460d      	mov	r5, r1
 800b39e:	f7f5 f933 	bl	8000608 <__aeabi_dmul>
 800b3a2:	a37b      	add	r3, pc, #492	; (adr r3, 800b590 <__ieee754_pow+0x710>)
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	f7f4 ff78 	bl	800029c <__adddf3>
 800b3ac:	4622      	mov	r2, r4
 800b3ae:	462b      	mov	r3, r5
 800b3b0:	f7f5 f92a 	bl	8000608 <__aeabi_dmul>
 800b3b4:	a378      	add	r3, pc, #480	; (adr r3, 800b598 <__ieee754_pow+0x718>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f7f4 ff6f 	bl	800029c <__adddf3>
 800b3be:	4622      	mov	r2, r4
 800b3c0:	462b      	mov	r3, r5
 800b3c2:	f7f5 f921 	bl	8000608 <__aeabi_dmul>
 800b3c6:	a376      	add	r3, pc, #472	; (adr r3, 800b5a0 <__ieee754_pow+0x720>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f7f4 ff66 	bl	800029c <__adddf3>
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	462b      	mov	r3, r5
 800b3d4:	f7f5 f918 	bl	8000608 <__aeabi_dmul>
 800b3d8:	a373      	add	r3, pc, #460	; (adr r3, 800b5a8 <__ieee754_pow+0x728>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f7f4 ff5d 	bl	800029c <__adddf3>
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	462b      	mov	r3, r5
 800b3e6:	f7f5 f90f 	bl	8000608 <__aeabi_dmul>
 800b3ea:	a371      	add	r3, pc, #452	; (adr r3, 800b5b0 <__ieee754_pow+0x730>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	f7f4 ff54 	bl	800029c <__adddf3>
 800b3f4:	4622      	mov	r2, r4
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	462b      	mov	r3, r5
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	4629      	mov	r1, r5
 800b400:	f7f5 f902 	bl	8000608 <__aeabi_dmul>
 800b404:	4602      	mov	r2, r0
 800b406:	460b      	mov	r3, r1
 800b408:	4630      	mov	r0, r6
 800b40a:	4639      	mov	r1, r7
 800b40c:	f7f5 f8fc 	bl	8000608 <__aeabi_dmul>
 800b410:	4642      	mov	r2, r8
 800b412:	4604      	mov	r4, r0
 800b414:	460d      	mov	r5, r1
 800b416:	464b      	mov	r3, r9
 800b418:	ec51 0b18 	vmov	r0, r1, d8
 800b41c:	f7f4 ff3e 	bl	800029c <__adddf3>
 800b420:	ec53 2b19 	vmov	r2, r3, d9
 800b424:	f7f5 f8f0 	bl	8000608 <__aeabi_dmul>
 800b428:	4622      	mov	r2, r4
 800b42a:	462b      	mov	r3, r5
 800b42c:	f7f4 ff36 	bl	800029c <__adddf3>
 800b430:	4642      	mov	r2, r8
 800b432:	4682      	mov	sl, r0
 800b434:	468b      	mov	fp, r1
 800b436:	464b      	mov	r3, r9
 800b438:	4640      	mov	r0, r8
 800b43a:	4649      	mov	r1, r9
 800b43c:	f7f5 f8e4 	bl	8000608 <__aeabi_dmul>
 800b440:	4b6b      	ldr	r3, [pc, #428]	; (800b5f0 <__ieee754_pow+0x770>)
 800b442:	2200      	movs	r2, #0
 800b444:	4606      	mov	r6, r0
 800b446:	460f      	mov	r7, r1
 800b448:	f7f4 ff28 	bl	800029c <__adddf3>
 800b44c:	4652      	mov	r2, sl
 800b44e:	465b      	mov	r3, fp
 800b450:	f7f4 ff24 	bl	800029c <__adddf3>
 800b454:	2000      	movs	r0, #0
 800b456:	4604      	mov	r4, r0
 800b458:	460d      	mov	r5, r1
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	4640      	mov	r0, r8
 800b460:	4649      	mov	r1, r9
 800b462:	f7f5 f8d1 	bl	8000608 <__aeabi_dmul>
 800b466:	4b62      	ldr	r3, [pc, #392]	; (800b5f0 <__ieee754_pow+0x770>)
 800b468:	4680      	mov	r8, r0
 800b46a:	4689      	mov	r9, r1
 800b46c:	2200      	movs	r2, #0
 800b46e:	4620      	mov	r0, r4
 800b470:	4629      	mov	r1, r5
 800b472:	f7f4 ff11 	bl	8000298 <__aeabi_dsub>
 800b476:	4632      	mov	r2, r6
 800b478:	463b      	mov	r3, r7
 800b47a:	f7f4 ff0d 	bl	8000298 <__aeabi_dsub>
 800b47e:	4602      	mov	r2, r0
 800b480:	460b      	mov	r3, r1
 800b482:	4650      	mov	r0, sl
 800b484:	4659      	mov	r1, fp
 800b486:	f7f4 ff07 	bl	8000298 <__aeabi_dsub>
 800b48a:	ec53 2b18 	vmov	r2, r3, d8
 800b48e:	f7f5 f8bb 	bl	8000608 <__aeabi_dmul>
 800b492:	4622      	mov	r2, r4
 800b494:	4606      	mov	r6, r0
 800b496:	460f      	mov	r7, r1
 800b498:	462b      	mov	r3, r5
 800b49a:	ec51 0b19 	vmov	r0, r1, d9
 800b49e:	f7f5 f8b3 	bl	8000608 <__aeabi_dmul>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	4639      	mov	r1, r7
 800b4aa:	f7f4 fef7 	bl	800029c <__adddf3>
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	460f      	mov	r7, r1
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	4640      	mov	r0, r8
 800b4b8:	4649      	mov	r1, r9
 800b4ba:	f7f4 feef 	bl	800029c <__adddf3>
 800b4be:	a33e      	add	r3, pc, #248	; (adr r3, 800b5b8 <__ieee754_pow+0x738>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	460d      	mov	r5, r1
 800b4ca:	f7f5 f89d 	bl	8000608 <__aeabi_dmul>
 800b4ce:	4642      	mov	r2, r8
 800b4d0:	ec41 0b18 	vmov	d8, r0, r1
 800b4d4:	464b      	mov	r3, r9
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	4629      	mov	r1, r5
 800b4da:	f7f4 fedd 	bl	8000298 <__aeabi_dsub>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	4639      	mov	r1, r7
 800b4e6:	f7f4 fed7 	bl	8000298 <__aeabi_dsub>
 800b4ea:	a335      	add	r3, pc, #212	; (adr r3, 800b5c0 <__ieee754_pow+0x740>)
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	f7f5 f88a 	bl	8000608 <__aeabi_dmul>
 800b4f4:	a334      	add	r3, pc, #208	; (adr r3, 800b5c8 <__ieee754_pow+0x748>)
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	460f      	mov	r7, r1
 800b4fe:	4620      	mov	r0, r4
 800b500:	4629      	mov	r1, r5
 800b502:	f7f5 f881 	bl	8000608 <__aeabi_dmul>
 800b506:	4602      	mov	r2, r0
 800b508:	460b      	mov	r3, r1
 800b50a:	4630      	mov	r0, r6
 800b50c:	4639      	mov	r1, r7
 800b50e:	f7f4 fec5 	bl	800029c <__adddf3>
 800b512:	9a07      	ldr	r2, [sp, #28]
 800b514:	4b37      	ldr	r3, [pc, #220]	; (800b5f4 <__ieee754_pow+0x774>)
 800b516:	4413      	add	r3, r2
 800b518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51c:	f7f4 febe 	bl	800029c <__adddf3>
 800b520:	4682      	mov	sl, r0
 800b522:	9805      	ldr	r0, [sp, #20]
 800b524:	468b      	mov	fp, r1
 800b526:	f7f5 f805 	bl	8000534 <__aeabi_i2d>
 800b52a:	9a07      	ldr	r2, [sp, #28]
 800b52c:	4b32      	ldr	r3, [pc, #200]	; (800b5f8 <__ieee754_pow+0x778>)
 800b52e:	4413      	add	r3, r2
 800b530:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b534:	4606      	mov	r6, r0
 800b536:	460f      	mov	r7, r1
 800b538:	4652      	mov	r2, sl
 800b53a:	465b      	mov	r3, fp
 800b53c:	ec51 0b18 	vmov	r0, r1, d8
 800b540:	f7f4 feac 	bl	800029c <__adddf3>
 800b544:	4642      	mov	r2, r8
 800b546:	464b      	mov	r3, r9
 800b548:	f7f4 fea8 	bl	800029c <__adddf3>
 800b54c:	4632      	mov	r2, r6
 800b54e:	463b      	mov	r3, r7
 800b550:	f7f4 fea4 	bl	800029c <__adddf3>
 800b554:	2000      	movs	r0, #0
 800b556:	4632      	mov	r2, r6
 800b558:	463b      	mov	r3, r7
 800b55a:	4604      	mov	r4, r0
 800b55c:	460d      	mov	r5, r1
 800b55e:	f7f4 fe9b 	bl	8000298 <__aeabi_dsub>
 800b562:	4642      	mov	r2, r8
 800b564:	464b      	mov	r3, r9
 800b566:	f7f4 fe97 	bl	8000298 <__aeabi_dsub>
 800b56a:	ec53 2b18 	vmov	r2, r3, d8
 800b56e:	f7f4 fe93 	bl	8000298 <__aeabi_dsub>
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	4650      	mov	r0, sl
 800b578:	4659      	mov	r1, fp
 800b57a:	e610      	b.n	800b19e <__ieee754_pow+0x31e>
 800b57c:	2401      	movs	r4, #1
 800b57e:	e6a1      	b.n	800b2c4 <__ieee754_pow+0x444>
 800b580:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b5d0 <__ieee754_pow+0x750>
 800b584:	e617      	b.n	800b1b6 <__ieee754_pow+0x336>
 800b586:	bf00      	nop
 800b588:	4a454eef 	.word	0x4a454eef
 800b58c:	3fca7e28 	.word	0x3fca7e28
 800b590:	93c9db65 	.word	0x93c9db65
 800b594:	3fcd864a 	.word	0x3fcd864a
 800b598:	a91d4101 	.word	0xa91d4101
 800b59c:	3fd17460 	.word	0x3fd17460
 800b5a0:	518f264d 	.word	0x518f264d
 800b5a4:	3fd55555 	.word	0x3fd55555
 800b5a8:	db6fabff 	.word	0xdb6fabff
 800b5ac:	3fdb6db6 	.word	0x3fdb6db6
 800b5b0:	33333303 	.word	0x33333303
 800b5b4:	3fe33333 	.word	0x3fe33333
 800b5b8:	e0000000 	.word	0xe0000000
 800b5bc:	3feec709 	.word	0x3feec709
 800b5c0:	dc3a03fd 	.word	0xdc3a03fd
 800b5c4:	3feec709 	.word	0x3feec709
 800b5c8:	145b01f5 	.word	0x145b01f5
 800b5cc:	be3e2fe0 	.word	0xbe3e2fe0
 800b5d0:	00000000 	.word	0x00000000
 800b5d4:	3ff00000 	.word	0x3ff00000
 800b5d8:	7ff00000 	.word	0x7ff00000
 800b5dc:	43400000 	.word	0x43400000
 800b5e0:	0003988e 	.word	0x0003988e
 800b5e4:	000bb679 	.word	0x000bb679
 800b5e8:	0800f3e8 	.word	0x0800f3e8
 800b5ec:	3ff00000 	.word	0x3ff00000
 800b5f0:	40080000 	.word	0x40080000
 800b5f4:	0800f408 	.word	0x0800f408
 800b5f8:	0800f3f8 	.word	0x0800f3f8
 800b5fc:	a3b5      	add	r3, pc, #724	; (adr r3, 800b8d4 <__ieee754_pow+0xa54>)
 800b5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b602:	4640      	mov	r0, r8
 800b604:	4649      	mov	r1, r9
 800b606:	f7f4 fe49 	bl	800029c <__adddf3>
 800b60a:	4622      	mov	r2, r4
 800b60c:	ec41 0b1a 	vmov	d10, r0, r1
 800b610:	462b      	mov	r3, r5
 800b612:	4630      	mov	r0, r6
 800b614:	4639      	mov	r1, r7
 800b616:	f7f4 fe3f 	bl	8000298 <__aeabi_dsub>
 800b61a:	4602      	mov	r2, r0
 800b61c:	460b      	mov	r3, r1
 800b61e:	ec51 0b1a 	vmov	r0, r1, d10
 800b622:	f7f5 fa81 	bl	8000b28 <__aeabi_dcmpgt>
 800b626:	2800      	cmp	r0, #0
 800b628:	f47f ae04 	bne.w	800b234 <__ieee754_pow+0x3b4>
 800b62c:	4aa4      	ldr	r2, [pc, #656]	; (800b8c0 <__ieee754_pow+0xa40>)
 800b62e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b632:	4293      	cmp	r3, r2
 800b634:	f340 8108 	ble.w	800b848 <__ieee754_pow+0x9c8>
 800b638:	151b      	asrs	r3, r3, #20
 800b63a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b63e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b642:	fa4a f303 	asr.w	r3, sl, r3
 800b646:	445b      	add	r3, fp
 800b648:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b64c:	4e9d      	ldr	r6, [pc, #628]	; (800b8c4 <__ieee754_pow+0xa44>)
 800b64e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b652:	4116      	asrs	r6, r2
 800b654:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b658:	2000      	movs	r0, #0
 800b65a:	ea23 0106 	bic.w	r1, r3, r6
 800b65e:	f1c2 0214 	rsb	r2, r2, #20
 800b662:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b666:	fa4a fa02 	asr.w	sl, sl, r2
 800b66a:	f1bb 0f00 	cmp.w	fp, #0
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	4620      	mov	r0, r4
 800b674:	4629      	mov	r1, r5
 800b676:	bfb8      	it	lt
 800b678:	f1ca 0a00 	rsblt	sl, sl, #0
 800b67c:	f7f4 fe0c 	bl	8000298 <__aeabi_dsub>
 800b680:	ec41 0b19 	vmov	d9, r0, r1
 800b684:	4642      	mov	r2, r8
 800b686:	464b      	mov	r3, r9
 800b688:	ec51 0b19 	vmov	r0, r1, d9
 800b68c:	f7f4 fe06 	bl	800029c <__adddf3>
 800b690:	a37b      	add	r3, pc, #492	; (adr r3, 800b880 <__ieee754_pow+0xa00>)
 800b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b696:	2000      	movs	r0, #0
 800b698:	4604      	mov	r4, r0
 800b69a:	460d      	mov	r5, r1
 800b69c:	f7f4 ffb4 	bl	8000608 <__aeabi_dmul>
 800b6a0:	ec53 2b19 	vmov	r2, r3, d9
 800b6a4:	4606      	mov	r6, r0
 800b6a6:	460f      	mov	r7, r1
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	f7f4 fdf4 	bl	8000298 <__aeabi_dsub>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4640      	mov	r0, r8
 800b6b6:	4649      	mov	r1, r9
 800b6b8:	f7f4 fdee 	bl	8000298 <__aeabi_dsub>
 800b6bc:	a372      	add	r3, pc, #456	; (adr r3, 800b888 <__ieee754_pow+0xa08>)
 800b6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c2:	f7f4 ffa1 	bl	8000608 <__aeabi_dmul>
 800b6c6:	a372      	add	r3, pc, #456	; (adr r3, 800b890 <__ieee754_pow+0xa10>)
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	4680      	mov	r8, r0
 800b6ce:	4689      	mov	r9, r1
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	f7f4 ff98 	bl	8000608 <__aeabi_dmul>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4640      	mov	r0, r8
 800b6de:	4649      	mov	r1, r9
 800b6e0:	f7f4 fddc 	bl	800029c <__adddf3>
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	460d      	mov	r5, r1
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	4639      	mov	r1, r7
 800b6f0:	f7f4 fdd4 	bl	800029c <__adddf3>
 800b6f4:	4632      	mov	r2, r6
 800b6f6:	463b      	mov	r3, r7
 800b6f8:	4680      	mov	r8, r0
 800b6fa:	4689      	mov	r9, r1
 800b6fc:	f7f4 fdcc 	bl	8000298 <__aeabi_dsub>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	4620      	mov	r0, r4
 800b706:	4629      	mov	r1, r5
 800b708:	f7f4 fdc6 	bl	8000298 <__aeabi_dsub>
 800b70c:	4642      	mov	r2, r8
 800b70e:	4606      	mov	r6, r0
 800b710:	460f      	mov	r7, r1
 800b712:	464b      	mov	r3, r9
 800b714:	4640      	mov	r0, r8
 800b716:	4649      	mov	r1, r9
 800b718:	f7f4 ff76 	bl	8000608 <__aeabi_dmul>
 800b71c:	a35e      	add	r3, pc, #376	; (adr r3, 800b898 <__ieee754_pow+0xa18>)
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	4604      	mov	r4, r0
 800b724:	460d      	mov	r5, r1
 800b726:	f7f4 ff6f 	bl	8000608 <__aeabi_dmul>
 800b72a:	a35d      	add	r3, pc, #372	; (adr r3, 800b8a0 <__ieee754_pow+0xa20>)
 800b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b730:	f7f4 fdb2 	bl	8000298 <__aeabi_dsub>
 800b734:	4622      	mov	r2, r4
 800b736:	462b      	mov	r3, r5
 800b738:	f7f4 ff66 	bl	8000608 <__aeabi_dmul>
 800b73c:	a35a      	add	r3, pc, #360	; (adr r3, 800b8a8 <__ieee754_pow+0xa28>)
 800b73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b742:	f7f4 fdab 	bl	800029c <__adddf3>
 800b746:	4622      	mov	r2, r4
 800b748:	462b      	mov	r3, r5
 800b74a:	f7f4 ff5d 	bl	8000608 <__aeabi_dmul>
 800b74e:	a358      	add	r3, pc, #352	; (adr r3, 800b8b0 <__ieee754_pow+0xa30>)
 800b750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b754:	f7f4 fda0 	bl	8000298 <__aeabi_dsub>
 800b758:	4622      	mov	r2, r4
 800b75a:	462b      	mov	r3, r5
 800b75c:	f7f4 ff54 	bl	8000608 <__aeabi_dmul>
 800b760:	a355      	add	r3, pc, #340	; (adr r3, 800b8b8 <__ieee754_pow+0xa38>)
 800b762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b766:	f7f4 fd99 	bl	800029c <__adddf3>
 800b76a:	4622      	mov	r2, r4
 800b76c:	462b      	mov	r3, r5
 800b76e:	f7f4 ff4b 	bl	8000608 <__aeabi_dmul>
 800b772:	4602      	mov	r2, r0
 800b774:	460b      	mov	r3, r1
 800b776:	4640      	mov	r0, r8
 800b778:	4649      	mov	r1, r9
 800b77a:	f7f4 fd8d 	bl	8000298 <__aeabi_dsub>
 800b77e:	4604      	mov	r4, r0
 800b780:	460d      	mov	r5, r1
 800b782:	4602      	mov	r2, r0
 800b784:	460b      	mov	r3, r1
 800b786:	4640      	mov	r0, r8
 800b788:	4649      	mov	r1, r9
 800b78a:	f7f4 ff3d 	bl	8000608 <__aeabi_dmul>
 800b78e:	2200      	movs	r2, #0
 800b790:	ec41 0b19 	vmov	d9, r0, r1
 800b794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b798:	4620      	mov	r0, r4
 800b79a:	4629      	mov	r1, r5
 800b79c:	f7f4 fd7c 	bl	8000298 <__aeabi_dsub>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	ec51 0b19 	vmov	r0, r1, d9
 800b7a8:	f7f5 f858 	bl	800085c <__aeabi_ddiv>
 800b7ac:	4632      	mov	r2, r6
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	460d      	mov	r5, r1
 800b7b2:	463b      	mov	r3, r7
 800b7b4:	4640      	mov	r0, r8
 800b7b6:	4649      	mov	r1, r9
 800b7b8:	f7f4 ff26 	bl	8000608 <__aeabi_dmul>
 800b7bc:	4632      	mov	r2, r6
 800b7be:	463b      	mov	r3, r7
 800b7c0:	f7f4 fd6c 	bl	800029c <__adddf3>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	4629      	mov	r1, r5
 800b7cc:	f7f4 fd64 	bl	8000298 <__aeabi_dsub>
 800b7d0:	4642      	mov	r2, r8
 800b7d2:	464b      	mov	r3, r9
 800b7d4:	f7f4 fd60 	bl	8000298 <__aeabi_dsub>
 800b7d8:	460b      	mov	r3, r1
 800b7da:	4602      	mov	r2, r0
 800b7dc:	493a      	ldr	r1, [pc, #232]	; (800b8c8 <__ieee754_pow+0xa48>)
 800b7de:	2000      	movs	r0, #0
 800b7e0:	f7f4 fd5a 	bl	8000298 <__aeabi_dsub>
 800b7e4:	ec41 0b10 	vmov	d0, r0, r1
 800b7e8:	ee10 3a90 	vmov	r3, s1
 800b7ec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b7f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7f4:	da2b      	bge.n	800b84e <__ieee754_pow+0x9ce>
 800b7f6:	4650      	mov	r0, sl
 800b7f8:	f000 fdc2 	bl	800c380 <scalbn>
 800b7fc:	ec51 0b10 	vmov	r0, r1, d0
 800b800:	ec53 2b18 	vmov	r2, r3, d8
 800b804:	f7ff bbed 	b.w	800afe2 <__ieee754_pow+0x162>
 800b808:	4b30      	ldr	r3, [pc, #192]	; (800b8cc <__ieee754_pow+0xa4c>)
 800b80a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b80e:	429e      	cmp	r6, r3
 800b810:	f77f af0c 	ble.w	800b62c <__ieee754_pow+0x7ac>
 800b814:	4b2e      	ldr	r3, [pc, #184]	; (800b8d0 <__ieee754_pow+0xa50>)
 800b816:	440b      	add	r3, r1
 800b818:	4303      	orrs	r3, r0
 800b81a:	d009      	beq.n	800b830 <__ieee754_pow+0x9b0>
 800b81c:	ec51 0b18 	vmov	r0, r1, d8
 800b820:	2200      	movs	r2, #0
 800b822:	2300      	movs	r3, #0
 800b824:	f7f5 f962 	bl	8000aec <__aeabi_dcmplt>
 800b828:	3800      	subs	r0, #0
 800b82a:	bf18      	it	ne
 800b82c:	2001      	movne	r0, #1
 800b82e:	e447      	b.n	800b0c0 <__ieee754_pow+0x240>
 800b830:	4622      	mov	r2, r4
 800b832:	462b      	mov	r3, r5
 800b834:	f7f4 fd30 	bl	8000298 <__aeabi_dsub>
 800b838:	4642      	mov	r2, r8
 800b83a:	464b      	mov	r3, r9
 800b83c:	f7f5 f96a 	bl	8000b14 <__aeabi_dcmpge>
 800b840:	2800      	cmp	r0, #0
 800b842:	f43f aef3 	beq.w	800b62c <__ieee754_pow+0x7ac>
 800b846:	e7e9      	b.n	800b81c <__ieee754_pow+0x99c>
 800b848:	f04f 0a00 	mov.w	sl, #0
 800b84c:	e71a      	b.n	800b684 <__ieee754_pow+0x804>
 800b84e:	ec51 0b10 	vmov	r0, r1, d0
 800b852:	4619      	mov	r1, r3
 800b854:	e7d4      	b.n	800b800 <__ieee754_pow+0x980>
 800b856:	491c      	ldr	r1, [pc, #112]	; (800b8c8 <__ieee754_pow+0xa48>)
 800b858:	2000      	movs	r0, #0
 800b85a:	f7ff bb30 	b.w	800aebe <__ieee754_pow+0x3e>
 800b85e:	2000      	movs	r0, #0
 800b860:	2100      	movs	r1, #0
 800b862:	f7ff bb2c 	b.w	800aebe <__ieee754_pow+0x3e>
 800b866:	4630      	mov	r0, r6
 800b868:	4639      	mov	r1, r7
 800b86a:	f7ff bb28 	b.w	800aebe <__ieee754_pow+0x3e>
 800b86e:	9204      	str	r2, [sp, #16]
 800b870:	f7ff bb7a 	b.w	800af68 <__ieee754_pow+0xe8>
 800b874:	2300      	movs	r3, #0
 800b876:	f7ff bb64 	b.w	800af42 <__ieee754_pow+0xc2>
 800b87a:	bf00      	nop
 800b87c:	f3af 8000 	nop.w
 800b880:	00000000 	.word	0x00000000
 800b884:	3fe62e43 	.word	0x3fe62e43
 800b888:	fefa39ef 	.word	0xfefa39ef
 800b88c:	3fe62e42 	.word	0x3fe62e42
 800b890:	0ca86c39 	.word	0x0ca86c39
 800b894:	be205c61 	.word	0xbe205c61
 800b898:	72bea4d0 	.word	0x72bea4d0
 800b89c:	3e663769 	.word	0x3e663769
 800b8a0:	c5d26bf1 	.word	0xc5d26bf1
 800b8a4:	3ebbbd41 	.word	0x3ebbbd41
 800b8a8:	af25de2c 	.word	0xaf25de2c
 800b8ac:	3f11566a 	.word	0x3f11566a
 800b8b0:	16bebd93 	.word	0x16bebd93
 800b8b4:	3f66c16c 	.word	0x3f66c16c
 800b8b8:	5555553e 	.word	0x5555553e
 800b8bc:	3fc55555 	.word	0x3fc55555
 800b8c0:	3fe00000 	.word	0x3fe00000
 800b8c4:	000fffff 	.word	0x000fffff
 800b8c8:	3ff00000 	.word	0x3ff00000
 800b8cc:	4090cbff 	.word	0x4090cbff
 800b8d0:	3f6f3400 	.word	0x3f6f3400
 800b8d4:	652b82fe 	.word	0x652b82fe
 800b8d8:	3c971547 	.word	0x3c971547

0800b8dc <__ieee754_sqrt>:
 800b8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e0:	ec55 4b10 	vmov	r4, r5, d0
 800b8e4:	4e55      	ldr	r6, [pc, #340]	; (800ba3c <__ieee754_sqrt+0x160>)
 800b8e6:	43ae      	bics	r6, r5
 800b8e8:	ee10 0a10 	vmov	r0, s0
 800b8ec:	ee10 3a10 	vmov	r3, s0
 800b8f0:	462a      	mov	r2, r5
 800b8f2:	4629      	mov	r1, r5
 800b8f4:	d110      	bne.n	800b918 <__ieee754_sqrt+0x3c>
 800b8f6:	ee10 2a10 	vmov	r2, s0
 800b8fa:	462b      	mov	r3, r5
 800b8fc:	f7f4 fe84 	bl	8000608 <__aeabi_dmul>
 800b900:	4602      	mov	r2, r0
 800b902:	460b      	mov	r3, r1
 800b904:	4620      	mov	r0, r4
 800b906:	4629      	mov	r1, r5
 800b908:	f7f4 fcc8 	bl	800029c <__adddf3>
 800b90c:	4604      	mov	r4, r0
 800b90e:	460d      	mov	r5, r1
 800b910:	ec45 4b10 	vmov	d0, r4, r5
 800b914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b918:	2d00      	cmp	r5, #0
 800b91a:	dc10      	bgt.n	800b93e <__ieee754_sqrt+0x62>
 800b91c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b920:	4330      	orrs	r0, r6
 800b922:	d0f5      	beq.n	800b910 <__ieee754_sqrt+0x34>
 800b924:	b15d      	cbz	r5, 800b93e <__ieee754_sqrt+0x62>
 800b926:	ee10 2a10 	vmov	r2, s0
 800b92a:	462b      	mov	r3, r5
 800b92c:	ee10 0a10 	vmov	r0, s0
 800b930:	f7f4 fcb2 	bl	8000298 <__aeabi_dsub>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	f7f4 ff90 	bl	800085c <__aeabi_ddiv>
 800b93c:	e7e6      	b.n	800b90c <__ieee754_sqrt+0x30>
 800b93e:	1512      	asrs	r2, r2, #20
 800b940:	d074      	beq.n	800ba2c <__ieee754_sqrt+0x150>
 800b942:	07d4      	lsls	r4, r2, #31
 800b944:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b948:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b94c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b950:	bf5e      	ittt	pl
 800b952:	0fda      	lsrpl	r2, r3, #31
 800b954:	005b      	lslpl	r3, r3, #1
 800b956:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b95a:	2400      	movs	r4, #0
 800b95c:	0fda      	lsrs	r2, r3, #31
 800b95e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b962:	107f      	asrs	r7, r7, #1
 800b964:	005b      	lsls	r3, r3, #1
 800b966:	2516      	movs	r5, #22
 800b968:	4620      	mov	r0, r4
 800b96a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b96e:	1886      	adds	r6, r0, r2
 800b970:	428e      	cmp	r6, r1
 800b972:	bfde      	ittt	le
 800b974:	1b89      	suble	r1, r1, r6
 800b976:	18b0      	addle	r0, r6, r2
 800b978:	18a4      	addle	r4, r4, r2
 800b97a:	0049      	lsls	r1, r1, #1
 800b97c:	3d01      	subs	r5, #1
 800b97e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b982:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b986:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b98a:	d1f0      	bne.n	800b96e <__ieee754_sqrt+0x92>
 800b98c:	462a      	mov	r2, r5
 800b98e:	f04f 0e20 	mov.w	lr, #32
 800b992:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b996:	4281      	cmp	r1, r0
 800b998:	eb06 0c05 	add.w	ip, r6, r5
 800b99c:	dc02      	bgt.n	800b9a4 <__ieee754_sqrt+0xc8>
 800b99e:	d113      	bne.n	800b9c8 <__ieee754_sqrt+0xec>
 800b9a0:	459c      	cmp	ip, r3
 800b9a2:	d811      	bhi.n	800b9c8 <__ieee754_sqrt+0xec>
 800b9a4:	f1bc 0f00 	cmp.w	ip, #0
 800b9a8:	eb0c 0506 	add.w	r5, ip, r6
 800b9ac:	da43      	bge.n	800ba36 <__ieee754_sqrt+0x15a>
 800b9ae:	2d00      	cmp	r5, #0
 800b9b0:	db41      	blt.n	800ba36 <__ieee754_sqrt+0x15a>
 800b9b2:	f100 0801 	add.w	r8, r0, #1
 800b9b6:	1a09      	subs	r1, r1, r0
 800b9b8:	459c      	cmp	ip, r3
 800b9ba:	bf88      	it	hi
 800b9bc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b9c0:	eba3 030c 	sub.w	r3, r3, ip
 800b9c4:	4432      	add	r2, r6
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b9cc:	f1be 0e01 	subs.w	lr, lr, #1
 800b9d0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b9d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b9d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b9dc:	d1db      	bne.n	800b996 <__ieee754_sqrt+0xba>
 800b9de:	430b      	orrs	r3, r1
 800b9e0:	d006      	beq.n	800b9f0 <__ieee754_sqrt+0x114>
 800b9e2:	1c50      	adds	r0, r2, #1
 800b9e4:	bf13      	iteet	ne
 800b9e6:	3201      	addne	r2, #1
 800b9e8:	3401      	addeq	r4, #1
 800b9ea:	4672      	moveq	r2, lr
 800b9ec:	f022 0201 	bicne.w	r2, r2, #1
 800b9f0:	1063      	asrs	r3, r4, #1
 800b9f2:	0852      	lsrs	r2, r2, #1
 800b9f4:	07e1      	lsls	r1, r4, #31
 800b9f6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b9fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b9fe:	bf48      	it	mi
 800ba00:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ba04:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ba08:	4614      	mov	r4, r2
 800ba0a:	e781      	b.n	800b910 <__ieee754_sqrt+0x34>
 800ba0c:	0ad9      	lsrs	r1, r3, #11
 800ba0e:	3815      	subs	r0, #21
 800ba10:	055b      	lsls	r3, r3, #21
 800ba12:	2900      	cmp	r1, #0
 800ba14:	d0fa      	beq.n	800ba0c <__ieee754_sqrt+0x130>
 800ba16:	02cd      	lsls	r5, r1, #11
 800ba18:	d50a      	bpl.n	800ba30 <__ieee754_sqrt+0x154>
 800ba1a:	f1c2 0420 	rsb	r4, r2, #32
 800ba1e:	fa23 f404 	lsr.w	r4, r3, r4
 800ba22:	1e55      	subs	r5, r2, #1
 800ba24:	4093      	lsls	r3, r2
 800ba26:	4321      	orrs	r1, r4
 800ba28:	1b42      	subs	r2, r0, r5
 800ba2a:	e78a      	b.n	800b942 <__ieee754_sqrt+0x66>
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	e7f0      	b.n	800ba12 <__ieee754_sqrt+0x136>
 800ba30:	0049      	lsls	r1, r1, #1
 800ba32:	3201      	adds	r2, #1
 800ba34:	e7ef      	b.n	800ba16 <__ieee754_sqrt+0x13a>
 800ba36:	4680      	mov	r8, r0
 800ba38:	e7bd      	b.n	800b9b6 <__ieee754_sqrt+0xda>
 800ba3a:	bf00      	nop
 800ba3c:	7ff00000 	.word	0x7ff00000

0800ba40 <__ieee754_rem_pio2f>:
 800ba40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba42:	ee10 6a10 	vmov	r6, s0
 800ba46:	4b8e      	ldr	r3, [pc, #568]	; (800bc80 <__ieee754_rem_pio2f+0x240>)
 800ba48:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ba4c:	429d      	cmp	r5, r3
 800ba4e:	b087      	sub	sp, #28
 800ba50:	eef0 7a40 	vmov.f32	s15, s0
 800ba54:	4604      	mov	r4, r0
 800ba56:	dc05      	bgt.n	800ba64 <__ieee754_rem_pio2f+0x24>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	ed80 0a00 	vstr	s0, [r0]
 800ba5e:	6043      	str	r3, [r0, #4]
 800ba60:	2000      	movs	r0, #0
 800ba62:	e01a      	b.n	800ba9a <__ieee754_rem_pio2f+0x5a>
 800ba64:	4b87      	ldr	r3, [pc, #540]	; (800bc84 <__ieee754_rem_pio2f+0x244>)
 800ba66:	429d      	cmp	r5, r3
 800ba68:	dc46      	bgt.n	800baf8 <__ieee754_rem_pio2f+0xb8>
 800ba6a:	2e00      	cmp	r6, #0
 800ba6c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800bc88 <__ieee754_rem_pio2f+0x248>
 800ba70:	4b86      	ldr	r3, [pc, #536]	; (800bc8c <__ieee754_rem_pio2f+0x24c>)
 800ba72:	f025 050f 	bic.w	r5, r5, #15
 800ba76:	dd1f      	ble.n	800bab8 <__ieee754_rem_pio2f+0x78>
 800ba78:	429d      	cmp	r5, r3
 800ba7a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ba7e:	d00e      	beq.n	800ba9e <__ieee754_rem_pio2f+0x5e>
 800ba80:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800bc90 <__ieee754_rem_pio2f+0x250>
 800ba84:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800ba88:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ba8c:	ed80 0a00 	vstr	s0, [r0]
 800ba90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba94:	2001      	movs	r0, #1
 800ba96:	edc4 7a01 	vstr	s15, [r4, #4]
 800ba9a:	b007      	add	sp, #28
 800ba9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba9e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800bc94 <__ieee754_rem_pio2f+0x254>
 800baa2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800bc98 <__ieee754_rem_pio2f+0x258>
 800baa6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800baaa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800baae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bab2:	edc0 6a00 	vstr	s13, [r0]
 800bab6:	e7eb      	b.n	800ba90 <__ieee754_rem_pio2f+0x50>
 800bab8:	429d      	cmp	r5, r3
 800baba:	ee77 7a80 	vadd.f32	s15, s15, s0
 800babe:	d00e      	beq.n	800bade <__ieee754_rem_pio2f+0x9e>
 800bac0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bc90 <__ieee754_rem_pio2f+0x250>
 800bac4:	ee37 0a87 	vadd.f32	s0, s15, s14
 800bac8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bacc:	ed80 0a00 	vstr	s0, [r0]
 800bad0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bad4:	f04f 30ff 	mov.w	r0, #4294967295
 800bad8:	edc4 7a01 	vstr	s15, [r4, #4]
 800badc:	e7dd      	b.n	800ba9a <__ieee754_rem_pio2f+0x5a>
 800bade:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800bc94 <__ieee754_rem_pio2f+0x254>
 800bae2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800bc98 <__ieee754_rem_pio2f+0x258>
 800bae6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800baea:	ee77 6a87 	vadd.f32	s13, s15, s14
 800baee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800baf2:	edc0 6a00 	vstr	s13, [r0]
 800baf6:	e7eb      	b.n	800bad0 <__ieee754_rem_pio2f+0x90>
 800baf8:	4b68      	ldr	r3, [pc, #416]	; (800bc9c <__ieee754_rem_pio2f+0x25c>)
 800bafa:	429d      	cmp	r5, r3
 800bafc:	dc72      	bgt.n	800bbe4 <__ieee754_rem_pio2f+0x1a4>
 800bafe:	f000 fde1 	bl	800c6c4 <fabsf>
 800bb02:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800bca0 <__ieee754_rem_pio2f+0x260>
 800bb06:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bb0a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bb0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb16:	ee17 0a90 	vmov	r0, s15
 800bb1a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800bc88 <__ieee754_rem_pio2f+0x248>
 800bb1e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bb22:	281f      	cmp	r0, #31
 800bb24:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800bc90 <__ieee754_rem_pio2f+0x250>
 800bb28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb2c:	eeb1 6a47 	vneg.f32	s12, s14
 800bb30:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bb34:	ee16 2a90 	vmov	r2, s13
 800bb38:	dc1c      	bgt.n	800bb74 <__ieee754_rem_pio2f+0x134>
 800bb3a:	495a      	ldr	r1, [pc, #360]	; (800bca4 <__ieee754_rem_pio2f+0x264>)
 800bb3c:	1e47      	subs	r7, r0, #1
 800bb3e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800bb42:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800bb46:	428b      	cmp	r3, r1
 800bb48:	d014      	beq.n	800bb74 <__ieee754_rem_pio2f+0x134>
 800bb4a:	6022      	str	r2, [r4, #0]
 800bb4c:	ed94 7a00 	vldr	s14, [r4]
 800bb50:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bb54:	2e00      	cmp	r6, #0
 800bb56:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bb5a:	ed84 0a01 	vstr	s0, [r4, #4]
 800bb5e:	da9c      	bge.n	800ba9a <__ieee754_rem_pio2f+0x5a>
 800bb60:	eeb1 7a47 	vneg.f32	s14, s14
 800bb64:	eeb1 0a40 	vneg.f32	s0, s0
 800bb68:	ed84 7a00 	vstr	s14, [r4]
 800bb6c:	ed84 0a01 	vstr	s0, [r4, #4]
 800bb70:	4240      	negs	r0, r0
 800bb72:	e792      	b.n	800ba9a <__ieee754_rem_pio2f+0x5a>
 800bb74:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bb78:	15eb      	asrs	r3, r5, #23
 800bb7a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800bb7e:	2d08      	cmp	r5, #8
 800bb80:	dde3      	ble.n	800bb4a <__ieee754_rem_pio2f+0x10a>
 800bb82:	eddf 7a44 	vldr	s15, [pc, #272]	; 800bc94 <__ieee754_rem_pio2f+0x254>
 800bb86:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bc98 <__ieee754_rem_pio2f+0x258>
 800bb8a:	eef0 6a40 	vmov.f32	s13, s0
 800bb8e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800bb92:	ee30 0a66 	vsub.f32	s0, s0, s13
 800bb96:	eea6 0a27 	vfma.f32	s0, s12, s15
 800bb9a:	eef0 7a40 	vmov.f32	s15, s0
 800bb9e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bba2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bba6:	ee15 2a90 	vmov	r2, s11
 800bbaa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bbae:	1a5b      	subs	r3, r3, r1
 800bbb0:	2b19      	cmp	r3, #25
 800bbb2:	dc04      	bgt.n	800bbbe <__ieee754_rem_pio2f+0x17e>
 800bbb4:	edc4 5a00 	vstr	s11, [r4]
 800bbb8:	eeb0 0a66 	vmov.f32	s0, s13
 800bbbc:	e7c6      	b.n	800bb4c <__ieee754_rem_pio2f+0x10c>
 800bbbe:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800bca8 <__ieee754_rem_pio2f+0x268>
 800bbc2:	eeb0 0a66 	vmov.f32	s0, s13
 800bbc6:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bbca:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bbce:	eddf 6a37 	vldr	s13, [pc, #220]	; 800bcac <__ieee754_rem_pio2f+0x26c>
 800bbd2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bbd6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bbda:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bbde:	ed84 7a00 	vstr	s14, [r4]
 800bbe2:	e7b3      	b.n	800bb4c <__ieee754_rem_pio2f+0x10c>
 800bbe4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bbe8:	db06      	blt.n	800bbf8 <__ieee754_rem_pio2f+0x1b8>
 800bbea:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bbee:	edc0 7a01 	vstr	s15, [r0, #4]
 800bbf2:	edc0 7a00 	vstr	s15, [r0]
 800bbf6:	e733      	b.n	800ba60 <__ieee754_rem_pio2f+0x20>
 800bbf8:	15ea      	asrs	r2, r5, #23
 800bbfa:	3a86      	subs	r2, #134	; 0x86
 800bbfc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bc00:	ee07 3a90 	vmov	s15, r3
 800bc04:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bc08:	eddf 6a29 	vldr	s13, [pc, #164]	; 800bcb0 <__ieee754_rem_pio2f+0x270>
 800bc0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc14:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bc18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc1c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bc20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc28:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bc2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc30:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc38:	edcd 7a05 	vstr	s15, [sp, #20]
 800bc3c:	d11e      	bne.n	800bc7c <__ieee754_rem_pio2f+0x23c>
 800bc3e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc46:	bf14      	ite	ne
 800bc48:	2302      	movne	r3, #2
 800bc4a:	2301      	moveq	r3, #1
 800bc4c:	4919      	ldr	r1, [pc, #100]	; (800bcb4 <__ieee754_rem_pio2f+0x274>)
 800bc4e:	9101      	str	r1, [sp, #4]
 800bc50:	2102      	movs	r1, #2
 800bc52:	9100      	str	r1, [sp, #0]
 800bc54:	a803      	add	r0, sp, #12
 800bc56:	4621      	mov	r1, r4
 800bc58:	f000 f88e 	bl	800bd78 <__kernel_rem_pio2f>
 800bc5c:	2e00      	cmp	r6, #0
 800bc5e:	f6bf af1c 	bge.w	800ba9a <__ieee754_rem_pio2f+0x5a>
 800bc62:	edd4 7a00 	vldr	s15, [r4]
 800bc66:	eef1 7a67 	vneg.f32	s15, s15
 800bc6a:	edc4 7a00 	vstr	s15, [r4]
 800bc6e:	edd4 7a01 	vldr	s15, [r4, #4]
 800bc72:	eef1 7a67 	vneg.f32	s15, s15
 800bc76:	edc4 7a01 	vstr	s15, [r4, #4]
 800bc7a:	e779      	b.n	800bb70 <__ieee754_rem_pio2f+0x130>
 800bc7c:	2303      	movs	r3, #3
 800bc7e:	e7e5      	b.n	800bc4c <__ieee754_rem_pio2f+0x20c>
 800bc80:	3f490fd8 	.word	0x3f490fd8
 800bc84:	4016cbe3 	.word	0x4016cbe3
 800bc88:	3fc90f80 	.word	0x3fc90f80
 800bc8c:	3fc90fd0 	.word	0x3fc90fd0
 800bc90:	37354443 	.word	0x37354443
 800bc94:	37354400 	.word	0x37354400
 800bc98:	2e85a308 	.word	0x2e85a308
 800bc9c:	43490f80 	.word	0x43490f80
 800bca0:	3f22f984 	.word	0x3f22f984
 800bca4:	0800f418 	.word	0x0800f418
 800bca8:	2e85a300 	.word	0x2e85a300
 800bcac:	248d3132 	.word	0x248d3132
 800bcb0:	43800000 	.word	0x43800000
 800bcb4:	0800f498 	.word	0x0800f498

0800bcb8 <__kernel_cosf>:
 800bcb8:	ee10 3a10 	vmov	r3, s0
 800bcbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcc0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bcc4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bcc8:	da05      	bge.n	800bcd6 <__kernel_cosf+0x1e>
 800bcca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bcce:	ee17 2a90 	vmov	r2, s15
 800bcd2:	2a00      	cmp	r2, #0
 800bcd4:	d03d      	beq.n	800bd52 <__kernel_cosf+0x9a>
 800bcd6:	ee60 5a00 	vmul.f32	s11, s0, s0
 800bcda:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bd58 <__kernel_cosf+0xa0>
 800bcde:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800bd5c <__kernel_cosf+0xa4>
 800bce2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800bd60 <__kernel_cosf+0xa8>
 800bce6:	4a1f      	ldr	r2, [pc, #124]	; (800bd64 <__kernel_cosf+0xac>)
 800bce8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bcec:	4293      	cmp	r3, r2
 800bcee:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800bd68 <__kernel_cosf+0xb0>
 800bcf2:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bcf6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800bd6c <__kernel_cosf+0xb4>
 800bcfa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bcfe:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800bd70 <__kernel_cosf+0xb8>
 800bd02:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bd06:	eeb0 7a66 	vmov.f32	s14, s13
 800bd0a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800bd0e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bd12:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800bd16:	ee67 6a25 	vmul.f32	s13, s14, s11
 800bd1a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800bd1e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bd22:	dc04      	bgt.n	800bd2e <__kernel_cosf+0x76>
 800bd24:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800bd28:	ee36 0a47 	vsub.f32	s0, s12, s14
 800bd2c:	4770      	bx	lr
 800bd2e:	4a11      	ldr	r2, [pc, #68]	; (800bd74 <__kernel_cosf+0xbc>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	bfda      	itte	le
 800bd34:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800bd38:	ee06 3a90 	vmovle	s13, r3
 800bd3c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800bd40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bd44:	ee36 0a66 	vsub.f32	s0, s12, s13
 800bd48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd4c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bd50:	4770      	bx	lr
 800bd52:	eeb0 0a46 	vmov.f32	s0, s12
 800bd56:	4770      	bx	lr
 800bd58:	ad47d74e 	.word	0xad47d74e
 800bd5c:	310f74f6 	.word	0x310f74f6
 800bd60:	3d2aaaab 	.word	0x3d2aaaab
 800bd64:	3e999999 	.word	0x3e999999
 800bd68:	b493f27c 	.word	0xb493f27c
 800bd6c:	37d00d01 	.word	0x37d00d01
 800bd70:	bab60b61 	.word	0xbab60b61
 800bd74:	3f480000 	.word	0x3f480000

0800bd78 <__kernel_rem_pio2f>:
 800bd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7c:	ed2d 8b04 	vpush	{d8-d9}
 800bd80:	b0d9      	sub	sp, #356	; 0x164
 800bd82:	4688      	mov	r8, r1
 800bd84:	9002      	str	r0, [sp, #8]
 800bd86:	49bb      	ldr	r1, [pc, #748]	; (800c074 <__kernel_rem_pio2f+0x2fc>)
 800bd88:	9866      	ldr	r0, [sp, #408]	; 0x198
 800bd8a:	9301      	str	r3, [sp, #4]
 800bd8c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800bd90:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800bd94:	1e59      	subs	r1, r3, #1
 800bd96:	1d13      	adds	r3, r2, #4
 800bd98:	db27      	blt.n	800bdea <__kernel_rem_pio2f+0x72>
 800bd9a:	f1b2 0b03 	subs.w	fp, r2, #3
 800bd9e:	bf48      	it	mi
 800bda0:	f102 0b04 	addmi.w	fp, r2, #4
 800bda4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800bda8:	1c45      	adds	r5, r0, #1
 800bdaa:	00ec      	lsls	r4, r5, #3
 800bdac:	1a47      	subs	r7, r0, r1
 800bdae:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800c084 <__kernel_rem_pio2f+0x30c>
 800bdb2:	9403      	str	r4, [sp, #12]
 800bdb4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800bdb8:	eb0a 0c01 	add.w	ip, sl, r1
 800bdbc:	ae1c      	add	r6, sp, #112	; 0x70
 800bdbe:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800bdc2:	2400      	movs	r4, #0
 800bdc4:	4564      	cmp	r4, ip
 800bdc6:	dd12      	ble.n	800bdee <__kernel_rem_pio2f+0x76>
 800bdc8:	9b01      	ldr	r3, [sp, #4]
 800bdca:	ac1c      	add	r4, sp, #112	; 0x70
 800bdcc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800bdd0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800bdd4:	f04f 0c00 	mov.w	ip, #0
 800bdd8:	45d4      	cmp	ip, sl
 800bdda:	dc27      	bgt.n	800be2c <__kernel_rem_pio2f+0xb4>
 800bddc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800bde0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800c084 <__kernel_rem_pio2f+0x30c>
 800bde4:	4627      	mov	r7, r4
 800bde6:	2600      	movs	r6, #0
 800bde8:	e016      	b.n	800be18 <__kernel_rem_pio2f+0xa0>
 800bdea:	2000      	movs	r0, #0
 800bdec:	e7dc      	b.n	800bda8 <__kernel_rem_pio2f+0x30>
 800bdee:	42e7      	cmn	r7, r4
 800bdf0:	bf5d      	ittte	pl
 800bdf2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800bdf6:	ee07 3a90 	vmovpl	s15, r3
 800bdfa:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bdfe:	eef0 7a47 	vmovmi.f32	s15, s14
 800be02:	ece6 7a01 	vstmia	r6!, {s15}
 800be06:	3401      	adds	r4, #1
 800be08:	e7dc      	b.n	800bdc4 <__kernel_rem_pio2f+0x4c>
 800be0a:	ecf9 6a01 	vldmia	r9!, {s13}
 800be0e:	ed97 7a00 	vldr	s14, [r7]
 800be12:	eee6 7a87 	vfma.f32	s15, s13, s14
 800be16:	3601      	adds	r6, #1
 800be18:	428e      	cmp	r6, r1
 800be1a:	f1a7 0704 	sub.w	r7, r7, #4
 800be1e:	ddf4      	ble.n	800be0a <__kernel_rem_pio2f+0x92>
 800be20:	eceb 7a01 	vstmia	fp!, {s15}
 800be24:	f10c 0c01 	add.w	ip, ip, #1
 800be28:	3404      	adds	r4, #4
 800be2a:	e7d5      	b.n	800bdd8 <__kernel_rem_pio2f+0x60>
 800be2c:	ab08      	add	r3, sp, #32
 800be2e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800be32:	eddf 8a93 	vldr	s17, [pc, #588]	; 800c080 <__kernel_rem_pio2f+0x308>
 800be36:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800c07c <__kernel_rem_pio2f+0x304>
 800be3a:	9304      	str	r3, [sp, #16]
 800be3c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800be40:	4656      	mov	r6, sl
 800be42:	00b3      	lsls	r3, r6, #2
 800be44:	9305      	str	r3, [sp, #20]
 800be46:	ab58      	add	r3, sp, #352	; 0x160
 800be48:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800be4c:	ac08      	add	r4, sp, #32
 800be4e:	ab44      	add	r3, sp, #272	; 0x110
 800be50:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800be54:	46a4      	mov	ip, r4
 800be56:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800be5a:	4637      	mov	r7, r6
 800be5c:	2f00      	cmp	r7, #0
 800be5e:	f1a0 0004 	sub.w	r0, r0, #4
 800be62:	dc4f      	bgt.n	800bf04 <__kernel_rem_pio2f+0x18c>
 800be64:	4628      	mov	r0, r5
 800be66:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800be6a:	f000 fc75 	bl	800c758 <scalbnf>
 800be6e:	eeb0 8a40 	vmov.f32	s16, s0
 800be72:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800be76:	ee28 0a00 	vmul.f32	s0, s16, s0
 800be7a:	f000 fc2b 	bl	800c6d4 <floorf>
 800be7e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800be82:	eea0 8a67 	vfms.f32	s16, s0, s15
 800be86:	2d00      	cmp	r5, #0
 800be88:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800be8c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800be90:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800be94:	ee17 9a90 	vmov	r9, s15
 800be98:	ee38 8a40 	vsub.f32	s16, s16, s0
 800be9c:	dd44      	ble.n	800bf28 <__kernel_rem_pio2f+0x1b0>
 800be9e:	f106 3cff 	add.w	ip, r6, #4294967295
 800bea2:	ab08      	add	r3, sp, #32
 800bea4:	f1c5 0e08 	rsb	lr, r5, #8
 800bea8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800beac:	fa47 f00e 	asr.w	r0, r7, lr
 800beb0:	4481      	add	r9, r0
 800beb2:	fa00 f00e 	lsl.w	r0, r0, lr
 800beb6:	1a3f      	subs	r7, r7, r0
 800beb8:	f1c5 0007 	rsb	r0, r5, #7
 800bebc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800bec0:	4107      	asrs	r7, r0
 800bec2:	2f00      	cmp	r7, #0
 800bec4:	dd3f      	ble.n	800bf46 <__kernel_rem_pio2f+0x1ce>
 800bec6:	f04f 0e00 	mov.w	lr, #0
 800beca:	f109 0901 	add.w	r9, r9, #1
 800bece:	4673      	mov	r3, lr
 800bed0:	4576      	cmp	r6, lr
 800bed2:	dc6b      	bgt.n	800bfac <__kernel_rem_pio2f+0x234>
 800bed4:	2d00      	cmp	r5, #0
 800bed6:	dd04      	ble.n	800bee2 <__kernel_rem_pio2f+0x16a>
 800bed8:	2d01      	cmp	r5, #1
 800beda:	d078      	beq.n	800bfce <__kernel_rem_pio2f+0x256>
 800bedc:	2d02      	cmp	r5, #2
 800bede:	f000 8081 	beq.w	800bfe4 <__kernel_rem_pio2f+0x26c>
 800bee2:	2f02      	cmp	r7, #2
 800bee4:	d12f      	bne.n	800bf46 <__kernel_rem_pio2f+0x1ce>
 800bee6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800beea:	ee30 8a48 	vsub.f32	s16, s0, s16
 800beee:	b353      	cbz	r3, 800bf46 <__kernel_rem_pio2f+0x1ce>
 800bef0:	4628      	mov	r0, r5
 800bef2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800bef6:	f000 fc2f 	bl	800c758 <scalbnf>
 800befa:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800befe:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bf02:	e020      	b.n	800bf46 <__kernel_rem_pio2f+0x1ce>
 800bf04:	ee60 7a28 	vmul.f32	s15, s0, s17
 800bf08:	3f01      	subs	r7, #1
 800bf0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf12:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bf16:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bf1a:	ecac 0a01 	vstmia	ip!, {s0}
 800bf1e:	ed90 0a00 	vldr	s0, [r0]
 800bf22:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bf26:	e799      	b.n	800be5c <__kernel_rem_pio2f+0xe4>
 800bf28:	d105      	bne.n	800bf36 <__kernel_rem_pio2f+0x1be>
 800bf2a:	1e70      	subs	r0, r6, #1
 800bf2c:	ab08      	add	r3, sp, #32
 800bf2e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800bf32:	11ff      	asrs	r7, r7, #7
 800bf34:	e7c5      	b.n	800bec2 <__kernel_rem_pio2f+0x14a>
 800bf36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bf3a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bf3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf42:	da31      	bge.n	800bfa8 <__kernel_rem_pio2f+0x230>
 800bf44:	2700      	movs	r7, #0
 800bf46:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bf4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf4e:	f040 809b 	bne.w	800c088 <__kernel_rem_pio2f+0x310>
 800bf52:	1e74      	subs	r4, r6, #1
 800bf54:	46a4      	mov	ip, r4
 800bf56:	2000      	movs	r0, #0
 800bf58:	45d4      	cmp	ip, sl
 800bf5a:	da4a      	bge.n	800bff2 <__kernel_rem_pio2f+0x27a>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d07a      	beq.n	800c056 <__kernel_rem_pio2f+0x2de>
 800bf60:	ab08      	add	r3, sp, #32
 800bf62:	3d08      	subs	r5, #8
 800bf64:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 8081 	beq.w	800c070 <__kernel_rem_pio2f+0x2f8>
 800bf6e:	4628      	mov	r0, r5
 800bf70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bf74:	00a5      	lsls	r5, r4, #2
 800bf76:	f000 fbef 	bl	800c758 <scalbnf>
 800bf7a:	aa44      	add	r2, sp, #272	; 0x110
 800bf7c:	1d2b      	adds	r3, r5, #4
 800bf7e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800c080 <__kernel_rem_pio2f+0x308>
 800bf82:	18d1      	adds	r1, r2, r3
 800bf84:	4622      	mov	r2, r4
 800bf86:	2a00      	cmp	r2, #0
 800bf88:	f280 80ae 	bge.w	800c0e8 <__kernel_rem_pio2f+0x370>
 800bf8c:	4622      	mov	r2, r4
 800bf8e:	2a00      	cmp	r2, #0
 800bf90:	f2c0 80cc 	blt.w	800c12c <__kernel_rem_pio2f+0x3b4>
 800bf94:	a944      	add	r1, sp, #272	; 0x110
 800bf96:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800bf9a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800c078 <__kernel_rem_pio2f+0x300>
 800bf9e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800c084 <__kernel_rem_pio2f+0x30c>
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	1aa1      	subs	r1, r4, r2
 800bfa6:	e0b6      	b.n	800c116 <__kernel_rem_pio2f+0x39e>
 800bfa8:	2702      	movs	r7, #2
 800bfaa:	e78c      	b.n	800bec6 <__kernel_rem_pio2f+0x14e>
 800bfac:	6820      	ldr	r0, [r4, #0]
 800bfae:	b94b      	cbnz	r3, 800bfc4 <__kernel_rem_pio2f+0x24c>
 800bfb0:	b118      	cbz	r0, 800bfba <__kernel_rem_pio2f+0x242>
 800bfb2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800bfb6:	6020      	str	r0, [r4, #0]
 800bfb8:	2001      	movs	r0, #1
 800bfba:	f10e 0e01 	add.w	lr, lr, #1
 800bfbe:	3404      	adds	r4, #4
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	e785      	b.n	800bed0 <__kernel_rem_pio2f+0x158>
 800bfc4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800bfc8:	6020      	str	r0, [r4, #0]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	e7f5      	b.n	800bfba <__kernel_rem_pio2f+0x242>
 800bfce:	1e74      	subs	r4, r6, #1
 800bfd0:	a808      	add	r0, sp, #32
 800bfd2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800bfd6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800bfda:	f10d 0c20 	add.w	ip, sp, #32
 800bfde:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800bfe2:	e77e      	b.n	800bee2 <__kernel_rem_pio2f+0x16a>
 800bfe4:	1e74      	subs	r4, r6, #1
 800bfe6:	a808      	add	r0, sp, #32
 800bfe8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800bfec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800bff0:	e7f3      	b.n	800bfda <__kernel_rem_pio2f+0x262>
 800bff2:	ab08      	add	r3, sp, #32
 800bff4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bff8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bffc:	4318      	orrs	r0, r3
 800bffe:	e7ab      	b.n	800bf58 <__kernel_rem_pio2f+0x1e0>
 800c000:	f10c 0c01 	add.w	ip, ip, #1
 800c004:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800c008:	2c00      	cmp	r4, #0
 800c00a:	d0f9      	beq.n	800c000 <__kernel_rem_pio2f+0x288>
 800c00c:	9b05      	ldr	r3, [sp, #20]
 800c00e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800c012:	eb0d 0003 	add.w	r0, sp, r3
 800c016:	9b01      	ldr	r3, [sp, #4]
 800c018:	18f4      	adds	r4, r6, r3
 800c01a:	ab1c      	add	r3, sp, #112	; 0x70
 800c01c:	1c77      	adds	r7, r6, #1
 800c01e:	384c      	subs	r0, #76	; 0x4c
 800c020:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c024:	4466      	add	r6, ip
 800c026:	42be      	cmp	r6, r7
 800c028:	f6ff af0b 	blt.w	800be42 <__kernel_rem_pio2f+0xca>
 800c02c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800c030:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c034:	ee07 3a90 	vmov	s15, r3
 800c038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c03c:	f04f 0c00 	mov.w	ip, #0
 800c040:	ece4 7a01 	vstmia	r4!, {s15}
 800c044:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c084 <__kernel_rem_pio2f+0x30c>
 800c048:	46a1      	mov	r9, r4
 800c04a:	458c      	cmp	ip, r1
 800c04c:	dd07      	ble.n	800c05e <__kernel_rem_pio2f+0x2e6>
 800c04e:	ece0 7a01 	vstmia	r0!, {s15}
 800c052:	3701      	adds	r7, #1
 800c054:	e7e7      	b.n	800c026 <__kernel_rem_pio2f+0x2ae>
 800c056:	9804      	ldr	r0, [sp, #16]
 800c058:	f04f 0c01 	mov.w	ip, #1
 800c05c:	e7d2      	b.n	800c004 <__kernel_rem_pio2f+0x28c>
 800c05e:	ecfe 6a01 	vldmia	lr!, {s13}
 800c062:	ed39 7a01 	vldmdb	r9!, {s14}
 800c066:	f10c 0c01 	add.w	ip, ip, #1
 800c06a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c06e:	e7ec      	b.n	800c04a <__kernel_rem_pio2f+0x2d2>
 800c070:	3c01      	subs	r4, #1
 800c072:	e775      	b.n	800bf60 <__kernel_rem_pio2f+0x1e8>
 800c074:	0800f7dc 	.word	0x0800f7dc
 800c078:	0800f7b0 	.word	0x0800f7b0
 800c07c:	43800000 	.word	0x43800000
 800c080:	3b800000 	.word	0x3b800000
 800c084:	00000000 	.word	0x00000000
 800c088:	9b03      	ldr	r3, [sp, #12]
 800c08a:	eeb0 0a48 	vmov.f32	s0, s16
 800c08e:	1a98      	subs	r0, r3, r2
 800c090:	f000 fb62 	bl	800c758 <scalbnf>
 800c094:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800c07c <__kernel_rem_pio2f+0x304>
 800c098:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a0:	db19      	blt.n	800c0d6 <__kernel_rem_pio2f+0x35e>
 800c0a2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c080 <__kernel_rem_pio2f+0x308>
 800c0a6:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c0aa:	aa08      	add	r2, sp, #32
 800c0ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0b0:	1c74      	adds	r4, r6, #1
 800c0b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0b6:	3508      	adds	r5, #8
 800c0b8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c0bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c0c4:	ee10 3a10 	vmov	r3, s0
 800c0c8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c0cc:	ee17 3a90 	vmov	r3, s15
 800c0d0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c0d4:	e74b      	b.n	800bf6e <__kernel_rem_pio2f+0x1f6>
 800c0d6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c0da:	aa08      	add	r2, sp, #32
 800c0dc:	ee10 3a10 	vmov	r3, s0
 800c0e0:	4634      	mov	r4, r6
 800c0e2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c0e6:	e742      	b.n	800bf6e <__kernel_rem_pio2f+0x1f6>
 800c0e8:	a808      	add	r0, sp, #32
 800c0ea:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c0ee:	9001      	str	r0, [sp, #4]
 800c0f0:	ee07 0a90 	vmov	s15, r0
 800c0f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0f8:	3a01      	subs	r2, #1
 800c0fa:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c0fe:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c102:	ed61 7a01 	vstmdb	r1!, {s15}
 800c106:	e73e      	b.n	800bf86 <__kernel_rem_pio2f+0x20e>
 800c108:	ecfc 6a01 	vldmia	ip!, {s13}
 800c10c:	ecb6 7a01 	vldmia	r6!, {s14}
 800c110:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c114:	3001      	adds	r0, #1
 800c116:	4550      	cmp	r0, sl
 800c118:	dc01      	bgt.n	800c11e <__kernel_rem_pio2f+0x3a6>
 800c11a:	4288      	cmp	r0, r1
 800c11c:	ddf4      	ble.n	800c108 <__kernel_rem_pio2f+0x390>
 800c11e:	a858      	add	r0, sp, #352	; 0x160
 800c120:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c124:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800c128:	3a01      	subs	r2, #1
 800c12a:	e730      	b.n	800bf8e <__kernel_rem_pio2f+0x216>
 800c12c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800c12e:	2a02      	cmp	r2, #2
 800c130:	dc09      	bgt.n	800c146 <__kernel_rem_pio2f+0x3ce>
 800c132:	2a00      	cmp	r2, #0
 800c134:	dc2a      	bgt.n	800c18c <__kernel_rem_pio2f+0x414>
 800c136:	d043      	beq.n	800c1c0 <__kernel_rem_pio2f+0x448>
 800c138:	f009 0007 	and.w	r0, r9, #7
 800c13c:	b059      	add	sp, #356	; 0x164
 800c13e:	ecbd 8b04 	vpop	{d8-d9}
 800c142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c146:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800c148:	2b03      	cmp	r3, #3
 800c14a:	d1f5      	bne.n	800c138 <__kernel_rem_pio2f+0x3c0>
 800c14c:	ab30      	add	r3, sp, #192	; 0xc0
 800c14e:	442b      	add	r3, r5
 800c150:	461a      	mov	r2, r3
 800c152:	4619      	mov	r1, r3
 800c154:	4620      	mov	r0, r4
 800c156:	2800      	cmp	r0, #0
 800c158:	f1a1 0104 	sub.w	r1, r1, #4
 800c15c:	dc51      	bgt.n	800c202 <__kernel_rem_pio2f+0x48a>
 800c15e:	4621      	mov	r1, r4
 800c160:	2901      	cmp	r1, #1
 800c162:	f1a2 0204 	sub.w	r2, r2, #4
 800c166:	dc5c      	bgt.n	800c222 <__kernel_rem_pio2f+0x4aa>
 800c168:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800c084 <__kernel_rem_pio2f+0x30c>
 800c16c:	3304      	adds	r3, #4
 800c16e:	2c01      	cmp	r4, #1
 800c170:	dc67      	bgt.n	800c242 <__kernel_rem_pio2f+0x4ca>
 800c172:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800c176:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800c17a:	2f00      	cmp	r7, #0
 800c17c:	d167      	bne.n	800c24e <__kernel_rem_pio2f+0x4d6>
 800c17e:	edc8 6a00 	vstr	s13, [r8]
 800c182:	ed88 7a01 	vstr	s14, [r8, #4]
 800c186:	edc8 7a02 	vstr	s15, [r8, #8]
 800c18a:	e7d5      	b.n	800c138 <__kernel_rem_pio2f+0x3c0>
 800c18c:	aa30      	add	r2, sp, #192	; 0xc0
 800c18e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800c084 <__kernel_rem_pio2f+0x30c>
 800c192:	4413      	add	r3, r2
 800c194:	4622      	mov	r2, r4
 800c196:	2a00      	cmp	r2, #0
 800c198:	da24      	bge.n	800c1e4 <__kernel_rem_pio2f+0x46c>
 800c19a:	b34f      	cbz	r7, 800c1f0 <__kernel_rem_pio2f+0x478>
 800c19c:	eef1 7a47 	vneg.f32	s15, s14
 800c1a0:	edc8 7a00 	vstr	s15, [r8]
 800c1a4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800c1a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c1ac:	aa31      	add	r2, sp, #196	; 0xc4
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	429c      	cmp	r4, r3
 800c1b2:	da20      	bge.n	800c1f6 <__kernel_rem_pio2f+0x47e>
 800c1b4:	b10f      	cbz	r7, 800c1ba <__kernel_rem_pio2f+0x442>
 800c1b6:	eef1 7a67 	vneg.f32	s15, s15
 800c1ba:	edc8 7a01 	vstr	s15, [r8, #4]
 800c1be:	e7bb      	b.n	800c138 <__kernel_rem_pio2f+0x3c0>
 800c1c0:	aa30      	add	r2, sp, #192	; 0xc0
 800c1c2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800c084 <__kernel_rem_pio2f+0x30c>
 800c1c6:	4413      	add	r3, r2
 800c1c8:	2c00      	cmp	r4, #0
 800c1ca:	da05      	bge.n	800c1d8 <__kernel_rem_pio2f+0x460>
 800c1cc:	b10f      	cbz	r7, 800c1d2 <__kernel_rem_pio2f+0x45a>
 800c1ce:	eef1 7a67 	vneg.f32	s15, s15
 800c1d2:	edc8 7a00 	vstr	s15, [r8]
 800c1d6:	e7af      	b.n	800c138 <__kernel_rem_pio2f+0x3c0>
 800c1d8:	ed33 7a01 	vldmdb	r3!, {s14}
 800c1dc:	3c01      	subs	r4, #1
 800c1de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1e2:	e7f1      	b.n	800c1c8 <__kernel_rem_pio2f+0x450>
 800c1e4:	ed73 7a01 	vldmdb	r3!, {s15}
 800c1e8:	3a01      	subs	r2, #1
 800c1ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c1ee:	e7d2      	b.n	800c196 <__kernel_rem_pio2f+0x41e>
 800c1f0:	eef0 7a47 	vmov.f32	s15, s14
 800c1f4:	e7d4      	b.n	800c1a0 <__kernel_rem_pio2f+0x428>
 800c1f6:	ecb2 7a01 	vldmia	r2!, {s14}
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c200:	e7d6      	b.n	800c1b0 <__kernel_rem_pio2f+0x438>
 800c202:	edd1 7a00 	vldr	s15, [r1]
 800c206:	edd1 6a01 	vldr	s13, [r1, #4]
 800c20a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c20e:	3801      	subs	r0, #1
 800c210:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c214:	ed81 7a00 	vstr	s14, [r1]
 800c218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c21c:	edc1 7a01 	vstr	s15, [r1, #4]
 800c220:	e799      	b.n	800c156 <__kernel_rem_pio2f+0x3de>
 800c222:	edd2 7a00 	vldr	s15, [r2]
 800c226:	edd2 6a01 	vldr	s13, [r2, #4]
 800c22a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c22e:	3901      	subs	r1, #1
 800c230:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c234:	ed82 7a00 	vstr	s14, [r2]
 800c238:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c23c:	edc2 7a01 	vstr	s15, [r2, #4]
 800c240:	e78e      	b.n	800c160 <__kernel_rem_pio2f+0x3e8>
 800c242:	ed33 7a01 	vldmdb	r3!, {s14}
 800c246:	3c01      	subs	r4, #1
 800c248:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c24c:	e78f      	b.n	800c16e <__kernel_rem_pio2f+0x3f6>
 800c24e:	eef1 6a66 	vneg.f32	s13, s13
 800c252:	eeb1 7a47 	vneg.f32	s14, s14
 800c256:	edc8 6a00 	vstr	s13, [r8]
 800c25a:	ed88 7a01 	vstr	s14, [r8, #4]
 800c25e:	eef1 7a67 	vneg.f32	s15, s15
 800c262:	e790      	b.n	800c186 <__kernel_rem_pio2f+0x40e>

0800c264 <__kernel_sinf>:
 800c264:	ee10 3a10 	vmov	r3, s0
 800c268:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c26c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c270:	da04      	bge.n	800c27c <__kernel_sinf+0x18>
 800c272:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c276:	ee17 3a90 	vmov	r3, s15
 800c27a:	b35b      	cbz	r3, 800c2d4 <__kernel_sinf+0x70>
 800c27c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c280:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c2d8 <__kernel_sinf+0x74>
 800c284:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c2dc <__kernel_sinf+0x78>
 800c288:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c28c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c2e0 <__kernel_sinf+0x7c>
 800c290:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c294:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c2e4 <__kernel_sinf+0x80>
 800c298:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c29c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c2e8 <__kernel_sinf+0x84>
 800c2a0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c2a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c2a8:	b930      	cbnz	r0, 800c2b8 <__kernel_sinf+0x54>
 800c2aa:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c2ec <__kernel_sinf+0x88>
 800c2ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c2b2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c2b6:	4770      	bx	lr
 800c2b8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c2bc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c2c0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c2c4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c2c8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c2f0 <__kernel_sinf+0x8c>
 800c2cc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c2d0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	2f2ec9d3 	.word	0x2f2ec9d3
 800c2dc:	b2d72f34 	.word	0xb2d72f34
 800c2e0:	3638ef1b 	.word	0x3638ef1b
 800c2e4:	b9500d01 	.word	0xb9500d01
 800c2e8:	3c088889 	.word	0x3c088889
 800c2ec:	be2aaaab 	.word	0xbe2aaaab
 800c2f0:	3e2aaaab 	.word	0x3e2aaaab

0800c2f4 <with_errno>:
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	460d      	mov	r5, r1
 800c2fa:	4616      	mov	r6, r2
 800c2fc:	f000 fac2 	bl	800c884 <__errno>
 800c300:	4629      	mov	r1, r5
 800c302:	6006      	str	r6, [r0, #0]
 800c304:	4620      	mov	r0, r4
 800c306:	bd70      	pop	{r4, r5, r6, pc}

0800c308 <xflow>:
 800c308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c30a:	4614      	mov	r4, r2
 800c30c:	461d      	mov	r5, r3
 800c30e:	b108      	cbz	r0, 800c314 <xflow+0xc>
 800c310:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c314:	e9cd 2300 	strd	r2, r3, [sp]
 800c318:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c31c:	4620      	mov	r0, r4
 800c31e:	4629      	mov	r1, r5
 800c320:	f7f4 f972 	bl	8000608 <__aeabi_dmul>
 800c324:	2222      	movs	r2, #34	; 0x22
 800c326:	b003      	add	sp, #12
 800c328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c32c:	f7ff bfe2 	b.w	800c2f4 <with_errno>

0800c330 <__math_uflow>:
 800c330:	b508      	push	{r3, lr}
 800c332:	2200      	movs	r2, #0
 800c334:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c338:	f7ff ffe6 	bl	800c308 <xflow>
 800c33c:	ec41 0b10 	vmov	d0, r0, r1
 800c340:	bd08      	pop	{r3, pc}

0800c342 <__math_oflow>:
 800c342:	b508      	push	{r3, lr}
 800c344:	2200      	movs	r2, #0
 800c346:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c34a:	f7ff ffdd 	bl	800c308 <xflow>
 800c34e:	ec41 0b10 	vmov	d0, r0, r1
 800c352:	bd08      	pop	{r3, pc}

0800c354 <fabs>:
 800c354:	ec51 0b10 	vmov	r0, r1, d0
 800c358:	ee10 2a10 	vmov	r2, s0
 800c35c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c360:	ec43 2b10 	vmov	d0, r2, r3
 800c364:	4770      	bx	lr

0800c366 <finite>:
 800c366:	b082      	sub	sp, #8
 800c368:	ed8d 0b00 	vstr	d0, [sp]
 800c36c:	9801      	ldr	r0, [sp, #4]
 800c36e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c372:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c376:	0fc0      	lsrs	r0, r0, #31
 800c378:	b002      	add	sp, #8
 800c37a:	4770      	bx	lr
 800c37c:	0000      	movs	r0, r0
	...

0800c380 <scalbn>:
 800c380:	b570      	push	{r4, r5, r6, lr}
 800c382:	ec55 4b10 	vmov	r4, r5, d0
 800c386:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c38a:	4606      	mov	r6, r0
 800c38c:	462b      	mov	r3, r5
 800c38e:	b99a      	cbnz	r2, 800c3b8 <scalbn+0x38>
 800c390:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c394:	4323      	orrs	r3, r4
 800c396:	d036      	beq.n	800c406 <scalbn+0x86>
 800c398:	4b39      	ldr	r3, [pc, #228]	; (800c480 <scalbn+0x100>)
 800c39a:	4629      	mov	r1, r5
 800c39c:	ee10 0a10 	vmov	r0, s0
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f7f4 f931 	bl	8000608 <__aeabi_dmul>
 800c3a6:	4b37      	ldr	r3, [pc, #220]	; (800c484 <scalbn+0x104>)
 800c3a8:	429e      	cmp	r6, r3
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	460d      	mov	r5, r1
 800c3ae:	da10      	bge.n	800c3d2 <scalbn+0x52>
 800c3b0:	a32b      	add	r3, pc, #172	; (adr r3, 800c460 <scalbn+0xe0>)
 800c3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b6:	e03a      	b.n	800c42e <scalbn+0xae>
 800c3b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c3bc:	428a      	cmp	r2, r1
 800c3be:	d10c      	bne.n	800c3da <scalbn+0x5a>
 800c3c0:	ee10 2a10 	vmov	r2, s0
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	f7f3 ff68 	bl	800029c <__adddf3>
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	460d      	mov	r5, r1
 800c3d0:	e019      	b.n	800c406 <scalbn+0x86>
 800c3d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	3a36      	subs	r2, #54	; 0x36
 800c3da:	4432      	add	r2, r6
 800c3dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c3e0:	428a      	cmp	r2, r1
 800c3e2:	dd08      	ble.n	800c3f6 <scalbn+0x76>
 800c3e4:	2d00      	cmp	r5, #0
 800c3e6:	a120      	add	r1, pc, #128	; (adr r1, 800c468 <scalbn+0xe8>)
 800c3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ec:	da1c      	bge.n	800c428 <scalbn+0xa8>
 800c3ee:	a120      	add	r1, pc, #128	; (adr r1, 800c470 <scalbn+0xf0>)
 800c3f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3f4:	e018      	b.n	800c428 <scalbn+0xa8>
 800c3f6:	2a00      	cmp	r2, #0
 800c3f8:	dd08      	ble.n	800c40c <scalbn+0x8c>
 800c3fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c3fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c402:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c406:	ec45 4b10 	vmov	d0, r4, r5
 800c40a:	bd70      	pop	{r4, r5, r6, pc}
 800c40c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c410:	da19      	bge.n	800c446 <scalbn+0xc6>
 800c412:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c416:	429e      	cmp	r6, r3
 800c418:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c41c:	dd0a      	ble.n	800c434 <scalbn+0xb4>
 800c41e:	a112      	add	r1, pc, #72	; (adr r1, 800c468 <scalbn+0xe8>)
 800c420:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1e2      	bne.n	800c3ee <scalbn+0x6e>
 800c428:	a30f      	add	r3, pc, #60	; (adr r3, 800c468 <scalbn+0xe8>)
 800c42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42e:	f7f4 f8eb 	bl	8000608 <__aeabi_dmul>
 800c432:	e7cb      	b.n	800c3cc <scalbn+0x4c>
 800c434:	a10a      	add	r1, pc, #40	; (adr r1, 800c460 <scalbn+0xe0>)
 800c436:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d0b8      	beq.n	800c3b0 <scalbn+0x30>
 800c43e:	a10e      	add	r1, pc, #56	; (adr r1, 800c478 <scalbn+0xf8>)
 800c440:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c444:	e7b4      	b.n	800c3b0 <scalbn+0x30>
 800c446:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c44a:	3236      	adds	r2, #54	; 0x36
 800c44c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c450:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c454:	4620      	mov	r0, r4
 800c456:	4b0c      	ldr	r3, [pc, #48]	; (800c488 <scalbn+0x108>)
 800c458:	2200      	movs	r2, #0
 800c45a:	e7e8      	b.n	800c42e <scalbn+0xae>
 800c45c:	f3af 8000 	nop.w
 800c460:	c2f8f359 	.word	0xc2f8f359
 800c464:	01a56e1f 	.word	0x01a56e1f
 800c468:	8800759c 	.word	0x8800759c
 800c46c:	7e37e43c 	.word	0x7e37e43c
 800c470:	8800759c 	.word	0x8800759c
 800c474:	fe37e43c 	.word	0xfe37e43c
 800c478:	c2f8f359 	.word	0xc2f8f359
 800c47c:	81a56e1f 	.word	0x81a56e1f
 800c480:	43500000 	.word	0x43500000
 800c484:	ffff3cb0 	.word	0xffff3cb0
 800c488:	3c900000 	.word	0x3c900000

0800c48c <expm1f>:
 800c48c:	ee10 2a10 	vmov	r2, s0
 800c490:	497d      	ldr	r1, [pc, #500]	; (800c688 <expm1f+0x1fc>)
 800c492:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800c496:	428b      	cmp	r3, r1
 800c498:	d921      	bls.n	800c4de <expm1f+0x52>
 800c49a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c49e:	d902      	bls.n	800c4a6 <expm1f+0x1a>
 800c4a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c4a4:	4770      	bx	lr
 800c4a6:	d106      	bne.n	800c4b6 <expm1f+0x2a>
 800c4a8:	2a00      	cmp	r2, #0
 800c4aa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c4ae:	bfb8      	it	lt
 800c4b0:	eeb0 0a67 	vmovlt.f32	s0, s15
 800c4b4:	4770      	bx	lr
 800c4b6:	2a00      	cmp	r2, #0
 800c4b8:	db05      	blt.n	800c4c6 <expm1f+0x3a>
 800c4ba:	4974      	ldr	r1, [pc, #464]	; (800c68c <expm1f+0x200>)
 800c4bc:	428b      	cmp	r3, r1
 800c4be:	d95c      	bls.n	800c57a <expm1f+0xee>
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	f000 b9d1 	b.w	800c868 <__math_oflowf>
 800c4c6:	eddf 7a72 	vldr	s15, [pc, #456]	; 800c690 <expm1f+0x204>
 800c4ca:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c4ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d6:	d550      	bpl.n	800c57a <expm1f+0xee>
 800c4d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c4dc:	4770      	bx	lr
 800c4de:	496d      	ldr	r1, [pc, #436]	; (800c694 <expm1f+0x208>)
 800c4e0:	428b      	cmp	r3, r1
 800c4e2:	d967      	bls.n	800c5b4 <expm1f+0x128>
 800c4e4:	496c      	ldr	r1, [pc, #432]	; (800c698 <expm1f+0x20c>)
 800c4e6:	428b      	cmp	r3, r1
 800c4e8:	d847      	bhi.n	800c57a <expm1f+0xee>
 800c4ea:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800c69c <expm1f+0x210>
 800c4ee:	2a00      	cmp	r2, #0
 800c4f0:	bfa7      	ittee	ge
 800c4f2:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800c4f6:	eddf 7a6a 	vldrge	s15, [pc, #424]	; 800c6a0 <expm1f+0x214>
 800c4fa:	eddf 7a6a 	vldrlt	s15, [pc, #424]	; 800c6a4 <expm1f+0x218>
 800c4fe:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800c502:	bfac      	ite	ge
 800c504:	2301      	movge	r3, #1
 800c506:	f04f 33ff 	movlt.w	r3, #4294967295
 800c50a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c50e:	ee37 7a40 	vsub.f32	s14, s14, s0
 800c512:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c516:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800c51a:	ee20 4a25 	vmul.f32	s8, s0, s11
 800c51e:	ed9f 6a62 	vldr	s12, [pc, #392]	; 800c6a8 <expm1f+0x21c>
 800c522:	eddf 6a62 	vldr	s13, [pc, #392]	; 800c6ac <expm1f+0x220>
 800c526:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800c6b0 <expm1f+0x224>
 800c52a:	ee20 7a04 	vmul.f32	s14, s0, s8
 800c52e:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800c532:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c536:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 800c6b4 <expm1f+0x228>
 800c53a:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c53e:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c6b8 <expm1f+0x22c>
 800c542:	eee6 6a07 	vfma.f32	s13, s12, s14
 800c546:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c54a:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c54e:	eef0 6a46 	vmov.f32	s13, s12
 800c552:	eee5 6a07 	vfma.f32	s13, s10, s14
 800c556:	eee4 4a66 	vfms.f32	s9, s8, s13
 800c55a:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800c55e:	eea0 4a64 	vfms.f32	s8, s0, s9
 800c562:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800c566:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800c56a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800c56e:	bb7b      	cbnz	r3, 800c5d0 <expm1f+0x144>
 800c570:	eef0 7a47 	vmov.f32	s15, s14
 800c574:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800c578:	e025      	b.n	800c5c6 <expm1f+0x13a>
 800c57a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800c57e:	2a00      	cmp	r2, #0
 800c580:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c584:	bfb8      	it	lt
 800c586:	eef0 7a47 	vmovlt.f32	s15, s14
 800c58a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c6bc <expm1f+0x230>
 800c58e:	eddf 6a43 	vldr	s13, [pc, #268]	; 800c69c <expm1f+0x210>
 800c592:	ee40 7a07 	vmla.f32	s15, s0, s14
 800c596:	eeb0 7a40 	vmov.f32	s14, s0
 800c59a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c59e:	ee17 3a90 	vmov	r3, s15
 800c5a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5a6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c5aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c6a0 <expm1f+0x214>
 800c5ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c5b2:	e7aa      	b.n	800c50a <expm1f+0x7e>
 800c5b4:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800c5b8:	d208      	bcs.n	800c5cc <expm1f+0x140>
 800c5ba:	eddf 7a41 	vldr	s15, [pc, #260]	; 800c6c0 <expm1f+0x234>
 800c5be:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c5c2:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800c5c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c5ca:	4770      	bx	lr
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	e7a2      	b.n	800c516 <expm1f+0x8a>
 800c5d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c5d4:	1c5a      	adds	r2, r3, #1
 800c5d6:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800c5da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5de:	d106      	bne.n	800c5ee <expm1f+0x162>
 800c5e0:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c5e4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800c5e8:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800c5ec:	4770      	bx	lr
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d118      	bne.n	800c624 <expm1f+0x198>
 800c5f2:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800c5f6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5fe:	bf5b      	ittet	pl
 800c600:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800c604:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 800c608:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800c60c:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800c610:	bf43      	ittte	mi
 800c612:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 800c616:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 800c61a:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800c61e:	eeb0 0a46 	vmovpl.f32	s0, s12
 800c622:	4770      	bx	lr
 800c624:	1c5a      	adds	r2, r3, #1
 800c626:	2a39      	cmp	r2, #57	; 0x39
 800c628:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800c62c:	d90b      	bls.n	800c646 <expm1f+0x1ba>
 800c62e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c632:	ee36 0a40 	vsub.f32	s0, s12, s0
 800c636:	ee10 3a10 	vmov	r3, s0
 800c63a:	440b      	add	r3, r1
 800c63c:	ee00 3a10 	vmov	s0, r3
 800c640:	ee30 0a46 	vsub.f32	s0, s0, s12
 800c644:	4770      	bx	lr
 800c646:	2b16      	cmp	r3, #22
 800c648:	dc11      	bgt.n	800c66e <expm1f+0x1e2>
 800c64a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c64e:	fa42 f303 	asr.w	r3, r2, r3
 800c652:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800c656:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c65a:	ee07 3a90 	vmov	s15, r3
 800c65e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c662:	ee10 3a10 	vmov	r3, s0
 800c666:	440b      	add	r3, r1
 800c668:	ee00 3a10 	vmov	s0, r3
 800c66c:	4770      	bx	lr
 800c66e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800c672:	05db      	lsls	r3, r3, #23
 800c674:	ee07 3a10 	vmov	s14, r3
 800c678:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c67c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c680:	ee37 0a86 	vadd.f32	s0, s15, s12
 800c684:	e7ed      	b.n	800c662 <expm1f+0x1d6>
 800c686:	bf00      	nop
 800c688:	4195b843 	.word	0x4195b843
 800c68c:	42b17217 	.word	0x42b17217
 800c690:	0da24260 	.word	0x0da24260
 800c694:	3eb17218 	.word	0x3eb17218
 800c698:	3f851591 	.word	0x3f851591
 800c69c:	3f317180 	.word	0x3f317180
 800c6a0:	3717f7d1 	.word	0x3717f7d1
 800c6a4:	b717f7d1 	.word	0xb717f7d1
 800c6a8:	b457edbb 	.word	0xb457edbb
 800c6ac:	36867e54 	.word	0x36867e54
 800c6b0:	bd088889 	.word	0xbd088889
 800c6b4:	b8a670cd 	.word	0xb8a670cd
 800c6b8:	3ad00d01 	.word	0x3ad00d01
 800c6bc:	3fb8aa3b 	.word	0x3fb8aa3b
 800c6c0:	7149f2ca 	.word	0x7149f2ca

0800c6c4 <fabsf>:
 800c6c4:	ee10 3a10 	vmov	r3, s0
 800c6c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c6cc:	ee00 3a10 	vmov	s0, r3
 800c6d0:	4770      	bx	lr
	...

0800c6d4 <floorf>:
 800c6d4:	ee10 3a10 	vmov	r3, s0
 800c6d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c6dc:	3a7f      	subs	r2, #127	; 0x7f
 800c6de:	2a16      	cmp	r2, #22
 800c6e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c6e4:	dc2a      	bgt.n	800c73c <floorf+0x68>
 800c6e6:	2a00      	cmp	r2, #0
 800c6e8:	da11      	bge.n	800c70e <floorf+0x3a>
 800c6ea:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c74c <floorf+0x78>
 800c6ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c6f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6fa:	dd05      	ble.n	800c708 <floorf+0x34>
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	da23      	bge.n	800c748 <floorf+0x74>
 800c700:	4a13      	ldr	r2, [pc, #76]	; (800c750 <floorf+0x7c>)
 800c702:	2900      	cmp	r1, #0
 800c704:	bf18      	it	ne
 800c706:	4613      	movne	r3, r2
 800c708:	ee00 3a10 	vmov	s0, r3
 800c70c:	4770      	bx	lr
 800c70e:	4911      	ldr	r1, [pc, #68]	; (800c754 <floorf+0x80>)
 800c710:	4111      	asrs	r1, r2
 800c712:	420b      	tst	r3, r1
 800c714:	d0fa      	beq.n	800c70c <floorf+0x38>
 800c716:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c74c <floorf+0x78>
 800c71a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c71e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c726:	ddef      	ble.n	800c708 <floorf+0x34>
 800c728:	2b00      	cmp	r3, #0
 800c72a:	bfbe      	ittt	lt
 800c72c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c730:	fa40 f202 	asrlt.w	r2, r0, r2
 800c734:	189b      	addlt	r3, r3, r2
 800c736:	ea23 0301 	bic.w	r3, r3, r1
 800c73a:	e7e5      	b.n	800c708 <floorf+0x34>
 800c73c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c740:	d3e4      	bcc.n	800c70c <floorf+0x38>
 800c742:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c746:	4770      	bx	lr
 800c748:	2300      	movs	r3, #0
 800c74a:	e7dd      	b.n	800c708 <floorf+0x34>
 800c74c:	7149f2ca 	.word	0x7149f2ca
 800c750:	bf800000 	.word	0xbf800000
 800c754:	007fffff 	.word	0x007fffff

0800c758 <scalbnf>:
 800c758:	ee10 3a10 	vmov	r3, s0
 800c75c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c760:	d025      	beq.n	800c7ae <scalbnf+0x56>
 800c762:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c766:	d302      	bcc.n	800c76e <scalbnf+0x16>
 800c768:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c76c:	4770      	bx	lr
 800c76e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c772:	d122      	bne.n	800c7ba <scalbnf+0x62>
 800c774:	4b2a      	ldr	r3, [pc, #168]	; (800c820 <scalbnf+0xc8>)
 800c776:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c824 <scalbnf+0xcc>
 800c77a:	4298      	cmp	r0, r3
 800c77c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c780:	db16      	blt.n	800c7b0 <scalbnf+0x58>
 800c782:	ee10 3a10 	vmov	r3, s0
 800c786:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c78a:	3a19      	subs	r2, #25
 800c78c:	4402      	add	r2, r0
 800c78e:	2afe      	cmp	r2, #254	; 0xfe
 800c790:	dd15      	ble.n	800c7be <scalbnf+0x66>
 800c792:	ee10 3a10 	vmov	r3, s0
 800c796:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c828 <scalbnf+0xd0>
 800c79a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c82c <scalbnf+0xd4>
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	eeb0 7a67 	vmov.f32	s14, s15
 800c7a4:	bfb8      	it	lt
 800c7a6:	eef0 7a66 	vmovlt.f32	s15, s13
 800c7aa:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c7ae:	4770      	bx	lr
 800c7b0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c830 <scalbnf+0xd8>
 800c7b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c7b8:	4770      	bx	lr
 800c7ba:	0dd2      	lsrs	r2, r2, #23
 800c7bc:	e7e6      	b.n	800c78c <scalbnf+0x34>
 800c7be:	2a00      	cmp	r2, #0
 800c7c0:	dd06      	ble.n	800c7d0 <scalbnf+0x78>
 800c7c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c7c6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c7ca:	ee00 3a10 	vmov	s0, r3
 800c7ce:	4770      	bx	lr
 800c7d0:	f112 0f16 	cmn.w	r2, #22
 800c7d4:	da1a      	bge.n	800c80c <scalbnf+0xb4>
 800c7d6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c7da:	4298      	cmp	r0, r3
 800c7dc:	ee10 3a10 	vmov	r3, s0
 800c7e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7e4:	dd0a      	ble.n	800c7fc <scalbnf+0xa4>
 800c7e6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c828 <scalbnf+0xd0>
 800c7ea:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c82c <scalbnf+0xd4>
 800c7ee:	eef0 7a40 	vmov.f32	s15, s0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	bf18      	it	ne
 800c7f6:	eeb0 0a47 	vmovne.f32	s0, s14
 800c7fa:	e7db      	b.n	800c7b4 <scalbnf+0x5c>
 800c7fc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c830 <scalbnf+0xd8>
 800c800:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c834 <scalbnf+0xdc>
 800c804:	eef0 7a40 	vmov.f32	s15, s0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	e7f3      	b.n	800c7f4 <scalbnf+0x9c>
 800c80c:	3219      	adds	r2, #25
 800c80e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c812:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c816:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c838 <scalbnf+0xe0>
 800c81a:	ee07 3a10 	vmov	s14, r3
 800c81e:	e7c4      	b.n	800c7aa <scalbnf+0x52>
 800c820:	ffff3cb0 	.word	0xffff3cb0
 800c824:	4c000000 	.word	0x4c000000
 800c828:	7149f2ca 	.word	0x7149f2ca
 800c82c:	f149f2ca 	.word	0xf149f2ca
 800c830:	0da24260 	.word	0x0da24260
 800c834:	8da24260 	.word	0x8da24260
 800c838:	33000000 	.word	0x33000000

0800c83c <with_errnof>:
 800c83c:	b513      	push	{r0, r1, r4, lr}
 800c83e:	4604      	mov	r4, r0
 800c840:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c844:	f000 f81e 	bl	800c884 <__errno>
 800c848:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c84c:	6004      	str	r4, [r0, #0]
 800c84e:	b002      	add	sp, #8
 800c850:	bd10      	pop	{r4, pc}

0800c852 <xflowf>:
 800c852:	b130      	cbz	r0, 800c862 <xflowf+0x10>
 800c854:	eef1 7a40 	vneg.f32	s15, s0
 800c858:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c85c:	2022      	movs	r0, #34	; 0x22
 800c85e:	f7ff bfed 	b.w	800c83c <with_errnof>
 800c862:	eef0 7a40 	vmov.f32	s15, s0
 800c866:	e7f7      	b.n	800c858 <xflowf+0x6>

0800c868 <__math_oflowf>:
 800c868:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c870 <__math_oflowf+0x8>
 800c86c:	f7ff bff1 	b.w	800c852 <xflowf>
 800c870:	70000000 	.word	0x70000000

0800c874 <abort>:
 800c874:	b508      	push	{r3, lr}
 800c876:	2006      	movs	r0, #6
 800c878:	f000 fdf0 	bl	800d45c <raise>
 800c87c:	2001      	movs	r0, #1
 800c87e:	f7f8 fc17 	bl	80050b0 <_exit>
	...

0800c884 <__errno>:
 800c884:	4b01      	ldr	r3, [pc, #4]	; (800c88c <__errno+0x8>)
 800c886:	6818      	ldr	r0, [r3, #0]
 800c888:	4770      	bx	lr
 800c88a:	bf00      	nop
 800c88c:	2000000c 	.word	0x2000000c

0800c890 <__libc_init_array>:
 800c890:	b570      	push	{r4, r5, r6, lr}
 800c892:	4d0d      	ldr	r5, [pc, #52]	; (800c8c8 <__libc_init_array+0x38>)
 800c894:	4c0d      	ldr	r4, [pc, #52]	; (800c8cc <__libc_init_array+0x3c>)
 800c896:	1b64      	subs	r4, r4, r5
 800c898:	10a4      	asrs	r4, r4, #2
 800c89a:	2600      	movs	r6, #0
 800c89c:	42a6      	cmp	r6, r4
 800c89e:	d109      	bne.n	800c8b4 <__libc_init_array+0x24>
 800c8a0:	4d0b      	ldr	r5, [pc, #44]	; (800c8d0 <__libc_init_array+0x40>)
 800c8a2:	4c0c      	ldr	r4, [pc, #48]	; (800c8d4 <__libc_init_array+0x44>)
 800c8a4:	f002 fd50 	bl	800f348 <_init>
 800c8a8:	1b64      	subs	r4, r4, r5
 800c8aa:	10a4      	asrs	r4, r4, #2
 800c8ac:	2600      	movs	r6, #0
 800c8ae:	42a6      	cmp	r6, r4
 800c8b0:	d105      	bne.n	800c8be <__libc_init_array+0x2e>
 800c8b2:	bd70      	pop	{r4, r5, r6, pc}
 800c8b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8b8:	4798      	blx	r3
 800c8ba:	3601      	adds	r6, #1
 800c8bc:	e7ee      	b.n	800c89c <__libc_init_array+0xc>
 800c8be:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8c2:	4798      	blx	r3
 800c8c4:	3601      	adds	r6, #1
 800c8c6:	e7f2      	b.n	800c8ae <__libc_init_array+0x1e>
 800c8c8:	0800fbcc 	.word	0x0800fbcc
 800c8cc:	0800fbcc 	.word	0x0800fbcc
 800c8d0:	0800fbcc 	.word	0x0800fbcc
 800c8d4:	0800fbd4 	.word	0x0800fbd4

0800c8d8 <malloc>:
 800c8d8:	4b02      	ldr	r3, [pc, #8]	; (800c8e4 <malloc+0xc>)
 800c8da:	4601      	mov	r1, r0
 800c8dc:	6818      	ldr	r0, [r3, #0]
 800c8de:	f000 b8a7 	b.w	800ca30 <_malloc_r>
 800c8e2:	bf00      	nop
 800c8e4:	2000000c 	.word	0x2000000c

0800c8e8 <free>:
 800c8e8:	4b02      	ldr	r3, [pc, #8]	; (800c8f4 <free+0xc>)
 800c8ea:	4601      	mov	r1, r0
 800c8ec:	6818      	ldr	r0, [r3, #0]
 800c8ee:	f000 b833 	b.w	800c958 <_free_r>
 800c8f2:	bf00      	nop
 800c8f4:	2000000c 	.word	0x2000000c

0800c8f8 <memcpy>:
 800c8f8:	440a      	add	r2, r1
 800c8fa:	4291      	cmp	r1, r2
 800c8fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c900:	d100      	bne.n	800c904 <memcpy+0xc>
 800c902:	4770      	bx	lr
 800c904:	b510      	push	{r4, lr}
 800c906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c90a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c90e:	4291      	cmp	r1, r2
 800c910:	d1f9      	bne.n	800c906 <memcpy+0xe>
 800c912:	bd10      	pop	{r4, pc}

0800c914 <memmove>:
 800c914:	4288      	cmp	r0, r1
 800c916:	b510      	push	{r4, lr}
 800c918:	eb01 0402 	add.w	r4, r1, r2
 800c91c:	d902      	bls.n	800c924 <memmove+0x10>
 800c91e:	4284      	cmp	r4, r0
 800c920:	4623      	mov	r3, r4
 800c922:	d807      	bhi.n	800c934 <memmove+0x20>
 800c924:	1e43      	subs	r3, r0, #1
 800c926:	42a1      	cmp	r1, r4
 800c928:	d008      	beq.n	800c93c <memmove+0x28>
 800c92a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c92e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c932:	e7f8      	b.n	800c926 <memmove+0x12>
 800c934:	4402      	add	r2, r0
 800c936:	4601      	mov	r1, r0
 800c938:	428a      	cmp	r2, r1
 800c93a:	d100      	bne.n	800c93e <memmove+0x2a>
 800c93c:	bd10      	pop	{r4, pc}
 800c93e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c946:	e7f7      	b.n	800c938 <memmove+0x24>

0800c948 <memset>:
 800c948:	4402      	add	r2, r0
 800c94a:	4603      	mov	r3, r0
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d100      	bne.n	800c952 <memset+0xa>
 800c950:	4770      	bx	lr
 800c952:	f803 1b01 	strb.w	r1, [r3], #1
 800c956:	e7f9      	b.n	800c94c <memset+0x4>

0800c958 <_free_r>:
 800c958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c95a:	2900      	cmp	r1, #0
 800c95c:	d044      	beq.n	800c9e8 <_free_r+0x90>
 800c95e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c962:	9001      	str	r0, [sp, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	f1a1 0404 	sub.w	r4, r1, #4
 800c96a:	bfb8      	it	lt
 800c96c:	18e4      	addlt	r4, r4, r3
 800c96e:	f001 fc11 	bl	800e194 <__malloc_lock>
 800c972:	4a1e      	ldr	r2, [pc, #120]	; (800c9ec <_free_r+0x94>)
 800c974:	9801      	ldr	r0, [sp, #4]
 800c976:	6813      	ldr	r3, [r2, #0]
 800c978:	b933      	cbnz	r3, 800c988 <_free_r+0x30>
 800c97a:	6063      	str	r3, [r4, #4]
 800c97c:	6014      	str	r4, [r2, #0]
 800c97e:	b003      	add	sp, #12
 800c980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c984:	f001 bc0c 	b.w	800e1a0 <__malloc_unlock>
 800c988:	42a3      	cmp	r3, r4
 800c98a:	d908      	bls.n	800c99e <_free_r+0x46>
 800c98c:	6825      	ldr	r5, [r4, #0]
 800c98e:	1961      	adds	r1, r4, r5
 800c990:	428b      	cmp	r3, r1
 800c992:	bf01      	itttt	eq
 800c994:	6819      	ldreq	r1, [r3, #0]
 800c996:	685b      	ldreq	r3, [r3, #4]
 800c998:	1949      	addeq	r1, r1, r5
 800c99a:	6021      	streq	r1, [r4, #0]
 800c99c:	e7ed      	b.n	800c97a <_free_r+0x22>
 800c99e:	461a      	mov	r2, r3
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	b10b      	cbz	r3, 800c9a8 <_free_r+0x50>
 800c9a4:	42a3      	cmp	r3, r4
 800c9a6:	d9fa      	bls.n	800c99e <_free_r+0x46>
 800c9a8:	6811      	ldr	r1, [r2, #0]
 800c9aa:	1855      	adds	r5, r2, r1
 800c9ac:	42a5      	cmp	r5, r4
 800c9ae:	d10b      	bne.n	800c9c8 <_free_r+0x70>
 800c9b0:	6824      	ldr	r4, [r4, #0]
 800c9b2:	4421      	add	r1, r4
 800c9b4:	1854      	adds	r4, r2, r1
 800c9b6:	42a3      	cmp	r3, r4
 800c9b8:	6011      	str	r1, [r2, #0]
 800c9ba:	d1e0      	bne.n	800c97e <_free_r+0x26>
 800c9bc:	681c      	ldr	r4, [r3, #0]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	6053      	str	r3, [r2, #4]
 800c9c2:	4421      	add	r1, r4
 800c9c4:	6011      	str	r1, [r2, #0]
 800c9c6:	e7da      	b.n	800c97e <_free_r+0x26>
 800c9c8:	d902      	bls.n	800c9d0 <_free_r+0x78>
 800c9ca:	230c      	movs	r3, #12
 800c9cc:	6003      	str	r3, [r0, #0]
 800c9ce:	e7d6      	b.n	800c97e <_free_r+0x26>
 800c9d0:	6825      	ldr	r5, [r4, #0]
 800c9d2:	1961      	adds	r1, r4, r5
 800c9d4:	428b      	cmp	r3, r1
 800c9d6:	bf04      	itt	eq
 800c9d8:	6819      	ldreq	r1, [r3, #0]
 800c9da:	685b      	ldreq	r3, [r3, #4]
 800c9dc:	6063      	str	r3, [r4, #4]
 800c9de:	bf04      	itt	eq
 800c9e0:	1949      	addeq	r1, r1, r5
 800c9e2:	6021      	streq	r1, [r4, #0]
 800c9e4:	6054      	str	r4, [r2, #4]
 800c9e6:	e7ca      	b.n	800c97e <_free_r+0x26>
 800c9e8:	b003      	add	sp, #12
 800c9ea:	bd30      	pop	{r4, r5, pc}
 800c9ec:	200010d0 	.word	0x200010d0

0800c9f0 <sbrk_aligned>:
 800c9f0:	b570      	push	{r4, r5, r6, lr}
 800c9f2:	4e0e      	ldr	r6, [pc, #56]	; (800ca2c <sbrk_aligned+0x3c>)
 800c9f4:	460c      	mov	r4, r1
 800c9f6:	6831      	ldr	r1, [r6, #0]
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	b911      	cbnz	r1, 800ca02 <sbrk_aligned+0x12>
 800c9fc:	f000 fcf6 	bl	800d3ec <_sbrk_r>
 800ca00:	6030      	str	r0, [r6, #0]
 800ca02:	4621      	mov	r1, r4
 800ca04:	4628      	mov	r0, r5
 800ca06:	f000 fcf1 	bl	800d3ec <_sbrk_r>
 800ca0a:	1c43      	adds	r3, r0, #1
 800ca0c:	d00a      	beq.n	800ca24 <sbrk_aligned+0x34>
 800ca0e:	1cc4      	adds	r4, r0, #3
 800ca10:	f024 0403 	bic.w	r4, r4, #3
 800ca14:	42a0      	cmp	r0, r4
 800ca16:	d007      	beq.n	800ca28 <sbrk_aligned+0x38>
 800ca18:	1a21      	subs	r1, r4, r0
 800ca1a:	4628      	mov	r0, r5
 800ca1c:	f000 fce6 	bl	800d3ec <_sbrk_r>
 800ca20:	3001      	adds	r0, #1
 800ca22:	d101      	bne.n	800ca28 <sbrk_aligned+0x38>
 800ca24:	f04f 34ff 	mov.w	r4, #4294967295
 800ca28:	4620      	mov	r0, r4
 800ca2a:	bd70      	pop	{r4, r5, r6, pc}
 800ca2c:	200010d4 	.word	0x200010d4

0800ca30 <_malloc_r>:
 800ca30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca34:	1ccd      	adds	r5, r1, #3
 800ca36:	f025 0503 	bic.w	r5, r5, #3
 800ca3a:	3508      	adds	r5, #8
 800ca3c:	2d0c      	cmp	r5, #12
 800ca3e:	bf38      	it	cc
 800ca40:	250c      	movcc	r5, #12
 800ca42:	2d00      	cmp	r5, #0
 800ca44:	4607      	mov	r7, r0
 800ca46:	db01      	blt.n	800ca4c <_malloc_r+0x1c>
 800ca48:	42a9      	cmp	r1, r5
 800ca4a:	d905      	bls.n	800ca58 <_malloc_r+0x28>
 800ca4c:	230c      	movs	r3, #12
 800ca4e:	603b      	str	r3, [r7, #0]
 800ca50:	2600      	movs	r6, #0
 800ca52:	4630      	mov	r0, r6
 800ca54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca58:	4e2e      	ldr	r6, [pc, #184]	; (800cb14 <_malloc_r+0xe4>)
 800ca5a:	f001 fb9b 	bl	800e194 <__malloc_lock>
 800ca5e:	6833      	ldr	r3, [r6, #0]
 800ca60:	461c      	mov	r4, r3
 800ca62:	bb34      	cbnz	r4, 800cab2 <_malloc_r+0x82>
 800ca64:	4629      	mov	r1, r5
 800ca66:	4638      	mov	r0, r7
 800ca68:	f7ff ffc2 	bl	800c9f0 <sbrk_aligned>
 800ca6c:	1c43      	adds	r3, r0, #1
 800ca6e:	4604      	mov	r4, r0
 800ca70:	d14d      	bne.n	800cb0e <_malloc_r+0xde>
 800ca72:	6834      	ldr	r4, [r6, #0]
 800ca74:	4626      	mov	r6, r4
 800ca76:	2e00      	cmp	r6, #0
 800ca78:	d140      	bne.n	800cafc <_malloc_r+0xcc>
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	4631      	mov	r1, r6
 800ca7e:	4638      	mov	r0, r7
 800ca80:	eb04 0803 	add.w	r8, r4, r3
 800ca84:	f000 fcb2 	bl	800d3ec <_sbrk_r>
 800ca88:	4580      	cmp	r8, r0
 800ca8a:	d13a      	bne.n	800cb02 <_malloc_r+0xd2>
 800ca8c:	6821      	ldr	r1, [r4, #0]
 800ca8e:	3503      	adds	r5, #3
 800ca90:	1a6d      	subs	r5, r5, r1
 800ca92:	f025 0503 	bic.w	r5, r5, #3
 800ca96:	3508      	adds	r5, #8
 800ca98:	2d0c      	cmp	r5, #12
 800ca9a:	bf38      	it	cc
 800ca9c:	250c      	movcc	r5, #12
 800ca9e:	4629      	mov	r1, r5
 800caa0:	4638      	mov	r0, r7
 800caa2:	f7ff ffa5 	bl	800c9f0 <sbrk_aligned>
 800caa6:	3001      	adds	r0, #1
 800caa8:	d02b      	beq.n	800cb02 <_malloc_r+0xd2>
 800caaa:	6823      	ldr	r3, [r4, #0]
 800caac:	442b      	add	r3, r5
 800caae:	6023      	str	r3, [r4, #0]
 800cab0:	e00e      	b.n	800cad0 <_malloc_r+0xa0>
 800cab2:	6822      	ldr	r2, [r4, #0]
 800cab4:	1b52      	subs	r2, r2, r5
 800cab6:	d41e      	bmi.n	800caf6 <_malloc_r+0xc6>
 800cab8:	2a0b      	cmp	r2, #11
 800caba:	d916      	bls.n	800caea <_malloc_r+0xba>
 800cabc:	1961      	adds	r1, r4, r5
 800cabe:	42a3      	cmp	r3, r4
 800cac0:	6025      	str	r5, [r4, #0]
 800cac2:	bf18      	it	ne
 800cac4:	6059      	strne	r1, [r3, #4]
 800cac6:	6863      	ldr	r3, [r4, #4]
 800cac8:	bf08      	it	eq
 800caca:	6031      	streq	r1, [r6, #0]
 800cacc:	5162      	str	r2, [r4, r5]
 800cace:	604b      	str	r3, [r1, #4]
 800cad0:	4638      	mov	r0, r7
 800cad2:	f104 060b 	add.w	r6, r4, #11
 800cad6:	f001 fb63 	bl	800e1a0 <__malloc_unlock>
 800cada:	f026 0607 	bic.w	r6, r6, #7
 800cade:	1d23      	adds	r3, r4, #4
 800cae0:	1af2      	subs	r2, r6, r3
 800cae2:	d0b6      	beq.n	800ca52 <_malloc_r+0x22>
 800cae4:	1b9b      	subs	r3, r3, r6
 800cae6:	50a3      	str	r3, [r4, r2]
 800cae8:	e7b3      	b.n	800ca52 <_malloc_r+0x22>
 800caea:	6862      	ldr	r2, [r4, #4]
 800caec:	42a3      	cmp	r3, r4
 800caee:	bf0c      	ite	eq
 800caf0:	6032      	streq	r2, [r6, #0]
 800caf2:	605a      	strne	r2, [r3, #4]
 800caf4:	e7ec      	b.n	800cad0 <_malloc_r+0xa0>
 800caf6:	4623      	mov	r3, r4
 800caf8:	6864      	ldr	r4, [r4, #4]
 800cafa:	e7b2      	b.n	800ca62 <_malloc_r+0x32>
 800cafc:	4634      	mov	r4, r6
 800cafe:	6876      	ldr	r6, [r6, #4]
 800cb00:	e7b9      	b.n	800ca76 <_malloc_r+0x46>
 800cb02:	230c      	movs	r3, #12
 800cb04:	603b      	str	r3, [r7, #0]
 800cb06:	4638      	mov	r0, r7
 800cb08:	f001 fb4a 	bl	800e1a0 <__malloc_unlock>
 800cb0c:	e7a1      	b.n	800ca52 <_malloc_r+0x22>
 800cb0e:	6025      	str	r5, [r4, #0]
 800cb10:	e7de      	b.n	800cad0 <_malloc_r+0xa0>
 800cb12:	bf00      	nop
 800cb14:	200010d0 	.word	0x200010d0

0800cb18 <__cvt>:
 800cb18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb1c:	ec55 4b10 	vmov	r4, r5, d0
 800cb20:	2d00      	cmp	r5, #0
 800cb22:	460e      	mov	r6, r1
 800cb24:	4619      	mov	r1, r3
 800cb26:	462b      	mov	r3, r5
 800cb28:	bfbb      	ittet	lt
 800cb2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cb2e:	461d      	movlt	r5, r3
 800cb30:	2300      	movge	r3, #0
 800cb32:	232d      	movlt	r3, #45	; 0x2d
 800cb34:	700b      	strb	r3, [r1, #0]
 800cb36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cb3c:	4691      	mov	r9, r2
 800cb3e:	f023 0820 	bic.w	r8, r3, #32
 800cb42:	bfbc      	itt	lt
 800cb44:	4622      	movlt	r2, r4
 800cb46:	4614      	movlt	r4, r2
 800cb48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb4c:	d005      	beq.n	800cb5a <__cvt+0x42>
 800cb4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cb52:	d100      	bne.n	800cb56 <__cvt+0x3e>
 800cb54:	3601      	adds	r6, #1
 800cb56:	2102      	movs	r1, #2
 800cb58:	e000      	b.n	800cb5c <__cvt+0x44>
 800cb5a:	2103      	movs	r1, #3
 800cb5c:	ab03      	add	r3, sp, #12
 800cb5e:	9301      	str	r3, [sp, #4]
 800cb60:	ab02      	add	r3, sp, #8
 800cb62:	9300      	str	r3, [sp, #0]
 800cb64:	ec45 4b10 	vmov	d0, r4, r5
 800cb68:	4653      	mov	r3, sl
 800cb6a:	4632      	mov	r2, r6
 800cb6c:	f000 fd20 	bl	800d5b0 <_dtoa_r>
 800cb70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cb74:	4607      	mov	r7, r0
 800cb76:	d102      	bne.n	800cb7e <__cvt+0x66>
 800cb78:	f019 0f01 	tst.w	r9, #1
 800cb7c:	d022      	beq.n	800cbc4 <__cvt+0xac>
 800cb7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb82:	eb07 0906 	add.w	r9, r7, r6
 800cb86:	d110      	bne.n	800cbaa <__cvt+0x92>
 800cb88:	783b      	ldrb	r3, [r7, #0]
 800cb8a:	2b30      	cmp	r3, #48	; 0x30
 800cb8c:	d10a      	bne.n	800cba4 <__cvt+0x8c>
 800cb8e:	2200      	movs	r2, #0
 800cb90:	2300      	movs	r3, #0
 800cb92:	4620      	mov	r0, r4
 800cb94:	4629      	mov	r1, r5
 800cb96:	f7f3 ff9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb9a:	b918      	cbnz	r0, 800cba4 <__cvt+0x8c>
 800cb9c:	f1c6 0601 	rsb	r6, r6, #1
 800cba0:	f8ca 6000 	str.w	r6, [sl]
 800cba4:	f8da 3000 	ldr.w	r3, [sl]
 800cba8:	4499      	add	r9, r3
 800cbaa:	2200      	movs	r2, #0
 800cbac:	2300      	movs	r3, #0
 800cbae:	4620      	mov	r0, r4
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	f7f3 ff91 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbb6:	b108      	cbz	r0, 800cbbc <__cvt+0xa4>
 800cbb8:	f8cd 900c 	str.w	r9, [sp, #12]
 800cbbc:	2230      	movs	r2, #48	; 0x30
 800cbbe:	9b03      	ldr	r3, [sp, #12]
 800cbc0:	454b      	cmp	r3, r9
 800cbc2:	d307      	bcc.n	800cbd4 <__cvt+0xbc>
 800cbc4:	9b03      	ldr	r3, [sp, #12]
 800cbc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbc8:	1bdb      	subs	r3, r3, r7
 800cbca:	4638      	mov	r0, r7
 800cbcc:	6013      	str	r3, [r2, #0]
 800cbce:	b004      	add	sp, #16
 800cbd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbd4:	1c59      	adds	r1, r3, #1
 800cbd6:	9103      	str	r1, [sp, #12]
 800cbd8:	701a      	strb	r2, [r3, #0]
 800cbda:	e7f0      	b.n	800cbbe <__cvt+0xa6>

0800cbdc <__exponent>:
 800cbdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2900      	cmp	r1, #0
 800cbe2:	bfb8      	it	lt
 800cbe4:	4249      	neglt	r1, r1
 800cbe6:	f803 2b02 	strb.w	r2, [r3], #2
 800cbea:	bfb4      	ite	lt
 800cbec:	222d      	movlt	r2, #45	; 0x2d
 800cbee:	222b      	movge	r2, #43	; 0x2b
 800cbf0:	2909      	cmp	r1, #9
 800cbf2:	7042      	strb	r2, [r0, #1]
 800cbf4:	dd2a      	ble.n	800cc4c <__exponent+0x70>
 800cbf6:	f10d 0407 	add.w	r4, sp, #7
 800cbfa:	46a4      	mov	ip, r4
 800cbfc:	270a      	movs	r7, #10
 800cbfe:	46a6      	mov	lr, r4
 800cc00:	460a      	mov	r2, r1
 800cc02:	fb91 f6f7 	sdiv	r6, r1, r7
 800cc06:	fb07 1516 	mls	r5, r7, r6, r1
 800cc0a:	3530      	adds	r5, #48	; 0x30
 800cc0c:	2a63      	cmp	r2, #99	; 0x63
 800cc0e:	f104 34ff 	add.w	r4, r4, #4294967295
 800cc12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cc16:	4631      	mov	r1, r6
 800cc18:	dcf1      	bgt.n	800cbfe <__exponent+0x22>
 800cc1a:	3130      	adds	r1, #48	; 0x30
 800cc1c:	f1ae 0502 	sub.w	r5, lr, #2
 800cc20:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cc24:	1c44      	adds	r4, r0, #1
 800cc26:	4629      	mov	r1, r5
 800cc28:	4561      	cmp	r1, ip
 800cc2a:	d30a      	bcc.n	800cc42 <__exponent+0x66>
 800cc2c:	f10d 0209 	add.w	r2, sp, #9
 800cc30:	eba2 020e 	sub.w	r2, r2, lr
 800cc34:	4565      	cmp	r5, ip
 800cc36:	bf88      	it	hi
 800cc38:	2200      	movhi	r2, #0
 800cc3a:	4413      	add	r3, r2
 800cc3c:	1a18      	subs	r0, r3, r0
 800cc3e:	b003      	add	sp, #12
 800cc40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc46:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cc4a:	e7ed      	b.n	800cc28 <__exponent+0x4c>
 800cc4c:	2330      	movs	r3, #48	; 0x30
 800cc4e:	3130      	adds	r1, #48	; 0x30
 800cc50:	7083      	strb	r3, [r0, #2]
 800cc52:	70c1      	strb	r1, [r0, #3]
 800cc54:	1d03      	adds	r3, r0, #4
 800cc56:	e7f1      	b.n	800cc3c <__exponent+0x60>

0800cc58 <_printf_float>:
 800cc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5c:	ed2d 8b02 	vpush	{d8}
 800cc60:	b08d      	sub	sp, #52	; 0x34
 800cc62:	460c      	mov	r4, r1
 800cc64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cc68:	4616      	mov	r6, r2
 800cc6a:	461f      	mov	r7, r3
 800cc6c:	4605      	mov	r5, r0
 800cc6e:	f001 fa8d 	bl	800e18c <_localeconv_r>
 800cc72:	f8d0 a000 	ldr.w	sl, [r0]
 800cc76:	4650      	mov	r0, sl
 800cc78:	f7f3 fab2 	bl	80001e0 <strlen>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	930a      	str	r3, [sp, #40]	; 0x28
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	9305      	str	r3, [sp, #20]
 800cc84:	f8d8 3000 	ldr.w	r3, [r8]
 800cc88:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cc8c:	3307      	adds	r3, #7
 800cc8e:	f023 0307 	bic.w	r3, r3, #7
 800cc92:	f103 0208 	add.w	r2, r3, #8
 800cc96:	f8c8 2000 	str.w	r2, [r8]
 800cc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cca2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cca6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ccaa:	9307      	str	r3, [sp, #28]
 800ccac:	f8cd 8018 	str.w	r8, [sp, #24]
 800ccb0:	ee08 0a10 	vmov	s16, r0
 800ccb4:	4b9f      	ldr	r3, [pc, #636]	; (800cf34 <_printf_float+0x2dc>)
 800ccb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccba:	f04f 32ff 	mov.w	r2, #4294967295
 800ccbe:	f7f3 ff3d 	bl	8000b3c <__aeabi_dcmpun>
 800ccc2:	bb88      	cbnz	r0, 800cd28 <_printf_float+0xd0>
 800ccc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccc8:	4b9a      	ldr	r3, [pc, #616]	; (800cf34 <_printf_float+0x2dc>)
 800ccca:	f04f 32ff 	mov.w	r2, #4294967295
 800ccce:	f7f3 ff17 	bl	8000b00 <__aeabi_dcmple>
 800ccd2:	bb48      	cbnz	r0, 800cd28 <_printf_float+0xd0>
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	4640      	mov	r0, r8
 800ccda:	4649      	mov	r1, r9
 800ccdc:	f7f3 ff06 	bl	8000aec <__aeabi_dcmplt>
 800cce0:	b110      	cbz	r0, 800cce8 <_printf_float+0x90>
 800cce2:	232d      	movs	r3, #45	; 0x2d
 800cce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cce8:	4b93      	ldr	r3, [pc, #588]	; (800cf38 <_printf_float+0x2e0>)
 800ccea:	4894      	ldr	r0, [pc, #592]	; (800cf3c <_printf_float+0x2e4>)
 800ccec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ccf0:	bf94      	ite	ls
 800ccf2:	4698      	movls	r8, r3
 800ccf4:	4680      	movhi	r8, r0
 800ccf6:	2303      	movs	r3, #3
 800ccf8:	6123      	str	r3, [r4, #16]
 800ccfa:	9b05      	ldr	r3, [sp, #20]
 800ccfc:	f023 0204 	bic.w	r2, r3, #4
 800cd00:	6022      	str	r2, [r4, #0]
 800cd02:	f04f 0900 	mov.w	r9, #0
 800cd06:	9700      	str	r7, [sp, #0]
 800cd08:	4633      	mov	r3, r6
 800cd0a:	aa0b      	add	r2, sp, #44	; 0x2c
 800cd0c:	4621      	mov	r1, r4
 800cd0e:	4628      	mov	r0, r5
 800cd10:	f000 f9d8 	bl	800d0c4 <_printf_common>
 800cd14:	3001      	adds	r0, #1
 800cd16:	f040 8090 	bne.w	800ce3a <_printf_float+0x1e2>
 800cd1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1e:	b00d      	add	sp, #52	; 0x34
 800cd20:	ecbd 8b02 	vpop	{d8}
 800cd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd28:	4642      	mov	r2, r8
 800cd2a:	464b      	mov	r3, r9
 800cd2c:	4640      	mov	r0, r8
 800cd2e:	4649      	mov	r1, r9
 800cd30:	f7f3 ff04 	bl	8000b3c <__aeabi_dcmpun>
 800cd34:	b140      	cbz	r0, 800cd48 <_printf_float+0xf0>
 800cd36:	464b      	mov	r3, r9
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	bfbc      	itt	lt
 800cd3c:	232d      	movlt	r3, #45	; 0x2d
 800cd3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cd42:	487f      	ldr	r0, [pc, #508]	; (800cf40 <_printf_float+0x2e8>)
 800cd44:	4b7f      	ldr	r3, [pc, #508]	; (800cf44 <_printf_float+0x2ec>)
 800cd46:	e7d1      	b.n	800ccec <_printf_float+0x94>
 800cd48:	6863      	ldr	r3, [r4, #4]
 800cd4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cd4e:	9206      	str	r2, [sp, #24]
 800cd50:	1c5a      	adds	r2, r3, #1
 800cd52:	d13f      	bne.n	800cdd4 <_printf_float+0x17c>
 800cd54:	2306      	movs	r3, #6
 800cd56:	6063      	str	r3, [r4, #4]
 800cd58:	9b05      	ldr	r3, [sp, #20]
 800cd5a:	6861      	ldr	r1, [r4, #4]
 800cd5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cd60:	2300      	movs	r3, #0
 800cd62:	9303      	str	r3, [sp, #12]
 800cd64:	ab0a      	add	r3, sp, #40	; 0x28
 800cd66:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cd6a:	ab09      	add	r3, sp, #36	; 0x24
 800cd6c:	ec49 8b10 	vmov	d0, r8, r9
 800cd70:	9300      	str	r3, [sp, #0]
 800cd72:	6022      	str	r2, [r4, #0]
 800cd74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cd78:	4628      	mov	r0, r5
 800cd7a:	f7ff fecd 	bl	800cb18 <__cvt>
 800cd7e:	9b06      	ldr	r3, [sp, #24]
 800cd80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd82:	2b47      	cmp	r3, #71	; 0x47
 800cd84:	4680      	mov	r8, r0
 800cd86:	d108      	bne.n	800cd9a <_printf_float+0x142>
 800cd88:	1cc8      	adds	r0, r1, #3
 800cd8a:	db02      	blt.n	800cd92 <_printf_float+0x13a>
 800cd8c:	6863      	ldr	r3, [r4, #4]
 800cd8e:	4299      	cmp	r1, r3
 800cd90:	dd41      	ble.n	800ce16 <_printf_float+0x1be>
 800cd92:	f1ab 0b02 	sub.w	fp, fp, #2
 800cd96:	fa5f fb8b 	uxtb.w	fp, fp
 800cd9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd9e:	d820      	bhi.n	800cde2 <_printf_float+0x18a>
 800cda0:	3901      	subs	r1, #1
 800cda2:	465a      	mov	r2, fp
 800cda4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cda8:	9109      	str	r1, [sp, #36]	; 0x24
 800cdaa:	f7ff ff17 	bl	800cbdc <__exponent>
 800cdae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdb0:	1813      	adds	r3, r2, r0
 800cdb2:	2a01      	cmp	r2, #1
 800cdb4:	4681      	mov	r9, r0
 800cdb6:	6123      	str	r3, [r4, #16]
 800cdb8:	dc02      	bgt.n	800cdc0 <_printf_float+0x168>
 800cdba:	6822      	ldr	r2, [r4, #0]
 800cdbc:	07d2      	lsls	r2, r2, #31
 800cdbe:	d501      	bpl.n	800cdc4 <_printf_float+0x16c>
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	6123      	str	r3, [r4, #16]
 800cdc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d09c      	beq.n	800cd06 <_printf_float+0xae>
 800cdcc:	232d      	movs	r3, #45	; 0x2d
 800cdce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdd2:	e798      	b.n	800cd06 <_printf_float+0xae>
 800cdd4:	9a06      	ldr	r2, [sp, #24]
 800cdd6:	2a47      	cmp	r2, #71	; 0x47
 800cdd8:	d1be      	bne.n	800cd58 <_printf_float+0x100>
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d1bc      	bne.n	800cd58 <_printf_float+0x100>
 800cdde:	2301      	movs	r3, #1
 800cde0:	e7b9      	b.n	800cd56 <_printf_float+0xfe>
 800cde2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cde6:	d118      	bne.n	800ce1a <_printf_float+0x1c2>
 800cde8:	2900      	cmp	r1, #0
 800cdea:	6863      	ldr	r3, [r4, #4]
 800cdec:	dd0b      	ble.n	800ce06 <_printf_float+0x1ae>
 800cdee:	6121      	str	r1, [r4, #16]
 800cdf0:	b913      	cbnz	r3, 800cdf8 <_printf_float+0x1a0>
 800cdf2:	6822      	ldr	r2, [r4, #0]
 800cdf4:	07d0      	lsls	r0, r2, #31
 800cdf6:	d502      	bpl.n	800cdfe <_printf_float+0x1a6>
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	440b      	add	r3, r1
 800cdfc:	6123      	str	r3, [r4, #16]
 800cdfe:	65a1      	str	r1, [r4, #88]	; 0x58
 800ce00:	f04f 0900 	mov.w	r9, #0
 800ce04:	e7de      	b.n	800cdc4 <_printf_float+0x16c>
 800ce06:	b913      	cbnz	r3, 800ce0e <_printf_float+0x1b6>
 800ce08:	6822      	ldr	r2, [r4, #0]
 800ce0a:	07d2      	lsls	r2, r2, #31
 800ce0c:	d501      	bpl.n	800ce12 <_printf_float+0x1ba>
 800ce0e:	3302      	adds	r3, #2
 800ce10:	e7f4      	b.n	800cdfc <_printf_float+0x1a4>
 800ce12:	2301      	movs	r3, #1
 800ce14:	e7f2      	b.n	800cdfc <_printf_float+0x1a4>
 800ce16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ce1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce1c:	4299      	cmp	r1, r3
 800ce1e:	db05      	blt.n	800ce2c <_printf_float+0x1d4>
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	6121      	str	r1, [r4, #16]
 800ce24:	07d8      	lsls	r0, r3, #31
 800ce26:	d5ea      	bpl.n	800cdfe <_printf_float+0x1a6>
 800ce28:	1c4b      	adds	r3, r1, #1
 800ce2a:	e7e7      	b.n	800cdfc <_printf_float+0x1a4>
 800ce2c:	2900      	cmp	r1, #0
 800ce2e:	bfd4      	ite	le
 800ce30:	f1c1 0202 	rsble	r2, r1, #2
 800ce34:	2201      	movgt	r2, #1
 800ce36:	4413      	add	r3, r2
 800ce38:	e7e0      	b.n	800cdfc <_printf_float+0x1a4>
 800ce3a:	6823      	ldr	r3, [r4, #0]
 800ce3c:	055a      	lsls	r2, r3, #21
 800ce3e:	d407      	bmi.n	800ce50 <_printf_float+0x1f8>
 800ce40:	6923      	ldr	r3, [r4, #16]
 800ce42:	4642      	mov	r2, r8
 800ce44:	4631      	mov	r1, r6
 800ce46:	4628      	mov	r0, r5
 800ce48:	47b8      	blx	r7
 800ce4a:	3001      	adds	r0, #1
 800ce4c:	d12c      	bne.n	800cea8 <_printf_float+0x250>
 800ce4e:	e764      	b.n	800cd1a <_printf_float+0xc2>
 800ce50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce54:	f240 80e0 	bls.w	800d018 <_printf_float+0x3c0>
 800ce58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	2300      	movs	r3, #0
 800ce60:	f7f3 fe3a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d034      	beq.n	800ced2 <_printf_float+0x27a>
 800ce68:	4a37      	ldr	r2, [pc, #220]	; (800cf48 <_printf_float+0x2f0>)
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	4631      	mov	r1, r6
 800ce6e:	4628      	mov	r0, r5
 800ce70:	47b8      	blx	r7
 800ce72:	3001      	adds	r0, #1
 800ce74:	f43f af51 	beq.w	800cd1a <_printf_float+0xc2>
 800ce78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	db02      	blt.n	800ce86 <_printf_float+0x22e>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	07d8      	lsls	r0, r3, #31
 800ce84:	d510      	bpl.n	800cea8 <_printf_float+0x250>
 800ce86:	ee18 3a10 	vmov	r3, s16
 800ce8a:	4652      	mov	r2, sl
 800ce8c:	4631      	mov	r1, r6
 800ce8e:	4628      	mov	r0, r5
 800ce90:	47b8      	blx	r7
 800ce92:	3001      	adds	r0, #1
 800ce94:	f43f af41 	beq.w	800cd1a <_printf_float+0xc2>
 800ce98:	f04f 0800 	mov.w	r8, #0
 800ce9c:	f104 091a 	add.w	r9, r4, #26
 800cea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cea2:	3b01      	subs	r3, #1
 800cea4:	4543      	cmp	r3, r8
 800cea6:	dc09      	bgt.n	800cebc <_printf_float+0x264>
 800cea8:	6823      	ldr	r3, [r4, #0]
 800ceaa:	079b      	lsls	r3, r3, #30
 800ceac:	f100 8105 	bmi.w	800d0ba <_printf_float+0x462>
 800ceb0:	68e0      	ldr	r0, [r4, #12]
 800ceb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ceb4:	4298      	cmp	r0, r3
 800ceb6:	bfb8      	it	lt
 800ceb8:	4618      	movlt	r0, r3
 800ceba:	e730      	b.n	800cd1e <_printf_float+0xc6>
 800cebc:	2301      	movs	r3, #1
 800cebe:	464a      	mov	r2, r9
 800cec0:	4631      	mov	r1, r6
 800cec2:	4628      	mov	r0, r5
 800cec4:	47b8      	blx	r7
 800cec6:	3001      	adds	r0, #1
 800cec8:	f43f af27 	beq.w	800cd1a <_printf_float+0xc2>
 800cecc:	f108 0801 	add.w	r8, r8, #1
 800ced0:	e7e6      	b.n	800cea0 <_printf_float+0x248>
 800ced2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	dc39      	bgt.n	800cf4c <_printf_float+0x2f4>
 800ced8:	4a1b      	ldr	r2, [pc, #108]	; (800cf48 <_printf_float+0x2f0>)
 800ceda:	2301      	movs	r3, #1
 800cedc:	4631      	mov	r1, r6
 800cede:	4628      	mov	r0, r5
 800cee0:	47b8      	blx	r7
 800cee2:	3001      	adds	r0, #1
 800cee4:	f43f af19 	beq.w	800cd1a <_printf_float+0xc2>
 800cee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ceec:	4313      	orrs	r3, r2
 800ceee:	d102      	bne.n	800cef6 <_printf_float+0x29e>
 800cef0:	6823      	ldr	r3, [r4, #0]
 800cef2:	07d9      	lsls	r1, r3, #31
 800cef4:	d5d8      	bpl.n	800cea8 <_printf_float+0x250>
 800cef6:	ee18 3a10 	vmov	r3, s16
 800cefa:	4652      	mov	r2, sl
 800cefc:	4631      	mov	r1, r6
 800cefe:	4628      	mov	r0, r5
 800cf00:	47b8      	blx	r7
 800cf02:	3001      	adds	r0, #1
 800cf04:	f43f af09 	beq.w	800cd1a <_printf_float+0xc2>
 800cf08:	f04f 0900 	mov.w	r9, #0
 800cf0c:	f104 0a1a 	add.w	sl, r4, #26
 800cf10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf12:	425b      	negs	r3, r3
 800cf14:	454b      	cmp	r3, r9
 800cf16:	dc01      	bgt.n	800cf1c <_printf_float+0x2c4>
 800cf18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf1a:	e792      	b.n	800ce42 <_printf_float+0x1ea>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	4652      	mov	r2, sl
 800cf20:	4631      	mov	r1, r6
 800cf22:	4628      	mov	r0, r5
 800cf24:	47b8      	blx	r7
 800cf26:	3001      	adds	r0, #1
 800cf28:	f43f aef7 	beq.w	800cd1a <_printf_float+0xc2>
 800cf2c:	f109 0901 	add.w	r9, r9, #1
 800cf30:	e7ee      	b.n	800cf10 <_printf_float+0x2b8>
 800cf32:	bf00      	nop
 800cf34:	7fefffff 	.word	0x7fefffff
 800cf38:	0800f7ec 	.word	0x0800f7ec
 800cf3c:	0800f7f0 	.word	0x0800f7f0
 800cf40:	0800f7f8 	.word	0x0800f7f8
 800cf44:	0800f7f4 	.word	0x0800f7f4
 800cf48:	0800f7fc 	.word	0x0800f7fc
 800cf4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf50:	429a      	cmp	r2, r3
 800cf52:	bfa8      	it	ge
 800cf54:	461a      	movge	r2, r3
 800cf56:	2a00      	cmp	r2, #0
 800cf58:	4691      	mov	r9, r2
 800cf5a:	dc37      	bgt.n	800cfcc <_printf_float+0x374>
 800cf5c:	f04f 0b00 	mov.w	fp, #0
 800cf60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf64:	f104 021a 	add.w	r2, r4, #26
 800cf68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf6a:	9305      	str	r3, [sp, #20]
 800cf6c:	eba3 0309 	sub.w	r3, r3, r9
 800cf70:	455b      	cmp	r3, fp
 800cf72:	dc33      	bgt.n	800cfdc <_printf_float+0x384>
 800cf74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	db3b      	blt.n	800cff4 <_printf_float+0x39c>
 800cf7c:	6823      	ldr	r3, [r4, #0]
 800cf7e:	07da      	lsls	r2, r3, #31
 800cf80:	d438      	bmi.n	800cff4 <_printf_float+0x39c>
 800cf82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf84:	9a05      	ldr	r2, [sp, #20]
 800cf86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf88:	1a9a      	subs	r2, r3, r2
 800cf8a:	eba3 0901 	sub.w	r9, r3, r1
 800cf8e:	4591      	cmp	r9, r2
 800cf90:	bfa8      	it	ge
 800cf92:	4691      	movge	r9, r2
 800cf94:	f1b9 0f00 	cmp.w	r9, #0
 800cf98:	dc35      	bgt.n	800d006 <_printf_float+0x3ae>
 800cf9a:	f04f 0800 	mov.w	r8, #0
 800cf9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfa2:	f104 0a1a 	add.w	sl, r4, #26
 800cfa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cfaa:	1a9b      	subs	r3, r3, r2
 800cfac:	eba3 0309 	sub.w	r3, r3, r9
 800cfb0:	4543      	cmp	r3, r8
 800cfb2:	f77f af79 	ble.w	800cea8 <_printf_float+0x250>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	4652      	mov	r2, sl
 800cfba:	4631      	mov	r1, r6
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	47b8      	blx	r7
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	f43f aeaa 	beq.w	800cd1a <_printf_float+0xc2>
 800cfc6:	f108 0801 	add.w	r8, r8, #1
 800cfca:	e7ec      	b.n	800cfa6 <_printf_float+0x34e>
 800cfcc:	4613      	mov	r3, r2
 800cfce:	4631      	mov	r1, r6
 800cfd0:	4642      	mov	r2, r8
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	47b8      	blx	r7
 800cfd6:	3001      	adds	r0, #1
 800cfd8:	d1c0      	bne.n	800cf5c <_printf_float+0x304>
 800cfda:	e69e      	b.n	800cd1a <_printf_float+0xc2>
 800cfdc:	2301      	movs	r3, #1
 800cfde:	4631      	mov	r1, r6
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	9205      	str	r2, [sp, #20]
 800cfe4:	47b8      	blx	r7
 800cfe6:	3001      	adds	r0, #1
 800cfe8:	f43f ae97 	beq.w	800cd1a <_printf_float+0xc2>
 800cfec:	9a05      	ldr	r2, [sp, #20]
 800cfee:	f10b 0b01 	add.w	fp, fp, #1
 800cff2:	e7b9      	b.n	800cf68 <_printf_float+0x310>
 800cff4:	ee18 3a10 	vmov	r3, s16
 800cff8:	4652      	mov	r2, sl
 800cffa:	4631      	mov	r1, r6
 800cffc:	4628      	mov	r0, r5
 800cffe:	47b8      	blx	r7
 800d000:	3001      	adds	r0, #1
 800d002:	d1be      	bne.n	800cf82 <_printf_float+0x32a>
 800d004:	e689      	b.n	800cd1a <_printf_float+0xc2>
 800d006:	9a05      	ldr	r2, [sp, #20]
 800d008:	464b      	mov	r3, r9
 800d00a:	4442      	add	r2, r8
 800d00c:	4631      	mov	r1, r6
 800d00e:	4628      	mov	r0, r5
 800d010:	47b8      	blx	r7
 800d012:	3001      	adds	r0, #1
 800d014:	d1c1      	bne.n	800cf9a <_printf_float+0x342>
 800d016:	e680      	b.n	800cd1a <_printf_float+0xc2>
 800d018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d01a:	2a01      	cmp	r2, #1
 800d01c:	dc01      	bgt.n	800d022 <_printf_float+0x3ca>
 800d01e:	07db      	lsls	r3, r3, #31
 800d020:	d538      	bpl.n	800d094 <_printf_float+0x43c>
 800d022:	2301      	movs	r3, #1
 800d024:	4642      	mov	r2, r8
 800d026:	4631      	mov	r1, r6
 800d028:	4628      	mov	r0, r5
 800d02a:	47b8      	blx	r7
 800d02c:	3001      	adds	r0, #1
 800d02e:	f43f ae74 	beq.w	800cd1a <_printf_float+0xc2>
 800d032:	ee18 3a10 	vmov	r3, s16
 800d036:	4652      	mov	r2, sl
 800d038:	4631      	mov	r1, r6
 800d03a:	4628      	mov	r0, r5
 800d03c:	47b8      	blx	r7
 800d03e:	3001      	adds	r0, #1
 800d040:	f43f ae6b 	beq.w	800cd1a <_printf_float+0xc2>
 800d044:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d048:	2200      	movs	r2, #0
 800d04a:	2300      	movs	r3, #0
 800d04c:	f7f3 fd44 	bl	8000ad8 <__aeabi_dcmpeq>
 800d050:	b9d8      	cbnz	r0, 800d08a <_printf_float+0x432>
 800d052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d054:	f108 0201 	add.w	r2, r8, #1
 800d058:	3b01      	subs	r3, #1
 800d05a:	4631      	mov	r1, r6
 800d05c:	4628      	mov	r0, r5
 800d05e:	47b8      	blx	r7
 800d060:	3001      	adds	r0, #1
 800d062:	d10e      	bne.n	800d082 <_printf_float+0x42a>
 800d064:	e659      	b.n	800cd1a <_printf_float+0xc2>
 800d066:	2301      	movs	r3, #1
 800d068:	4652      	mov	r2, sl
 800d06a:	4631      	mov	r1, r6
 800d06c:	4628      	mov	r0, r5
 800d06e:	47b8      	blx	r7
 800d070:	3001      	adds	r0, #1
 800d072:	f43f ae52 	beq.w	800cd1a <_printf_float+0xc2>
 800d076:	f108 0801 	add.w	r8, r8, #1
 800d07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d07c:	3b01      	subs	r3, #1
 800d07e:	4543      	cmp	r3, r8
 800d080:	dcf1      	bgt.n	800d066 <_printf_float+0x40e>
 800d082:	464b      	mov	r3, r9
 800d084:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d088:	e6dc      	b.n	800ce44 <_printf_float+0x1ec>
 800d08a:	f04f 0800 	mov.w	r8, #0
 800d08e:	f104 0a1a 	add.w	sl, r4, #26
 800d092:	e7f2      	b.n	800d07a <_printf_float+0x422>
 800d094:	2301      	movs	r3, #1
 800d096:	4642      	mov	r2, r8
 800d098:	e7df      	b.n	800d05a <_printf_float+0x402>
 800d09a:	2301      	movs	r3, #1
 800d09c:	464a      	mov	r2, r9
 800d09e:	4631      	mov	r1, r6
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	47b8      	blx	r7
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	f43f ae38 	beq.w	800cd1a <_printf_float+0xc2>
 800d0aa:	f108 0801 	add.w	r8, r8, #1
 800d0ae:	68e3      	ldr	r3, [r4, #12]
 800d0b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d0b2:	1a5b      	subs	r3, r3, r1
 800d0b4:	4543      	cmp	r3, r8
 800d0b6:	dcf0      	bgt.n	800d09a <_printf_float+0x442>
 800d0b8:	e6fa      	b.n	800ceb0 <_printf_float+0x258>
 800d0ba:	f04f 0800 	mov.w	r8, #0
 800d0be:	f104 0919 	add.w	r9, r4, #25
 800d0c2:	e7f4      	b.n	800d0ae <_printf_float+0x456>

0800d0c4 <_printf_common>:
 800d0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c8:	4616      	mov	r6, r2
 800d0ca:	4699      	mov	r9, r3
 800d0cc:	688a      	ldr	r2, [r1, #8]
 800d0ce:	690b      	ldr	r3, [r1, #16]
 800d0d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	bfb8      	it	lt
 800d0d8:	4613      	movlt	r3, r2
 800d0da:	6033      	str	r3, [r6, #0]
 800d0dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0e0:	4607      	mov	r7, r0
 800d0e2:	460c      	mov	r4, r1
 800d0e4:	b10a      	cbz	r2, 800d0ea <_printf_common+0x26>
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	6033      	str	r3, [r6, #0]
 800d0ea:	6823      	ldr	r3, [r4, #0]
 800d0ec:	0699      	lsls	r1, r3, #26
 800d0ee:	bf42      	ittt	mi
 800d0f0:	6833      	ldrmi	r3, [r6, #0]
 800d0f2:	3302      	addmi	r3, #2
 800d0f4:	6033      	strmi	r3, [r6, #0]
 800d0f6:	6825      	ldr	r5, [r4, #0]
 800d0f8:	f015 0506 	ands.w	r5, r5, #6
 800d0fc:	d106      	bne.n	800d10c <_printf_common+0x48>
 800d0fe:	f104 0a19 	add.w	sl, r4, #25
 800d102:	68e3      	ldr	r3, [r4, #12]
 800d104:	6832      	ldr	r2, [r6, #0]
 800d106:	1a9b      	subs	r3, r3, r2
 800d108:	42ab      	cmp	r3, r5
 800d10a:	dc26      	bgt.n	800d15a <_printf_common+0x96>
 800d10c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d110:	1e13      	subs	r3, r2, #0
 800d112:	6822      	ldr	r2, [r4, #0]
 800d114:	bf18      	it	ne
 800d116:	2301      	movne	r3, #1
 800d118:	0692      	lsls	r2, r2, #26
 800d11a:	d42b      	bmi.n	800d174 <_printf_common+0xb0>
 800d11c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d120:	4649      	mov	r1, r9
 800d122:	4638      	mov	r0, r7
 800d124:	47c0      	blx	r8
 800d126:	3001      	adds	r0, #1
 800d128:	d01e      	beq.n	800d168 <_printf_common+0xa4>
 800d12a:	6823      	ldr	r3, [r4, #0]
 800d12c:	68e5      	ldr	r5, [r4, #12]
 800d12e:	6832      	ldr	r2, [r6, #0]
 800d130:	f003 0306 	and.w	r3, r3, #6
 800d134:	2b04      	cmp	r3, #4
 800d136:	bf08      	it	eq
 800d138:	1aad      	subeq	r5, r5, r2
 800d13a:	68a3      	ldr	r3, [r4, #8]
 800d13c:	6922      	ldr	r2, [r4, #16]
 800d13e:	bf0c      	ite	eq
 800d140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d144:	2500      	movne	r5, #0
 800d146:	4293      	cmp	r3, r2
 800d148:	bfc4      	itt	gt
 800d14a:	1a9b      	subgt	r3, r3, r2
 800d14c:	18ed      	addgt	r5, r5, r3
 800d14e:	2600      	movs	r6, #0
 800d150:	341a      	adds	r4, #26
 800d152:	42b5      	cmp	r5, r6
 800d154:	d11a      	bne.n	800d18c <_printf_common+0xc8>
 800d156:	2000      	movs	r0, #0
 800d158:	e008      	b.n	800d16c <_printf_common+0xa8>
 800d15a:	2301      	movs	r3, #1
 800d15c:	4652      	mov	r2, sl
 800d15e:	4649      	mov	r1, r9
 800d160:	4638      	mov	r0, r7
 800d162:	47c0      	blx	r8
 800d164:	3001      	adds	r0, #1
 800d166:	d103      	bne.n	800d170 <_printf_common+0xac>
 800d168:	f04f 30ff 	mov.w	r0, #4294967295
 800d16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d170:	3501      	adds	r5, #1
 800d172:	e7c6      	b.n	800d102 <_printf_common+0x3e>
 800d174:	18e1      	adds	r1, r4, r3
 800d176:	1c5a      	adds	r2, r3, #1
 800d178:	2030      	movs	r0, #48	; 0x30
 800d17a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d17e:	4422      	add	r2, r4
 800d180:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d184:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d188:	3302      	adds	r3, #2
 800d18a:	e7c7      	b.n	800d11c <_printf_common+0x58>
 800d18c:	2301      	movs	r3, #1
 800d18e:	4622      	mov	r2, r4
 800d190:	4649      	mov	r1, r9
 800d192:	4638      	mov	r0, r7
 800d194:	47c0      	blx	r8
 800d196:	3001      	adds	r0, #1
 800d198:	d0e6      	beq.n	800d168 <_printf_common+0xa4>
 800d19a:	3601      	adds	r6, #1
 800d19c:	e7d9      	b.n	800d152 <_printf_common+0x8e>
	...

0800d1a0 <_printf_i>:
 800d1a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a4:	7e0f      	ldrb	r7, [r1, #24]
 800d1a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d1a8:	2f78      	cmp	r7, #120	; 0x78
 800d1aa:	4691      	mov	r9, r2
 800d1ac:	4680      	mov	r8, r0
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	469a      	mov	sl, r3
 800d1b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d1b6:	d807      	bhi.n	800d1c8 <_printf_i+0x28>
 800d1b8:	2f62      	cmp	r7, #98	; 0x62
 800d1ba:	d80a      	bhi.n	800d1d2 <_printf_i+0x32>
 800d1bc:	2f00      	cmp	r7, #0
 800d1be:	f000 80d8 	beq.w	800d372 <_printf_i+0x1d2>
 800d1c2:	2f58      	cmp	r7, #88	; 0x58
 800d1c4:	f000 80a3 	beq.w	800d30e <_printf_i+0x16e>
 800d1c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1d0:	e03a      	b.n	800d248 <_printf_i+0xa8>
 800d1d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1d6:	2b15      	cmp	r3, #21
 800d1d8:	d8f6      	bhi.n	800d1c8 <_printf_i+0x28>
 800d1da:	a101      	add	r1, pc, #4	; (adr r1, 800d1e0 <_printf_i+0x40>)
 800d1dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1e0:	0800d239 	.word	0x0800d239
 800d1e4:	0800d24d 	.word	0x0800d24d
 800d1e8:	0800d1c9 	.word	0x0800d1c9
 800d1ec:	0800d1c9 	.word	0x0800d1c9
 800d1f0:	0800d1c9 	.word	0x0800d1c9
 800d1f4:	0800d1c9 	.word	0x0800d1c9
 800d1f8:	0800d24d 	.word	0x0800d24d
 800d1fc:	0800d1c9 	.word	0x0800d1c9
 800d200:	0800d1c9 	.word	0x0800d1c9
 800d204:	0800d1c9 	.word	0x0800d1c9
 800d208:	0800d1c9 	.word	0x0800d1c9
 800d20c:	0800d359 	.word	0x0800d359
 800d210:	0800d27d 	.word	0x0800d27d
 800d214:	0800d33b 	.word	0x0800d33b
 800d218:	0800d1c9 	.word	0x0800d1c9
 800d21c:	0800d1c9 	.word	0x0800d1c9
 800d220:	0800d37b 	.word	0x0800d37b
 800d224:	0800d1c9 	.word	0x0800d1c9
 800d228:	0800d27d 	.word	0x0800d27d
 800d22c:	0800d1c9 	.word	0x0800d1c9
 800d230:	0800d1c9 	.word	0x0800d1c9
 800d234:	0800d343 	.word	0x0800d343
 800d238:	682b      	ldr	r3, [r5, #0]
 800d23a:	1d1a      	adds	r2, r3, #4
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	602a      	str	r2, [r5, #0]
 800d240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d248:	2301      	movs	r3, #1
 800d24a:	e0a3      	b.n	800d394 <_printf_i+0x1f4>
 800d24c:	6820      	ldr	r0, [r4, #0]
 800d24e:	6829      	ldr	r1, [r5, #0]
 800d250:	0606      	lsls	r6, r0, #24
 800d252:	f101 0304 	add.w	r3, r1, #4
 800d256:	d50a      	bpl.n	800d26e <_printf_i+0xce>
 800d258:	680e      	ldr	r6, [r1, #0]
 800d25a:	602b      	str	r3, [r5, #0]
 800d25c:	2e00      	cmp	r6, #0
 800d25e:	da03      	bge.n	800d268 <_printf_i+0xc8>
 800d260:	232d      	movs	r3, #45	; 0x2d
 800d262:	4276      	negs	r6, r6
 800d264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d268:	485e      	ldr	r0, [pc, #376]	; (800d3e4 <_printf_i+0x244>)
 800d26a:	230a      	movs	r3, #10
 800d26c:	e019      	b.n	800d2a2 <_printf_i+0x102>
 800d26e:	680e      	ldr	r6, [r1, #0]
 800d270:	602b      	str	r3, [r5, #0]
 800d272:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d276:	bf18      	it	ne
 800d278:	b236      	sxthne	r6, r6
 800d27a:	e7ef      	b.n	800d25c <_printf_i+0xbc>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	6820      	ldr	r0, [r4, #0]
 800d280:	1d19      	adds	r1, r3, #4
 800d282:	6029      	str	r1, [r5, #0]
 800d284:	0601      	lsls	r1, r0, #24
 800d286:	d501      	bpl.n	800d28c <_printf_i+0xec>
 800d288:	681e      	ldr	r6, [r3, #0]
 800d28a:	e002      	b.n	800d292 <_printf_i+0xf2>
 800d28c:	0646      	lsls	r6, r0, #25
 800d28e:	d5fb      	bpl.n	800d288 <_printf_i+0xe8>
 800d290:	881e      	ldrh	r6, [r3, #0]
 800d292:	4854      	ldr	r0, [pc, #336]	; (800d3e4 <_printf_i+0x244>)
 800d294:	2f6f      	cmp	r7, #111	; 0x6f
 800d296:	bf0c      	ite	eq
 800d298:	2308      	moveq	r3, #8
 800d29a:	230a      	movne	r3, #10
 800d29c:	2100      	movs	r1, #0
 800d29e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d2a2:	6865      	ldr	r5, [r4, #4]
 800d2a4:	60a5      	str	r5, [r4, #8]
 800d2a6:	2d00      	cmp	r5, #0
 800d2a8:	bfa2      	ittt	ge
 800d2aa:	6821      	ldrge	r1, [r4, #0]
 800d2ac:	f021 0104 	bicge.w	r1, r1, #4
 800d2b0:	6021      	strge	r1, [r4, #0]
 800d2b2:	b90e      	cbnz	r6, 800d2b8 <_printf_i+0x118>
 800d2b4:	2d00      	cmp	r5, #0
 800d2b6:	d04d      	beq.n	800d354 <_printf_i+0x1b4>
 800d2b8:	4615      	mov	r5, r2
 800d2ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800d2be:	fb03 6711 	mls	r7, r3, r1, r6
 800d2c2:	5dc7      	ldrb	r7, [r0, r7]
 800d2c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d2c8:	4637      	mov	r7, r6
 800d2ca:	42bb      	cmp	r3, r7
 800d2cc:	460e      	mov	r6, r1
 800d2ce:	d9f4      	bls.n	800d2ba <_printf_i+0x11a>
 800d2d0:	2b08      	cmp	r3, #8
 800d2d2:	d10b      	bne.n	800d2ec <_printf_i+0x14c>
 800d2d4:	6823      	ldr	r3, [r4, #0]
 800d2d6:	07de      	lsls	r6, r3, #31
 800d2d8:	d508      	bpl.n	800d2ec <_printf_i+0x14c>
 800d2da:	6923      	ldr	r3, [r4, #16]
 800d2dc:	6861      	ldr	r1, [r4, #4]
 800d2de:	4299      	cmp	r1, r3
 800d2e0:	bfde      	ittt	le
 800d2e2:	2330      	movle	r3, #48	; 0x30
 800d2e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d2ec:	1b52      	subs	r2, r2, r5
 800d2ee:	6122      	str	r2, [r4, #16]
 800d2f0:	f8cd a000 	str.w	sl, [sp]
 800d2f4:	464b      	mov	r3, r9
 800d2f6:	aa03      	add	r2, sp, #12
 800d2f8:	4621      	mov	r1, r4
 800d2fa:	4640      	mov	r0, r8
 800d2fc:	f7ff fee2 	bl	800d0c4 <_printf_common>
 800d300:	3001      	adds	r0, #1
 800d302:	d14c      	bne.n	800d39e <_printf_i+0x1fe>
 800d304:	f04f 30ff 	mov.w	r0, #4294967295
 800d308:	b004      	add	sp, #16
 800d30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d30e:	4835      	ldr	r0, [pc, #212]	; (800d3e4 <_printf_i+0x244>)
 800d310:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d314:	6829      	ldr	r1, [r5, #0]
 800d316:	6823      	ldr	r3, [r4, #0]
 800d318:	f851 6b04 	ldr.w	r6, [r1], #4
 800d31c:	6029      	str	r1, [r5, #0]
 800d31e:	061d      	lsls	r5, r3, #24
 800d320:	d514      	bpl.n	800d34c <_printf_i+0x1ac>
 800d322:	07df      	lsls	r7, r3, #31
 800d324:	bf44      	itt	mi
 800d326:	f043 0320 	orrmi.w	r3, r3, #32
 800d32a:	6023      	strmi	r3, [r4, #0]
 800d32c:	b91e      	cbnz	r6, 800d336 <_printf_i+0x196>
 800d32e:	6823      	ldr	r3, [r4, #0]
 800d330:	f023 0320 	bic.w	r3, r3, #32
 800d334:	6023      	str	r3, [r4, #0]
 800d336:	2310      	movs	r3, #16
 800d338:	e7b0      	b.n	800d29c <_printf_i+0xfc>
 800d33a:	6823      	ldr	r3, [r4, #0]
 800d33c:	f043 0320 	orr.w	r3, r3, #32
 800d340:	6023      	str	r3, [r4, #0]
 800d342:	2378      	movs	r3, #120	; 0x78
 800d344:	4828      	ldr	r0, [pc, #160]	; (800d3e8 <_printf_i+0x248>)
 800d346:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d34a:	e7e3      	b.n	800d314 <_printf_i+0x174>
 800d34c:	0659      	lsls	r1, r3, #25
 800d34e:	bf48      	it	mi
 800d350:	b2b6      	uxthmi	r6, r6
 800d352:	e7e6      	b.n	800d322 <_printf_i+0x182>
 800d354:	4615      	mov	r5, r2
 800d356:	e7bb      	b.n	800d2d0 <_printf_i+0x130>
 800d358:	682b      	ldr	r3, [r5, #0]
 800d35a:	6826      	ldr	r6, [r4, #0]
 800d35c:	6961      	ldr	r1, [r4, #20]
 800d35e:	1d18      	adds	r0, r3, #4
 800d360:	6028      	str	r0, [r5, #0]
 800d362:	0635      	lsls	r5, r6, #24
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	d501      	bpl.n	800d36c <_printf_i+0x1cc>
 800d368:	6019      	str	r1, [r3, #0]
 800d36a:	e002      	b.n	800d372 <_printf_i+0x1d2>
 800d36c:	0670      	lsls	r0, r6, #25
 800d36e:	d5fb      	bpl.n	800d368 <_printf_i+0x1c8>
 800d370:	8019      	strh	r1, [r3, #0]
 800d372:	2300      	movs	r3, #0
 800d374:	6123      	str	r3, [r4, #16]
 800d376:	4615      	mov	r5, r2
 800d378:	e7ba      	b.n	800d2f0 <_printf_i+0x150>
 800d37a:	682b      	ldr	r3, [r5, #0]
 800d37c:	1d1a      	adds	r2, r3, #4
 800d37e:	602a      	str	r2, [r5, #0]
 800d380:	681d      	ldr	r5, [r3, #0]
 800d382:	6862      	ldr	r2, [r4, #4]
 800d384:	2100      	movs	r1, #0
 800d386:	4628      	mov	r0, r5
 800d388:	f7f2 ff32 	bl	80001f0 <memchr>
 800d38c:	b108      	cbz	r0, 800d392 <_printf_i+0x1f2>
 800d38e:	1b40      	subs	r0, r0, r5
 800d390:	6060      	str	r0, [r4, #4]
 800d392:	6863      	ldr	r3, [r4, #4]
 800d394:	6123      	str	r3, [r4, #16]
 800d396:	2300      	movs	r3, #0
 800d398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d39c:	e7a8      	b.n	800d2f0 <_printf_i+0x150>
 800d39e:	6923      	ldr	r3, [r4, #16]
 800d3a0:	462a      	mov	r2, r5
 800d3a2:	4649      	mov	r1, r9
 800d3a4:	4640      	mov	r0, r8
 800d3a6:	47d0      	blx	sl
 800d3a8:	3001      	adds	r0, #1
 800d3aa:	d0ab      	beq.n	800d304 <_printf_i+0x164>
 800d3ac:	6823      	ldr	r3, [r4, #0]
 800d3ae:	079b      	lsls	r3, r3, #30
 800d3b0:	d413      	bmi.n	800d3da <_printf_i+0x23a>
 800d3b2:	68e0      	ldr	r0, [r4, #12]
 800d3b4:	9b03      	ldr	r3, [sp, #12]
 800d3b6:	4298      	cmp	r0, r3
 800d3b8:	bfb8      	it	lt
 800d3ba:	4618      	movlt	r0, r3
 800d3bc:	e7a4      	b.n	800d308 <_printf_i+0x168>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	4632      	mov	r2, r6
 800d3c2:	4649      	mov	r1, r9
 800d3c4:	4640      	mov	r0, r8
 800d3c6:	47d0      	blx	sl
 800d3c8:	3001      	adds	r0, #1
 800d3ca:	d09b      	beq.n	800d304 <_printf_i+0x164>
 800d3cc:	3501      	adds	r5, #1
 800d3ce:	68e3      	ldr	r3, [r4, #12]
 800d3d0:	9903      	ldr	r1, [sp, #12]
 800d3d2:	1a5b      	subs	r3, r3, r1
 800d3d4:	42ab      	cmp	r3, r5
 800d3d6:	dcf2      	bgt.n	800d3be <_printf_i+0x21e>
 800d3d8:	e7eb      	b.n	800d3b2 <_printf_i+0x212>
 800d3da:	2500      	movs	r5, #0
 800d3dc:	f104 0619 	add.w	r6, r4, #25
 800d3e0:	e7f5      	b.n	800d3ce <_printf_i+0x22e>
 800d3e2:	bf00      	nop
 800d3e4:	0800f7fe 	.word	0x0800f7fe
 800d3e8:	0800f80f 	.word	0x0800f80f

0800d3ec <_sbrk_r>:
 800d3ec:	b538      	push	{r3, r4, r5, lr}
 800d3ee:	4d06      	ldr	r5, [pc, #24]	; (800d408 <_sbrk_r+0x1c>)
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	4604      	mov	r4, r0
 800d3f4:	4608      	mov	r0, r1
 800d3f6:	602b      	str	r3, [r5, #0]
 800d3f8:	f7f7 fed2 	bl	80051a0 <_sbrk>
 800d3fc:	1c43      	adds	r3, r0, #1
 800d3fe:	d102      	bne.n	800d406 <_sbrk_r+0x1a>
 800d400:	682b      	ldr	r3, [r5, #0]
 800d402:	b103      	cbz	r3, 800d406 <_sbrk_r+0x1a>
 800d404:	6023      	str	r3, [r4, #0]
 800d406:	bd38      	pop	{r3, r4, r5, pc}
 800d408:	200010d8 	.word	0x200010d8

0800d40c <_raise_r>:
 800d40c:	291f      	cmp	r1, #31
 800d40e:	b538      	push	{r3, r4, r5, lr}
 800d410:	4604      	mov	r4, r0
 800d412:	460d      	mov	r5, r1
 800d414:	d904      	bls.n	800d420 <_raise_r+0x14>
 800d416:	2316      	movs	r3, #22
 800d418:	6003      	str	r3, [r0, #0]
 800d41a:	f04f 30ff 	mov.w	r0, #4294967295
 800d41e:	bd38      	pop	{r3, r4, r5, pc}
 800d420:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d422:	b112      	cbz	r2, 800d42a <_raise_r+0x1e>
 800d424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d428:	b94b      	cbnz	r3, 800d43e <_raise_r+0x32>
 800d42a:	4620      	mov	r0, r4
 800d42c:	f000 f830 	bl	800d490 <_getpid_r>
 800d430:	462a      	mov	r2, r5
 800d432:	4601      	mov	r1, r0
 800d434:	4620      	mov	r0, r4
 800d436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d43a:	f000 b817 	b.w	800d46c <_kill_r>
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d00a      	beq.n	800d458 <_raise_r+0x4c>
 800d442:	1c59      	adds	r1, r3, #1
 800d444:	d103      	bne.n	800d44e <_raise_r+0x42>
 800d446:	2316      	movs	r3, #22
 800d448:	6003      	str	r3, [r0, #0]
 800d44a:	2001      	movs	r0, #1
 800d44c:	e7e7      	b.n	800d41e <_raise_r+0x12>
 800d44e:	2400      	movs	r4, #0
 800d450:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d454:	4628      	mov	r0, r5
 800d456:	4798      	blx	r3
 800d458:	2000      	movs	r0, #0
 800d45a:	e7e0      	b.n	800d41e <_raise_r+0x12>

0800d45c <raise>:
 800d45c:	4b02      	ldr	r3, [pc, #8]	; (800d468 <raise+0xc>)
 800d45e:	4601      	mov	r1, r0
 800d460:	6818      	ldr	r0, [r3, #0]
 800d462:	f7ff bfd3 	b.w	800d40c <_raise_r>
 800d466:	bf00      	nop
 800d468:	2000000c 	.word	0x2000000c

0800d46c <_kill_r>:
 800d46c:	b538      	push	{r3, r4, r5, lr}
 800d46e:	4d07      	ldr	r5, [pc, #28]	; (800d48c <_kill_r+0x20>)
 800d470:	2300      	movs	r3, #0
 800d472:	4604      	mov	r4, r0
 800d474:	4608      	mov	r0, r1
 800d476:	4611      	mov	r1, r2
 800d478:	602b      	str	r3, [r5, #0]
 800d47a:	f7f7 fe09 	bl	8005090 <_kill>
 800d47e:	1c43      	adds	r3, r0, #1
 800d480:	d102      	bne.n	800d488 <_kill_r+0x1c>
 800d482:	682b      	ldr	r3, [r5, #0]
 800d484:	b103      	cbz	r3, 800d488 <_kill_r+0x1c>
 800d486:	6023      	str	r3, [r4, #0]
 800d488:	bd38      	pop	{r3, r4, r5, pc}
 800d48a:	bf00      	nop
 800d48c:	200010d8 	.word	0x200010d8

0800d490 <_getpid_r>:
 800d490:	f7f7 bdf6 	b.w	8005080 <_getpid>

0800d494 <quorem>:
 800d494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d498:	6903      	ldr	r3, [r0, #16]
 800d49a:	690c      	ldr	r4, [r1, #16]
 800d49c:	42a3      	cmp	r3, r4
 800d49e:	4607      	mov	r7, r0
 800d4a0:	f2c0 8081 	blt.w	800d5a6 <quorem+0x112>
 800d4a4:	3c01      	subs	r4, #1
 800d4a6:	f101 0814 	add.w	r8, r1, #20
 800d4aa:	f100 0514 	add.w	r5, r0, #20
 800d4ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4b2:	9301      	str	r3, [sp, #4]
 800d4b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d4b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d4c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d4c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d4cc:	d331      	bcc.n	800d532 <quorem+0x9e>
 800d4ce:	f04f 0e00 	mov.w	lr, #0
 800d4d2:	4640      	mov	r0, r8
 800d4d4:	46ac      	mov	ip, r5
 800d4d6:	46f2      	mov	sl, lr
 800d4d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800d4dc:	b293      	uxth	r3, r2
 800d4de:	fb06 e303 	mla	r3, r6, r3, lr
 800d4e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	ebaa 0303 	sub.w	r3, sl, r3
 800d4ec:	f8dc a000 	ldr.w	sl, [ip]
 800d4f0:	0c12      	lsrs	r2, r2, #16
 800d4f2:	fa13 f38a 	uxtah	r3, r3, sl
 800d4f6:	fb06 e202 	mla	r2, r6, r2, lr
 800d4fa:	9300      	str	r3, [sp, #0]
 800d4fc:	9b00      	ldr	r3, [sp, #0]
 800d4fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d502:	b292      	uxth	r2, r2
 800d504:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d508:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d50c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d510:	4581      	cmp	r9, r0
 800d512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d516:	f84c 3b04 	str.w	r3, [ip], #4
 800d51a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d51e:	d2db      	bcs.n	800d4d8 <quorem+0x44>
 800d520:	f855 300b 	ldr.w	r3, [r5, fp]
 800d524:	b92b      	cbnz	r3, 800d532 <quorem+0x9e>
 800d526:	9b01      	ldr	r3, [sp, #4]
 800d528:	3b04      	subs	r3, #4
 800d52a:	429d      	cmp	r5, r3
 800d52c:	461a      	mov	r2, r3
 800d52e:	d32e      	bcc.n	800d58e <quorem+0xfa>
 800d530:	613c      	str	r4, [r7, #16]
 800d532:	4638      	mov	r0, r7
 800d534:	f001 f8bc 	bl	800e6b0 <__mcmp>
 800d538:	2800      	cmp	r0, #0
 800d53a:	db24      	blt.n	800d586 <quorem+0xf2>
 800d53c:	3601      	adds	r6, #1
 800d53e:	4628      	mov	r0, r5
 800d540:	f04f 0c00 	mov.w	ip, #0
 800d544:	f858 2b04 	ldr.w	r2, [r8], #4
 800d548:	f8d0 e000 	ldr.w	lr, [r0]
 800d54c:	b293      	uxth	r3, r2
 800d54e:	ebac 0303 	sub.w	r3, ip, r3
 800d552:	0c12      	lsrs	r2, r2, #16
 800d554:	fa13 f38e 	uxtah	r3, r3, lr
 800d558:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d55c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d560:	b29b      	uxth	r3, r3
 800d562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d566:	45c1      	cmp	r9, r8
 800d568:	f840 3b04 	str.w	r3, [r0], #4
 800d56c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d570:	d2e8      	bcs.n	800d544 <quorem+0xb0>
 800d572:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d576:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d57a:	b922      	cbnz	r2, 800d586 <quorem+0xf2>
 800d57c:	3b04      	subs	r3, #4
 800d57e:	429d      	cmp	r5, r3
 800d580:	461a      	mov	r2, r3
 800d582:	d30a      	bcc.n	800d59a <quorem+0x106>
 800d584:	613c      	str	r4, [r7, #16]
 800d586:	4630      	mov	r0, r6
 800d588:	b003      	add	sp, #12
 800d58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d58e:	6812      	ldr	r2, [r2, #0]
 800d590:	3b04      	subs	r3, #4
 800d592:	2a00      	cmp	r2, #0
 800d594:	d1cc      	bne.n	800d530 <quorem+0x9c>
 800d596:	3c01      	subs	r4, #1
 800d598:	e7c7      	b.n	800d52a <quorem+0x96>
 800d59a:	6812      	ldr	r2, [r2, #0]
 800d59c:	3b04      	subs	r3, #4
 800d59e:	2a00      	cmp	r2, #0
 800d5a0:	d1f0      	bne.n	800d584 <quorem+0xf0>
 800d5a2:	3c01      	subs	r4, #1
 800d5a4:	e7eb      	b.n	800d57e <quorem+0xea>
 800d5a6:	2000      	movs	r0, #0
 800d5a8:	e7ee      	b.n	800d588 <quorem+0xf4>
 800d5aa:	0000      	movs	r0, r0
 800d5ac:	0000      	movs	r0, r0
	...

0800d5b0 <_dtoa_r>:
 800d5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b4:	ed2d 8b04 	vpush	{d8-d9}
 800d5b8:	ec57 6b10 	vmov	r6, r7, d0
 800d5bc:	b093      	sub	sp, #76	; 0x4c
 800d5be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d5c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d5c4:	9106      	str	r1, [sp, #24]
 800d5c6:	ee10 aa10 	vmov	sl, s0
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	9209      	str	r2, [sp, #36]	; 0x24
 800d5ce:	930c      	str	r3, [sp, #48]	; 0x30
 800d5d0:	46bb      	mov	fp, r7
 800d5d2:	b975      	cbnz	r5, 800d5f2 <_dtoa_r+0x42>
 800d5d4:	2010      	movs	r0, #16
 800d5d6:	f7ff f97f 	bl	800c8d8 <malloc>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	6260      	str	r0, [r4, #36]	; 0x24
 800d5de:	b920      	cbnz	r0, 800d5ea <_dtoa_r+0x3a>
 800d5e0:	4ba7      	ldr	r3, [pc, #668]	; (800d880 <_dtoa_r+0x2d0>)
 800d5e2:	21ea      	movs	r1, #234	; 0xea
 800d5e4:	48a7      	ldr	r0, [pc, #668]	; (800d884 <_dtoa_r+0x2d4>)
 800d5e6:	f001 f97b 	bl	800e8e0 <__assert_func>
 800d5ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d5ee:	6005      	str	r5, [r0, #0]
 800d5f0:	60c5      	str	r5, [r0, #12]
 800d5f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5f4:	6819      	ldr	r1, [r3, #0]
 800d5f6:	b151      	cbz	r1, 800d60e <_dtoa_r+0x5e>
 800d5f8:	685a      	ldr	r2, [r3, #4]
 800d5fa:	604a      	str	r2, [r1, #4]
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	4093      	lsls	r3, r2
 800d600:	608b      	str	r3, [r1, #8]
 800d602:	4620      	mov	r0, r4
 800d604:	f000 fe12 	bl	800e22c <_Bfree>
 800d608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d60a:	2200      	movs	r2, #0
 800d60c:	601a      	str	r2, [r3, #0]
 800d60e:	1e3b      	subs	r3, r7, #0
 800d610:	bfaa      	itet	ge
 800d612:	2300      	movge	r3, #0
 800d614:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d618:	f8c8 3000 	strge.w	r3, [r8]
 800d61c:	4b9a      	ldr	r3, [pc, #616]	; (800d888 <_dtoa_r+0x2d8>)
 800d61e:	bfbc      	itt	lt
 800d620:	2201      	movlt	r2, #1
 800d622:	f8c8 2000 	strlt.w	r2, [r8]
 800d626:	ea33 030b 	bics.w	r3, r3, fp
 800d62a:	d11b      	bne.n	800d664 <_dtoa_r+0xb4>
 800d62c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d62e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d632:	6013      	str	r3, [r2, #0]
 800d634:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d638:	4333      	orrs	r3, r6
 800d63a:	f000 8592 	beq.w	800e162 <_dtoa_r+0xbb2>
 800d63e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d640:	b963      	cbnz	r3, 800d65c <_dtoa_r+0xac>
 800d642:	4b92      	ldr	r3, [pc, #584]	; (800d88c <_dtoa_r+0x2dc>)
 800d644:	e022      	b.n	800d68c <_dtoa_r+0xdc>
 800d646:	4b92      	ldr	r3, [pc, #584]	; (800d890 <_dtoa_r+0x2e0>)
 800d648:	9301      	str	r3, [sp, #4]
 800d64a:	3308      	adds	r3, #8
 800d64c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d64e:	6013      	str	r3, [r2, #0]
 800d650:	9801      	ldr	r0, [sp, #4]
 800d652:	b013      	add	sp, #76	; 0x4c
 800d654:	ecbd 8b04 	vpop	{d8-d9}
 800d658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65c:	4b8b      	ldr	r3, [pc, #556]	; (800d88c <_dtoa_r+0x2dc>)
 800d65e:	9301      	str	r3, [sp, #4]
 800d660:	3303      	adds	r3, #3
 800d662:	e7f3      	b.n	800d64c <_dtoa_r+0x9c>
 800d664:	2200      	movs	r2, #0
 800d666:	2300      	movs	r3, #0
 800d668:	4650      	mov	r0, sl
 800d66a:	4659      	mov	r1, fp
 800d66c:	f7f3 fa34 	bl	8000ad8 <__aeabi_dcmpeq>
 800d670:	ec4b ab19 	vmov	d9, sl, fp
 800d674:	4680      	mov	r8, r0
 800d676:	b158      	cbz	r0, 800d690 <_dtoa_r+0xe0>
 800d678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d67a:	2301      	movs	r3, #1
 800d67c:	6013      	str	r3, [r2, #0]
 800d67e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d680:	2b00      	cmp	r3, #0
 800d682:	f000 856b 	beq.w	800e15c <_dtoa_r+0xbac>
 800d686:	4883      	ldr	r0, [pc, #524]	; (800d894 <_dtoa_r+0x2e4>)
 800d688:	6018      	str	r0, [r3, #0]
 800d68a:	1e43      	subs	r3, r0, #1
 800d68c:	9301      	str	r3, [sp, #4]
 800d68e:	e7df      	b.n	800d650 <_dtoa_r+0xa0>
 800d690:	ec4b ab10 	vmov	d0, sl, fp
 800d694:	aa10      	add	r2, sp, #64	; 0x40
 800d696:	a911      	add	r1, sp, #68	; 0x44
 800d698:	4620      	mov	r0, r4
 800d69a:	f001 f8af 	bl	800e7fc <__d2b>
 800d69e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d6a2:	ee08 0a10 	vmov	s16, r0
 800d6a6:	2d00      	cmp	r5, #0
 800d6a8:	f000 8084 	beq.w	800d7b4 <_dtoa_r+0x204>
 800d6ac:	ee19 3a90 	vmov	r3, s19
 800d6b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d6b8:	4656      	mov	r6, sl
 800d6ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d6be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d6c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d6c6:	4b74      	ldr	r3, [pc, #464]	; (800d898 <_dtoa_r+0x2e8>)
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	4639      	mov	r1, r7
 800d6ce:	f7f2 fde3 	bl	8000298 <__aeabi_dsub>
 800d6d2:	a365      	add	r3, pc, #404	; (adr r3, 800d868 <_dtoa_r+0x2b8>)
 800d6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d8:	f7f2 ff96 	bl	8000608 <__aeabi_dmul>
 800d6dc:	a364      	add	r3, pc, #400	; (adr r3, 800d870 <_dtoa_r+0x2c0>)
 800d6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e2:	f7f2 fddb 	bl	800029c <__adddf3>
 800d6e6:	4606      	mov	r6, r0
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	460f      	mov	r7, r1
 800d6ec:	f7f2 ff22 	bl	8000534 <__aeabi_i2d>
 800d6f0:	a361      	add	r3, pc, #388	; (adr r3, 800d878 <_dtoa_r+0x2c8>)
 800d6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f6:	f7f2 ff87 	bl	8000608 <__aeabi_dmul>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	4630      	mov	r0, r6
 800d700:	4639      	mov	r1, r7
 800d702:	f7f2 fdcb 	bl	800029c <__adddf3>
 800d706:	4606      	mov	r6, r0
 800d708:	460f      	mov	r7, r1
 800d70a:	f7f3 fa2d 	bl	8000b68 <__aeabi_d2iz>
 800d70e:	2200      	movs	r2, #0
 800d710:	9000      	str	r0, [sp, #0]
 800d712:	2300      	movs	r3, #0
 800d714:	4630      	mov	r0, r6
 800d716:	4639      	mov	r1, r7
 800d718:	f7f3 f9e8 	bl	8000aec <__aeabi_dcmplt>
 800d71c:	b150      	cbz	r0, 800d734 <_dtoa_r+0x184>
 800d71e:	9800      	ldr	r0, [sp, #0]
 800d720:	f7f2 ff08 	bl	8000534 <__aeabi_i2d>
 800d724:	4632      	mov	r2, r6
 800d726:	463b      	mov	r3, r7
 800d728:	f7f3 f9d6 	bl	8000ad8 <__aeabi_dcmpeq>
 800d72c:	b910      	cbnz	r0, 800d734 <_dtoa_r+0x184>
 800d72e:	9b00      	ldr	r3, [sp, #0]
 800d730:	3b01      	subs	r3, #1
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	9b00      	ldr	r3, [sp, #0]
 800d736:	2b16      	cmp	r3, #22
 800d738:	d85a      	bhi.n	800d7f0 <_dtoa_r+0x240>
 800d73a:	9a00      	ldr	r2, [sp, #0]
 800d73c:	4b57      	ldr	r3, [pc, #348]	; (800d89c <_dtoa_r+0x2ec>)
 800d73e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d746:	ec51 0b19 	vmov	r0, r1, d9
 800d74a:	f7f3 f9cf 	bl	8000aec <__aeabi_dcmplt>
 800d74e:	2800      	cmp	r0, #0
 800d750:	d050      	beq.n	800d7f4 <_dtoa_r+0x244>
 800d752:	9b00      	ldr	r3, [sp, #0]
 800d754:	3b01      	subs	r3, #1
 800d756:	9300      	str	r3, [sp, #0]
 800d758:	2300      	movs	r3, #0
 800d75a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d75c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d75e:	1b5d      	subs	r5, r3, r5
 800d760:	1e6b      	subs	r3, r5, #1
 800d762:	9305      	str	r3, [sp, #20]
 800d764:	bf45      	ittet	mi
 800d766:	f1c5 0301 	rsbmi	r3, r5, #1
 800d76a:	9304      	strmi	r3, [sp, #16]
 800d76c:	2300      	movpl	r3, #0
 800d76e:	2300      	movmi	r3, #0
 800d770:	bf4c      	ite	mi
 800d772:	9305      	strmi	r3, [sp, #20]
 800d774:	9304      	strpl	r3, [sp, #16]
 800d776:	9b00      	ldr	r3, [sp, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	db3d      	blt.n	800d7f8 <_dtoa_r+0x248>
 800d77c:	9b05      	ldr	r3, [sp, #20]
 800d77e:	9a00      	ldr	r2, [sp, #0]
 800d780:	920a      	str	r2, [sp, #40]	; 0x28
 800d782:	4413      	add	r3, r2
 800d784:	9305      	str	r3, [sp, #20]
 800d786:	2300      	movs	r3, #0
 800d788:	9307      	str	r3, [sp, #28]
 800d78a:	9b06      	ldr	r3, [sp, #24]
 800d78c:	2b09      	cmp	r3, #9
 800d78e:	f200 8089 	bhi.w	800d8a4 <_dtoa_r+0x2f4>
 800d792:	2b05      	cmp	r3, #5
 800d794:	bfc4      	itt	gt
 800d796:	3b04      	subgt	r3, #4
 800d798:	9306      	strgt	r3, [sp, #24]
 800d79a:	9b06      	ldr	r3, [sp, #24]
 800d79c:	f1a3 0302 	sub.w	r3, r3, #2
 800d7a0:	bfcc      	ite	gt
 800d7a2:	2500      	movgt	r5, #0
 800d7a4:	2501      	movle	r5, #1
 800d7a6:	2b03      	cmp	r3, #3
 800d7a8:	f200 8087 	bhi.w	800d8ba <_dtoa_r+0x30a>
 800d7ac:	e8df f003 	tbb	[pc, r3]
 800d7b0:	59383a2d 	.word	0x59383a2d
 800d7b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d7b8:	441d      	add	r5, r3
 800d7ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d7be:	2b20      	cmp	r3, #32
 800d7c0:	bfc1      	itttt	gt
 800d7c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d7c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d7ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800d7ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d7d2:	bfda      	itte	le
 800d7d4:	f1c3 0320 	rsble	r3, r3, #32
 800d7d8:	fa06 f003 	lslle.w	r0, r6, r3
 800d7dc:	4318      	orrgt	r0, r3
 800d7de:	f7f2 fe99 	bl	8000514 <__aeabi_ui2d>
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	4606      	mov	r6, r0
 800d7e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d7ea:	3d01      	subs	r5, #1
 800d7ec:	930e      	str	r3, [sp, #56]	; 0x38
 800d7ee:	e76a      	b.n	800d6c6 <_dtoa_r+0x116>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e7b2      	b.n	800d75a <_dtoa_r+0x1aa>
 800d7f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d7f6:	e7b1      	b.n	800d75c <_dtoa_r+0x1ac>
 800d7f8:	9b04      	ldr	r3, [sp, #16]
 800d7fa:	9a00      	ldr	r2, [sp, #0]
 800d7fc:	1a9b      	subs	r3, r3, r2
 800d7fe:	9304      	str	r3, [sp, #16]
 800d800:	4253      	negs	r3, r2
 800d802:	9307      	str	r3, [sp, #28]
 800d804:	2300      	movs	r3, #0
 800d806:	930a      	str	r3, [sp, #40]	; 0x28
 800d808:	e7bf      	b.n	800d78a <_dtoa_r+0x1da>
 800d80a:	2300      	movs	r3, #0
 800d80c:	9308      	str	r3, [sp, #32]
 800d80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d810:	2b00      	cmp	r3, #0
 800d812:	dc55      	bgt.n	800d8c0 <_dtoa_r+0x310>
 800d814:	2301      	movs	r3, #1
 800d816:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d81a:	461a      	mov	r2, r3
 800d81c:	9209      	str	r2, [sp, #36]	; 0x24
 800d81e:	e00c      	b.n	800d83a <_dtoa_r+0x28a>
 800d820:	2301      	movs	r3, #1
 800d822:	e7f3      	b.n	800d80c <_dtoa_r+0x25c>
 800d824:	2300      	movs	r3, #0
 800d826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d828:	9308      	str	r3, [sp, #32]
 800d82a:	9b00      	ldr	r3, [sp, #0]
 800d82c:	4413      	add	r3, r2
 800d82e:	9302      	str	r3, [sp, #8]
 800d830:	3301      	adds	r3, #1
 800d832:	2b01      	cmp	r3, #1
 800d834:	9303      	str	r3, [sp, #12]
 800d836:	bfb8      	it	lt
 800d838:	2301      	movlt	r3, #1
 800d83a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d83c:	2200      	movs	r2, #0
 800d83e:	6042      	str	r2, [r0, #4]
 800d840:	2204      	movs	r2, #4
 800d842:	f102 0614 	add.w	r6, r2, #20
 800d846:	429e      	cmp	r6, r3
 800d848:	6841      	ldr	r1, [r0, #4]
 800d84a:	d93d      	bls.n	800d8c8 <_dtoa_r+0x318>
 800d84c:	4620      	mov	r0, r4
 800d84e:	f000 fcad 	bl	800e1ac <_Balloc>
 800d852:	9001      	str	r0, [sp, #4]
 800d854:	2800      	cmp	r0, #0
 800d856:	d13b      	bne.n	800d8d0 <_dtoa_r+0x320>
 800d858:	4b11      	ldr	r3, [pc, #68]	; (800d8a0 <_dtoa_r+0x2f0>)
 800d85a:	4602      	mov	r2, r0
 800d85c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d860:	e6c0      	b.n	800d5e4 <_dtoa_r+0x34>
 800d862:	2301      	movs	r3, #1
 800d864:	e7df      	b.n	800d826 <_dtoa_r+0x276>
 800d866:	bf00      	nop
 800d868:	636f4361 	.word	0x636f4361
 800d86c:	3fd287a7 	.word	0x3fd287a7
 800d870:	8b60c8b3 	.word	0x8b60c8b3
 800d874:	3fc68a28 	.word	0x3fc68a28
 800d878:	509f79fb 	.word	0x509f79fb
 800d87c:	3fd34413 	.word	0x3fd34413
 800d880:	0800f82d 	.word	0x0800f82d
 800d884:	0800f844 	.word	0x0800f844
 800d888:	7ff00000 	.word	0x7ff00000
 800d88c:	0800f829 	.word	0x0800f829
 800d890:	0800f820 	.word	0x0800f820
 800d894:	0800f7fd 	.word	0x0800f7fd
 800d898:	3ff80000 	.word	0x3ff80000
 800d89c:	0800f938 	.word	0x0800f938
 800d8a0:	0800f89f 	.word	0x0800f89f
 800d8a4:	2501      	movs	r5, #1
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	9306      	str	r3, [sp, #24]
 800d8aa:	9508      	str	r5, [sp, #32]
 800d8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	2312      	movs	r3, #18
 800d8b8:	e7b0      	b.n	800d81c <_dtoa_r+0x26c>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	9308      	str	r3, [sp, #32]
 800d8be:	e7f5      	b.n	800d8ac <_dtoa_r+0x2fc>
 800d8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d8c6:	e7b8      	b.n	800d83a <_dtoa_r+0x28a>
 800d8c8:	3101      	adds	r1, #1
 800d8ca:	6041      	str	r1, [r0, #4]
 800d8cc:	0052      	lsls	r2, r2, #1
 800d8ce:	e7b8      	b.n	800d842 <_dtoa_r+0x292>
 800d8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8d2:	9a01      	ldr	r2, [sp, #4]
 800d8d4:	601a      	str	r2, [r3, #0]
 800d8d6:	9b03      	ldr	r3, [sp, #12]
 800d8d8:	2b0e      	cmp	r3, #14
 800d8da:	f200 809d 	bhi.w	800da18 <_dtoa_r+0x468>
 800d8de:	2d00      	cmp	r5, #0
 800d8e0:	f000 809a 	beq.w	800da18 <_dtoa_r+0x468>
 800d8e4:	9b00      	ldr	r3, [sp, #0]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	dd32      	ble.n	800d950 <_dtoa_r+0x3a0>
 800d8ea:	4ab7      	ldr	r2, [pc, #732]	; (800dbc8 <_dtoa_r+0x618>)
 800d8ec:	f003 030f 	and.w	r3, r3, #15
 800d8f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d8f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d8f8:	9b00      	ldr	r3, [sp, #0]
 800d8fa:	05d8      	lsls	r0, r3, #23
 800d8fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d900:	d516      	bpl.n	800d930 <_dtoa_r+0x380>
 800d902:	4bb2      	ldr	r3, [pc, #712]	; (800dbcc <_dtoa_r+0x61c>)
 800d904:	ec51 0b19 	vmov	r0, r1, d9
 800d908:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d90c:	f7f2 ffa6 	bl	800085c <__aeabi_ddiv>
 800d910:	f007 070f 	and.w	r7, r7, #15
 800d914:	4682      	mov	sl, r0
 800d916:	468b      	mov	fp, r1
 800d918:	2503      	movs	r5, #3
 800d91a:	4eac      	ldr	r6, [pc, #688]	; (800dbcc <_dtoa_r+0x61c>)
 800d91c:	b957      	cbnz	r7, 800d934 <_dtoa_r+0x384>
 800d91e:	4642      	mov	r2, r8
 800d920:	464b      	mov	r3, r9
 800d922:	4650      	mov	r0, sl
 800d924:	4659      	mov	r1, fp
 800d926:	f7f2 ff99 	bl	800085c <__aeabi_ddiv>
 800d92a:	4682      	mov	sl, r0
 800d92c:	468b      	mov	fp, r1
 800d92e:	e028      	b.n	800d982 <_dtoa_r+0x3d2>
 800d930:	2502      	movs	r5, #2
 800d932:	e7f2      	b.n	800d91a <_dtoa_r+0x36a>
 800d934:	07f9      	lsls	r1, r7, #31
 800d936:	d508      	bpl.n	800d94a <_dtoa_r+0x39a>
 800d938:	4640      	mov	r0, r8
 800d93a:	4649      	mov	r1, r9
 800d93c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d940:	f7f2 fe62 	bl	8000608 <__aeabi_dmul>
 800d944:	3501      	adds	r5, #1
 800d946:	4680      	mov	r8, r0
 800d948:	4689      	mov	r9, r1
 800d94a:	107f      	asrs	r7, r7, #1
 800d94c:	3608      	adds	r6, #8
 800d94e:	e7e5      	b.n	800d91c <_dtoa_r+0x36c>
 800d950:	f000 809b 	beq.w	800da8a <_dtoa_r+0x4da>
 800d954:	9b00      	ldr	r3, [sp, #0]
 800d956:	4f9d      	ldr	r7, [pc, #628]	; (800dbcc <_dtoa_r+0x61c>)
 800d958:	425e      	negs	r6, r3
 800d95a:	4b9b      	ldr	r3, [pc, #620]	; (800dbc8 <_dtoa_r+0x618>)
 800d95c:	f006 020f 	and.w	r2, r6, #15
 800d960:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d968:	ec51 0b19 	vmov	r0, r1, d9
 800d96c:	f7f2 fe4c 	bl	8000608 <__aeabi_dmul>
 800d970:	1136      	asrs	r6, r6, #4
 800d972:	4682      	mov	sl, r0
 800d974:	468b      	mov	fp, r1
 800d976:	2300      	movs	r3, #0
 800d978:	2502      	movs	r5, #2
 800d97a:	2e00      	cmp	r6, #0
 800d97c:	d17a      	bne.n	800da74 <_dtoa_r+0x4c4>
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1d3      	bne.n	800d92a <_dtoa_r+0x37a>
 800d982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d984:	2b00      	cmp	r3, #0
 800d986:	f000 8082 	beq.w	800da8e <_dtoa_r+0x4de>
 800d98a:	4b91      	ldr	r3, [pc, #580]	; (800dbd0 <_dtoa_r+0x620>)
 800d98c:	2200      	movs	r2, #0
 800d98e:	4650      	mov	r0, sl
 800d990:	4659      	mov	r1, fp
 800d992:	f7f3 f8ab 	bl	8000aec <__aeabi_dcmplt>
 800d996:	2800      	cmp	r0, #0
 800d998:	d079      	beq.n	800da8e <_dtoa_r+0x4de>
 800d99a:	9b03      	ldr	r3, [sp, #12]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d076      	beq.n	800da8e <_dtoa_r+0x4de>
 800d9a0:	9b02      	ldr	r3, [sp, #8]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	dd36      	ble.n	800da14 <_dtoa_r+0x464>
 800d9a6:	9b00      	ldr	r3, [sp, #0]
 800d9a8:	4650      	mov	r0, sl
 800d9aa:	4659      	mov	r1, fp
 800d9ac:	1e5f      	subs	r7, r3, #1
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	4b88      	ldr	r3, [pc, #544]	; (800dbd4 <_dtoa_r+0x624>)
 800d9b2:	f7f2 fe29 	bl	8000608 <__aeabi_dmul>
 800d9b6:	9e02      	ldr	r6, [sp, #8]
 800d9b8:	4682      	mov	sl, r0
 800d9ba:	468b      	mov	fp, r1
 800d9bc:	3501      	adds	r5, #1
 800d9be:	4628      	mov	r0, r5
 800d9c0:	f7f2 fdb8 	bl	8000534 <__aeabi_i2d>
 800d9c4:	4652      	mov	r2, sl
 800d9c6:	465b      	mov	r3, fp
 800d9c8:	f7f2 fe1e 	bl	8000608 <__aeabi_dmul>
 800d9cc:	4b82      	ldr	r3, [pc, #520]	; (800dbd8 <_dtoa_r+0x628>)
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f7f2 fc64 	bl	800029c <__adddf3>
 800d9d4:	46d0      	mov	r8, sl
 800d9d6:	46d9      	mov	r9, fp
 800d9d8:	4682      	mov	sl, r0
 800d9da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d9de:	2e00      	cmp	r6, #0
 800d9e0:	d158      	bne.n	800da94 <_dtoa_r+0x4e4>
 800d9e2:	4b7e      	ldr	r3, [pc, #504]	; (800dbdc <_dtoa_r+0x62c>)
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	4649      	mov	r1, r9
 800d9ea:	f7f2 fc55 	bl	8000298 <__aeabi_dsub>
 800d9ee:	4652      	mov	r2, sl
 800d9f0:	465b      	mov	r3, fp
 800d9f2:	4680      	mov	r8, r0
 800d9f4:	4689      	mov	r9, r1
 800d9f6:	f7f3 f897 	bl	8000b28 <__aeabi_dcmpgt>
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	f040 8295 	bne.w	800df2a <_dtoa_r+0x97a>
 800da00:	4652      	mov	r2, sl
 800da02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800da06:	4640      	mov	r0, r8
 800da08:	4649      	mov	r1, r9
 800da0a:	f7f3 f86f 	bl	8000aec <__aeabi_dcmplt>
 800da0e:	2800      	cmp	r0, #0
 800da10:	f040 8289 	bne.w	800df26 <_dtoa_r+0x976>
 800da14:	ec5b ab19 	vmov	sl, fp, d9
 800da18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	f2c0 8148 	blt.w	800dcb0 <_dtoa_r+0x700>
 800da20:	9a00      	ldr	r2, [sp, #0]
 800da22:	2a0e      	cmp	r2, #14
 800da24:	f300 8144 	bgt.w	800dcb0 <_dtoa_r+0x700>
 800da28:	4b67      	ldr	r3, [pc, #412]	; (800dbc8 <_dtoa_r+0x618>)
 800da2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da34:	2b00      	cmp	r3, #0
 800da36:	f280 80d5 	bge.w	800dbe4 <_dtoa_r+0x634>
 800da3a:	9b03      	ldr	r3, [sp, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f300 80d1 	bgt.w	800dbe4 <_dtoa_r+0x634>
 800da42:	f040 826f 	bne.w	800df24 <_dtoa_r+0x974>
 800da46:	4b65      	ldr	r3, [pc, #404]	; (800dbdc <_dtoa_r+0x62c>)
 800da48:	2200      	movs	r2, #0
 800da4a:	4640      	mov	r0, r8
 800da4c:	4649      	mov	r1, r9
 800da4e:	f7f2 fddb 	bl	8000608 <__aeabi_dmul>
 800da52:	4652      	mov	r2, sl
 800da54:	465b      	mov	r3, fp
 800da56:	f7f3 f85d 	bl	8000b14 <__aeabi_dcmpge>
 800da5a:	9e03      	ldr	r6, [sp, #12]
 800da5c:	4637      	mov	r7, r6
 800da5e:	2800      	cmp	r0, #0
 800da60:	f040 8245 	bne.w	800deee <_dtoa_r+0x93e>
 800da64:	9d01      	ldr	r5, [sp, #4]
 800da66:	2331      	movs	r3, #49	; 0x31
 800da68:	f805 3b01 	strb.w	r3, [r5], #1
 800da6c:	9b00      	ldr	r3, [sp, #0]
 800da6e:	3301      	adds	r3, #1
 800da70:	9300      	str	r3, [sp, #0]
 800da72:	e240      	b.n	800def6 <_dtoa_r+0x946>
 800da74:	07f2      	lsls	r2, r6, #31
 800da76:	d505      	bpl.n	800da84 <_dtoa_r+0x4d4>
 800da78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da7c:	f7f2 fdc4 	bl	8000608 <__aeabi_dmul>
 800da80:	3501      	adds	r5, #1
 800da82:	2301      	movs	r3, #1
 800da84:	1076      	asrs	r6, r6, #1
 800da86:	3708      	adds	r7, #8
 800da88:	e777      	b.n	800d97a <_dtoa_r+0x3ca>
 800da8a:	2502      	movs	r5, #2
 800da8c:	e779      	b.n	800d982 <_dtoa_r+0x3d2>
 800da8e:	9f00      	ldr	r7, [sp, #0]
 800da90:	9e03      	ldr	r6, [sp, #12]
 800da92:	e794      	b.n	800d9be <_dtoa_r+0x40e>
 800da94:	9901      	ldr	r1, [sp, #4]
 800da96:	4b4c      	ldr	r3, [pc, #304]	; (800dbc8 <_dtoa_r+0x618>)
 800da98:	4431      	add	r1, r6
 800da9a:	910d      	str	r1, [sp, #52]	; 0x34
 800da9c:	9908      	ldr	r1, [sp, #32]
 800da9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800daa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800daa6:	2900      	cmp	r1, #0
 800daa8:	d043      	beq.n	800db32 <_dtoa_r+0x582>
 800daaa:	494d      	ldr	r1, [pc, #308]	; (800dbe0 <_dtoa_r+0x630>)
 800daac:	2000      	movs	r0, #0
 800daae:	f7f2 fed5 	bl	800085c <__aeabi_ddiv>
 800dab2:	4652      	mov	r2, sl
 800dab4:	465b      	mov	r3, fp
 800dab6:	f7f2 fbef 	bl	8000298 <__aeabi_dsub>
 800daba:	9d01      	ldr	r5, [sp, #4]
 800dabc:	4682      	mov	sl, r0
 800dabe:	468b      	mov	fp, r1
 800dac0:	4649      	mov	r1, r9
 800dac2:	4640      	mov	r0, r8
 800dac4:	f7f3 f850 	bl	8000b68 <__aeabi_d2iz>
 800dac8:	4606      	mov	r6, r0
 800daca:	f7f2 fd33 	bl	8000534 <__aeabi_i2d>
 800dace:	4602      	mov	r2, r0
 800dad0:	460b      	mov	r3, r1
 800dad2:	4640      	mov	r0, r8
 800dad4:	4649      	mov	r1, r9
 800dad6:	f7f2 fbdf 	bl	8000298 <__aeabi_dsub>
 800dada:	3630      	adds	r6, #48	; 0x30
 800dadc:	f805 6b01 	strb.w	r6, [r5], #1
 800dae0:	4652      	mov	r2, sl
 800dae2:	465b      	mov	r3, fp
 800dae4:	4680      	mov	r8, r0
 800dae6:	4689      	mov	r9, r1
 800dae8:	f7f3 f800 	bl	8000aec <__aeabi_dcmplt>
 800daec:	2800      	cmp	r0, #0
 800daee:	d163      	bne.n	800dbb8 <_dtoa_r+0x608>
 800daf0:	4642      	mov	r2, r8
 800daf2:	464b      	mov	r3, r9
 800daf4:	4936      	ldr	r1, [pc, #216]	; (800dbd0 <_dtoa_r+0x620>)
 800daf6:	2000      	movs	r0, #0
 800daf8:	f7f2 fbce 	bl	8000298 <__aeabi_dsub>
 800dafc:	4652      	mov	r2, sl
 800dafe:	465b      	mov	r3, fp
 800db00:	f7f2 fff4 	bl	8000aec <__aeabi_dcmplt>
 800db04:	2800      	cmp	r0, #0
 800db06:	f040 80b5 	bne.w	800dc74 <_dtoa_r+0x6c4>
 800db0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db0c:	429d      	cmp	r5, r3
 800db0e:	d081      	beq.n	800da14 <_dtoa_r+0x464>
 800db10:	4b30      	ldr	r3, [pc, #192]	; (800dbd4 <_dtoa_r+0x624>)
 800db12:	2200      	movs	r2, #0
 800db14:	4650      	mov	r0, sl
 800db16:	4659      	mov	r1, fp
 800db18:	f7f2 fd76 	bl	8000608 <__aeabi_dmul>
 800db1c:	4b2d      	ldr	r3, [pc, #180]	; (800dbd4 <_dtoa_r+0x624>)
 800db1e:	4682      	mov	sl, r0
 800db20:	468b      	mov	fp, r1
 800db22:	4640      	mov	r0, r8
 800db24:	4649      	mov	r1, r9
 800db26:	2200      	movs	r2, #0
 800db28:	f7f2 fd6e 	bl	8000608 <__aeabi_dmul>
 800db2c:	4680      	mov	r8, r0
 800db2e:	4689      	mov	r9, r1
 800db30:	e7c6      	b.n	800dac0 <_dtoa_r+0x510>
 800db32:	4650      	mov	r0, sl
 800db34:	4659      	mov	r1, fp
 800db36:	f7f2 fd67 	bl	8000608 <__aeabi_dmul>
 800db3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db3c:	9d01      	ldr	r5, [sp, #4]
 800db3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db40:	4682      	mov	sl, r0
 800db42:	468b      	mov	fp, r1
 800db44:	4649      	mov	r1, r9
 800db46:	4640      	mov	r0, r8
 800db48:	f7f3 f80e 	bl	8000b68 <__aeabi_d2iz>
 800db4c:	4606      	mov	r6, r0
 800db4e:	f7f2 fcf1 	bl	8000534 <__aeabi_i2d>
 800db52:	3630      	adds	r6, #48	; 0x30
 800db54:	4602      	mov	r2, r0
 800db56:	460b      	mov	r3, r1
 800db58:	4640      	mov	r0, r8
 800db5a:	4649      	mov	r1, r9
 800db5c:	f7f2 fb9c 	bl	8000298 <__aeabi_dsub>
 800db60:	f805 6b01 	strb.w	r6, [r5], #1
 800db64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db66:	429d      	cmp	r5, r3
 800db68:	4680      	mov	r8, r0
 800db6a:	4689      	mov	r9, r1
 800db6c:	f04f 0200 	mov.w	r2, #0
 800db70:	d124      	bne.n	800dbbc <_dtoa_r+0x60c>
 800db72:	4b1b      	ldr	r3, [pc, #108]	; (800dbe0 <_dtoa_r+0x630>)
 800db74:	4650      	mov	r0, sl
 800db76:	4659      	mov	r1, fp
 800db78:	f7f2 fb90 	bl	800029c <__adddf3>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4640      	mov	r0, r8
 800db82:	4649      	mov	r1, r9
 800db84:	f7f2 ffd0 	bl	8000b28 <__aeabi_dcmpgt>
 800db88:	2800      	cmp	r0, #0
 800db8a:	d173      	bne.n	800dc74 <_dtoa_r+0x6c4>
 800db8c:	4652      	mov	r2, sl
 800db8e:	465b      	mov	r3, fp
 800db90:	4913      	ldr	r1, [pc, #76]	; (800dbe0 <_dtoa_r+0x630>)
 800db92:	2000      	movs	r0, #0
 800db94:	f7f2 fb80 	bl	8000298 <__aeabi_dsub>
 800db98:	4602      	mov	r2, r0
 800db9a:	460b      	mov	r3, r1
 800db9c:	4640      	mov	r0, r8
 800db9e:	4649      	mov	r1, r9
 800dba0:	f7f2 ffa4 	bl	8000aec <__aeabi_dcmplt>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	f43f af35 	beq.w	800da14 <_dtoa_r+0x464>
 800dbaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dbac:	1e6b      	subs	r3, r5, #1
 800dbae:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dbb4:	2b30      	cmp	r3, #48	; 0x30
 800dbb6:	d0f8      	beq.n	800dbaa <_dtoa_r+0x5fa>
 800dbb8:	9700      	str	r7, [sp, #0]
 800dbba:	e049      	b.n	800dc50 <_dtoa_r+0x6a0>
 800dbbc:	4b05      	ldr	r3, [pc, #20]	; (800dbd4 <_dtoa_r+0x624>)
 800dbbe:	f7f2 fd23 	bl	8000608 <__aeabi_dmul>
 800dbc2:	4680      	mov	r8, r0
 800dbc4:	4689      	mov	r9, r1
 800dbc6:	e7bd      	b.n	800db44 <_dtoa_r+0x594>
 800dbc8:	0800f938 	.word	0x0800f938
 800dbcc:	0800f910 	.word	0x0800f910
 800dbd0:	3ff00000 	.word	0x3ff00000
 800dbd4:	40240000 	.word	0x40240000
 800dbd8:	401c0000 	.word	0x401c0000
 800dbdc:	40140000 	.word	0x40140000
 800dbe0:	3fe00000 	.word	0x3fe00000
 800dbe4:	9d01      	ldr	r5, [sp, #4]
 800dbe6:	4656      	mov	r6, sl
 800dbe8:	465f      	mov	r7, fp
 800dbea:	4642      	mov	r2, r8
 800dbec:	464b      	mov	r3, r9
 800dbee:	4630      	mov	r0, r6
 800dbf0:	4639      	mov	r1, r7
 800dbf2:	f7f2 fe33 	bl	800085c <__aeabi_ddiv>
 800dbf6:	f7f2 ffb7 	bl	8000b68 <__aeabi_d2iz>
 800dbfa:	4682      	mov	sl, r0
 800dbfc:	f7f2 fc9a 	bl	8000534 <__aeabi_i2d>
 800dc00:	4642      	mov	r2, r8
 800dc02:	464b      	mov	r3, r9
 800dc04:	f7f2 fd00 	bl	8000608 <__aeabi_dmul>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	4639      	mov	r1, r7
 800dc10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dc14:	f7f2 fb40 	bl	8000298 <__aeabi_dsub>
 800dc18:	f805 6b01 	strb.w	r6, [r5], #1
 800dc1c:	9e01      	ldr	r6, [sp, #4]
 800dc1e:	9f03      	ldr	r7, [sp, #12]
 800dc20:	1bae      	subs	r6, r5, r6
 800dc22:	42b7      	cmp	r7, r6
 800dc24:	4602      	mov	r2, r0
 800dc26:	460b      	mov	r3, r1
 800dc28:	d135      	bne.n	800dc96 <_dtoa_r+0x6e6>
 800dc2a:	f7f2 fb37 	bl	800029c <__adddf3>
 800dc2e:	4642      	mov	r2, r8
 800dc30:	464b      	mov	r3, r9
 800dc32:	4606      	mov	r6, r0
 800dc34:	460f      	mov	r7, r1
 800dc36:	f7f2 ff77 	bl	8000b28 <__aeabi_dcmpgt>
 800dc3a:	b9d0      	cbnz	r0, 800dc72 <_dtoa_r+0x6c2>
 800dc3c:	4642      	mov	r2, r8
 800dc3e:	464b      	mov	r3, r9
 800dc40:	4630      	mov	r0, r6
 800dc42:	4639      	mov	r1, r7
 800dc44:	f7f2 ff48 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc48:	b110      	cbz	r0, 800dc50 <_dtoa_r+0x6a0>
 800dc4a:	f01a 0f01 	tst.w	sl, #1
 800dc4e:	d110      	bne.n	800dc72 <_dtoa_r+0x6c2>
 800dc50:	4620      	mov	r0, r4
 800dc52:	ee18 1a10 	vmov	r1, s16
 800dc56:	f000 fae9 	bl	800e22c <_Bfree>
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	9800      	ldr	r0, [sp, #0]
 800dc5e:	702b      	strb	r3, [r5, #0]
 800dc60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc62:	3001      	adds	r0, #1
 800dc64:	6018      	str	r0, [r3, #0]
 800dc66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	f43f acf1 	beq.w	800d650 <_dtoa_r+0xa0>
 800dc6e:	601d      	str	r5, [r3, #0]
 800dc70:	e4ee      	b.n	800d650 <_dtoa_r+0xa0>
 800dc72:	9f00      	ldr	r7, [sp, #0]
 800dc74:	462b      	mov	r3, r5
 800dc76:	461d      	mov	r5, r3
 800dc78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc7c:	2a39      	cmp	r2, #57	; 0x39
 800dc7e:	d106      	bne.n	800dc8e <_dtoa_r+0x6de>
 800dc80:	9a01      	ldr	r2, [sp, #4]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d1f7      	bne.n	800dc76 <_dtoa_r+0x6c6>
 800dc86:	9901      	ldr	r1, [sp, #4]
 800dc88:	2230      	movs	r2, #48	; 0x30
 800dc8a:	3701      	adds	r7, #1
 800dc8c:	700a      	strb	r2, [r1, #0]
 800dc8e:	781a      	ldrb	r2, [r3, #0]
 800dc90:	3201      	adds	r2, #1
 800dc92:	701a      	strb	r2, [r3, #0]
 800dc94:	e790      	b.n	800dbb8 <_dtoa_r+0x608>
 800dc96:	4ba6      	ldr	r3, [pc, #664]	; (800df30 <_dtoa_r+0x980>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f7f2 fcb5 	bl	8000608 <__aeabi_dmul>
 800dc9e:	2200      	movs	r2, #0
 800dca0:	2300      	movs	r3, #0
 800dca2:	4606      	mov	r6, r0
 800dca4:	460f      	mov	r7, r1
 800dca6:	f7f2 ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcaa:	2800      	cmp	r0, #0
 800dcac:	d09d      	beq.n	800dbea <_dtoa_r+0x63a>
 800dcae:	e7cf      	b.n	800dc50 <_dtoa_r+0x6a0>
 800dcb0:	9a08      	ldr	r2, [sp, #32]
 800dcb2:	2a00      	cmp	r2, #0
 800dcb4:	f000 80d7 	beq.w	800de66 <_dtoa_r+0x8b6>
 800dcb8:	9a06      	ldr	r2, [sp, #24]
 800dcba:	2a01      	cmp	r2, #1
 800dcbc:	f300 80ba 	bgt.w	800de34 <_dtoa_r+0x884>
 800dcc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dcc2:	2a00      	cmp	r2, #0
 800dcc4:	f000 80b2 	beq.w	800de2c <_dtoa_r+0x87c>
 800dcc8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dccc:	9e07      	ldr	r6, [sp, #28]
 800dcce:	9d04      	ldr	r5, [sp, #16]
 800dcd0:	9a04      	ldr	r2, [sp, #16]
 800dcd2:	441a      	add	r2, r3
 800dcd4:	9204      	str	r2, [sp, #16]
 800dcd6:	9a05      	ldr	r2, [sp, #20]
 800dcd8:	2101      	movs	r1, #1
 800dcda:	441a      	add	r2, r3
 800dcdc:	4620      	mov	r0, r4
 800dcde:	9205      	str	r2, [sp, #20]
 800dce0:	f000 fb5c 	bl	800e39c <__i2b>
 800dce4:	4607      	mov	r7, r0
 800dce6:	2d00      	cmp	r5, #0
 800dce8:	dd0c      	ble.n	800dd04 <_dtoa_r+0x754>
 800dcea:	9b05      	ldr	r3, [sp, #20]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	dd09      	ble.n	800dd04 <_dtoa_r+0x754>
 800dcf0:	42ab      	cmp	r3, r5
 800dcf2:	9a04      	ldr	r2, [sp, #16]
 800dcf4:	bfa8      	it	ge
 800dcf6:	462b      	movge	r3, r5
 800dcf8:	1ad2      	subs	r2, r2, r3
 800dcfa:	9204      	str	r2, [sp, #16]
 800dcfc:	9a05      	ldr	r2, [sp, #20]
 800dcfe:	1aed      	subs	r5, r5, r3
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	9305      	str	r3, [sp, #20]
 800dd04:	9b07      	ldr	r3, [sp, #28]
 800dd06:	b31b      	cbz	r3, 800dd50 <_dtoa_r+0x7a0>
 800dd08:	9b08      	ldr	r3, [sp, #32]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	f000 80af 	beq.w	800de6e <_dtoa_r+0x8be>
 800dd10:	2e00      	cmp	r6, #0
 800dd12:	dd13      	ble.n	800dd3c <_dtoa_r+0x78c>
 800dd14:	4639      	mov	r1, r7
 800dd16:	4632      	mov	r2, r6
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f000 fbff 	bl	800e51c <__pow5mult>
 800dd1e:	ee18 2a10 	vmov	r2, s16
 800dd22:	4601      	mov	r1, r0
 800dd24:	4607      	mov	r7, r0
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 fb4e 	bl	800e3c8 <__multiply>
 800dd2c:	ee18 1a10 	vmov	r1, s16
 800dd30:	4680      	mov	r8, r0
 800dd32:	4620      	mov	r0, r4
 800dd34:	f000 fa7a 	bl	800e22c <_Bfree>
 800dd38:	ee08 8a10 	vmov	s16, r8
 800dd3c:	9b07      	ldr	r3, [sp, #28]
 800dd3e:	1b9a      	subs	r2, r3, r6
 800dd40:	d006      	beq.n	800dd50 <_dtoa_r+0x7a0>
 800dd42:	ee18 1a10 	vmov	r1, s16
 800dd46:	4620      	mov	r0, r4
 800dd48:	f000 fbe8 	bl	800e51c <__pow5mult>
 800dd4c:	ee08 0a10 	vmov	s16, r0
 800dd50:	2101      	movs	r1, #1
 800dd52:	4620      	mov	r0, r4
 800dd54:	f000 fb22 	bl	800e39c <__i2b>
 800dd58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	f340 8088 	ble.w	800de72 <_dtoa_r+0x8c2>
 800dd62:	461a      	mov	r2, r3
 800dd64:	4601      	mov	r1, r0
 800dd66:	4620      	mov	r0, r4
 800dd68:	f000 fbd8 	bl	800e51c <__pow5mult>
 800dd6c:	9b06      	ldr	r3, [sp, #24]
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	4606      	mov	r6, r0
 800dd72:	f340 8081 	ble.w	800de78 <_dtoa_r+0x8c8>
 800dd76:	f04f 0800 	mov.w	r8, #0
 800dd7a:	6933      	ldr	r3, [r6, #16]
 800dd7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dd80:	6918      	ldr	r0, [r3, #16]
 800dd82:	f000 fabb 	bl	800e2fc <__hi0bits>
 800dd86:	f1c0 0020 	rsb	r0, r0, #32
 800dd8a:	9b05      	ldr	r3, [sp, #20]
 800dd8c:	4418      	add	r0, r3
 800dd8e:	f010 001f 	ands.w	r0, r0, #31
 800dd92:	f000 8092 	beq.w	800deba <_dtoa_r+0x90a>
 800dd96:	f1c0 0320 	rsb	r3, r0, #32
 800dd9a:	2b04      	cmp	r3, #4
 800dd9c:	f340 808a 	ble.w	800deb4 <_dtoa_r+0x904>
 800dda0:	f1c0 001c 	rsb	r0, r0, #28
 800dda4:	9b04      	ldr	r3, [sp, #16]
 800dda6:	4403      	add	r3, r0
 800dda8:	9304      	str	r3, [sp, #16]
 800ddaa:	9b05      	ldr	r3, [sp, #20]
 800ddac:	4403      	add	r3, r0
 800ddae:	4405      	add	r5, r0
 800ddb0:	9305      	str	r3, [sp, #20]
 800ddb2:	9b04      	ldr	r3, [sp, #16]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	dd07      	ble.n	800ddc8 <_dtoa_r+0x818>
 800ddb8:	ee18 1a10 	vmov	r1, s16
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f000 fc06 	bl	800e5d0 <__lshift>
 800ddc4:	ee08 0a10 	vmov	s16, r0
 800ddc8:	9b05      	ldr	r3, [sp, #20]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	dd05      	ble.n	800ddda <_dtoa_r+0x82a>
 800ddce:	4631      	mov	r1, r6
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f000 fbfc 	bl	800e5d0 <__lshift>
 800ddd8:	4606      	mov	r6, r0
 800ddda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d06e      	beq.n	800debe <_dtoa_r+0x90e>
 800dde0:	ee18 0a10 	vmov	r0, s16
 800dde4:	4631      	mov	r1, r6
 800dde6:	f000 fc63 	bl	800e6b0 <__mcmp>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	da67      	bge.n	800debe <_dtoa_r+0x90e>
 800ddee:	9b00      	ldr	r3, [sp, #0]
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	ee18 1a10 	vmov	r1, s16
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	220a      	movs	r2, #10
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	f000 fa37 	bl	800e270 <__multadd>
 800de02:	9b08      	ldr	r3, [sp, #32]
 800de04:	ee08 0a10 	vmov	s16, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f000 81b1 	beq.w	800e170 <_dtoa_r+0xbc0>
 800de0e:	2300      	movs	r3, #0
 800de10:	4639      	mov	r1, r7
 800de12:	220a      	movs	r2, #10
 800de14:	4620      	mov	r0, r4
 800de16:	f000 fa2b 	bl	800e270 <__multadd>
 800de1a:	9b02      	ldr	r3, [sp, #8]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	4607      	mov	r7, r0
 800de20:	f300 808e 	bgt.w	800df40 <_dtoa_r+0x990>
 800de24:	9b06      	ldr	r3, [sp, #24]
 800de26:	2b02      	cmp	r3, #2
 800de28:	dc51      	bgt.n	800dece <_dtoa_r+0x91e>
 800de2a:	e089      	b.n	800df40 <_dtoa_r+0x990>
 800de2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de32:	e74b      	b.n	800dccc <_dtoa_r+0x71c>
 800de34:	9b03      	ldr	r3, [sp, #12]
 800de36:	1e5e      	subs	r6, r3, #1
 800de38:	9b07      	ldr	r3, [sp, #28]
 800de3a:	42b3      	cmp	r3, r6
 800de3c:	bfbf      	itttt	lt
 800de3e:	9b07      	ldrlt	r3, [sp, #28]
 800de40:	9607      	strlt	r6, [sp, #28]
 800de42:	1af2      	sublt	r2, r6, r3
 800de44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800de46:	bfb6      	itet	lt
 800de48:	189b      	addlt	r3, r3, r2
 800de4a:	1b9e      	subge	r6, r3, r6
 800de4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800de4e:	9b03      	ldr	r3, [sp, #12]
 800de50:	bfb8      	it	lt
 800de52:	2600      	movlt	r6, #0
 800de54:	2b00      	cmp	r3, #0
 800de56:	bfb7      	itett	lt
 800de58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800de5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800de60:	1a9d      	sublt	r5, r3, r2
 800de62:	2300      	movlt	r3, #0
 800de64:	e734      	b.n	800dcd0 <_dtoa_r+0x720>
 800de66:	9e07      	ldr	r6, [sp, #28]
 800de68:	9d04      	ldr	r5, [sp, #16]
 800de6a:	9f08      	ldr	r7, [sp, #32]
 800de6c:	e73b      	b.n	800dce6 <_dtoa_r+0x736>
 800de6e:	9a07      	ldr	r2, [sp, #28]
 800de70:	e767      	b.n	800dd42 <_dtoa_r+0x792>
 800de72:	9b06      	ldr	r3, [sp, #24]
 800de74:	2b01      	cmp	r3, #1
 800de76:	dc18      	bgt.n	800deaa <_dtoa_r+0x8fa>
 800de78:	f1ba 0f00 	cmp.w	sl, #0
 800de7c:	d115      	bne.n	800deaa <_dtoa_r+0x8fa>
 800de7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de82:	b993      	cbnz	r3, 800deaa <_dtoa_r+0x8fa>
 800de84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de88:	0d1b      	lsrs	r3, r3, #20
 800de8a:	051b      	lsls	r3, r3, #20
 800de8c:	b183      	cbz	r3, 800deb0 <_dtoa_r+0x900>
 800de8e:	9b04      	ldr	r3, [sp, #16]
 800de90:	3301      	adds	r3, #1
 800de92:	9304      	str	r3, [sp, #16]
 800de94:	9b05      	ldr	r3, [sp, #20]
 800de96:	3301      	adds	r3, #1
 800de98:	9305      	str	r3, [sp, #20]
 800de9a:	f04f 0801 	mov.w	r8, #1
 800de9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	f47f af6a 	bne.w	800dd7a <_dtoa_r+0x7ca>
 800dea6:	2001      	movs	r0, #1
 800dea8:	e76f      	b.n	800dd8a <_dtoa_r+0x7da>
 800deaa:	f04f 0800 	mov.w	r8, #0
 800deae:	e7f6      	b.n	800de9e <_dtoa_r+0x8ee>
 800deb0:	4698      	mov	r8, r3
 800deb2:	e7f4      	b.n	800de9e <_dtoa_r+0x8ee>
 800deb4:	f43f af7d 	beq.w	800ddb2 <_dtoa_r+0x802>
 800deb8:	4618      	mov	r0, r3
 800deba:	301c      	adds	r0, #28
 800debc:	e772      	b.n	800dda4 <_dtoa_r+0x7f4>
 800debe:	9b03      	ldr	r3, [sp, #12]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	dc37      	bgt.n	800df34 <_dtoa_r+0x984>
 800dec4:	9b06      	ldr	r3, [sp, #24]
 800dec6:	2b02      	cmp	r3, #2
 800dec8:	dd34      	ble.n	800df34 <_dtoa_r+0x984>
 800deca:	9b03      	ldr	r3, [sp, #12]
 800decc:	9302      	str	r3, [sp, #8]
 800dece:	9b02      	ldr	r3, [sp, #8]
 800ded0:	b96b      	cbnz	r3, 800deee <_dtoa_r+0x93e>
 800ded2:	4631      	mov	r1, r6
 800ded4:	2205      	movs	r2, #5
 800ded6:	4620      	mov	r0, r4
 800ded8:	f000 f9ca 	bl	800e270 <__multadd>
 800dedc:	4601      	mov	r1, r0
 800dede:	4606      	mov	r6, r0
 800dee0:	ee18 0a10 	vmov	r0, s16
 800dee4:	f000 fbe4 	bl	800e6b0 <__mcmp>
 800dee8:	2800      	cmp	r0, #0
 800deea:	f73f adbb 	bgt.w	800da64 <_dtoa_r+0x4b4>
 800deee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800def0:	9d01      	ldr	r5, [sp, #4]
 800def2:	43db      	mvns	r3, r3
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	f04f 0800 	mov.w	r8, #0
 800defa:	4631      	mov	r1, r6
 800defc:	4620      	mov	r0, r4
 800defe:	f000 f995 	bl	800e22c <_Bfree>
 800df02:	2f00      	cmp	r7, #0
 800df04:	f43f aea4 	beq.w	800dc50 <_dtoa_r+0x6a0>
 800df08:	f1b8 0f00 	cmp.w	r8, #0
 800df0c:	d005      	beq.n	800df1a <_dtoa_r+0x96a>
 800df0e:	45b8      	cmp	r8, r7
 800df10:	d003      	beq.n	800df1a <_dtoa_r+0x96a>
 800df12:	4641      	mov	r1, r8
 800df14:	4620      	mov	r0, r4
 800df16:	f000 f989 	bl	800e22c <_Bfree>
 800df1a:	4639      	mov	r1, r7
 800df1c:	4620      	mov	r0, r4
 800df1e:	f000 f985 	bl	800e22c <_Bfree>
 800df22:	e695      	b.n	800dc50 <_dtoa_r+0x6a0>
 800df24:	2600      	movs	r6, #0
 800df26:	4637      	mov	r7, r6
 800df28:	e7e1      	b.n	800deee <_dtoa_r+0x93e>
 800df2a:	9700      	str	r7, [sp, #0]
 800df2c:	4637      	mov	r7, r6
 800df2e:	e599      	b.n	800da64 <_dtoa_r+0x4b4>
 800df30:	40240000 	.word	0x40240000
 800df34:	9b08      	ldr	r3, [sp, #32]
 800df36:	2b00      	cmp	r3, #0
 800df38:	f000 80ca 	beq.w	800e0d0 <_dtoa_r+0xb20>
 800df3c:	9b03      	ldr	r3, [sp, #12]
 800df3e:	9302      	str	r3, [sp, #8]
 800df40:	2d00      	cmp	r5, #0
 800df42:	dd05      	ble.n	800df50 <_dtoa_r+0x9a0>
 800df44:	4639      	mov	r1, r7
 800df46:	462a      	mov	r2, r5
 800df48:	4620      	mov	r0, r4
 800df4a:	f000 fb41 	bl	800e5d0 <__lshift>
 800df4e:	4607      	mov	r7, r0
 800df50:	f1b8 0f00 	cmp.w	r8, #0
 800df54:	d05b      	beq.n	800e00e <_dtoa_r+0xa5e>
 800df56:	6879      	ldr	r1, [r7, #4]
 800df58:	4620      	mov	r0, r4
 800df5a:	f000 f927 	bl	800e1ac <_Balloc>
 800df5e:	4605      	mov	r5, r0
 800df60:	b928      	cbnz	r0, 800df6e <_dtoa_r+0x9be>
 800df62:	4b87      	ldr	r3, [pc, #540]	; (800e180 <_dtoa_r+0xbd0>)
 800df64:	4602      	mov	r2, r0
 800df66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800df6a:	f7ff bb3b 	b.w	800d5e4 <_dtoa_r+0x34>
 800df6e:	693a      	ldr	r2, [r7, #16]
 800df70:	3202      	adds	r2, #2
 800df72:	0092      	lsls	r2, r2, #2
 800df74:	f107 010c 	add.w	r1, r7, #12
 800df78:	300c      	adds	r0, #12
 800df7a:	f7fe fcbd 	bl	800c8f8 <memcpy>
 800df7e:	2201      	movs	r2, #1
 800df80:	4629      	mov	r1, r5
 800df82:	4620      	mov	r0, r4
 800df84:	f000 fb24 	bl	800e5d0 <__lshift>
 800df88:	9b01      	ldr	r3, [sp, #4]
 800df8a:	f103 0901 	add.w	r9, r3, #1
 800df8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800df92:	4413      	add	r3, r2
 800df94:	9305      	str	r3, [sp, #20]
 800df96:	f00a 0301 	and.w	r3, sl, #1
 800df9a:	46b8      	mov	r8, r7
 800df9c:	9304      	str	r3, [sp, #16]
 800df9e:	4607      	mov	r7, r0
 800dfa0:	4631      	mov	r1, r6
 800dfa2:	ee18 0a10 	vmov	r0, s16
 800dfa6:	f7ff fa75 	bl	800d494 <quorem>
 800dfaa:	4641      	mov	r1, r8
 800dfac:	9002      	str	r0, [sp, #8]
 800dfae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dfb2:	ee18 0a10 	vmov	r0, s16
 800dfb6:	f000 fb7b 	bl	800e6b0 <__mcmp>
 800dfba:	463a      	mov	r2, r7
 800dfbc:	9003      	str	r0, [sp, #12]
 800dfbe:	4631      	mov	r1, r6
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f000 fb91 	bl	800e6e8 <__mdiff>
 800dfc6:	68c2      	ldr	r2, [r0, #12]
 800dfc8:	f109 3bff 	add.w	fp, r9, #4294967295
 800dfcc:	4605      	mov	r5, r0
 800dfce:	bb02      	cbnz	r2, 800e012 <_dtoa_r+0xa62>
 800dfd0:	4601      	mov	r1, r0
 800dfd2:	ee18 0a10 	vmov	r0, s16
 800dfd6:	f000 fb6b 	bl	800e6b0 <__mcmp>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4620      	mov	r0, r4
 800dfe0:	9207      	str	r2, [sp, #28]
 800dfe2:	f000 f923 	bl	800e22c <_Bfree>
 800dfe6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800dfea:	ea43 0102 	orr.w	r1, r3, r2
 800dfee:	9b04      	ldr	r3, [sp, #16]
 800dff0:	430b      	orrs	r3, r1
 800dff2:	464d      	mov	r5, r9
 800dff4:	d10f      	bne.n	800e016 <_dtoa_r+0xa66>
 800dff6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dffa:	d02a      	beq.n	800e052 <_dtoa_r+0xaa2>
 800dffc:	9b03      	ldr	r3, [sp, #12]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	dd02      	ble.n	800e008 <_dtoa_r+0xa58>
 800e002:	9b02      	ldr	r3, [sp, #8]
 800e004:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e008:	f88b a000 	strb.w	sl, [fp]
 800e00c:	e775      	b.n	800defa <_dtoa_r+0x94a>
 800e00e:	4638      	mov	r0, r7
 800e010:	e7ba      	b.n	800df88 <_dtoa_r+0x9d8>
 800e012:	2201      	movs	r2, #1
 800e014:	e7e2      	b.n	800dfdc <_dtoa_r+0xa2c>
 800e016:	9b03      	ldr	r3, [sp, #12]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	db04      	blt.n	800e026 <_dtoa_r+0xa76>
 800e01c:	9906      	ldr	r1, [sp, #24]
 800e01e:	430b      	orrs	r3, r1
 800e020:	9904      	ldr	r1, [sp, #16]
 800e022:	430b      	orrs	r3, r1
 800e024:	d122      	bne.n	800e06c <_dtoa_r+0xabc>
 800e026:	2a00      	cmp	r2, #0
 800e028:	ddee      	ble.n	800e008 <_dtoa_r+0xa58>
 800e02a:	ee18 1a10 	vmov	r1, s16
 800e02e:	2201      	movs	r2, #1
 800e030:	4620      	mov	r0, r4
 800e032:	f000 facd 	bl	800e5d0 <__lshift>
 800e036:	4631      	mov	r1, r6
 800e038:	ee08 0a10 	vmov	s16, r0
 800e03c:	f000 fb38 	bl	800e6b0 <__mcmp>
 800e040:	2800      	cmp	r0, #0
 800e042:	dc03      	bgt.n	800e04c <_dtoa_r+0xa9c>
 800e044:	d1e0      	bne.n	800e008 <_dtoa_r+0xa58>
 800e046:	f01a 0f01 	tst.w	sl, #1
 800e04a:	d0dd      	beq.n	800e008 <_dtoa_r+0xa58>
 800e04c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e050:	d1d7      	bne.n	800e002 <_dtoa_r+0xa52>
 800e052:	2339      	movs	r3, #57	; 0x39
 800e054:	f88b 3000 	strb.w	r3, [fp]
 800e058:	462b      	mov	r3, r5
 800e05a:	461d      	mov	r5, r3
 800e05c:	3b01      	subs	r3, #1
 800e05e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e062:	2a39      	cmp	r2, #57	; 0x39
 800e064:	d071      	beq.n	800e14a <_dtoa_r+0xb9a>
 800e066:	3201      	adds	r2, #1
 800e068:	701a      	strb	r2, [r3, #0]
 800e06a:	e746      	b.n	800defa <_dtoa_r+0x94a>
 800e06c:	2a00      	cmp	r2, #0
 800e06e:	dd07      	ble.n	800e080 <_dtoa_r+0xad0>
 800e070:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e074:	d0ed      	beq.n	800e052 <_dtoa_r+0xaa2>
 800e076:	f10a 0301 	add.w	r3, sl, #1
 800e07a:	f88b 3000 	strb.w	r3, [fp]
 800e07e:	e73c      	b.n	800defa <_dtoa_r+0x94a>
 800e080:	9b05      	ldr	r3, [sp, #20]
 800e082:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e086:	4599      	cmp	r9, r3
 800e088:	d047      	beq.n	800e11a <_dtoa_r+0xb6a>
 800e08a:	ee18 1a10 	vmov	r1, s16
 800e08e:	2300      	movs	r3, #0
 800e090:	220a      	movs	r2, #10
 800e092:	4620      	mov	r0, r4
 800e094:	f000 f8ec 	bl	800e270 <__multadd>
 800e098:	45b8      	cmp	r8, r7
 800e09a:	ee08 0a10 	vmov	s16, r0
 800e09e:	f04f 0300 	mov.w	r3, #0
 800e0a2:	f04f 020a 	mov.w	r2, #10
 800e0a6:	4641      	mov	r1, r8
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	d106      	bne.n	800e0ba <_dtoa_r+0xb0a>
 800e0ac:	f000 f8e0 	bl	800e270 <__multadd>
 800e0b0:	4680      	mov	r8, r0
 800e0b2:	4607      	mov	r7, r0
 800e0b4:	f109 0901 	add.w	r9, r9, #1
 800e0b8:	e772      	b.n	800dfa0 <_dtoa_r+0x9f0>
 800e0ba:	f000 f8d9 	bl	800e270 <__multadd>
 800e0be:	4639      	mov	r1, r7
 800e0c0:	4680      	mov	r8, r0
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	220a      	movs	r2, #10
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f000 f8d2 	bl	800e270 <__multadd>
 800e0cc:	4607      	mov	r7, r0
 800e0ce:	e7f1      	b.n	800e0b4 <_dtoa_r+0xb04>
 800e0d0:	9b03      	ldr	r3, [sp, #12]
 800e0d2:	9302      	str	r3, [sp, #8]
 800e0d4:	9d01      	ldr	r5, [sp, #4]
 800e0d6:	ee18 0a10 	vmov	r0, s16
 800e0da:	4631      	mov	r1, r6
 800e0dc:	f7ff f9da 	bl	800d494 <quorem>
 800e0e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e0e4:	9b01      	ldr	r3, [sp, #4]
 800e0e6:	f805 ab01 	strb.w	sl, [r5], #1
 800e0ea:	1aea      	subs	r2, r5, r3
 800e0ec:	9b02      	ldr	r3, [sp, #8]
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	dd09      	ble.n	800e106 <_dtoa_r+0xb56>
 800e0f2:	ee18 1a10 	vmov	r1, s16
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	220a      	movs	r2, #10
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	f000 f8b8 	bl	800e270 <__multadd>
 800e100:	ee08 0a10 	vmov	s16, r0
 800e104:	e7e7      	b.n	800e0d6 <_dtoa_r+0xb26>
 800e106:	9b02      	ldr	r3, [sp, #8]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	bfc8      	it	gt
 800e10c:	461d      	movgt	r5, r3
 800e10e:	9b01      	ldr	r3, [sp, #4]
 800e110:	bfd8      	it	le
 800e112:	2501      	movle	r5, #1
 800e114:	441d      	add	r5, r3
 800e116:	f04f 0800 	mov.w	r8, #0
 800e11a:	ee18 1a10 	vmov	r1, s16
 800e11e:	2201      	movs	r2, #1
 800e120:	4620      	mov	r0, r4
 800e122:	f000 fa55 	bl	800e5d0 <__lshift>
 800e126:	4631      	mov	r1, r6
 800e128:	ee08 0a10 	vmov	s16, r0
 800e12c:	f000 fac0 	bl	800e6b0 <__mcmp>
 800e130:	2800      	cmp	r0, #0
 800e132:	dc91      	bgt.n	800e058 <_dtoa_r+0xaa8>
 800e134:	d102      	bne.n	800e13c <_dtoa_r+0xb8c>
 800e136:	f01a 0f01 	tst.w	sl, #1
 800e13a:	d18d      	bne.n	800e058 <_dtoa_r+0xaa8>
 800e13c:	462b      	mov	r3, r5
 800e13e:	461d      	mov	r5, r3
 800e140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e144:	2a30      	cmp	r2, #48	; 0x30
 800e146:	d0fa      	beq.n	800e13e <_dtoa_r+0xb8e>
 800e148:	e6d7      	b.n	800defa <_dtoa_r+0x94a>
 800e14a:	9a01      	ldr	r2, [sp, #4]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d184      	bne.n	800e05a <_dtoa_r+0xaaa>
 800e150:	9b00      	ldr	r3, [sp, #0]
 800e152:	3301      	adds	r3, #1
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	2331      	movs	r3, #49	; 0x31
 800e158:	7013      	strb	r3, [r2, #0]
 800e15a:	e6ce      	b.n	800defa <_dtoa_r+0x94a>
 800e15c:	4b09      	ldr	r3, [pc, #36]	; (800e184 <_dtoa_r+0xbd4>)
 800e15e:	f7ff ba95 	b.w	800d68c <_dtoa_r+0xdc>
 800e162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e164:	2b00      	cmp	r3, #0
 800e166:	f47f aa6e 	bne.w	800d646 <_dtoa_r+0x96>
 800e16a:	4b07      	ldr	r3, [pc, #28]	; (800e188 <_dtoa_r+0xbd8>)
 800e16c:	f7ff ba8e 	b.w	800d68c <_dtoa_r+0xdc>
 800e170:	9b02      	ldr	r3, [sp, #8]
 800e172:	2b00      	cmp	r3, #0
 800e174:	dcae      	bgt.n	800e0d4 <_dtoa_r+0xb24>
 800e176:	9b06      	ldr	r3, [sp, #24]
 800e178:	2b02      	cmp	r3, #2
 800e17a:	f73f aea8 	bgt.w	800dece <_dtoa_r+0x91e>
 800e17e:	e7a9      	b.n	800e0d4 <_dtoa_r+0xb24>
 800e180:	0800f89f 	.word	0x0800f89f
 800e184:	0800f7fc 	.word	0x0800f7fc
 800e188:	0800f820 	.word	0x0800f820

0800e18c <_localeconv_r>:
 800e18c:	4800      	ldr	r0, [pc, #0]	; (800e190 <_localeconv_r+0x4>)
 800e18e:	4770      	bx	lr
 800e190:	20000160 	.word	0x20000160

0800e194 <__malloc_lock>:
 800e194:	4801      	ldr	r0, [pc, #4]	; (800e19c <__malloc_lock+0x8>)
 800e196:	f000 bbd4 	b.w	800e942 <__retarget_lock_acquire_recursive>
 800e19a:	bf00      	nop
 800e19c:	200010dc 	.word	0x200010dc

0800e1a0 <__malloc_unlock>:
 800e1a0:	4801      	ldr	r0, [pc, #4]	; (800e1a8 <__malloc_unlock+0x8>)
 800e1a2:	f000 bbcf 	b.w	800e944 <__retarget_lock_release_recursive>
 800e1a6:	bf00      	nop
 800e1a8:	200010dc 	.word	0x200010dc

0800e1ac <_Balloc>:
 800e1ac:	b570      	push	{r4, r5, r6, lr}
 800e1ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e1b0:	4604      	mov	r4, r0
 800e1b2:	460d      	mov	r5, r1
 800e1b4:	b976      	cbnz	r6, 800e1d4 <_Balloc+0x28>
 800e1b6:	2010      	movs	r0, #16
 800e1b8:	f7fe fb8e 	bl	800c8d8 <malloc>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	6260      	str	r0, [r4, #36]	; 0x24
 800e1c0:	b920      	cbnz	r0, 800e1cc <_Balloc+0x20>
 800e1c2:	4b18      	ldr	r3, [pc, #96]	; (800e224 <_Balloc+0x78>)
 800e1c4:	4818      	ldr	r0, [pc, #96]	; (800e228 <_Balloc+0x7c>)
 800e1c6:	2166      	movs	r1, #102	; 0x66
 800e1c8:	f000 fb8a 	bl	800e8e0 <__assert_func>
 800e1cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1d0:	6006      	str	r6, [r0, #0]
 800e1d2:	60c6      	str	r6, [r0, #12]
 800e1d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e1d6:	68f3      	ldr	r3, [r6, #12]
 800e1d8:	b183      	cbz	r3, 800e1fc <_Balloc+0x50>
 800e1da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1dc:	68db      	ldr	r3, [r3, #12]
 800e1de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e1e2:	b9b8      	cbnz	r0, 800e214 <_Balloc+0x68>
 800e1e4:	2101      	movs	r1, #1
 800e1e6:	fa01 f605 	lsl.w	r6, r1, r5
 800e1ea:	1d72      	adds	r2, r6, #5
 800e1ec:	0092      	lsls	r2, r2, #2
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f000 fb60 	bl	800e8b4 <_calloc_r>
 800e1f4:	b160      	cbz	r0, 800e210 <_Balloc+0x64>
 800e1f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e1fa:	e00e      	b.n	800e21a <_Balloc+0x6e>
 800e1fc:	2221      	movs	r2, #33	; 0x21
 800e1fe:	2104      	movs	r1, #4
 800e200:	4620      	mov	r0, r4
 800e202:	f000 fb57 	bl	800e8b4 <_calloc_r>
 800e206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e208:	60f0      	str	r0, [r6, #12]
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d1e4      	bne.n	800e1da <_Balloc+0x2e>
 800e210:	2000      	movs	r0, #0
 800e212:	bd70      	pop	{r4, r5, r6, pc}
 800e214:	6802      	ldr	r2, [r0, #0]
 800e216:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e21a:	2300      	movs	r3, #0
 800e21c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e220:	e7f7      	b.n	800e212 <_Balloc+0x66>
 800e222:	bf00      	nop
 800e224:	0800f82d 	.word	0x0800f82d
 800e228:	0800f8b0 	.word	0x0800f8b0

0800e22c <_Bfree>:
 800e22c:	b570      	push	{r4, r5, r6, lr}
 800e22e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e230:	4605      	mov	r5, r0
 800e232:	460c      	mov	r4, r1
 800e234:	b976      	cbnz	r6, 800e254 <_Bfree+0x28>
 800e236:	2010      	movs	r0, #16
 800e238:	f7fe fb4e 	bl	800c8d8 <malloc>
 800e23c:	4602      	mov	r2, r0
 800e23e:	6268      	str	r0, [r5, #36]	; 0x24
 800e240:	b920      	cbnz	r0, 800e24c <_Bfree+0x20>
 800e242:	4b09      	ldr	r3, [pc, #36]	; (800e268 <_Bfree+0x3c>)
 800e244:	4809      	ldr	r0, [pc, #36]	; (800e26c <_Bfree+0x40>)
 800e246:	218a      	movs	r1, #138	; 0x8a
 800e248:	f000 fb4a 	bl	800e8e0 <__assert_func>
 800e24c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e250:	6006      	str	r6, [r0, #0]
 800e252:	60c6      	str	r6, [r0, #12]
 800e254:	b13c      	cbz	r4, 800e266 <_Bfree+0x3a>
 800e256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e258:	6862      	ldr	r2, [r4, #4]
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e260:	6021      	str	r1, [r4, #0]
 800e262:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e266:	bd70      	pop	{r4, r5, r6, pc}
 800e268:	0800f82d 	.word	0x0800f82d
 800e26c:	0800f8b0 	.word	0x0800f8b0

0800e270 <__multadd>:
 800e270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e274:	690d      	ldr	r5, [r1, #16]
 800e276:	4607      	mov	r7, r0
 800e278:	460c      	mov	r4, r1
 800e27a:	461e      	mov	r6, r3
 800e27c:	f101 0c14 	add.w	ip, r1, #20
 800e280:	2000      	movs	r0, #0
 800e282:	f8dc 3000 	ldr.w	r3, [ip]
 800e286:	b299      	uxth	r1, r3
 800e288:	fb02 6101 	mla	r1, r2, r1, r6
 800e28c:	0c1e      	lsrs	r6, r3, #16
 800e28e:	0c0b      	lsrs	r3, r1, #16
 800e290:	fb02 3306 	mla	r3, r2, r6, r3
 800e294:	b289      	uxth	r1, r1
 800e296:	3001      	adds	r0, #1
 800e298:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e29c:	4285      	cmp	r5, r0
 800e29e:	f84c 1b04 	str.w	r1, [ip], #4
 800e2a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e2a6:	dcec      	bgt.n	800e282 <__multadd+0x12>
 800e2a8:	b30e      	cbz	r6, 800e2ee <__multadd+0x7e>
 800e2aa:	68a3      	ldr	r3, [r4, #8]
 800e2ac:	42ab      	cmp	r3, r5
 800e2ae:	dc19      	bgt.n	800e2e4 <__multadd+0x74>
 800e2b0:	6861      	ldr	r1, [r4, #4]
 800e2b2:	4638      	mov	r0, r7
 800e2b4:	3101      	adds	r1, #1
 800e2b6:	f7ff ff79 	bl	800e1ac <_Balloc>
 800e2ba:	4680      	mov	r8, r0
 800e2bc:	b928      	cbnz	r0, 800e2ca <__multadd+0x5a>
 800e2be:	4602      	mov	r2, r0
 800e2c0:	4b0c      	ldr	r3, [pc, #48]	; (800e2f4 <__multadd+0x84>)
 800e2c2:	480d      	ldr	r0, [pc, #52]	; (800e2f8 <__multadd+0x88>)
 800e2c4:	21b5      	movs	r1, #181	; 0xb5
 800e2c6:	f000 fb0b 	bl	800e8e0 <__assert_func>
 800e2ca:	6922      	ldr	r2, [r4, #16]
 800e2cc:	3202      	adds	r2, #2
 800e2ce:	f104 010c 	add.w	r1, r4, #12
 800e2d2:	0092      	lsls	r2, r2, #2
 800e2d4:	300c      	adds	r0, #12
 800e2d6:	f7fe fb0f 	bl	800c8f8 <memcpy>
 800e2da:	4621      	mov	r1, r4
 800e2dc:	4638      	mov	r0, r7
 800e2de:	f7ff ffa5 	bl	800e22c <_Bfree>
 800e2e2:	4644      	mov	r4, r8
 800e2e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e2e8:	3501      	adds	r5, #1
 800e2ea:	615e      	str	r6, [r3, #20]
 800e2ec:	6125      	str	r5, [r4, #16]
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f4:	0800f89f 	.word	0x0800f89f
 800e2f8:	0800f8b0 	.word	0x0800f8b0

0800e2fc <__hi0bits>:
 800e2fc:	0c03      	lsrs	r3, r0, #16
 800e2fe:	041b      	lsls	r3, r3, #16
 800e300:	b9d3      	cbnz	r3, 800e338 <__hi0bits+0x3c>
 800e302:	0400      	lsls	r0, r0, #16
 800e304:	2310      	movs	r3, #16
 800e306:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e30a:	bf04      	itt	eq
 800e30c:	0200      	lsleq	r0, r0, #8
 800e30e:	3308      	addeq	r3, #8
 800e310:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e314:	bf04      	itt	eq
 800e316:	0100      	lsleq	r0, r0, #4
 800e318:	3304      	addeq	r3, #4
 800e31a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e31e:	bf04      	itt	eq
 800e320:	0080      	lsleq	r0, r0, #2
 800e322:	3302      	addeq	r3, #2
 800e324:	2800      	cmp	r0, #0
 800e326:	db05      	blt.n	800e334 <__hi0bits+0x38>
 800e328:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e32c:	f103 0301 	add.w	r3, r3, #1
 800e330:	bf08      	it	eq
 800e332:	2320      	moveq	r3, #32
 800e334:	4618      	mov	r0, r3
 800e336:	4770      	bx	lr
 800e338:	2300      	movs	r3, #0
 800e33a:	e7e4      	b.n	800e306 <__hi0bits+0xa>

0800e33c <__lo0bits>:
 800e33c:	6803      	ldr	r3, [r0, #0]
 800e33e:	f013 0207 	ands.w	r2, r3, #7
 800e342:	4601      	mov	r1, r0
 800e344:	d00b      	beq.n	800e35e <__lo0bits+0x22>
 800e346:	07da      	lsls	r2, r3, #31
 800e348:	d423      	bmi.n	800e392 <__lo0bits+0x56>
 800e34a:	0798      	lsls	r0, r3, #30
 800e34c:	bf49      	itett	mi
 800e34e:	085b      	lsrmi	r3, r3, #1
 800e350:	089b      	lsrpl	r3, r3, #2
 800e352:	2001      	movmi	r0, #1
 800e354:	600b      	strmi	r3, [r1, #0]
 800e356:	bf5c      	itt	pl
 800e358:	600b      	strpl	r3, [r1, #0]
 800e35a:	2002      	movpl	r0, #2
 800e35c:	4770      	bx	lr
 800e35e:	b298      	uxth	r0, r3
 800e360:	b9a8      	cbnz	r0, 800e38e <__lo0bits+0x52>
 800e362:	0c1b      	lsrs	r3, r3, #16
 800e364:	2010      	movs	r0, #16
 800e366:	b2da      	uxtb	r2, r3
 800e368:	b90a      	cbnz	r2, 800e36e <__lo0bits+0x32>
 800e36a:	3008      	adds	r0, #8
 800e36c:	0a1b      	lsrs	r3, r3, #8
 800e36e:	071a      	lsls	r2, r3, #28
 800e370:	bf04      	itt	eq
 800e372:	091b      	lsreq	r3, r3, #4
 800e374:	3004      	addeq	r0, #4
 800e376:	079a      	lsls	r2, r3, #30
 800e378:	bf04      	itt	eq
 800e37a:	089b      	lsreq	r3, r3, #2
 800e37c:	3002      	addeq	r0, #2
 800e37e:	07da      	lsls	r2, r3, #31
 800e380:	d403      	bmi.n	800e38a <__lo0bits+0x4e>
 800e382:	085b      	lsrs	r3, r3, #1
 800e384:	f100 0001 	add.w	r0, r0, #1
 800e388:	d005      	beq.n	800e396 <__lo0bits+0x5a>
 800e38a:	600b      	str	r3, [r1, #0]
 800e38c:	4770      	bx	lr
 800e38e:	4610      	mov	r0, r2
 800e390:	e7e9      	b.n	800e366 <__lo0bits+0x2a>
 800e392:	2000      	movs	r0, #0
 800e394:	4770      	bx	lr
 800e396:	2020      	movs	r0, #32
 800e398:	4770      	bx	lr
	...

0800e39c <__i2b>:
 800e39c:	b510      	push	{r4, lr}
 800e39e:	460c      	mov	r4, r1
 800e3a0:	2101      	movs	r1, #1
 800e3a2:	f7ff ff03 	bl	800e1ac <_Balloc>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	b928      	cbnz	r0, 800e3b6 <__i2b+0x1a>
 800e3aa:	4b05      	ldr	r3, [pc, #20]	; (800e3c0 <__i2b+0x24>)
 800e3ac:	4805      	ldr	r0, [pc, #20]	; (800e3c4 <__i2b+0x28>)
 800e3ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e3b2:	f000 fa95 	bl	800e8e0 <__assert_func>
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	6144      	str	r4, [r0, #20]
 800e3ba:	6103      	str	r3, [r0, #16]
 800e3bc:	bd10      	pop	{r4, pc}
 800e3be:	bf00      	nop
 800e3c0:	0800f89f 	.word	0x0800f89f
 800e3c4:	0800f8b0 	.word	0x0800f8b0

0800e3c8 <__multiply>:
 800e3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3cc:	4691      	mov	r9, r2
 800e3ce:	690a      	ldr	r2, [r1, #16]
 800e3d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	bfb8      	it	lt
 800e3d8:	460b      	movlt	r3, r1
 800e3da:	460c      	mov	r4, r1
 800e3dc:	bfbc      	itt	lt
 800e3de:	464c      	movlt	r4, r9
 800e3e0:	4699      	movlt	r9, r3
 800e3e2:	6927      	ldr	r7, [r4, #16]
 800e3e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e3e8:	68a3      	ldr	r3, [r4, #8]
 800e3ea:	6861      	ldr	r1, [r4, #4]
 800e3ec:	eb07 060a 	add.w	r6, r7, sl
 800e3f0:	42b3      	cmp	r3, r6
 800e3f2:	b085      	sub	sp, #20
 800e3f4:	bfb8      	it	lt
 800e3f6:	3101      	addlt	r1, #1
 800e3f8:	f7ff fed8 	bl	800e1ac <_Balloc>
 800e3fc:	b930      	cbnz	r0, 800e40c <__multiply+0x44>
 800e3fe:	4602      	mov	r2, r0
 800e400:	4b44      	ldr	r3, [pc, #272]	; (800e514 <__multiply+0x14c>)
 800e402:	4845      	ldr	r0, [pc, #276]	; (800e518 <__multiply+0x150>)
 800e404:	f240 115d 	movw	r1, #349	; 0x15d
 800e408:	f000 fa6a 	bl	800e8e0 <__assert_func>
 800e40c:	f100 0514 	add.w	r5, r0, #20
 800e410:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e414:	462b      	mov	r3, r5
 800e416:	2200      	movs	r2, #0
 800e418:	4543      	cmp	r3, r8
 800e41a:	d321      	bcc.n	800e460 <__multiply+0x98>
 800e41c:	f104 0314 	add.w	r3, r4, #20
 800e420:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e424:	f109 0314 	add.w	r3, r9, #20
 800e428:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e42c:	9202      	str	r2, [sp, #8]
 800e42e:	1b3a      	subs	r2, r7, r4
 800e430:	3a15      	subs	r2, #21
 800e432:	f022 0203 	bic.w	r2, r2, #3
 800e436:	3204      	adds	r2, #4
 800e438:	f104 0115 	add.w	r1, r4, #21
 800e43c:	428f      	cmp	r7, r1
 800e43e:	bf38      	it	cc
 800e440:	2204      	movcc	r2, #4
 800e442:	9201      	str	r2, [sp, #4]
 800e444:	9a02      	ldr	r2, [sp, #8]
 800e446:	9303      	str	r3, [sp, #12]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d80c      	bhi.n	800e466 <__multiply+0x9e>
 800e44c:	2e00      	cmp	r6, #0
 800e44e:	dd03      	ble.n	800e458 <__multiply+0x90>
 800e450:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e454:	2b00      	cmp	r3, #0
 800e456:	d05a      	beq.n	800e50e <__multiply+0x146>
 800e458:	6106      	str	r6, [r0, #16]
 800e45a:	b005      	add	sp, #20
 800e45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e460:	f843 2b04 	str.w	r2, [r3], #4
 800e464:	e7d8      	b.n	800e418 <__multiply+0x50>
 800e466:	f8b3 a000 	ldrh.w	sl, [r3]
 800e46a:	f1ba 0f00 	cmp.w	sl, #0
 800e46e:	d024      	beq.n	800e4ba <__multiply+0xf2>
 800e470:	f104 0e14 	add.w	lr, r4, #20
 800e474:	46a9      	mov	r9, r5
 800e476:	f04f 0c00 	mov.w	ip, #0
 800e47a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e47e:	f8d9 1000 	ldr.w	r1, [r9]
 800e482:	fa1f fb82 	uxth.w	fp, r2
 800e486:	b289      	uxth	r1, r1
 800e488:	fb0a 110b 	mla	r1, sl, fp, r1
 800e48c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e490:	f8d9 2000 	ldr.w	r2, [r9]
 800e494:	4461      	add	r1, ip
 800e496:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e49a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e49e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e4a2:	b289      	uxth	r1, r1
 800e4a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e4a8:	4577      	cmp	r7, lr
 800e4aa:	f849 1b04 	str.w	r1, [r9], #4
 800e4ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e4b2:	d8e2      	bhi.n	800e47a <__multiply+0xb2>
 800e4b4:	9a01      	ldr	r2, [sp, #4]
 800e4b6:	f845 c002 	str.w	ip, [r5, r2]
 800e4ba:	9a03      	ldr	r2, [sp, #12]
 800e4bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e4c0:	3304      	adds	r3, #4
 800e4c2:	f1b9 0f00 	cmp.w	r9, #0
 800e4c6:	d020      	beq.n	800e50a <__multiply+0x142>
 800e4c8:	6829      	ldr	r1, [r5, #0]
 800e4ca:	f104 0c14 	add.w	ip, r4, #20
 800e4ce:	46ae      	mov	lr, r5
 800e4d0:	f04f 0a00 	mov.w	sl, #0
 800e4d4:	f8bc b000 	ldrh.w	fp, [ip]
 800e4d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e4dc:	fb09 220b 	mla	r2, r9, fp, r2
 800e4e0:	4492      	add	sl, r2
 800e4e2:	b289      	uxth	r1, r1
 800e4e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e4e8:	f84e 1b04 	str.w	r1, [lr], #4
 800e4ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e4f0:	f8be 1000 	ldrh.w	r1, [lr]
 800e4f4:	0c12      	lsrs	r2, r2, #16
 800e4f6:	fb09 1102 	mla	r1, r9, r2, r1
 800e4fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e4fe:	4567      	cmp	r7, ip
 800e500:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e504:	d8e6      	bhi.n	800e4d4 <__multiply+0x10c>
 800e506:	9a01      	ldr	r2, [sp, #4]
 800e508:	50a9      	str	r1, [r5, r2]
 800e50a:	3504      	adds	r5, #4
 800e50c:	e79a      	b.n	800e444 <__multiply+0x7c>
 800e50e:	3e01      	subs	r6, #1
 800e510:	e79c      	b.n	800e44c <__multiply+0x84>
 800e512:	bf00      	nop
 800e514:	0800f89f 	.word	0x0800f89f
 800e518:	0800f8b0 	.word	0x0800f8b0

0800e51c <__pow5mult>:
 800e51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e520:	4615      	mov	r5, r2
 800e522:	f012 0203 	ands.w	r2, r2, #3
 800e526:	4606      	mov	r6, r0
 800e528:	460f      	mov	r7, r1
 800e52a:	d007      	beq.n	800e53c <__pow5mult+0x20>
 800e52c:	4c25      	ldr	r4, [pc, #148]	; (800e5c4 <__pow5mult+0xa8>)
 800e52e:	3a01      	subs	r2, #1
 800e530:	2300      	movs	r3, #0
 800e532:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e536:	f7ff fe9b 	bl	800e270 <__multadd>
 800e53a:	4607      	mov	r7, r0
 800e53c:	10ad      	asrs	r5, r5, #2
 800e53e:	d03d      	beq.n	800e5bc <__pow5mult+0xa0>
 800e540:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e542:	b97c      	cbnz	r4, 800e564 <__pow5mult+0x48>
 800e544:	2010      	movs	r0, #16
 800e546:	f7fe f9c7 	bl	800c8d8 <malloc>
 800e54a:	4602      	mov	r2, r0
 800e54c:	6270      	str	r0, [r6, #36]	; 0x24
 800e54e:	b928      	cbnz	r0, 800e55c <__pow5mult+0x40>
 800e550:	4b1d      	ldr	r3, [pc, #116]	; (800e5c8 <__pow5mult+0xac>)
 800e552:	481e      	ldr	r0, [pc, #120]	; (800e5cc <__pow5mult+0xb0>)
 800e554:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e558:	f000 f9c2 	bl	800e8e0 <__assert_func>
 800e55c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e560:	6004      	str	r4, [r0, #0]
 800e562:	60c4      	str	r4, [r0, #12]
 800e564:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e568:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e56c:	b94c      	cbnz	r4, 800e582 <__pow5mult+0x66>
 800e56e:	f240 2171 	movw	r1, #625	; 0x271
 800e572:	4630      	mov	r0, r6
 800e574:	f7ff ff12 	bl	800e39c <__i2b>
 800e578:	2300      	movs	r3, #0
 800e57a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e57e:	4604      	mov	r4, r0
 800e580:	6003      	str	r3, [r0, #0]
 800e582:	f04f 0900 	mov.w	r9, #0
 800e586:	07eb      	lsls	r3, r5, #31
 800e588:	d50a      	bpl.n	800e5a0 <__pow5mult+0x84>
 800e58a:	4639      	mov	r1, r7
 800e58c:	4622      	mov	r2, r4
 800e58e:	4630      	mov	r0, r6
 800e590:	f7ff ff1a 	bl	800e3c8 <__multiply>
 800e594:	4639      	mov	r1, r7
 800e596:	4680      	mov	r8, r0
 800e598:	4630      	mov	r0, r6
 800e59a:	f7ff fe47 	bl	800e22c <_Bfree>
 800e59e:	4647      	mov	r7, r8
 800e5a0:	106d      	asrs	r5, r5, #1
 800e5a2:	d00b      	beq.n	800e5bc <__pow5mult+0xa0>
 800e5a4:	6820      	ldr	r0, [r4, #0]
 800e5a6:	b938      	cbnz	r0, 800e5b8 <__pow5mult+0x9c>
 800e5a8:	4622      	mov	r2, r4
 800e5aa:	4621      	mov	r1, r4
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	f7ff ff0b 	bl	800e3c8 <__multiply>
 800e5b2:	6020      	str	r0, [r4, #0]
 800e5b4:	f8c0 9000 	str.w	r9, [r0]
 800e5b8:	4604      	mov	r4, r0
 800e5ba:	e7e4      	b.n	800e586 <__pow5mult+0x6a>
 800e5bc:	4638      	mov	r0, r7
 800e5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5c2:	bf00      	nop
 800e5c4:	0800fa00 	.word	0x0800fa00
 800e5c8:	0800f82d 	.word	0x0800f82d
 800e5cc:	0800f8b0 	.word	0x0800f8b0

0800e5d0 <__lshift>:
 800e5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5d4:	460c      	mov	r4, r1
 800e5d6:	6849      	ldr	r1, [r1, #4]
 800e5d8:	6923      	ldr	r3, [r4, #16]
 800e5da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e5de:	68a3      	ldr	r3, [r4, #8]
 800e5e0:	4607      	mov	r7, r0
 800e5e2:	4691      	mov	r9, r2
 800e5e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e5e8:	f108 0601 	add.w	r6, r8, #1
 800e5ec:	42b3      	cmp	r3, r6
 800e5ee:	db0b      	blt.n	800e608 <__lshift+0x38>
 800e5f0:	4638      	mov	r0, r7
 800e5f2:	f7ff fddb 	bl	800e1ac <_Balloc>
 800e5f6:	4605      	mov	r5, r0
 800e5f8:	b948      	cbnz	r0, 800e60e <__lshift+0x3e>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	4b2a      	ldr	r3, [pc, #168]	; (800e6a8 <__lshift+0xd8>)
 800e5fe:	482b      	ldr	r0, [pc, #172]	; (800e6ac <__lshift+0xdc>)
 800e600:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e604:	f000 f96c 	bl	800e8e0 <__assert_func>
 800e608:	3101      	adds	r1, #1
 800e60a:	005b      	lsls	r3, r3, #1
 800e60c:	e7ee      	b.n	800e5ec <__lshift+0x1c>
 800e60e:	2300      	movs	r3, #0
 800e610:	f100 0114 	add.w	r1, r0, #20
 800e614:	f100 0210 	add.w	r2, r0, #16
 800e618:	4618      	mov	r0, r3
 800e61a:	4553      	cmp	r3, sl
 800e61c:	db37      	blt.n	800e68e <__lshift+0xbe>
 800e61e:	6920      	ldr	r0, [r4, #16]
 800e620:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e624:	f104 0314 	add.w	r3, r4, #20
 800e628:	f019 091f 	ands.w	r9, r9, #31
 800e62c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e630:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e634:	d02f      	beq.n	800e696 <__lshift+0xc6>
 800e636:	f1c9 0e20 	rsb	lr, r9, #32
 800e63a:	468a      	mov	sl, r1
 800e63c:	f04f 0c00 	mov.w	ip, #0
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	fa02 f209 	lsl.w	r2, r2, r9
 800e646:	ea42 020c 	orr.w	r2, r2, ip
 800e64a:	f84a 2b04 	str.w	r2, [sl], #4
 800e64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e652:	4298      	cmp	r0, r3
 800e654:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e658:	d8f2      	bhi.n	800e640 <__lshift+0x70>
 800e65a:	1b03      	subs	r3, r0, r4
 800e65c:	3b15      	subs	r3, #21
 800e65e:	f023 0303 	bic.w	r3, r3, #3
 800e662:	3304      	adds	r3, #4
 800e664:	f104 0215 	add.w	r2, r4, #21
 800e668:	4290      	cmp	r0, r2
 800e66a:	bf38      	it	cc
 800e66c:	2304      	movcc	r3, #4
 800e66e:	f841 c003 	str.w	ip, [r1, r3]
 800e672:	f1bc 0f00 	cmp.w	ip, #0
 800e676:	d001      	beq.n	800e67c <__lshift+0xac>
 800e678:	f108 0602 	add.w	r6, r8, #2
 800e67c:	3e01      	subs	r6, #1
 800e67e:	4638      	mov	r0, r7
 800e680:	612e      	str	r6, [r5, #16]
 800e682:	4621      	mov	r1, r4
 800e684:	f7ff fdd2 	bl	800e22c <_Bfree>
 800e688:	4628      	mov	r0, r5
 800e68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e68e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e692:	3301      	adds	r3, #1
 800e694:	e7c1      	b.n	800e61a <__lshift+0x4a>
 800e696:	3904      	subs	r1, #4
 800e698:	f853 2b04 	ldr.w	r2, [r3], #4
 800e69c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6a0:	4298      	cmp	r0, r3
 800e6a2:	d8f9      	bhi.n	800e698 <__lshift+0xc8>
 800e6a4:	e7ea      	b.n	800e67c <__lshift+0xac>
 800e6a6:	bf00      	nop
 800e6a8:	0800f89f 	.word	0x0800f89f
 800e6ac:	0800f8b0 	.word	0x0800f8b0

0800e6b0 <__mcmp>:
 800e6b0:	b530      	push	{r4, r5, lr}
 800e6b2:	6902      	ldr	r2, [r0, #16]
 800e6b4:	690c      	ldr	r4, [r1, #16]
 800e6b6:	1b12      	subs	r2, r2, r4
 800e6b8:	d10e      	bne.n	800e6d8 <__mcmp+0x28>
 800e6ba:	f100 0314 	add.w	r3, r0, #20
 800e6be:	3114      	adds	r1, #20
 800e6c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e6c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e6c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e6cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e6d0:	42a5      	cmp	r5, r4
 800e6d2:	d003      	beq.n	800e6dc <__mcmp+0x2c>
 800e6d4:	d305      	bcc.n	800e6e2 <__mcmp+0x32>
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	4610      	mov	r0, r2
 800e6da:	bd30      	pop	{r4, r5, pc}
 800e6dc:	4283      	cmp	r3, r0
 800e6de:	d3f3      	bcc.n	800e6c8 <__mcmp+0x18>
 800e6e0:	e7fa      	b.n	800e6d8 <__mcmp+0x28>
 800e6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e6e6:	e7f7      	b.n	800e6d8 <__mcmp+0x28>

0800e6e8 <__mdiff>:
 800e6e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ec:	460c      	mov	r4, r1
 800e6ee:	4606      	mov	r6, r0
 800e6f0:	4611      	mov	r1, r2
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	4690      	mov	r8, r2
 800e6f6:	f7ff ffdb 	bl	800e6b0 <__mcmp>
 800e6fa:	1e05      	subs	r5, r0, #0
 800e6fc:	d110      	bne.n	800e720 <__mdiff+0x38>
 800e6fe:	4629      	mov	r1, r5
 800e700:	4630      	mov	r0, r6
 800e702:	f7ff fd53 	bl	800e1ac <_Balloc>
 800e706:	b930      	cbnz	r0, 800e716 <__mdiff+0x2e>
 800e708:	4b3a      	ldr	r3, [pc, #232]	; (800e7f4 <__mdiff+0x10c>)
 800e70a:	4602      	mov	r2, r0
 800e70c:	f240 2132 	movw	r1, #562	; 0x232
 800e710:	4839      	ldr	r0, [pc, #228]	; (800e7f8 <__mdiff+0x110>)
 800e712:	f000 f8e5 	bl	800e8e0 <__assert_func>
 800e716:	2301      	movs	r3, #1
 800e718:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e71c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e720:	bfa4      	itt	ge
 800e722:	4643      	movge	r3, r8
 800e724:	46a0      	movge	r8, r4
 800e726:	4630      	mov	r0, r6
 800e728:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e72c:	bfa6      	itte	ge
 800e72e:	461c      	movge	r4, r3
 800e730:	2500      	movge	r5, #0
 800e732:	2501      	movlt	r5, #1
 800e734:	f7ff fd3a 	bl	800e1ac <_Balloc>
 800e738:	b920      	cbnz	r0, 800e744 <__mdiff+0x5c>
 800e73a:	4b2e      	ldr	r3, [pc, #184]	; (800e7f4 <__mdiff+0x10c>)
 800e73c:	4602      	mov	r2, r0
 800e73e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e742:	e7e5      	b.n	800e710 <__mdiff+0x28>
 800e744:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e748:	6926      	ldr	r6, [r4, #16]
 800e74a:	60c5      	str	r5, [r0, #12]
 800e74c:	f104 0914 	add.w	r9, r4, #20
 800e750:	f108 0514 	add.w	r5, r8, #20
 800e754:	f100 0e14 	add.w	lr, r0, #20
 800e758:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e75c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e760:	f108 0210 	add.w	r2, r8, #16
 800e764:	46f2      	mov	sl, lr
 800e766:	2100      	movs	r1, #0
 800e768:	f859 3b04 	ldr.w	r3, [r9], #4
 800e76c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e770:	fa1f f883 	uxth.w	r8, r3
 800e774:	fa11 f18b 	uxtah	r1, r1, fp
 800e778:	0c1b      	lsrs	r3, r3, #16
 800e77a:	eba1 0808 	sub.w	r8, r1, r8
 800e77e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e782:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e786:	fa1f f888 	uxth.w	r8, r8
 800e78a:	1419      	asrs	r1, r3, #16
 800e78c:	454e      	cmp	r6, r9
 800e78e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e792:	f84a 3b04 	str.w	r3, [sl], #4
 800e796:	d8e7      	bhi.n	800e768 <__mdiff+0x80>
 800e798:	1b33      	subs	r3, r6, r4
 800e79a:	3b15      	subs	r3, #21
 800e79c:	f023 0303 	bic.w	r3, r3, #3
 800e7a0:	3304      	adds	r3, #4
 800e7a2:	3415      	adds	r4, #21
 800e7a4:	42a6      	cmp	r6, r4
 800e7a6:	bf38      	it	cc
 800e7a8:	2304      	movcc	r3, #4
 800e7aa:	441d      	add	r5, r3
 800e7ac:	4473      	add	r3, lr
 800e7ae:	469e      	mov	lr, r3
 800e7b0:	462e      	mov	r6, r5
 800e7b2:	4566      	cmp	r6, ip
 800e7b4:	d30e      	bcc.n	800e7d4 <__mdiff+0xec>
 800e7b6:	f10c 0203 	add.w	r2, ip, #3
 800e7ba:	1b52      	subs	r2, r2, r5
 800e7bc:	f022 0203 	bic.w	r2, r2, #3
 800e7c0:	3d03      	subs	r5, #3
 800e7c2:	45ac      	cmp	ip, r5
 800e7c4:	bf38      	it	cc
 800e7c6:	2200      	movcc	r2, #0
 800e7c8:	441a      	add	r2, r3
 800e7ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e7ce:	b17b      	cbz	r3, 800e7f0 <__mdiff+0x108>
 800e7d0:	6107      	str	r7, [r0, #16]
 800e7d2:	e7a3      	b.n	800e71c <__mdiff+0x34>
 800e7d4:	f856 8b04 	ldr.w	r8, [r6], #4
 800e7d8:	fa11 f288 	uxtah	r2, r1, r8
 800e7dc:	1414      	asrs	r4, r2, #16
 800e7de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e7e2:	b292      	uxth	r2, r2
 800e7e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e7e8:	f84e 2b04 	str.w	r2, [lr], #4
 800e7ec:	1421      	asrs	r1, r4, #16
 800e7ee:	e7e0      	b.n	800e7b2 <__mdiff+0xca>
 800e7f0:	3f01      	subs	r7, #1
 800e7f2:	e7ea      	b.n	800e7ca <__mdiff+0xe2>
 800e7f4:	0800f89f 	.word	0x0800f89f
 800e7f8:	0800f8b0 	.word	0x0800f8b0

0800e7fc <__d2b>:
 800e7fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e800:	4689      	mov	r9, r1
 800e802:	2101      	movs	r1, #1
 800e804:	ec57 6b10 	vmov	r6, r7, d0
 800e808:	4690      	mov	r8, r2
 800e80a:	f7ff fccf 	bl	800e1ac <_Balloc>
 800e80e:	4604      	mov	r4, r0
 800e810:	b930      	cbnz	r0, 800e820 <__d2b+0x24>
 800e812:	4602      	mov	r2, r0
 800e814:	4b25      	ldr	r3, [pc, #148]	; (800e8ac <__d2b+0xb0>)
 800e816:	4826      	ldr	r0, [pc, #152]	; (800e8b0 <__d2b+0xb4>)
 800e818:	f240 310a 	movw	r1, #778	; 0x30a
 800e81c:	f000 f860 	bl	800e8e0 <__assert_func>
 800e820:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e824:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e828:	bb35      	cbnz	r5, 800e878 <__d2b+0x7c>
 800e82a:	2e00      	cmp	r6, #0
 800e82c:	9301      	str	r3, [sp, #4]
 800e82e:	d028      	beq.n	800e882 <__d2b+0x86>
 800e830:	4668      	mov	r0, sp
 800e832:	9600      	str	r6, [sp, #0]
 800e834:	f7ff fd82 	bl	800e33c <__lo0bits>
 800e838:	9900      	ldr	r1, [sp, #0]
 800e83a:	b300      	cbz	r0, 800e87e <__d2b+0x82>
 800e83c:	9a01      	ldr	r2, [sp, #4]
 800e83e:	f1c0 0320 	rsb	r3, r0, #32
 800e842:	fa02 f303 	lsl.w	r3, r2, r3
 800e846:	430b      	orrs	r3, r1
 800e848:	40c2      	lsrs	r2, r0
 800e84a:	6163      	str	r3, [r4, #20]
 800e84c:	9201      	str	r2, [sp, #4]
 800e84e:	9b01      	ldr	r3, [sp, #4]
 800e850:	61a3      	str	r3, [r4, #24]
 800e852:	2b00      	cmp	r3, #0
 800e854:	bf14      	ite	ne
 800e856:	2202      	movne	r2, #2
 800e858:	2201      	moveq	r2, #1
 800e85a:	6122      	str	r2, [r4, #16]
 800e85c:	b1d5      	cbz	r5, 800e894 <__d2b+0x98>
 800e85e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e862:	4405      	add	r5, r0
 800e864:	f8c9 5000 	str.w	r5, [r9]
 800e868:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e86c:	f8c8 0000 	str.w	r0, [r8]
 800e870:	4620      	mov	r0, r4
 800e872:	b003      	add	sp, #12
 800e874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e87c:	e7d5      	b.n	800e82a <__d2b+0x2e>
 800e87e:	6161      	str	r1, [r4, #20]
 800e880:	e7e5      	b.n	800e84e <__d2b+0x52>
 800e882:	a801      	add	r0, sp, #4
 800e884:	f7ff fd5a 	bl	800e33c <__lo0bits>
 800e888:	9b01      	ldr	r3, [sp, #4]
 800e88a:	6163      	str	r3, [r4, #20]
 800e88c:	2201      	movs	r2, #1
 800e88e:	6122      	str	r2, [r4, #16]
 800e890:	3020      	adds	r0, #32
 800e892:	e7e3      	b.n	800e85c <__d2b+0x60>
 800e894:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e89c:	f8c9 0000 	str.w	r0, [r9]
 800e8a0:	6918      	ldr	r0, [r3, #16]
 800e8a2:	f7ff fd2b 	bl	800e2fc <__hi0bits>
 800e8a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e8aa:	e7df      	b.n	800e86c <__d2b+0x70>
 800e8ac:	0800f89f 	.word	0x0800f89f
 800e8b0:	0800f8b0 	.word	0x0800f8b0

0800e8b4 <_calloc_r>:
 800e8b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8b6:	fba1 2402 	umull	r2, r4, r1, r2
 800e8ba:	b94c      	cbnz	r4, 800e8d0 <_calloc_r+0x1c>
 800e8bc:	4611      	mov	r1, r2
 800e8be:	9201      	str	r2, [sp, #4]
 800e8c0:	f7fe f8b6 	bl	800ca30 <_malloc_r>
 800e8c4:	9a01      	ldr	r2, [sp, #4]
 800e8c6:	4605      	mov	r5, r0
 800e8c8:	b930      	cbnz	r0, 800e8d8 <_calloc_r+0x24>
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	b003      	add	sp, #12
 800e8ce:	bd30      	pop	{r4, r5, pc}
 800e8d0:	220c      	movs	r2, #12
 800e8d2:	6002      	str	r2, [r0, #0]
 800e8d4:	2500      	movs	r5, #0
 800e8d6:	e7f8      	b.n	800e8ca <_calloc_r+0x16>
 800e8d8:	4621      	mov	r1, r4
 800e8da:	f7fe f835 	bl	800c948 <memset>
 800e8de:	e7f4      	b.n	800e8ca <_calloc_r+0x16>

0800e8e0 <__assert_func>:
 800e8e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8e2:	4614      	mov	r4, r2
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	4b09      	ldr	r3, [pc, #36]	; (800e90c <__assert_func+0x2c>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	68d8      	ldr	r0, [r3, #12]
 800e8ee:	b14c      	cbz	r4, 800e904 <__assert_func+0x24>
 800e8f0:	4b07      	ldr	r3, [pc, #28]	; (800e910 <__assert_func+0x30>)
 800e8f2:	9100      	str	r1, [sp, #0]
 800e8f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8f8:	4906      	ldr	r1, [pc, #24]	; (800e914 <__assert_func+0x34>)
 800e8fa:	462b      	mov	r3, r5
 800e8fc:	f000 f80e 	bl	800e91c <fiprintf>
 800e900:	f7fd ffb8 	bl	800c874 <abort>
 800e904:	4b04      	ldr	r3, [pc, #16]	; (800e918 <__assert_func+0x38>)
 800e906:	461c      	mov	r4, r3
 800e908:	e7f3      	b.n	800e8f2 <__assert_func+0x12>
 800e90a:	bf00      	nop
 800e90c:	2000000c 	.word	0x2000000c
 800e910:	0800fa0c 	.word	0x0800fa0c
 800e914:	0800fa19 	.word	0x0800fa19
 800e918:	0800fa47 	.word	0x0800fa47

0800e91c <fiprintf>:
 800e91c:	b40e      	push	{r1, r2, r3}
 800e91e:	b503      	push	{r0, r1, lr}
 800e920:	4601      	mov	r1, r0
 800e922:	ab03      	add	r3, sp, #12
 800e924:	4805      	ldr	r0, [pc, #20]	; (800e93c <fiprintf+0x20>)
 800e926:	f853 2b04 	ldr.w	r2, [r3], #4
 800e92a:	6800      	ldr	r0, [r0, #0]
 800e92c:	9301      	str	r3, [sp, #4]
 800e92e:	f000 f845 	bl	800e9bc <_vfiprintf_r>
 800e932:	b002      	add	sp, #8
 800e934:	f85d eb04 	ldr.w	lr, [sp], #4
 800e938:	b003      	add	sp, #12
 800e93a:	4770      	bx	lr
 800e93c:	2000000c 	.word	0x2000000c

0800e940 <__retarget_lock_init_recursive>:
 800e940:	4770      	bx	lr

0800e942 <__retarget_lock_acquire_recursive>:
 800e942:	4770      	bx	lr

0800e944 <__retarget_lock_release_recursive>:
 800e944:	4770      	bx	lr

0800e946 <__ascii_mbtowc>:
 800e946:	b082      	sub	sp, #8
 800e948:	b901      	cbnz	r1, 800e94c <__ascii_mbtowc+0x6>
 800e94a:	a901      	add	r1, sp, #4
 800e94c:	b142      	cbz	r2, 800e960 <__ascii_mbtowc+0x1a>
 800e94e:	b14b      	cbz	r3, 800e964 <__ascii_mbtowc+0x1e>
 800e950:	7813      	ldrb	r3, [r2, #0]
 800e952:	600b      	str	r3, [r1, #0]
 800e954:	7812      	ldrb	r2, [r2, #0]
 800e956:	1e10      	subs	r0, r2, #0
 800e958:	bf18      	it	ne
 800e95a:	2001      	movne	r0, #1
 800e95c:	b002      	add	sp, #8
 800e95e:	4770      	bx	lr
 800e960:	4610      	mov	r0, r2
 800e962:	e7fb      	b.n	800e95c <__ascii_mbtowc+0x16>
 800e964:	f06f 0001 	mvn.w	r0, #1
 800e968:	e7f8      	b.n	800e95c <__ascii_mbtowc+0x16>

0800e96a <__sfputc_r>:
 800e96a:	6893      	ldr	r3, [r2, #8]
 800e96c:	3b01      	subs	r3, #1
 800e96e:	2b00      	cmp	r3, #0
 800e970:	b410      	push	{r4}
 800e972:	6093      	str	r3, [r2, #8]
 800e974:	da08      	bge.n	800e988 <__sfputc_r+0x1e>
 800e976:	6994      	ldr	r4, [r2, #24]
 800e978:	42a3      	cmp	r3, r4
 800e97a:	db01      	blt.n	800e980 <__sfputc_r+0x16>
 800e97c:	290a      	cmp	r1, #10
 800e97e:	d103      	bne.n	800e988 <__sfputc_r+0x1e>
 800e980:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e984:	f000 b94a 	b.w	800ec1c <__swbuf_r>
 800e988:	6813      	ldr	r3, [r2, #0]
 800e98a:	1c58      	adds	r0, r3, #1
 800e98c:	6010      	str	r0, [r2, #0]
 800e98e:	7019      	strb	r1, [r3, #0]
 800e990:	4608      	mov	r0, r1
 800e992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <__sfputs_r>:
 800e998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e99a:	4606      	mov	r6, r0
 800e99c:	460f      	mov	r7, r1
 800e99e:	4614      	mov	r4, r2
 800e9a0:	18d5      	adds	r5, r2, r3
 800e9a2:	42ac      	cmp	r4, r5
 800e9a4:	d101      	bne.n	800e9aa <__sfputs_r+0x12>
 800e9a6:	2000      	movs	r0, #0
 800e9a8:	e007      	b.n	800e9ba <__sfputs_r+0x22>
 800e9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9ae:	463a      	mov	r2, r7
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	f7ff ffda 	bl	800e96a <__sfputc_r>
 800e9b6:	1c43      	adds	r3, r0, #1
 800e9b8:	d1f3      	bne.n	800e9a2 <__sfputs_r+0xa>
 800e9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e9bc <_vfiprintf_r>:
 800e9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c0:	460d      	mov	r5, r1
 800e9c2:	b09d      	sub	sp, #116	; 0x74
 800e9c4:	4614      	mov	r4, r2
 800e9c6:	4698      	mov	r8, r3
 800e9c8:	4606      	mov	r6, r0
 800e9ca:	b118      	cbz	r0, 800e9d4 <_vfiprintf_r+0x18>
 800e9cc:	6983      	ldr	r3, [r0, #24]
 800e9ce:	b90b      	cbnz	r3, 800e9d4 <_vfiprintf_r+0x18>
 800e9d0:	f000 fb0c 	bl	800efec <__sinit>
 800e9d4:	4b89      	ldr	r3, [pc, #548]	; (800ebfc <_vfiprintf_r+0x240>)
 800e9d6:	429d      	cmp	r5, r3
 800e9d8:	d11b      	bne.n	800ea12 <_vfiprintf_r+0x56>
 800e9da:	6875      	ldr	r5, [r6, #4]
 800e9dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9de:	07d9      	lsls	r1, r3, #31
 800e9e0:	d405      	bmi.n	800e9ee <_vfiprintf_r+0x32>
 800e9e2:	89ab      	ldrh	r3, [r5, #12]
 800e9e4:	059a      	lsls	r2, r3, #22
 800e9e6:	d402      	bmi.n	800e9ee <_vfiprintf_r+0x32>
 800e9e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9ea:	f7ff ffaa 	bl	800e942 <__retarget_lock_acquire_recursive>
 800e9ee:	89ab      	ldrh	r3, [r5, #12]
 800e9f0:	071b      	lsls	r3, r3, #28
 800e9f2:	d501      	bpl.n	800e9f8 <_vfiprintf_r+0x3c>
 800e9f4:	692b      	ldr	r3, [r5, #16]
 800e9f6:	b9eb      	cbnz	r3, 800ea34 <_vfiprintf_r+0x78>
 800e9f8:	4629      	mov	r1, r5
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	f000 f96e 	bl	800ecdc <__swsetup_r>
 800ea00:	b1c0      	cbz	r0, 800ea34 <_vfiprintf_r+0x78>
 800ea02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea04:	07dc      	lsls	r4, r3, #31
 800ea06:	d50e      	bpl.n	800ea26 <_vfiprintf_r+0x6a>
 800ea08:	f04f 30ff 	mov.w	r0, #4294967295
 800ea0c:	b01d      	add	sp, #116	; 0x74
 800ea0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea12:	4b7b      	ldr	r3, [pc, #492]	; (800ec00 <_vfiprintf_r+0x244>)
 800ea14:	429d      	cmp	r5, r3
 800ea16:	d101      	bne.n	800ea1c <_vfiprintf_r+0x60>
 800ea18:	68b5      	ldr	r5, [r6, #8]
 800ea1a:	e7df      	b.n	800e9dc <_vfiprintf_r+0x20>
 800ea1c:	4b79      	ldr	r3, [pc, #484]	; (800ec04 <_vfiprintf_r+0x248>)
 800ea1e:	429d      	cmp	r5, r3
 800ea20:	bf08      	it	eq
 800ea22:	68f5      	ldreq	r5, [r6, #12]
 800ea24:	e7da      	b.n	800e9dc <_vfiprintf_r+0x20>
 800ea26:	89ab      	ldrh	r3, [r5, #12]
 800ea28:	0598      	lsls	r0, r3, #22
 800ea2a:	d4ed      	bmi.n	800ea08 <_vfiprintf_r+0x4c>
 800ea2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea2e:	f7ff ff89 	bl	800e944 <__retarget_lock_release_recursive>
 800ea32:	e7e9      	b.n	800ea08 <_vfiprintf_r+0x4c>
 800ea34:	2300      	movs	r3, #0
 800ea36:	9309      	str	r3, [sp, #36]	; 0x24
 800ea38:	2320      	movs	r3, #32
 800ea3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea42:	2330      	movs	r3, #48	; 0x30
 800ea44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ec08 <_vfiprintf_r+0x24c>
 800ea48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea4c:	f04f 0901 	mov.w	r9, #1
 800ea50:	4623      	mov	r3, r4
 800ea52:	469a      	mov	sl, r3
 800ea54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea58:	b10a      	cbz	r2, 800ea5e <_vfiprintf_r+0xa2>
 800ea5a:	2a25      	cmp	r2, #37	; 0x25
 800ea5c:	d1f9      	bne.n	800ea52 <_vfiprintf_r+0x96>
 800ea5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ea62:	d00b      	beq.n	800ea7c <_vfiprintf_r+0xc0>
 800ea64:	465b      	mov	r3, fp
 800ea66:	4622      	mov	r2, r4
 800ea68:	4629      	mov	r1, r5
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	f7ff ff94 	bl	800e998 <__sfputs_r>
 800ea70:	3001      	adds	r0, #1
 800ea72:	f000 80aa 	beq.w	800ebca <_vfiprintf_r+0x20e>
 800ea76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea78:	445a      	add	r2, fp
 800ea7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ea7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	f000 80a2 	beq.w	800ebca <_vfiprintf_r+0x20e>
 800ea86:	2300      	movs	r3, #0
 800ea88:	f04f 32ff 	mov.w	r2, #4294967295
 800ea8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea90:	f10a 0a01 	add.w	sl, sl, #1
 800ea94:	9304      	str	r3, [sp, #16]
 800ea96:	9307      	str	r3, [sp, #28]
 800ea98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ea9e:	4654      	mov	r4, sl
 800eaa0:	2205      	movs	r2, #5
 800eaa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaa6:	4858      	ldr	r0, [pc, #352]	; (800ec08 <_vfiprintf_r+0x24c>)
 800eaa8:	f7f1 fba2 	bl	80001f0 <memchr>
 800eaac:	9a04      	ldr	r2, [sp, #16]
 800eaae:	b9d8      	cbnz	r0, 800eae8 <_vfiprintf_r+0x12c>
 800eab0:	06d1      	lsls	r1, r2, #27
 800eab2:	bf44      	itt	mi
 800eab4:	2320      	movmi	r3, #32
 800eab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eaba:	0713      	lsls	r3, r2, #28
 800eabc:	bf44      	itt	mi
 800eabe:	232b      	movmi	r3, #43	; 0x2b
 800eac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eac4:	f89a 3000 	ldrb.w	r3, [sl]
 800eac8:	2b2a      	cmp	r3, #42	; 0x2a
 800eaca:	d015      	beq.n	800eaf8 <_vfiprintf_r+0x13c>
 800eacc:	9a07      	ldr	r2, [sp, #28]
 800eace:	4654      	mov	r4, sl
 800ead0:	2000      	movs	r0, #0
 800ead2:	f04f 0c0a 	mov.w	ip, #10
 800ead6:	4621      	mov	r1, r4
 800ead8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eadc:	3b30      	subs	r3, #48	; 0x30
 800eade:	2b09      	cmp	r3, #9
 800eae0:	d94e      	bls.n	800eb80 <_vfiprintf_r+0x1c4>
 800eae2:	b1b0      	cbz	r0, 800eb12 <_vfiprintf_r+0x156>
 800eae4:	9207      	str	r2, [sp, #28]
 800eae6:	e014      	b.n	800eb12 <_vfiprintf_r+0x156>
 800eae8:	eba0 0308 	sub.w	r3, r0, r8
 800eaec:	fa09 f303 	lsl.w	r3, r9, r3
 800eaf0:	4313      	orrs	r3, r2
 800eaf2:	9304      	str	r3, [sp, #16]
 800eaf4:	46a2      	mov	sl, r4
 800eaf6:	e7d2      	b.n	800ea9e <_vfiprintf_r+0xe2>
 800eaf8:	9b03      	ldr	r3, [sp, #12]
 800eafa:	1d19      	adds	r1, r3, #4
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	9103      	str	r1, [sp, #12]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	bfbb      	ittet	lt
 800eb04:	425b      	neglt	r3, r3
 800eb06:	f042 0202 	orrlt.w	r2, r2, #2
 800eb0a:	9307      	strge	r3, [sp, #28]
 800eb0c:	9307      	strlt	r3, [sp, #28]
 800eb0e:	bfb8      	it	lt
 800eb10:	9204      	strlt	r2, [sp, #16]
 800eb12:	7823      	ldrb	r3, [r4, #0]
 800eb14:	2b2e      	cmp	r3, #46	; 0x2e
 800eb16:	d10c      	bne.n	800eb32 <_vfiprintf_r+0x176>
 800eb18:	7863      	ldrb	r3, [r4, #1]
 800eb1a:	2b2a      	cmp	r3, #42	; 0x2a
 800eb1c:	d135      	bne.n	800eb8a <_vfiprintf_r+0x1ce>
 800eb1e:	9b03      	ldr	r3, [sp, #12]
 800eb20:	1d1a      	adds	r2, r3, #4
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	9203      	str	r2, [sp, #12]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	bfb8      	it	lt
 800eb2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb2e:	3402      	adds	r4, #2
 800eb30:	9305      	str	r3, [sp, #20]
 800eb32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ec18 <_vfiprintf_r+0x25c>
 800eb36:	7821      	ldrb	r1, [r4, #0]
 800eb38:	2203      	movs	r2, #3
 800eb3a:	4650      	mov	r0, sl
 800eb3c:	f7f1 fb58 	bl	80001f0 <memchr>
 800eb40:	b140      	cbz	r0, 800eb54 <_vfiprintf_r+0x198>
 800eb42:	2340      	movs	r3, #64	; 0x40
 800eb44:	eba0 000a 	sub.w	r0, r0, sl
 800eb48:	fa03 f000 	lsl.w	r0, r3, r0
 800eb4c:	9b04      	ldr	r3, [sp, #16]
 800eb4e:	4303      	orrs	r3, r0
 800eb50:	3401      	adds	r4, #1
 800eb52:	9304      	str	r3, [sp, #16]
 800eb54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb58:	482c      	ldr	r0, [pc, #176]	; (800ec0c <_vfiprintf_r+0x250>)
 800eb5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb5e:	2206      	movs	r2, #6
 800eb60:	f7f1 fb46 	bl	80001f0 <memchr>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d03f      	beq.n	800ebe8 <_vfiprintf_r+0x22c>
 800eb68:	4b29      	ldr	r3, [pc, #164]	; (800ec10 <_vfiprintf_r+0x254>)
 800eb6a:	bb1b      	cbnz	r3, 800ebb4 <_vfiprintf_r+0x1f8>
 800eb6c:	9b03      	ldr	r3, [sp, #12]
 800eb6e:	3307      	adds	r3, #7
 800eb70:	f023 0307 	bic.w	r3, r3, #7
 800eb74:	3308      	adds	r3, #8
 800eb76:	9303      	str	r3, [sp, #12]
 800eb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb7a:	443b      	add	r3, r7
 800eb7c:	9309      	str	r3, [sp, #36]	; 0x24
 800eb7e:	e767      	b.n	800ea50 <_vfiprintf_r+0x94>
 800eb80:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb84:	460c      	mov	r4, r1
 800eb86:	2001      	movs	r0, #1
 800eb88:	e7a5      	b.n	800ead6 <_vfiprintf_r+0x11a>
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	3401      	adds	r4, #1
 800eb8e:	9305      	str	r3, [sp, #20]
 800eb90:	4619      	mov	r1, r3
 800eb92:	f04f 0c0a 	mov.w	ip, #10
 800eb96:	4620      	mov	r0, r4
 800eb98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb9c:	3a30      	subs	r2, #48	; 0x30
 800eb9e:	2a09      	cmp	r2, #9
 800eba0:	d903      	bls.n	800ebaa <_vfiprintf_r+0x1ee>
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d0c5      	beq.n	800eb32 <_vfiprintf_r+0x176>
 800eba6:	9105      	str	r1, [sp, #20]
 800eba8:	e7c3      	b.n	800eb32 <_vfiprintf_r+0x176>
 800ebaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebae:	4604      	mov	r4, r0
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e7f0      	b.n	800eb96 <_vfiprintf_r+0x1da>
 800ebb4:	ab03      	add	r3, sp, #12
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	462a      	mov	r2, r5
 800ebba:	4b16      	ldr	r3, [pc, #88]	; (800ec14 <_vfiprintf_r+0x258>)
 800ebbc:	a904      	add	r1, sp, #16
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	f7fe f84a 	bl	800cc58 <_printf_float>
 800ebc4:	4607      	mov	r7, r0
 800ebc6:	1c78      	adds	r0, r7, #1
 800ebc8:	d1d6      	bne.n	800eb78 <_vfiprintf_r+0x1bc>
 800ebca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebcc:	07d9      	lsls	r1, r3, #31
 800ebce:	d405      	bmi.n	800ebdc <_vfiprintf_r+0x220>
 800ebd0:	89ab      	ldrh	r3, [r5, #12]
 800ebd2:	059a      	lsls	r2, r3, #22
 800ebd4:	d402      	bmi.n	800ebdc <_vfiprintf_r+0x220>
 800ebd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebd8:	f7ff feb4 	bl	800e944 <__retarget_lock_release_recursive>
 800ebdc:	89ab      	ldrh	r3, [r5, #12]
 800ebde:	065b      	lsls	r3, r3, #25
 800ebe0:	f53f af12 	bmi.w	800ea08 <_vfiprintf_r+0x4c>
 800ebe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebe6:	e711      	b.n	800ea0c <_vfiprintf_r+0x50>
 800ebe8:	ab03      	add	r3, sp, #12
 800ebea:	9300      	str	r3, [sp, #0]
 800ebec:	462a      	mov	r2, r5
 800ebee:	4b09      	ldr	r3, [pc, #36]	; (800ec14 <_vfiprintf_r+0x258>)
 800ebf0:	a904      	add	r1, sp, #16
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	f7fe fad4 	bl	800d1a0 <_printf_i>
 800ebf8:	e7e4      	b.n	800ebc4 <_vfiprintf_r+0x208>
 800ebfa:	bf00      	nop
 800ebfc:	0800fb84 	.word	0x0800fb84
 800ec00:	0800fba4 	.word	0x0800fba4
 800ec04:	0800fb64 	.word	0x0800fb64
 800ec08:	0800fa52 	.word	0x0800fa52
 800ec0c:	0800fa5c 	.word	0x0800fa5c
 800ec10:	0800cc59 	.word	0x0800cc59
 800ec14:	0800e999 	.word	0x0800e999
 800ec18:	0800fa58 	.word	0x0800fa58

0800ec1c <__swbuf_r>:
 800ec1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec1e:	460e      	mov	r6, r1
 800ec20:	4614      	mov	r4, r2
 800ec22:	4605      	mov	r5, r0
 800ec24:	b118      	cbz	r0, 800ec2e <__swbuf_r+0x12>
 800ec26:	6983      	ldr	r3, [r0, #24]
 800ec28:	b90b      	cbnz	r3, 800ec2e <__swbuf_r+0x12>
 800ec2a:	f000 f9df 	bl	800efec <__sinit>
 800ec2e:	4b21      	ldr	r3, [pc, #132]	; (800ecb4 <__swbuf_r+0x98>)
 800ec30:	429c      	cmp	r4, r3
 800ec32:	d12b      	bne.n	800ec8c <__swbuf_r+0x70>
 800ec34:	686c      	ldr	r4, [r5, #4]
 800ec36:	69a3      	ldr	r3, [r4, #24]
 800ec38:	60a3      	str	r3, [r4, #8]
 800ec3a:	89a3      	ldrh	r3, [r4, #12]
 800ec3c:	071a      	lsls	r2, r3, #28
 800ec3e:	d52f      	bpl.n	800eca0 <__swbuf_r+0x84>
 800ec40:	6923      	ldr	r3, [r4, #16]
 800ec42:	b36b      	cbz	r3, 800eca0 <__swbuf_r+0x84>
 800ec44:	6923      	ldr	r3, [r4, #16]
 800ec46:	6820      	ldr	r0, [r4, #0]
 800ec48:	1ac0      	subs	r0, r0, r3
 800ec4a:	6963      	ldr	r3, [r4, #20]
 800ec4c:	b2f6      	uxtb	r6, r6
 800ec4e:	4283      	cmp	r3, r0
 800ec50:	4637      	mov	r7, r6
 800ec52:	dc04      	bgt.n	800ec5e <__swbuf_r+0x42>
 800ec54:	4621      	mov	r1, r4
 800ec56:	4628      	mov	r0, r5
 800ec58:	f000 f934 	bl	800eec4 <_fflush_r>
 800ec5c:	bb30      	cbnz	r0, 800ecac <__swbuf_r+0x90>
 800ec5e:	68a3      	ldr	r3, [r4, #8]
 800ec60:	3b01      	subs	r3, #1
 800ec62:	60a3      	str	r3, [r4, #8]
 800ec64:	6823      	ldr	r3, [r4, #0]
 800ec66:	1c5a      	adds	r2, r3, #1
 800ec68:	6022      	str	r2, [r4, #0]
 800ec6a:	701e      	strb	r6, [r3, #0]
 800ec6c:	6963      	ldr	r3, [r4, #20]
 800ec6e:	3001      	adds	r0, #1
 800ec70:	4283      	cmp	r3, r0
 800ec72:	d004      	beq.n	800ec7e <__swbuf_r+0x62>
 800ec74:	89a3      	ldrh	r3, [r4, #12]
 800ec76:	07db      	lsls	r3, r3, #31
 800ec78:	d506      	bpl.n	800ec88 <__swbuf_r+0x6c>
 800ec7a:	2e0a      	cmp	r6, #10
 800ec7c:	d104      	bne.n	800ec88 <__swbuf_r+0x6c>
 800ec7e:	4621      	mov	r1, r4
 800ec80:	4628      	mov	r0, r5
 800ec82:	f000 f91f 	bl	800eec4 <_fflush_r>
 800ec86:	b988      	cbnz	r0, 800ecac <__swbuf_r+0x90>
 800ec88:	4638      	mov	r0, r7
 800ec8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec8c:	4b0a      	ldr	r3, [pc, #40]	; (800ecb8 <__swbuf_r+0x9c>)
 800ec8e:	429c      	cmp	r4, r3
 800ec90:	d101      	bne.n	800ec96 <__swbuf_r+0x7a>
 800ec92:	68ac      	ldr	r4, [r5, #8]
 800ec94:	e7cf      	b.n	800ec36 <__swbuf_r+0x1a>
 800ec96:	4b09      	ldr	r3, [pc, #36]	; (800ecbc <__swbuf_r+0xa0>)
 800ec98:	429c      	cmp	r4, r3
 800ec9a:	bf08      	it	eq
 800ec9c:	68ec      	ldreq	r4, [r5, #12]
 800ec9e:	e7ca      	b.n	800ec36 <__swbuf_r+0x1a>
 800eca0:	4621      	mov	r1, r4
 800eca2:	4628      	mov	r0, r5
 800eca4:	f000 f81a 	bl	800ecdc <__swsetup_r>
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	d0cb      	beq.n	800ec44 <__swbuf_r+0x28>
 800ecac:	f04f 37ff 	mov.w	r7, #4294967295
 800ecb0:	e7ea      	b.n	800ec88 <__swbuf_r+0x6c>
 800ecb2:	bf00      	nop
 800ecb4:	0800fb84 	.word	0x0800fb84
 800ecb8:	0800fba4 	.word	0x0800fba4
 800ecbc:	0800fb64 	.word	0x0800fb64

0800ecc0 <__ascii_wctomb>:
 800ecc0:	b149      	cbz	r1, 800ecd6 <__ascii_wctomb+0x16>
 800ecc2:	2aff      	cmp	r2, #255	; 0xff
 800ecc4:	bf85      	ittet	hi
 800ecc6:	238a      	movhi	r3, #138	; 0x8a
 800ecc8:	6003      	strhi	r3, [r0, #0]
 800ecca:	700a      	strbls	r2, [r1, #0]
 800eccc:	f04f 30ff 	movhi.w	r0, #4294967295
 800ecd0:	bf98      	it	ls
 800ecd2:	2001      	movls	r0, #1
 800ecd4:	4770      	bx	lr
 800ecd6:	4608      	mov	r0, r1
 800ecd8:	4770      	bx	lr
	...

0800ecdc <__swsetup_r>:
 800ecdc:	4b32      	ldr	r3, [pc, #200]	; (800eda8 <__swsetup_r+0xcc>)
 800ecde:	b570      	push	{r4, r5, r6, lr}
 800ece0:	681d      	ldr	r5, [r3, #0]
 800ece2:	4606      	mov	r6, r0
 800ece4:	460c      	mov	r4, r1
 800ece6:	b125      	cbz	r5, 800ecf2 <__swsetup_r+0x16>
 800ece8:	69ab      	ldr	r3, [r5, #24]
 800ecea:	b913      	cbnz	r3, 800ecf2 <__swsetup_r+0x16>
 800ecec:	4628      	mov	r0, r5
 800ecee:	f000 f97d 	bl	800efec <__sinit>
 800ecf2:	4b2e      	ldr	r3, [pc, #184]	; (800edac <__swsetup_r+0xd0>)
 800ecf4:	429c      	cmp	r4, r3
 800ecf6:	d10f      	bne.n	800ed18 <__swsetup_r+0x3c>
 800ecf8:	686c      	ldr	r4, [r5, #4]
 800ecfa:	89a3      	ldrh	r3, [r4, #12]
 800ecfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed00:	0719      	lsls	r1, r3, #28
 800ed02:	d42c      	bmi.n	800ed5e <__swsetup_r+0x82>
 800ed04:	06dd      	lsls	r5, r3, #27
 800ed06:	d411      	bmi.n	800ed2c <__swsetup_r+0x50>
 800ed08:	2309      	movs	r3, #9
 800ed0a:	6033      	str	r3, [r6, #0]
 800ed0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed10:	81a3      	strh	r3, [r4, #12]
 800ed12:	f04f 30ff 	mov.w	r0, #4294967295
 800ed16:	e03e      	b.n	800ed96 <__swsetup_r+0xba>
 800ed18:	4b25      	ldr	r3, [pc, #148]	; (800edb0 <__swsetup_r+0xd4>)
 800ed1a:	429c      	cmp	r4, r3
 800ed1c:	d101      	bne.n	800ed22 <__swsetup_r+0x46>
 800ed1e:	68ac      	ldr	r4, [r5, #8]
 800ed20:	e7eb      	b.n	800ecfa <__swsetup_r+0x1e>
 800ed22:	4b24      	ldr	r3, [pc, #144]	; (800edb4 <__swsetup_r+0xd8>)
 800ed24:	429c      	cmp	r4, r3
 800ed26:	bf08      	it	eq
 800ed28:	68ec      	ldreq	r4, [r5, #12]
 800ed2a:	e7e6      	b.n	800ecfa <__swsetup_r+0x1e>
 800ed2c:	0758      	lsls	r0, r3, #29
 800ed2e:	d512      	bpl.n	800ed56 <__swsetup_r+0x7a>
 800ed30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed32:	b141      	cbz	r1, 800ed46 <__swsetup_r+0x6a>
 800ed34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed38:	4299      	cmp	r1, r3
 800ed3a:	d002      	beq.n	800ed42 <__swsetup_r+0x66>
 800ed3c:	4630      	mov	r0, r6
 800ed3e:	f7fd fe0b 	bl	800c958 <_free_r>
 800ed42:	2300      	movs	r3, #0
 800ed44:	6363      	str	r3, [r4, #52]	; 0x34
 800ed46:	89a3      	ldrh	r3, [r4, #12]
 800ed48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed4c:	81a3      	strh	r3, [r4, #12]
 800ed4e:	2300      	movs	r3, #0
 800ed50:	6063      	str	r3, [r4, #4]
 800ed52:	6923      	ldr	r3, [r4, #16]
 800ed54:	6023      	str	r3, [r4, #0]
 800ed56:	89a3      	ldrh	r3, [r4, #12]
 800ed58:	f043 0308 	orr.w	r3, r3, #8
 800ed5c:	81a3      	strh	r3, [r4, #12]
 800ed5e:	6923      	ldr	r3, [r4, #16]
 800ed60:	b94b      	cbnz	r3, 800ed76 <__swsetup_r+0x9a>
 800ed62:	89a3      	ldrh	r3, [r4, #12]
 800ed64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ed68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed6c:	d003      	beq.n	800ed76 <__swsetup_r+0x9a>
 800ed6e:	4621      	mov	r1, r4
 800ed70:	4630      	mov	r0, r6
 800ed72:	f000 f9fd 	bl	800f170 <__smakebuf_r>
 800ed76:	89a0      	ldrh	r0, [r4, #12]
 800ed78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed7c:	f010 0301 	ands.w	r3, r0, #1
 800ed80:	d00a      	beq.n	800ed98 <__swsetup_r+0xbc>
 800ed82:	2300      	movs	r3, #0
 800ed84:	60a3      	str	r3, [r4, #8]
 800ed86:	6963      	ldr	r3, [r4, #20]
 800ed88:	425b      	negs	r3, r3
 800ed8a:	61a3      	str	r3, [r4, #24]
 800ed8c:	6923      	ldr	r3, [r4, #16]
 800ed8e:	b943      	cbnz	r3, 800eda2 <__swsetup_r+0xc6>
 800ed90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed94:	d1ba      	bne.n	800ed0c <__swsetup_r+0x30>
 800ed96:	bd70      	pop	{r4, r5, r6, pc}
 800ed98:	0781      	lsls	r1, r0, #30
 800ed9a:	bf58      	it	pl
 800ed9c:	6963      	ldrpl	r3, [r4, #20]
 800ed9e:	60a3      	str	r3, [r4, #8]
 800eda0:	e7f4      	b.n	800ed8c <__swsetup_r+0xb0>
 800eda2:	2000      	movs	r0, #0
 800eda4:	e7f7      	b.n	800ed96 <__swsetup_r+0xba>
 800eda6:	bf00      	nop
 800eda8:	2000000c 	.word	0x2000000c
 800edac:	0800fb84 	.word	0x0800fb84
 800edb0:	0800fba4 	.word	0x0800fba4
 800edb4:	0800fb64 	.word	0x0800fb64

0800edb8 <__sflush_r>:
 800edb8:	898a      	ldrh	r2, [r1, #12]
 800edba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edbe:	4605      	mov	r5, r0
 800edc0:	0710      	lsls	r0, r2, #28
 800edc2:	460c      	mov	r4, r1
 800edc4:	d458      	bmi.n	800ee78 <__sflush_r+0xc0>
 800edc6:	684b      	ldr	r3, [r1, #4]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	dc05      	bgt.n	800edd8 <__sflush_r+0x20>
 800edcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800edce:	2b00      	cmp	r3, #0
 800edd0:	dc02      	bgt.n	800edd8 <__sflush_r+0x20>
 800edd2:	2000      	movs	r0, #0
 800edd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800edda:	2e00      	cmp	r6, #0
 800eddc:	d0f9      	beq.n	800edd2 <__sflush_r+0x1a>
 800edde:	2300      	movs	r3, #0
 800ede0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ede4:	682f      	ldr	r7, [r5, #0]
 800ede6:	602b      	str	r3, [r5, #0]
 800ede8:	d032      	beq.n	800ee50 <__sflush_r+0x98>
 800edea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800edec:	89a3      	ldrh	r3, [r4, #12]
 800edee:	075a      	lsls	r2, r3, #29
 800edf0:	d505      	bpl.n	800edfe <__sflush_r+0x46>
 800edf2:	6863      	ldr	r3, [r4, #4]
 800edf4:	1ac0      	subs	r0, r0, r3
 800edf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800edf8:	b10b      	cbz	r3, 800edfe <__sflush_r+0x46>
 800edfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800edfc:	1ac0      	subs	r0, r0, r3
 800edfe:	2300      	movs	r3, #0
 800ee00:	4602      	mov	r2, r0
 800ee02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee04:	6a21      	ldr	r1, [r4, #32]
 800ee06:	4628      	mov	r0, r5
 800ee08:	47b0      	blx	r6
 800ee0a:	1c43      	adds	r3, r0, #1
 800ee0c:	89a3      	ldrh	r3, [r4, #12]
 800ee0e:	d106      	bne.n	800ee1e <__sflush_r+0x66>
 800ee10:	6829      	ldr	r1, [r5, #0]
 800ee12:	291d      	cmp	r1, #29
 800ee14:	d82c      	bhi.n	800ee70 <__sflush_r+0xb8>
 800ee16:	4a2a      	ldr	r2, [pc, #168]	; (800eec0 <__sflush_r+0x108>)
 800ee18:	40ca      	lsrs	r2, r1
 800ee1a:	07d6      	lsls	r6, r2, #31
 800ee1c:	d528      	bpl.n	800ee70 <__sflush_r+0xb8>
 800ee1e:	2200      	movs	r2, #0
 800ee20:	6062      	str	r2, [r4, #4]
 800ee22:	04d9      	lsls	r1, r3, #19
 800ee24:	6922      	ldr	r2, [r4, #16]
 800ee26:	6022      	str	r2, [r4, #0]
 800ee28:	d504      	bpl.n	800ee34 <__sflush_r+0x7c>
 800ee2a:	1c42      	adds	r2, r0, #1
 800ee2c:	d101      	bne.n	800ee32 <__sflush_r+0x7a>
 800ee2e:	682b      	ldr	r3, [r5, #0]
 800ee30:	b903      	cbnz	r3, 800ee34 <__sflush_r+0x7c>
 800ee32:	6560      	str	r0, [r4, #84]	; 0x54
 800ee34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee36:	602f      	str	r7, [r5, #0]
 800ee38:	2900      	cmp	r1, #0
 800ee3a:	d0ca      	beq.n	800edd2 <__sflush_r+0x1a>
 800ee3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee40:	4299      	cmp	r1, r3
 800ee42:	d002      	beq.n	800ee4a <__sflush_r+0x92>
 800ee44:	4628      	mov	r0, r5
 800ee46:	f7fd fd87 	bl	800c958 <_free_r>
 800ee4a:	2000      	movs	r0, #0
 800ee4c:	6360      	str	r0, [r4, #52]	; 0x34
 800ee4e:	e7c1      	b.n	800edd4 <__sflush_r+0x1c>
 800ee50:	6a21      	ldr	r1, [r4, #32]
 800ee52:	2301      	movs	r3, #1
 800ee54:	4628      	mov	r0, r5
 800ee56:	47b0      	blx	r6
 800ee58:	1c41      	adds	r1, r0, #1
 800ee5a:	d1c7      	bne.n	800edec <__sflush_r+0x34>
 800ee5c:	682b      	ldr	r3, [r5, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d0c4      	beq.n	800edec <__sflush_r+0x34>
 800ee62:	2b1d      	cmp	r3, #29
 800ee64:	d001      	beq.n	800ee6a <__sflush_r+0xb2>
 800ee66:	2b16      	cmp	r3, #22
 800ee68:	d101      	bne.n	800ee6e <__sflush_r+0xb6>
 800ee6a:	602f      	str	r7, [r5, #0]
 800ee6c:	e7b1      	b.n	800edd2 <__sflush_r+0x1a>
 800ee6e:	89a3      	ldrh	r3, [r4, #12]
 800ee70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee74:	81a3      	strh	r3, [r4, #12]
 800ee76:	e7ad      	b.n	800edd4 <__sflush_r+0x1c>
 800ee78:	690f      	ldr	r7, [r1, #16]
 800ee7a:	2f00      	cmp	r7, #0
 800ee7c:	d0a9      	beq.n	800edd2 <__sflush_r+0x1a>
 800ee7e:	0793      	lsls	r3, r2, #30
 800ee80:	680e      	ldr	r6, [r1, #0]
 800ee82:	bf08      	it	eq
 800ee84:	694b      	ldreq	r3, [r1, #20]
 800ee86:	600f      	str	r7, [r1, #0]
 800ee88:	bf18      	it	ne
 800ee8a:	2300      	movne	r3, #0
 800ee8c:	eba6 0807 	sub.w	r8, r6, r7
 800ee90:	608b      	str	r3, [r1, #8]
 800ee92:	f1b8 0f00 	cmp.w	r8, #0
 800ee96:	dd9c      	ble.n	800edd2 <__sflush_r+0x1a>
 800ee98:	6a21      	ldr	r1, [r4, #32]
 800ee9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee9c:	4643      	mov	r3, r8
 800ee9e:	463a      	mov	r2, r7
 800eea0:	4628      	mov	r0, r5
 800eea2:	47b0      	blx	r6
 800eea4:	2800      	cmp	r0, #0
 800eea6:	dc06      	bgt.n	800eeb6 <__sflush_r+0xfe>
 800eea8:	89a3      	ldrh	r3, [r4, #12]
 800eeaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eeae:	81a3      	strh	r3, [r4, #12]
 800eeb0:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb4:	e78e      	b.n	800edd4 <__sflush_r+0x1c>
 800eeb6:	4407      	add	r7, r0
 800eeb8:	eba8 0800 	sub.w	r8, r8, r0
 800eebc:	e7e9      	b.n	800ee92 <__sflush_r+0xda>
 800eebe:	bf00      	nop
 800eec0:	20400001 	.word	0x20400001

0800eec4 <_fflush_r>:
 800eec4:	b538      	push	{r3, r4, r5, lr}
 800eec6:	690b      	ldr	r3, [r1, #16]
 800eec8:	4605      	mov	r5, r0
 800eeca:	460c      	mov	r4, r1
 800eecc:	b913      	cbnz	r3, 800eed4 <_fflush_r+0x10>
 800eece:	2500      	movs	r5, #0
 800eed0:	4628      	mov	r0, r5
 800eed2:	bd38      	pop	{r3, r4, r5, pc}
 800eed4:	b118      	cbz	r0, 800eede <_fflush_r+0x1a>
 800eed6:	6983      	ldr	r3, [r0, #24]
 800eed8:	b90b      	cbnz	r3, 800eede <_fflush_r+0x1a>
 800eeda:	f000 f887 	bl	800efec <__sinit>
 800eede:	4b14      	ldr	r3, [pc, #80]	; (800ef30 <_fflush_r+0x6c>)
 800eee0:	429c      	cmp	r4, r3
 800eee2:	d11b      	bne.n	800ef1c <_fflush_r+0x58>
 800eee4:	686c      	ldr	r4, [r5, #4]
 800eee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d0ef      	beq.n	800eece <_fflush_r+0xa>
 800eeee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eef0:	07d0      	lsls	r0, r2, #31
 800eef2:	d404      	bmi.n	800eefe <_fflush_r+0x3a>
 800eef4:	0599      	lsls	r1, r3, #22
 800eef6:	d402      	bmi.n	800eefe <_fflush_r+0x3a>
 800eef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eefa:	f7ff fd22 	bl	800e942 <__retarget_lock_acquire_recursive>
 800eefe:	4628      	mov	r0, r5
 800ef00:	4621      	mov	r1, r4
 800ef02:	f7ff ff59 	bl	800edb8 <__sflush_r>
 800ef06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef08:	07da      	lsls	r2, r3, #31
 800ef0a:	4605      	mov	r5, r0
 800ef0c:	d4e0      	bmi.n	800eed0 <_fflush_r+0xc>
 800ef0e:	89a3      	ldrh	r3, [r4, #12]
 800ef10:	059b      	lsls	r3, r3, #22
 800ef12:	d4dd      	bmi.n	800eed0 <_fflush_r+0xc>
 800ef14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef16:	f7ff fd15 	bl	800e944 <__retarget_lock_release_recursive>
 800ef1a:	e7d9      	b.n	800eed0 <_fflush_r+0xc>
 800ef1c:	4b05      	ldr	r3, [pc, #20]	; (800ef34 <_fflush_r+0x70>)
 800ef1e:	429c      	cmp	r4, r3
 800ef20:	d101      	bne.n	800ef26 <_fflush_r+0x62>
 800ef22:	68ac      	ldr	r4, [r5, #8]
 800ef24:	e7df      	b.n	800eee6 <_fflush_r+0x22>
 800ef26:	4b04      	ldr	r3, [pc, #16]	; (800ef38 <_fflush_r+0x74>)
 800ef28:	429c      	cmp	r4, r3
 800ef2a:	bf08      	it	eq
 800ef2c:	68ec      	ldreq	r4, [r5, #12]
 800ef2e:	e7da      	b.n	800eee6 <_fflush_r+0x22>
 800ef30:	0800fb84 	.word	0x0800fb84
 800ef34:	0800fba4 	.word	0x0800fba4
 800ef38:	0800fb64 	.word	0x0800fb64

0800ef3c <std>:
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	b510      	push	{r4, lr}
 800ef40:	4604      	mov	r4, r0
 800ef42:	e9c0 3300 	strd	r3, r3, [r0]
 800ef46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef4a:	6083      	str	r3, [r0, #8]
 800ef4c:	8181      	strh	r1, [r0, #12]
 800ef4e:	6643      	str	r3, [r0, #100]	; 0x64
 800ef50:	81c2      	strh	r2, [r0, #14]
 800ef52:	6183      	str	r3, [r0, #24]
 800ef54:	4619      	mov	r1, r3
 800ef56:	2208      	movs	r2, #8
 800ef58:	305c      	adds	r0, #92	; 0x5c
 800ef5a:	f7fd fcf5 	bl	800c948 <memset>
 800ef5e:	4b05      	ldr	r3, [pc, #20]	; (800ef74 <std+0x38>)
 800ef60:	6263      	str	r3, [r4, #36]	; 0x24
 800ef62:	4b05      	ldr	r3, [pc, #20]	; (800ef78 <std+0x3c>)
 800ef64:	62a3      	str	r3, [r4, #40]	; 0x28
 800ef66:	4b05      	ldr	r3, [pc, #20]	; (800ef7c <std+0x40>)
 800ef68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ef6a:	4b05      	ldr	r3, [pc, #20]	; (800ef80 <std+0x44>)
 800ef6c:	6224      	str	r4, [r4, #32]
 800ef6e:	6323      	str	r3, [r4, #48]	; 0x30
 800ef70:	bd10      	pop	{r4, pc}
 800ef72:	bf00      	nop
 800ef74:	0800f1f1 	.word	0x0800f1f1
 800ef78:	0800f213 	.word	0x0800f213
 800ef7c:	0800f24b 	.word	0x0800f24b
 800ef80:	0800f26f 	.word	0x0800f26f

0800ef84 <_cleanup_r>:
 800ef84:	4901      	ldr	r1, [pc, #4]	; (800ef8c <_cleanup_r+0x8>)
 800ef86:	f000 b8af 	b.w	800f0e8 <_fwalk_reent>
 800ef8a:	bf00      	nop
 800ef8c:	0800eec5 	.word	0x0800eec5

0800ef90 <__sfmoreglue>:
 800ef90:	b570      	push	{r4, r5, r6, lr}
 800ef92:	2268      	movs	r2, #104	; 0x68
 800ef94:	1e4d      	subs	r5, r1, #1
 800ef96:	4355      	muls	r5, r2
 800ef98:	460e      	mov	r6, r1
 800ef9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ef9e:	f7fd fd47 	bl	800ca30 <_malloc_r>
 800efa2:	4604      	mov	r4, r0
 800efa4:	b140      	cbz	r0, 800efb8 <__sfmoreglue+0x28>
 800efa6:	2100      	movs	r1, #0
 800efa8:	e9c0 1600 	strd	r1, r6, [r0]
 800efac:	300c      	adds	r0, #12
 800efae:	60a0      	str	r0, [r4, #8]
 800efb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800efb4:	f7fd fcc8 	bl	800c948 <memset>
 800efb8:	4620      	mov	r0, r4
 800efba:	bd70      	pop	{r4, r5, r6, pc}

0800efbc <__sfp_lock_acquire>:
 800efbc:	4801      	ldr	r0, [pc, #4]	; (800efc4 <__sfp_lock_acquire+0x8>)
 800efbe:	f7ff bcc0 	b.w	800e942 <__retarget_lock_acquire_recursive>
 800efc2:	bf00      	nop
 800efc4:	200010dd 	.word	0x200010dd

0800efc8 <__sfp_lock_release>:
 800efc8:	4801      	ldr	r0, [pc, #4]	; (800efd0 <__sfp_lock_release+0x8>)
 800efca:	f7ff bcbb 	b.w	800e944 <__retarget_lock_release_recursive>
 800efce:	bf00      	nop
 800efd0:	200010dd 	.word	0x200010dd

0800efd4 <__sinit_lock_acquire>:
 800efd4:	4801      	ldr	r0, [pc, #4]	; (800efdc <__sinit_lock_acquire+0x8>)
 800efd6:	f7ff bcb4 	b.w	800e942 <__retarget_lock_acquire_recursive>
 800efda:	bf00      	nop
 800efdc:	200010de 	.word	0x200010de

0800efe0 <__sinit_lock_release>:
 800efe0:	4801      	ldr	r0, [pc, #4]	; (800efe8 <__sinit_lock_release+0x8>)
 800efe2:	f7ff bcaf 	b.w	800e944 <__retarget_lock_release_recursive>
 800efe6:	bf00      	nop
 800efe8:	200010de 	.word	0x200010de

0800efec <__sinit>:
 800efec:	b510      	push	{r4, lr}
 800efee:	4604      	mov	r4, r0
 800eff0:	f7ff fff0 	bl	800efd4 <__sinit_lock_acquire>
 800eff4:	69a3      	ldr	r3, [r4, #24]
 800eff6:	b11b      	cbz	r3, 800f000 <__sinit+0x14>
 800eff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800effc:	f7ff bff0 	b.w	800efe0 <__sinit_lock_release>
 800f000:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f004:	6523      	str	r3, [r4, #80]	; 0x50
 800f006:	4b13      	ldr	r3, [pc, #76]	; (800f054 <__sinit+0x68>)
 800f008:	4a13      	ldr	r2, [pc, #76]	; (800f058 <__sinit+0x6c>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f00e:	42a3      	cmp	r3, r4
 800f010:	bf04      	itt	eq
 800f012:	2301      	moveq	r3, #1
 800f014:	61a3      	streq	r3, [r4, #24]
 800f016:	4620      	mov	r0, r4
 800f018:	f000 f820 	bl	800f05c <__sfp>
 800f01c:	6060      	str	r0, [r4, #4]
 800f01e:	4620      	mov	r0, r4
 800f020:	f000 f81c 	bl	800f05c <__sfp>
 800f024:	60a0      	str	r0, [r4, #8]
 800f026:	4620      	mov	r0, r4
 800f028:	f000 f818 	bl	800f05c <__sfp>
 800f02c:	2200      	movs	r2, #0
 800f02e:	60e0      	str	r0, [r4, #12]
 800f030:	2104      	movs	r1, #4
 800f032:	6860      	ldr	r0, [r4, #4]
 800f034:	f7ff ff82 	bl	800ef3c <std>
 800f038:	68a0      	ldr	r0, [r4, #8]
 800f03a:	2201      	movs	r2, #1
 800f03c:	2109      	movs	r1, #9
 800f03e:	f7ff ff7d 	bl	800ef3c <std>
 800f042:	68e0      	ldr	r0, [r4, #12]
 800f044:	2202      	movs	r2, #2
 800f046:	2112      	movs	r1, #18
 800f048:	f7ff ff78 	bl	800ef3c <std>
 800f04c:	2301      	movs	r3, #1
 800f04e:	61a3      	str	r3, [r4, #24]
 800f050:	e7d2      	b.n	800eff8 <__sinit+0xc>
 800f052:	bf00      	nop
 800f054:	0800f7e8 	.word	0x0800f7e8
 800f058:	0800ef85 	.word	0x0800ef85

0800f05c <__sfp>:
 800f05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f05e:	4607      	mov	r7, r0
 800f060:	f7ff ffac 	bl	800efbc <__sfp_lock_acquire>
 800f064:	4b1e      	ldr	r3, [pc, #120]	; (800f0e0 <__sfp+0x84>)
 800f066:	681e      	ldr	r6, [r3, #0]
 800f068:	69b3      	ldr	r3, [r6, #24]
 800f06a:	b913      	cbnz	r3, 800f072 <__sfp+0x16>
 800f06c:	4630      	mov	r0, r6
 800f06e:	f7ff ffbd 	bl	800efec <__sinit>
 800f072:	3648      	adds	r6, #72	; 0x48
 800f074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f078:	3b01      	subs	r3, #1
 800f07a:	d503      	bpl.n	800f084 <__sfp+0x28>
 800f07c:	6833      	ldr	r3, [r6, #0]
 800f07e:	b30b      	cbz	r3, 800f0c4 <__sfp+0x68>
 800f080:	6836      	ldr	r6, [r6, #0]
 800f082:	e7f7      	b.n	800f074 <__sfp+0x18>
 800f084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f088:	b9d5      	cbnz	r5, 800f0c0 <__sfp+0x64>
 800f08a:	4b16      	ldr	r3, [pc, #88]	; (800f0e4 <__sfp+0x88>)
 800f08c:	60e3      	str	r3, [r4, #12]
 800f08e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f092:	6665      	str	r5, [r4, #100]	; 0x64
 800f094:	f7ff fc54 	bl	800e940 <__retarget_lock_init_recursive>
 800f098:	f7ff ff96 	bl	800efc8 <__sfp_lock_release>
 800f09c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f0a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f0a4:	6025      	str	r5, [r4, #0]
 800f0a6:	61a5      	str	r5, [r4, #24]
 800f0a8:	2208      	movs	r2, #8
 800f0aa:	4629      	mov	r1, r5
 800f0ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f0b0:	f7fd fc4a 	bl	800c948 <memset>
 800f0b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f0b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f0bc:	4620      	mov	r0, r4
 800f0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0c0:	3468      	adds	r4, #104	; 0x68
 800f0c2:	e7d9      	b.n	800f078 <__sfp+0x1c>
 800f0c4:	2104      	movs	r1, #4
 800f0c6:	4638      	mov	r0, r7
 800f0c8:	f7ff ff62 	bl	800ef90 <__sfmoreglue>
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	6030      	str	r0, [r6, #0]
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	d1d5      	bne.n	800f080 <__sfp+0x24>
 800f0d4:	f7ff ff78 	bl	800efc8 <__sfp_lock_release>
 800f0d8:	230c      	movs	r3, #12
 800f0da:	603b      	str	r3, [r7, #0]
 800f0dc:	e7ee      	b.n	800f0bc <__sfp+0x60>
 800f0de:	bf00      	nop
 800f0e0:	0800f7e8 	.word	0x0800f7e8
 800f0e4:	ffff0001 	.word	0xffff0001

0800f0e8 <_fwalk_reent>:
 800f0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0ec:	4606      	mov	r6, r0
 800f0ee:	4688      	mov	r8, r1
 800f0f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f0f4:	2700      	movs	r7, #0
 800f0f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f0fa:	f1b9 0901 	subs.w	r9, r9, #1
 800f0fe:	d505      	bpl.n	800f10c <_fwalk_reent+0x24>
 800f100:	6824      	ldr	r4, [r4, #0]
 800f102:	2c00      	cmp	r4, #0
 800f104:	d1f7      	bne.n	800f0f6 <_fwalk_reent+0xe>
 800f106:	4638      	mov	r0, r7
 800f108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f10c:	89ab      	ldrh	r3, [r5, #12]
 800f10e:	2b01      	cmp	r3, #1
 800f110:	d907      	bls.n	800f122 <_fwalk_reent+0x3a>
 800f112:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f116:	3301      	adds	r3, #1
 800f118:	d003      	beq.n	800f122 <_fwalk_reent+0x3a>
 800f11a:	4629      	mov	r1, r5
 800f11c:	4630      	mov	r0, r6
 800f11e:	47c0      	blx	r8
 800f120:	4307      	orrs	r7, r0
 800f122:	3568      	adds	r5, #104	; 0x68
 800f124:	e7e9      	b.n	800f0fa <_fwalk_reent+0x12>

0800f126 <__swhatbuf_r>:
 800f126:	b570      	push	{r4, r5, r6, lr}
 800f128:	460e      	mov	r6, r1
 800f12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f12e:	2900      	cmp	r1, #0
 800f130:	b096      	sub	sp, #88	; 0x58
 800f132:	4614      	mov	r4, r2
 800f134:	461d      	mov	r5, r3
 800f136:	da08      	bge.n	800f14a <__swhatbuf_r+0x24>
 800f138:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f13c:	2200      	movs	r2, #0
 800f13e:	602a      	str	r2, [r5, #0]
 800f140:	061a      	lsls	r2, r3, #24
 800f142:	d410      	bmi.n	800f166 <__swhatbuf_r+0x40>
 800f144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f148:	e00e      	b.n	800f168 <__swhatbuf_r+0x42>
 800f14a:	466a      	mov	r2, sp
 800f14c:	f000 f8b6 	bl	800f2bc <_fstat_r>
 800f150:	2800      	cmp	r0, #0
 800f152:	dbf1      	blt.n	800f138 <__swhatbuf_r+0x12>
 800f154:	9a01      	ldr	r2, [sp, #4]
 800f156:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f15a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f15e:	425a      	negs	r2, r3
 800f160:	415a      	adcs	r2, r3
 800f162:	602a      	str	r2, [r5, #0]
 800f164:	e7ee      	b.n	800f144 <__swhatbuf_r+0x1e>
 800f166:	2340      	movs	r3, #64	; 0x40
 800f168:	2000      	movs	r0, #0
 800f16a:	6023      	str	r3, [r4, #0]
 800f16c:	b016      	add	sp, #88	; 0x58
 800f16e:	bd70      	pop	{r4, r5, r6, pc}

0800f170 <__smakebuf_r>:
 800f170:	898b      	ldrh	r3, [r1, #12]
 800f172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f174:	079d      	lsls	r5, r3, #30
 800f176:	4606      	mov	r6, r0
 800f178:	460c      	mov	r4, r1
 800f17a:	d507      	bpl.n	800f18c <__smakebuf_r+0x1c>
 800f17c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	6123      	str	r3, [r4, #16]
 800f184:	2301      	movs	r3, #1
 800f186:	6163      	str	r3, [r4, #20]
 800f188:	b002      	add	sp, #8
 800f18a:	bd70      	pop	{r4, r5, r6, pc}
 800f18c:	ab01      	add	r3, sp, #4
 800f18e:	466a      	mov	r2, sp
 800f190:	f7ff ffc9 	bl	800f126 <__swhatbuf_r>
 800f194:	9900      	ldr	r1, [sp, #0]
 800f196:	4605      	mov	r5, r0
 800f198:	4630      	mov	r0, r6
 800f19a:	f7fd fc49 	bl	800ca30 <_malloc_r>
 800f19e:	b948      	cbnz	r0, 800f1b4 <__smakebuf_r+0x44>
 800f1a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1a4:	059a      	lsls	r2, r3, #22
 800f1a6:	d4ef      	bmi.n	800f188 <__smakebuf_r+0x18>
 800f1a8:	f023 0303 	bic.w	r3, r3, #3
 800f1ac:	f043 0302 	orr.w	r3, r3, #2
 800f1b0:	81a3      	strh	r3, [r4, #12]
 800f1b2:	e7e3      	b.n	800f17c <__smakebuf_r+0xc>
 800f1b4:	4b0d      	ldr	r3, [pc, #52]	; (800f1ec <__smakebuf_r+0x7c>)
 800f1b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f1b8:	89a3      	ldrh	r3, [r4, #12]
 800f1ba:	6020      	str	r0, [r4, #0]
 800f1bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1c0:	81a3      	strh	r3, [r4, #12]
 800f1c2:	9b00      	ldr	r3, [sp, #0]
 800f1c4:	6163      	str	r3, [r4, #20]
 800f1c6:	9b01      	ldr	r3, [sp, #4]
 800f1c8:	6120      	str	r0, [r4, #16]
 800f1ca:	b15b      	cbz	r3, 800f1e4 <__smakebuf_r+0x74>
 800f1cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1d0:	4630      	mov	r0, r6
 800f1d2:	f000 f885 	bl	800f2e0 <_isatty_r>
 800f1d6:	b128      	cbz	r0, 800f1e4 <__smakebuf_r+0x74>
 800f1d8:	89a3      	ldrh	r3, [r4, #12]
 800f1da:	f023 0303 	bic.w	r3, r3, #3
 800f1de:	f043 0301 	orr.w	r3, r3, #1
 800f1e2:	81a3      	strh	r3, [r4, #12]
 800f1e4:	89a0      	ldrh	r0, [r4, #12]
 800f1e6:	4305      	orrs	r5, r0
 800f1e8:	81a5      	strh	r5, [r4, #12]
 800f1ea:	e7cd      	b.n	800f188 <__smakebuf_r+0x18>
 800f1ec:	0800ef85 	.word	0x0800ef85

0800f1f0 <__sread>:
 800f1f0:	b510      	push	{r4, lr}
 800f1f2:	460c      	mov	r4, r1
 800f1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1f8:	f000 f894 	bl	800f324 <_read_r>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	bfab      	itete	ge
 800f200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f202:	89a3      	ldrhlt	r3, [r4, #12]
 800f204:	181b      	addge	r3, r3, r0
 800f206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f20a:	bfac      	ite	ge
 800f20c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f20e:	81a3      	strhlt	r3, [r4, #12]
 800f210:	bd10      	pop	{r4, pc}

0800f212 <__swrite>:
 800f212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f216:	461f      	mov	r7, r3
 800f218:	898b      	ldrh	r3, [r1, #12]
 800f21a:	05db      	lsls	r3, r3, #23
 800f21c:	4605      	mov	r5, r0
 800f21e:	460c      	mov	r4, r1
 800f220:	4616      	mov	r6, r2
 800f222:	d505      	bpl.n	800f230 <__swrite+0x1e>
 800f224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f228:	2302      	movs	r3, #2
 800f22a:	2200      	movs	r2, #0
 800f22c:	f000 f868 	bl	800f300 <_lseek_r>
 800f230:	89a3      	ldrh	r3, [r4, #12]
 800f232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f23a:	81a3      	strh	r3, [r4, #12]
 800f23c:	4632      	mov	r2, r6
 800f23e:	463b      	mov	r3, r7
 800f240:	4628      	mov	r0, r5
 800f242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f246:	f000 b817 	b.w	800f278 <_write_r>

0800f24a <__sseek>:
 800f24a:	b510      	push	{r4, lr}
 800f24c:	460c      	mov	r4, r1
 800f24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f252:	f000 f855 	bl	800f300 <_lseek_r>
 800f256:	1c43      	adds	r3, r0, #1
 800f258:	89a3      	ldrh	r3, [r4, #12]
 800f25a:	bf15      	itete	ne
 800f25c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f25e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f266:	81a3      	strheq	r3, [r4, #12]
 800f268:	bf18      	it	ne
 800f26a:	81a3      	strhne	r3, [r4, #12]
 800f26c:	bd10      	pop	{r4, pc}

0800f26e <__sclose>:
 800f26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f272:	f000 b813 	b.w	800f29c <_close_r>
	...

0800f278 <_write_r>:
 800f278:	b538      	push	{r3, r4, r5, lr}
 800f27a:	4d07      	ldr	r5, [pc, #28]	; (800f298 <_write_r+0x20>)
 800f27c:	4604      	mov	r4, r0
 800f27e:	4608      	mov	r0, r1
 800f280:	4611      	mov	r1, r2
 800f282:	2200      	movs	r2, #0
 800f284:	602a      	str	r2, [r5, #0]
 800f286:	461a      	mov	r2, r3
 800f288:	f7f5 ff39 	bl	80050fe <_write>
 800f28c:	1c43      	adds	r3, r0, #1
 800f28e:	d102      	bne.n	800f296 <_write_r+0x1e>
 800f290:	682b      	ldr	r3, [r5, #0]
 800f292:	b103      	cbz	r3, 800f296 <_write_r+0x1e>
 800f294:	6023      	str	r3, [r4, #0]
 800f296:	bd38      	pop	{r3, r4, r5, pc}
 800f298:	200010d8 	.word	0x200010d8

0800f29c <_close_r>:
 800f29c:	b538      	push	{r3, r4, r5, lr}
 800f29e:	4d06      	ldr	r5, [pc, #24]	; (800f2b8 <_close_r+0x1c>)
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	4604      	mov	r4, r0
 800f2a4:	4608      	mov	r0, r1
 800f2a6:	602b      	str	r3, [r5, #0]
 800f2a8:	f7f5 ff45 	bl	8005136 <_close>
 800f2ac:	1c43      	adds	r3, r0, #1
 800f2ae:	d102      	bne.n	800f2b6 <_close_r+0x1a>
 800f2b0:	682b      	ldr	r3, [r5, #0]
 800f2b2:	b103      	cbz	r3, 800f2b6 <_close_r+0x1a>
 800f2b4:	6023      	str	r3, [r4, #0]
 800f2b6:	bd38      	pop	{r3, r4, r5, pc}
 800f2b8:	200010d8 	.word	0x200010d8

0800f2bc <_fstat_r>:
 800f2bc:	b538      	push	{r3, r4, r5, lr}
 800f2be:	4d07      	ldr	r5, [pc, #28]	; (800f2dc <_fstat_r+0x20>)
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	4608      	mov	r0, r1
 800f2c6:	4611      	mov	r1, r2
 800f2c8:	602b      	str	r3, [r5, #0]
 800f2ca:	f7f5 ff40 	bl	800514e <_fstat>
 800f2ce:	1c43      	adds	r3, r0, #1
 800f2d0:	d102      	bne.n	800f2d8 <_fstat_r+0x1c>
 800f2d2:	682b      	ldr	r3, [r5, #0]
 800f2d4:	b103      	cbz	r3, 800f2d8 <_fstat_r+0x1c>
 800f2d6:	6023      	str	r3, [r4, #0]
 800f2d8:	bd38      	pop	{r3, r4, r5, pc}
 800f2da:	bf00      	nop
 800f2dc:	200010d8 	.word	0x200010d8

0800f2e0 <_isatty_r>:
 800f2e0:	b538      	push	{r3, r4, r5, lr}
 800f2e2:	4d06      	ldr	r5, [pc, #24]	; (800f2fc <_isatty_r+0x1c>)
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	4608      	mov	r0, r1
 800f2ea:	602b      	str	r3, [r5, #0]
 800f2ec:	f7f5 ff3f 	bl	800516e <_isatty>
 800f2f0:	1c43      	adds	r3, r0, #1
 800f2f2:	d102      	bne.n	800f2fa <_isatty_r+0x1a>
 800f2f4:	682b      	ldr	r3, [r5, #0]
 800f2f6:	b103      	cbz	r3, 800f2fa <_isatty_r+0x1a>
 800f2f8:	6023      	str	r3, [r4, #0]
 800f2fa:	bd38      	pop	{r3, r4, r5, pc}
 800f2fc:	200010d8 	.word	0x200010d8

0800f300 <_lseek_r>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	4d07      	ldr	r5, [pc, #28]	; (800f320 <_lseek_r+0x20>)
 800f304:	4604      	mov	r4, r0
 800f306:	4608      	mov	r0, r1
 800f308:	4611      	mov	r1, r2
 800f30a:	2200      	movs	r2, #0
 800f30c:	602a      	str	r2, [r5, #0]
 800f30e:	461a      	mov	r2, r3
 800f310:	f7f5 ff38 	bl	8005184 <_lseek>
 800f314:	1c43      	adds	r3, r0, #1
 800f316:	d102      	bne.n	800f31e <_lseek_r+0x1e>
 800f318:	682b      	ldr	r3, [r5, #0]
 800f31a:	b103      	cbz	r3, 800f31e <_lseek_r+0x1e>
 800f31c:	6023      	str	r3, [r4, #0]
 800f31e:	bd38      	pop	{r3, r4, r5, pc}
 800f320:	200010d8 	.word	0x200010d8

0800f324 <_read_r>:
 800f324:	b538      	push	{r3, r4, r5, lr}
 800f326:	4d07      	ldr	r5, [pc, #28]	; (800f344 <_read_r+0x20>)
 800f328:	4604      	mov	r4, r0
 800f32a:	4608      	mov	r0, r1
 800f32c:	4611      	mov	r1, r2
 800f32e:	2200      	movs	r2, #0
 800f330:	602a      	str	r2, [r5, #0]
 800f332:	461a      	mov	r2, r3
 800f334:	f7f5 fec6 	bl	80050c4 <_read>
 800f338:	1c43      	adds	r3, r0, #1
 800f33a:	d102      	bne.n	800f342 <_read_r+0x1e>
 800f33c:	682b      	ldr	r3, [r5, #0]
 800f33e:	b103      	cbz	r3, 800f342 <_read_r+0x1e>
 800f340:	6023      	str	r3, [r4, #0]
 800f342:	bd38      	pop	{r3, r4, r5, pc}
 800f344:	200010d8 	.word	0x200010d8

0800f348 <_init>:
 800f348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f34a:	bf00      	nop
 800f34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f34e:	bc08      	pop	{r3}
 800f350:	469e      	mov	lr, r3
 800f352:	4770      	bx	lr

0800f354 <_fini>:
 800f354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f356:	bf00      	nop
 800f358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f35a:	bc08      	pop	{r3}
 800f35c:	469e      	mov	lr, r3
 800f35e:	4770      	bx	lr
